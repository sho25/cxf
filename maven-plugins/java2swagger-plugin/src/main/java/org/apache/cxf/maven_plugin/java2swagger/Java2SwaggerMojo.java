begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|maven_plugin
operator|.
name|java2swagger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonInclude
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|util
operator|.
name|DefaultPrettyPrinter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|reflections
operator|.
name|Reflections
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|annotations
operator|.
name|Api
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|jaxrs
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Contact
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Info
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|License
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Scheme
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|models
operator|.
name|Swagger
import|;
end_import

begin_import
import|import
name|io
operator|.
name|swagger
operator|.
name|util
operator|.
name|Yaml
import|;
end_import

begin_comment
comment|/**  * @goal java2swagger  * @description CXF Java To swagger payload Tool  * @requiresDependencyResolution test  * @threadSafe  */
end_comment

begin_class
specifier|public
class|class
name|Java2SwaggerMojo
extends|extends
name|AbstractMojo
block|{
comment|/**     * @parameter     * @required     */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|resourcePackages
decl_stmt|;
comment|/**      * @parameter default-value="${project.version}"      */
specifier|private
name|String
name|version
decl_stmt|;
comment|/**      * @parameter default-value="/api"      */
specifier|private
name|String
name|basePath
decl_stmt|;
comment|/**      * @parameter default-value="${project.name}"      */
specifier|private
name|String
name|title
decl_stmt|;
comment|/**      * @parameter default-value="${project.description}"      */
specifier|private
name|String
name|description
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|String
name|contact
decl_stmt|;
comment|/**      * @parameter default-value="Apache 2.0 License"      */
specifier|private
name|String
name|license
decl_stmt|;
comment|/**      * @parameter default-value="http://www.apache.org/licenses/LICENSE-2.0.html"      */
specifier|private
name|String
name|licenseUrl
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|String
name|host
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|schemes
decl_stmt|;
comment|/**      * @parameter default-value="json"      */
specifier|private
name|String
name|payload
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|String
name|outputFile
decl_stmt|;
comment|/**      * Attach the generated swagger file to the list of files to be deployed      * on install. This means the swagger file will be copied to the repository      * with groupId, artifactId and version of the project and type "json" or "yaml".      *<p/>      * With this option you can use the maven repository as a Service Repository.      *      * @parameter default-value="false"      */
specifier|private
name|Boolean
name|attachSwagger
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|String
name|classifier
decl_stmt|;
comment|/**      * @parameter expression="${project}"      * @required      */
specifier|private
name|MavenProject
name|project
decl_stmt|;
comment|/**      * Maven ProjectHelper.      *      * @component      * @readonly      */
specifier|private
name|MavenProjectHelper
name|projectHelper
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|String
name|outputFileName
decl_stmt|;
specifier|private
name|ClassLoader
name|resourceClassLoader
decl_stmt|;
specifier|private
name|Swagger
name|swagger
decl_stmt|;
specifier|private
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|resourceClasses
decl_stmt|;
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
name|configureSwagger
argument_list|()
expr_stmt|;
name|loadSwaggerAnnotation
argument_list|()
expr_stmt|;
name|generateSwaggerPayLoad
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|generateSwaggerPayLoad
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
name|outputFile
operator|==
literal|null
operator|&&
name|project
operator|!=
literal|null
condition|)
block|{
comment|// Put the json in target/generated/json
comment|// put the yaml in target/generated/yaml
name|String
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|outputFileName
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|outputFileName
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resourceClasses
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|name
operator|=
name|resourceClasses
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
literal|"swagger"
expr_stmt|;
block|}
name|outputFile
operator|=
operator|(
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getDirectory
argument_list|()
operator|+
literal|"/generated/"
operator|+
name|payload
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|"."
operator|+
name|payload
operator|.
name|toLowerCase
argument_list|()
operator|)
operator|.
name|replace
argument_list|(
literal|"/"
argument_list|,
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
block|}
name|BufferedWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|mkDir
argument_list|(
operator|new
name|File
argument_list|(
name|outputFile
argument_list|)
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|outputFile
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"json"
operator|.
name|equals
argument_list|(
name|this
operator|.
name|payload
argument_list|)
condition|)
block|{
name|ObjectWriter
name|jsonWriter
init|=
name|mapper
operator|.
name|writer
argument_list|(
operator|new
name|DefaultPrettyPrinter
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|jsonWriter
operator|.
name|writeValueAsString
argument_list|(
name|swagger
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"yaml"
operator|.
name|equals
argument_list|(
name|this
operator|.
name|payload
argument_list|)
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|Yaml
operator|.
name|pretty
argument_list|()
operator|.
name|writeValueAsString
argument_list|(
name|swagger
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Attach the generated swagger file to the artifacts that get deployed
comment|// with the enclosing project
if|if
condition|(
name|attachSwagger
operator|&&
name|outputFile
operator|!=
literal|null
condition|)
block|{
name|File
name|jsonFile
init|=
operator|new
name|File
argument_list|(
name|outputFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|classifier
operator|!=
literal|null
condition|)
block|{
name|projectHelper
operator|.
name|attachArtifact
argument_list|(
name|project
argument_list|,
name|payload
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|classifier
argument_list|,
name|jsonFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|projectHelper
operator|.
name|attachArtifact
argument_list|(
name|project
argument_list|,
name|payload
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|jsonFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|ClassLoader
name|getClassLoader
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
name|resourceClassLoader
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|?
argument_list|>
name|runtimeClasspathElements
init|=
name|project
operator|.
name|getRuntimeClasspathElements
argument_list|()
decl_stmt|;
name|URL
index|[]
name|runtimeUrls
init|=
operator|new
name|URL
index|[
name|runtimeClasspathElements
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runtimeClasspathElements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|element
init|=
operator|(
name|String
operator|)
name|runtimeClasspathElements
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|runtimeUrls
index|[
name|i
index|]
operator|=
operator|new
name|File
argument_list|(
name|element
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
name|resourceClassLoader
operator|=
operator|new
name|URLClassLoader
argument_list|(
name|runtimeUrls
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|resourceClassLoader
return|;
block|}
specifier|private
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|loadResourceClasses
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|resourceClasses
operator|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|this
operator|.
name|resourcePackages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|resourcePackage
range|:
name|resourcePackages
control|)
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|c
init|=
operator|new
name|Reflections
argument_list|(
name|resourcePackage
argument_list|)
operator|.
name|getTypesAnnotatedWith
argument_list|(
name|clazz
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|resourceClasses
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|inherited
init|=
operator|new
name|Reflections
argument_list|(
name|resourcePackage
argument_list|)
operator|.
name|getTypesAnnotatedWith
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|resourceClasses
operator|.
name|addAll
argument_list|(
name|inherited
argument_list|)
expr_stmt|;
block|}
return|return
name|resourceClasses
return|;
block|}
specifier|private
name|void
name|loadSwaggerAnnotation
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|swagger
argument_list|)
decl_stmt|;
name|swagger
operator|=
name|reader
operator|.
name|read
argument_list|(
name|loadResourceClasses
argument_list|(
name|Api
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|configureSwagger
parameter_list|()
block|{
name|swagger
operator|=
operator|new
name|Swagger
argument_list|()
expr_stmt|;
name|mapper
operator|.
name|setSerializationInclusion
argument_list|(
name|JsonInclude
operator|.
name|Include
operator|.
name|NON_NULL
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|setSerializationInclusion
argument_list|(
name|JsonInclude
operator|.
name|Include
operator|.
name|NON_EMPTY
argument_list|)
expr_stmt|;
name|Info
name|info
init|=
operator|new
name|Info
argument_list|()
decl_stmt|;
name|Contact
name|swaggerContact
init|=
operator|new
name|Contact
argument_list|()
decl_stmt|;
name|License
name|swaggerLicense
init|=
operator|new
name|License
argument_list|()
decl_stmt|;
name|swaggerLicense
operator|.
name|name
argument_list|(
name|this
operator|.
name|license
argument_list|)
operator|.
name|url
argument_list|(
name|this
operator|.
name|licenseUrl
argument_list|)
expr_stmt|;
name|swaggerContact
operator|.
name|name
argument_list|(
name|this
operator|.
name|contact
argument_list|)
expr_stmt|;
name|info
operator|.
name|version
argument_list|(
name|this
operator|.
name|version
argument_list|)
operator|.
name|description
argument_list|(
name|this
operator|.
name|description
argument_list|)
operator|.
name|contact
argument_list|(
name|swaggerContact
argument_list|)
operator|.
name|license
argument_list|(
name|swaggerLicense
argument_list|)
operator|.
name|title
argument_list|(
name|this
operator|.
name|title
argument_list|)
expr_stmt|;
name|swagger
operator|.
name|setInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|schemes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|scheme
range|:
name|this
operator|.
name|schemes
control|)
block|{
name|swagger
operator|.
name|scheme
argument_list|(
name|Scheme
operator|.
name|forValue
argument_list|(
name|scheme
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|swagger
operator|.
name|setHost
argument_list|(
name|this
operator|.
name|host
argument_list|)
expr_stmt|;
name|swagger
operator|.
name|setBasePath
argument_list|(
name|this
operator|.
name|basePath
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

