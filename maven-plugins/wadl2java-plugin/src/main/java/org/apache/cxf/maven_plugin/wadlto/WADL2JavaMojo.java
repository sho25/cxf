begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|maven_plugin
operator|.
name|wadlto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|maven_plugin
operator|.
name|common
operator|.
name|ClassLoaderSwitcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|ResolutionScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|plexus
operator|.
name|build
operator|.
name|incremental
operator|.
name|BuildContext
import|;
end_import

begin_comment
comment|/**  * CXF WADL To Java Tool  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"wadl2java"
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|GENERATE_SOURCES
argument_list|,
name|threadSafe
operator|=
literal|true
argument_list|,
name|requiresDependencyResolution
operator|=
name|ResolutionScope
operator|.
name|TEST
argument_list|)
specifier|public
class|class
name|WADL2JavaMojo
extends|extends
name|AbstractCodeGeneratorMojo
block|{
annotation|@
name|Parameter
name|WadlOption
name|wadlOptions
index|[]
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"cxf.wadlRoot"
argument_list|,
name|defaultValue
operator|=
literal|"${basedir}/src/main/resources/wadl"
argument_list|)
name|File
name|wadlRoot
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"cxf.testWadlRoot"
argument_list|,
name|defaultValue
operator|=
literal|"${basedir}/src/test/resources/wadl"
argument_list|)
name|File
name|testWadlRoot
decl_stmt|;
annotation|@
name|Component
name|BuildContext
name|buildContext
decl_stmt|;
specifier|private
name|void
name|mergeOptions
parameter_list|(
name|List
argument_list|<
name|WadlOption
argument_list|>
name|effectiveOptions
parameter_list|)
block|{
if|if
condition|(
name|wadlOptions
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|File
name|outputDirFile
init|=
name|testSourceRoot
operator|==
literal|null
condition|?
name|sourceRoot
else|:
name|testSourceRoot
decl_stmt|;
for|for
control|(
name|WadlOption
name|o
range|:
name|wadlOptions
control|)
block|{
if|if
condition|(
name|defaultOptions
operator|!=
literal|null
condition|)
block|{
name|o
operator|.
name|merge
argument_list|(
name|defaultOptions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|.
name|getOutputDir
argument_list|()
operator|==
literal|null
condition|)
block|{
name|o
operator|.
name|setOutputDir
argument_list|(
name|outputDirFile
argument_list|)
expr_stmt|;
block|}
name|effectiveOptions
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"9"
argument_list|)
condition|)
block|{
name|fork
operator|=
literal|"true"
expr_stmt|;
name|additionalJvmArgs
operator|=
literal|"--add-modules java.activation,java.xml.bind,java.xml.ws "
operator|+
literal|"--add-exports=java.xml.bind/com.sun.xml.internal.bind.v2.runtime=ALL-UNNAMED "
operator|+
literal|"--add-exports=jdk.xml.dom/org.w3c.dom.html=ALL-UNNAMED "
operator|+
literal|"--add-exports=java.xml/com.sun.org.apache.xerces.internal.impl.xs=ALL-UNNAMED "
operator|+
literal|"--add-exports=java.xml.bind/com.sun.xml.internal.bind.marshaller=ALL-UNNAMED "
operator|+
literal|"--add-opens java.xml.ws/javax.xml.ws.wsaddressing=ALL-UNNAMED "
operator|+
literal|"--add-opens java.base/java.security=ALL-UNNAMED "
operator|+
literal|"--add-opens java.base/java.net=ALL-UNNAMED "
operator|+
literal|"--add-opens java.base/java.lang=ALL-UNNAMED "
operator|+
literal|"--add-opens java.base/java.util=ALL-UNNAMED "
operator|+
literal|"--add-opens java.base/java.util.concurrent=ALL-UNNAMED "
operator|+
operator|(
name|additionalJvmArgs
operator|==
literal|null
condition|?
literal|""
else|:
name|additionalJvmArgs
operator|)
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.apache.cxf.JDKBugHacks.defaultUsesCaches"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|File
name|classesDir
init|=
operator|new
name|File
argument_list|(
name|classesDirectory
argument_list|)
decl_stmt|;
name|classesDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|markerDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// add the generated source into compile source
comment|// do this step first to ensure the source folder will be added to the Eclipse classpath
if|if
condition|(
name|project
operator|!=
literal|null
operator|&&
name|sourceRoot
operator|!=
literal|null
condition|)
block|{
name|project
operator|.
name|addCompileSourceRoot
argument_list|(
name|sourceRoot
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|!=
literal|null
operator|&&
name|testSourceRoot
operator|!=
literal|null
condition|)
block|{
name|project
operator|.
name|addTestCompileSourceRoot
argument_list|(
name|testSourceRoot
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if this is an m2e configuration build then return immediately without doing any work
if|if
condition|(
name|project
operator|!=
literal|null
operator|&&
name|buildContext
operator|.
name|isIncremental
argument_list|()
operator|&&
operator|!
name|buildContext
operator|.
name|hasDelta
argument_list|(
name|project
operator|.
name|getBasedir
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|WadlOption
argument_list|>
name|effectiveWsdlOptions
init|=
name|createWadlOptionsFromScansAndExplicitWadlOptions
argument_list|(
name|classesDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|effectiveWsdlOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Nothing to generate"
argument_list|)
expr_stmt|;
return|return;
block|}
name|ClassLoaderSwitcher
name|classLoaderSwitcher
init|=
operator|new
name|ClassLoaderSwitcher
argument_list|(
name|getLog
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|Bus
name|bus
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Set
argument_list|<
name|URI
argument_list|>
name|cp
init|=
name|classLoaderSwitcher
operator|.
name|switchClassLoader
argument_list|(
name|project
argument_list|,
name|useCompileClasspath
argument_list|,
name|classesDir
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"once"
operator|.
name|equals
argument_list|(
name|fork
argument_list|)
operator|||
literal|"true"
operator|.
name|equals
argument_list|(
name|fork
argument_list|)
condition|)
block|{
name|forkOnce
argument_list|(
name|cp
argument_list|,
name|effectiveWsdlOptions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|WadlOption
name|o
range|:
name|effectiveWsdlOptions
control|)
block|{
name|bus
operator|=
name|callCodeGenerator
argument_list|(
name|o
argument_list|,
name|bus
argument_list|,
name|cp
argument_list|)
expr_stmt|;
name|File
name|dirs
index|[]
init|=
name|o
operator|.
name|getDeleteDirs
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|dirs
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|result
operator|=
name|result
operator|&&
name|deleteDir
argument_list|(
name|dirs
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
comment|// cleanup as much as we can.
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|classLoaderSwitcher
operator|.
name|restoreClassLoader
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return effective WsdlOptions      * @throws MojoExecutionException      */
specifier|private
name|List
argument_list|<
name|WadlOption
argument_list|>
name|createWadlOptionsFromScansAndExplicitWadlOptions
parameter_list|(
name|File
name|classesDir
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|List
argument_list|<
name|WadlOption
argument_list|>
name|effectiveOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|mergeOptions
argument_list|(
name|effectiveOptions
argument_list|)
expr_stmt|;
name|downloadRemoteDocs
argument_list|(
name|effectiveOptions
argument_list|)
expr_stmt|;
if|if
condition|(
name|effectiveOptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|includes
operator|==
literal|null
condition|)
block|{
name|includes
operator|=
operator|new
name|String
index|[]
block|{
literal|"*.wadl"
block|}
expr_stmt|;
block|}
name|File
name|defaultRoot
init|=
name|wadlRoot
operator|!=
literal|null
operator|&&
name|wadlRoot
operator|.
name|exists
argument_list|()
condition|?
name|wadlRoot
else|:
name|testWadlRoot
decl_stmt|;
name|effectiveOptions
operator|.
name|addAll
argument_list|(
name|OptionLoader
operator|.
name|loadWadlOptionsFromFile
argument_list|(
name|defaultRoot
argument_list|,
name|includes
argument_list|,
name|excludes
argument_list|,
name|defaultOptions
argument_list|,
name|classesDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|effectiveOptions
return|;
block|}
block|}
end_class

end_unit

