begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|maven_plugin
operator|.
name|wadlto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|maven_plugin
operator|.
name|common
operator|.
name|DocumentArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|maven_plugin
operator|.
name|common
operator|.
name|ForkOnceCodeGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wadlto
operator|.
name|WADLToJava
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|execution
operator|.
name|MavenSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|RepositorySystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|jar
operator|.
name|JarArchiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|jar
operator|.
name|Manifest
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|cli
operator|.
name|CommandLineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|cli
operator|.
name|CommandLineUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|cli
operator|.
name|Commandline
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractCodeGeneratorMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * Source Root      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"cxf.testSourceRoot"
argument_list|)
name|File
name|testSourceRoot
decl_stmt|;
comment|/**      * Path where the generated sources should be placed      */
annotation|@
name|Parameter
argument_list|(
name|required
operator|=
literal|true
argument_list|,
name|property
operator|=
literal|"cxf.sourceRoot"
argument_list|,
name|defaultValue
operator|=
literal|"${project.build.directory}/generated-sources/cxf"
argument_list|)
name|File
name|sourceRoot
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|required
operator|=
literal|true
argument_list|,
name|property
operator|=
literal|"project.build.outputDirectory"
argument_list|)
name|String
name|classesDirectory
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|required
operator|=
literal|true
argument_list|,
name|property
operator|=
literal|"project"
argument_list|)
name|MavenProject
name|project
decl_stmt|;
comment|/**      * Default options to be used when a wadl has not had it's options explicitly specified.      */
annotation|@
name|Parameter
name|Option
name|defaultOptions
init|=
operator|new
name|Option
argument_list|()
decl_stmt|;
comment|/**      * Directory in which the "DONE" markers are saved that      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"cxf.markerDirectory"
argument_list|,
name|defaultValue
operator|=
literal|"${project.build.directory}/cxf-codegen-plugin-markers"
argument_list|)
name|File
name|markerDirectory
decl_stmt|;
comment|/**      * Use the compile classpath rather than the test classpath for execution useful if the test dependencies      * clash with those of wadl2java      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"cxf.useCompileClasspath"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
name|boolean
name|useCompileClasspath
decl_stmt|;
comment|/**      * Disables the scanning of the wadlRoot/testWadlRoot directories configured above.      * By default, we scan for *.wadl (see include/exclude params as well) in the wadlRoot      * directories and run wadl2java on all the wadl's we find.    This disables that scan      * and requires an explicit wadlOption to be set for each wadl that needs to be processed.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"cxf.disableDirectoryScan"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
name|boolean
name|disableDirectoryScan
decl_stmt|;
comment|/**      * By default all maven dependencies of type "wadl" are added to the effective wadlOptions. Setting this      * parameter to true disables this functionality      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"cxf.disableDependencyScan"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
name|boolean
name|disableDependencyScan
decl_stmt|;
comment|/**      * A list of wadl files to include. Can contain ant-style wildcards and double wildcards. Defaults to      * *.wadl      */
annotation|@
name|Parameter
name|String
name|includes
index|[]
decl_stmt|;
comment|/**      * A list of wadl files to exclude. Can contain ant-style wildcards and double wildcards.      */
annotation|@
name|Parameter
name|String
name|excludes
index|[]
decl_stmt|;
comment|/**      * Allows running the JavaToWs in a separate process.      * Valid values are "false", "always", and "once"      * The value of "true" is equal to "once"      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
name|String
name|fork
decl_stmt|;
comment|/**      * Sets the JVM arguments (i.e.<code>-Xms128m -Xmx128m</code>) if fork is set to<code>true</code>.      */
annotation|@
name|Parameter
name|String
name|additionalJvmArgs
decl_stmt|;
comment|/**      * The Maven session.      */
annotation|@
name|Parameter
argument_list|(
name|readonly
operator|=
literal|true
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|property
operator|=
literal|"session"
argument_list|)
specifier|private
name|MavenSession
name|mavenSession
decl_stmt|;
comment|/**      * The plugin dependencies, needed for the fork mode.      */
annotation|@
name|Parameter
argument_list|(
name|readonly
operator|=
literal|true
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|property
operator|=
literal|"plugin.artifacts"
argument_list|)
specifier|private
name|List
argument_list|<
name|Artifact
argument_list|>
name|pluginArtifacts
decl_stmt|;
comment|/**      * Sets the Java executable to use when fork parameter is<code>true</code>.      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${java.home}/bin/java"
argument_list|)
specifier|private
name|String
name|javaExecutable
decl_stmt|;
annotation|@
name|Component
specifier|private
name|RepositorySystem
name|repositorySystem
decl_stmt|;
specifier|private
name|ClassLoader
name|resourceClassLoader
decl_stmt|;
specifier|private
name|Artifact
name|resolveRemoteWadlArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
comment|/**          * First try to find the artifact in the reactor projects of the maven session.          * So an artifact that is not yet built can be resolved          */
name|List
argument_list|<
name|MavenProject
argument_list|>
name|rProjects
init|=
name|mavenSession
operator|.
name|getProjects
argument_list|()
decl_stmt|;
for|for
control|(
name|MavenProject
name|rProject
range|:
name|rProjects
control|)
block|{
if|if
condition|(
name|artifact
operator|.
name|getGroupId
argument_list|()
operator|.
name|equals
argument_list|(
name|rProject
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|&&
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|.
name|equals
argument_list|(
name|rProject
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|&&
name|artifact
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|rProject
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|Artifact
argument_list|>
name|artifacts
init|=
name|rProject
operator|.
name|getArtifacts
argument_list|()
decl_stmt|;
for|for
control|(
name|Artifact
name|pArtifact
range|:
name|artifacts
control|)
block|{
if|if
condition|(
literal|"wadl"
operator|.
name|equals
argument_list|(
name|pArtifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|pArtifact
return|;
block|}
block|}
block|}
block|}
name|ArtifactResolutionRequest
name|request
init|=
operator|new
name|ArtifactResolutionRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|request
operator|.
name|setResolveRoot
argument_list|(
literal|true
argument_list|)
operator|.
name|setResolveTransitively
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|request
operator|.
name|setServers
argument_list|(
name|mavenSession
operator|.
name|getRequest
argument_list|()
operator|.
name|getServers
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMirrors
argument_list|(
name|mavenSession
operator|.
name|getRequest
argument_list|()
operator|.
name|getMirrors
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setProxies
argument_list|(
name|mavenSession
operator|.
name|getRequest
argument_list|()
operator|.
name|getProxies
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setLocalRepository
argument_list|(
name|mavenSession
operator|.
name|getLocalRepository
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRemoteRepositories
argument_list|(
name|mavenSession
operator|.
name|getRequest
argument_list|()
operator|.
name|getRemoteRepositories
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactResolutionResult
name|result
init|=
name|repositorySystem
operator|.
name|resolve
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Artifact
name|resolvedArtifact
init|=
name|result
operator|.
name|getOriginatingArtifact
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolvedArtifact
operator|==
literal|null
operator|&&
operator|!
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|result
operator|.
name|getArtifacts
argument_list|()
argument_list|)
condition|)
block|{
name|resolvedArtifact
operator|=
name|result
operator|.
name|getArtifacts
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|resolvedArtifact
return|;
block|}
specifier|protected
name|void
name|downloadRemoteDocs
parameter_list|(
name|List
argument_list|<
name|WadlOption
argument_list|>
name|effectiveOptions
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
for|for
control|(
name|WadlOption
name|option
range|:
name|effectiveOptions
control|)
block|{
name|DocumentArtifact
name|wadlA
init|=
name|option
operator|.
name|getWadlArtifact
argument_list|()
decl_stmt|;
if|if
condition|(
name|wadlA
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Artifact
name|wadlArtifact
init|=
name|repositorySystem
operator|.
name|createArtifact
argument_list|(
name|wadlA
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|wadlA
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|wadlA
operator|.
name|getVersion
argument_list|()
argument_list|,
name|wadlA
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|wadlArtifact
operator|=
name|resolveRemoteWadlArtifact
argument_list|(
name|wadlArtifact
argument_list|)
expr_stmt|;
if|if
condition|(
name|wadlArtifact
operator|!=
literal|null
condition|)
block|{
name|String
name|path
init|=
name|wadlArtifact
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Resolved WADL artifact to file "
operator|+
name|path
argument_list|)
expr_stmt|;
name|option
operator|.
name|setWadl
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addPluginArtifact
parameter_list|(
name|Set
argument_list|<
name|URI
argument_list|>
name|artifactsPath
parameter_list|)
block|{
comment|//for Maven 2.x, the actual artifact isn't in the list....  need to try and find it
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".class"
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
literal|"jar"
operator|.
name|equals
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
literal|"!"
argument_list|)
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
literal|'!'
argument_list|)
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|,
literal|null
argument_list|,
name|url
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getSchemeSpecificPart
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|uri
operator|.
name|toString
argument_list|()
decl_stmt|;
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|6
operator|-
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|artifactsPath
operator|.
name|add
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ex.printStackTrace();
block|}
block|}
specifier|protected
name|void
name|forkOnce
parameter_list|(
name|Set
argument_list|<
name|URI
argument_list|>
name|classPath
parameter_list|,
name|List
argument_list|<
name|WadlOption
argument_list|>
name|effectiveOptions
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|List
argument_list|<
name|WadlOption
argument_list|>
name|toDo
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|wargs
init|=
operator|new
name|LinkedList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WadlOption
name|option
range|:
name|effectiveOptions
control|)
block|{
name|File
name|outputDirFile
init|=
name|option
operator|.
name|getOutputDir
argument_list|()
decl_stmt|;
name|outputDirFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|URI
name|basedir
init|=
name|project
operator|.
name|getBasedir
argument_list|()
operator|.
name|toURI
argument_list|()
decl_stmt|;
for|for
control|(
name|URI
name|wadlURI
range|:
name|option
operator|.
name|getWadlURIs
argument_list|(
name|basedir
argument_list|,
name|getResourceLoader
argument_list|()
argument_list|)
control|)
block|{
name|File
name|doneFile
init|=
name|getDoneFile
argument_list|(
name|basedir
argument_list|,
name|wadlURI
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldRun
argument_list|(
name|option
argument_list|,
name|doneFile
argument_list|,
name|wadlURI
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|doneFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|toDo
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|wargs
operator|.
name|add
argument_list|(
name|option
operator|.
name|generateCommandLine
argument_list|(
name|outputDirFile
argument_list|,
name|basedir
argument_list|,
name|wadlURI
argument_list|,
name|getLog
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wargs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|URI
argument_list|>
name|artifactsPath
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Artifact
name|a
range|:
name|pluginArtifacts
control|)
block|{
name|File
name|file
init|=
name|a
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to find file for artifact "
operator|+
name|a
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|a
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|":"
operator|+
name|a
operator|.
name|getVersion
argument_list|()
argument_list|)
throw|;
block|}
name|artifactsPath
operator|.
name|add
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addPluginArtifact
argument_list|(
name|artifactsPath
argument_list|)
expr_stmt|;
name|artifactsPath
operator|.
name|addAll
argument_list|(
name|classPath
argument_list|)
expr_stmt|;
name|String
name|args
index|[]
init|=
name|createForkOnceArgs
argument_list|(
name|wargs
argument_list|)
decl_stmt|;
name|runForked
argument_list|(
name|artifactsPath
argument_list|,
name|ForkOnceCodeGenerator
operator|.
name|class
argument_list|,
name|args
argument_list|)
expr_stmt|;
for|for
control|(
name|WadlOption
name|option
range|:
name|toDo
control|)
block|{
name|File
name|dirs
index|[]
init|=
name|option
operator|.
name|getDeleteDirs
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|dirs
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|deleteDir
argument_list|(
name|dirs
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|URI
name|basedir
init|=
name|project
operator|.
name|getBasedir
argument_list|()
operator|.
name|toURI
argument_list|()
decl_stmt|;
for|for
control|(
name|URI
name|wadlURI
range|:
name|option
operator|.
name|getWadlURIs
argument_list|(
name|basedir
argument_list|,
name|getResourceLoader
argument_list|()
argument_list|)
control|)
block|{
name|File
name|doneFile
init|=
name|getDoneFile
argument_list|(
name|basedir
argument_list|,
name|wadlURI
argument_list|)
decl_stmt|;
try|try
block|{
name|doneFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Could not create marker file "
operator|+
name|doneFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|String
index|[]
name|createForkOnceArgs
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|wargs
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
name|File
name|f
init|=
name|FileUtils
operator|.
name|createTempFile
argument_list|(
literal|"cxf-w2j"
argument_list|,
literal|"args"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|args
range|:
name|wargs
control|)
block|{
name|fw
operator|.
name|println
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|args
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|args
control|)
block|{
name|fw
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|fw
operator|.
name|println
argument_list|(
literal|"-1"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
index|[]
block|{
name|f
operator|.
name|getAbsolutePath
argument_list|()
block|}
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Could not create argument file"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ClassLoader
name|getResourceLoader
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
name|resourceClassLoader
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|?
argument_list|>
name|runtimeClasspathElements
init|=
name|project
operator|.
name|getRuntimeClasspathElements
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|resources
init|=
name|project
operator|.
name|getResources
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|testResources
init|=
name|project
operator|.
name|getTestResources
argument_list|()
decl_stmt|;
name|URL
index|[]
name|runtimeUrls
init|=
operator|new
name|URL
index|[
name|runtimeClasspathElements
operator|.
name|size
argument_list|()
operator|+
name|resources
operator|.
name|size
argument_list|()
operator|+
name|testResources
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runtimeClasspathElements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|element
init|=
operator|(
name|String
operator|)
name|runtimeClasspathElements
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|runtimeUrls
index|[
name|i
index|]
operator|=
operator|new
name|File
argument_list|(
name|element
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|runtimeClasspathElements
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|resources
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|Resource
name|r
init|=
operator|(
name|Resource
operator|)
name|resources
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|runtimeUrls
index|[
name|j
index|]
operator|=
operator|new
name|File
argument_list|(
name|r
operator|.
name|getDirectory
argument_list|()
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|runtimeClasspathElements
operator|.
name|size
argument_list|()
operator|+
name|resources
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|testResources
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|Resource
name|r
init|=
operator|(
name|Resource
operator|)
name|testResources
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|runtimeUrls
index|[
name|j
index|]
operator|=
operator|new
name|File
argument_list|(
name|r
operator|.
name|getDirectory
argument_list|()
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
name|resourceClassLoader
operator|=
operator|new
name|URLClassLoader
argument_list|(
name|runtimeUrls
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|resourceClassLoader
return|;
block|}
specifier|protected
name|Bus
name|callCodeGenerator
parameter_list|(
name|WadlOption
name|option
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|Set
argument_list|<
name|URI
argument_list|>
name|classPath
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|File
name|outputDirFile
init|=
name|option
operator|.
name|getOutputDir
argument_list|()
decl_stmt|;
name|outputDirFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|URI
name|basedir
init|=
name|project
operator|.
name|getBasedir
argument_list|()
operator|.
name|toURI
argument_list|()
decl_stmt|;
for|for
control|(
name|URI
name|wadlURI
range|:
name|option
operator|.
name|getWadlURIs
argument_list|(
name|basedir
argument_list|,
name|getResourceLoader
argument_list|()
argument_list|)
control|)
block|{
name|File
name|doneFile
init|=
name|getDoneFile
argument_list|(
name|basedir
argument_list|,
name|wadlURI
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldRun
argument_list|(
name|option
argument_list|,
name|doneFile
argument_list|,
name|wadlURI
argument_list|)
condition|)
block|{
return|return
name|bus
return|;
block|}
name|doneFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|option
operator|.
name|generateCommandLine
argument_list|(
name|outputDirFile
argument_list|,
name|basedir
argument_list|,
name|wadlURI
argument_list|,
name|getLog
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Calling wadl2java with args: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"false"
operator|.
name|equals
argument_list|(
name|fork
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|URI
argument_list|>
name|artifactsPath
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Artifact
name|a
range|:
name|pluginArtifacts
control|)
block|{
name|File
name|file
init|=
name|a
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to find file for artifact "
operator|+
name|a
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|a
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|":"
operator|+
name|a
operator|.
name|getVersion
argument_list|()
argument_list|)
throw|;
block|}
name|artifactsPath
operator|.
name|add
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addPluginArtifact
argument_list|(
name|artifactsPath
argument_list|)
expr_stmt|;
name|artifactsPath
operator|.
name|addAll
argument_list|(
name|classPath
argument_list|)
expr_stmt|;
name|runForked
argument_list|(
name|artifactsPath
argument_list|,
name|WADLToJava
operator|.
name|class
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bus
operator|==
literal|null
condition|)
block|{
name|bus
operator|=
name|BusFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createBus
argument_list|()
expr_stmt|;
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|WADLToJava
argument_list|(
name|args
argument_list|)
operator|.
name|run
argument_list|(
operator|new
name|ToolContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|doneFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Could not create marker file "
operator|+
name|doneFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bus
return|;
block|}
specifier|private
name|File
name|getJavaExecutable
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|exe
init|=
operator|(
name|SystemUtils
operator|.
name|IS_OS_WINDOWS
operator|&&
operator|!
name|javaExecutable
operator|.
name|endsWith
argument_list|(
literal|".exe"
argument_list|)
operator|)
condition|?
literal|".exe"
else|:
literal|""
decl_stmt|;
name|File
name|javaExe
init|=
operator|new
name|File
argument_list|(
name|javaExecutable
operator|+
name|exe
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|javaExe
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The java executable '"
operator|+
name|javaExe
operator|+
literal|"' doesn't exist or is not a file. Verify the<javaExecutable/> parameter."
argument_list|)
throw|;
block|}
return|return
name|javaExe
return|;
block|}
specifier|private
name|void
name|runForked
parameter_list|(
name|Set
argument_list|<
name|URI
argument_list|>
name|classPath
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Running wadl2java in fork mode..."
argument_list|)
expr_stmt|;
name|Commandline
name|cmd
init|=
operator|new
name|Commandline
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|getShell
argument_list|()
operator|.
name|setQuotedArgumentsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// for JVM args
name|cmd
operator|.
name|setWorkingDirectory
argument_list|(
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cmd
operator|.
name|setExecutable
argument_list|(
name|getJavaExecutable
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|cmd
operator|.
name|createArg
argument_list|()
operator|.
name|setLine
argument_list|(
name|additionalJvmArgs
argument_list|)
expr_stmt|;
name|File
name|file
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//file = new File("/tmp/test.jar");
name|file
operator|=
name|FileUtils
operator|.
name|createTempFile
argument_list|(
literal|"cxf-codegen"
argument_list|,
literal|".jar"
argument_list|)
expr_stmt|;
name|JarArchiver
name|jar
init|=
operator|new
name|JarArchiver
argument_list|()
decl_stmt|;
name|jar
operator|.
name|setDestFile
argument_list|(
name|file
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|()
decl_stmt|;
name|Attribute
name|attr
init|=
operator|new
name|Attribute
argument_list|()
decl_stmt|;
name|attr
operator|.
name|setName
argument_list|(
literal|"Class-Path"
argument_list|)
expr_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|8000
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|cp
range|:
name|classPath
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|cp
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|attr
operator|.
name|setValue
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|manifest
operator|.
name|getMainSection
argument_list|()
operator|.
name|addConfiguredAttribute
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|attr
operator|=
operator|new
name|Attribute
argument_list|()
expr_stmt|;
name|attr
operator|.
name|setName
argument_list|(
literal|"Main-Class"
argument_list|)
expr_stmt|;
name|attr
operator|.
name|setValue
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|manifest
operator|.
name|getMainSection
argument_list|()
operator|.
name|addConfiguredAttribute
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|jar
operator|.
name|addConfiguredManifest
argument_list|(
name|manifest
argument_list|)
expr_stmt|;
name|jar
operator|.
name|createArchive
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|createArg
argument_list|()
operator|.
name|setValue
argument_list|(
literal|"-jar"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|createArg
argument_list|()
operator|.
name|setValue
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Could not create runtime jar"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
name|cmd
operator|.
name|addArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|CommandLineUtils
operator|.
name|StringStreamConsumer
name|err
init|=
operator|new
name|CommandLineUtils
operator|.
name|StringStreamConsumer
argument_list|()
decl_stmt|;
name|CommandLineUtils
operator|.
name|StringStreamConsumer
name|out
init|=
operator|new
name|CommandLineUtils
operator|.
name|StringStreamConsumer
argument_list|()
decl_stmt|;
name|int
name|exitCode
decl_stmt|;
try|try
block|{
name|exitCode
operator|=
name|CommandLineUtils
operator|.
name|executeCommandLine
argument_list|(
name|cmd
argument_list|,
name|out
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandLineException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|output
init|=
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|out
operator|.
name|getOutput
argument_list|()
argument_list|)
condition|?
literal|null
else|:
literal|'\n'
operator|+
name|out
operator|.
name|getOutput
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|cmdLine
init|=
name|CommandLineUtils
operator|.
name|toString
argument_list|(
name|cmd
operator|.
name|getCommandline
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|output
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"\nExit code: "
argument_list|)
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|err
operator|.
name|getOutput
argument_list|()
argument_list|)
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|" - "
argument_list|)
operator|.
name|append
argument_list|(
name|err
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Command line was: "
argument_list|)
operator|.
name|append
argument_list|(
name|cmdLine
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|err
operator|.
name|getOutput
argument_list|()
argument_list|)
operator|&&
name|err
operator|.
name|getOutput
argument_list|()
operator|.
name|contains
argument_list|(
literal|"WADL2Java Error"
argument_list|)
condition|)
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|err
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Command line was: "
argument_list|)
operator|.
name|append
argument_list|(
name|cmdLine
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|File
name|getDoneFile
parameter_list|(
name|URI
name|basedir
parameter_list|,
name|URI
name|wadlURI
parameter_list|)
block|{
name|String
name|doneFileName
init|=
name|wadlURI
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Strip the basedir from the doneFileName
if|if
condition|(
name|doneFileName
operator|.
name|startsWith
argument_list|(
name|basedir
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|doneFileName
operator|=
name|doneFileName
operator|.
name|substring
argument_list|(
name|basedir
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If URL to WADL, replace ? and& since they're invalid chars for file names
comment|// Not to mention slashes.
name|doneFileName
operator|=
name|doneFileName
operator|.
name|replace
argument_list|(
literal|'?'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'&'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
return|return
operator|new
name|File
argument_list|(
name|markerDirectory
argument_list|,
literal|"."
operator|+
name|doneFileName
operator|+
literal|".DONE"
argument_list|)
return|;
block|}
comment|/**      * Determine if code should be generated from the given wadl      *      * @param wadlOption      * @param doneFile      * @param wadlURI      * @return      */
specifier|private
name|boolean
name|shouldRun
parameter_list|(
name|WadlOption
name|wadlOption
parameter_list|,
name|File
name|doneFile
parameter_list|,
name|URI
name|wadlURI
parameter_list|)
block|{
name|long
name|timestamp
init|=
literal|0
decl_stmt|;
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|wadlURI
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|timestamp
operator|=
operator|new
name|File
argument_list|(
name|wadlURI
argument_list|)
operator|.
name|lastModified
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|timestamp
operator|=
name|wadlURI
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
operator|.
name|getDate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|boolean
name|doWork
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|doneFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|doWork
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|timestamp
operator|>
name|doneFile
operator|.
name|lastModified
argument_list|()
condition|)
block|{
name|doWork
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|File
name|files
index|[]
init|=
name|wadlOption
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|z
init|=
literal|0
init|;
name|z
operator|<
name|files
operator|.
name|length
condition|;
operator|++
name|z
control|)
block|{
if|if
condition|(
name|files
index|[
name|z
index|]
operator|.
name|lastModified
argument_list|()
operator|>
name|doneFile
operator|.
name|lastModified
argument_list|()
condition|)
block|{
name|doWork
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|doWork
return|;
block|}
comment|/**      * Recursively delete the given directory      *      * @param f      * @return      */
specifier|protected
name|boolean
name|deleteDir
parameter_list|(
name|File
name|f
parameter_list|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|files
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|deleteDir
argument_list|(
name|files
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|f
operator|.
name|delete
argument_list|()
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

