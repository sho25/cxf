begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|maven_plugin
operator|.
name|javatowadl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ArtifactMetadataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|javadoc
operator|.
name|AbstractJavadocMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|javadoc
operator|.
name|options
operator|.
name|DocletArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProjectBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|reporting
operator|.
name|MavenReportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|toolchain
operator|.
name|ToolchainManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|manager
operator|.
name|ArchiverManager
import|;
end_import

begin_comment
comment|/**  * @goal parsejavadoc  * @description CXF Java To WADL Tool  * @requiresDependencyResolution compile  * @threadSafe  */
end_comment

begin_class
specifier|public
class|class
name|ParseJavaDocMojo
extends|extends
name|AbstractJavadocMojo
block|{
comment|/**      * @parameter expression="${project}"      * @required      */
specifier|private
name|MavenProject
name|mavenProject
decl_stmt|;
comment|/**      * @component      */
specifier|private
name|ArchiverManager
name|archiverManager
decl_stmt|;
comment|/**      * @component      */
specifier|private
name|ArtifactFactory
name|mavenArtifactFactory
decl_stmt|;
comment|/**      * @component      */
specifier|private
name|ArtifactResolver
name|artifactResolver
decl_stmt|;
comment|/**      * @component      */
specifier|private
name|MavenProjectBuilder
name|mavenProjectBuilder
decl_stmt|;
comment|/**      * @component      */
specifier|private
name|ArtifactMetadataSource
name|artifactMetadataSource
decl_stmt|;
comment|/**      * @component      */
specifier|private
name|ToolchainManager
name|toolchainManager
decl_stmt|;
comment|/**      * @parameter default-value = "${project.reporting.outputDirectory}/apidocs"      * @required      */
specifier|private
name|File
name|dumpFileOutputDirectory
decl_stmt|;
comment|/**      * The local maven repository.      *       * @parameter expression="${localRepository}"      * @required      * @readonly      */
specifier|private
name|ArtifactRepository
name|localRepository
decl_stmt|;
comment|/**      * The remote repositories where artifacts are located.      *       * @parameter expression="${project.remoteArtifactRepositories}"      * @required      * @readonly      */
specifier|private
name|List
argument_list|<
name|ArtifactRepository
argument_list|>
name|remoteRepositories
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
if|if
condition|(
name|skip
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Skipping parse javadoc"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Locale
name|locale
init|=
name|Locale
operator|.
name|getDefault
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
name|AbstractJavadocMojo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"doclet"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|this
argument_list|,
literal|"org.apache.cxf.maven_plugin.javatowadl.DumpJavaDoc"
argument_list|)
expr_stmt|;
name|f
operator|=
name|AbstractJavadocMojo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"stylesheet"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|this
argument_list|,
literal|"stylesheet"
argument_list|)
expr_stmt|;
name|f
operator|=
name|AbstractJavadocMojo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"docletArtifact"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocletArtifact
name|docletArtifact
init|=
operator|new
name|DocletArtifact
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|this
operator|.
name|mavenProject
operator|.
name|getPluginArtifacts
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Artifact
condition|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"cxf-java2wadl-plugin"
argument_list|)
condition|)
block|{
name|docletArtifact
operator|.
name|setGroupId
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|docletArtifact
operator|.
name|setArtifactId
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|docletArtifact
operator|.
name|setVersion
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|f
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|docletArtifact
argument_list|)
expr_stmt|;
name|f
operator|=
name|AbstractJavadocMojo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"factory"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|mavenArtifactFactory
argument_list|)
expr_stmt|;
name|f
operator|=
name|AbstractJavadocMojo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"mavenProjectBuilder"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|mavenProjectBuilder
argument_list|)
expr_stmt|;
name|f
operator|=
name|AbstractJavadocMojo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"resolver"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|artifactResolver
argument_list|)
expr_stmt|;
name|f
operator|=
name|AbstractJavadocMojo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"archiverManager"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|archiverManager
argument_list|)
expr_stmt|;
name|f
operator|=
name|AbstractJavadocMojo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"artifactMetadataSource"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|artifactMetadataSource
argument_list|)
expr_stmt|;
name|f
operator|=
name|AbstractJavadocMojo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"toolchainManager"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|toolchainManager
argument_list|)
expr_stmt|;
name|f
operator|=
name|AbstractJavadocMojo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"localRepository"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|localRepository
argument_list|)
expr_stmt|;
name|f
operator|=
name|AbstractJavadocMojo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"remoteRepositories"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|remoteRepositories
argument_list|)
expr_stmt|;
name|f
operator|=
name|AbstractJavadocMojo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"applyJavadocSecurityFix"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|f
operator|=
name|AbstractJavadocMojo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"additionalparam"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|this
argument_list|,
literal|"-dumpJavaDocFile "
operator|+
name|this
operator|.
name|dumpFileOutputDirectory
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"dumpFile.properties"
argument_list|)
expr_stmt|;
name|useStandardDocletOptions
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|project
operator|=
name|mavenProject
expr_stmt|;
name|generate
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failOnError
argument_list|(
literal|"An error has occurred in parsing javadoc"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|generate
parameter_list|(
name|Locale
name|locale
parameter_list|)
throws|throws
name|MavenReportException
block|{
try|try
block|{
name|outputDirectory
operator|=
name|getReportOutputDirectory
argument_list|()
expr_stmt|;
name|executeReport
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MavenReportException
name|e
parameter_list|)
block|{
if|if
condition|(
name|failOnError
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error while creating javadoc report: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|failOnError
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error while creating javadoc report: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|File
name|getReportOutputDirectory
parameter_list|()
block|{
if|if
condition|(
name|dumpFileOutputDirectory
operator|==
literal|null
condition|)
block|{
return|return
name|outputDirectory
return|;
block|}
return|return
name|dumpFileOutputDirectory
return|;
block|}
block|}
end_class

end_unit

