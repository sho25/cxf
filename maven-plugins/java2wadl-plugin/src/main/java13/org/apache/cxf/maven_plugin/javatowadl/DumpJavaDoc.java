begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|maven_plugin
operator|.
name|javatowadl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|ElementKind
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|ExecutableElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|TypeElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|VariableElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|util
operator|.
name|Elements
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|Diagnostic
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|source
operator|.
name|doctree
operator|.
name|DocCommentTree
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|source
operator|.
name|doctree
operator|.
name|DocTree
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|source
operator|.
name|doctree
operator|.
name|ParamTree
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|source
operator|.
name|doctree
operator|.
name|ReturnTree
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|source
operator|.
name|util
operator|.
name|DocTrees
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|SourceVersion
import|;
end_import

begin_import
import|import
name|jdk
operator|.
name|javadoc
operator|.
name|doclet
operator|.
name|Doclet
import|;
end_import

begin_import
import|import
name|jdk
operator|.
name|javadoc
operator|.
name|doclet
operator|.
name|DocletEnvironment
import|;
end_import

begin_import
import|import
name|jdk
operator|.
name|javadoc
operator|.
name|doclet
operator|.
name|Reporter
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|DumpJavaDoc
implements|implements
name|Doclet
block|{
specifier|private
name|String
name|dumpFileName
decl_stmt|;
specifier|private
name|Reporter
name|reporter
decl_stmt|;
specifier|private
specifier|final
class|class
name|DumpJavaDocFileOption
implements|implements
name|Option
block|{
annotation|@
name|Override
specifier|public
name|int
name|getArgumentCount
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Specify the file to dump Javadoc for later use"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Kind
name|getKind
parameter_list|()
block|{
return|return
name|Kind
operator|.
name|STANDARD
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"-dumpJavaDocFile"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameters
parameter_list|()
block|{
return|return
literal|"theFileToDumpJavaDocForLaterUse"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|process
parameter_list|(
name|String
name|option
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|arguments
parameter_list|)
block|{
name|dumpFileName
operator|=
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|DumpJavaDoc
parameter_list|()
block|{      }
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|Locale
name|locale
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
block|{
name|this
operator|.
name|reporter
operator|=
name|reporter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"DumpJavaDoc"
return|;
block|}
annotation|@
name|Override
specifier|public
name|SourceVersion
name|getSupportedSourceVersion
parameter_list|()
block|{
return|return
name|SourceVersion
operator|.
name|RELEASE_8
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|run
parameter_list|(
name|DocletEnvironment
name|docEnv
parameter_list|)
block|{
specifier|final
name|Elements
name|utils
init|=
name|docEnv
operator|.
name|getElementUtils
argument_list|()
decl_stmt|;
specifier|final
name|DocTrees
name|docTrees
init|=
name|docEnv
operator|.
name|getDocTrees
argument_list|()
decl_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|dumpFileName
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|Properties
name|javaDocMap
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|Element
name|element
range|:
name|docEnv
operator|.
name|getIncludedElements
argument_list|()
control|)
block|{
if|if
condition|(
name|element
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|CLASS
condition|)
block|{
specifier|final
name|TypeElement
name|classDoc
init|=
operator|(
name|TypeElement
operator|)
name|element
decl_stmt|;
specifier|final
name|DocCommentTree
name|classCommentTree
init|=
name|docTrees
operator|.
name|getDocCommentTree
argument_list|(
name|classDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|classCommentTree
operator|!=
literal|null
condition|)
block|{
name|javaDocMap
operator|.
name|put
argument_list|(
name|classDoc
operator|.
name|toString
argument_list|()
argument_list|,
name|getAllComments
argument_list|(
name|classCommentTree
operator|.
name|getFullBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Element
name|member
range|:
name|classDoc
operator|.
name|getEnclosedElements
argument_list|()
control|)
block|{
comment|// Skip all non-public methods
if|if
condition|(
operator|!
name|member
operator|.
name|getModifiers
argument_list|()
operator|.
name|contains
argument_list|(
name|Modifier
operator|.
name|PUBLIC
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|member
operator|.
name|getKind
argument_list|()
operator|==
name|ElementKind
operator|.
name|METHOD
condition|)
block|{
specifier|final
name|ExecutableElement
name|method
init|=
operator|(
name|ExecutableElement
operator|)
name|member
decl_stmt|;
specifier|final
name|DocCommentTree
name|methodCommentTree
init|=
name|docTrees
operator|.
name|getDocCommentTree
argument_list|(
name|method
argument_list|)
decl_stmt|;
specifier|final
name|String
name|qualifiedName
init|=
name|utils
operator|.
name|getBinaryName
argument_list|(
name|classDoc
argument_list|)
operator|+
literal|"."
operator|+
name|method
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|methodCommentTree
operator|==
literal|null
condition|)
block|{
name|javaDocMap
operator|.
name|put
argument_list|(
name|qualifiedName
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|javaDocMap
operator|.
name|put
argument_list|(
name|qualifiedName
argument_list|,
name|getAllComments
argument_list|(
name|methodCommentTree
operator|.
name|getFullBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|DocTree
name|tree
range|:
name|methodCommentTree
operator|.
name|getBlockTags
argument_list|()
control|)
block|{
if|if
condition|(
name|tree
operator|.
name|getKind
argument_list|()
operator|==
name|DocTree
operator|.
name|Kind
operator|.
name|RETURN
condition|)
block|{
specifier|final
name|ReturnTree
name|returnTree
init|=
operator|(
name|ReturnTree
operator|)
name|tree
decl_stmt|;
name|javaDocMap
operator|.
name|put
argument_list|(
name|qualifiedName
operator|+
literal|".returnCommentTag"
argument_list|,
name|getAllComments
argument_list|(
name|returnTree
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tree
operator|.
name|getKind
argument_list|()
operator|==
name|DocTree
operator|.
name|Kind
operator|.
name|PARAM
condition|)
block|{
specifier|final
name|ParamTree
name|paramTree
init|=
operator|(
name|ParamTree
operator|)
name|tree
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|getParamIndex
argument_list|(
name|method
argument_list|,
name|paramTree
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|javaDocMap
operator|.
name|put
argument_list|(
name|qualifiedName
operator|+
literal|".paramCommentTag."
operator|+
name|index
argument_list|,
name|getAllComments
argument_list|(
name|paramTree
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|javaDocMap
operator|.
name|store
argument_list|(
name|os
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ex
parameter_list|)
block|{
name|reporter
operator|.
name|print
argument_list|(
name|Diagnostic
operator|.
name|Kind
operator|.
name|ERROR
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|int
name|getParamIndex
parameter_list|(
specifier|final
name|ExecutableElement
name|method
parameter_list|,
specifier|final
name|ParamTree
name|paramTree
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|VariableElement
argument_list|>
name|parameters
init|=
name|method
operator|.
name|getParameters
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|paramTree
operator|.
name|getName
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contentEquals
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
name|String
name|getAllComments
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|?
extends|extends
name|DocTree
argument_list|>
name|comments
parameter_list|)
block|{
return|return
name|comments
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|DocTree
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Option
argument_list|>
name|getSupportedOptions
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|DumpJavaDocFileOption
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

