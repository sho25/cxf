begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|maven_plugin
operator|.
name|xml2fastinfoset
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xml
operator|.
name|fastinfoset
operator|.
name|sax
operator|.
name|SAXDocumentSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|DirectoryScanner
import|;
end_import

begin_comment
comment|/**  * Compile XML resources to FastInfoset XML resources.  *   * @goal xml2fastinfoset  * @phase process-resources  */
end_comment

begin_class
specifier|public
class|class
name|XML2FastInfosetCompilerMojo
extends|extends
name|AbstractMojo
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|EMPTY_STRING_ARRAY
init|=
block|{}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_INCLUDES
init|=
block|{
literal|"**/*.xml"
block|}
decl_stmt|;
comment|/**      * @parameter expression="${project}"      * @required      * @readonly      */
specifier|private
name|MavenProject
name|project
decl_stmt|;
comment|/**      * The resource directories containing the XML files to be compiled.      *       * @parameter expression="${project.resources}"      * @required      * @readonly      */
specifier|private
name|List
name|resources
decl_stmt|;
comment|/**      * A list of inclusion filters.      *       * @parameter      */
specifier|private
name|Set
name|includes
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
comment|/**      * A list of exclusion filters.      *       * @parameter      */
specifier|private
name|Set
name|excludes
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
comment|/**      * The directory for the results.      *       * @parameter expression="${project.build.outputDirectory}"      * @required      */
specifier|private
name|File
name|outputDirectory
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|resources
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Resource
name|resource
init|=
operator|(
name|Resource
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|targetPath
init|=
name|resource
operator|.
name|getTargetPath
argument_list|()
decl_stmt|;
name|File
name|resourceDirectory
init|=
operator|new
name|File
argument_list|(
name|resource
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resourceDirectory
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|resourceDirectory
operator|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|resourceDirectory
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|resourceDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Resource directory does not exist: "
operator|+
name|resourceDirectory
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// this part is required in case the user specified "../something"
comment|// as destination
comment|// see MNG-1345
if|if
condition|(
operator|!
name|outputDirectory
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|outputDirectory
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Cannot create resource output directory: "
operator|+
name|outputDirectory
argument_list|)
throw|;
block|}
name|DirectoryScanner
name|scanner
init|=
operator|new
name|DirectoryScanner
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|setBasedir
argument_list|(
name|resourceDirectory
argument_list|)
expr_stmt|;
if|if
condition|(
name|includes
operator|!=
literal|null
operator|&&
operator|!
name|includes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|scanner
operator|.
name|setIncludes
argument_list|(
operator|(
name|String
index|[]
operator|)
name|includes
operator|.
name|toArray
argument_list|(
name|EMPTY_STRING_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scanner
operator|.
name|setIncludes
argument_list|(
name|DEFAULT_INCLUDES
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludes
operator|!=
literal|null
operator|&&
operator|!
name|excludes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|scanner
operator|.
name|setExcludes
argument_list|(
operator|(
name|String
index|[]
operator|)
name|excludes
operator|.
name|toArray
argument_list|(
name|EMPTY_STRING_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|.
name|addDefaultExcludes
argument_list|()
expr_stmt|;
name|scanner
operator|.
name|scan
argument_list|()
expr_stmt|;
name|List
name|includedFiles
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|scanner
operator|.
name|getIncludedFiles
argument_list|()
argument_list|)
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"FastInfosetting "
operator|+
name|includedFiles
operator|.
name|size
argument_list|()
operator|+
literal|" resource"
operator|+
operator|(
name|includedFiles
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|?
literal|"s"
else|:
literal|""
operator|)
operator|+
operator|(
name|targetPath
operator|==
literal|null
condition|?
literal|""
else|:
literal|" to "
operator|+
name|targetPath
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|includedFiles
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|destination
init|=
name|name
operator|.
name|replaceFirst
argument_list|(
literal|"\\.xml$"
argument_list|,
literal|".fixml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetPath
operator|!=
literal|null
condition|)
block|{
name|destination
operator|=
name|targetPath
operator|+
literal|"/"
operator|+
name|name
expr_stmt|;
block|}
name|File
name|source
init|=
operator|new
name|File
argument_list|(
name|resourceDirectory
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|File
name|destinationFile
init|=
operator|new
name|File
argument_list|(
name|outputDirectory
argument_list|,
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destinationFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|destinationFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|compileFile
argument_list|(
name|source
argument_list|,
name|destinationFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error copying resource "
operator|+
name|source
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|compileFile
parameter_list|(
name|File
name|sourceFile
parameter_list|,
name|File
name|destinationFile
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IOException
block|{
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|sourceFile
argument_list|)
expr_stmt|;
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|destinationFile
argument_list|)
expr_stmt|;
name|dehydrate
argument_list|(
name|fis
argument_list|,
name|fos
argument_list|)
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// nothing.
block|}
block|}
block|}
specifier|private
name|void
name|dehydrate
parameter_list|(
name|InputStream
name|input
parameter_list|,
name|OutputStream
name|output
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IOException
block|{
comment|// Create Fast Infoset SAX serializer
name|SAXDocumentSerializer
name|saxDocumentSerializer
init|=
operator|new
name|SAXDocumentSerializer
argument_list|()
decl_stmt|;
comment|// Set the output stream
name|saxDocumentSerializer
operator|.
name|setOutputStream
argument_list|(
name|output
argument_list|)
expr_stmt|;
comment|// Instantiate JAXP SAX parser factory
name|SAXParserFactory
name|saxParserFactory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|/*          * Set parser to be namespace aware Very important to do otherwise          * invalid FI documents will be created by the SAXDocumentSerializer          */
name|saxParserFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Instantiate the JAXP SAX parser
name|SAXParser
name|saxParser
init|=
name|saxParserFactory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
comment|// Set the lexical handler
name|saxParser
operator|.
name|setProperty
argument_list|(
literal|"http://xml.org/sax/properties/lexical-handler"
argument_list|,
name|saxDocumentSerializer
argument_list|)
expr_stmt|;
comment|// Parse the XML document and convert to a fast infoset document
name|saxParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|saxDocumentSerializer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

