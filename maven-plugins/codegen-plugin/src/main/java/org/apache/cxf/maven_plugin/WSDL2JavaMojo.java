begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|maven_plugin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|WSDLToJava
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_comment
comment|/**  * @goal wsdl2java  * @phase generate-sources  * @description CXF WSDL To Java Tool  * @requiresDependencyResolution test  * @threadSafe  */
end_comment

begin_class
specifier|public
class|class
name|WSDL2JavaMojo
extends|extends
name|AbstractCodegenMoho
block|{
comment|/**      * @parameter expression="${cxf.testSourceRoot}"      */
name|File
name|testSourceRoot
decl_stmt|;
comment|/**      * Path where the generated sources should be placed      *       * @parameter expression="${cxf.sourceRoot}"      *            default-value="${project.build.directory}/generated-sources/cxf"      * @required      */
name|File
name|sourceRoot
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Bus
name|generate
parameter_list|(
name|WsdlOption
name|wsdlOption
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|Set
argument_list|<
name|URI
argument_list|>
name|classPath
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|File
name|outputDirFile
init|=
name|wsdlOption
operator|.
name|getOutputDir
argument_list|()
decl_stmt|;
name|outputDirFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|URI
name|basedir
init|=
name|project
operator|.
name|getBasedir
argument_list|()
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|URI
name|wsdlURI
init|=
name|wsdlOption
operator|.
name|getWsdlURI
argument_list|(
name|basedir
argument_list|)
decl_stmt|;
name|File
name|doneFile
init|=
name|getDoneFile
argument_list|(
name|basedir
argument_list|,
name|wsdlURI
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldRun
argument_list|(
name|wsdlOption
argument_list|,
name|doneFile
argument_list|,
name|wsdlURI
argument_list|)
condition|)
block|{
return|return
name|bus
return|;
block|}
name|doneFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|wsdlOption
operator|.
name|generateCommandLine
argument_list|(
name|outputDirFile
argument_list|,
name|basedir
argument_list|,
name|wsdlURI
argument_list|,
name|getLog
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|(
name|String
index|[]
operator|)
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Calling wsdl2java with args: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"false"
operator|.
name|equals
argument_list|(
name|fork
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|URI
argument_list|>
name|artifactsPath
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Artifact
name|a
range|:
name|pluginArtifacts
control|)
block|{
name|File
name|file
init|=
name|a
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to find "
operator|+
name|file
operator|+
literal|" for artifact "
operator|+
name|a
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|a
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|":"
operator|+
name|a
operator|.
name|getVersion
argument_list|()
argument_list|)
throw|;
block|}
name|artifactsPath
operator|.
name|add
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addPluginArtifact
argument_list|(
name|artifactsPath
argument_list|)
expr_stmt|;
name|artifactsPath
operator|.
name|addAll
argument_list|(
name|classPath
argument_list|)
expr_stmt|;
name|runForked
argument_list|(
name|artifactsPath
argument_list|,
name|WSDLToJava
operator|.
name|class
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bus
operator|==
literal|null
condition|)
block|{
name|bus
operator|=
name|BusFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createBus
argument_list|()
expr_stmt|;
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|WSDLToJava
argument_list|(
name|args
argument_list|)
operator|.
name|run
argument_list|(
operator|new
name|ToolContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|doneFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Could not create marker file "
operator|+
name|doneFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Failed to create marker file "
operator|+
name|doneFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|project
operator|!=
literal|null
operator|&&
name|getGeneratedSourceRoot
argument_list|()
operator|!=
literal|null
operator|&&
name|getGeneratedSourceRoot
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|project
operator|.
name|addCompileSourceRoot
argument_list|(
name|getGeneratedSourceRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|!=
literal|null
operator|&&
name|getGeneratedTestRoot
argument_list|()
operator|!=
literal|null
operator|&&
name|getGeneratedTestRoot
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|project
operator|.
name|addTestCompileSourceRoot
argument_list|(
name|getGeneratedTestRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|bus
return|;
block|}
annotation|@
name|Override
specifier|protected
name|File
name|getGeneratedSourceRoot
parameter_list|()
block|{
return|return
name|sourceRoot
return|;
block|}
annotation|@
name|Override
specifier|protected
name|File
name|getGeneratedTestRoot
parameter_list|()
block|{
return|return
name|testSourceRoot
return|;
block|}
block|}
end_class

end_unit

