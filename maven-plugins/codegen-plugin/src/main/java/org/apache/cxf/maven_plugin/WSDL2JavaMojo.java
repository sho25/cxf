begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|maven_plugin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|WSDLToJava
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|InvalidRepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|execution
operator|.
name|MavenSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|ProjectUtils
import|;
end_import

begin_comment
comment|/**  * @goal wsdl2java  * @phase generate-sources  * @description CXF WSDL To Java Tool  * @requiresDependencyResolution test  */
end_comment

begin_class
specifier|public
class|class
name|WSDL2JavaMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * @parameter expression="${cxf.testSourceRoot}"      */
name|File
name|testSourceRoot
decl_stmt|;
comment|/**      * Path where the generated sources should be placed      *       * @parameter expression="${cxf.sourceRoot}"      *            default-value="${project.build.directory}/generated-sources/cxf"      * @required      */
name|File
name|sourceRoot
decl_stmt|;
comment|/**      * @parameter expression="${project.build.outputDirectory}"      * @required      */
name|String
name|classesDirectory
decl_stmt|;
comment|/**      * @parameter expression="${project}"      * @required      */
name|MavenProject
name|project
decl_stmt|;
comment|/**      * Default options to be used when a wsdl has not had it's options explicitly specified.      *       * @parameter      */
name|Option
name|defaultOptions
decl_stmt|;
comment|/**      * @parameter      */
name|WsdlOption
name|wsdlOptions
index|[]
decl_stmt|;
comment|/**      * @parameter expression="${cxf.wsdlRoot}" default-value="${basedir}/src/main/resources/wsdl"      */
name|File
name|wsdlRoot
decl_stmt|;
comment|/**      * @parameter expression="${cxf.testWsdlRoot}" default-value="${basedir}/src/test/resources/wsdl"      */
name|File
name|testWsdlRoot
decl_stmt|;
comment|/**      * Directory in which the "DONE" markers are saved that      *       * @parameter expression="${cxf.markerDirectory}"      *            default-value="${project.build.directory}/cxf-codegen-plugin-markers"      */
name|File
name|markerDirectory
decl_stmt|;
comment|/**      * Use the compile classpath rather than the test classpath for execution useful if the test dependencies      * clash with those of wsdl2java      *       * @parameter expression="${cxf.useCompileClasspath}" default-value="false"      */
name|boolean
name|useCompileClasspath
decl_stmt|;
comment|/**      * A list of wsdl files to include. Can contain ant-style wildcards and double wildcards. Defaults to      * *.wsdl      *       * @parameter      */
name|String
name|includes
index|[]
decl_stmt|;
comment|/**      * A list of wsdl files to exclude. Can contain ant-style wildcards and double wildcards.      *       * @parameter      */
name|String
name|excludes
index|[]
decl_stmt|;
comment|/**      * The local repository taken from Maven's runtime. Typically $HOME/.m2/repository.      *       * @parameter expression="${localRepository}"      * @readonly      * @required      */
specifier|private
name|ArtifactRepository
name|localRepository
decl_stmt|;
comment|/**      * Artifact factory, needed to create artifacts.      *       * @component      * @readonly      * @required      */
specifier|private
name|ArtifactFactory
name|artifactFactory
decl_stmt|;
comment|/**      * The remote repositories used as specified in your POM.      *       * @parameter expression="${project.repositories}"      * @readonly      * @required      */
specifier|private
name|List
name|repositories
decl_stmt|;
comment|/**      * Artifact repository factory component.      *       * @component      * @readonly      * @required      */
specifier|private
name|ArtifactRepositoryFactory
name|artifactRepositoryFactory
decl_stmt|;
comment|/**      * The Maven session.      *       * @parameter expression="${session}"      * @readonly      * @required      */
specifier|private
name|MavenSession
name|mavenSession
decl_stmt|;
comment|/**      * @component      * @readonly      * @required      */
specifier|private
name|ArtifactResolver
name|artifactResolver
decl_stmt|;
comment|/**      * Create WsdlOption objects for each wsdl file found in the root dir. includes, excludes filter which      * files are considered. The defaultOptions will be applied.      *       * @param root Base directory to search      * @param output      * @return      * @throws MojoExecutionException      */
specifier|private
name|List
argument_list|<
name|WsdlOption
argument_list|>
name|getWsdlOptionsFromDir
parameter_list|(
specifier|final
name|File
name|root
parameter_list|,
specifier|final
name|File
name|output
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|List
argument_list|<
name|WsdlOption
argument_list|>
name|options
init|=
operator|new
name|ArrayList
argument_list|<
name|WsdlOption
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WsdlOption
name|o
range|:
operator|new
name|WsdlOptionLoader
argument_list|()
operator|.
name|load
argument_list|(
name|root
argument_list|,
name|includes
argument_list|,
name|excludes
argument_list|,
name|defaultOptions
argument_list|)
control|)
block|{
if|if
condition|(
name|o
operator|.
name|getOutputDir
argument_list|()
operator|==
literal|null
condition|)
block|{
name|o
operator|.
name|setOutputDir
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|options
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|options
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|options
return|;
block|}
comment|/**      * Try to find a file matching the given wsdlPath (either absolutely, relatively to the current dir or to      * the project base dir)      *       * @param wsdlPath      * @return wsdl file      */
specifier|private
name|File
name|getFileFromWsdlPath
parameter_list|(
name|String
name|wsdlPath
parameter_list|)
block|{
if|if
condition|(
name|wsdlPath
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|File
name|file
init|=
literal|null
decl_stmt|;
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|wsdlPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|file
operator|==
literal|null
operator|||
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|wsdlPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBasedir
argument_list|()
argument_list|,
name|wsdlPath
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
comment|/**      * Merge WsdlOptions that point to the same file by adding the extraargs to the first option and deleting      * the second from the options list      *       * @param options      */
specifier|private
name|void
name|mergeOptions
parameter_list|(
name|List
argument_list|<
name|WsdlOption
argument_list|>
name|effectiveWsdlOptions
parameter_list|,
name|WsdlOption
index|[]
name|explicitWsdlOptions
parameter_list|)
block|{
name|File
name|outputDirFile
init|=
name|testSourceRoot
operator|==
literal|null
condition|?
name|sourceRoot
else|:
name|testSourceRoot
decl_stmt|;
for|for
control|(
name|WsdlOption
name|o
range|:
name|explicitWsdlOptions
control|)
block|{
if|if
condition|(
name|o
operator|.
name|getOutputDir
argument_list|()
operator|==
literal|null
condition|)
block|{
name|o
operator|.
name|setOutputDir
argument_list|(
name|outputDirFile
argument_list|)
expr_stmt|;
block|}
name|File
name|file
init|=
name|getFileFromWsdlPath
argument_list|(
name|o
operator|.
name|getWsdl
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|=
name|file
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
for|for
control|(
name|WsdlOption
name|o2
range|:
name|effectiveWsdlOptions
control|)
block|{
name|File
name|file2
init|=
name|getFileFromWsdlPath
argument_list|(
name|o2
operator|.
name|getWsdl
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|file2
operator|!=
literal|null
operator|&&
name|file2
operator|.
name|exists
argument_list|()
operator|&&
name|file2
operator|.
name|getAbsoluteFile
argument_list|()
operator|.
name|equals
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|o
operator|.
name|getExtraargs
argument_list|()
operator|.
name|addAll
argument_list|(
literal|0
argument_list|,
name|o2
operator|.
name|getExtraargs
argument_list|()
argument_list|)
expr_stmt|;
name|effectiveWsdlOptions
operator|.
name|remove
argument_list|(
name|o2
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|effectiveWsdlOptions
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @return effective WsdlOptions      * @throws MojoExecutionException      */
specifier|private
name|List
argument_list|<
name|WsdlOption
argument_list|>
name|createWsdlOptionsFromWsdlFilesAndExplicitWsdlOptions
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
name|List
argument_list|<
name|WsdlOption
argument_list|>
name|effectiveWsdlOptions
init|=
operator|new
name|ArrayList
argument_list|<
name|WsdlOption
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|wsdlRoot
operator|!=
literal|null
operator|&&
name|wsdlRoot
operator|.
name|exists
argument_list|()
condition|)
block|{
name|effectiveWsdlOptions
operator|.
name|addAll
argument_list|(
name|getWsdlOptionsFromDir
argument_list|(
name|wsdlRoot
argument_list|,
name|sourceRoot
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|testWsdlRoot
operator|!=
literal|null
operator|&&
name|testWsdlRoot
operator|.
name|exists
argument_list|()
condition|)
block|{
name|effectiveWsdlOptions
operator|.
name|addAll
argument_list|(
name|getWsdlOptionsFromDir
argument_list|(
name|testWsdlRoot
argument_list|,
name|testSourceRoot
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlOptions
operator|!=
literal|null
condition|)
block|{
name|mergeOptions
argument_list|(
name|effectiveWsdlOptions
argument_list|,
name|wsdlOptions
argument_list|)
expr_stmt|;
block|}
name|downloadRemoteWsdls
argument_list|(
name|effectiveWsdlOptions
argument_list|)
expr_stmt|;
return|return
name|effectiveWsdlOptions
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Artifact
name|resolveRemoteWsdlArtifact
parameter_list|(
name|List
name|remoteRepos
parameter_list|,
name|Artifact
name|artifact
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
comment|/**          * First try to find the artifact in the reactor projects of the maven session.          * So an artifact that is not yet built can be resolved          */
name|List
argument_list|<
name|MavenProject
argument_list|>
name|rProjects
init|=
name|mavenSession
operator|.
name|getSortedProjects
argument_list|()
decl_stmt|;
for|for
control|(
name|MavenProject
name|rProject
range|:
name|rProjects
control|)
block|{
if|if
condition|(
name|artifact
operator|.
name|getGroupId
argument_list|()
operator|.
name|equals
argument_list|(
name|rProject
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|&&
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|.
name|equals
argument_list|(
name|rProject
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|&&
name|artifact
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|rProject
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|Artifact
argument_list|>
name|artifacts
init|=
name|rProject
operator|.
name|getArtifacts
argument_list|()
decl_stmt|;
for|for
control|(
name|Artifact
name|pArtifact
range|:
name|artifacts
control|)
block|{
if|if
condition|(
literal|"wsdl"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|pArtifact
return|;
block|}
block|}
block|}
block|}
comment|/**          * If this did not work resolve the artifact using the artifactResolver          */
try|try
block|{
name|artifactResolver
operator|.
name|resolve
argument_list|(
name|artifact
argument_list|,
name|remoteRepos
argument_list|,
name|localRepository
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArtifactResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error downloading wsdl artifact."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ArtifactNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Resource can not be found."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|artifact
return|;
block|}
specifier|public
name|void
name|downloadRemoteWsdls
parameter_list|(
name|List
argument_list|<
name|WsdlOption
argument_list|>
name|effectiveWsdlOptions
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|List
name|remoteRepos
decl_stmt|;
try|try
block|{
name|remoteRepos
operator|=
name|ProjectUtils
operator|.
name|buildArtifactRepositories
argument_list|(
name|repositories
argument_list|,
name|artifactRepositoryFactory
argument_list|,
name|mavenSession
operator|.
name|getContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error build repositories for remote wsdls"
argument_list|,
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|WsdlOption
name|wsdlOption
range|:
name|effectiveWsdlOptions
control|)
block|{
name|WsdlArtifact
name|wsdlA
init|=
name|wsdlOption
operator|.
name|getWsdlArtifact
argument_list|()
decl_stmt|;
if|if
condition|(
name|wsdlA
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Artifact
name|wsdlArtifact
init|=
name|artifactFactory
operator|.
name|createArtifact
argument_list|(
name|wsdlA
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|wsdlA
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|wsdlA
operator|.
name|getVersion
argument_list|()
argument_list|,
name|Artifact
operator|.
name|SCOPE_COMPILE
argument_list|,
name|wsdlA
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|wsdlArtifact
operator|=
name|resolveRemoteWsdlArtifact
argument_list|(
name|remoteRepos
argument_list|,
name|wsdlArtifact
argument_list|)
expr_stmt|;
if|if
condition|(
name|wsdlArtifact
operator|!=
literal|null
condition|)
block|{
name|String
name|path
init|=
name|wsdlArtifact
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Resolved WSDL artifact to file "
operator|+
name|path
argument_list|)
expr_stmt|;
name|wsdlOption
operator|.
name|setWsdl
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
name|includes
operator|==
literal|null
condition|)
block|{
name|includes
operator|=
operator|new
name|String
index|[]
block|{
literal|"*.wsdl"
block|}
expr_stmt|;
block|}
name|File
name|classesDir
init|=
operator|new
name|File
argument_list|(
name|classesDirectory
argument_list|)
decl_stmt|;
name|classesDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|markerDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|WsdlOption
argument_list|>
name|effectiveWsdlOptions
init|=
name|createWsdlOptionsFromWsdlFilesAndExplicitWsdlOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|effectiveWsdlOptions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Nothing to generate"
argument_list|)
expr_stmt|;
return|return;
block|}
name|ClassLoaderSwitcher
name|classLoaderSwitcher
init|=
operator|new
name|ClassLoaderSwitcher
argument_list|(
name|getLog
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
try|try
block|{
name|classLoaderSwitcher
operator|.
name|switchClassLoader
argument_list|(
name|project
argument_list|,
name|useCompileClasspath
argument_list|,
name|classesDir
argument_list|)
expr_stmt|;
for|for
control|(
name|WsdlOption
name|o
range|:
name|effectiveWsdlOptions
control|)
block|{
name|processWsdl
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|File
name|dirs
index|[]
init|=
name|o
operator|.
name|getDeleteDirs
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|dirs
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|result
operator|=
name|result
operator|&&
name|deleteDir
argument_list|(
name|dirs
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
comment|// cleanup as much as we can.
name|Bus
name|bus
init|=
name|BusFactory
operator|.
name|getDefaultBus
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|classLoaderSwitcher
operator|.
name|restoreClassLoader
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|core
operator|.
name|PluginLoader
operator|.
name|unload
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|!=
literal|null
operator|&&
name|sourceRoot
operator|!=
literal|null
operator|&&
name|sourceRoot
operator|.
name|exists
argument_list|()
condition|)
block|{
name|project
operator|.
name|addCompileSourceRoot
argument_list|(
name|sourceRoot
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|!=
literal|null
operator|&&
name|testSourceRoot
operator|!=
literal|null
operator|&&
name|testSourceRoot
operator|.
name|exists
argument_list|()
condition|)
block|{
name|project
operator|.
name|addTestCompileSourceRoot
argument_list|(
name|testSourceRoot
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|processWsdl
parameter_list|(
name|WsdlOption
name|wsdlOption
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|File
name|outputDirFile
init|=
name|wsdlOption
operator|.
name|getOutputDir
argument_list|()
decl_stmt|;
name|outputDirFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|wsdlLocation
init|=
name|wsdlOption
operator|.
name|getWsdl
argument_list|()
decl_stmt|;
name|File
name|wsdlFile
init|=
operator|new
name|File
argument_list|(
name|wsdlLocation
argument_list|)
decl_stmt|;
name|URI
name|basedir
init|=
name|project
operator|.
name|getBasedir
argument_list|()
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|URI
name|wsdlURI
decl_stmt|;
if|if
condition|(
name|wsdlFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|wsdlURI
operator|=
name|wsdlFile
operator|.
name|toURI
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wsdlURI
operator|=
name|basedir
operator|.
name|resolve
argument_list|(
name|wsdlLocation
argument_list|)
expr_stmt|;
block|}
name|String
name|doneFileName
init|=
name|wsdlURI
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|doneFileName
operator|.
name|startsWith
argument_list|(
name|basedir
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|doneFileName
operator|=
name|doneFileName
operator|.
name|substring
argument_list|(
name|basedir
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If URL to WSDL, replace ? and& since they're invalid chars for file names
comment|// Not to mention slashes.
name|doneFileName
operator|=
name|doneFileName
operator|.
name|replace
argument_list|(
literal|'?'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'&'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
name|File
name|doneFile
init|=
operator|new
name|File
argument_list|(
name|markerDirectory
argument_list|,
literal|"."
operator|+
name|doneFileName
operator|+
literal|".DONE"
argument_list|)
decl_stmt|;
name|long
name|timestamp
init|=
literal|0
decl_stmt|;
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|wsdlURI
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|timestamp
operator|=
operator|new
name|File
argument_list|(
name|wsdlURI
argument_list|)
operator|.
name|lastModified
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|timestamp
operator|=
name|wsdlURI
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
operator|.
name|getDate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|boolean
name|doWork
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|doneFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|doWork
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|timestamp
operator|>
name|doneFile
operator|.
name|lastModified
argument_list|()
condition|)
block|{
name|doWork
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isDefServiceName
argument_list|(
name|wsdlOption
argument_list|)
condition|)
block|{
name|doWork
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|File
name|files
index|[]
init|=
name|wsdlOption
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|z
init|=
literal|0
init|;
name|z
operator|<
name|files
operator|.
name|length
condition|;
operator|++
name|z
control|)
block|{
if|if
condition|(
name|files
index|[
name|z
index|]
operator|.
name|lastModified
argument_list|()
operator|>
name|doneFile
operator|.
name|lastModified
argument_list|()
condition|)
block|{
name|doWork
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|doWork
condition|)
block|{
name|doneFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|generateCommandLine
argument_list|(
name|wsdlOption
argument_list|,
name|outputDirFile
argument_list|,
name|basedir
argument_list|,
name|wsdlURI
argument_list|)
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Calling wsdl2java with args: "
operator|+
name|list
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|WSDLToJava
argument_list|(
operator|(
name|String
index|[]
operator|)
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
operator|.
name|run
argument_list|(
operator|new
name|ToolContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|doneFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Could not create marker file "
operator|+
name|doneFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|generateCommandLine
parameter_list|(
name|WsdlOption
name|wsdlOption
parameter_list|,
name|File
name|outputDirFile
parameter_list|,
name|URI
name|basedir
parameter_list|,
name|URI
name|wsdlURI
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|wsdlOption
operator|.
name|getPackagenames
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|wsdlOption
operator|.
name|getPackagenames
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-p"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|getNamespaceExcludes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|wsdlOption
operator|.
name|getNamespaceExcludes
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-nexclude"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// -d specify the dir for generated source code
name|list
operator|.
name|add
argument_list|(
literal|"-d"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|outputDirFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|binding
range|:
name|wsdlOption
operator|.
name|getBindingFiles
argument_list|()
control|)
block|{
name|File
name|bindingFile
init|=
operator|new
name|File
argument_list|(
name|binding
argument_list|)
decl_stmt|;
name|URI
name|bindingURI
decl_stmt|;
if|if
condition|(
name|bindingFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|bindingURI
operator|=
name|bindingFile
operator|.
name|toURI
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bindingURI
operator|=
name|basedir
operator|.
name|resolve
argument_list|(
name|binding
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
literal|"-b"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|bindingURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|getFrontEnd
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-fe"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|wsdlOption
operator|.
name|getFrontEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|getDataBinding
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-db"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|wsdlOption
operator|.
name|getDataBinding
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|getWsdlVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-wv"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|wsdlOption
operator|.
name|getWsdlVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|getCatalog
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-catalog"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|wsdlOption
operator|.
name|getCatalog
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|isExtendedSoapHeaders
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-exsh"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|isAllowElementRefs
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-allowElementRefs"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|isValidateWsdl
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-validate"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|getDefaultExcludesNamespace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-dex"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|wsdlOption
operator|.
name|getDefaultExcludesNamespace
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|getDefaultNamespacePackageMapping
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-dns"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|wsdlOption
operator|.
name|getDefaultNamespacePackageMapping
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|getServiceName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-sn"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|wsdlOption
operator|.
name|getServiceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|isAutoNameResolution
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-autoNameResolution"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|isNoAddressBinding
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-noAddressBinding"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|getExtraargs
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|wsdlOption
operator|.
name|getExtraargs
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|value
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
literal|""
expr_stmt|;
comment|// Maven makes empty tags into null
comment|// instead of empty strings.
block|}
name|list
operator|.
name|add
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|isSetWsdlLocation
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-wsdlLocation"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|wsdlOption
operator|.
name|getWsdlLocation
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|wsdlOption
operator|.
name|getWsdlLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlOption
operator|.
name|isWsdlList
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-wsdlList"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getLog
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
operator|!
name|list
operator|.
name|contains
argument_list|(
literal|"-verbose"
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
literal|"-verbose"
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|wsdlURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
specifier|private
name|boolean
name|deleteDir
parameter_list|(
name|File
name|f
parameter_list|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
name|files
index|[]
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|files
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|deleteDir
argument_list|(
name|files
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|f
operator|.
name|delete
argument_list|()
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|isDefServiceName
parameter_list|(
name|WsdlOption
name|wsdlOption
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|wsdlOption
operator|.
name|extraargs
decl_stmt|;
if|if
condition|(
name|args
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"-sn"
operator|.
name|equalsIgnoreCase
argument_list|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

