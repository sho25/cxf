begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|maven_plugin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Authenticator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|PasswordAuthentication
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SystemPropertyAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|URIParserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|ProjectDependenciesResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|AbstractArtifactResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|execution
operator|.
name|MavenSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|RepositorySystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|jar
operator|.
name|JarArchiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|jar
operator|.
name|Manifest
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|cli
operator|.
name|CommandLineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|cli
operator|.
name|CommandLineUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|cli
operator|.
name|Commandline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|cli
operator|.
name|StreamConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|plexus
operator|.
name|build
operator|.
name|incremental
operator|.
name|BuildContext
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractCodegenMoho
extends|extends
name|AbstractMojo
block|{
comment|/**      * JVM/System property name holding the hostname of the http proxy.      */
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PROXY_HOST
init|=
literal|"http.proxyHost"
decl_stmt|;
comment|/**      * JVM/System property name holding the port of the http proxy.      */
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PROXY_PORT
init|=
literal|"http.proxyPort"
decl_stmt|;
comment|/**      * JVM/System property name holding the list of hosts/patterns that      * should not use the proxy configuration.      */
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_NON_PROXY_HOSTS
init|=
literal|"http.nonProxyHosts"
decl_stmt|;
comment|/**      * JVM/System property name holding the username of the http proxy.      */
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PROXY_USER
init|=
literal|"http.proxyUser"
decl_stmt|;
comment|/**      * JVM/System property name holding the password of the http proxy.      */
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PROXY_PASSWORD
init|=
literal|"http.proxyPassword"
decl_stmt|;
comment|/**      * @parameter expression="${project.build.outputDirectory}"      * @required      */
specifier|protected
name|String
name|classesDirectory
decl_stmt|;
comment|/**      * By default all maven dependencies of type "wsdl" are added to the effective wsdlOptions. Setting this      * parameter to true disables this functionality      *       * @parameter expression="${cxf.disableDependencyScan}" default-value="false"      */
specifier|protected
name|boolean
name|disableDependencyScan
decl_stmt|;
comment|/**      * Disables the scanning of the wsdlRoot/testWsdlRoot directories.      * By default, we scan for *.wsdl (see include/exclude params as well) in the wsdlRoot      * directories and run the tool on all the wsdls we find. This disables that scan      * and requires an explicit wsdlOption to be set for each wsdl that needs to be processed.      * @parameter expression="${cxf.disableDirectoryScan}" default-value="false"      */
specifier|protected
name|boolean
name|disableDirectoryScan
decl_stmt|;
comment|/**      * Allows running the JavaToWs in a separate process. Valid values are "false", "always", and "once" The      * value of "true" is equal to "once"      *       * @parameter default-value="false"      * @since 2.4      */
specifier|protected
name|String
name|fork
decl_stmt|;
comment|/**      * A list of wsdl files to include. Can contain ant-style wildcards and double wildcards. Defaults to      * *.wsdl      *       * @parameter      */
specifier|protected
name|String
name|includes
index|[]
decl_stmt|;
comment|/**      * Directory in which the "DONE" markers are saved that      *       * @parameter expression="${cxf.markerDirectory}"      *            default-value="${project.build.directory}/cxf-codegen-plugin-markers"      */
specifier|protected
name|File
name|markerDirectory
decl_stmt|;
comment|/**      * The plugin dependencies, needed for the fork mode.      *       * @parameter expression="${plugin.artifacts}"      * @required      * @readonly      */
specifier|protected
name|List
argument_list|<
name|Artifact
argument_list|>
name|pluginArtifacts
decl_stmt|;
comment|/**      * @parameter expression="${project}"      * @required      */
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * Use the compile classpath rather than the test classpath for execution useful if the test dependencies      * clash with those of wsdl2java      *       * @parameter expression="${cxf.useCompileClasspath}" default-value="false"      */
specifier|protected
name|boolean
name|useCompileClasspath
decl_stmt|;
comment|/**      * A list of wsdl files to exclude. Can contain ant-style wildcards and double wildcards.      *       * @parameter      */
specifier|protected
name|String
name|excludes
index|[]
decl_stmt|;
comment|/**      * @parameter expression="${cxf.testWsdlRoot}" default-value="${basedir}/src/test/resources/wsdl"      */
specifier|protected
name|File
name|testWsdlRoot
decl_stmt|;
comment|/**      * @parameter expression="${cxf.wsdlRoot}" default-value="${basedir}/src/main/resources/wsdl"      */
specifier|protected
name|File
name|wsdlRoot
decl_stmt|;
comment|/** @component */
specifier|protected
name|BuildContext
name|buildContext
decl_stmt|;
comment|/**      * Sets the JVM arguments (i.e.<code>-Xms128m -Xmx128m</code>) if fork is set to<code>true</code>.      *       * @parameter expression="${cxf.codegen.jvmArgs}"      * @since 2.4      */
specifier|private
name|String
name|additionalJvmArgs
decl_stmt|;
comment|/**      * Sets the Java executable to use when fork parameter is<code>true</code>.      *       * @parameter default-value="${java.home}/bin/java"      * @since 2.4      */
specifier|private
name|String
name|javaExecutable
decl_stmt|;
comment|/**      * The Maven session.      *       * @parameter expression="${session}"      * @readonly      * @required      */
specifier|private
name|MavenSession
name|mavenSession
decl_stmt|;
comment|/**      * @component      * @readonly      * @required      */
specifier|private
name|ProjectDependenciesResolver
name|projectDependencyResolver
decl_stmt|;
comment|/**      * @component      * @readonly      * @required      */
specifier|private
name|RepositorySystem
name|repositorySystem
decl_stmt|;
comment|/**      * @component      * @readonly      * @required      */
specifier|private
name|MavenSession
name|session
decl_stmt|;
specifier|public
name|AbstractCodegenMoho
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
comment|// add the generated source into compile source
comment|// do this step first to ensure the source folder will be added to the Eclipse classpath
if|if
condition|(
name|project
operator|!=
literal|null
operator|&&
name|getGeneratedSourceRoot
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|project
operator|.
name|addCompileSourceRoot
argument_list|(
name|getGeneratedSourceRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|!=
literal|null
operator|&&
name|getGeneratedTestRoot
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|project
operator|.
name|addTestCompileSourceRoot
argument_list|(
name|getGeneratedTestRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkResources
argument_list|()
expr_stmt|;
comment|// if this is an m2e configuration build then return immediately without doing any work
if|if
condition|(
name|project
operator|!=
literal|null
operator|&&
name|buildContext
operator|.
name|isIncremental
argument_list|()
operator|&&
operator|!
name|buildContext
operator|.
name|hasDelta
argument_list|(
name|project
operator|.
name|getBasedir
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|File
name|classesDir
init|=
operator|new
name|File
argument_list|(
name|classesDirectory
argument_list|)
decl_stmt|;
comment|/*          * This shouldn't be needed, but it's harmless.          */
name|classesDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
name|includes
operator|==
literal|null
condition|)
block|{
name|includes
operator|=
operator|new
name|String
index|[]
block|{
literal|"*.wsdl"
block|}
expr_stmt|;
block|}
name|markerDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|originalProxyHost
init|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
name|HTTP_PROXY_HOST
argument_list|)
decl_stmt|;
name|String
name|originalProxyPort
init|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
name|HTTP_PROXY_PORT
argument_list|)
decl_stmt|;
name|String
name|originalNonProxyHosts
init|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
name|HTTP_NON_PROXY_HOSTS
argument_list|)
decl_stmt|;
name|String
name|originalProxyUser
init|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
name|HTTP_PROXY_USER
argument_list|)
decl_stmt|;
name|String
name|originalProxyPassword
init|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
name|HTTP_PROXY_PASSWORD
argument_list|)
decl_stmt|;
name|configureProxyServerSettings
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|GenericWsdlOption
argument_list|>
name|effectiveWsdlOptions
init|=
name|createWsdlOptionsFromScansAndExplicitWsdlOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|effectiveWsdlOptions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Nothing to generate"
argument_list|)
expr_stmt|;
return|return;
block|}
name|ClassLoaderSwitcher
name|classLoaderSwitcher
init|=
operator|new
name|ClassLoaderSwitcher
argument_list|(
name|getLog
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|Bus
name|bus
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Set
argument_list|<
name|URI
argument_list|>
name|cp
init|=
name|classLoaderSwitcher
operator|.
name|switchClassLoader
argument_list|(
name|project
argument_list|,
name|useCompileClasspath
argument_list|,
name|classesDir
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"once"
operator|.
name|equals
argument_list|(
name|fork
argument_list|)
operator|||
literal|"true"
operator|.
name|equals
argument_list|(
name|fork
argument_list|)
condition|)
block|{
name|forkOnce
argument_list|(
name|cp
argument_list|,
name|effectiveWsdlOptions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|GenericWsdlOption
name|o
range|:
name|effectiveWsdlOptions
control|)
block|{
name|bus
operator|=
name|generate
argument_list|(
name|o
argument_list|,
name|bus
argument_list|,
name|cp
argument_list|)
expr_stmt|;
name|File
name|dirs
index|[]
init|=
name|o
operator|.
name|getDeleteDirs
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|dirs
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|result
operator|=
name|result
operator|&&
name|deleteDir
argument_list|(
name|dirs
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
comment|// cleanup as much as we can.
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|classLoaderSwitcher
operator|.
name|restoreClassLoader
argument_list|()
expr_stmt|;
name|restoreProxySetting
argument_list|(
name|originalProxyHost
argument_list|,
name|originalProxyPort
argument_list|,
name|originalNonProxyHosts
argument_list|,
name|originalProxyUser
argument_list|,
name|originalProxyPassword
argument_list|)
expr_stmt|;
block|}
name|checkResources
argument_list|()
expr_stmt|;
comment|// refresh the generated sources
if|if
condition|(
name|project
operator|!=
literal|null
operator|&&
name|getGeneratedSourceRoot
argument_list|()
operator|!=
literal|null
operator|&&
name|getGeneratedSourceRoot
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|buildContext
operator|.
name|refresh
argument_list|(
name|getGeneratedSourceRoot
argument_list|()
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|!=
literal|null
operator|&&
name|getGeneratedTestRoot
argument_list|()
operator|!=
literal|null
operator|&&
name|getGeneratedTestRoot
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|buildContext
operator|.
name|refresh
argument_list|(
name|getGeneratedTestRoot
argument_list|()
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkResources
parameter_list|()
block|{
name|File
name|root
init|=
name|project
operator|.
name|getBasedir
argument_list|()
decl_stmt|;
name|Resource
name|sourceRoot
init|=
literal|null
decl_stmt|;
name|Resource
name|testRoot
init|=
literal|null
decl_stmt|;
name|File
name|genroot
init|=
name|getGeneratedSourceRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|genroot
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Resource
argument_list|>
name|resources
init|=
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getResources
argument_list|()
decl_stmt|;
for|for
control|(
name|Resource
name|r
range|:
name|resources
control|)
block|{
name|File
name|d
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|r
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|equals
argument_list|(
name|genroot
argument_list|)
condition|)
block|{
name|sourceRoot
operator|=
name|r
expr_stmt|;
block|}
block|}
name|Resource
name|r2
init|=
name|scanForResources
argument_list|(
name|genroot
argument_list|,
name|sourceRoot
argument_list|)
decl_stmt|;
if|if
condition|(
name|r2
operator|!=
name|sourceRoot
condition|)
block|{
name|r2
operator|.
name|setDirectory
argument_list|(
name|getGeneratedSourceRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|project
operator|.
name|addResource
argument_list|(
name|r2
argument_list|)
expr_stmt|;
block|}
block|}
name|genroot
operator|=
name|getGeneratedTestRoot
argument_list|()
expr_stmt|;
if|if
condition|(
name|genroot
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Resource
argument_list|>
name|resources
init|=
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getTestResources
argument_list|()
decl_stmt|;
for|for
control|(
name|Resource
name|r
range|:
name|resources
control|)
block|{
name|File
name|d
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|r
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|equals
argument_list|(
name|genroot
argument_list|)
condition|)
block|{
name|testRoot
operator|=
name|r
expr_stmt|;
block|}
block|}
name|Resource
name|r2
init|=
name|scanForResources
argument_list|(
name|genroot
argument_list|,
name|testRoot
argument_list|)
decl_stmt|;
if|if
condition|(
name|r2
operator|!=
name|testRoot
condition|)
block|{
name|r2
operator|.
name|setDirectory
argument_list|(
name|getGeneratedTestRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|project
operator|.
name|addTestResource
argument_list|(
name|r2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Resource
name|scanForResources
parameter_list|(
name|File
name|rootFile
parameter_list|,
name|Resource
name|root
parameter_list|)
block|{
name|File
name|files
index|[]
init|=
name|rootFile
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return
name|root
return|;
block|}
for|for
control|(
name|File
name|f
range|:
name|files
control|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|root
operator|=
name|scanForResources
argument_list|(
name|f
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|f
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".java"
argument_list|)
condition|)
block|{
name|String
name|n
init|=
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|n
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|n
operator|=
literal|"**/*"
operator|+
name|n
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|root
operator|=
operator|new
name|Resource
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|root
operator|.
name|getIncludes
argument_list|()
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|root
operator|.
name|addInclude
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|root
return|;
block|}
specifier|private
name|void
name|restoreProxySetting
parameter_list|(
name|String
name|originalProxyHost
parameter_list|,
name|String
name|originalProxyPort
parameter_list|,
name|String
name|originalNonProxyHosts
parameter_list|,
name|String
name|originalProxyUser
parameter_list|,
name|String
name|originalProxyPassword
parameter_list|)
block|{
if|if
condition|(
name|originalProxyHost
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|HTTP_PROXY_HOST
argument_list|,
name|originalProxyHost
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
name|HTTP_PROXY_HOST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|originalProxyPort
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|HTTP_PROXY_PORT
argument_list|,
name|originalProxyPort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
name|HTTP_PROXY_PORT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|originalNonProxyHosts
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|HTTP_NON_PROXY_HOSTS
argument_list|,
name|originalNonProxyHosts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
name|HTTP_NON_PROXY_HOSTS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|originalProxyUser
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|HTTP_PROXY_USER
argument_list|,
name|originalProxyUser
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
name|HTTP_PROXY_USER
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|originalProxyPassword
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|HTTP_PROXY_PASSWORD
argument_list|,
name|originalProxyPassword
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
name|HTTP_PROXY_PASSWORD
argument_list|)
expr_stmt|;
block|}
name|Proxy
name|proxy
init|=
name|mavenSession
operator|.
name|getSettings
argument_list|()
operator|.
name|getActiveProxy
argument_list|()
decl_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|proxy
operator|.
name|getUsername
argument_list|()
argument_list|)
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|proxy
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
name|Authenticator
operator|.
name|setDefault
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|Bus
name|generate
parameter_list|(
name|GenericWsdlOption
name|o
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|Set
argument_list|<
name|URI
argument_list|>
name|cp
parameter_list|)
throws|throws
name|MojoExecutionException
function_decl|;
specifier|protected
name|void
name|addPluginArtifact
parameter_list|(
name|Set
argument_list|<
name|URI
argument_list|>
name|artifactsPath
parameter_list|)
block|{
comment|// for Maven 2.x, the actual artifact isn't in the list.... need to try and find it
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".class"
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
literal|"jar"
operator|.
name|equals
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|contains
argument_list|(
literal|"!"
argument_list|)
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
literal|'!'
argument_list|)
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|,
literal|null
argument_list|,
name|url
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getSchemeSpecificPart
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|uri
operator|.
name|toString
argument_list|()
decl_stmt|;
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|6
operator|-
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|artifactsPath
operator|.
name|add
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ex.printStackTrace();
block|}
block|}
specifier|protected
name|void
name|configureProxyServerSettings
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
name|Proxy
name|proxy
init|=
name|mavenSession
operator|.
name|getSettings
argument_list|()
operator|.
name|getActiveProxy
argument_list|()
decl_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Using proxy server configured in maven."
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy
operator|.
name|getHost
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Proxy in settings.xml has no host"
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
name|proxy
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|HTTP_PROXY_HOST
argument_list|,
name|proxy
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|String
operator|.
name|valueOf
argument_list|(
name|proxy
operator|.
name|getPort
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|HTTP_PROXY_PORT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|proxy
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proxy
operator|.
name|getNonProxyHosts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|HTTP_NON_PROXY_HOSTS
argument_list|,
name|proxy
operator|.
name|getNonProxyHosts
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|proxy
operator|.
name|getUsername
argument_list|()
argument_list|)
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|proxy
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|String
name|authUser
init|=
name|proxy
operator|.
name|getUsername
argument_list|()
decl_stmt|;
specifier|final
name|String
name|authPassword
init|=
name|proxy
operator|.
name|getPassword
argument_list|()
decl_stmt|;
name|Authenticator
operator|.
name|setDefault
argument_list|(
operator|new
name|Authenticator
argument_list|()
block|{
specifier|public
name|PasswordAuthentication
name|getPasswordAuthentication
parameter_list|()
block|{
return|return
operator|new
name|PasswordAuthentication
argument_list|(
name|authUser
argument_list|,
name|authPassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HTTP_PROXY_USER
argument_list|,
name|authUser
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HTTP_PROXY_PORT
argument_list|,
name|authPassword
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
specifier|abstract
name|List
argument_list|<
name|GenericWsdlOption
argument_list|>
name|createWsdlOptionsFromScansAndExplicitWsdlOptions
parameter_list|()
throws|throws
name|MojoExecutionException
function_decl|;
comment|/**      * Recursively delete the given directory      *       * @param f      * @return      */
specifier|protected
name|boolean
name|deleteDir
parameter_list|(
name|File
name|f
parameter_list|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
name|files
index|[]
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|files
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|deleteDir
argument_list|(
name|files
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|f
operator|.
name|delete
argument_list|()
return|;
block|}
name|buildContext
operator|.
name|refresh
argument_list|(
name|f
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|protected
specifier|abstract
name|String
name|getMarkerSuffix
parameter_list|()
function_decl|;
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|generateCommandLine
parameter_list|(
name|GenericWsdlOption
name|wsdlOption
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|File
name|outputDirFile
init|=
name|wsdlOption
operator|.
name|getOutputDir
argument_list|()
decl_stmt|;
name|outputDirFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|URI
name|basedir
init|=
name|project
operator|.
name|getBasedir
argument_list|()
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|URI
name|wsdlURI
init|=
name|getWsdlURI
argument_list|(
name|wsdlOption
argument_list|,
name|basedir
argument_list|)
decl_stmt|;
return|return
name|wsdlOption
operator|.
name|generateCommandLine
argument_list|(
name|outputDirFile
argument_list|,
name|basedir
argument_list|,
name|wsdlURI
argument_list|,
name|getLog
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|void
name|forkOnce
parameter_list|(
name|Set
argument_list|<
name|URI
argument_list|>
name|classPath
parameter_list|,
name|List
argument_list|<
name|GenericWsdlOption
argument_list|>
name|effectiveWsdlOptions
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|List
argument_list|<
name|GenericWsdlOption
argument_list|>
name|toDo
init|=
operator|new
name|LinkedList
argument_list|<
name|GenericWsdlOption
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|wargs
init|=
operator|new
name|LinkedList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|GenericWsdlOption
name|wsdlOption
range|:
name|effectiveWsdlOptions
control|)
block|{
name|File
name|outputDirFile
init|=
name|wsdlOption
operator|.
name|getOutputDir
argument_list|()
decl_stmt|;
name|outputDirFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|URI
name|basedir
init|=
name|project
operator|.
name|getBasedir
argument_list|()
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|URI
name|wsdlURI
init|=
name|getWsdlURI
argument_list|(
name|wsdlOption
argument_list|,
name|basedir
argument_list|)
decl_stmt|;
name|File
name|doneFile
init|=
name|getDoneFile
argument_list|(
name|basedir
argument_list|,
name|wsdlURI
argument_list|,
name|getMarkerSuffix
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldRun
argument_list|(
name|wsdlOption
argument_list|,
name|doneFile
argument_list|,
name|wsdlURI
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|doneFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|toDo
operator|.
name|add
argument_list|(
name|wsdlOption
argument_list|)
expr_stmt|;
name|wargs
operator|.
name|add
argument_list|(
name|generateCommandLine
argument_list|(
name|wsdlOption
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wargs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|URI
argument_list|>
name|artifactsPath
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Artifact
name|a
range|:
name|pluginArtifacts
control|)
block|{
name|File
name|file
init|=
name|a
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to find file for artifact "
operator|+
name|a
operator|.
name|getGroupId
argument_list|()
operator|+
literal|":"
operator|+
name|a
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|":"
operator|+
name|a
operator|.
name|getVersion
argument_list|()
argument_list|)
throw|;
block|}
name|artifactsPath
operator|.
name|add
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addPluginArtifact
argument_list|(
name|artifactsPath
argument_list|)
expr_stmt|;
name|artifactsPath
operator|.
name|addAll
argument_list|(
name|classPath
argument_list|)
expr_stmt|;
name|String
name|args
index|[]
init|=
name|createForkOnceArgs
argument_list|(
name|wargs
argument_list|)
decl_stmt|;
name|runForked
argument_list|(
name|artifactsPath
argument_list|,
name|getForkClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
for|for
control|(
name|GenericWsdlOption
name|wsdlOption
range|:
name|toDo
control|)
block|{
name|File
name|dirs
index|[]
init|=
name|wsdlOption
operator|.
name|getDeleteDirs
argument_list|()
decl_stmt|;
if|if
condition|(
name|dirs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|dirs
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|deleteDir
argument_list|(
name|dirs
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|URI
name|basedir
init|=
name|project
operator|.
name|getBasedir
argument_list|()
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|URI
name|wsdlURI
init|=
name|getWsdlURI
argument_list|(
name|wsdlOption
argument_list|,
name|basedir
argument_list|)
decl_stmt|;
name|File
name|doneFile
init|=
name|getDoneFile
argument_list|(
name|basedir
argument_list|,
name|wsdlURI
argument_list|,
name|getMarkerSuffix
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|createMarkerFile
argument_list|(
name|wsdlOption
argument_list|,
name|doneFile
argument_list|,
name|wsdlURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Could not create marker file "
operator|+
name|doneFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|abstract
name|Class
argument_list|<
name|?
argument_list|>
name|getForkClass
parameter_list|()
function_decl|;
specifier|protected
name|File
name|getDoneFile
parameter_list|(
name|URI
name|basedir
parameter_list|,
name|URI
name|wsdlURI
parameter_list|,
name|String
name|mojo
parameter_list|)
block|{
name|String
name|doneFileName
init|=
name|wsdlURI
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|MessageDigest
name|cript
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-1"
argument_list|)
decl_stmt|;
name|cript
operator|.
name|reset
argument_list|()
expr_stmt|;
name|cript
operator|.
name|update
argument_list|(
name|doneFileName
operator|.
name|getBytes
argument_list|(
literal|"utf8"
argument_list|)
argument_list|)
expr_stmt|;
name|doneFileName
operator|=
operator|new
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|HexBinaryAdapter
argument_list|()
operator|.
name|marshal
argument_list|(
name|cript
operator|.
name|digest
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore,we'll try and fake it based on the wsdl
comment|// Strip the basedir from the doneFileName
if|if
condition|(
name|doneFileName
operator|.
name|startsWith
argument_list|(
name|basedir
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|doneFileName
operator|=
name|doneFileName
operator|.
name|substring
argument_list|(
name|basedir
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If URL to WSDL, replace ? and& since they're invalid chars for file names
comment|// Not to mention slashes.
name|doneFileName
operator|=
name|doneFileName
operator|.
name|replace
argument_list|(
literal|'?'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'&'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
name|doneFileName
operator|+=
literal|".DONE"
expr_stmt|;
block|}
return|return
operator|new
name|File
argument_list|(
name|markerDirectory
argument_list|,
literal|"."
operator|+
name|doneFileName
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|File
name|getGeneratedSourceRoot
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|File
name|getGeneratedTestRoot
parameter_list|()
function_decl|;
specifier|protected
name|void
name|runForked
parameter_list|(
name|Set
argument_list|<
name|URI
argument_list|>
name|classPath
parameter_list|,
name|String
name|mainClassName
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Running code generation in fork mode..."
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Running code generation in fork mode with args "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|Commandline
name|cmd
init|=
operator|new
name|Commandline
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|getShell
argument_list|()
operator|.
name|setQuotedArgumentsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// for JVM args
name|cmd
operator|.
name|setWorkingDirectory
argument_list|(
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cmd
operator|.
name|setExecutable
argument_list|(
name|getJavaExecutable
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|cmd
operator|.
name|createArg
argument_list|()
operator|.
name|setLine
argument_list|(
name|additionalJvmArgs
argument_list|)
expr_stmt|;
name|File
name|file
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// file = new File("/tmp/test.jar");
name|file
operator|=
name|FileUtils
operator|.
name|createTempFile
argument_list|(
literal|"cxf-codegen"
argument_list|,
literal|".jar"
argument_list|)
expr_stmt|;
name|JarArchiver
name|jar
init|=
operator|new
name|JarArchiver
argument_list|()
decl_stmt|;
name|jar
operator|.
name|setDestFile
argument_list|(
name|file
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|()
decl_stmt|;
name|Attribute
name|attr
init|=
operator|new
name|Attribute
argument_list|()
decl_stmt|;
name|attr
operator|.
name|setName
argument_list|(
literal|"Class-Path"
argument_list|)
expr_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|8000
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|cp
range|:
name|classPath
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|cp
operator|.
name|toURL
argument_list|()
operator|.
name|toExternalForm
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|attr
operator|.
name|setValue
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|manifest
operator|.
name|getMainSection
argument_list|()
operator|.
name|addConfiguredAttribute
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|attr
operator|=
operator|new
name|Attribute
argument_list|()
expr_stmt|;
name|attr
operator|.
name|setName
argument_list|(
literal|"Main-Class"
argument_list|)
expr_stmt|;
name|attr
operator|.
name|setValue
argument_list|(
name|mainClassName
argument_list|)
expr_stmt|;
name|manifest
operator|.
name|getMainSection
argument_list|()
operator|.
name|addConfiguredAttribute
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|jar
operator|.
name|addConfiguredManifest
argument_list|(
name|manifest
argument_list|)
expr_stmt|;
name|jar
operator|.
name|createArchive
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|createArg
argument_list|()
operator|.
name|setValue
argument_list|(
literal|"-jar"
argument_list|)
expr_stmt|;
name|String
name|tmpFilePath
init|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmpFilePath
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
comment|//ensure the path is in double quotation marks if the path contain space
name|tmpFilePath
operator|=
literal|"\""
operator|+
name|tmpFilePath
operator|+
literal|"\""
expr_stmt|;
block|}
name|cmd
operator|.
name|createArg
argument_list|()
operator|.
name|setValue
argument_list|(
name|tmpFilePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Could not create runtime jar"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
name|cmd
operator|.
name|addArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|StreamConsumer
name|out
init|=
operator|new
name|StreamConsumer
argument_list|()
block|{
specifier|public
name|void
name|consumeLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StreamConsumer
name|err
init|=
operator|new
name|StreamConsumer
argument_list|()
block|{
specifier|public
name|void
name|consumeLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|b
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|int
name|exitCode
decl_stmt|;
try|try
block|{
name|exitCode
operator|=
name|CommandLineUtils
operator|.
name|executeCommandLine
argument_list|(
name|cmd
argument_list|,
name|out
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandLineException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|cmdLine
init|=
name|CommandLineUtils
operator|.
name|toString
argument_list|(
name|cmd
operator|.
name|getCommandline
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
name|StringBuffer
name|msg
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"\nExit code: "
argument_list|)
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Command line was: "
argument_list|)
operator|.
name|append
argument_list|(
name|cmdLine
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
name|b
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"WSDL2Java Error"
argument_list|)
condition|)
block|{
name|StringBuffer
name|msg
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Command line was: "
argument_list|)
operator|.
name|append
argument_list|(
name|cmdLine
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Determine if code should be generated from the given wsdl      *       * @param wsdlOption      * @param doneFile      * @param wsdlURI      * @return      */
specifier|protected
specifier|abstract
name|boolean
name|shouldRun
parameter_list|(
name|GenericWsdlOption
name|wsdlOption
parameter_list|,
name|File
name|doneFile
parameter_list|,
name|URI
name|wsdlURI
parameter_list|)
function_decl|;
specifier|protected
name|void
name|createMarkerFile
parameter_list|(
name|GenericWsdlOption
name|wsdlOption
parameter_list|,
name|File
name|doneFile
parameter_list|,
name|URI
name|wsdlURI
parameter_list|)
throws|throws
name|IOException
block|{
name|doneFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
index|[]
name|createForkOnceArgs
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|wargs
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
name|File
name|f
init|=
name|FileUtils
operator|.
name|createTempFile
argument_list|(
literal|"cxf-w2j"
argument_list|,
literal|"args"
argument_list|)
decl_stmt|;
name|PrintWriter
name|fw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|args
range|:
name|wargs
control|)
block|{
name|fw
operator|.
name|println
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|args
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|args
control|)
block|{
name|fw
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|fw
operator|.
name|println
argument_list|(
literal|"-1"
argument_list|)
expr_stmt|;
name|fw
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
index|[]
block|{
name|f
operator|.
name|getAbsolutePath
argument_list|()
block|}
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Could not create argument file"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * Try to find a file matching the wsdl path (either absolutely, relatively to the current dir or to      * the project base dir)      *       * @return wsdl file      */
specifier|public
name|File
name|getWsdlFile
parameter_list|(
name|GenericWsdlOption
name|option
parameter_list|,
name|File
name|baseDir
parameter_list|)
block|{
if|if
condition|(
name|option
operator|.
name|getUri
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|File
name|file
init|=
literal|null
decl_stmt|;
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|option
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|file
operator|==
literal|null
operator|||
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|option
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|option
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
specifier|public
name|URI
name|getWsdlURI
parameter_list|(
name|GenericWsdlOption
name|option
parameter_list|,
name|URI
name|baseURI
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|String
name|wsdlLocation
init|=
name|option
operator|.
name|getUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|wsdlLocation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"No wsdl available for base URI "
operator|+
name|baseURI
argument_list|)
throw|;
block|}
name|File
name|wsdlFile
init|=
operator|new
name|File
argument_list|(
name|wsdlLocation
argument_list|)
decl_stmt|;
return|return
name|wsdlFile
operator|.
name|exists
argument_list|()
condition|?
name|wsdlFile
operator|.
name|toURI
argument_list|()
else|:
name|baseURI
operator|.
name|resolve
argument_list|(
name|URIParserUtil
operator|.
name|escapeChars
argument_list|(
name|wsdlLocation
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|void
name|downloadRemoteWsdls
parameter_list|(
name|List
argument_list|<
name|GenericWsdlOption
argument_list|>
name|effectiveWsdlOptions
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
for|for
control|(
name|GenericWsdlOption
name|wsdlOption
range|:
name|effectiveWsdlOptions
control|)
block|{
name|WsdlArtifact
name|wsdlA
init|=
name|wsdlOption
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
if|if
condition|(
name|wsdlA
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Artifact
name|wsdlArtifact
init|=
name|repositorySystem
operator|.
name|createArtifactWithClassifier
argument_list|(
name|wsdlA
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|wsdlA
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|wsdlA
operator|.
name|getVersion
argument_list|()
argument_list|,
name|wsdlA
operator|.
name|getType
argument_list|()
argument_list|,
name|wsdlA
operator|.
name|getClassifier
argument_list|()
argument_list|)
decl_stmt|;
name|wsdlArtifact
operator|=
name|resolveRemoteWsdlArtifact
argument_list|(
name|wsdlArtifact
argument_list|)
expr_stmt|;
if|if
condition|(
name|wsdlArtifact
operator|!=
literal|null
condition|)
block|{
name|File
name|supposedFile
init|=
name|wsdlArtifact
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|supposedFile
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|supposedFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Apparent Maven bug: wsdl artifact 'resolved' to "
operator|+
name|supposedFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" for "
operator|+
name|wsdlArtifact
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|path
init|=
name|supposedFile
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Resolved WSDL artifact to file "
operator|+
name|path
argument_list|)
expr_stmt|;
name|wsdlOption
operator|.
name|setUri
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|File
name|getJavaExecutable
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|exe
init|=
name|SystemUtils
operator|.
name|IS_OS_WINDOWS
operator|&&
operator|!
name|javaExecutable
operator|.
name|endsWith
argument_list|(
literal|".exe"
argument_list|)
condition|?
literal|".exe"
else|:
literal|""
decl_stmt|;
name|File
name|javaExe
init|=
operator|new
name|File
argument_list|(
name|javaExecutable
operator|+
name|exe
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|javaExe
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The java executable '"
operator|+
name|javaExe
operator|+
literal|"' doesn't exist or is not a file."
operator|+
literal|"Verify the<javaExecutable/> parameter."
argument_list|)
throw|;
block|}
return|return
name|javaExe
return|;
block|}
specifier|private
name|Artifact
name|resolveRemoteWsdlArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|Artifact
name|remoteWsdl
init|=
name|resolveDependentWsdl
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteWsdl
operator|==
literal|null
condition|)
block|{
name|remoteWsdl
operator|=
name|resolveAttachedWsdl
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remoteWsdl
operator|==
literal|null
condition|)
block|{
name|remoteWsdl
operator|=
name|resolveArbitraryWsdl
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remoteWsdl
operator|!=
literal|null
operator|&&
name|remoteWsdl
operator|.
name|isResolved
argument_list|()
condition|)
block|{
return|return
name|remoteWsdl
return|;
block|}
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to resolve WSDL artifact %s"
argument_list|,
name|artifact
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|private
name|Artifact
name|resolveDependentWsdl
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|scopes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|scopes
operator|.
name|add
argument_list|(
name|Artifact
operator|.
name|SCOPE_RUNTIME
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Artifact
argument_list|>
name|artifactSet
init|=
literal|null
decl_stmt|;
try|try
block|{
name|artifactSet
operator|=
name|projectDependencyResolver
operator|.
name|resolve
argument_list|(
name|project
argument_list|,
name|scopes
argument_list|,
name|mavenSession
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AbstractArtifactResolutionException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Error resolving dependent wsdl artifact."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|findWsdlArtifact
argument_list|(
name|artifact
argument_list|,
name|artifactSet
argument_list|)
return|;
block|}
specifier|private
name|Artifact
name|resolveAttachedWsdl
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|List
argument_list|<
name|MavenProject
argument_list|>
name|rProjects
init|=
name|mavenSession
operator|.
name|getProjects
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Artifact
argument_list|>
name|artifactList
init|=
operator|new
name|ArrayList
argument_list|<
name|Artifact
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MavenProject
name|rProject
range|:
name|rProjects
control|)
block|{
name|List
argument_list|<
name|Artifact
argument_list|>
name|list
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|rProject
operator|.
name|getAttachedArtifacts
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|artifactList
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|findWsdlArtifact
argument_list|(
name|artifact
argument_list|,
name|artifactList
argument_list|)
return|;
block|}
specifier|private
name|Artifact
name|resolveArbitraryWsdl
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|ArtifactResolutionRequest
name|request
init|=
operator|new
name|ArtifactResolutionRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|request
operator|.
name|setResolveRoot
argument_list|(
literal|true
argument_list|)
operator|.
name|setResolveTransitively
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|request
operator|.
name|setServers
argument_list|(
name|session
operator|.
name|getRequest
argument_list|()
operator|.
name|getServers
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMirrors
argument_list|(
name|session
operator|.
name|getRequest
argument_list|()
operator|.
name|getMirrors
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setProxies
argument_list|(
name|session
operator|.
name|getRequest
argument_list|()
operator|.
name|getProxies
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setLocalRepository
argument_list|(
name|session
operator|.
name|getLocalRepository
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRemoteRepositories
argument_list|(
name|session
operator|.
name|getRequest
argument_list|()
operator|.
name|getRemoteRepositories
argument_list|()
argument_list|)
expr_stmt|;
name|ArtifactResolutionResult
name|result
init|=
name|repositorySystem
operator|.
name|resolve
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|getOriginatingArtifact
argument_list|()
return|;
block|}
specifier|private
name|Artifact
name|findWsdlArtifact
parameter_list|(
name|Artifact
name|targetArtifact
parameter_list|,
name|Collection
argument_list|<
name|Artifact
argument_list|>
name|artifactSet
parameter_list|)
block|{
if|if
condition|(
name|artifactSet
operator|!=
literal|null
operator|&&
operator|!
name|artifactSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Artifact
name|pArtifact
range|:
name|artifactSet
control|)
block|{
if|if
condition|(
name|targetArtifact
operator|.
name|getGroupId
argument_list|()
operator|.
name|equals
argument_list|(
name|pArtifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
operator|&&
name|targetArtifact
operator|.
name|getArtifactId
argument_list|()
operator|.
name|equals
argument_list|(
name|pArtifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|&&
name|targetArtifact
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|pArtifact
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|&&
literal|"wsdl"
operator|.
name|equals
argument_list|(
name|pArtifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s resolved to %s"
argument_list|,
name|pArtifact
operator|.
name|toString
argument_list|()
argument_list|,
name|pArtifact
operator|.
name|getFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pArtifact
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

