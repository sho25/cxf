begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|Customer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|CustomerService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|example
operator|.
name|customerservice
operator|.
name|NoSuchCustomerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Calls the CustomerService using the proxy created by CXF and does some assertions to make   * sure the calls work.  *   * This also shows how typical user code on the client side   * could look like. Make sure to keep your business code  * free from spring and cxf dependencies as far as possible.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|CustomerServiceTester
block|{
comment|// The CustomerService proxy will be injected either by spring or by a direct call to the setter
name|CustomerService
name|customerService
decl_stmt|;
specifier|public
name|CustomerService
name|getCustomerService
parameter_list|()
block|{
return|return
name|customerService
return|;
block|}
specifier|public
name|void
name|setCustomerService
parameter_list|(
name|CustomerService
name|customerService
parameter_list|)
block|{
name|this
operator|.
name|customerService
operator|=
name|customerService
expr_stmt|;
block|}
specifier|public
name|void
name|testCustomerService
parameter_list|()
throws|throws
name|NoSuchCustomerException
block|{
name|List
argument_list|<
name|Customer
argument_list|>
name|customers
init|=
literal|null
decl_stmt|;
comment|// First we test the positive case where customers are found and we retreive
comment|// a list of customers
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sending request for customers named Smith"
argument_list|)
expr_stmt|;
name|customers
operator|=
name|customerService
operator|.
name|getCustomersByName
argument_list|(
literal|"Smith"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Response received"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|customers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|customers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Then we test for an unknown Customer name and expect the NoSuchCustomerException
try|try
block|{
name|customers
operator|=
name|customerService
operator|.
name|getCustomersByName
argument_list|(
literal|"None"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"We should get a NoSuchCustomerException here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchCustomerException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"FaultInfo must not be null"
argument_list|,
name|e
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"None"
argument_list|,
name|e
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getCustomerName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"NoSuchCustomer exception was received as expected"
argument_list|)
expr_stmt|;
block|}
comment|// The implementation of updateCustomer is set to sleep for some seconds.
comment|// Still this method should return instantly as the method is declared
comment|// as a one way method in the WSDL
name|Customer
name|customer
init|=
operator|new
name|Customer
argument_list|()
decl_stmt|;
name|customer
operator|.
name|setName
argument_list|(
literal|"Smith"
argument_list|)
expr_stmt|;
name|customerService
operator|.
name|updateCustomer
argument_list|(
name|customer
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"All calls were successful"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

