begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|demo
operator|.
name|throttling
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|metrics
operator|.
name|MetricsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|metrics
operator|.
name|codahale
operator|.
name|CodahaleMetricsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|throttling
operator|.
name|ThrottleResponse
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Customer
block|{
specifier|protected
specifier|final
name|String
name|name
decl_stmt|;
specifier|protected
specifier|volatile
name|CodahaleMetricsContext
name|metrics
decl_stmt|;
specifier|public
name|Customer
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|name
operator|=
name|n
expr_stmt|;
block|}
name|MetricsContext
name|getMetricsContext
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|)
block|{
if|if
condition|(
name|metrics
operator|==
literal|null
condition|)
block|{
name|metrics
operator|=
operator|new
name|CodahaleMetricsContext
argument_list|(
literal|"demo.server:customer="
operator|+
name|name
operator|+
literal|",type=Customer,"
argument_list|,
name|registry
argument_list|)
expr_stmt|;
block|}
return|return
name|metrics
return|;
block|}
specifier|public
specifier|abstract
name|void
name|throttle
parameter_list|(
name|ThrottleResponse
name|r
parameter_list|)
function_decl|;
specifier|public
specifier|static
class|class
name|PremiumCustomer
extends|extends
name|Customer
block|{
specifier|public
name|PremiumCustomer
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|super
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|throttle
parameter_list|(
name|ThrottleResponse
name|m
parameter_list|)
block|{
comment|//Premium customers are unthrottled
block|}
block|}
specifier|public
specifier|static
class|class
name|PreferredCustomer
extends|extends
name|Customer
block|{
specifier|public
name|PreferredCustomer
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|super
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|throttle
parameter_list|(
name|ThrottleResponse
name|m
parameter_list|)
block|{
comment|//System.out.println("p  " + metrics.getTotals().getOneMinuteRate() + "  " + metrics.getTotals().getCount());
comment|//Preferred customers are unthrottled until they hit 100req/sec, then start delaying by .05 seconds
comment|//(drops to max of 50req/sec until below the 100req/sec rate)
if|if
condition|(
name|metrics
operator|.
name|getTotals
argument_list|()
operator|.
name|getOneMinuteRate
argument_list|()
operator|>
literal|100
condition|)
block|{
name|m
operator|.
name|setDelay
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|RegularCustomer
extends|extends
name|Customer
block|{
specifier|public
name|RegularCustomer
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|super
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|throttle
parameter_list|(
name|ThrottleResponse
name|m
parameter_list|)
block|{
comment|//Regular customers are unthrottled until they hit 25req/sec, then start delaying by 0.25 seconds
comment|//(drops to max of 4req/sec until below the 25req/sec rate)
if|if
condition|(
name|metrics
operator|.
name|getTotals
argument_list|()
operator|.
name|getOneMinuteRate
argument_list|()
operator|>
literal|25
condition|)
block|{
name|m
operator|.
name|setDelay
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
comment|//They also get throttled more if they are over 10req/sec over a 5 minute period
comment|//(drops to max of 2req/sec until below the 10req/sec rate)
if|if
condition|(
name|metrics
operator|.
name|getTotals
argument_list|()
operator|.
name|getFiveMinuteRate
argument_list|()
operator|>
literal|10
condition|)
block|{
name|m
operator|.
name|setDelay
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|CheapCustomer
extends|extends
name|Customer
block|{
specifier|public
name|CheapCustomer
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|super
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|throttle
parameter_list|(
name|ThrottleResponse
name|m
parameter_list|)
block|{
comment|//System.out.println("ch  " + metrics.getTotals().getOneMinuteRate() + "  " + metrics.getTotals().getCount());
comment|//Cheap customers are always get a .1 sec delay
name|long
name|delay
init|=
literal|100
decl_stmt|;
comment|//Then they get futher throttled dependending on rates
if|if
condition|(
name|metrics
operator|.
name|getTotals
argument_list|()
operator|.
name|getOneMinuteRate
argument_list|()
operator|>
literal|5
condition|)
block|{
name|delay
operator|+=
literal|1000
expr_stmt|;
block|}
comment|//They also get throttled after 5 minutes of more than
if|if
condition|(
name|metrics
operator|.
name|getTotals
argument_list|()
operator|.
name|getFiveMinuteRate
argument_list|()
operator|>
literal|1
condition|)
block|{
name|delay
operator|+=
literal|1000
expr_stmt|;
block|}
name|m
operator|.
name|setDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TrialCustomer
extends|extends
name|Customer
block|{
name|long
name|lastTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|public
name|TrialCustomer
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|super
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|throttle
parameter_list|(
name|ThrottleResponse
name|m
parameter_list|)
block|{
comment|//Trial customers only get 10 requests, then rejected
if|if
condition|(
name|metrics
operator|.
name|getTotals
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>=
literal|10
condition|)
block|{
name|m
operator|.
name|setResponseCode
argument_list|(
literal|429
argument_list|,
literal|"Exceeded"
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|addResponseHeader
argument_list|(
literal|"X-RateLimit-Limit"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|m
operator|.
name|addResponseHeader
argument_list|(
literal|"X-RateLimit-Remaining"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
literal|10
operator|-
name|metrics
operator|.
name|getTotals
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|setDelay
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

