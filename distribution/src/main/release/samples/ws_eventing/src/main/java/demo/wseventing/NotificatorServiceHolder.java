begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|demo
operator|.
name|wseventing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContextEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContextListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|annotation
operator|.
name|WebListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|manager
operator|.
name|SubscriptionManagerInterfaceForNotificators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|notification
operator|.
name|EventSinkInterfaceNotificatorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|notification
operator|.
name|NotificatorService
import|;
end_import

begin_import
import|import
name|demo
operator|.
name|wseventing
operator|.
name|eventapi
operator|.
name|CatastrophicEventSink
import|;
end_import

begin_class
annotation|@
name|WebListener
specifier|public
class|class
name|NotificatorServiceHolder
implements|implements
name|ServletContextListener
block|{
specifier|private
specifier|static
name|NotificatorService
name|instance
decl_stmt|;
specifier|private
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|NotificatorServiceHolder
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|NotificatorService
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|contextInitialized
parameter_list|(
name|ServletContextEvent
name|sce
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Initializing and starting NotificatorService"
argument_list|)
expr_stmt|;
name|instance
operator|=
operator|new
name|EventSinkInterfaceNotificatorService
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|SubscriptionManagerInterfaceForNotificators
name|obtainManager
parameter_list|()
block|{
return|return
name|SingletonSubscriptionManagerContainer
operator|.
name|getInstance
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Class
name|getEventSinkInterface
parameter_list|()
block|{
return|return
name|CatastrophicEventSink
operator|.
name|class
return|;
block|}
block|}
expr_stmt|;
name|instance
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationSingleton
operator|.
name|getInstance
argument_list|()
operator|.
name|createEventSink
argument_list|(
literal|"/default"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|contextDestroyed
parameter_list|(
name|ServletContextEvent
name|sce
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Stopping NotificatorService"
argument_list|)
expr_stmt|;
name|instance
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// very important!
name|SingletonSubscriptionManagerContainer
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

