begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|alarm_retrieval
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|ActiveAlarmFilterT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|AlarmT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|CommunicationPatternT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|CommunicationStyleT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|EventInformationT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|GetActiveAlarmsCountResponseT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|GetActiveAlarmsCountT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|GetActiveAlarmsT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|HeaderT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|MsgTypeT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|ProbableCauseT
import|;
end_import

begin_import
import|import
name|ws
operator|.
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|http
operator|.
name|AlarmRetrieval
import|;
end_import

begin_import
import|import
name|ws
operator|.
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|http
operator|.
name|AlarmRetrieval_Service
import|;
end_import

begin_comment
comment|/**  * org.apache.cxf.alarm_retrieval.client.Client  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Client
block|{
specifier|private
specifier|static
specifier|final
name|QName
name|SERVICE_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"tmf854.v1.ws"
argument_list|,
literal|"AlarmRetrieval"
argument_list|)
decl_stmt|;
specifier|private
name|Client
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|File
name|wsdl
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|AlarmRetrieval_Service
name|ss
init|=
operator|new
name|AlarmRetrieval_Service
argument_list|(
name|wsdl
operator|.
name|toURL
argument_list|()
argument_list|,
name|SERVICE_NAME
argument_list|)
decl_stmt|;
name|AlarmRetrieval
name|port
init|=
name|ss
operator|.
name|getAlarmRetrieval
argument_list|()
decl_stmt|;
name|boolean
name|foundOp
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|"all"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|foundOp
operator|=
literal|true
expr_stmt|;
name|getActiveAlarmsCount
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|getActiveAlarms
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"getActiveAlarmsCount"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|foundOp
operator|=
literal|true
expr_stmt|;
name|getActiveAlarmsCount
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"getActiveAlarms"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|foundOp
operator|=
literal|true
expr_stmt|;
name|getActiveAlarms
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|getActiveAlarmsCount
parameter_list|(
name|AlarmRetrieval
name|port
parameter_list|)
block|{
name|HeaderT
name|header
init|=
operator|new
name|HeaderT
argument_list|()
decl_stmt|;
name|header
operator|.
name|setActivityName
argument_list|(
literal|"getActiveAlarmsCountAsync"
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMsgName
argument_list|(
literal|"getActiveAlarmsCountAsync"
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMsgType
argument_list|(
name|MsgTypeT
operator|.
name|REQUEST
argument_list|)
expr_stmt|;
name|header
operator|.
name|setSenderURI
argument_list|(
literal|"http://mtosi.iona.com/fault/sender"
argument_list|)
expr_stmt|;
name|header
operator|.
name|setDestinationURI
argument_list|(
literal|"http://mtosi.iona.com/fault/destination"
argument_list|)
expr_stmt|;
name|header
operator|.
name|setCommunicationPattern
argument_list|(
name|CommunicationPatternT
operator|.
name|SIMPLE_RESPONSE
argument_list|)
expr_stmt|;
name|header
operator|.
name|setCommunicationStyle
argument_list|(
name|CommunicationStyleT
operator|.
name|MSG
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss.SSSZ"
argument_list|)
decl_stmt|;
name|header
operator|.
name|setTimestamp
argument_list|(
name|formatter
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|HeaderT
argument_list|>
name|mtosiHeader
init|=
operator|new
name|Holder
argument_list|<
name|HeaderT
argument_list|>
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|GetActiveAlarmsCountT
name|mtosiBody
init|=
operator|new
name|GetActiveAlarmsCountT
argument_list|()
decl_stmt|;
name|mtosiBody
operator|.
name|setFilter
argument_list|(
operator|new
name|ActiveAlarmFilterT
argument_list|()
argument_list|)
expr_stmt|;
comment|// use polling method to obtain response
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Invoking getActiveAlarmsCountAsync using polling."
argument_list|)
expr_stmt|;
name|Response
argument_list|<
name|GetActiveAlarmsCountResponseT
argument_list|>
name|response
init|=
name|port
operator|.
name|getActiveAlarmsCountAsync
argument_list|(
name|mtosiHeader
argument_list|,
name|mtosiBody
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|response
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"waiting for operation response..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"InterruptedException while sleeping."
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|response
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Active Alarms Count: "
operator|+
name|response
operator|.
name|get
argument_list|()
operator|.
name|getActiveAlarmCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error - null response."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"InterruptedException getting asynchronous response."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Operation received ExecutionException."
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|getActiveAlarms
parameter_list|(
name|AlarmRetrieval
name|port
parameter_list|)
block|{
name|HeaderT
name|header
init|=
operator|new
name|HeaderT
argument_list|()
decl_stmt|;
name|header
operator|.
name|setActivityName
argument_list|(
literal|"getActiveAlarmsAsync"
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMsgName
argument_list|(
literal|"getActiveAlarmsAsync"
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMsgType
argument_list|(
name|MsgTypeT
operator|.
name|REQUEST
argument_list|)
expr_stmt|;
name|header
operator|.
name|setSenderURI
argument_list|(
literal|"http://mtosi.iona.com/fault/sender"
argument_list|)
expr_stmt|;
name|header
operator|.
name|setDestinationURI
argument_list|(
literal|"http://mtosi.iona.com/fault/destination"
argument_list|)
expr_stmt|;
name|header
operator|.
name|setCommunicationPattern
argument_list|(
name|CommunicationPatternT
operator|.
name|SIMPLE_RESPONSE
argument_list|)
expr_stmt|;
name|header
operator|.
name|setCommunicationStyle
argument_list|(
name|CommunicationStyleT
operator|.
name|MSG
argument_list|)
expr_stmt|;
name|header
operator|.
name|setRequestedBatchSize
argument_list|(
operator|new
name|Long
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss.SSSZ"
argument_list|)
decl_stmt|;
name|header
operator|.
name|setTimestamp
argument_list|(
name|formatter
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|HeaderT
argument_list|>
name|mtosiHeader
init|=
operator|new
name|Holder
argument_list|<
name|HeaderT
argument_list|>
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|GetActiveAlarmsT
name|mtosiBody
init|=
operator|new
name|GetActiveAlarmsT
argument_list|()
decl_stmt|;
name|mtosiBody
operator|.
name|setFilter
argument_list|(
operator|new
name|ActiveAlarmFilterT
argument_list|()
argument_list|)
expr_stmt|;
comment|// use callback method to obtain response
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Invoking getActiveAlarmsAsync using callback."
argument_list|)
expr_stmt|;
name|AsyncAlarmHandler
name|handler
init|=
operator|new
name|AsyncAlarmHandler
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|response
init|=
name|port
operator|.
name|getActiveAlarmsAsync
argument_list|(
name|mtosiHeader
argument_list|,
name|mtosiBody
argument_list|,
name|handler
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|response
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"waiting for handler to receive response..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"getActiveAlarmsAsync operation completed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"InterruptedException while sleeping."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handler
operator|.
name|getResponse
argument_list|()
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error - null response."
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|AlarmT
argument_list|>
name|alarms
init|=
name|handler
operator|.
name|getResponse
argument_list|()
operator|.
name|getActiveAlarm
argument_list|()
decl_stmt|;
name|int
name|alarmCount
init|=
name|alarms
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|alarmCount
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No alarm."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Displaying details for "
operator|+
name|alarmCount
operator|+
literal|" alarm"
operator|+
operator|(
name|alarmCount
operator|==
literal|1
condition|?
literal|":"
else|:
literal|"s:"
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AlarmT
name|alarm
range|:
name|alarms
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Alarm #"
operator|+
name|i
operator|++
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|EventInformationT
name|eventInfo
init|=
name|alarm
operator|.
name|getEventInfo
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- Notification ID: "
operator|+
name|eventInfo
operator|.
name|getNotificationId
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- Object type: "
operator|+
name|eventInfo
operator|.
name|getObjectType
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- OS time: "
operator|+
name|eventInfo
operator|.
name|getOsTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|eventInfo
operator|.
name|getNeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- NE time: "
operator|+
name|eventInfo
operator|.
name|getNeTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|layerRate
init|=
name|alarm
operator|.
name|getLayerRate
argument_list|()
decl_stmt|;
if|if
condition|(
name|layerRate
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- Layer/Rate: "
operator|+
name|layerRate
argument_list|)
expr_stmt|;
block|}
name|ProbableCauseT
name|probableCause
init|=
name|alarm
operator|.
name|getProbableCause
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|probableCause
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- Probable cause type: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
name|String
name|perceivedSeverity
init|=
name|alarm
operator|.
name|getPerceivedSeverity
argument_list|()
decl_stmt|;
if|if
condition|(
name|perceivedSeverity
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- Perceived severity: "
operator|+
name|perceivedSeverity
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- Service affecting: "
operator|+
name|alarm
operator|.
name|getServiceAffecting
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"- Root Cause Alarm Indication: "
operator|+
operator|(
operator|(
name|alarm
operator|.
name|isRcaiIndicator
argument_list|()
operator|)
condition|?
literal|"YES"
else|:
literal|"NO"
operator|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Syntax is: Client<wsdl><operation>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   operation is one of: "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      getActiveAlarmsCount"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      getActiveAlarms"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

