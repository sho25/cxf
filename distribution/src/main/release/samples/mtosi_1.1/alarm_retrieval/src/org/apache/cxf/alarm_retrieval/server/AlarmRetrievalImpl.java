begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|alarm_retrieval
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|AsyncHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|AlarmT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|EventInformationT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|GetActiveAlarmsCountResponseT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|GetActiveAlarmsCountT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|GetActiveAlarmsResponseT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|GetActiveAlarmsT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|HeaderT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|MsgTypeT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|NamingAttributesT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|ObjectTypeT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|ProbableCauseT
import|;
end_import

begin_import
import|import
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|ServiceAffectingT
import|;
end_import

begin_import
import|import
name|ws
operator|.
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|http
operator|.
name|AlarmRetrieval
import|;
end_import

begin_import
import|import
name|ws
operator|.
name|v1
operator|.
name|tmf854
operator|.
name|fault
operator|.
name|http
operator|.
name|ProcessingFailureException
import|;
end_import

begin_class
annotation|@
name|WebService
argument_list|(
name|serviceName
operator|=
literal|"AlarmRetrieval"
argument_list|,
name|portName
operator|=
literal|"AlarmRetrieval"
argument_list|,
name|targetNamespace
operator|=
literal|"tmf854.v1.ws"
argument_list|,
name|endpointInterface
operator|=
literal|"ws.v1.tmf854.fault.http.AlarmRetrieval"
argument_list|)
specifier|public
class|class
name|AlarmRetrievalImpl
implements|implements
name|AlarmRetrieval
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|AlarmRetrievalImpl
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AlarmT
argument_list|>
name|alarms
init|=
operator|new
name|Vector
argument_list|<
name|AlarmT
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addAlarm
parameter_list|(
name|int
name|alarmID
parameter_list|)
block|{
name|AlarmT
name|alarm
init|=
operator|new
name|AlarmT
argument_list|()
decl_stmt|;
name|EventInformationT
name|eventInfo
init|=
operator|new
name|EventInformationT
argument_list|()
decl_stmt|;
name|ProbableCauseT
name|probableCause
init|=
operator|new
name|ProbableCauseT
argument_list|()
decl_stmt|;
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss.SSSZ"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|alarmID
operator|%
literal|2
condition|)
block|{
case|case
literal|1
case|:
name|eventInfo
operator|.
name|setNotificationId
argument_list|(
literal|"0001239"
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|setObjectType
argument_list|(
name|ObjectTypeT
operator|.
name|OT_EQUIPMENT
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|setObjectName
argument_list|(
operator|new
name|NamingAttributesT
argument_list|()
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|setOsTime
argument_list|(
name|formatter
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|setNeTime
argument_list|(
name|formatter
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|setEdgePointRelated
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|probableCause
operator|.
name|setType
argument_list|(
literal|"PROP_odd_probable_cause_type"
argument_list|)
expr_stmt|;
name|alarm
operator|.
name|setEventInfo
argument_list|(
name|eventInfo
argument_list|)
expr_stmt|;
name|alarm
operator|.
name|setIsClearable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|alarm
operator|.
name|setLayerRate
argument_list|(
literal|"PROP_layer_rate_odd"
argument_list|)
expr_stmt|;
name|alarm
operator|.
name|setProbableCause
argument_list|(
name|probableCause
argument_list|)
expr_stmt|;
name|alarm
operator|.
name|setPerceivedSeverity
argument_list|(
literal|"PROP_odd_perceived_severity"
argument_list|)
expr_stmt|;
name|alarm
operator|.
name|setServiceAffecting
argument_list|(
name|ServiceAffectingT
operator|.
name|SA_UNKNOWN
argument_list|)
expr_stmt|;
name|alarm
operator|.
name|setRcaiIndicator
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
default|default:
name|eventInfo
operator|.
name|setNotificationId
argument_list|(
literal|"9876543"
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|setObjectType
argument_list|(
name|ObjectTypeT
operator|.
name|OT_OS
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|setObjectName
argument_list|(
operator|new
name|NamingAttributesT
argument_list|()
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|setOsTime
argument_list|(
name|formatter
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|eventInfo
operator|.
name|setEdgePointRelated
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|probableCause
operator|.
name|setType
argument_list|(
literal|"PROP_even_probable_cause_type"
argument_list|)
expr_stmt|;
name|alarm
operator|.
name|setEventInfo
argument_list|(
name|eventInfo
argument_list|)
expr_stmt|;
name|alarm
operator|.
name|setIsClearable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|alarm
operator|.
name|setLayerRate
argument_list|(
literal|"PROP_layer_rate_even"
argument_list|)
expr_stmt|;
name|alarm
operator|.
name|setProbableCause
argument_list|(
name|probableCause
argument_list|)
expr_stmt|;
name|alarm
operator|.
name|setPerceivedSeverity
argument_list|(
literal|"PROP_even_perceived_severity"
argument_list|)
expr_stmt|;
name|alarm
operator|.
name|setServiceAffecting
argument_list|(
name|ServiceAffectingT
operator|.
name|SA_SERVICE_AFFECTING
argument_list|)
expr_stmt|;
name|alarm
operator|.
name|setRcaiIndicator
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
name|alarms
operator|.
name|add
argument_list|(
name|alarm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Future
argument_list|<
name|?
argument_list|>
name|getActiveAlarmsCountAsync
parameter_list|(
name|Holder
argument_list|<
name|HeaderT
argument_list|>
name|mtosiHeader
parameter_list|,
name|GetActiveAlarmsCountT
name|mtosiBody
parameter_list|,
name|AsyncHandler
argument_list|<
name|GetActiveAlarmsCountResponseT
argument_list|>
name|asyncHandler
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation Future<?> getActiveAlarmsCountAsync"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing operation Future<?> getActiveAlarmsCountAsync"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
argument_list|<
name|GetActiveAlarmsCountResponseT
argument_list|>
name|getActiveAlarmsCountAsync
parameter_list|(
name|Holder
argument_list|<
name|HeaderT
argument_list|>
name|mtosiHeader
parameter_list|,
name|GetActiveAlarmsCountT
name|mtosiBody
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation Response<?> getActiveAlarmsCountAsync"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing operation Response<?> getActiveAlarmsCountAsync"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|GetActiveAlarmsCountResponseT
name|getActiveAlarmsCount
parameter_list|(
name|Holder
argument_list|<
name|HeaderT
argument_list|>
name|mtosiHeader
parameter_list|,
name|GetActiveAlarmsCountT
name|mtosiBody
parameter_list|)
throws|throws
name|ProcessingFailureException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation getActiveAlarmsCount"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"getActiveAlarmsCount() called."
argument_list|)
expr_stmt|;
name|mtosiHeader
operator|.
name|value
operator|.
name|setMsgName
argument_list|(
literal|"getActiveAlarmsCountResponse"
argument_list|)
expr_stmt|;
name|mtosiHeader
operator|.
name|value
operator|.
name|setMsgType
argument_list|(
name|MsgTypeT
operator|.
name|RESPONSE
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss.SSSZ"
argument_list|)
decl_stmt|;
name|mtosiHeader
operator|.
name|value
operator|.
name|setTimestamp
argument_list|(
name|formatter
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|GetActiveAlarmsCountResponseT
name|response
init|=
operator|new
name|GetActiveAlarmsCountResponseT
argument_list|()
decl_stmt|;
name|response
operator|.
name|setActiveAlarmCount
argument_list|(
name|alarms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
specifier|public
name|Future
argument_list|<
name|?
argument_list|>
name|getActiveAlarmsAsync
parameter_list|(
name|Holder
argument_list|<
name|HeaderT
argument_list|>
name|mtosiHeader
parameter_list|,
name|GetActiveAlarmsT
name|mtosiBody
parameter_list|,
name|AsyncHandler
argument_list|<
name|GetActiveAlarmsResponseT
argument_list|>
name|asyncHandler
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation Future<?> getActiveAlarmsAsync"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing operation Future<?> getActiveAlarmsAsync"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
argument_list|<
name|GetActiveAlarmsResponseT
argument_list|>
name|getActiveAlarmsAsync
parameter_list|(
name|Holder
argument_list|<
name|HeaderT
argument_list|>
name|mtosiHeader
parameter_list|,
name|GetActiveAlarmsT
name|mtosiBody
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation Response<?> getActiveAlarmsAsync"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing operation Response<?> getActiveAlarmsAsync"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|GetActiveAlarmsResponseT
name|getActiveAlarms
parameter_list|(
name|Holder
argument_list|<
name|HeaderT
argument_list|>
name|mtosiHeader
parameter_list|,
name|GetActiveAlarmsT
name|mtosiBody
parameter_list|)
throws|throws
name|ProcessingFailureException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Executing operation getActiveAlarms"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"getActiveAlarms() called."
argument_list|)
expr_stmt|;
name|mtosiHeader
operator|.
name|value
operator|.
name|setMsgName
argument_list|(
literal|"getActiveAlarmsResponse"
argument_list|)
expr_stmt|;
name|mtosiHeader
operator|.
name|value
operator|.
name|setMsgType
argument_list|(
name|MsgTypeT
operator|.
name|RESPONSE
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss.SSSZ"
argument_list|)
decl_stmt|;
name|mtosiHeader
operator|.
name|value
operator|.
name|setTimestamp
argument_list|(
name|formatter
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mtosiHeader
operator|.
name|value
operator|.
name|setBatchSequenceEndOfReply
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|GetActiveAlarmsResponseT
operator|.
name|ActiveAlarmList
name|alarmList
init|=
operator|new
name|GetActiveAlarmsResponseT
operator|.
name|ActiveAlarmList
argument_list|()
decl_stmt|;
name|Long
name|requestedCount
init|=
name|mtosiHeader
operator|.
name|value
operator|.
name|getRequestedBatchSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|requestedCount
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
argument_list|<
name|requestedCount
operator|&&
name|alarms
operator|.
name|size
operator|(
operator|)
argument_list|>
literal|0
condition|;
name|i
operator|++
control|)
block|{
name|AlarmT
name|alarm
init|=
name|alarms
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|alarmList
operator|.
name|getActiveAlarm
argument_list|()
operator|.
name|add
argument_list|(
name|alarm
argument_list|)
expr_stmt|;
block|}
comment|// Indicate to the caller if there are more alarms remaining.
if|if
condition|(
name|alarms
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mtosiHeader
operator|.
name|value
operator|.
name|setBatchSequenceEndOfReply
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|alarmList
operator|.
name|getActiveAlarm
argument_list|()
operator|.
name|addAll
argument_list|(
name|alarms
argument_list|)
expr_stmt|;
block|}
name|GetActiveAlarmsResponseT
name|response
init|=
operator|new
name|GetActiveAlarmsResponseT
argument_list|()
decl_stmt|;
name|response
operator|.
name|setActiveAlarmList
argument_list|(
name|alarmList
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

