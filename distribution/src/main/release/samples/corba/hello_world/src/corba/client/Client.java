begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|corba
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|UserException
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|Client
block|{
specifier|private
name|Client
parameter_list|()
block|{
comment|//not consructed
block|}
specifier|static
name|int
name|run
parameter_list|(
name|ORB
name|orb
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|UserException
block|{
comment|// Get "hello" object
comment|// Resolve the HelloWorldImpl by using INS's corbaname url.
comment|// The URL locates the NameService running on localhost
comment|// and listening on 1050 and resolve 'HelloWorld'
comment|// from that NameService
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|obj
init|=
name|orb
operator|.
name|string_to_object
argument_list|(
literal|"corbaname::localhost:1050#HelloWorld"
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Client: Could not resolve target object"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|HelloWorld
name|hello
init|=
name|HelloWorldHelper
operator|.
name|narrow
argument_list|(
name|obj
argument_list|)
decl_stmt|;
comment|// Test our narrowed "hello" object
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Invoking greetMe..."
argument_list|)
expr_stmt|;
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|hello
operator|.
name|greetMe
argument_list|(
name|args
index|[
name|args
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|hello
operator|.
name|greetMe
argument_list|(
literal|"World"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"greetMe.result = "
operator|+
name|result
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// Standalone program initialization
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|int
name|status
init|=
literal|0
decl_stmt|;
name|ORB
name|orb
init|=
literal|null
decl_stmt|;
try|try
block|{
name|orb
operator|=
name|ORB
operator|.
name|init
argument_list|(
name|args
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|=
name|run
argument_list|(
name|orb
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|status
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|orb
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|orb
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|status
operator|=
literal|1
expr_stmt|;
block|}
block|}
name|System
operator|.
name|exit
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

