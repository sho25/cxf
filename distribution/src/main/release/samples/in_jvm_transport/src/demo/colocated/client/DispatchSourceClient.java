begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|demo
operator|.
name|colocated
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Dispatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|DispatchImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|PingMeFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|SOAPService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|types
operator|.
name|FaultDetail
import|;
end_import

begin_import
import|import
name|demo
operator|.
name|colocated
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|DispatchSourceClient
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_NS
init|=
literal|"http://apache.org/hello_world_soap_http"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|SERVICE_NAME
init|=
operator|new
name|QName
argument_list|(
name|SERVICE_NS
argument_list|,
literal|"SOAPService"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|PORT_NAME
init|=
operator|new
name|QName
argument_list|(
name|SERVICE_NS
argument_list|,
literal|"SoapPort"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PAYLOAD_NAMESPACE_URI
init|=
literal|"http://apache.org/hello_world_soap_http/types"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SAYHI_REQUEST_TEMPLATE
init|=
literal|"<ns1:sayHi xmlns:ns1=\"http://apache.org/hello_world_soap_http/types\" />"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GREETME_REQUEST_TEMPLATE
init|=
literal|"<ns1:greetMe xmlns:ns1=\"http://apache.org/hello_world_soap_http/types\"><ns1:requestType>%s</ns1:requestType></ns1:greetMe>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PINGME_REQUEST_TEMPLATE
init|=
literal|"<ns1:pingMe xmlns:ns1=\"http://apache.org/hello_world_soap_http/types\" />"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|SAYHI_OPERATION_NAME
init|=
operator|new
name|QName
argument_list|(
name|SERVICE_NS
argument_list|,
literal|"sayHi"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|GREETME_OPERATION_NAME
init|=
operator|new
name|QName
argument_list|(
name|SERVICE_NS
argument_list|,
literal|"greetMe"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|PINGME_OPERATION_NAME
init|=
operator|new
name|QName
argument_list|(
name|SERVICE_NS
argument_list|,
literal|"pingMe"
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|String
name|ADDRESS
init|=
literal|"http://localhost:9000/SoapContext/GreeterPort"
decl_stmt|;
specifier|private
name|DispatchSourceClient
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|Server
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"inProcess"
block|}
argument_list|)
expr_stmt|;
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|SERVICE_NAME
argument_list|)
decl_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|PORT_NAME
argument_list|,
name|SOAPBinding
operator|.
name|SOAP11HTTP_BINDING
argument_list|,
name|ADDRESS
argument_list|)
expr_stmt|;
name|Dispatch
argument_list|<
name|Source
argument_list|>
name|dispatch
init|=
name|service
operator|.
name|createDispatch
argument_list|(
name|PORT_NAME
argument_list|,
name|Source
operator|.
name|class
argument_list|,
name|Service
operator|.
name|Mode
operator|.
name|PAYLOAD
argument_list|)
decl_stmt|;
name|String
name|resp
decl_stmt|;
name|Source
name|response
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Invoking sayHi..."
argument_list|)
expr_stmt|;
name|setOperation
argument_list|(
name|dispatch
argument_list|,
name|SAYHI_OPERATION_NAME
argument_list|)
expr_stmt|;
name|response
operator|=
name|dispatch
operator|.
name|invoke
argument_list|(
name|encodeSource
argument_list|(
name|SAYHI_REQUEST_TEMPLATE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|resp
operator|=
name|decodeSource
argument_list|(
name|response
argument_list|,
name|PAYLOAD_NAMESPACE_URI
argument_list|,
literal|"responseType"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Server responded with: "
operator|+
name|resp
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Invoking greetMe..."
argument_list|)
expr_stmt|;
name|setOperation
argument_list|(
name|dispatch
argument_list|,
name|GREETME_OPERATION_NAME
argument_list|)
expr_stmt|;
name|response
operator|=
name|dispatch
operator|.
name|invoke
argument_list|(
name|encodeSource
argument_list|(
name|GREETME_REQUEST_TEMPLATE
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|resp
operator|=
name|decodeSource
argument_list|(
name|response
argument_list|,
name|PAYLOAD_NAMESPACE_URI
argument_list|,
literal|"responseType"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Server responded with: "
operator|+
name|resp
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Invoking pingMe, expecting exception..."
argument_list|)
expr_stmt|;
name|setOperation
argument_list|(
name|dispatch
argument_list|,
name|PINGME_OPERATION_NAME
argument_list|)
expr_stmt|;
name|response
operator|=
name|dispatch
operator|.
name|invoke
argument_list|(
name|encodeSource
argument_list|(
name|PINGME_REQUEST_TEMPLATE
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Expected exception: SoapFault has occurred: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setOperation
parameter_list|(
name|Dispatch
argument_list|<
name|Source
argument_list|>
name|dispatch
parameter_list|,
name|QName
name|operationName
parameter_list|)
block|{
name|dispatch
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|MessageContext
operator|.
name|WSDL_OPERATION
argument_list|,
name|operationName
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Source
name|encodeSource
parameter_list|(
name|String
name|template
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|payload
init|=
name|value
operator|==
literal|null
condition|?
name|template
else|:
name|String
operator|.
name|format
argument_list|(
name|template
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
operator|new
name|StreamSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|payload
operator|.
name|getBytes
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|source
return|;
block|}
specifier|private
specifier|static
name|String
name|decodeSource
parameter_list|(
name|Source
name|source
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|Transformer
name|transformer
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|ContentHandler
name|handler
init|=
operator|new
name|ContentHandler
argument_list|(
name|uri
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|source
argument_list|,
operator|new
name|SAXResult
argument_list|(
name|handler
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|handler
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|static
class|class
name|ContentHandler
extends|extends
name|DefaultHandler
block|{
name|StringBuffer
name|buffer
decl_stmt|;
name|String
name|namespaceURI
decl_stmt|;
name|String
name|elementName
decl_stmt|;
name|boolean
name|recording
decl_stmt|;
specifier|public
name|ContentHandler
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|elementName
parameter_list|)
block|{
name|this
operator|.
name|namespaceURI
operator|=
name|namespaceURI
expr_stmt|;
name|this
operator|.
name|elementName
operator|=
name|elementName
expr_stmt|;
block|}
comment|/* (non-Javadoc)          * @see org.xml.sax.helpers.DefaultHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)          */
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|namespaceURI
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|&&
name|elementName
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|recording
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)          * @see org.xml.sax.helpers.DefaultHandler#endElement(java.lang.String, java.lang.String, java.lang.String)          */
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|namespaceURI
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|&&
name|elementName
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|recording
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)          * @see org.xml.sax.helpers.DefaultHandler#characters(char[], int, int)          */
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|recording
condition|)
block|{
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|buffer
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * @return          */
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|buffer
operator|==
literal|null
condition|?
literal|null
else|:
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

