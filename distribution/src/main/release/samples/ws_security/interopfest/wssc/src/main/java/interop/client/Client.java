begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|interop
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|interopbaseaddress
operator|.
name|interop
operator|.
name|IPingService
import|;
end_import

begin_import
import|import
name|interopbaseaddress
operator|.
name|interop
operator|.
name|PingRequest
import|;
end_import

begin_import
import|import
name|interopbaseaddress
operator|.
name|interop
operator|.
name|PingResponse
import|;
end_import

begin_import
import|import
name|interopbaseaddress
operator|.
name|interop
operator|.
name|PingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlsoap
operator|.
name|ping
operator|.
name|Ping
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|Client
block|{
specifier|private
specifier|static
specifier|final
name|String
name|OUT
init|=
literal|"CXF : ping"
decl_stmt|;
comment|/**      * This class is not instantiated      */
specifier|private
name|Client
parameter_list|()
block|{     }
comment|/**      * The main entrypoint into the application      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|useLocalWCFServices
init|=
literal|false
decl_stmt|;
name|boolean
name|local
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|argv
operator|.
name|length
operator|>
literal|0
operator|&&
literal|"local"
operator|.
name|equalsIgnoreCase
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|local
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|argv
operator|.
name|length
operator|>
literal|0
operator|&&
literal|"local"
operator|.
name|equalsIgnoreCase
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|)
operator|||
literal|"ms"
operator|.
name|equalsIgnoreCase
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|String
name|tmp
index|[]
init|=
operator|new
name|String
index|[
name|argv
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|argv
argument_list|,
literal|1
argument_list|,
name|tmp
argument_list|,
literal|0
argument_list|,
name|tmp
operator|.
name|length
argument_list|)
expr_stmt|;
name|argv
operator|=
name|tmp
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|argv
index|[
literal|0
index|]
operator|+
literal|"    "
operator|+
name|local
argument_list|)
expr_stmt|;
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|1
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|)
operator|||
name|argv
index|[
literal|0
index|]
operator|==
literal|null
operator|||
literal|"ALL"
operator|.
name|equals
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|argv
operator|=
operator|new
name|String
index|[]
block|{
comment|//"SecureConversation_UserNameOverTransport_IPingService",
comment|//service not running on the https port
literal|"SecureConversation_MutualCertificate10SignEncrypt_IPingService"
block|,
literal|"AC_IPingService"
block|,
literal|"ADC_IPingService"
block|,
literal|"ADC-ES_IPingService"
block|,
literal|"_A_IPingService"
block|,
literal|"_AD_IPingService"
block|,
literal|"_AD-ES_IPingService"
block|,
literal|"UXC_IPingService"
block|,
literal|"UXDC_IPingService"
block|,
literal|"UXDC-SEES_IPingService"
block|,
literal|"_UX_IPingService"
block|,
literal|"_UXD_IPingService"
block|,
literal|"_UXD-SEES_IPingService"
block|,
literal|"XC_IPingService"
block|,
literal|"XDC_IPingService"
block|,
literal|"XDC_IPingService1"
block|,
literal|"XDC-ES_IPingService"
block|,
literal|"XDC-SEES_IPingService"
block|,
literal|"_X_IPingService"
block|,
literal|"_X10_IPingService"
block|,
literal|"_XD_IPingService"
block|,
literal|"_XD-SEES_IPingService"
block|,
literal|"_XD-ES_IPingService"
block|,
comment|//Kerberos token - not sure where the token comes from or how these works
comment|//"KC_IPingService",
comment|//"KDC_IPingService",
comment|//"KC10_IPingService",
comment|//"KDC10_IPingService",
comment|//"_K10_IPingService",
comment|//"_KD10_IPingService",
comment|//"_K_IPingService",
comment|//"_KD_IPingService",
comment|//"_KD-SEES_IPingService",
block|}
expr_stmt|;
block|}
comment|//argv = new String[] {argv[4]};
comment|//argv = new String[] {"_X10_IPingService"};
operator|new
name|SpringBusFactory
argument_list|()
operator|.
name|createBus
argument_list|(
literal|"etc/client.xml"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|argv
operator|.
name|length
argument_list|)
decl_stmt|;
name|URL
name|wsdlLocation
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|portPrefix
range|:
name|argv
control|)
block|{
try|try
block|{
name|PingService
name|svc
decl_stmt|;
if|if
condition|(
name|local
condition|)
block|{
name|wsdlLocation
operator|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:9001/"
operator|+
name|portPrefix
operator|+
literal|"?wsdl"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isLocal
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|wsdlLocation
operator|!=
literal|null
condition|)
block|{
name|wsdlLocation
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|isLocal
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|isLocal
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isLocal
condition|)
block|{
name|svc
operator|=
operator|new
name|PingService
argument_list|(
name|wsdlLocation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|svc
operator|=
operator|new
name|PingService
argument_list|()
expr_stmt|;
block|}
specifier|final
name|IPingService
name|port
init|=
name|svc
operator|.
name|getPort
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://InteropBaseAddress/interop"
argument_list|,
name|portPrefix
argument_list|)
argument_list|,
name|IPingService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|useLocalWCFServices
condition|)
block|{
operator|(
operator|(
name|BindingProvider
operator|)
name|port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|BindingProvider
operator|.
name|ENDPOINT_ADDRESS_PROPERTY
argument_list|,
name|getEndpointName
argument_list|(
name|portPrefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|portPrefix
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'_'
condition|)
block|{
comment|//MS would like the _ versions to send a cancel
operator|(
operator|(
name|BindingProvider
operator|)
name|port
operator|)
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_DO_CANCEL
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
name|PingRequest
name|params
init|=
operator|new
name|PingRequest
argument_list|()
decl_stmt|;
name|Ping
name|ping
init|=
operator|new
name|Ping
argument_list|()
decl_stmt|;
name|ping
operator|.
name|setOrigin
argument_list|(
literal|"CXF"
argument_list|)
expr_stmt|;
name|ping
operator|.
name|setScenario
argument_list|(
literal|"Scenario5"
argument_list|)
expr_stmt|;
name|ping
operator|.
name|setText
argument_list|(
literal|"ping"
argument_list|)
expr_stmt|;
name|params
operator|.
name|setPing
argument_list|(
name|ping
argument_list|)
expr_stmt|;
name|PingResponse
name|output
init|=
name|port
operator|.
name|ping
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|OUT
operator|.
name|equals
argument_list|(
name|output
operator|.
name|getPingResponse
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Expected "
operator|+
name|OUT
operator|+
literal|" but got "
operator|+
name|output
operator|.
name|getPingResponse
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"Unexpected output "
operator|+
name|output
operator|.
name|getPingResponse
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|portPrefix
operator|+
literal|": OK!"
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"OK!"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"Exception: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
comment|//blasting the MS endpoints tends to cause a hang
comment|//pause a sec to allow it to recover
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|argv
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|argv
index|[
name|x
index|]
operator|+
literal|": "
operator|+
name|results
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getEndpointName
parameter_list|(
name|String
name|testName
parameter_list|)
block|{
if|if
condition|(
literal|"SecureConversation_UserNameOverTransport_IPingService"
operator|.
name|equals
argument_list|(
name|testName
argument_list|)
condition|)
block|{
return|return
literal|"https://localhost/Security_WsSecurity_Service_Indigo/WSSecureConversation.svc"
operator|+
literal|"/SecureConversation_UserNameOverTransport"
return|;
block|}
return|return
literal|"http://localhost/Security_WsSecurity_Service_Indigo/WSSecureConversation.svc/"
operator|+
name|testName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|testName
operator|.
name|indexOf
argument_list|(
literal|"_IPingService"
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

