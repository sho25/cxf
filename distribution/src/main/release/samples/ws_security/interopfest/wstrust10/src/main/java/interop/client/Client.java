begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|interop
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tempuri
operator|.
name|AsymmetricFederatedService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tempuri
operator|.
name|SymmetricFederatedService
import|;
end_import

begin_import
import|import
name|interopbaseaddress
operator|.
name|interop
operator|.
name|IPingService
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|Client
block|{
specifier|private
specifier|static
specifier|final
name|String
name|INPUT
init|=
literal|"foo"
decl_stmt|;
comment|/**      * This class is not instantiated      */
specifier|private
name|Client
parameter_list|()
block|{     }
comment|/**      /**      * The main entrypoint into the application      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|1
operator|||
literal|"ALL"
operator|.
name|equals
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|argv
operator|=
operator|new
name|String
index|[]
block|{
literal|"Scenario_1_IssuedTokenOverTransport_UsernameOverTransport"
block|,
literal|"Scenario_2_IssuedToken_MutualCertificate10"
block|,
literal|"Scenario_5_IssuedTokenForCertificate_MutualCertificate11"
block|,
literal|"Scenario_6_IssuedTokenForCertificateSecureConversation_MutualCertificate11"
block|,
literal|"Scenario_7_IssuedTokenOverTransport_UsernameOverTransport"
block|,
literal|"Scenario_9_IssuedTokenForCertificate_MutualCertificate11"
block|,
literal|"Scenario_10_IssuedTokenForCertificateSecureConversation_MutualCertificate11"
block|,             }
expr_stmt|;
block|}
comment|//argv = new String[] {argv[0]};
operator|new
name|SpringBusFactory
argument_list|()
operator|.
name|createBus
argument_list|(
literal|"etc/client.xml"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|argv
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|portPrefix
range|:
name|argv
control|)
block|{
try|try
block|{
name|Service
name|svc
decl_stmt|;
if|if
condition|(
name|portPrefix
operator|.
name|charAt
argument_list|(
literal|10
argument_list|)
operator|==
literal|'_'
operator|&&
name|portPrefix
operator|.
name|charAt
argument_list|(
literal|9
argument_list|)
operator|<
literal|'7'
condition|)
block|{
name|svc
operator|=
operator|new
name|SymmetricFederatedService
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|svc
operator|=
operator|new
name|AsymmetricFederatedService
argument_list|()
expr_stmt|;
block|}
specifier|final
name|IPingService
name|port
init|=
name|svc
operator|.
name|getPort
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://tempuri.org/"
argument_list|,
name|portPrefix
argument_list|)
argument_list|,
name|IPingService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|output
init|=
name|port
operator|.
name|echo
argument_list|(
name|INPUT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|INPUT
operator|.
name|equals
argument_list|(
name|output
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Expected "
operator|+
name|INPUT
operator|+
literal|" but got "
operator|+
name|output
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"Unexpected output "
operator|+
name|output
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"OK!"
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"OK!"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"Exception: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|argv
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|argv
index|[
name|x
index|]
operator|+
literal|": "
operator|+
name|results
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

