begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|demo
operator|.
name|oauth
operator|.
name|client
operator|.
name|controllers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|demo
operator|.
name|oauth
operator|.
name|client
operator|.
name|model
operator|.
name|OAuthParams
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|OAuth
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|OAuthAccessor
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|OAuthConsumer
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|OAuthMessage
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|OAuthServiceProvider
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|ParameterStyle
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|client
operator|.
name|OAuthClient
import|;
end_import

begin_import
import|import
name|net
operator|.
name|oauth
operator|.
name|client
operator|.
name|URLConnectionClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Controller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|ModelAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|RequestMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|servlet
operator|.
name|ModelAndView
import|;
end_import

begin_class
annotation|@
name|Controller
specifier|public
class|class
name|TemporaryCredentialsController
block|{
annotation|@
name|RequestMapping
argument_list|(
literal|"/handleTemporaryCredentials"
argument_list|)
specifier|public
name|ModelAndView
name|handleRequest
parameter_list|(
annotation|@
name|ModelAttribute
argument_list|(
name|value
operator|=
literal|"oAuthParams"
argument_list|)
name|OAuthParams
name|oAuthParams
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|OAuthServiceProvider
name|provider
decl_stmt|;
name|OAuthConsumer
name|consumer
decl_stmt|;
name|OAuthAccessor
name|accessor
decl_stmt|;
name|OAuthClient
name|client
init|=
operator|new
name|OAuthClient
argument_list|(
operator|new
name|URLConnectionClient
argument_list|()
argument_list|)
decl_stmt|;
name|oAuthParams
operator|.
name|setErrorMessage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|String
name|temporaryCredentialsEndpointUrl
init|=
name|oAuthParams
operator|.
name|getTemporaryCredentialsEndpoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|temporaryCredentialsEndpointUrl
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|temporaryCredentialsEndpointUrl
argument_list|)
condition|)
block|{
name|oAuthParams
operator|.
name|setErrorMessage
argument_list|(
literal|"Missing temporary credentials endpoint url"
argument_list|)
expr_stmt|;
block|}
name|String
name|clientId
init|=
name|oAuthParams
operator|.
name|getClientID
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientId
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|clientId
argument_list|)
condition|)
block|{
name|oAuthParams
operator|.
name|setErrorMessage
argument_list|(
literal|"Missing client identifier"
argument_list|)
expr_stmt|;
block|}
name|String
name|secret
init|=
name|oAuthParams
operator|.
name|getClientSecret
argument_list|()
decl_stmt|;
if|if
condition|(
name|secret
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|secret
argument_list|)
condition|)
block|{
name|oAuthParams
operator|.
name|setErrorMessage
argument_list|(
literal|"Missing client shared-secret"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oAuthParams
operator|.
name|getErrorMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
name|provider
operator|=
operator|new
name|OAuthServiceProvider
argument_list|(
name|temporaryCredentialsEndpointUrl
argument_list|,
name|oAuthParams
operator|.
name|getResourceOwnerAuthorizationEndpoint
argument_list|()
argument_list|,
name|oAuthParams
operator|.
name|getTokenRequestEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|consumer
operator|=
operator|new
name|OAuthConsumer
argument_list|(
literal|null
argument_list|,
name|clientId
argument_list|,
name|secret
argument_list|,
name|provider
argument_list|)
expr_stmt|;
name|accessor
operator|=
operator|new
name|OAuthAccessor
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|OAuth
operator|.
name|OAUTH_SIGNATURE_METHOD
argument_list|,
name|oAuthParams
operator|.
name|getSignatureMethod
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|OAuth
operator|.
name|OAUTH_NONCE
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|OAuth
operator|.
name|OAUTH_TIMESTAMP
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|OAuth
operator|.
name|OAUTH_CALLBACK
argument_list|,
name|oAuthParams
operator|.
name|getCallbackURL
argument_list|()
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"realm"
argument_list|,
literal|"private"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"x_oauth_scope"
argument_list|,
literal|"read_info,modify_info"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"x_oauth_uri"
argument_list|,
literal|"/resources/person/*"
argument_list|)
expr_stmt|;
try|try
block|{
name|accessor
operator|.
name|consumer
operator|.
name|setProperty
argument_list|(
name|OAuthClient
operator|.
name|PARAMETER_STYLE
argument_list|,
name|ParameterStyle
operator|.
name|AUTHORIZATION_HEADER
argument_list|)
expr_stmt|;
name|client
operator|.
name|getRequestToken
argument_list|(
name|accessor
argument_list|,
name|OAuthMessage
operator|.
name|POST
argument_list|,
name|parameters
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|oAuthParams
operator|.
name|setErrorMessage
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oAuthParams
operator|.
name|setOauthToken
argument_list|(
name|accessor
operator|.
name|requestToken
argument_list|)
expr_stmt|;
name|oAuthParams
operator|.
name|setOauthTokenSecret
argument_list|(
name|accessor
operator|.
name|tokenSecret
argument_list|)
expr_stmt|;
name|Cookie
name|cId
init|=
operator|new
name|Cookie
argument_list|(
literal|"clientID"
argument_list|,
name|oAuthParams
operator|.
name|getClientID
argument_list|()
argument_list|)
decl_stmt|;
name|Cookie
name|cSec
init|=
operator|new
name|Cookie
argument_list|(
literal|"clientSecret"
argument_list|,
name|oAuthParams
operator|.
name|getClientSecret
argument_list|()
argument_list|)
decl_stmt|;
name|Cookie
name|tokenSec
init|=
operator|new
name|Cookie
argument_list|(
literal|"tokenSec"
argument_list|,
name|accessor
operator|.
name|tokenSecret
argument_list|)
decl_stmt|;
name|response
operator|.
name|addCookie
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|response
operator|.
name|addCookie
argument_list|(
name|cSec
argument_list|)
expr_stmt|;
name|response
operator|.
name|addCookie
argument_list|(
name|tokenSec
argument_list|)
expr_stmt|;
block|}
name|ModelAndView
name|modelAndView
init|=
operator|new
name|ModelAndView
argument_list|()
decl_stmt|;
if|if
condition|(
name|oAuthParams
operator|.
name|getErrorMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|modelAndView
operator|.
name|setViewName
argument_list|(
literal|"temporaryCredentials"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|modelAndView
operator|.
name|setViewName
argument_list|(
literal|"authorizeResourceOwner"
argument_list|)
expr_stmt|;
block|}
return|return
name|modelAndView
return|;
block|}
annotation|@
name|RequestMapping
argument_list|(
literal|"/temporaryCredentials"
argument_list|)
specifier|public
name|ModelAndView
name|handleInternalRequest
parameter_list|(
annotation|@
name|ModelAttribute
argument_list|(
name|value
operator|=
literal|"oAuthParams"
argument_list|)
name|OAuthParams
name|oAuthParams
parameter_list|)
block|{
return|return
operator|new
name|ModelAndView
argument_list|(
literal|"temporaryCredentials"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

