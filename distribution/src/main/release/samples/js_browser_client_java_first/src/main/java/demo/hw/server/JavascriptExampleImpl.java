begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|demo
operator|.
name|hw
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|demo
operator|.
name|hw
operator|.
name|server
operator|.
name|data
operator|.
name|Beverage
import|;
end_import

begin_import
import|import
name|demo
operator|.
name|hw
operator|.
name|server
operator|.
name|data
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|demo
operator|.
name|hw
operator|.
name|server
operator|.
name|data
operator|.
name|Ingredient
import|;
end_import

begin_class
annotation|@
name|WebService
argument_list|(
name|endpointInterface
operator|=
literal|"demo.hw.server.JavascriptExample"
argument_list|)
specifier|public
class|class
name|JavascriptExampleImpl
implements|implements
name|JavascriptExample
block|{
specifier|private
name|List
argument_list|<
name|Beverage
argument_list|>
name|beverages
decl_stmt|;
specifier|public
name|JavascriptExampleImpl
parameter_list|()
block|{
name|beverages
operator|=
operator|new
name|ArrayList
argument_list|<
name|Beverage
argument_list|>
argument_list|()
expr_stmt|;
name|Ingredient
name|calcium
init|=
operator|new
name|Ingredient
argument_list|()
decl_stmt|;
name|calcium
operator|.
name|setName
argument_list|(
literal|"calcium"
argument_list|)
expr_stmt|;
name|calcium
operator|.
name|setCategory
argument_list|(
name|Category
operator|.
name|Mineral
argument_list|)
expr_stmt|;
name|Ingredient
name|zinc
init|=
operator|new
name|Ingredient
argument_list|()
decl_stmt|;
name|zinc
operator|.
name|setName
argument_list|(
literal|"zinc"
argument_list|)
expr_stmt|;
name|zinc
operator|.
name|setCategory
argument_list|(
name|Category
operator|.
name|Mineral
argument_list|)
expr_stmt|;
name|Ingredient
name|broccoli
init|=
operator|new
name|Ingredient
argument_list|()
decl_stmt|;
name|broccoli
operator|.
name|setName
argument_list|(
literal|"broccoli"
argument_list|)
expr_stmt|;
name|broccoli
operator|.
name|setCategory
argument_list|(
name|Category
operator|.
name|Vegetable
argument_list|)
expr_stmt|;
name|Ingredient
name|apple
init|=
operator|new
name|Ingredient
argument_list|()
decl_stmt|;
name|apple
operator|.
name|setName
argument_list|(
literal|"apple"
argument_list|)
expr_stmt|;
name|apple
operator|.
name|setCategory
argument_list|(
name|Category
operator|.
name|Fruit
argument_list|)
expr_stmt|;
name|Beverage
name|b
init|=
operator|new
name|Beverage
argument_list|()
decl_stmt|;
name|b
operator|.
name|setName
argument_list|(
literal|"zinc-fortified broccoli shake"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProof
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|Ingredient
index|[]
name|ingredients
decl_stmt|;
name|ingredients
operator|=
operator|new
name|Ingredient
index|[
literal|2
index|]
expr_stmt|;
name|ingredients
index|[
literal|0
index|]
operator|=
name|zinc
expr_stmt|;
name|ingredients
index|[
literal|1
index|]
operator|=
name|broccoli
expr_stmt|;
name|b
operator|.
name|setIngredients
argument_list|(
name|ingredients
argument_list|)
expr_stmt|;
name|beverages
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|Beverage
argument_list|()
expr_stmt|;
name|b
operator|.
name|setName
argument_list|(
literal|"apple broccoli shake"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProof
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|ingredients
operator|=
operator|new
name|Ingredient
index|[
literal|2
index|]
expr_stmt|;
name|ingredients
index|[
literal|0
index|]
operator|=
name|apple
expr_stmt|;
name|ingredients
index|[
literal|1
index|]
operator|=
name|broccoli
expr_stmt|;
name|b
operator|.
name|setIngredients
argument_list|(
name|ingredients
argument_list|)
expr_stmt|;
name|beverages
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|Beverage
argument_list|()
expr_stmt|;
name|b
operator|.
name|setName
argument_list|(
literal|"calcium-fortified apple juice"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setProof
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|ingredients
operator|=
operator|new
name|Ingredient
index|[
literal|2
index|]
expr_stmt|;
name|ingredients
index|[
literal|0
index|]
operator|=
name|apple
expr_stmt|;
name|ingredients
index|[
literal|1
index|]
operator|=
name|calcium
expr_stmt|;
name|b
operator|.
name|setIngredients
argument_list|(
name|ingredients
argument_list|)
expr_stmt|;
name|beverages
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Beverage
index|[]
name|getBeverageWithIngredientCategories
parameter_list|(
name|List
argument_list|<
name|Category
argument_list|>
name|c
parameter_list|)
block|{
name|List
argument_list|<
name|Beverage
argument_list|>
name|matches
init|=
operator|new
name|ArrayList
argument_list|<
name|Beverage
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Beverage
name|b
range|:
name|beverages
control|)
block|{
for|for
control|(
name|Ingredient
name|i
range|:
name|b
operator|.
name|getIngredients
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|contains
argument_list|(
name|i
operator|.
name|getCategory
argument_list|()
argument_list|)
condition|)
block|{
name|matches
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|matches
operator|.
name|toArray
argument_list|(
operator|new
name|Beverage
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
name|Beverage
index|[]
name|getBeverageWithIngredientCategory
parameter_list|(
name|Category
name|c
parameter_list|)
block|{
name|List
argument_list|<
name|Beverage
argument_list|>
name|matches
init|=
operator|new
name|ArrayList
argument_list|<
name|Beverage
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Beverage
name|b
range|:
name|beverages
control|)
block|{
for|for
control|(
name|Ingredient
name|i
range|:
name|b
operator|.
name|getIngredients
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|==
name|i
operator|.
name|getCategory
argument_list|()
condition|)
block|{
name|matches
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|matches
operator|.
name|toArray
argument_list|(
operator|new
name|Beverage
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
name|Beverage
index|[]
name|getBeveragesWithIngredient
parameter_list|(
name|Ingredient
name|i
parameter_list|)
block|{
name|List
argument_list|<
name|Beverage
argument_list|>
name|matches
init|=
operator|new
name|ArrayList
argument_list|<
name|Beverage
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Beverage
name|b
range|:
name|beverages
control|)
block|{
for|for
control|(
name|Ingredient
name|bi
range|:
name|b
operator|.
name|getIngredients
argument_list|()
control|)
block|{
if|if
condition|(
name|bi
operator|==
name|i
condition|)
block|{
name|matches
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|matches
operator|.
name|toArray
argument_list|(
operator|new
name|Beverage
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

