begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|demo
operator|.
name|jaxrs
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|streaming
operator|.
name|scheduler
operator|.
name|StreamingListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|streaming
operator|.
name|scheduler
operator|.
name|StreamingListenerBatchCompleted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|streaming
operator|.
name|scheduler
operator|.
name|StreamingListenerBatchStarted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|streaming
operator|.
name|scheduler
operator|.
name|StreamingListenerBatchSubmitted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|streaming
operator|.
name|scheduler
operator|.
name|StreamingListenerOutputOperationCompleted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|streaming
operator|.
name|scheduler
operator|.
name|StreamingListenerOutputOperationStarted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|streaming
operator|.
name|scheduler
operator|.
name|StreamingListenerReceiverError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|streaming
operator|.
name|scheduler
operator|.
name|StreamingListenerReceiverStarted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|spark
operator|.
name|streaming
operator|.
name|scheduler
operator|.
name|StreamingListenerReceiverStopped
import|;
end_import

begin_class
specifier|public
class|class
name|SparkStreamingListener
implements|implements
name|StreamingListener
block|{
specifier|private
name|SparkStreamingOutput
name|streamOutput
decl_stmt|;
specifier|private
name|boolean
name|batchStarted
decl_stmt|;
specifier|public
name|SparkStreamingListener
parameter_list|(
name|SparkStreamingOutput
name|streamOutput
parameter_list|)
block|{
name|this
operator|.
name|streamOutput
operator|=
name|streamOutput
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBatchCompleted
parameter_list|(
name|StreamingListenerBatchCompleted
name|event
parameter_list|)
block|{
name|streamOutput
operator|.
name|setSparkBatchCompleted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onBatchStarted
parameter_list|(
name|StreamingListenerBatchStarted
name|event
parameter_list|)
block|{
name|batchStarted
operator|=
literal|true
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBatchSubmitted
parameter_list|(
name|StreamingListenerBatchSubmitted
name|event
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|onOutputOperationCompleted
parameter_list|(
name|StreamingListenerOutputOperationCompleted
name|event
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|onOutputOperationStarted
parameter_list|(
name|StreamingListenerOutputOperationStarted
name|event
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|onReceiverError
parameter_list|(
name|StreamingListenerReceiverError
name|event
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|onReceiverStarted
parameter_list|(
name|StreamingListenerReceiverStarted
name|event
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|onReceiverStopped
parameter_list|(
name|StreamingListenerReceiverStopped
name|arg0
parameter_list|)
block|{     }
specifier|public
name|SparkStreamingOutput
name|getStreamOut
parameter_list|()
block|{
return|return
name|streamOutput
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|waitForBatchStarted
parameter_list|()
block|{
while|while
condition|(
operator|!
name|batchStarted
condition|)
block|{
try|try
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
block|}
end_class

end_unit

