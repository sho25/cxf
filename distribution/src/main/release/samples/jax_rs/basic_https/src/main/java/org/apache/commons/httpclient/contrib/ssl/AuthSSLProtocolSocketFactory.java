begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|contrib
operator|.
name|ssl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|UnrecoverableKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|ConnectTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|params
operator|.
name|HttpConnectionParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|protocol
operator|.
name|SecureProtocolSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509TrustManager
import|;
end_import

begin_comment
comment|/**  *<p>  * AuthSSLProtocolSocketFactory can be used to validate the identity of the HTTPS  * server against a list of trusted certificates and to authenticate to the HTTPS  * server using a private key.  *</p>  *  *<p>  * AuthSSLProtocolSocketFactory will enable server authentication when supplied with  * a {@link KeyStore truststore} file containg one or several trusted certificates.  * The client secure socket will reject the connection during the SSL session handshake  * if the target HTTPS server attempts to authenticate itself with a non-trusted  * certificate.  *</p>  *  *<p>  * Use JDK keytool utility to import a trusted certificate and generate a truststore file:  *<pre>  *     keytool -import -alias "my server cert" -file server.crt -keystore my.truststore  *</pre>  *</p>  *  *<p>  * AuthSSLProtocolSocketFactory will enable client authentication when supplied with  * a {@link KeyStore keystore} file containg a private key/public certificate pair.  * The client secure socket will use the private key to authenticate itself to the target  * HTTPS server during the SSL session handshake if requested to do so by the server.  * The target HTTPS server will in its turn verify the certificate presented by the client  * in order to establish client's authenticity  *</p>  *  *<p>  * Use the following sequence of actions to generate a keystore file  *</p>  *<ul>  *<li>  *<p>  *      Use JDK keytool utility to generate a new key  *<pre>keytool -genkey -v -alias "my client key" -validity 365 -keystore my.keystore</pre>  *      For simplicity use the same password for the key as that of the keystore  *</p>  *</li>  *<li>  *<p>  *      Issue a certificate signing request (CSR)  *<pre>keytool -certreq -alias "my client key" -file mycertreq.csr -keystore my.keystore</pre>  *</p>  *</li>  *<li>  *<p>  *      Send the certificate request to the trusted Certificate Authority for signature.  *      One may choose to act as her own CA and sign the certificate request using a PKI  *      tool, such as OpenSSL.  *</p>  *</li>  *<li>  *<p>  *       Import the trusted CA root certificate  *<pre>keytool -import -alias "my trusted ca" -file caroot.crt -keystore my.keystore</pre>  *</p>  *</li>  *<li>  *<p>  *       Import the PKCS#7 file containg the complete certificate chain  *<pre>keytool -import -alias "my client key" -file mycert.p7 -keystore my.keystore</pre>  *</p>  *</li>  *<li>  *<p>  *       Verify the content the resultant keystore file  *<pre>keytool -list -v -keystore my.keystore</pre>  *</p>  *</li>  *</ul>  *<p>  * Example of using custom protocol socket factory for a specific host:  *<pre>  *     Protocol authhttps = new Protocol("https",  *          new AuthSSLProtocolSocketFactory(  *              new URL("file:my.keystore"), "mypassword",  *              new URL("file:my.truststore"), "mypassword"), 443);  *  *     HttpClient client = new HttpClient();  *     client.getHostConfiguration().setHost("localhost", 443, authhttps);  *     // use relative url only  *     GetMethod httpget = new GetMethod("/");  *     client.executeMethod(httpget);  *</pre>  *</p>  *<p>  * Example of using custom protocol socket factory per default instead of the standard one:  *<pre>  *     Protocol authhttps = new Protocol("https",  *          new AuthSSLProtocolSocketFactory(  *              new URL("file:my.keystore"), "mypassword",  *              new URL("file:my.truststore"), "mypassword"), 443);  *     Protocol.registerProtocol("https", authhttps);  *  *     HttpClient client = new HttpClient();  *     GetMethod httpget = new GetMethod("https://localhost/");  *     client.executeMethod(httpget);  *</pre>  *</p>  * @author<a href="mailto:oleg -at- ural.ru">Oleg Kalnichevski</a>  *  *<p>  * DISCLAIMER: HttpClient developers DO NOT actively support this component.  * The component is provided as a reference material, which may be inappropriate  * for use without additional customization.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|AuthSSLProtocolSocketFactory
implements|implements
name|SecureProtocolSocketFactory
block|{
comment|/** Log object for this class. */
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AuthSSLProtocolSocketFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|URL
name|keystoreUrl
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|keystorePassword
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|keyPassword
init|=
literal|null
decl_stmt|;
specifier|private
name|URL
name|truststoreUrl
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|truststorePassword
init|=
literal|null
decl_stmt|;
specifier|private
name|SSLContext
name|sslcontext
init|=
literal|null
decl_stmt|;
comment|/**      * Constructor for AuthSSLProtocolSocketFactory. Either a keystore or truststore file      * must be given. Otherwise SSL context initialization error will result.      *      * @param keystoreUrl URL of the keystore file. May be<tt>null</tt> if HTTPS client      *        authentication is not to be used.      * @param keystorePassword Password to unlock the keystore.      * @param keyPassword Password to unlock any private key in the keystore.      * @param truststoreUrl URL of the truststore file. May be<tt>null</tt> if HTTPS server      *        authentication is not to be used.      * @param truststorePassword Password to unlock the truststore.      */
specifier|public
name|AuthSSLProtocolSocketFactory
parameter_list|(
specifier|final
name|URL
name|keystoreUrl
parameter_list|,
specifier|final
name|String
name|keystorePassword
parameter_list|,
specifier|final
name|String
name|keyPassword
parameter_list|,
specifier|final
name|URL
name|truststoreUrl
parameter_list|,
specifier|final
name|String
name|truststorePassword
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|keystoreUrl
operator|=
name|keystoreUrl
expr_stmt|;
name|this
operator|.
name|keystorePassword
operator|=
name|keystorePassword
expr_stmt|;
name|this
operator|.
name|keyPassword
operator|=
name|keyPassword
expr_stmt|;
name|this
operator|.
name|truststoreUrl
operator|=
name|truststoreUrl
expr_stmt|;
name|this
operator|.
name|truststorePassword
operator|=
name|truststorePassword
expr_stmt|;
block|}
specifier|private
specifier|static
name|KeyStore
name|createKeyStore
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|,
specifier|final
name|String
name|password
parameter_list|)
throws|throws
name|KeyStoreException
throws|,
name|NoSuchAlgorithmException
throws|,
name|CertificateException
throws|,
name|IOException
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Keystore url may not be null"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initializing key store"
argument_list|)
expr_stmt|;
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"jks"
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|keystore
operator|.
name|load
argument_list|(
name|is
argument_list|,
name|password
operator|!=
literal|null
condition|?
name|password
operator|.
name|toCharArray
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|keystore
return|;
block|}
specifier|private
specifier|static
name|KeyManager
index|[]
name|createKeyManagers
parameter_list|(
specifier|final
name|KeyStore
name|keystore
parameter_list|,
specifier|final
name|String
name|keyPassword
parameter_list|)
throws|throws
name|KeyStoreException
throws|,
name|NoSuchAlgorithmException
throws|,
name|UnrecoverableKeyException
block|{
if|if
condition|(
name|keystore
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Keystore may not be null"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initializing key manager"
argument_list|)
expr_stmt|;
name|KeyManagerFactory
name|kmfactory
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
name|KeyManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|kmfactory
operator|.
name|init
argument_list|(
name|keystore
argument_list|,
name|keyPassword
operator|!=
literal|null
condition|?
name|keyPassword
operator|.
name|toCharArray
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
return|return
name|kmfactory
operator|.
name|getKeyManagers
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|TrustManager
index|[]
name|createTrustManagers
parameter_list|(
specifier|final
name|KeyStore
name|keystore
parameter_list|)
throws|throws
name|KeyStoreException
throws|,
name|NoSuchAlgorithmException
block|{
if|if
condition|(
name|keystore
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Keystore may not be null"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initializing trust manager"
argument_list|)
expr_stmt|;
name|TrustManagerFactory
name|tmfactory
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
name|TrustManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|tmfactory
operator|.
name|init
argument_list|(
name|keystore
argument_list|)
expr_stmt|;
name|TrustManager
index|[]
name|trustmanagers
init|=
name|tmfactory
operator|.
name|getTrustManagers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trustmanagers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|trustmanagers
index|[
name|i
index|]
operator|instanceof
name|X509TrustManager
condition|)
block|{
name|trustmanagers
index|[
name|i
index|]
operator|=
operator|new
name|AuthSSLX509TrustManager
argument_list|(
operator|(
name|X509TrustManager
operator|)
name|trustmanagers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|trustmanagers
return|;
block|}
specifier|private
name|SSLContext
name|createSSLContext
parameter_list|()
block|{
try|try
block|{
name|KeyManager
index|[]
name|keymanagers
init|=
literal|null
decl_stmt|;
name|TrustManager
index|[]
name|trustmanagers
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|keystoreUrl
operator|!=
literal|null
condition|)
block|{
name|KeyStore
name|keystore
init|=
name|createKeyStore
argument_list|(
name|this
operator|.
name|keystoreUrl
argument_list|,
name|this
operator|.
name|keystorePassword
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|Enumeration
name|aliases
init|=
name|keystore
operator|.
name|aliases
argument_list|()
decl_stmt|;
while|while
condition|(
name|aliases
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|alias
init|=
operator|(
name|String
operator|)
name|aliases
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Certificate
index|[]
name|certs
init|=
name|keystore
operator|.
name|getCertificateChain
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|certs
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Certificate chain '"
operator|+
name|alias
operator|+
literal|"':"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|certs
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|certs
index|[
name|c
index|]
operator|instanceof
name|X509Certificate
condition|)
block|{
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|certs
index|[
name|c
index|]
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|" Certificate "
operator|+
operator|(
name|c
operator|+
literal|1
operator|)
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"  Subject DN: "
operator|+
name|cert
operator|.
name|getSubjectDN
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"  Signature Algorithm: "
operator|+
name|cert
operator|.
name|getSigAlgName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"  Valid from: "
operator|+
name|cert
operator|.
name|getNotBefore
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"  Valid until: "
operator|+
name|cert
operator|.
name|getNotAfter
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"  Issuer: "
operator|+
name|cert
operator|.
name|getIssuerDN
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|keymanagers
operator|=
name|createKeyManagers
argument_list|(
name|keystore
argument_list|,
name|this
operator|.
name|keyPassword
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|truststoreUrl
operator|!=
literal|null
condition|)
block|{
name|KeyStore
name|keystore
init|=
name|createKeyStore
argument_list|(
name|this
operator|.
name|truststoreUrl
argument_list|,
name|this
operator|.
name|truststorePassword
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|Enumeration
name|aliases
init|=
name|keystore
operator|.
name|aliases
argument_list|()
decl_stmt|;
while|while
condition|(
name|aliases
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|alias
init|=
operator|(
name|String
operator|)
name|aliases
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trusted certificate '"
operator|+
name|alias
operator|+
literal|"':"
argument_list|)
expr_stmt|;
name|Certificate
name|trustedcert
init|=
name|keystore
operator|.
name|getCertificate
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|trustedcert
operator|!=
literal|null
operator|&&
name|trustedcert
operator|instanceof
name|X509Certificate
condition|)
block|{
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|trustedcert
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"  Subject DN: "
operator|+
name|cert
operator|.
name|getSubjectDN
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"  Signature Algorithm: "
operator|+
name|cert
operator|.
name|getSigAlgName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"  Valid from: "
operator|+
name|cert
operator|.
name|getNotBefore
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"  Valid until: "
operator|+
name|cert
operator|.
name|getNotAfter
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"  Issuer: "
operator|+
name|cert
operator|.
name|getIssuerDN
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|trustmanagers
operator|=
name|createTrustManagers
argument_list|(
name|keystore
argument_list|)
expr_stmt|;
block|}
name|SSLContext
name|sslcontext
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"SSL"
argument_list|)
decl_stmt|;
name|sslcontext
operator|.
name|init
argument_list|(
name|keymanagers
argument_list|,
name|trustmanagers
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|sslcontext
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AuthSSLInitializationError
argument_list|(
literal|"Unsupported algorithm exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AuthSSLInitializationError
argument_list|(
literal|"Keystore exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AuthSSLInitializationError
argument_list|(
literal|"Key management exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AuthSSLInitializationError
argument_list|(
literal|"I/O error reading keystore/truststore file: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|SSLContext
name|getSSLContext
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|sslcontext
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|sslcontext
operator|=
name|createSSLContext
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|sslcontext
return|;
block|}
comment|/**      * Attempts to get a new socket connection to the given host within the given time limit.      *<p>      * To circumvent the limitations of older JREs that do not support connect timeout a      * controller thread is executed. The controller thread attempts to create a new socket      * within the given limit of time. If socket constructor does not return until the      * timeout expires, the controller terminates and throws an {@link ConnectTimeoutException}      *</p>      *      * @param host the host name/IP      * @param port the port on the host      * @param clientHost the local host name/IP to bind the socket to      * @param clientPort the port on the local machine      * @param params {@link HttpConnectionParams Http connection parameters}      *      * @return Socket a new socket      *      * @throws IOException if an I/O error occurs while creating the socket      * @throws UnknownHostException if the IP address of the host cannot be      * determined      */
specifier|public
name|Socket
name|createSocket
parameter_list|(
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|int
name|port
parameter_list|,
specifier|final
name|InetAddress
name|localAddress
parameter_list|,
specifier|final
name|int
name|localPort
parameter_list|,
specifier|final
name|HttpConnectionParams
name|params
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
throws|,
name|ConnectTimeoutException
block|{
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Parameters may not be null"
argument_list|)
throw|;
block|}
name|int
name|timeout
init|=
name|params
operator|.
name|getConnectionTimeout
argument_list|()
decl_stmt|;
name|SocketFactory
name|socketfactory
init|=
name|getSSLContext
argument_list|()
operator|.
name|getSocketFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeout
operator|==
literal|0
condition|)
block|{
return|return
name|socketfactory
operator|.
name|createSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|localAddress
argument_list|,
name|localPort
argument_list|)
return|;
block|}
else|else
block|{
name|Socket
name|socket
init|=
name|socketfactory
operator|.
name|createSocket
argument_list|()
decl_stmt|;
name|SocketAddress
name|localaddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|localAddress
argument_list|,
name|localPort
argument_list|)
decl_stmt|;
name|SocketAddress
name|remoteaddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|socket
operator|.
name|bind
argument_list|(
name|localaddr
argument_list|)
expr_stmt|;
name|socket
operator|.
name|connect
argument_list|(
name|remoteaddr
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|socket
return|;
block|}
block|}
comment|/**      * @see SecureProtocolSocketFactory#createSocket(java.lang.String,int,java.net.InetAddress,int)      */
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|InetAddress
name|clientHost
parameter_list|,
name|int
name|clientPort
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
return|return
name|getSSLContext
argument_list|()
operator|.
name|getSocketFactory
argument_list|()
operator|.
name|createSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|clientHost
argument_list|,
name|clientPort
argument_list|)
return|;
block|}
comment|/**      * @see SecureProtocolSocketFactory#createSocket(java.lang.String,int)      */
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
return|return
name|getSSLContext
argument_list|()
operator|.
name|getSocketFactory
argument_list|()
operator|.
name|createSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
return|;
block|}
comment|/**      * @see SecureProtocolSocketFactory#createSocket(java.net.Socket,java.lang.String,int,boolean)      */
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|boolean
name|autoClose
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
return|return
name|getSSLContext
argument_list|()
operator|.
name|getSocketFactory
argument_list|()
operator|.
name|createSocket
argument_list|(
name|socket
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|autoClose
argument_list|)
return|;
block|}
block|}
end_class

end_unit

