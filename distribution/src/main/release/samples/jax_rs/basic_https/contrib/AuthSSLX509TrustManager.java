begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|contrib
operator|.
name|ssl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509TrustManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  *<p>  * AuthSSLX509TrustManager can be used to extend the default  * {@link X509TrustManager} with additional trust decisions.  *</p>  *   * @author<a href="mailto:oleg@ural.ru">Oleg Kalnichevski</a>  *<p>  *         DISCLAIMER: HttpClient developers DO NOT actively support this  *         component. The component is provided as a reference material, which  *         may be inappropriate for use without additional customization.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|AuthSSLX509TrustManager
implements|implements
name|X509TrustManager
block|{
specifier|private
name|X509TrustManager
name|defaultTrustManager
init|=
literal|null
decl_stmt|;
comment|/** Log object for this class. */
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AuthSSLX509TrustManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Constructor for AuthSSLX509TrustManager.      */
specifier|public
name|AuthSSLX509TrustManager
parameter_list|(
specifier|final
name|X509TrustManager
name|defaultTrustManager
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
if|if
condition|(
name|defaultTrustManager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Trust manager may not be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|defaultTrustManager
operator|=
name|defaultTrustManager
expr_stmt|;
block|}
comment|/**      * @see javax.net.ssl.X509TrustManager#checkClientTrusted(X509Certificate[],String      *      authType)      */
specifier|public
name|void
name|checkClientTrusted
parameter_list|(
name|X509Certificate
index|[]
name|certificates
parameter_list|,
name|String
name|authType
parameter_list|)
throws|throws
name|CertificateException
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
operator|&&
name|certificates
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|certificates
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|X509Certificate
name|cert
init|=
name|certificates
index|[
name|c
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" Client certificate "
operator|+
operator|(
name|c
operator|+
literal|1
operator|)
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  Subject DN: "
operator|+
name|cert
operator|.
name|getSubjectDN
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  Signature Algorithm: "
operator|+
name|cert
operator|.
name|getSigAlgName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  Valid from: "
operator|+
name|cert
operator|.
name|getNotBefore
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  Valid until: "
operator|+
name|cert
operator|.
name|getNotAfter
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  Issuer: "
operator|+
name|cert
operator|.
name|getIssuerDN
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|defaultTrustManager
operator|.
name|checkClientTrusted
argument_list|(
name|certificates
argument_list|,
name|authType
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see javax.net.ssl.X509TrustManager#checkServerTrusted(X509Certificate[],String      *      authType)      */
specifier|public
name|void
name|checkServerTrusted
parameter_list|(
name|X509Certificate
index|[]
name|certificates
parameter_list|,
name|String
name|authType
parameter_list|)
throws|throws
name|CertificateException
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
operator|&&
name|certificates
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|certificates
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|X509Certificate
name|cert
init|=
name|certificates
index|[
name|c
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" Server certificate "
operator|+
operator|(
name|c
operator|+
literal|1
operator|)
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  Subject DN: "
operator|+
name|cert
operator|.
name|getSubjectDN
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  Signature Algorithm: "
operator|+
name|cert
operator|.
name|getSigAlgName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  Valid from: "
operator|+
name|cert
operator|.
name|getNotBefore
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  Valid until: "
operator|+
name|cert
operator|.
name|getNotAfter
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"  Issuer: "
operator|+
name|cert
operator|.
name|getIssuerDN
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|defaultTrustManager
operator|.
name|checkServerTrusted
argument_list|(
name|certificates
argument_list|,
name|authType
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see javax.net.ssl.X509TrustManager#getAcceptedIssuers()      */
specifier|public
name|X509Certificate
index|[]
name|getAcceptedIssuers
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultTrustManager
operator|.
name|getAcceptedIssuers
argument_list|()
return|;
block|}
block|}
end_class

end_unit

