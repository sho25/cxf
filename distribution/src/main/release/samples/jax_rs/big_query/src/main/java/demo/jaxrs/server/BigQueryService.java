begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|demo
operator|.
name|jaxrs
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
operator|.
name|OAuthClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|AccessTokenGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
operator|.
name|code
operator|.
name|AuthorizationCodeGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|utils
operator|.
name|OAuthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|common
operator|.
name|IdToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|common
operator|.
name|UserInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oidc
operator|.
name|rp
operator|.
name|UserInfoClient
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/service"
argument_list|)
specifier|public
class|class
name|BigQueryService
block|{
annotation|@
name|Context
specifier|private
name|UriInfo
name|uriInfo
decl_stmt|;
annotation|@
name|Context
specifier|private
name|HttpHeaders
name|httpHeaders
decl_stmt|;
specifier|private
name|String
name|authorizationServiceUri
decl_stmt|;
specifier|private
name|WebClient
name|accessTokenServiceClient
decl_stmt|;
specifier|private
name|UserInfoClient
name|tokenClient
decl_stmt|;
specifier|private
name|Consumer
name|consumer
decl_stmt|;
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/oidc/rp/start"
argument_list|)
specifier|public
name|Response
name|startUserAuthentication
parameter_list|()
block|{
name|URI
name|indexUri
init|=
name|uriInfo
operator|.
name|getBaseUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
literal|"index.html"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|seeOther
argument_list|(
name|indexUri
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/oidc/rp/complete"
argument_list|)
annotation|@
name|Consumes
argument_list|(
literal|"application/octet-stream"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"application/xml,application/json,text/html"
argument_list|)
specifier|public
name|Response
name|completeUserAuthentication
parameter_list|(
name|String
name|code
parameter_list|)
block|{
return|return
name|doCompleteBigQuery
argument_list|(
name|code
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/bigquery"
argument_list|)
specifier|public
name|Response
name|startBiqQuery
parameter_list|()
block|{
name|StringBuilder
name|scopes
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|scopes
operator|.
name|append
argument_list|(
literal|"openid email profile"
argument_list|)
expr_stmt|;
comment|// Add application specific scopes if any
name|URI
name|loc
init|=
name|OAuthClientUtils
operator|.
name|getAuthorizationURI
argument_list|(
name|authorizationServiceUri
argument_list|,
name|consumer
operator|.
name|getKey
argument_list|()
argument_list|,
name|getRedirectUri
argument_list|()
argument_list|,
name|uriInfo
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|scopes
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Response
name|r
init|=
name|Response
operator|.
name|seeOther
argument_list|(
name|loc
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|r
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/bigquery/complete"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"application/xml,application/json,text/html"
argument_list|)
specifier|public
name|Response
name|completeBigQuery
parameter_list|(
annotation|@
name|QueryParam
argument_list|(
literal|"code"
argument_list|)
name|String
name|code
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
literal|"state"
argument_list|)
name|String
name|state
parameter_list|)
block|{
return|return
name|doCompleteBigQuery
argument_list|(
name|code
argument_list|,
name|state
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|Response
name|doCompleteBigQuery
parameter_list|(
name|String
name|code
parameter_list|,
name|String
name|state
parameter_list|,
name|boolean
name|postMessage
parameter_list|)
block|{
comment|// Get the access token
name|ClientAccessToken
name|at
init|=
name|getClientAccessToken
argument_list|(
name|consumer
argument_list|,
name|code
argument_list|,
name|postMessage
argument_list|)
decl_stmt|;
comment|// Expect and validate id_token
name|IdToken
name|idToken
init|=
name|tokenClient
operator|.
name|getIdToken
argument_list|(
name|at
argument_list|,
name|consumer
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get User Profile
name|UserInfo
name|userInfo
init|=
name|tokenClient
operator|.
name|getUserInfo
argument_list|(
name|at
argument_list|,
name|idToken
argument_list|)
decl_stmt|;
comment|// Complete the request, use 'at' to access some other user's API,
comment|// return the response to the user
name|ResponseBuilder
name|rb
init|=
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|type
argument_list|(
literal|"application/json"
argument_list|)
decl_stmt|;
name|Response
name|r
init|=
name|rb
operator|.
name|entity
argument_list|(
literal|"{\"email\":\""
operator|+
name|userInfo
operator|.
name|getProperty
argument_list|(
literal|"email"
argument_list|)
operator|+
literal|"\"}"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|r
return|;
block|}
specifier|public
name|void
name|setAccessTokenServiceClient
parameter_list|(
name|WebClient
name|accessTokenServiceClient
parameter_list|)
block|{
name|this
operator|.
name|accessTokenServiceClient
operator|=
name|accessTokenServiceClient
expr_stmt|;
block|}
specifier|private
name|String
name|getRedirectUri
parameter_list|()
block|{
return|return
name|uriInfo
operator|.
name|getBaseUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
literal|"/service/bigquery/complete"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|ClientAccessToken
name|getClientAccessToken
parameter_list|(
name|Consumer
name|consumer
parameter_list|,
name|String
name|code
parameter_list|,
name|boolean
name|postMessage
parameter_list|)
block|{
name|AccessTokenGrant
name|grant
init|=
operator|new
name|AuthorizationCodeGrant
argument_list|(
name|code
argument_list|)
decl_stmt|;
name|String
name|redirectUri
init|=
name|postMessage
condition|?
literal|"postmessage"
else|:
name|getRedirectUri
argument_list|()
decl_stmt|;
return|return
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|accessTokenServiceClient
argument_list|,
name|consumer
argument_list|,
name|grant
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|OAuthConstants
operator|.
name|REDIRECT_URI
argument_list|,
name|redirectUri
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|void
name|setUserInfoClient
parameter_list|(
name|UserInfoClient
name|tokenClient
parameter_list|)
block|{
name|this
operator|.
name|tokenClient
operator|=
name|tokenClient
expr_stmt|;
block|}
specifier|public
name|void
name|setAuthorizationServiceUri
parameter_list|(
name|String
name|authorizationServiceUri
parameter_list|)
block|{
name|this
operator|.
name|authorizationServiceUri
operator|=
name|authorizationServiceUri
expr_stmt|;
block|}
specifier|public
name|void
name|setConsumer
parameter_list|(
name|Consumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
block|}
block|}
end_class

end_unit

