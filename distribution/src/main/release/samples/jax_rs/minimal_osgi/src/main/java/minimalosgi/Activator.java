begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|minimalosgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|http
operator|.
name|HttpService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_class
specifier|public
class|class
name|Activator
implements|implements
name|BundleActivator
block|{
specifier|private
specifier|final
name|String
name|_path
init|=
literal|"/"
decl_stmt|;
specifier|private
name|BundleContext
name|_context
decl_stmt|;
specifier|private
name|ServiceTracker
name|_tracker
decl_stmt|;
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|_context
operator|=
name|context
expr_stmt|;
comment|// Use _tracker to capture when a HttpService comes and goes.
comment|//
comment|// When this bundle is started, a HttpService may not be alive. Thus, we use
comment|// ServiceTracker to automatically monitor when a HttpService comes alive and
comment|// then register this our CXF-based JAX-RS service with it.
comment|//
name|_tracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|_context
argument_list|,
name|HttpService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ServiceTrackerCustomizer
argument_list|()
block|{
specifier|public
name|Object
name|addingService
parameter_list|(
name|ServiceReference
name|serviceReference
parameter_list|)
block|{
try|try
block|{
name|HttpService
name|service
init|=
operator|(
name|HttpService
operator|)
name|_context
operator|.
name|getService
argument_list|(
name|serviceReference
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|initParams
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|initParams
operator|.
name|put
argument_list|(
literal|"javax.ws.rs.Application"
argument_list|,
name|SampleApplication
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|registerServlet
argument_list|(
name|_path
argument_list|,
operator|new
name|SampleServlet
argument_list|()
argument_list|,
name|initParams
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|modifiedService
parameter_list|(
name|ServiceReference
name|serviceReference
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
comment|// do nothing
block|}
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
name|serviceReference
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
name|HttpService
name|service
init|=
operator|(
name|HttpService
operator|)
name|_context
operator|.
name|getService
argument_list|(
name|serviceReference
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|service
operator|.
name|unregister
argument_list|(
name|_path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|_tracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
throws|throws
name|Exception
block|{
name|_tracker
operator|.
name|remove
argument_list|(
name|_tracker
operator|.
name|getServiceReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

