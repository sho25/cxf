begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|sample
operator|.
name|ws
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|HandlerChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|Transactional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_class
annotation|@
name|Service
annotation|@
name|WebService
argument_list|(
name|serviceName
operator|=
literal|"FirstServiceATService"
argument_list|,
name|portName
operator|=
literal|"FirstServiceAT"
argument_list|,
name|name
operator|=
literal|"FirstServiceAT"
argument_list|,
name|targetNamespace
operator|=
literal|"http://service.ws.sample"
argument_list|)
annotation|@
name|SOAPBinding
argument_list|(
name|style
operator|=
name|SOAPBinding
operator|.
name|Style
operator|.
name|RPC
argument_list|)
annotation|@
name|HandlerChain
argument_list|(
name|file
operator|=
literal|"/wstx_handlers.xml"
argument_list|)
annotation|@
name|Transactional
argument_list|(
name|Transactional
operator|.
name|TxType
operator|.
name|MANDATORY
argument_list|)
comment|// default is REQUIRED
specifier|public
class|class
name|FirstServiceATImpl
implements|implements
name|FirstServiceAT
block|{
specifier|private
specifier|static
specifier|final
name|Integer
name|ENTITY_ID
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|FirstServiceATImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
specifier|private
name|FirstCounterRepository
name|service
decl_stmt|;
comment|/**      * Incriment the first counter. This is done by updating the counter within a JTA transaction. The JTA transaction      * was automatically bridged from the WS-AT transaction.      */
annotation|@
name|WebMethod
specifier|public
name|void
name|incrementCounter
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[SERVICE] First service invoked to increment the counter by '"
operator|+
name|num
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|// invoke the backend business logic:
name|LOG
operator|.
name|info
argument_list|(
literal|"[SERVICE] Using the JPA Entity Manager to update the counter within a JTA transaction"
argument_list|)
expr_stmt|;
name|FirstCounter
name|counter
init|=
name|lookupCounterEntity
argument_list|()
decl_stmt|;
name|counter
operator|.
name|incrementCounter
argument_list|(
name|num
argument_list|)
expr_stmt|;
name|service
operator|.
name|save
argument_list|(
name|counter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|WebMethod
specifier|public
name|int
name|getCounter
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[SERVICE] getCounter() invoked"
argument_list|)
expr_stmt|;
name|FirstCounter
name|counter
init|=
name|lookupCounterEntity
argument_list|()
decl_stmt|;
return|return
name|counter
operator|.
name|getCounter
argument_list|()
return|;
block|}
annotation|@
name|WebMethod
specifier|public
name|void
name|resetCounter
parameter_list|()
block|{
name|FirstCounter
name|counter
init|=
name|lookupCounterEntity
argument_list|()
decl_stmt|;
name|counter
operator|.
name|setCounter
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|service
operator|.
name|save
argument_list|(
name|counter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FirstCounter
name|lookupCounterEntity
parameter_list|()
block|{
name|Optional
argument_list|<
name|FirstCounter
argument_list|>
name|counter
init|=
name|service
operator|.
name|findById
argument_list|(
name|ENTITY_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|counter
operator|.
name|get
argument_list|()
return|;
block|}
else|else
block|{
name|FirstCounter
name|first
init|=
operator|new
name|FirstCounter
argument_list|(
name|ENTITY_ID
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|service
operator|.
name|save
argument_list|(
name|first
argument_list|)
expr_stmt|;
return|return
name|first
return|;
block|}
block|}
block|}
end_class

end_unit

