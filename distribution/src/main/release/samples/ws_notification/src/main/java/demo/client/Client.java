begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|demo
operator|.
name|client
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsn
operator|.
name|client
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsn
operator|.
name|client
operator|.
name|NotificationBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsn
operator|.
name|client
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|oasis_open
operator|.
name|docs
operator|.
name|wsn
operator|.
name|b_2
operator|.
name|NotificationMessageHolderType
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Client
block|{
specifier|private
name|Client
parameter_list|()
block|{
comment|//not constructed
block|}
comment|/**      * @param args      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|wsnPort
init|=
literal|"9000"
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|wsnPort
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|// Start a consumer that will listen for notification messages
comment|// We'll just print the text content out for now.
name|Consumer
name|consumer
init|=
operator|new
name|Consumer
argument_list|(
operator|new
name|Consumer
operator|.
name|Callback
argument_list|()
block|{
specifier|public
name|void
name|notify
parameter_list|(
name|NotificationMessageHolderType
name|message
parameter_list|)
block|{
name|Object
name|o
init|=
name|message
operator|.
name|getMessage
argument_list|()
operator|.
name|getAny
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Element
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|(
operator|(
name|Element
operator|)
name|o
operator|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|"http://localhost:9001/MyConsumer"
argument_list|)
decl_stmt|;
comment|// Create a subscription for a Topic on the broker
name|NotificationBroker
name|notificationBroker
init|=
operator|new
name|NotificationBroker
argument_list|(
literal|"http://localhost:"
operator|+
name|wsnPort
operator|+
literal|"/wsn/NotificationBroker"
argument_list|)
decl_stmt|;
name|Subscription
name|subscription
init|=
name|notificationBroker
operator|.
name|subscribe
argument_list|(
name|consumer
argument_list|,
literal|"MyTopic"
argument_list|)
decl_stmt|;
comment|// Send a notification on the Topic
name|notificationBroker
operator|.
name|notify
argument_list|(
literal|"MyTopic"
argument_list|,
operator|new
name|JAXBElement
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:test:org"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"Hello World!"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Just sleep for a bit to make sure the notification gets delivered
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Cleanup and exit
name|subscription
operator|.
name|unsubscribe
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

