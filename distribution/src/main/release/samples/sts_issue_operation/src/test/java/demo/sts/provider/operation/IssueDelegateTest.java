begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|demo
operator|.
name|sts
operator|.
name|provider
operator|.
name|operation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|security
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|security
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|STSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|RequestSecurityTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|UseKeyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|xmldsig
operator|.
name|KeyInfoType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
operator|.
name|provider
operator|.
name|model
operator|.
name|xmldsig
operator|.
name|X509DataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|createMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|demo
operator|.
name|sts
operator|.
name|provider
operator|.
name|cert
operator|.
name|CertificateVerifierConfig
import|;
end_import

begin_import
import|import
name|demo
operator|.
name|sts
operator|.
name|provider
operator|.
name|token
operator|.
name|SAMLTokenIssueOperation
import|;
end_import

begin_import
import|import
name|demo
operator|.
name|sts
operator|.
name|provider
operator|.
name|token
operator|.
name|Saml1TokenProvider
import|;
end_import

begin_import
import|import
name|demo
operator|.
name|sts
operator|.
name|provider
operator|.
name|token
operator|.
name|Saml2TokenProvider
import|;
end_import

begin_import
import|import
name|demo
operator|.
name|sts
operator|.
name|provider
operator|.
name|token
operator|.
name|TokenProvider
import|;
end_import

begin_class
specifier|public
class|class
name|IssueDelegateTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CERT_DATA
init|=
literal|"MIIEFjCCA3+gAwIBAgIJAJORWX2Xsa8DMA0GCSqGSIb3DQEBBQUAMIG5MQswCQYDVQQGEwJVUzERMA8G"
operator|+
literal|"A1UECBMITmV3IFlvcmsxFjAUBgNVBAcTDU5pYWdhcmEgRmFsbHMxLDAqBgNVBAoTI1NhbXBsZSBDbG"
operator|+
literal|"llbnQgLS0gTk9UIEZPUiBQUk9EVUNUSU9OMRYwFAYDVQQLEw1JVCBEZXBhcnRtZW50MRcwFQYDVQQD"
operator|+
literal|"Ew53d3cuY2xpZW50LmNvbTEgMB4GCSqGSIb3DQEJARYRY2xpZW50QGNsaWVudC5jb20wHhcNMTEwMj"
operator|+
literal|"A5MTgzMDI3WhcNMjEwMjA2MTgzMDI3WjCBuTELMAkGA1UEBhMCVVMxETAPBgNVBAgTCE5ldyBZb3Jr"
operator|+
literal|"MRYwFAYDVQQHEw1OaWFnYXJhIEZhbGxzMSwwKgYDVQQKEyNTYW1wbGUgQ2xpZW50IC0tIE5PVCBGT1"
operator|+
literal|"IgUFJPRFVDVElPTjEWMBQGA1UECxMNSVQgRGVwYXJ0bWVudDEXMBUGA1UEAxMOd3d3LmNsaWVudC5j"
operator|+
literal|"b20xIDAeBgkqhkiG9w0BCQEWEWNsaWVudEBjbGllbnQuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNAD"
operator|+
literal|"CBiQKBgQDauFNVqi4B2+u/PC9ktDkn82bglEQYcL4o5JRUhQVEhTK2iEloz1Rvo/qyfDhBPc1lzIUn"
operator|+
literal|"4ams+DKBSSjZMCgop3XbeCXzIVP784ruC8HF5QrYsXUQfTc7lzqafXZXH8Bk89gSScA1fFme6TpvYz"
operator|+
literal|"M0zjBETSXADtKOs9oKB2VOIwIDAQABo4IBIjCCAR4wHQYDVR0OBBYEFFIz+0BSZlLtXkA/udRjRgph"
operator|+
literal|"tREuMIHuBgNVHSMEgeYwgeOAFFIz+0BSZlLtXkA/udRjRgphtREuoYG/pIG8MIG5MQswCQYDVQQGEw"
operator|+
literal|"JVUzERMA8GA1UECBMITmV3IFlvcmsxFjAUBgNVBAcTDU5pYWdhcmEgRmFsbHMxLDAqBgNVBAoTI1Nh"
operator|+
literal|"bXBsZSBDbGllbnQgLS0gTk9UIEZPUiBQUk9EVUNUSU9OMRYwFAYDVQQLEw1JVCBEZXBhcnRtZW50MR"
operator|+
literal|"cwFQYDVQQDEw53d3cuY2xpZW50LmNvbTEgMB4GCSqGSIb3DQEJARYRY2xpZW50QGNsaWVudC5jb22C"
operator|+
literal|"CQCTkVl9l7GvAzAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4GBAEjEr9QfaYsZf7ELnqB++O"
operator|+
literal|"kWcKxpMt1Yj/VOyL99AekkVTM+rRHCU9Bu+tncMNsfy8mIXUC1JqKQ+Cq5RlaDh/ujzt6i17G7uSGd"
operator|+
literal|"6U1U/DPZBqTm3Dxwl1cMAGU/CoAKTWE+o+fS4Q2xHv7L1KiXQQc9EWJ4C34Ik45fB6g3DiTj"
decl_stmt|;
name|RequestSecurityTokenType
name|requestMock
init|=
name|createMock
argument_list|(
name|RequestSecurityTokenType
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|storePath
init|=
literal|"/stsstore.jks"
decl_stmt|;
specifier|private
name|String
name|storePwd
init|=
literal|"stsspass"
decl_stmt|;
specifier|private
name|String
name|keySignAlias
init|=
literal|"mystskey"
decl_stmt|;
specifier|private
name|String
name|keySignPwd
init|=
literal|"stskpass"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testIssueDelegateNullParameter
parameter_list|()
block|{
name|SAMLTokenIssueOperation
name|id
init|=
operator|new
name|SAMLTokenIssueOperation
argument_list|()
decl_stmt|;
try|try
block|{
name|id
operator|.
name|issue
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"NullPointerException should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIssueDelegate
parameter_list|()
block|{
name|WebServiceContext
name|context
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|WebServiceContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|MessageContext
name|ctx2
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|MessageContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|context
operator|.
name|getMessageContext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ctx2
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|UsernameToken
name|token
init|=
operator|new
name|UsernameToken
argument_list|(
literal|"joe"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ctx2
operator|.
name|get
argument_list|(
name|SecurityToken
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|token
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|SAMLTokenIssueOperation
name|id
init|=
operator|new
name|SAMLTokenIssueOperation
argument_list|()
decl_stmt|;
name|CertificateVerifierConfig
name|certificateVerifierConfig
init|=
operator|new
name|CertificateVerifierConfig
argument_list|()
decl_stmt|;
name|certificateVerifierConfig
operator|.
name|setTrustCertAliases
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cacert"
argument_list|)
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setKeySignAlias
argument_list|(
name|keySignAlias
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setKeySignPwd
argument_list|(
name|keySignPwd
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setStorePath
argument_list|(
name|storePath
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setStorePwd
argument_list|(
name|storePwd
argument_list|)
expr_stmt|;
name|id
operator|.
name|setCertificateVerifierConfig
argument_list|(
name|certificateVerifierConfig
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|tokenType
init|=
operator|new
name|JAXBElement
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512"
argument_list|,
literal|"TokenType"
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"urn:oasis:names:tc:SAML:1.0:assertion"
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|requestMock
operator|.
name|getAny
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|tokenType
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|requestMock
argument_list|,
name|context
argument_list|,
name|ctx2
argument_list|)
expr_stmt|;
name|TokenProvider
name|tp1
init|=
operator|new
name|Saml1TokenProvider
argument_list|()
decl_stmt|;
name|TokenProvider
name|tp2
init|=
operator|new
name|Saml2TokenProvider
argument_list|()
decl_stmt|;
name|id
operator|.
name|setTokenProviders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tp1
argument_list|,
name|tp2
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|.
name|issue
argument_list|(
name|requestMock
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIssueDelegateWrongSignKey
parameter_list|()
block|{
name|SAMLTokenIssueOperation
name|id
init|=
operator|new
name|SAMLTokenIssueOperation
argument_list|()
decl_stmt|;
name|CertificateVerifierConfig
name|certificateVerifierConfig
init|=
operator|new
name|CertificateVerifierConfig
argument_list|()
decl_stmt|;
name|certificateVerifierConfig
operator|.
name|setTrustCertAliases
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cacert"
argument_list|)
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setKeySignAlias
argument_list|(
name|keySignAlias
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setKeySignPwd
argument_list|(
literal|"xxx"
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setStorePath
argument_list|(
name|storePath
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setStorePwd
argument_list|(
name|storePwd
argument_list|)
expr_stmt|;
name|id
operator|.
name|setCertificateVerifierConfig
argument_list|(
name|certificateVerifierConfig
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|tokenType
init|=
operator|new
name|JAXBElement
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512"
argument_list|,
literal|"TokenType"
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"urn:oasis:names:tc:SAML:1.0:assertion"
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|requestMock
operator|.
name|getAny
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|tokenType
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
name|TokenProvider
name|tp1
init|=
operator|new
name|Saml1TokenProvider
argument_list|()
decl_stmt|;
name|TokenProvider
name|tp2
init|=
operator|new
name|Saml2TokenProvider
argument_list|()
decl_stmt|;
name|id
operator|.
name|setTokenProviders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tp1
argument_list|,
name|tp2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|id
operator|.
name|issue
argument_list|(
name|requestMock
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"STSException should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|STSException
name|e
parameter_list|)
block|{
comment|// expected
block|}
finally|finally
block|{
name|verify
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIssueDelegateWrongSignAlias
parameter_list|()
block|{
name|SAMLTokenIssueOperation
name|id
init|=
operator|new
name|SAMLTokenIssueOperation
argument_list|()
decl_stmt|;
name|CertificateVerifierConfig
name|certificateVerifierConfig
init|=
operator|new
name|CertificateVerifierConfig
argument_list|()
decl_stmt|;
name|certificateVerifierConfig
operator|.
name|setTrustCertAliases
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cacert"
argument_list|)
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setKeySignAlias
argument_list|(
literal|"xxx"
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setKeySignPwd
argument_list|(
name|keySignPwd
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setStorePath
argument_list|(
name|storePath
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setStorePwd
argument_list|(
name|storePwd
argument_list|)
expr_stmt|;
name|id
operator|.
name|setCertificateVerifierConfig
argument_list|(
name|certificateVerifierConfig
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|tokenType
init|=
operator|new
name|JAXBElement
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512"
argument_list|,
literal|"TokenType"
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"urn:oasis:names:tc:SAML:1.0:assertion"
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|requestMock
operator|.
name|getAny
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|tokenType
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
name|TokenProvider
name|tp1
init|=
operator|new
name|Saml1TokenProvider
argument_list|()
decl_stmt|;
name|TokenProvider
name|tp2
init|=
operator|new
name|Saml2TokenProvider
argument_list|()
decl_stmt|;
name|id
operator|.
name|setTokenProviders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tp1
argument_list|,
name|tp2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|id
operator|.
name|issue
argument_list|(
name|requestMock
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"STSException should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|STSException
name|e
parameter_list|)
block|{
comment|// expected
block|}
finally|finally
block|{
name|verify
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIssueDelegateUsernameNull
parameter_list|()
block|{
name|SAMLTokenIssueOperation
name|id
init|=
operator|new
name|SAMLTokenIssueOperation
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|requestMock
operator|.
name|getAny
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
name|TokenProvider
name|tp1
init|=
operator|new
name|Saml1TokenProvider
argument_list|()
decl_stmt|;
name|TokenProvider
name|tp2
init|=
operator|new
name|Saml2TokenProvider
argument_list|()
decl_stmt|;
name|id
operator|.
name|setTokenProviders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tp1
argument_list|,
name|tp2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|id
operator|.
name|issue
argument_list|(
name|requestMock
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"STSException should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|STSException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|verify
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testIssueDelegateWithCert
parameter_list|()
throws|throws
name|Exception
block|{
name|SAMLTokenIssueOperation
name|id
init|=
operator|new
name|SAMLTokenIssueOperation
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|CertificateVerifierConfig
name|certificateVerifierConfig
init|=
operator|new
name|CertificateVerifierConfig
argument_list|()
decl_stmt|;
name|certificateVerifierConfig
operator|.
name|setTrustCertAliases
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cacert"
argument_list|)
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setKeySignAlias
argument_list|(
name|keySignAlias
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setKeySignPwd
argument_list|(
name|keySignPwd
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setStorePath
argument_list|(
name|storePath
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setStorePwd
argument_list|(
name|storePwd
argument_list|)
expr_stmt|;
name|id
operator|.
name|setCertificateVerifierConfig
argument_list|(
name|certificateVerifierConfig
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|byte
index|[]
argument_list|>
name|jX509Certificate
init|=
operator|new
name|JAXBElement
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"X509Certificate"
argument_list|)
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|Base64Utility
operator|.
name|decode
argument_list|(
name|CERT_DATA
argument_list|)
argument_list|)
decl_stmt|;
name|X509DataType
name|x509DataType
init|=
operator|new
name|X509DataType
argument_list|()
decl_stmt|;
name|x509DataType
operator|.
name|getX509IssuerSerialOrX509SKIOrX509SubjectName
argument_list|()
operator|.
name|add
argument_list|(
name|jX509Certificate
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|X509DataType
argument_list|>
name|jX509DataType
init|=
operator|new
name|JAXBElement
argument_list|<
name|X509DataType
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"X509Data"
argument_list|)
argument_list|,
name|X509DataType
operator|.
name|class
argument_list|,
name|x509DataType
argument_list|)
decl_stmt|;
name|KeyInfoType
name|keyInfoType
init|=
operator|new
name|KeyInfoType
argument_list|()
decl_stmt|;
name|keyInfoType
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|jX509DataType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|KeyInfoType
argument_list|>
name|jKeyInfoType
init|=
operator|new
name|JAXBElement
argument_list|<
name|KeyInfoType
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"KeyInfo"
argument_list|)
argument_list|,
name|KeyInfoType
operator|.
name|class
argument_list|,
name|keyInfoType
argument_list|)
decl_stmt|;
name|UseKeyType
name|useKeyType
init|=
operator|new
name|UseKeyType
argument_list|()
decl_stmt|;
name|useKeyType
operator|.
name|setAny
argument_list|(
name|jKeyInfoType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|UseKeyType
argument_list|>
name|jUseKeyType
init|=
operator|new
name|JAXBElement
argument_list|<
name|UseKeyType
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"UseKey"
argument_list|)
argument_list|,
name|UseKeyType
operator|.
name|class
argument_list|,
name|useKeyType
argument_list|)
decl_stmt|;
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|tokenType
init|=
operator|new
name|JAXBElement
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512"
argument_list|,
literal|"TokenType"
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"urn:oasis:names:tc:SAML:1.0:assertion"
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|requestMock
operator|.
name|getAny
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|jUseKeyType
argument_list|,
operator|(
name|Object
operator|)
name|tokenType
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
name|TokenProvider
name|tp1
init|=
operator|new
name|Saml1TokenProvider
argument_list|()
decl_stmt|;
name|TokenProvider
name|tp2
init|=
operator|new
name|Saml2TokenProvider
argument_list|()
decl_stmt|;
name|id
operator|.
name|setTokenProviders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tp1
argument_list|,
name|tp2
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|.
name|issue
argument_list|(
name|requestMock
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIssueDelegateWithCertWithWrongStorePass
parameter_list|()
throws|throws
name|Exception
block|{
name|SAMLTokenIssueOperation
name|id
init|=
operator|new
name|SAMLTokenIssueOperation
argument_list|()
decl_stmt|;
name|CertificateVerifierConfig
name|certificateVerifierConfig
init|=
operator|new
name|CertificateVerifierConfig
argument_list|()
decl_stmt|;
name|certificateVerifierConfig
operator|.
name|setTrustCertAliases
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cacert"
argument_list|)
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setKeySignAlias
argument_list|(
name|keySignAlias
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setKeySignPwd
argument_list|(
name|keySignPwd
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setStorePath
argument_list|(
name|storePath
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setStorePwd
argument_list|(
literal|"xxx"
argument_list|)
expr_stmt|;
name|id
operator|.
name|setCertificateVerifierConfig
argument_list|(
name|certificateVerifierConfig
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|byte
index|[]
argument_list|>
name|jX509Certificate
init|=
operator|new
name|JAXBElement
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"X509Certificate"
argument_list|)
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|Base64Utility
operator|.
name|decode
argument_list|(
name|CERT_DATA
argument_list|)
argument_list|)
decl_stmt|;
name|X509DataType
name|x509DataType
init|=
operator|new
name|X509DataType
argument_list|()
decl_stmt|;
name|x509DataType
operator|.
name|getX509IssuerSerialOrX509SKIOrX509SubjectName
argument_list|()
operator|.
name|add
argument_list|(
name|jX509Certificate
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|X509DataType
argument_list|>
name|jX509DataType
init|=
operator|new
name|JAXBElement
argument_list|<
name|X509DataType
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"X509Data"
argument_list|)
argument_list|,
name|X509DataType
operator|.
name|class
argument_list|,
name|x509DataType
argument_list|)
decl_stmt|;
name|KeyInfoType
name|keyInfoType
init|=
operator|new
name|KeyInfoType
argument_list|()
decl_stmt|;
name|keyInfoType
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|jX509DataType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|KeyInfoType
argument_list|>
name|jKeyInfoType
init|=
operator|new
name|JAXBElement
argument_list|<
name|KeyInfoType
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"KeyInfo"
argument_list|)
argument_list|,
name|KeyInfoType
operator|.
name|class
argument_list|,
name|keyInfoType
argument_list|)
decl_stmt|;
name|UseKeyType
name|useKeyType
init|=
operator|new
name|UseKeyType
argument_list|()
decl_stmt|;
name|useKeyType
operator|.
name|setAny
argument_list|(
name|jKeyInfoType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|UseKeyType
argument_list|>
name|jUseKeyType
init|=
operator|new
name|JAXBElement
argument_list|<
name|UseKeyType
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"UseKey"
argument_list|)
argument_list|,
name|UseKeyType
operator|.
name|class
argument_list|,
name|useKeyType
argument_list|)
decl_stmt|;
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|tokenType
init|=
operator|new
name|JAXBElement
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512"
argument_list|,
literal|"TokenType"
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"urn:oasis:names:tc:SAML:1.0:assertion"
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|requestMock
operator|.
name|getAny
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|jUseKeyType
argument_list|,
operator|(
name|Object
operator|)
name|tokenType
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
name|TokenProvider
name|tp1
init|=
operator|new
name|Saml1TokenProvider
argument_list|()
decl_stmt|;
name|TokenProvider
name|tp2
init|=
operator|new
name|Saml2TokenProvider
argument_list|()
decl_stmt|;
name|id
operator|.
name|setTokenProviders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tp1
argument_list|,
name|tp2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|id
operator|.
name|issue
argument_list|(
name|requestMock
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"STSException should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|STSException
name|e
parameter_list|)
block|{
comment|// expected
block|}
finally|finally
block|{
name|verify
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIssueDelegateWithCertWithoutTokenProvidersAndTokenType
parameter_list|()
throws|throws
name|Exception
block|{
name|SAMLTokenIssueOperation
name|id
init|=
operator|new
name|SAMLTokenIssueOperation
argument_list|()
decl_stmt|;
name|CertificateVerifierConfig
name|certificateVerifierConfig
init|=
operator|new
name|CertificateVerifierConfig
argument_list|()
decl_stmt|;
name|certificateVerifierConfig
operator|.
name|setTrustCertAliases
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cacert"
argument_list|)
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setKeySignAlias
argument_list|(
name|keySignAlias
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setKeySignPwd
argument_list|(
name|keySignPwd
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setStorePath
argument_list|(
name|storePath
argument_list|)
expr_stmt|;
name|certificateVerifierConfig
operator|.
name|setStorePwd
argument_list|(
name|storePwd
argument_list|)
expr_stmt|;
name|id
operator|.
name|setCertificateVerifierConfig
argument_list|(
name|certificateVerifierConfig
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|byte
index|[]
argument_list|>
name|jX509Certificate
init|=
operator|new
name|JAXBElement
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"X509Certificate"
argument_list|)
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|Base64Utility
operator|.
name|decode
argument_list|(
name|CERT_DATA
argument_list|)
argument_list|)
decl_stmt|;
name|X509DataType
name|x509DataType
init|=
operator|new
name|X509DataType
argument_list|()
decl_stmt|;
name|x509DataType
operator|.
name|getX509IssuerSerialOrX509SKIOrX509SubjectName
argument_list|()
operator|.
name|add
argument_list|(
name|jX509Certificate
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|X509DataType
argument_list|>
name|jX509DataType
init|=
operator|new
name|JAXBElement
argument_list|<
name|X509DataType
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"X509Data"
argument_list|)
argument_list|,
name|X509DataType
operator|.
name|class
argument_list|,
name|x509DataType
argument_list|)
decl_stmt|;
name|KeyInfoType
name|keyInfoType
init|=
operator|new
name|KeyInfoType
argument_list|()
decl_stmt|;
name|keyInfoType
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|jX509DataType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|KeyInfoType
argument_list|>
name|jKeyInfoType
init|=
operator|new
name|JAXBElement
argument_list|<
name|KeyInfoType
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"KeyInfo"
argument_list|)
argument_list|,
name|KeyInfoType
operator|.
name|class
argument_list|,
name|keyInfoType
argument_list|)
decl_stmt|;
name|UseKeyType
name|useKeyType
init|=
operator|new
name|UseKeyType
argument_list|()
decl_stmt|;
name|useKeyType
operator|.
name|setAny
argument_list|(
name|jKeyInfoType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|UseKeyType
argument_list|>
name|jUseKeyType
init|=
operator|new
name|JAXBElement
argument_list|<
name|UseKeyType
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"UseKey"
argument_list|)
argument_list|,
name|UseKeyType
operator|.
name|class
argument_list|,
name|useKeyType
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|requestMock
operator|.
name|getAny
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|jUseKeyType
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TokenProvider
argument_list|>
name|tps
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|id
operator|.
name|setTokenProviders
argument_list|(
name|tps
argument_list|)
expr_stmt|;
try|try
block|{
name|id
operator|.
name|issue
argument_list|(
name|requestMock
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"STSException should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|STSException
name|e
parameter_list|)
block|{
comment|//expected
block|}
finally|finally
block|{
name|verify
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIssueDelegateWithoutCertAndUserToken
parameter_list|()
throws|throws
name|CertificateException
block|{
name|SAMLTokenIssueOperation
name|id
init|=
operator|new
name|SAMLTokenIssueOperation
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|tokenType
init|=
operator|new
name|JAXBElement
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512"
argument_list|,
literal|"TokenType"
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"urn:oasis:names:tc:SAML:1.0:assertion"
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|requestMock
operator|.
name|getAny
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|tokenType
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
name|TokenProvider
name|tp1
init|=
operator|new
name|Saml1TokenProvider
argument_list|()
decl_stmt|;
name|TokenProvider
name|tp2
init|=
operator|new
name|Saml2TokenProvider
argument_list|()
decl_stmt|;
name|id
operator|.
name|setTokenProviders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tp1
argument_list|,
name|tp2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|id
operator|.
name|issue
argument_list|(
name|requestMock
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"STSException should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|STSException
name|e
parameter_list|)
block|{
comment|// expected
block|}
finally|finally
block|{
name|verify
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIssueDelegateWithInvalidCert
parameter_list|()
throws|throws
name|CertificateException
block|{
name|SAMLTokenIssueOperation
name|id
init|=
operator|new
name|SAMLTokenIssueOperation
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// CertificateFactory certificateFactory =
comment|// CertificateFactory.getInstance("X.509");
comment|// X509Certificate x509Certificate = null;
comment|// try {
comment|// x509Certificate =
comment|// (X509Certificate)certificateFactory.generateCertificate(new
comment|// ByteArrayInputStream(Base64.decodeBase64(CERT_DATA.getBytes())));
comment|// } catch (CertificateException e) {
comment|// e.printStackTrace();
comment|// }
comment|// JAXBElement<X509Certificate> jX509Certificate = new
comment|// JAXBElement<X509Certificate>(QName.valueOf("X509Certificate"),
comment|// X509Certificate.class, x509Certificate);
name|JAXBElement
argument_list|<
name|byte
index|[]
argument_list|>
name|jX509Certificate
init|=
operator|new
name|JAXBElement
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"X509Certificate"
argument_list|)
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|CERT_DATA
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|X509DataType
name|x509DataType
init|=
operator|new
name|X509DataType
argument_list|()
decl_stmt|;
name|x509DataType
operator|.
name|getX509IssuerSerialOrX509SKIOrX509SubjectName
argument_list|()
operator|.
name|add
argument_list|(
name|jX509Certificate
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|X509DataType
argument_list|>
name|jX509DataType
init|=
operator|new
name|JAXBElement
argument_list|<
name|X509DataType
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"X509Data"
argument_list|)
argument_list|,
name|X509DataType
operator|.
name|class
argument_list|,
name|x509DataType
argument_list|)
decl_stmt|;
name|KeyInfoType
name|keyInfoType
init|=
operator|new
name|KeyInfoType
argument_list|()
decl_stmt|;
name|keyInfoType
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|jX509DataType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|KeyInfoType
argument_list|>
name|jKeyInfoType
init|=
operator|new
name|JAXBElement
argument_list|<
name|KeyInfoType
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"KeyInfo"
argument_list|)
argument_list|,
name|KeyInfoType
operator|.
name|class
argument_list|,
name|keyInfoType
argument_list|)
decl_stmt|;
name|UseKeyType
name|useKeyType
init|=
operator|new
name|UseKeyType
argument_list|()
decl_stmt|;
name|useKeyType
operator|.
name|setAny
argument_list|(
name|jKeyInfoType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|UseKeyType
argument_list|>
name|jUseKeyType
init|=
operator|new
name|JAXBElement
argument_list|<
name|UseKeyType
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"UseKey"
argument_list|)
argument_list|,
name|UseKeyType
operator|.
name|class
argument_list|,
name|useKeyType
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|requestMock
operator|.
name|getAny
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|jUseKeyType
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
name|TokenProvider
name|tp1
init|=
operator|new
name|Saml1TokenProvider
argument_list|()
decl_stmt|;
name|TokenProvider
name|tp2
init|=
operator|new
name|Saml2TokenProvider
argument_list|()
decl_stmt|;
name|id
operator|.
name|setTokenProviders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tp1
argument_list|,
name|tp2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|id
operator|.
name|issue
argument_list|(
name|requestMock
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"STSException should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|STSException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|verify
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIssueDelegateWithInvalidCert2
parameter_list|()
throws|throws
name|Exception
block|{
name|SAMLTokenIssueOperation
name|id
init|=
operator|new
name|SAMLTokenIssueOperation
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|CertificateFactory
name|certificateFactory
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
name|X509Certificate
name|x509Certificate
init|=
operator|(
name|X509Certificate
operator|)
name|certificateFactory
operator|.
name|generateCertificate
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|Base64Utility
operator|.
name|decode
argument_list|(
name|CERT_DATA
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|JAXBElement
argument_list|<
name|X509Certificate
argument_list|>
name|jX509Certificate
init|=
operator|new
name|JAXBElement
argument_list|<
name|X509Certificate
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"X509Certificate"
argument_list|)
argument_list|,
name|X509Certificate
operator|.
name|class
argument_list|,
name|x509Certificate
argument_list|)
decl_stmt|;
comment|// JAXBElement<byte[]> jX509Certificate = new
comment|// JAXBElement<byte[]>(QName.valueOf("X509Certificate"), byte[].class,
comment|// CERT_DATA.getBytes());
name|X509DataType
name|x509DataType
init|=
operator|new
name|X509DataType
argument_list|()
decl_stmt|;
name|x509DataType
operator|.
name|getX509IssuerSerialOrX509SKIOrX509SubjectName
argument_list|()
operator|.
name|add
argument_list|(
name|jX509Certificate
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|X509DataType
argument_list|>
name|jX509DataType
init|=
operator|new
name|JAXBElement
argument_list|<
name|X509DataType
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"X509Data"
argument_list|)
argument_list|,
name|X509DataType
operator|.
name|class
argument_list|,
name|x509DataType
argument_list|)
decl_stmt|;
name|KeyInfoType
name|keyInfoType
init|=
operator|new
name|KeyInfoType
argument_list|()
decl_stmt|;
name|keyInfoType
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|jX509DataType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|KeyInfoType
argument_list|>
name|jKeyInfoType
init|=
operator|new
name|JAXBElement
argument_list|<
name|KeyInfoType
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"KeyInfo"
argument_list|)
argument_list|,
name|KeyInfoType
operator|.
name|class
argument_list|,
name|keyInfoType
argument_list|)
decl_stmt|;
name|UseKeyType
name|useKeyType
init|=
operator|new
name|UseKeyType
argument_list|()
decl_stmt|;
name|useKeyType
operator|.
name|setAny
argument_list|(
name|jKeyInfoType
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|UseKeyType
argument_list|>
name|jUseKeyType
init|=
operator|new
name|JAXBElement
argument_list|<
name|UseKeyType
argument_list|>
argument_list|(
name|QName
operator|.
name|valueOf
argument_list|(
literal|"UseKey"
argument_list|)
argument_list|,
name|UseKeyType
operator|.
name|class
argument_list|,
name|useKeyType
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|requestMock
operator|.
name|getAny
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
operator|)
name|jUseKeyType
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
name|TokenProvider
name|tp1
init|=
operator|new
name|Saml1TokenProvider
argument_list|()
decl_stmt|;
name|TokenProvider
name|tp2
init|=
operator|new
name|Saml2TokenProvider
argument_list|()
decl_stmt|;
name|id
operator|.
name|setTokenProviders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tp1
argument_list|,
name|tp2
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|id
operator|.
name|issue
argument_list|(
name|requestMock
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CertificateException should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|verify
argument_list|(
name|requestMock
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

