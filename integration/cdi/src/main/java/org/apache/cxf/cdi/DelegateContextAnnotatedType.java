begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedConstructor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedField
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|util
operator|.
name|AnnotationLiteral
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toSet
import|;
end_import

begin_class
specifier|final
class|class
name|DelegateContextAnnotatedType
parameter_list|<
name|X
parameter_list|>
implements|implements
name|AnnotatedType
argument_list|<
name|X
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Inject
name|INJECT
init|=
operator|new
name|InjectLiteral
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ContextResolved
name|CONTEXT_RESOLVED
init|=
name|ContextResolved
operator|.
name|LITERAL
decl_stmt|;
specifier|private
specifier|final
name|AnnotatedType
argument_list|<
name|X
argument_list|>
name|original
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|AnnotatedField
argument_list|<
name|?
super|super
name|X
argument_list|>
argument_list|>
name|replacedFields
decl_stmt|;
name|DelegateContextAnnotatedType
parameter_list|(
name|AnnotatedType
argument_list|<
name|X
argument_list|>
name|original
parameter_list|)
block|{
name|this
operator|.
name|original
operator|=
name|original
expr_stmt|;
name|this
operator|.
name|replacedFields
operator|=
name|replaceFields
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|AnnotatedField
argument_list|<
name|?
super|super
name|X
argument_list|>
argument_list|>
name|replaceFields
parameter_list|(
name|AnnotatedType
argument_list|<
name|?
super|super
name|X
argument_list|>
name|delegate
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getFields
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|wrap
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|Type
argument_list|>
name|getContextFieldTypes
parameter_list|()
block|{
return|return
name|replacedFields
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|f
lambda|->
name|f
operator|.
name|isAnnotationPresent
argument_list|(
name|Context
operator|.
name|class
argument_list|)
operator|||
name|f
operator|.
name|isAnnotationPresent
argument_list|(
name|ContextResolved
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|f
lambda|->
name|f
operator|.
name|getJavaMember
argument_list|()
operator|.
name|getAnnotatedType
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toSet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|X
argument_list|>
name|getJavaClass
parameter_list|()
block|{
return|return
name|original
operator|.
name|getJavaClass
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|AnnotatedConstructor
argument_list|<
name|X
argument_list|>
argument_list|>
name|getConstructors
parameter_list|()
block|{
return|return
name|original
operator|.
name|getConstructors
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|AnnotatedMethod
argument_list|<
name|?
super|super
name|X
argument_list|>
argument_list|>
name|getMethods
parameter_list|()
block|{
return|return
name|original
operator|.
name|getMethods
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|AnnotatedField
argument_list|<
name|?
super|super
name|X
argument_list|>
argument_list|>
name|getFields
parameter_list|()
block|{
return|return
name|replacedFields
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getBaseType
parameter_list|()
block|{
return|return
name|original
operator|.
name|getBaseType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Type
argument_list|>
name|getTypeClosure
parameter_list|()
block|{
return|return
name|original
operator|.
name|getTypeClosure
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|Annotation
parameter_list|>
name|T
name|getAnnotation
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|annotationType
parameter_list|)
block|{
return|return
name|original
operator|.
name|getAnnotation
argument_list|(
name|annotationType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Annotation
argument_list|>
name|getAnnotations
parameter_list|()
block|{
return|return
name|original
operator|.
name|getAnnotations
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAnnotationPresent
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|)
block|{
return|return
name|original
operator|.
name|isAnnotationPresent
argument_list|(
name|annotationType
argument_list|)
return|;
block|}
specifier|private
name|AnnotatedField
argument_list|<
name|?
super|super
name|X
argument_list|>
name|wrap
parameter_list|(
name|AnnotatedField
argument_list|<
name|?
super|super
name|X
argument_list|>
name|af
parameter_list|)
block|{
if|if
condition|(
name|af
operator|.
name|isAnnotationPresent
argument_list|(
name|Context
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|new
name|DelegateAnnotatedField
argument_list|<>
argument_list|(
name|af
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|af
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|DelegateAnnotatedField
parameter_list|<
name|Y
parameter_list|>
implements|implements
name|AnnotatedField
argument_list|<
name|Y
argument_list|>
block|{
specifier|private
specifier|final
name|AnnotatedField
argument_list|<
name|Y
argument_list|>
name|original
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Annotation
argument_list|>
name|annotationSet
decl_stmt|;
specifier|private
name|DelegateAnnotatedField
parameter_list|(
name|AnnotatedField
argument_list|<
name|Y
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|original
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|annotationSet
operator|=
name|processAnnotations
argument_list|(
name|delegate
operator|.
name|getAnnotations
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|Annotation
argument_list|>
name|processAnnotations
parameter_list|(
name|Set
argument_list|<
name|Annotation
argument_list|>
name|annotations
parameter_list|)
block|{
name|Set
argument_list|<
name|Annotation
argument_list|>
name|resultAnnotations
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Annotation
name|a
range|:
name|annotations
control|)
block|{
if|if
condition|(
name|a
operator|instanceof
name|Context
condition|)
block|{
name|resultAnnotations
operator|.
name|add
argument_list|(
name|INJECT
argument_list|)
expr_stmt|;
name|resultAnnotations
operator|.
name|add
argument_list|(
name|CONTEXT_RESOLVED
argument_list|)
expr_stmt|;
block|}
name|resultAnnotations
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|resultAnnotations
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Field
name|getJavaMember
parameter_list|()
block|{
return|return
name|original
operator|.
name|getJavaMember
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStatic
parameter_list|()
block|{
return|return
name|original
operator|.
name|isStatic
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AnnotatedType
argument_list|<
name|Y
argument_list|>
name|getDeclaringType
parameter_list|()
block|{
return|return
name|original
operator|.
name|getDeclaringType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getBaseType
parameter_list|()
block|{
return|return
name|original
operator|.
name|getBaseType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Type
argument_list|>
name|getTypeClosure
parameter_list|()
block|{
return|return
name|original
operator|.
name|getTypeClosure
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
extends|extends
name|Annotation
parameter_list|>
name|T
name|getAnnotation
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|annotationType
parameter_list|)
block|{
for|for
control|(
name|Annotation
name|a
range|:
name|annotationSet
control|)
block|{
if|if
condition|(
name|annotationType
operator|==
name|a
operator|.
name|annotationType
argument_list|()
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|a
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Annotation
argument_list|>
name|getAnnotations
parameter_list|()
block|{
return|return
name|annotationSet
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAnnotationPresent
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|)
block|{
return|return
name|getAnnotation
argument_list|(
name|annotationType
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|InjectLiteral
extends|extends
name|AnnotationLiteral
argument_list|<
name|Inject
argument_list|>
implements|implements
name|Inject
block|{      }
block|}
end_class

end_unit

