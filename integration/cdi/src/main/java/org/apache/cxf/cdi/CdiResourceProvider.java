begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|RequestScoped
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|spi
operator|.
name|CreationalContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|lifecycle
operator|.
name|ResourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|CdiResourceProvider
implements|implements
name|ResourceProvider
block|{
specifier|private
name|Object
name|instance
decl_stmt|;
specifier|private
name|CreationalContext
argument_list|<
name|?
argument_list|>
name|context
decl_stmt|;
specifier|private
specifier|final
name|BeanManager
name|beanManager
decl_stmt|;
specifier|private
specifier|final
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
decl_stmt|;
name|CdiResourceProvider
parameter_list|(
specifier|final
name|BeanManager
name|beanManager
parameter_list|,
specifier|final
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
parameter_list|)
block|{
name|this
operator|.
name|beanManager
operator|=
name|beanManager
expr_stmt|;
name|this
operator|.
name|bean
operator|=
name|bean
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getInstance
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|beanManager
operator|.
name|createCreationalContext
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|instance
operator|=
name|beanManager
operator|.
name|getReference
argument_list|(
name|bean
argument_list|,
name|bean
operator|.
name|getBeanClass
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseInstance
parameter_list|(
name|Message
name|m
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|release
argument_list|()
expr_stmt|;
name|instance
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getResourceClass
parameter_list|()
block|{
return|return
name|bean
operator|.
name|getBeanClass
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
operator|!
name|bean
operator|.
name|getScope
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|RequestScoped
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

