begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ClassUnwrapper
import|;
end_import

begin_comment
comment|/**  * Unwraps the CDI proxy classes into real classes.  */
end_comment

begin_class
class|class
name|CdiClassUnwrapper
implements|implements
name|ClassUnwrapper
block|{
comment|/**      * Known proxy patterns for OWB and Weld:      *       *  Xxx$$OwbNormalScopeProxy0      *  Xxx$Proxy$_$$_WeldClientProxy      *        */
specifier|private
specifier|static
specifier|final
name|Pattern
name|PROXY_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".+\\$\\$.+Proxy\\d*"
argument_list|)
decl_stmt|;
name|CdiClassUnwrapper
parameter_list|()
block|{      }
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getRealClass
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|o
operator|.
name|getClass
argument_list|()
decl_stmt|;
return|return
name|getRealClassFromClass
argument_list|(
name|clazz
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getRealClassFromClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|PROXY_PATTERN
operator|.
name|matcher
argument_list|(
name|clazz
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|clazz
operator|.
name|getSuperclass
argument_list|()
return|;
block|}
return|return
name|clazz
return|;
block|}
block|}
end_class

end_unit

