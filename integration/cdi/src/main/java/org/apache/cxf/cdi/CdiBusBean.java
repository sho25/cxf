begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|spi
operator|.
name|CreationalContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|InjectionPoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|InjectionTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|extension
operator|.
name|ExtensionManagerBus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ClassUnwrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SystemPropertyAction
import|;
end_import

begin_class
specifier|final
class|class
name|CdiBusBean
extends|extends
name|AbstractCXFBean
argument_list|<
name|ExtensionManagerBus
argument_list|>
block|{
specifier|static
specifier|final
name|String
name|CXF
init|=
literal|"cxf"
decl_stmt|;
specifier|private
specifier|final
name|InjectionTarget
argument_list|<
name|ExtensionManagerBus
argument_list|>
name|injectionTarget
decl_stmt|;
name|CdiBusBean
parameter_list|(
specifier|final
name|InjectionTarget
argument_list|<
name|ExtensionManagerBus
argument_list|>
name|injectionTarget
parameter_list|)
block|{
name|this
operator|.
name|injectionTarget
operator|=
name|injectionTarget
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getBeanClass
parameter_list|()
block|{
return|return
name|Bus
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|InjectionPoint
argument_list|>
name|getInjectionPoints
parameter_list|()
block|{
return|return
name|injectionTarget
operator|.
name|getInjectionPoints
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|CXF
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Type
argument_list|>
name|getTypes
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|Type
argument_list|>
name|types
init|=
name|super
operator|.
name|getTypes
argument_list|()
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|types
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExtensionManagerBus
name|create
parameter_list|(
specifier|final
name|CreationalContext
argument_list|<
name|ExtensionManagerBus
argument_list|>
name|ctx
parameter_list|)
block|{
specifier|final
name|ExtensionManagerBus
name|instance
init|=
name|injectionTarget
operator|.
name|produce
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
literal|"org.apache.cxf.cdi.unwrap.proxies"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
block|{
name|instance
operator|.
name|setProperty
argument_list|(
name|ClassUnwrapper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|CdiClassUnwrapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BusFactory
operator|.
name|possiblySetDefaultBus
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|instance
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|injectionTarget
operator|.
name|inject
argument_list|(
name|instance
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|injectionTarget
operator|.
name|postConstruct
argument_list|(
name|instance
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|(
specifier|final
name|ExtensionManagerBus
name|instance
parameter_list|,
specifier|final
name|CreationalContext
argument_list|<
name|ExtensionManagerBus
argument_list|>
name|ctx
parameter_list|)
block|{
name|injectionTarget
operator|.
name|preDestroy
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|injectionTarget
operator|.
name|dispose
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|instance
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

