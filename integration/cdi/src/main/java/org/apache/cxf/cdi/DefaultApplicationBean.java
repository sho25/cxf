begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|spi
operator|.
name|CreationalContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|Vetoed
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|InjectionPoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Application
import|;
end_import

begin_class
annotation|@
name|Vetoed
class|class
name|DefaultApplicationBean
extends|extends
name|AbstractCXFBean
argument_list|<
name|DefaultApplication
argument_list|>
block|{
specifier|private
specifier|final
name|DefaultApplication
name|application
init|=
operator|new
name|DefaultApplication
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getBeanClass
parameter_list|()
block|{
return|return
name|DefaultApplication
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|InjectionPoint
argument_list|>
name|getInjectionPoints
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DefaultApplication
name|create
parameter_list|(
name|CreationalContext
argument_list|<
name|DefaultApplication
argument_list|>
name|creationalContext
parameter_list|)
block|{
return|return
name|application
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|(
name|DefaultApplication
name|defaultApplication
parameter_list|,
name|CreationalContext
argument_list|<
name|DefaultApplication
argument_list|>
name|creationalContext
parameter_list|)
block|{
name|creationalContext
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Type
argument_list|>
name|getTypes
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|Type
argument_list|>
name|types
init|=
name|super
operator|.
name|getTypes
argument_list|()
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
name|DefaultApplication
operator|.
name|class
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
name|Application
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|types
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|DefaultApplication
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

