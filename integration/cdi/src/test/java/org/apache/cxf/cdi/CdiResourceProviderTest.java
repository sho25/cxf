begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Documented
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|ApplicationScoped
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|NormalScope
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|context
operator|.
name|RequestScoped
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|lifecycle
operator|.
name|ResourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|CdiResourceProviderTest
block|{
annotation|@
name|Mock
specifier|private
name|BeanManager
name|beanManager
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
specifier|final
name|Class
name|beanClass
init|=
name|Object
operator|.
name|class
decl_stmt|;
name|when
argument_list|(
name|bean
operator|.
name|getBeanClass
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|beanClass
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|beanManager
operator|.
name|isNormalScope
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocationOnMock
lambda|->
name|Class
operator|.
name|class
operator|.
name|cast
argument_list|(
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|.
name|isAnnotationPresent
argument_list|(
name|NormalScope
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|beanManager
operator|.
name|getReference
argument_list|(
name|eq
argument_list|(
name|bean
argument_list|)
argument_list|,
name|eq
argument_list|(
name|beanClass
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|i
lambda|->
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensure to create one instance per call, this is what we test
block|}
annotation|@
name|Test
specifier|public
name|void
name|normalScoped
parameter_list|()
block|{
name|when
argument_list|(
name|bean
operator|.
name|getScope
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Class
operator|.
name|class
operator|.
name|cast
argument_list|(
name|ApplicationScoped
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSingleton
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|singleton
parameter_list|()
block|{
name|when
argument_list|(
name|bean
operator|.
name|getScope
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Class
operator|.
name|class
operator|.
name|cast
argument_list|(
name|Singleton
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSingleton
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dependent
parameter_list|()
block|{
name|when
argument_list|(
name|bean
operator|.
name|getScope
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Class
operator|.
name|class
operator|.
name|cast
argument_list|(
name|Singleton
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSingleton
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|requestScoped
parameter_list|()
block|{
name|when
argument_list|(
name|bean
operator|.
name|getScope
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Class
operator|.
name|class
operator|.
name|cast
argument_list|(
name|RequestScoped
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSingleton
argument_list|()
expr_stmt|;
comment|// yes, this is a singleton since we look up the proxy
block|}
annotation|@
name|Test
specifier|public
name|void
name|perRequest
parameter_list|()
block|{
comment|// not a scope so will be considered as a not singleton bean
name|when
argument_list|(
name|bean
operator|.
name|getScope
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Class
operator|.
name|class
operator|.
name|cast
argument_list|(
name|Documented
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotSingleton
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|assertNotSingleton
parameter_list|()
block|{
specifier|final
name|ResourceProvider
name|provider
init|=
operator|new
name|PerRequestResourceProvider
argument_list|(
parameter_list|()
lambda|->
operator|new
name|Lifecycle
argument_list|(
name|beanManager
argument_list|,
name|bean
argument_list|)
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
operator|new
name|JAXRSCdiResourceExtension
argument_list|()
operator|.
name|isCxfSingleton
argument_list|(
name|beanManager
argument_list|,
name|bean
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|provider
operator|.
name|isSingleton
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MessageImpl
name|message1
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
specifier|final
name|MessageImpl
name|message2
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|instance
init|=
name|provider
operator|.
name|getInstance
argument_list|(
name|message1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|provider
operator|.
name|getInstance
argument_list|(
name|message1
argument_list|)
argument_list|,
name|provider
operator|.
name|getInstance
argument_list|(
name|message2
argument_list|)
argument_list|)
expr_stmt|;
comment|// ensure we can close the lifecycle
specifier|final
name|Lifecycle
name|lifecycle1
init|=
name|message1
operator|.
name|get
argument_list|(
name|Lifecycle
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|lifecycle1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message2
operator|.
name|get
argument_list|(
name|Lifecycle
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSingleton
parameter_list|()
block|{
specifier|final
name|ResourceProvider
name|provider
init|=
operator|new
name|SingletonResourceProvider
argument_list|(
operator|new
name|Lifecycle
argument_list|(
name|beanManager
argument_list|,
name|bean
argument_list|)
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|new
name|JAXRSCdiResourceExtension
argument_list|()
operator|.
name|isCxfSingleton
argument_list|(
name|beanManager
argument_list|,
name|bean
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|provider
operator|.
name|isSingleton
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|instance
init|=
name|provider
operator|.
name|getInstance
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|instance
argument_list|,
name|provider
operator|.
name|getInstance
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

