begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|tracing
operator|.
name|htrace
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerResponseContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerResponseFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Sampler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Trace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|TraceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|TraceScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|impl
operator|.
name|NeverSampler
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tracing
operator|.
name|TracerHeaders
operator|.
name|HEADER_SPAN_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tracing
operator|.
name|TracerHeaders
operator|.
name|HEADER_TRACE_ID
import|;
end_import

begin_class
annotation|@
name|Provider
specifier|public
class|class
name|HTraceProvider
implements|implements
name|ContainerRequestFilter
implements|,
name|ContainerResponseFilter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|HTraceProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Sampler
argument_list|<
name|?
argument_list|>
name|sampler
decl_stmt|;
comment|// Keep the parent spans in the thread-local storage. The span created during request
comment|// phase should be closed during the response phase in order to mark the start/end
comment|// bounds
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|TraceScope
argument_list|>
name|parent
init|=
operator|new
name|ThreadLocal
argument_list|<
name|TraceScope
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TraceScope
name|initialValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|HTraceProvider
parameter_list|()
block|{
name|this
argument_list|(
name|NeverSampler
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HTraceProvider
parameter_list|(
specifier|final
name|Sampler
argument_list|<
name|?
argument_list|>
name|sampler
parameter_list|)
block|{
name|this
operator|.
name|sampler
operator|=
name|sampler
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|filter
parameter_list|(
specifier|final
name|ContainerRequestContext
name|requestContext
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|requestContext
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
comment|// Try to extract the Trace Id value from the request header
specifier|final
name|long
name|traceId
init|=
name|getFirstValueOrDefault
argument_list|(
name|headers
argument_list|,
name|HEADER_TRACE_ID
argument_list|,
name|Tracer
operator|.
name|DONT_TRACE
operator|.
name|traceId
argument_list|)
decl_stmt|;
comment|// Try to extract the Span Id value from the request header
specifier|final
name|long
name|spanId
init|=
name|getFirstValueOrDefault
argument_list|(
name|headers
argument_list|,
name|HEADER_SPAN_ID
argument_list|,
name|Tracer
operator|.
name|DONT_TRACE
operator|.
name|spanId
argument_list|)
decl_stmt|;
if|if
condition|(
name|traceId
operator|!=
name|Tracer
operator|.
name|DONT_TRACE
operator|.
name|traceId
operator|&&
name|spanId
operator|!=
name|Tracer
operator|.
name|DONT_TRACE
operator|.
name|spanId
condition|)
block|{
name|parent
operator|.
name|set
argument_list|(
name|Trace
operator|.
name|startSpan
argument_list|(
name|requestContext
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
operator|(
name|Sampler
argument_list|<
name|TraceInfo
argument_list|>
operator|)
name|sampler
argument_list|,
operator|new
name|TraceInfo
argument_list|(
name|traceId
argument_list|,
name|spanId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|filter
parameter_list|(
specifier|final
name|ContainerRequestContext
name|requestContext
parameter_list|,
specifier|final
name|ContainerResponseContext
name|responseContext
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|requestContext
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
comment|// Transfer tracing headers into the response headers
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|HEADER_TRACE_ID
argument_list|)
operator|&&
name|headers
operator|.
name|containsKey
argument_list|(
name|HEADER_SPAN_ID
argument_list|)
condition|)
block|{
name|responseContext
operator|.
name|getHeaders
argument_list|()
operator|.
name|add
argument_list|(
name|HEADER_TRACE_ID
argument_list|,
name|headers
operator|.
name|getFirst
argument_list|(
name|HEADER_TRACE_ID
argument_list|)
argument_list|)
expr_stmt|;
name|responseContext
operator|.
name|getHeaders
argument_list|()
operator|.
name|add
argument_list|(
name|HEADER_SPAN_ID
argument_list|,
name|headers
operator|.
name|getFirst
argument_list|(
name|HEADER_SPAN_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
specifier|final
name|TraceScope
name|span
init|=
name|parent
operator|.
name|get
argument_list|()
init|)
block|{
if|if
condition|(
name|span
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Long
name|getFirstValueOrDefault
parameter_list|(
specifier|final
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
specifier|final
name|String
name|header
parameter_list|,
specifier|final
name|long
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
operator|!
name|headers
operator|.
name|containsKey
argument_list|(
name|header
argument_list|)
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
try|try
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|headers
operator|.
name|get
argument_list|(
name|header
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Unable to parse '%s' header value to long number"
argument_list|,
name|header
argument_list|)
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultValue
return|;
block|}
block|}
end_class

end_unit

