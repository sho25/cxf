begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tracing
operator|.
name|htrace
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerRequestFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerResponseContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ContainerResponseFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ResourceInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|Suspended
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tracing
operator|.
name|htrace
operator|.
name|AbstractHTraceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Sampler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|TraceScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|impl
operator|.
name|NeverSampler
import|;
end_import

begin_class
annotation|@
name|Provider
specifier|public
class|class
name|HTraceProvider
extends|extends
name|AbstractHTraceProvider
implements|implements
name|ContainerRequestFilter
implements|,
name|ContainerResponseFilter
block|{
annotation|@
name|Context
specifier|private
name|ResourceInfo
name|resourceInfo
decl_stmt|;
specifier|public
name|HTraceProvider
parameter_list|()
block|{
name|this
argument_list|(
name|NeverSampler
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HTraceProvider
parameter_list|(
specifier|final
name|Sampler
argument_list|<
name|?
argument_list|>
name|sampler
parameter_list|)
block|{
name|super
argument_list|(
name|sampler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|filter
parameter_list|(
specifier|final
name|ContainerRequestContext
name|requestContext
parameter_list|)
throws|throws
name|IOException
block|{
name|TraceScope
name|scope
init|=
name|super
operator|.
name|startTraceSpan
argument_list|(
name|requestContext
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|requestContext
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|scope
operator|!=
literal|null
condition|)
block|{
name|requestContext
operator|.
name|setProperty
argument_list|(
name|TRACE_SPAN
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|filter
parameter_list|(
specifier|final
name|ContainerRequestContext
name|requestContext
parameter_list|,
specifier|final
name|ContainerResponseContext
name|responseContext
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|stopTraceSpan
argument_list|(
name|requestContext
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|responseContext
operator|.
name|getHeaders
argument_list|()
argument_list|,
operator|(
name|TraceScope
operator|)
name|requestContext
operator|.
name|getProperty
argument_list|(
name|TRACE_SPAN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isAsyncResponse
parameter_list|()
block|{
for|for
control|(
specifier|final
name|Annotation
index|[]
name|annotations
range|:
name|resourceInfo
operator|.
name|getResourceMethod
argument_list|()
operator|.
name|getParameterAnnotations
argument_list|()
control|)
block|{
for|for
control|(
specifier|final
name|Annotation
name|annotation
range|:
name|annotations
control|)
block|{
if|if
condition|(
name|annotation
operator|.
name|annotationType
argument_list|()
operator|.
name|equals
argument_list|(
name|Suspended
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

