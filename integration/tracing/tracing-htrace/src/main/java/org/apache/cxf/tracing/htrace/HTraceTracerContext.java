begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tracing
operator|.
name|htrace
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tracing
operator|.
name|Traceable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tracing
operator|.
name|TracerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Sampler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Trace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|TraceScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|wrappers
operator|.
name|TraceCallable
import|;
end_import

begin_class
specifier|public
class|class
name|HTraceTracerContext
implements|implements
name|TracerContext
block|{
specifier|private
specifier|final
name|Sampler
argument_list|<
name|?
argument_list|>
name|sampler
decl_stmt|;
specifier|public
name|HTraceTracerContext
parameter_list|(
specifier|final
name|Sampler
argument_list|<
name|?
argument_list|>
name|sampler
parameter_list|)
block|{
name|this
operator|.
name|sampler
operator|=
name|sampler
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|TraceScope
name|startSpan
parameter_list|(
specifier|final
name|String
name|description
parameter_list|)
block|{
return|return
name|Trace
operator|.
name|startSpan
argument_list|(
name|description
argument_list|,
name|sampler
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Callable
argument_list|<
name|T
argument_list|>
name|wrap
parameter_list|(
specifier|final
name|String
name|desription
parameter_list|,
specifier|final
name|Traceable
argument_list|<
name|T
argument_list|>
name|traceable
parameter_list|)
block|{
specifier|final
name|Callable
argument_list|<
name|T
argument_list|>
name|callable
init|=
operator|new
name|Callable
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|traceable
operator|.
name|call
argument_list|(
operator|new
name|HTraceTracerContext
argument_list|(
name|sampler
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// TODO: Replace with HTrace's wrap() method once the version with
comment|// callable and description becomes available.
if|if
condition|(
name|Trace
operator|.
name|isTracing
argument_list|()
condition|)
block|{
return|return
operator|new
name|TraceCallable
argument_list|<
name|T
argument_list|>
argument_list|(
name|Trace
operator|.
name|currentSpan
argument_list|()
argument_list|,
name|callable
argument_list|,
name|desription
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|callable
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|annotate
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|Trace
operator|.
name|addKVAnnotation
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|annotate
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|annotate
argument_list|(
name|key
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
name|value
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|timeline
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|Trace
operator|.
name|addTimelineAnnotation
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

