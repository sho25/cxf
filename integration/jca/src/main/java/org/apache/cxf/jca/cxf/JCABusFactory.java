begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|BootstrapContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|work
operator|.
name|Work
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|work
operator|.
name|WorkManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|core
operator|.
name|resourceadapter
operator|.
name|ResourceAdapterInternalException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|core
operator|.
name|resourceadapter
operator|.
name|UriHandlerInit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|servant
operator|.
name|EJBEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|servant
operator|.
name|EJBServantConfig
import|;
end_import

begin_class
specifier|public
class|class
name|JCABusFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JCABusFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|JCABusFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Server
argument_list|>
name|servantsCache
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|ClassLoader
name|appserverClassLoader
decl_stmt|;
specifier|private
name|ManagedConnectionFactoryImpl
name|mcf
decl_stmt|;
specifier|private
name|Object
name|raBootstrapContext
decl_stmt|;
specifier|public
name|JCABusFactory
parameter_list|(
name|ManagedConnectionFactoryImpl
name|aMcf
parameter_list|)
block|{
name|this
operator|.
name|mcf
operator|=
name|aMcf
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|init
parameter_list|()
throws|throws
name|ResourceException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing the CXF Bus ..."
argument_list|)
expr_stmt|;
operator|new
name|UriHandlerInit
argument_list|()
expr_stmt|;
name|ClassLoader
name|original
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|ClassLoader
name|cl
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
comment|// ensure resourceadapter: url handler can be found by URLFactory
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|cl
argument_list|)
expr_stmt|;
comment|//TODO Check for the managed connection factory properties
comment|//TODO We may need get the configuration file from properties
name|BusFactory
name|bf
init|=
name|BusFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|bus
operator|=
name|bf
operator|.
name|createBus
argument_list|()
expr_stmt|;
name|initializeServants
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceAdapterInternalException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceAdapterInternalException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"FAIL_TO_INITIALIZE_JCABUSFACTORY"
argument_list|,
name|BUNDLE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|initializeServants
parameter_list|()
throws|throws
name|ResourceException
block|{
if|if
condition|(
name|isMonitorEJBServicePropertiesEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ejb service properties auto-detect enabled. "
argument_list|)
expr_stmt|;
name|startPropertiesMonitorWorker
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|URL
name|propsUrl
init|=
name|mcf
operator|.
name|getEJBServicePropertiesURLInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|propsUrl
operator|!=
literal|null
condition|)
block|{
name|initializeServantsFromProperties
argument_list|(
name|loadProperties
argument_list|(
name|propsUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|initializeServantsFromProperties
parameter_list|(
name|Properties
name|ejbServants
parameter_list|)
throws|throws
name|ResourceException
block|{
name|deregisterServants
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing EJB endpoints from properties file..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Enumeration
argument_list|<
name|?
argument_list|>
name|keys
init|=
name|ejbServants
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|theJNDIName
init|=
operator|(
name|String
operator|)
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|ejbServants
operator|.
name|get
argument_list|(
name|theJNDIName
argument_list|)
decl_stmt|;
name|EJBServantConfig
name|config
init|=
operator|new
name|EJBServantConfig
argument_list|(
name|theJNDIName
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|EJBEndpoint
name|ejbEndpoint
init|=
operator|new
name|EJBEndpoint
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|ejbEndpoint
operator|.
name|setEjbServantBaseURL
argument_list|(
name|mcf
operator|.
name|getEJBServantBaseURL
argument_list|()
argument_list|)
expr_stmt|;
name|ejbEndpoint
operator|.
name|setWorkManager
argument_list|(
name|getWorkManager
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|servant
init|=
name|ejbEndpoint
operator|.
name|publish
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servantsCache
init|)
block|{
if|if
condition|(
name|servant
operator|!=
literal|null
condition|)
block|{
name|servantsCache
operator|.
name|add
argument_list|(
name|servant
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|ResourceException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"FAIL_TO_START_EJB_SERVANTS"
argument_list|,
name|BUNDLE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|startPropertiesMonitorWorker
parameter_list|()
throws|throws
name|ResourceException
block|{
name|Integer
name|pollIntervalInteger
init|=
name|mcf
operator|.
name|getEJBServicePropertiesPollInterval
argument_list|()
decl_stmt|;
name|int
name|pollInterval
init|=
name|pollIntervalInteger
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Ejb service properties poll interval is: ["
operator|+
name|pollInterval
operator|+
literal|" seconds]"
argument_list|)
expr_stmt|;
name|EJBServicePropertiesMonitorWorker
name|worker
init|=
operator|new
name|EJBServicePropertiesMonitorWorker
argument_list|(
name|pollInterval
argument_list|)
decl_stmt|;
if|if
condition|(
name|getWorkManager
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getWorkManager
argument_list|()
operator|.
name|startWork
argument_list|(
name|worker
argument_list|,
name|CXFWorkAdapter
operator|.
name|DEFAULT_START_TIME_OUT
argument_list|,
literal|null
argument_list|,
name|worker
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|worker
argument_list|)
decl_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isMonitorEJBServicePropertiesEnabled
parameter_list|()
throws|throws
name|ResourceException
block|{
name|boolean
name|retVal
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mcf
operator|.
name|getMonitorEJBServiceProperties
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|URL
name|url
init|=
name|mcf
operator|.
name|getEJBServicePropertiesURLInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceAdapterInternalException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"EJB_SERVANT_PROPERTIES_IS_NULL"
argument_list|,
name|BUNDLE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|retVal
operator|=
name|isFileURL
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
name|boolean
name|isFileURL
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
return|return
name|url
operator|!=
literal|null
operator|&&
literal|"file"
operator|.
name|equals
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|deregisterServants
parameter_list|(
name|Bus
name|aBus
parameter_list|)
block|{
synchronized|synchronized
init|(
name|servantsCache
init|)
block|{
for|for
control|(
name|Server
name|servant
range|:
name|servantsCache
control|)
block|{
comment|//REVISIT: seems using server.stop() doesn't release resource properly.
name|servant
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutdown the EJB Endpoint: "
operator|+
name|servant
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|servantsCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Properties
name|loadProperties
parameter_list|(
name|URL
name|propsUrl
parameter_list|)
throws|throws
name|ResourceException
block|{
name|Properties
name|props
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"loadProperties, url="
operator|+
name|propsUrl
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|istream
init|=
name|propsUrl
operator|.
name|openStream
argument_list|()
init|)
block|{
name|props
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|props
operator|.
name|load
argument_list|(
name|istream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ResourceAdapterInternalException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"FAIL_TO_LOAD_EJB_SERVANT_PROPERTIES"
argument_list|,
name|BUNDLE
argument_list|,
name|propsUrl
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|props
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Server
argument_list|>
name|getRegisteredServants
parameter_list|()
block|{
return|return
name|servantsCache
return|;
block|}
specifier|public
name|ClassLoader
name|getAppserverClassLoader
parameter_list|()
block|{
return|return
name|appserverClassLoader
return|;
block|}
specifier|public
name|void
name|setAppserverClassLoader
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|this
operator|.
name|appserverClassLoader
operator|=
name|classLoader
expr_stmt|;
block|}
specifier|public
name|Object
name|getBootstrapContext
parameter_list|()
block|{
return|return
name|raBootstrapContext
return|;
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|void
name|create
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|,
name|Object
name|context
parameter_list|)
throws|throws
name|ResourceException
block|{
name|this
operator|.
name|appserverClassLoader
operator|=
name|classLoader
expr_stmt|;
name|this
operator|.
name|raBootstrapContext
operator|=
name|context
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|private
class|class
name|EJBServicePropertiesMonitorWorker
extends|extends
name|CXFWorkAdapter
implements|implements
name|Work
block|{
specifier|private
name|long
name|previousModificationTime
decl_stmt|;
specifier|private
specifier|final
name|int
name|pollIntervalSeconds
decl_stmt|;
specifier|private
specifier|final
name|File
name|propsFile
decl_stmt|;
comment|//The release() method will be called on separate thread while the run() is processing.
specifier|private
specifier|volatile
name|boolean
name|continuing
init|=
literal|true
decl_stmt|;
name|EJBServicePropertiesMonitorWorker
parameter_list|(
name|int
name|pollInterval
parameter_list|)
throws|throws
name|ResourceException
block|{
name|pollIntervalSeconds
operator|=
name|pollInterval
expr_stmt|;
name|propsFile
operator|=
operator|new
name|File
argument_list|(
name|mcf
operator|.
name|getEJBServicePropertiesURLInstance
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
do|do
block|{
try|try
block|{
if|if
condition|(
name|isPropertiesFileModified
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ejbServicePropertiesFile modified, initializing/updating servants"
argument_list|)
expr_stmt|;
name|initializeServantsFromProperties
argument_list|(
name|loadProperties
argument_list|(
name|propsFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|pollIntervalSeconds
operator|*
literal|1000L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MonitorThread: failed to initialiseServantsFromProperties "
operator|+
literal|"with properties absolute path="
operator|+
name|propsFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|continuing
condition|)
do|;
block|}
specifier|public
name|void
name|release
parameter_list|()
block|{
name|this
operator|.
name|continuing
operator|=
literal|false
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isPropertiesFileModified
parameter_list|()
block|{
name|boolean
name|fileModified
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|propsFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|long
name|currentModificationTime
init|=
name|propsFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentModificationTime
operator|>
name|previousModificationTime
condition|)
block|{
name|previousModificationTime
operator|=
name|currentModificationTime
expr_stmt|;
name|fileModified
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|fileModified
return|;
block|}
block|}
comment|// for unit test
specifier|protected
name|void
name|setBootstrapContext
parameter_list|(
name|Object
name|ctx
parameter_list|)
block|{
name|raBootstrapContext
operator|=
name|ctx
expr_stmt|;
block|}
specifier|public
name|WorkManager
name|getWorkManager
parameter_list|()
block|{
if|if
condition|(
name|getBootstrapContext
argument_list|()
operator|instanceof
name|BootstrapContext
condition|)
block|{
name|BootstrapContext
name|context
init|=
operator|(
name|BootstrapContext
operator|)
name|getBootstrapContext
argument_list|()
decl_stmt|;
return|return
name|context
operator|.
name|getWorkManager
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

