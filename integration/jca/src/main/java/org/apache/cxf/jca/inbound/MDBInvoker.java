begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|inbound
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|UnavailableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|endpoint
operator|.
name|MessageEndpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|endpoint
operator|.
name|MessageEndpointFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
operator|.
name|AbstractInvoker
import|;
end_import

begin_comment
comment|/**  * An invoker that supports direct Message Driven Bean invocation.  * It get invoked in the context of the Message Driven Bean that  * activates the CXF service endpoint facade.  Applications that put  * service implementation inside the Message Driven Bean that activates  * the inbound endpoint facade should choose this invoker.  It is  * more straightforward and faster than {@link DispatchMBDInvoker} but  * it requires to modify resource adapter's deployment descriptor (ra.xml)  * as the<messaging-type> needs to be set to the Service Endpoint Interface  * (SEI) class.  */
end_comment

begin_class
specifier|public
class|class
name|MDBInvoker
extends|extends
name|AbstractInvoker
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|MDBInvoker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ATTEMPTS
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|RETRY_SLEEP
init|=
literal|2000
decl_stmt|;
specifier|private
specifier|final
name|MessageEndpointFactory
name|endpointFactory
decl_stmt|;
comment|/**      * @param messageEndpoint      */
specifier|public
name|MDBInvoker
parameter_list|(
name|MessageEndpointFactory
name|factory
parameter_list|)
block|{
name|endpointFactory
operator|=
name|factory
expr_stmt|;
block|}
comment|/**      * @return the messageEndpoint      */
specifier|public
name|MessageEndpoint
name|getMessageEndpoint
parameter_list|()
block|{
return|return
name|createMessageEndpoint
argument_list|()
return|;
block|}
specifier|protected
name|void
name|releaseEndpoint
parameter_list|(
name|MessageEndpoint
name|mep
parameter_list|)
block|{
name|mep
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getServiceObject
parameter_list|(
name|Exchange
name|context
parameter_list|)
block|{
return|return
name|getMessageEndpoint
argument_list|()
return|;
block|}
specifier|public
name|void
name|releaseServiceObject
parameter_list|(
specifier|final
name|Exchange
name|context
parameter_list|,
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|MessageEndpoint
condition|)
block|{
name|MessageEndpoint
name|mep
init|=
operator|(
name|MessageEndpoint
operator|)
name|obj
decl_stmt|;
name|releaseEndpoint
argument_list|(
name|mep
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Invokes endpoint factory to create message endpoint (event driven bean).      * It will retry if the event driven bean is not yet available.      */
specifier|private
name|MessageEndpoint
name|createMessageEndpoint
parameter_list|()
block|{
name|MessageEndpoint
name|ep
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_ATTEMPTS
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|ep
operator|=
name|endpointFactory
operator|.
name|createEndpoint
argument_list|(
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|UnavailableException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Target endpoint activation in progress.  Will retry."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|RETRY_SLEEP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
return|return
name|ep
return|;
block|}
block|}
end_class

end_unit

