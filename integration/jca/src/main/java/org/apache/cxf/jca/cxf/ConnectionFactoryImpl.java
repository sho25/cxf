begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|Referenceable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ConnectionManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ManagedConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ManagedConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|connector
operator|.
name|CXFConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|connector
operator|.
name|CXFConnectionParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|core
operator|.
name|resourceadapter
operator|.
name|ResourceAdapterInternalException
import|;
end_import

begin_class
specifier|public
class|class
name|ConnectionFactoryImpl
implements|implements
name|CXFConnectionFactory
implements|,
name|Referenceable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3664687493256918163L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|ConnectionFactoryImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ManagedConnectionFactory
name|managedConnectionFactory
decl_stmt|;
specifier|private
name|ConnectionManager
name|connectionManager
decl_stmt|;
specifier|private
name|Reference
name|reference
decl_stmt|;
specifier|public
name|ConnectionFactoryImpl
parameter_list|(
name|ManagedConnectionFactory
name|aMCF
parameter_list|,
name|ConnectionManager
name|aCM
parameter_list|)
block|{
name|managedConnectionFactory
operator|=
name|aMCF
expr_stmt|;
name|connectionManager
operator|=
name|aCM
expr_stmt|;
block|}
specifier|public
name|void
name|setReference
parameter_list|(
name|Reference
name|ref
parameter_list|)
block|{
name|reference
operator|=
name|ref
expr_stmt|;
block|}
specifier|public
name|Reference
name|getReference
parameter_list|()
throws|throws
name|NamingException
block|{
return|return
name|reference
return|;
block|}
specifier|public
name|Object
name|getBus
parameter_list|()
block|{
return|return
operator|(
operator|(
name|ManagedConnectionFactoryImpl
operator|)
name|managedConnectionFactory
operator|)
operator|.
name|getBus
argument_list|()
return|;
block|}
specifier|public
name|Object
name|getConnection
parameter_list|(
name|CXFConnectionParam
name|param
parameter_list|)
throws|throws
name|ResourceException
block|{
if|if
condition|(
name|param
operator|.
name|getInterface
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceAdapterInternalException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"INTERFACE_IS_NULL"
argument_list|,
name|BUNDLE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|param
operator|.
name|getInterface
argument_list|()
operator|.
name|isInterface
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceAdapterInternalException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"IS_NOT_AN_INTERFACE"
argument_list|,
name|BUNDLE
argument_list|,
name|param
operator|.
name|getInterface
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|CXFConnectionRequestInfo
name|reqInfo
init|=
operator|(
name|CXFConnectionRequestInfo
operator|)
name|param
decl_stmt|;
if|if
condition|(
name|connectionManager
operator|==
literal|null
condition|)
block|{
comment|// non-managed, null Subject
name|ManagedConnection
name|connection
init|=
name|managedConnectionFactory
operator|.
name|createManagedConnection
argument_list|(
literal|null
argument_list|,
name|reqInfo
argument_list|)
decl_stmt|;
return|return
name|connection
operator|.
name|getConnection
argument_list|(
literal|null
argument_list|,
name|reqInfo
argument_list|)
return|;
block|}
return|return
name|connectionManager
operator|.
name|allocateConnection
argument_list|(
name|managedConnectionFactory
argument_list|,
name|reqInfo
argument_list|)
return|;
block|}
block|}
end_class

end_unit

