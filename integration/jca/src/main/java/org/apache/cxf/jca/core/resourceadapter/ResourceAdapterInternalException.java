begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|core
operator|.
name|resourceadapter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
class|class
name|ResourceAdapterInternalException
extends|extends
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ResourceAdapterInternalException
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|6769505138041263456L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REASON_PREFIX
init|=
literal|", reason: "
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ResourceAdapterInternalException
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ResourceAdapterInternalException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|this
argument_list|(
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResourceAdapterInternalException
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|msg
operator|+
name|ResourceAdapterInternalException
operator|.
name|optionalReasonFromCause
argument_list|(
name|cause
argument_list|)
argument_list|)
expr_stmt|;
name|setCause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|LOGGER
operator|.
name|getLevel
argument_list|()
operator|&&
name|LOGGER
operator|.
name|getLevel
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<
name|Level
operator|.
name|INFO
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|cause
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|LOGGER
operator|.
name|warning
argument_list|(
name|cause
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|optionalReasonFromCause
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|String
name|reason
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cause
operator|instanceof
name|InvocationTargetException
condition|)
block|{
name|reason
operator|=
name|REASON_PREFIX
operator|+
operator|(
operator|(
name|InvocationTargetException
operator|)
name|cause
operator|)
operator|.
name|getTargetException
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|reason
operator|=
name|REASON_PREFIX
operator|+
name|cause
expr_stmt|;
block|}
block|}
return|return
name|reason
return|;
block|}
specifier|private
name|void
name|setCause
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
if|if
condition|(
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|cause
operator|instanceof
name|InvocationTargetException
operator|&&
operator|(
operator|(
operator|(
name|InvocationTargetException
operator|)
name|cause
operator|)
operator|.
name|getTargetException
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|initCause
argument_list|(
operator|(
operator|(
name|InvocationTargetException
operator|)
name|cause
operator|)
operator|.
name|getTargetException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initCause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|Exception
name|getLinkedException
parameter_list|()
block|{
name|Exception
name|linkedEx
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getCause
argument_list|()
operator|instanceof
name|Exception
condition|)
block|{
name|linkedEx
operator|=
operator|(
name|Exception
operator|)
name|getCause
argument_list|()
expr_stmt|;
block|}
return|return
name|linkedEx
return|;
block|}
block|}
end_class

end_unit

