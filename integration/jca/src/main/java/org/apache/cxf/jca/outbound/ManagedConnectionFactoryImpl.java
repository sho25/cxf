begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|outbound
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ConnectionManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ConnectionRequestInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ManagedConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ManagedConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ResourceAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ResourceAdapterAssociation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|work
operator|.
name|WorkManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ObjectUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|core
operator|.
name|logging
operator|.
name|LoggerHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
operator|.
name|ResourceAdapterImpl
import|;
end_import

begin_class
specifier|public
class|class
name|ManagedConnectionFactoryImpl
implements|implements
name|ManagedConnectionFactory
implements|,
name|ResourceAdapterAssociation
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|5294527634981120642L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ManagedConnectionFactoryImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|busConfigURL
decl_stmt|;
specifier|private
name|PrintWriter
name|printWriter
decl_stmt|;
specifier|private
name|ResourceAdapter
name|resourceAdapter
decl_stmt|;
specifier|private
name|ConnectionManager
name|defaultConnectionManager
init|=
operator|new
name|DefaultConnectionManager
argument_list|()
decl_stmt|;
static|static
block|{
comment|// first use of log, default init if necessary
name|LoggerHelper
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
comment|/* --------------------------------------------------------------------      *                           Bean Properties      */
specifier|public
name|void
name|setBusConfigURL
parameter_list|(
name|String
name|busConfigURL
parameter_list|)
block|{
name|this
operator|.
name|busConfigURL
operator|=
name|busConfigURL
expr_stmt|;
block|}
specifier|public
name|String
name|getBusConfigURL
parameter_list|()
block|{
return|return
name|busConfigURL
return|;
block|}
comment|/* --------------------------------------------------------------------      *                    ManagedConnectionFactory methods      */
specifier|public
name|Object
name|createConnectionFactory
parameter_list|()
throws|throws
name|ResourceException
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|finer
argument_list|(
literal|"Create connection factory for unmanaged connections"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ConnectionFactoryImpl
argument_list|(
name|this
argument_list|,
name|defaultConnectionManager
argument_list|)
return|;
block|}
specifier|public
name|Object
name|createConnectionFactory
parameter_list|(
name|ConnectionManager
name|connMgr
parameter_list|)
throws|throws
name|ResourceException
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|finer
argument_list|(
literal|"Create connection factory by app server connMgr "
operator|+
name|connMgr
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ConnectionFactoryImpl
argument_list|(
name|this
argument_list|,
name|connMgr
operator|==
literal|null
condition|?
name|defaultConnectionManager
else|:
name|connMgr
argument_list|)
return|;
block|}
specifier|public
name|ManagedConnection
name|createManagedConnection
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|ConnectionRequestInfo
name|connReqInfo
parameter_list|)
throws|throws
name|ResourceException
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|finer
argument_list|(
literal|"Create managed connection subject="
operator|+
name|subject
operator|+
literal|"connReqInfo="
operator|+
name|connReqInfo
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ManagedConnectionImpl
argument_list|(
name|this
argument_list|,
name|connReqInfo
argument_list|,
name|subject
argument_list|)
return|;
block|}
comment|// hashCode method is required by JCA 1.5 because on properties
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|retval
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|busConfigURL
operator|!=
literal|null
condition|)
block|{
name|retval
operator|+=
name|busConfigURL
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|// equals method is required by JCA 1.5 because on properties
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ManagedConnectionFactoryImpl
name|that
init|=
operator|(
name|ManagedConnectionFactoryImpl
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|ObjectUtils
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getBusConfigURL
argument_list|()
argument_list|,
name|busConfigURL
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|PrintWriter
name|getLogWriter
parameter_list|()
throws|throws
name|ResourceException
block|{
return|return
name|printWriter
return|;
block|}
specifier|public
name|void
name|setLogWriter
parameter_list|(
specifier|final
name|PrintWriter
name|aPrintWriter
parameter_list|)
throws|throws
name|ResourceException
block|{
if|if
condition|(
name|aPrintWriter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"NULL_LOG_WRITER"
argument_list|)
throw|;
block|}
name|printWriter
operator|=
name|aPrintWriter
expr_stmt|;
name|LoggerHelper
operator|.
name|initializeLoggingOnWriter
argument_list|(
name|printWriter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ManagedConnection
name|matchManagedConnections
parameter_list|(
name|Set
name|mcs
parameter_list|,
name|Subject
name|subject
parameter_list|,
name|ConnectionRequestInfo
name|reqInfo
parameter_list|)
throws|throws
name|ResourceException
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|finer
argument_list|(
literal|"match connections: set="
operator|+
name|mcs
operator|+
literal|", subject="
operator|+
name|subject
operator|+
literal|" reqInfo="
operator|+
name|reqInfo
argument_list|)
expr_stmt|;
block|}
comment|// find the first managed connection that matches the bus and request info
name|Iterator
name|iter
init|=
name|mcs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|obj
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ManagedConnectionImpl
operator|)
condition|)
block|{
continue|continue;
block|}
name|ManagedConnectionImpl
name|mc
init|=
operator|(
name|ManagedConnectionImpl
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|ObjectUtils
operator|.
name|equals
argument_list|(
name|busConfigURL
argument_list|,
name|mc
operator|.
name|getManagedConnectionFactoryImpl
argument_list|()
operator|.
name|getBusConfigURL
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|ObjectUtils
operator|.
name|equals
argument_list|(
name|reqInfo
argument_list|,
name|mc
operator|.
name|getRequestInfo
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|finer
argument_list|(
literal|"found matched connection "
operator|+
name|mc
argument_list|)
expr_stmt|;
block|}
return|return
name|mc
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/* --------------------------------------------------------------------      *                      ResourceAdapterAssociation methods      */
specifier|public
name|ResourceAdapter
name|getResourceAdapter
parameter_list|()
block|{
return|return
name|resourceAdapter
return|;
block|}
specifier|public
name|void
name|setResourceAdapter
parameter_list|(
name|ResourceAdapter
name|ra
parameter_list|)
throws|throws
name|ResourceException
block|{
name|resourceAdapter
operator|=
name|ra
expr_stmt|;
block|}
comment|/* --------------------------------------------------------------------      *                      public methods      */
specifier|public
name|WorkManager
name|getWorkManager
parameter_list|()
block|{
if|if
condition|(
name|resourceAdapter
operator|instanceof
name|ResourceAdapterImpl
condition|)
block|{
return|return
operator|(
operator|(
name|ResourceAdapterImpl
operator|)
name|resourceAdapter
operator|)
operator|.
name|getBootstrapContext
argument_list|()
operator|.
name|getWorkManager
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

