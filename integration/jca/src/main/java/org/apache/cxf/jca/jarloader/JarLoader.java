begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|jarloader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_comment
comment|/**  * load jars to memory from an archive  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|JarLoader
block|{
comment|// map of all the archives we now about
comment|// this keys to this map are full distinguished names of the fromat
comment|// someOuterArchive!/someInnerArchive!/....
comment|// the values of the archives map are maps of entry names to bytes
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|archives
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|int
name|CHUNK_SIZE
init|=
literal|4096
decl_stmt|;
specifier|static
specifier|final
name|int
name|MAX_CHUNK_SIZE
init|=
name|CHUNK_SIZE
operator|*
literal|16
decl_stmt|;
specifier|private
name|JarLoader
parameter_list|()
block|{     }
specifier|public
specifier|static
name|byte
index|[]
name|getBytesFromInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBytesFromInputStream
argument_list|(
name|is
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|getJarContents
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|archives
operator|.
name|containsKey
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|loadArchive
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|archives
operator|.
name|get
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|loadArchive
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nameComponents
init|=
name|tokenizePathComponents
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameComponents
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|archives
operator|.
name|containsKey
argument_list|(
name|buildPartialName
argument_list|(
name|nameComponents
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|readArchive
argument_list|(
name|buildPartialName
argument_list|(
name|nameComponents
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
comment|// not the root archive so there is a parentMap with a reference to the
comment|// entry as raw byte array.
comment|// This byte array has now been exploded into a Map so the raw bytes are
comment|// no longer needed, replace the entry with the exploded Map
comment|//
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parentMap
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|archives
operator|.
name|get
argument_list|(
name|buildPartialName
argument_list|(
name|nameComponents
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|archiveMap
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|archives
operator|.
name|get
argument_list|(
name|buildPartialName
argument_list|(
name|nameComponents
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|parentMap
operator|.
name|put
argument_list|(
name|nameComponents
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|archiveMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|tokenizePathComponents
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|tmpPath
init|=
operator|new
name|String
argument_list|(
name|path
argument_list|)
decl_stmt|;
while|while
condition|(
name|tmpPath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|tmpPath
operator|.
name|indexOf
argument_list|(
literal|"!/"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
name|tmpPath
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|tokens
operator|.
name|add
argument_list|(
name|tmpPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|tmpPath
operator|.
name|indexOf
argument_list|(
literal|"!/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpPath
operator|=
name|tmpPath
operator|.
name|substring
argument_list|(
name|tmpPath
operator|.
name|indexOf
argument_list|(
literal|"!/"
argument_list|)
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tokens
return|;
block|}
specifier|private
specifier|static
name|String
name|buildPartialName
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|nameComponents
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|nameComponents
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"!/"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getRootArchiveName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|index
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|"file:"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|"!/"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|indexOf
argument_list|(
literal|"!/"
argument_list|)
argument_list|)
return|;
block|}
return|return
name|name
return|;
block|}
specifier|private
specifier|static
name|void
name|readArchive
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nameComponents
init|=
name|tokenizePathComponents
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nameComponents
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|map
operator|=
name|readZipStream
argument_list|(
operator|(
operator|new
name|URL
argument_list|(
name|getRootArchiveName
argument_list|(
name|name
argument_list|)
argument_list|)
operator|)
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|parentMap
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|archives
operator|.
name|get
argument_list|(
name|buildPartialName
argument_list|(
name|nameComponents
argument_list|,
name|nameComponents
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|(
name|byte
index|[]
operator|)
operator|(
name|parentMap
operator|.
name|get
argument_list|(
name|nameComponents
operator|.
name|get
argument_list|(
name|nameComponents
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|bytes
condition|)
block|{
comment|// unexpected, classpath entry in error, referenced jar is not in the archive
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Enclosing archive "
operator|+
name|buildPartialName
argument_list|(
name|nameComponents
argument_list|,
name|nameComponents
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|" has no entry named:"
operator|+
name|nameComponents
operator|.
name|get
argument_list|(
name|nameComponents
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|", error in archive classpath"
argument_list|)
throw|;
block|}
name|map
operator|=
name|readZipStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|archives
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|readZipStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|ZipInputStream
name|zis
init|=
operator|new
name|ZipInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ZipEntry
name|ze
init|=
name|zis
operator|.
name|getNextEntry
argument_list|()
init|;
name|ze
operator|!=
literal|null
condition|;
name|ze
operator|=
name|zis
operator|.
name|getNextEntry
argument_list|()
control|)
block|{
if|if
condition|(
name|ze
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|ze
operator|.
name|getName
argument_list|()
argument_list|,
name|ze
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|bytes
init|=
name|getBytesFromInputStream
argument_list|(
name|zis
argument_list|,
name|ze
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ze
operator|.
name|getName
argument_list|()
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|getBytesFromInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|chunk
init|=
operator|new
name|byte
index|[
operator|(
operator|(
name|size
operator|>
name|CHUNK_SIZE
operator|)
operator|&&
operator|(
name|size
operator|<
name|MAX_CHUNK_SIZE
operator|)
operator|)
condition|?
operator|(
name|int
operator|)
name|size
else|:
name|CHUNK_SIZE
index|]
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|is
operator|.
name|read
argument_list|(
name|chunk
argument_list|,
literal|0
argument_list|,
name|chunk
operator|.
name|length
argument_list|)
init|;
name|i
operator|!=
operator|-
literal|1
condition|;
name|i
operator|=
name|is
operator|.
name|read
argument_list|(
name|chunk
argument_list|,
literal|0
argument_list|,
name|chunk
operator|.
name|length
argument_list|)
control|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|chunk
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

