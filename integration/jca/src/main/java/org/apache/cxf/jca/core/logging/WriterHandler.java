begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|core
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|ErrorManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|LogRecord
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|SimpleFormatter
import|;
end_import

begin_class
specifier|public
class|class
name|WriterHandler
extends|extends
name|Handler
block|{
specifier|private
name|boolean
name|doneHeader
decl_stmt|;
specifier|private
name|Writer
name|writer
decl_stmt|;
specifier|public
name|WriterHandler
parameter_list|(
name|Writer
name|inWriter
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setLevel
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|setFilter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setFormatter
argument_list|(
operator|new
name|SimpleFormatter
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|=
name|inWriter
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|publish
parameter_list|(
specifier|final
name|LogRecord
name|record
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isLoggable
argument_list|(
name|record
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|msg
decl_stmt|;
try|try
block|{
name|msg
operator|=
name|getFormatter
argument_list|()
operator|.
name|format
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// We don't want to throw an exception here, but we
comment|// report the exception to any registered ErrorManager.
name|reportError
argument_list|(
literal|null
argument_list|,
name|ex
argument_list|,
name|ErrorManager
operator|.
name|FORMAT_FAILURE
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|doneHeader
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|getFormatter
argument_list|()
operator|.
name|getHead
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|doneHeader
operator|=
literal|true
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// We don't want to throw an exception here, but we
comment|// report the exception to any registered ErrorManager.
name|reportError
argument_list|(
literal|null
argument_list|,
name|ex
argument_list|,
name|ErrorManager
operator|.
name|WRITE_FAILURE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isLoggable
parameter_list|(
specifier|final
name|LogRecord
name|record
parameter_list|)
block|{
if|if
condition|(
name|writer
operator|==
literal|null
operator|||
name|record
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|super
operator|.
name|isLoggable
argument_list|(
name|record
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|flush
parameter_list|()
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// We don't want to throw an exception here, but we
comment|// report the exception to any registered ErrorManager.
name|reportError
argument_list|(
literal|null
argument_list|,
name|ex
argument_list|,
name|ErrorManager
operator|.
name|FLUSH_FAILURE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|flushAndClose
parameter_list|()
throws|throws
name|SecurityException
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|doneHeader
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|getFormatter
argument_list|()
operator|.
name|getHead
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|doneHeader
operator|=
literal|true
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|getFormatter
argument_list|()
operator|.
name|getTail
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// We don't want to throw an exception here, but we
comment|// report the exception to any registered ErrorManager.
name|reportError
argument_list|(
literal|null
argument_list|,
name|ex
argument_list|,
name|ErrorManager
operator|.
name|CLOSE_FAILURE
argument_list|)
expr_stmt|;
block|}
name|writer
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|SecurityException
block|{
name|flushAndClose
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

