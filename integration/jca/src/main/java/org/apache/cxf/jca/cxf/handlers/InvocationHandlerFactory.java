begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|core
operator|.
name|resourceadapter
operator|.
name|ResourceAdapterInternalException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
operator|.
name|CXFInvocationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
operator|.
name|CXFInvocationHandlerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
operator|.
name|CXFManagedConnection
import|;
end_import

begin_class
specifier|public
class|class
name|InvocationHandlerFactory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|JCA_HANDLERS_RESOURCE
init|=
literal|"META-INF/cxf-jca-handlers.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|InvocationHandlerFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|handlerChainTypes
decl_stmt|;
specifier|private
specifier|final
name|Bus
name|bus
decl_stmt|;
specifier|private
specifier|final
name|CXFManagedConnection
name|managedConnection
decl_stmt|;
specifier|public
name|InvocationHandlerFactory
parameter_list|(
name|Bus
name|b
parameter_list|,
name|CXFManagedConnection
name|connection
parameter_list|)
throws|throws
name|ResourceAdapterInternalException
block|{
name|this
operator|.
name|bus
operator|=
name|b
expr_stmt|;
name|this
operator|.
name|managedConnection
operator|=
name|connection
expr_stmt|;
try|try
block|{
name|handlerChainTypes
operator|=
name|getHandlerChainDefinition
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ResourceAdapterInternalException
name|raie
init|=
operator|new
name|ResourceAdapterInternalException
argument_list|(
literal|"unable to load handler chain definition"
argument_list|,
name|ex
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|raie
throw|;
block|}
block|}
specifier|public
name|CXFInvocationHandler
name|createHandlers
parameter_list|(
name|Object
name|target
parameter_list|,
name|Subject
name|subject
parameter_list|)
throws|throws
name|ResourceAdapterInternalException
block|{
name|CXFInvocationHandler
name|first
init|=
literal|null
decl_stmt|;
name|CXFInvocationHandler
name|last
init|=
literal|null
decl_stmt|;
comment|// Create data member
name|CXFInvocationHandlerData
name|data
init|=
operator|new
name|CXFInvocationHandlerDataImpl
argument_list|()
decl_stmt|;
name|data
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|data
operator|.
name|setManagedConnection
argument_list|(
name|managedConnection
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|data
operator|.
name|setTarget
argument_list|(
name|target
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|handlerChainTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|CXFInvocationHandler
name|newHandler
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|newHandlerConstructor
init|=
name|handlerChainTypes
index|[
name|i
index|]
operator|.
name|getDeclaredConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|CXFInvocationHandlerData
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|newHandler
operator|=
operator|(
name|CXFInvocationHandler
operator|)
name|newHandlerConstructor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|data
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ResourceAdapterInternalException
name|raie
init|=
operator|new
name|ResourceAdapterInternalException
argument_list|(
literal|"error creating InvocationHandler: "
operator|+
name|handlerChainTypes
index|[
name|i
index|]
argument_list|,
name|ex
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
name|raie
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|raie
throw|;
block|}
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|last
operator|.
name|setNext
argument_list|(
name|newHandler
argument_list|)
expr_stmt|;
name|last
operator|=
name|newHandler
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
name|newHandler
expr_stmt|;
name|last
operator|=
name|newHandler
expr_stmt|;
block|}
block|}
return|return
name|first
return|;
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|getHandlerChainDefinition
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|handlersMap
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|urls
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResources
argument_list|(
name|JCA_HANDLERS_RESOURCE
argument_list|)
decl_stmt|;
while|while
condition|(
name|urls
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|URL
name|url
init|=
name|urls
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|loadProperties
argument_list|(
name|handlersMap
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|handlers
init|=
operator|new
name|Class
index|[
name|handlersMap
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|String
index|[]
name|handlerClasses
init|=
operator|new
name|String
index|[
name|handlersMap
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|handlersMap
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|handlerClasses
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|handlerClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"reading handler class: "
operator|+
name|handlerClasses
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|handlers
index|[
name|i
index|]
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|handlerClasses
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|handlers
return|;
block|}
specifier|private
name|void
name|loadProperties
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|handlersMap
parameter_list|,
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|load
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|keys
init|=
name|p
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|keys
operator|.
name|next
argument_list|()
decl_stmt|;
name|handlersMap
operator|.
name|put
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|key
argument_list|)
argument_list|,
name|p
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

