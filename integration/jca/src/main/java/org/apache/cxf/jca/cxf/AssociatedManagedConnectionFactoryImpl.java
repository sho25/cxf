begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ConnectionManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ResourceAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ResourceAdapterAssociation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|core
operator|.
name|resourceadapter
operator|.
name|ResourceAdapterInternalException
import|;
end_import

begin_class
specifier|public
class|class
name|AssociatedManagedConnectionFactoryImpl
extends|extends
name|ManagedConnectionFactoryImpl
implements|implements
name|ResourceAdapterAssociation
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AssociatedManagedConnectionFactoryImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ResourceAdapter
name|ra
decl_stmt|;
specifier|public
name|AssociatedManagedConnectionFactoryImpl
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|AssociatedManagedConnectionFactoryImpl
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|createConnectionFactory
parameter_list|(
name|ConnectionManager
name|connMgr
parameter_list|)
throws|throws
name|ResourceException
block|{
name|Object
name|connFactory
init|=
name|super
operator|.
name|createConnectionFactory
argument_list|(
name|connMgr
argument_list|)
decl_stmt|;
name|registerBus
argument_list|()
expr_stmt|;
return|return
name|connFactory
return|;
block|}
specifier|public
name|void
name|setResourceAdapter
parameter_list|(
name|ResourceAdapter
name|aRA
parameter_list|)
throws|throws
name|ResourceException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Associate Resource Adapter with ManagedConnectionFactory by appserver. ra = "
operator|+
name|ra
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|aRA
operator|instanceof
name|ResourceAdapterImpl
operator|)
condition|)
block|{
throw|throw
operator|new
name|ResourceAdapterInternalException
argument_list|(
literal|"ResourceAdapter is not correct, it should be instance of ResourceAdapterImpl"
argument_list|)
throw|;
block|}
name|this
operator|.
name|ra
operator|=
name|aRA
expr_stmt|;
name|mergeResourceAdapterProps
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ResourceAdapter
name|getResourceAdapter
parameter_list|()
block|{
return|return
name|ra
return|;
block|}
comment|/**      * If outbound-resourceAdapter and the resourceAdapter has same property,      * the outbound-resourceAdapter property's value would take precedence.      */
specifier|protected
name|void
name|mergeResourceAdapterProps
parameter_list|()
block|{
name|Properties
name|raProps
init|=
operator|(
operator|(
name|ResourceAdapterImpl
operator|)
name|ra
operator|)
operator|.
name|getPluginProps
argument_list|()
decl_stmt|;
name|Properties
name|props
init|=
name|getPluginProps
argument_list|()
decl_stmt|;
name|Enumeration
name|raPropsEnum
init|=
name|raProps
operator|.
name|propertyNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|raPropsEnum
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|raPropsEnum
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|props
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|setProperty
argument_list|(
name|key
argument_list|,
name|raProps
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"ManagedConnectionFactory's props already contain ["
operator|+
name|key
operator|+
literal|"]. No need to merge"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|registerBus
parameter_list|()
throws|throws
name|ResourceException
block|{
if|if
condition|(
name|ra
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceAdapterInternalException
argument_list|(
literal|"ResourceAdapter can not be null"
argument_list|)
throw|;
block|}
operator|(
operator|(
name|ResourceAdapterImpl
operator|)
name|ra
operator|)
operator|.
name|registerBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Object
name|getBootstrapContext
parameter_list|()
block|{
return|return
operator|(
operator|(
name|ResourceAdapterImpl
operator|)
name|ra
operator|)
operator|.
name|getBootstrapContext
argument_list|()
return|;
block|}
comment|//Explicit override these two methods,
comment|//otherwise when deploy rar to weblogic9.1, it would complaint about this.
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
end_class

end_unit

