begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|work
operator|.
name|WorkEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|work
operator|.
name|WorkListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|CXFWorkAdapter
implements|implements
name|WorkListener
block|{
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_START_TIME_OUT
init|=
literal|1
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 1 minute
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|CXFWorkAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|void
name|workAccepted
parameter_list|(
name|WorkEvent
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"workAccepted: ["
operator|+
name|e
operator|.
name|getWork
argument_list|()
operator|+
literal|"], source is ["
operator|+
name|e
operator|.
name|getSource
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|workCompleted
parameter_list|(
name|WorkEvent
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"workCompleted: ["
operator|+
name|e
operator|.
name|getWork
argument_list|()
operator|+
literal|"], source is ["
operator|+
name|e
operator|.
name|getSource
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|workRejected
parameter_list|(
name|WorkEvent
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"workRejected: ["
operator|+
name|e
operator|.
name|getWork
argument_list|()
operator|+
literal|"], source is ["
operator|+
name|e
operator|.
name|getSource
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
literal|"root cause is:"
operator|+
name|e
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|getException
argument_list|()
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|workStarted
parameter_list|(
name|WorkEvent
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"workStarted: ["
operator|+
name|e
operator|.
name|getWork
argument_list|()
operator|+
literal|"], source is ["
operator|+
name|e
operator|.
name|getSource
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

