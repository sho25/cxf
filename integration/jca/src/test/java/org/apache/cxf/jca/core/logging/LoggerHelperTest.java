begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|core
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|LoggerHelperTest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TEST_LOGGER_NAME
init|=
literal|"test.logger"
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{     }
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{     }
annotation|@
name|Test
specifier|public
name|void
name|testEnableDisableConsoleLogging
parameter_list|()
block|{
name|Logger
name|rootLogger
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Handler
name|handler
decl_stmt|;
comment|/*Handler handler = LoggerHelper.getHandler(rootLogger, LoggerHelper.CONSOLE_HANDLER);         assertNotNull("default console appender is there", handler);*/
name|LoggerHelper
operator|.
name|enableConsoleLogging
argument_list|()
expr_stmt|;
name|handler
operator|=
name|LoggerHelper
operator|.
name|getHandler
argument_list|(
name|rootLogger
argument_list|,
name|LoggerHelper
operator|.
name|CONSOLE_HANDLER
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"default console appender is not there"
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|LoggerHelper
operator|.
name|disableConsoleLogging
argument_list|()
expr_stmt|;
name|handler
operator|=
name|LoggerHelper
operator|.
name|getHandler
argument_list|(
name|rootLogger
argument_list|,
name|LoggerHelper
operator|.
name|CONSOLE_HANDLER
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected appender after disable"
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSettingLogLevel
parameter_list|()
block|{
name|LoggerHelper
operator|.
name|setRootLoggerName
argument_list|(
name|TEST_LOGGER_NAME
argument_list|)
expr_stmt|;
name|LoggerHelper
operator|.
name|setLogLevel
argument_list|(
literal|"INFO"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect log level"
argument_list|,
literal|"INFO"
argument_list|,
name|LoggerHelper
operator|.
name|getLogLevel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"log level not set on IONA logger"
argument_list|,
literal|"INFO"
argument_list|,
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TEST_LOGGER_NAME
argument_list|)
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetWriter
parameter_list|()
block|{
comment|// setup an dummy writer
name|DummyWriter
name|writer
init|=
operator|new
name|DummyWriter
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"The DummyWriter init error"
argument_list|,
name|writer
operator|.
name|writed
argument_list|)
expr_stmt|;
name|LoggerHelper
operator|.
name|initializeLoggingOnWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|LoggerHelper
operator|.
name|setLogLevel
argument_list|(
literal|"INFO"
argument_list|)
expr_stmt|;
name|LoggerHelper
operator|.
name|getRootCXFLogger
argument_list|()
operator|.
name|severe
argument_list|(
literal|"Test String"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The DummyWriter didn't be setup"
argument_list|,
name|writer
operator|.
name|writed
argument_list|)
expr_stmt|;
block|}
class|class
name|DummyWriter
extends|extends
name|Writer
block|{
name|boolean
name|writed
decl_stmt|;
name|boolean
name|flushed
decl_stmt|;
name|boolean
name|closed
decl_stmt|;
specifier|public
name|void
name|write
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|writed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|flushed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

