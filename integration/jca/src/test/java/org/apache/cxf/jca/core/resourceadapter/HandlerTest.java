begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|core
operator|.
name|resourceadapter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|HandlerTest
block|{
name|Handler
name|h
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
name|h
operator|=
operator|new
name|Handler
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStreamToThisResource
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|urlpath
init|=
name|HandlerTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".class"
decl_stmt|;
name|String
name|urls
init|=
literal|"resourceadapter:"
operator|+
name|urlpath
decl_stmt|;
name|URL
name|res
init|=
operator|new
name|URL
argument_list|(
literal|null
argument_list|,
name|urls
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|h
operator|.
name|openConnection
argument_list|(
name|res
argument_list|)
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"stream is not null"
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStreamToNonExistantResourceThrows
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"some gobbledy rubbish/that/does/not/exist"
decl_stmt|;
name|String
name|urls
init|=
literal|"resourceadapter:"
operator|+
name|path
decl_stmt|;
name|URL
name|res
init|=
operator|new
name|URL
argument_list|(
literal|null
argument_list|,
name|urls
argument_list|,
name|h
argument_list|)
decl_stmt|;
try|try
block|{
name|h
operator|.
name|openConnection
argument_list|(
name|res
argument_list|)
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expect IOException on non existant url"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|String
name|msg
init|=
name|ioe
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Ex message has expected text, msg="
operator|+
name|msg
argument_list|,
name|msg
operator|.
name|indexOf
argument_list|(
name|path
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

