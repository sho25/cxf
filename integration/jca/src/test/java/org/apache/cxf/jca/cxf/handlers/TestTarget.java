begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_class
specifier|public
class|class
name|TestTarget
implements|implements
name|TestInterface
block|{
name|boolean
name|methodInvoked
decl_stmt|;
name|Method
name|lastMethod
decl_stmt|;
specifier|public
name|void
name|testMethod
parameter_list|()
block|{
try|try
block|{
name|methodInvoked
operator|=
literal|true
expr_stmt|;
name|lastMethod
operator|=
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"testMethod"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
name|methodInvoked
operator|=
literal|true
expr_stmt|;
name|lastMethod
operator|=
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"toString"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|"TestTarget"
return|;
comment|// don't delegate to super as this
comment|// calls hashCode which messes up the
comment|// test
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
try|try
block|{
name|methodInvoked
operator|=
literal|true
expr_stmt|;
name|lastMethod
operator|=
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"hashCode"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
try|try
block|{
name|methodInvoked
operator|=
literal|true
expr_stmt|;
name|lastMethod
operator|=
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"equals"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

