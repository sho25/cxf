begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ConnectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ManagedConnectionMetaData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ResourceAdapterInternalException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|security
operator|.
name|PasswordCredential
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|connector
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
operator|.
name|handlers
operator|.
name|ProxyInvocationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|ManagedConnectionImplTest
extends|extends
name|ManagedConnectionTestBase
block|{
specifier|protected
name|URL
name|wsdl
decl_stmt|;
specifier|protected
name|QName
name|serviceName
decl_stmt|;
specifier|protected
name|QName
name|portName
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testInstanceOfConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Instance of Connection"
argument_list|,
name|mci
operator|instanceof
name|Connection
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Connection
operator|)
name|mci
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetConnectionServiceGetPortThrows
parameter_list|()
throws|throws
name|Exception
block|{
name|cri
operator|=
operator|new
name|CXFConnectionRequestInfo
argument_list|(
name|Foo
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cri
operator|.
name|setAddress
argument_list|(
literal|"http://localhost:9000/soap"
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|mci
operator|.
name|getConnection
argument_list|(
name|subj
argument_list|,
name|cri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Foo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetConnectionWithNoWSDLInvokesCreateClientWithTwoParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|cri
operator|=
operator|new
name|CXFConnectionRequestInfo
argument_list|(
name|Greeter
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|serviceName
argument_list|,
name|portName
argument_list|)
expr_stmt|;
comment|// need to get wsdl
name|Object
name|o
init|=
name|mci
operator|.
name|getConnection
argument_list|(
name|subj
argument_list|,
name|cri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Checking implementation of Connection interface"
argument_list|,
name|o
operator|instanceof
name|Connection
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking implementation of passed interface"
argument_list|,
name|o
operator|instanceof
name|Greeter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetConnectionWithNoWSDLInvokesCreateClientWithTwoArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|cri
operator|=
operator|new
name|CXFConnectionRequestInfo
argument_list|(
name|Greeter
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|serviceName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|mci
operator|.
name|getConnection
argument_list|(
name|subj
argument_list|,
name|cri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Checking implementation of Connection interface"
argument_list|,
name|o
operator|instanceof
name|Connection
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Checking implementation of passed interface"
argument_list|,
name|o
operator|instanceof
name|Greeter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|testGetConnectionWithNoPortReturnsConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|cri
operator|=
operator|new
name|CXFConnectionRequestInfo
argument_list|(
name|Greeter
operator|.
name|class
argument_list|,
name|wsdl
argument_list|,
name|serviceName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|mci
operator|.
name|getConnection
argument_list|(
name|subj
argument_list|,
name|cri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Returned connection does not implement Connection interface"
argument_list|,
name|o
operator|instanceof
name|Connection
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Returned connection does not implement Connection interface"
argument_list|,
name|o
operator|instanceof
name|Greeter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetConnectionReturnsConnection
parameter_list|()
throws|throws
name|ResourceException
block|{
name|Object
name|o
init|=
name|mci
operator|.
name|getConnection
argument_list|(
name|subj
argument_list|,
name|cri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Returned connection does not implement Connection interface"
argument_list|,
name|o
operator|instanceof
name|Connection
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Returned connection does not implement Connection interface"
argument_list|,
name|o
operator|instanceof
name|Greeter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyProxyInterceptors
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Proxy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"First handler must be a ProxyInvocation Handler"
argument_list|,
name|ProxyInvocationHandler
operator|.
name|class
argument_list|,
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|o
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetConnectionWithDudSubjectA
parameter_list|()
throws|throws
name|ResourceException
block|{
name|Object
name|o
init|=
name|mci
operator|.
name|getConnection
argument_list|(
name|subj
argument_list|,
name|cri
argument_list|)
decl_stmt|;
name|verifyProxyInterceptors
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetConnectionWithDudSubjectB
parameter_list|()
throws|throws
name|ResourceException
block|{
name|String
name|user
init|=
operator|new
name|String
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|char
index|[]
name|password
init|=
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|}
decl_stmt|;
name|PasswordCredential
name|creds
init|=
operator|new
name|PasswordCredential
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|subj
operator|.
name|getPrivateCredentials
argument_list|()
operator|.
name|add
argument_list|(
name|creds
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|mci
operator|.
name|getConnection
argument_list|(
name|subj
argument_list|,
name|cri
argument_list|)
decl_stmt|;
name|verifyProxyInterceptors
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetConnectionWithSubject
parameter_list|()
throws|throws
name|ResourceException
block|{
name|String
name|user
init|=
operator|new
name|String
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|char
index|[]
name|password
init|=
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|}
decl_stmt|;
name|PasswordCredential
name|creds
init|=
operator|new
name|PasswordCredential
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|creds
operator|.
name|setManagedConnectionFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|subj
operator|.
name|getPrivateCredentials
argument_list|()
operator|.
name|add
argument_list|(
name|creds
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|mci
operator|.
name|getConnection
argument_list|(
name|subj
argument_list|,
name|cri
argument_list|)
decl_stmt|;
name|verifyProxyInterceptors
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
operator|(
name|Connection
operator|)
name|mci
operator|.
name|getConnection
argument_list|(
name|subj
argument_list|,
name|cri
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|reset
argument_list|(
name|mockListener
argument_list|)
expr_stmt|;
name|mockListener
operator|.
name|connectionClosed
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|ConnectionEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mockListener
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssociateConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|CXFConnectionRequestInfo
name|cri2
init|=
operator|new
name|CXFConnectionRequestInfo
argument_list|(
name|Greeter
operator|.
name|class
argument_list|,
operator|new
name|URL
argument_list|(
literal|"file:/tmp/foo2"
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
literal|"service2"
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
literal|"fooPort2"
argument_list|)
argument_list|)
decl_stmt|;
name|ManagedConnectionImpl
name|mci2
init|=
operator|new
name|ManagedConnectionImpl
argument_list|(
name|factory
argument_list|,
name|cri2
argument_list|,
operator|new
name|Subject
argument_list|()
argument_list|)
decl_stmt|;
name|mci2
operator|.
name|addConnectionEventListener
argument_list|(
name|mockListener
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|mci
operator|.
name|getConnection
argument_list|(
name|subj
argument_list|,
name|cri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Returned connection does not implement Connection interface"
argument_list|,
name|o
operator|instanceof
name|Connection
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Returned connection does not implement Connection interface"
argument_list|,
name|o
operator|instanceof
name|Greeter
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Returned connection is not a java.lang.reflect.Proxy instance"
argument_list|,
name|o
operator|instanceof
name|Proxy
argument_list|)
expr_stmt|;
name|InvocationHandler
name|handler
init|=
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Asserting handler class: "
operator|+
name|handler
operator|.
name|getClass
argument_list|()
argument_list|,
name|handler
operator|instanceof
name|CXFInvocationHandler
argument_list|)
expr_stmt|;
name|Object
name|assocMci
init|=
operator|(
operator|(
name|CXFInvocationHandler
operator|)
name|handler
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|getManagedConnection
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Asserting associated ManagedConnection."
argument_list|,
name|mci
operator|==
name|assocMci
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Asserting associated ManagedConnection."
argument_list|,
name|mci2
operator|!=
name|assocMci
argument_list|)
expr_stmt|;
name|mci2
operator|.
name|associateConnection
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|assocMci
operator|=
operator|(
operator|(
name|CXFInvocationHandler
operator|)
name|handler
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|getManagedConnection
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Asserting associated ManagedConnection."
argument_list|,
name|mci2
operator|==
name|assocMci
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Asserting associated ManagedConnection."
argument_list|,
name|mci
operator|!=
name|assocMci
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssociateConnectionThrowsException
parameter_list|()
throws|throws
name|Throwable
block|{
name|InvocationHandler
name|ih
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|InvocationHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|dodgyHandle
init|=
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Foo
operator|.
name|class
block|}
argument_list|,
name|ih
argument_list|)
decl_stmt|;
try|try
block|{
name|mci
operator|.
name|associateConnection
argument_list|(
name|dodgyHandle
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Except exception on call with ClassCast Exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceAdapterInternalException
name|raie
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMetaData
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedConnectionMetaData
name|data
init|=
name|mci
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Checking the EISProductionVersion"
argument_list|,
literal|"1.1"
argument_list|,
name|data
operator|.
name|getEISProductVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Checking the EISProductName"
argument_list|,
literal|"WS-based-EIS"
argument_list|,
name|data
operator|.
name|getEISProductName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

