begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
operator|.
name|CXFInvocationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
operator|.
name|CXFInvocationHandlerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ObjectMethodInvocationHandlerTest
extends|extends
name|AbstractInvocationHandlerTest
block|{
name|ObjectMethodInvocationHandler
name|handler
decl_stmt|;
name|CXFInvocationHandlerData
name|data
decl_stmt|;
name|TestTarget
name|testTarget
init|=
operator|new
name|TestTarget
argument_list|()
decl_stmt|;
name|DummyHandler
name|dummyHandler
init|=
operator|new
name|DummyHandler
argument_list|()
decl_stmt|;
specifier|public
name|ObjectMethodInvocationHandlerTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|target
operator|.
name|lastMethod
operator|=
literal|null
expr_stmt|;
name|dummyHandler
operator|.
name|invokeCalled
operator|=
literal|false
expr_stmt|;
name|data
operator|=
operator|new
name|CXFInvocationHandlerDataImpl
argument_list|()
expr_stmt|;
name|data
operator|.
name|setTarget
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|handler
operator|=
operator|new
name|ObjectMethodInvocationHandler
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|handler
operator|.
name|setNext
argument_list|(
name|dummyHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
throws|throws
name|Throwable
block|{
name|Method
name|toString
init|=
name|Object
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"toString"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|handler
operator|.
name|invoke
argument_list|(
name|testTarget
argument_list|,
name|toString
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"object method must not be passed to next handler in chain"
argument_list|,
operator|!
name|dummyHandler
operator|.
name|invokeCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"object must be a String"
argument_list|,
name|result
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"checking toString method "
argument_list|,
operator|(
operator|(
name|String
operator|)
name|result
operator|)
operator|.
name|startsWith
argument_list|(
literal|"ConnectionHandle"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCode
parameter_list|()
throws|throws
name|Throwable
block|{
name|Method
name|hashCode
init|=
name|Object
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"hashCode"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|doObjectMethodTest
argument_list|(
name|hashCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsDoesNotCallNext
parameter_list|()
throws|throws
name|Throwable
block|{
name|Method
name|equals
init|=
name|Object
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"equals"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|handler
operator|.
name|invoke
argument_list|(
name|testTarget
argument_list|,
name|equals
argument_list|,
operator|new
name|Object
index|[]
block|{
name|this
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"object method must not be passed to next handler in chain"
argument_list|,
operator|!
name|dummyHandler
operator|.
name|invokeCalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonObjecMethod
parameter_list|()
throws|throws
name|Throwable
block|{
name|DummyHandler
name|dummyHandler1
init|=
operator|new
name|DummyHandler
argument_list|()
decl_stmt|;
name|handler
operator|.
name|setNext
argument_list|(
name|dummyHandler1
argument_list|)
expr_stmt|;
specifier|final
name|Method
name|method
init|=
name|TestTarget
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"testMethod"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|handler
operator|.
name|invoke
argument_list|(
name|testTarget
argument_list|,
name|method
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"non object method must be passed to next handler in chain"
argument_list|,
name|dummyHandler1
operator|.
name|invokeCalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsThroughProxies
parameter_list|()
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|interfaces
init|=
block|{
name|TestInterface
operator|.
name|class
block|}
decl_stmt|;
name|CXFInvocationHandlerData
name|data1
init|=
operator|new
name|CXFInvocationHandlerDataImpl
argument_list|()
decl_stmt|;
name|CXFInvocationHandlerData
name|data2
init|=
operator|new
name|CXFInvocationHandlerDataImpl
argument_list|()
decl_stmt|;
name|data1
operator|.
name|setTarget
argument_list|(
operator|new
name|TestTarget
argument_list|()
argument_list|)
expr_stmt|;
name|data2
operator|.
name|setTarget
argument_list|(
operator|new
name|TestTarget
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectMethodInvocationHandler
name|handler1
init|=
operator|new
name|ObjectMethodInvocationHandler
argument_list|(
name|data1
argument_list|)
decl_stmt|;
name|handler1
operator|.
name|setNext
argument_list|(
name|mockHandler
argument_list|)
expr_stmt|;
name|ObjectMethodInvocationHandler
name|handler2
init|=
operator|new
name|ObjectMethodInvocationHandler
argument_list|(
name|data2
argument_list|)
decl_stmt|;
name|handler2
operator|.
name|setNext
argument_list|(
name|mockHandler
argument_list|)
expr_stmt|;
name|TestInterface
name|proxy1
init|=
operator|(
name|TestInterface
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|TestInterface
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|interfaces
argument_list|,
name|handler1
argument_list|)
decl_stmt|;
name|TestInterface
name|proxy2
init|=
operator|(
name|TestInterface
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|TestInterface
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|interfaces
argument_list|,
name|handler2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|proxy1
argument_list|,
name|proxy1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|proxy1
operator|.
name|equals
argument_list|(
name|proxy2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doObjectMethodTest
parameter_list|(
name|Method
name|method
parameter_list|)
throws|throws
name|Throwable
block|{
name|doObjectMethodTest
argument_list|(
name|method
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doObjectMethodTest
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|handler
operator|.
name|invoke
argument_list|(
name|testTarget
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"object method must not be passed to next handler in chain"
argument_list|,
operator|!
name|dummyHandler
operator|.
name|invokeCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|method
operator|+
literal|" must be invoked directly on target object"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|target
operator|.
name|lastMethod
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CXFInvocationHandler
name|getHandler
parameter_list|()
block|{
return|return
name|handler
return|;
block|}
block|}
end_class

end_unit

