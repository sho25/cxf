begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ConnectionManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ManagedConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|connector
operator|.
name|CXFConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ManagedConnectionFactoryImplTest
extends|extends
name|Assert
block|{
specifier|protected
name|ManagedConnectionFactoryImpl
name|mci
decl_stmt|;
specifier|protected
name|CXFConnectionRequestInfo
name|cri
decl_stmt|;
specifier|protected
name|CXFConnectionRequestInfo
name|cri2
decl_stmt|;
specifier|protected
name|CXFConnectionRequestInfo
name|cri3
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|mci
operator|=
name|createManagedConnectionFactoryImpl
argument_list|()
expr_stmt|;
name|URL
name|wsdl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/hello_world.wsdl"
argument_list|)
decl_stmt|;
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SOAPService"
argument_list|)
decl_stmt|;
name|QName
name|portName
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SoapPort"
argument_list|)
decl_stmt|;
name|cri
operator|=
operator|new
name|CXFConnectionRequestInfo
argument_list|(
name|Greeter
operator|.
name|class
argument_list|,
name|wsdl
argument_list|,
name|serviceName
argument_list|,
name|portName
argument_list|)
expr_stmt|;
name|cri2
operator|=
operator|new
name|CXFConnectionRequestInfo
argument_list|(
name|Greeter
operator|.
name|class
argument_list|,
name|wsdl
argument_list|,
operator|new
name|QName
argument_list|(
literal|"service2"
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
literal|"fooPort2"
argument_list|)
argument_list|)
expr_stmt|;
name|cri3
operator|=
operator|new
name|CXFConnectionRequestInfo
argument_list|(
name|Greeter
operator|.
name|class
argument_list|,
name|wsdl
argument_list|,
operator|new
name|QName
argument_list|(
literal|"service3"
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
literal|"fooPort3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetEJBServicePropertiesURL
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|name
init|=
literal|"file://foo.txt"
decl_stmt|;
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|ManagedConnectionFactoryImpl
name|mcf
init|=
operator|new
name|ManagedConnectionFactoryImpl
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|mcf
operator|.
name|setEJBServicePropertiesURL
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|containsValue
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|mcf
operator|.
name|getEJBServicePropertiesURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetMonitorEJBServiceProperties
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Boolean
name|value
init|=
name|Boolean
operator|.
name|TRUE
decl_stmt|;
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|ManagedConnectionFactoryImpl
name|mcf
init|=
operator|new
name|ManagedConnectionFactoryImpl
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|mcf
operator|.
name|setMonitorEJBServiceProperties
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|containsValue
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|mcf
operator|.
name|getMonitorEJBServiceProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetEJBServicePropertiesPollInterval
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Integer
name|value
init|=
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|ManagedConnectionFactoryImpl
name|mcf
init|=
operator|new
name|ManagedConnectionFactoryImpl
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|mcf
operator|.
name|setEJBServicePropertiesPollInterval
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|containsValue
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|mcf
operator|.
name|getEJBServicePropertiesPollInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetLogLevelSetsLevelOnPlugin
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|ManagedConnectionFactoryImpl
name|propsmcf
init|=
operator|new
name|ManagedConnectionFactoryImpl
argument_list|(
name|props
argument_list|)
decl_stmt|;
specifier|final
name|String
name|logLevel
init|=
literal|"DEBUG"
decl_stmt|;
name|propsmcf
operator|.
name|setLogLevel
argument_list|(
name|logLevel
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"prop is set"
argument_list|,
name|props
operator|.
name|containsValue
argument_list|(
name|logLevel
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPropsURLFromBadURL
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ManagedConnectionFactoryImpl
name|mcf
init|=
operator|new
name|ManagedConnectionFactoryImpl
argument_list|()
decl_stmt|;
name|mcf
operator|.
name|setEJBServicePropertiesURL
argument_list|(
literal|"rubbish_bad:/rubbish_name.properties"
argument_list|)
expr_stmt|;
name|mcf
operator|.
name|getEJBServicePropertiesURLInstance
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expect an exception ."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|re
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Cause is MalformedURLException, cause: "
operator|+
name|re
operator|.
name|getCause
argument_list|()
argument_list|,
name|re
operator|.
name|getCause
argument_list|()
operator|instanceof
name|MalformedURLException
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Error message should contains rubbish_bad"
argument_list|,
name|re
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"rubbish_bad"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImplementsEqualsAndHashCode
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|equalMethod
init|=
name|mci
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"equals"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Method
name|hashCodeMethod
init|=
name|mci
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"hashCode"
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"not Object's equals method"
argument_list|,
name|equalMethod
operator|!=
name|Object
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"equals"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not Object's hashCode method"
argument_list|,
name|hashCodeMethod
operator|!=
name|Object
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"hashCode"
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"equal with its self"
argument_list|,
name|mci
argument_list|,
name|mci
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not equal with another"
argument_list|,
operator|!
name|mci
operator|.
name|equals
argument_list|(
operator|new
name|ManagedConnectionFactoryImpl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not equal with another thing"
argument_list|,
operator|!
name|mci
operator|.
name|equals
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchManagedConnectionsWithUnboundConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|mci
operator|=
operator|new
name|ManagedConnectionFactoryImplTester
argument_list|()
expr_stmt|;
name|Object
name|unboundMC
init|=
name|mci
operator|.
name|createManagedConnection
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"MC must not be null."
argument_list|,
name|unboundMC
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Object
argument_list|>
name|mcSet
init|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|mcSet
operator|.
name|add
argument_list|(
name|unboundMC
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Must be same managed connection instance."
argument_list|,
name|mci
operator|.
name|matchManagedConnections
argument_list|(
name|mcSet
argument_list|,
literal|null
argument_list|,
name|cri
argument_list|)
argument_list|,
name|unboundMC
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMatchManagedConnectionsWithBoundConnections
parameter_list|()
throws|throws
name|Exception
block|{
name|Subject
name|subj
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|BusFactory
name|bf
init|=
name|BusFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Bus
name|bus
init|=
name|bf
operator|.
name|createBus
argument_list|()
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|ManagedConnectionFactoryImpl
name|factory
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ManagedConnectionFactoryImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|factory
operator|.
name|getBus
argument_list|()
expr_stmt|;
comment|// In ManagedConnectionImpl:
comment|// one for getCXFServiceFromBus , another for createInvocationHandler
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|bus
argument_list|)
operator|.
name|times
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|ManagedConnectionImpl
name|mc1
init|=
operator|new
name|ManagedConnectionImpl
argument_list|(
name|factory
argument_list|,
name|cri
argument_list|,
name|subj
argument_list|)
decl_stmt|;
name|Object
name|connection
init|=
name|mc1
operator|.
name|getConnection
argument_list|(
name|subj
argument_list|,
name|cri
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"connection must not be null."
argument_list|,
name|connection
argument_list|)
expr_stmt|;
comment|/*         ManagedConnectionImpl mc2 = new ManagedConnectionImpl(factory, cri2, subj);         connection = mc2.getConnection(subj, cri2);         assertNotNull("connection must not be null.", connection);         */
comment|//        EasyMock.verify(factory);
name|Set
argument_list|<
name|ManagedConnection
argument_list|>
name|mcSet
init|=
operator|new
name|HashSet
argument_list|<
name|ManagedConnection
argument_list|>
argument_list|()
decl_stmt|;
name|mcSet
operator|.
name|add
argument_list|(
name|mc1
argument_list|)
expr_stmt|;
comment|//mcSet.add(mc2);
name|assertSame
argument_list|(
literal|"MC1 must be selected."
argument_list|,
name|mci
operator|.
name|matchManagedConnections
argument_list|(
name|mcSet
argument_list|,
name|subj
argument_list|,
name|cri
argument_list|)
argument_list|,
name|mc1
argument_list|)
expr_stmt|;
comment|//assertSame("MC2 must be selected.", mci.matchManagedConnections(mcSet, subj, cri2), mc2);
comment|//assertNull("No connection must be selected.", mci.matchManagedConnections(mcSet, subj, cri3));
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidateConnection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// call the no action method
name|mci
operator|.
name|validateReference
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateConnectionFactoryNoArgsThrowsNotSupported
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|mci
operator|.
name|createConnectionFactory
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"expect non managed not supported on null MC"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|expectd
parameter_list|)
block|{
comment|// do nothing here
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateConnectionFactoryNullCMThrows
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|mci
operator|.
name|createConnectionFactory
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expect non managed not supported on null MC"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|expectd
parameter_list|)
block|{
comment|// do nothing here
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateConnectionFactoryCM
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedConnectionFactoryImplTester
name|mcit
init|=
operator|new
name|ManagedConnectionFactoryImplTester
argument_list|()
decl_stmt|;
name|ConnectionManager
name|connManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ConnectionManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"We get a CF back"
argument_list|,
name|mcit
operator|.
name|createConnectionFactory
argument_list|(
name|connManager
argument_list|)
operator|instanceof
name|CXFConnectionFactory
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"init was called once"
argument_list|,
literal|1
argument_list|,
name|mcit
operator|.
name|initCalledCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateManagedConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedConnectionFactoryImplTester
name|mcit
init|=
operator|new
name|ManagedConnectionFactoryImplTester
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"We get a ManagedConnection back"
argument_list|,
name|mcit
operator|.
name|createManagedConnection
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|instanceof
name|ManagedConnection
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"init was called once"
argument_list|,
literal|1
argument_list|,
name|mcit
operator|.
name|initCalledCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseDoesNothing
parameter_list|()
throws|throws
name|Exception
block|{
name|mci
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/*public void testGetBusReturnNotNullIfConnectionFactoryCreated() throws ResourceException, Exception {         System.setProperty("test.bus.class", DummyBus.class.getName());         ClassLoader originalCl = Thread.currentThread().getContextClassLoader();         try {             // do this for MockObject creation             Thread.currentThread().setContextClassLoader(mci.getClass().getClassLoader());              mci.setArtixInstallDir(DummyBus.vobRoot());             mci.setArtixCEURL(DummyBus.artixCEURL);             ConnectionManager cm = (ConnectionManager)MockObjectFactory.create(Class                 .forName(ConnectionManager.class.getName(), true, mci.getClass().getClassLoader()));              mci.createConnectionFactory(cm);             assertNotNull("getBus() return not null after a connection factory created", mci.getBus());         } finally {             Thread.currentThread().setContextClassLoader(originalCl);         }     }      public void testGetBusReturnNullIfNoConnectionFactoryCreated() throws ResourceException, Exception {         System.setProperty("test.bus.class", DummyBus.class.getName());         assertNull("getBus() return null", mci.getBus());     }      public void testBusInitializedForEachManagedConnectionFactory() throws ResourceException, Exception {         System.setProperty("test.bus.class", DummyBus.class.getName());          ClassLoader originalCl = Thread.currentThread().getContextClassLoader();         try {             // do this for MockObject creation             Thread.currentThread().setContextClassLoader(mci.getClass().getClassLoader());              Class dummyBusClass = Class.forName(DummyBus.class.getName(), true, mci.getClass()                 .getClassLoader());             Field initializeCount = dummyBusClass.getField("initializeCount");              mci.setCXFInstallDir(DummyBus.vobRoot());             mci.setCXFCEURL(DummyBus.artixCEURL);             ConnectionManager cm = (ConnectionManager)MockObjectFactory.create(Class                 .forName(ConnectionManager.class.getName(), true, mci.getClass().getClassLoader()));              // first call             mci.createConnectionFactory(cm);             assertEquals("bus should be initialized once", 1, initializeCount.getInt(null));              ManagedConnectionFactoryImpl mci2 = createManagedConnectionFactoryImpl();             mci2.setArtixInstallDir(DummyBus.vobRoot());             mci2.setArtixCEURL(DummyBus.artixCEURL);              // second call             mci2.createConnectionFactory(cm);             assertEquals("bus initialized twice after second call", 2, initializeCount.getInt(null));         } finally {             Thread.currentThread().setContextClassLoader(originalCl);         }     }*/
specifier|protected
name|ManagedConnectionFactoryImpl
name|createManagedConnectionFactoryImpl
parameter_list|()
block|{
return|return
operator|new
name|ManagedConnectionFactoryImpl
argument_list|()
return|;
block|}
block|}
end_class

begin_class
class|class
name|ManagedConnectionFactoryImplTester
extends|extends
name|ManagedConnectionFactoryImpl
block|{
name|int
name|initCalledCount
decl_stmt|;
name|ManagedConnectionFactoryImplTester
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|// dummy out init as it does all the JBus work
specifier|protected
name|void
name|init
parameter_list|(
name|ClassLoader
name|cl
parameter_list|)
block|{
comment|//busFactory = new BusFactory(this);
name|initCalledCount
operator|++
expr_stmt|;
block|}
block|}
end_class

end_unit

