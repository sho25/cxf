begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
operator|.
name|CXFInvocationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jca
operator|.
name|cxf
operator|.
name|CXFInvocationHandlerData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|InvokingInvocationHandlerTest
extends|extends
name|AbstractInvocationHandlerTest
block|{
name|TestInterface
name|test
decl_stmt|;
name|TestInterface
name|test2
decl_stmt|;
name|TestTarget
name|target
decl_stmt|;
name|CXFInvocationHandler
name|handler
decl_stmt|;
name|CXFInvocationHandlerData
name|data
decl_stmt|;
specifier|public
name|InvokingInvocationHandlerTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|target
operator|=
operator|new
name|TestTarget
argument_list|()
expr_stmt|;
name|data
operator|=
operator|new
name|CXFInvocationHandlerDataImpl
argument_list|()
expr_stmt|;
name|data
operator|.
name|setTarget
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|handler
operator|=
operator|new
name|InvokingInvocationHandler
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Class
index|[]
name|interfaces
init|=
block|{
name|TestInterface
operator|.
name|class
block|}
decl_stmt|;
name|test
operator|=
operator|(
name|TestInterface
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|TestInterface
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|interfaces
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|handler
operator|.
name|getData
argument_list|()
operator|.
name|setTarget
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|CXFInvocationHandlerData
name|data2
init|=
operator|new
name|CXFInvocationHandlerDataImpl
argument_list|()
decl_stmt|;
name|CXFInvocationHandler
name|handler2
init|=
operator|new
name|InvokingInvocationHandler
argument_list|(
name|data2
argument_list|)
decl_stmt|;
name|test2
operator|=
operator|(
name|TestInterface
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|TestInterface
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|interfaces
argument_list|,
name|handler2
argument_list|)
expr_stmt|;
name|handler2
operator|.
name|getData
argument_list|()
operator|.
name|setTarget
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
comment|/**      * override this test - this handler is alway the last in the chain and is      * responsible for delegating the invocation to the target object      */
annotation|@
name|Test
specifier|public
name|void
name|testHandlerInvokesNext
parameter_list|()
throws|throws
name|Throwable
block|{
name|assertTrue
argument_list|(
literal|"target method  must not have be called"
argument_list|,
operator|!
name|target
operator|.
name|methodInvoked
argument_list|)
expr_stmt|;
name|handler
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
name|testMethod
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"target method must be called"
argument_list|,
name|target
operator|.
name|methodInvoked
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvocationThroughProxy
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
name|assertTrue
argument_list|(
literal|"target object must no have been invoked"
argument_list|,
operator|!
name|target
operator|.
name|methodInvoked
argument_list|)
expr_stmt|;
name|test
operator|.
name|testMethod
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"target object must be invoked"
argument_list|,
name|target
operator|.
name|methodInvoked
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|CXFInvocationHandler
name|getHandler
parameter_list|()
block|{
return|return
name|handler
return|;
block|}
block|}
end_class

end_unit

