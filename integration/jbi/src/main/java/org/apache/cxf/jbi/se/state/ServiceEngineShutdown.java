begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jbi
operator|.
name|se
operator|.
name|state
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|JBIException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jbi
operator|.
name|se
operator|.
name|CXFServiceUnitManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jbi
operator|.
name|se
operator|.
name|ComponentClassLoader
import|;
end_import

begin_class
specifier|public
class|class
name|ServiceEngineShutdown
extends|extends
name|AbstractServiceEngineStateMachine
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ServiceEngineShutdown
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|void
name|changeState
parameter_list|(
name|SEOperation
name|operation
parameter_list|,
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|JBIException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"in shutdown state"
argument_list|)
expr_stmt|;
if|if
condition|(
name|operation
operator|==
name|SEOperation
operator|.
name|init
condition|)
block|{
name|initSE
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|ServiceEngineStateFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|setCurrentState
argument_list|(
name|ServiceEngineStateFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|getStopState
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|SEOperation
operator|.
name|shutdown
condition|)
block|{
throw|throw
operator|new
name|JBIException
argument_list|(
literal|"This JBI component is already shutdown"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|SEOperation
operator|.
name|stop
condition|)
block|{
throw|throw
operator|new
name|JBIException
argument_list|(
literal|"This operation is unsupported, cannot stop a shutdown JBI component"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|SEOperation
operator|.
name|start
condition|)
block|{
throw|throw
operator|new
name|JBIException
argument_list|(
literal|"Cannot start a shutdown JBI component directly, need init first"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|initSE
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
throws|throws
name|JBIException
block|{
try|try
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|PROVIDER_PROP
argument_list|,
literal|"org.apache.cxf.jaxws.spi.ProviderImpl"
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|context
expr_stmt|;
if|if
condition|(
name|ctx
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|installRoot
init|=
name|ctx
operator|.
name|getInstallRoot
argument_list|()
decl_stmt|;
name|File
name|metaInfDir
init|=
operator|new
name|File
argument_list|(
name|installRoot
argument_list|,
literal|"META-INF"
argument_list|)
decl_stmt|;
name|File
name|cxfConfig
init|=
operator|new
name|File
argument_list|(
name|metaInfDir
argument_list|,
name|CXF_CONFIG_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cxfConfig
operator|.
name|exists
argument_list|()
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|Configurer
operator|.
name|USER_CFG_FILE_PROPERTY_NAME
argument_list|,
name|cxfConfig
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SE.SET.CONFIGURATION"
argument_list|,
name|LOG
argument_list|)
operator|+
name|Configurer
operator|.
name|USER_CFG_FILE_PROPERTY_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|severe
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SE.NOT.FOUND.CONFIGURATION"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
name|metaInfDir
argument_list|)
expr_stmt|;
block|}
name|ComponentClassLoader
name|loader
init|=
name|createClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|initializeBus
argument_list|()
expr_stmt|;
name|suManager
operator|=
operator|new
name|CXFServiceUnitManager
argument_list|(
name|bus
argument_list|,
name|ctx
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|registerJBITransport
argument_list|(
name|bus
argument_list|,
name|suManager
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SE.INSTALL.ROOT"
argument_list|,
name|LOG
argument_list|)
operator|+
name|installRoot
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SE.INIT.COMPLETE"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JBIException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|initializeBus
parameter_list|()
throws|throws
name|JBIException
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SE.INIT.BUS"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|bus
condition|)
block|{
name|bus
operator|=
name|BusFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createBus
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SE.INIT.BUS.COMPLETE"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SE.FAILED.INIT.BUS"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JBIException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ComponentClassLoader
name|createClassLoader
parameter_list|()
throws|throws
name|JBIException
throws|,
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|File
name|root
init|=
operator|new
name|File
argument_list|(
name|ctx
operator|.
name|getInstallRoot
argument_list|()
argument_list|)
decl_stmt|;
name|File
index|[]
name|jars
init|=
name|root
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|f
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|URL
index|[]
name|urls
decl_stmt|;
if|if
condition|(
name|jars
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|urls
operator|=
operator|new
name|URL
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|urls
operator|=
operator|new
name|URL
index|[
name|jars
operator|.
name|length
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|File
name|jar
range|:
name|jars
control|)
block|{
name|urls
index|[
name|i
index|]
operator|=
name|jar
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ComponentClassLoader
argument_list|(
name|urls
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|JBIException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SE.FAILED.CLASSLOADER"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

