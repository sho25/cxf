begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jbi
operator|.
name|se
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|component
operator|.
name|ServiceUnitManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|management
operator|.
name|DeploymentException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|servicedesc
operator|.
name|ServiceEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_comment
comment|/** Manage deployment of service units to the CXF service engine  *   */
end_comment

begin_class
specifier|public
class|class
name|CXFServiceUnitManager
implements|implements
name|ServiceUnitManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|CXFServiceUnitManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ComponentContext
name|ctx
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CXFServiceUnit
argument_list|>
name|serviceUnits
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CXFServiceUnit
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ServiceEndpoint
argument_list|,
name|CXFServiceUnit
argument_list|>
name|csuMap
init|=
operator|new
name|HashMap
argument_list|<
name|ServiceEndpoint
argument_list|,
name|CXFServiceUnit
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Bus
name|bus
decl_stmt|;
specifier|private
specifier|final
name|ComponentClassLoader
name|componentParentLoader
decl_stmt|;
specifier|public
name|CXFServiceUnitManager
parameter_list|(
name|Bus
name|b
parameter_list|,
name|ComponentContext
name|c
parameter_list|,
name|ComponentClassLoader
name|loader
parameter_list|)
block|{
name|ctx
operator|=
name|c
expr_stmt|;
name|bus
operator|=
name|b
expr_stmt|;
name|componentParentLoader
operator|=
name|loader
expr_stmt|;
block|}
comment|// Implementation of javax.jbi.component.ServiceUnitManager
specifier|public
specifier|final
name|void
name|shutDown
parameter_list|(
specifier|final
name|String
name|suName
parameter_list|)
throws|throws
name|DeploymentException
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.MANAGER.SHUTDOWN"
argument_list|,
name|LOG
argument_list|)
operator|+
name|suName
argument_list|)
expr_stmt|;
if|if
condition|(
name|suName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.NAME.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|suName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.NAME.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|serviceUnits
operator|.
name|containsKey
argument_list|(
name|suName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNDEPLOYED.SU"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
name|suName
argument_list|)
throw|;
block|}
name|serviceUnits
operator|.
name|remove
argument_list|(
name|suName
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|deploy
parameter_list|(
specifier|final
name|String
name|suName
parameter_list|,
specifier|final
name|String
name|suRootPath
parameter_list|)
throws|throws
name|DeploymentException
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.MANAGER.DEPLOY"
argument_list|,
name|LOG
argument_list|)
operator|+
name|suName
operator|+
literal|" path: "
operator|+
name|suRootPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|suName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.NAME.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|suName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.NAME.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|serviceUnits
operator|.
name|containsKey
argument_list|(
name|suName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"DUPLICATED.SU"
argument_list|,
name|LOG
argument_list|)
operator|+
name|suName
argument_list|)
throw|;
block|}
if|if
condition|(
name|suRootPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.ROOT.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|suRootPath
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.ROOT.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|msg
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>"
operator|+
literal|"<jbi-task xmlns=\"http://java.sun.com/xml/ns/jbi/management-message\" "
operator|+
literal|"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" "
operator|+
literal|"version=\"1.0\" "
operator|+
literal|"xsi:schemaLocation=\"http://java.sun.com/xml/ns/jbi/management-message "
operator|+
literal|"./managementMessage.xsd\">"
operator|+
literal|"<jbi-task-result>"
operator|+
literal|"<frmwk-task-result>"
operator|+
literal|"<frmwk-task-result-details>"
operator|+
literal|"<task-result-details>"
operator|+
literal|"<task-id>deploy</task-id>"
operator|+
literal|"<task-result>SUCCESS</task-result>"
operator|+
literal|"</task-result-details>"
operator|+
literal|"<locale>en_US</locale>"
operator|+
literal|"</frmwk-task-result-details>"
operator|+
literal|"<is-cause-framework>YES</is-cause-framework>"
operator|+
literal|"</frmwk-task-result>"
operator|+
literal|"<component-task-result>"
operator|+
literal|"<component-name>"
operator|+
name|ctx
operator|.
name|getComponentName
argument_list|()
operator|+
literal|"</component-name>"
operator|+
literal|"<component-task-result-details>"
operator|+
literal|"<task-result-details>"
operator|+
literal|"<task-id>deploy</task-id>"
operator|+
literal|"<task-result>SUCCESS</task-result>"
operator|+
literal|"</task-result-details>"
operator|+
literal|"</component-task-result-details>"
operator|+
literal|"</component-task-result>"
operator|+
literal|"</jbi-task-result>"
operator|+
literal|"</jbi-task>"
decl_stmt|;
return|return
name|msg
return|;
block|}
specifier|public
specifier|final
name|String
name|undeploy
parameter_list|(
specifier|final
name|String
name|suName
parameter_list|,
specifier|final
name|String
name|suRootPath
parameter_list|)
throws|throws
name|DeploymentException
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.MANAGER.UNDEPLOY"
argument_list|,
name|LOG
argument_list|)
operator|+
name|suName
operator|+
literal|" path: "
operator|+
name|suRootPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|suName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.NAME.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|suName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.NAME.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|suRootPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.ROOT.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|suRootPath
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.ROOT.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|msg
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>"
operator|+
literal|"<jbi-task xmlns=\"http://java.sun.com/xml/ns/jbi/management-message\" "
operator|+
literal|"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" "
operator|+
literal|"version=\"1.0\" "
operator|+
literal|"xsi:schemaLocation=\"http://java.sun.com/xml/ns/jbi/management-message "
operator|+
literal|"./managementMessage.xsd\">"
operator|+
literal|"<jbi-task-result>"
operator|+
literal|"<frmwk-task-result>"
operator|+
literal|"<frmwk-task-result-details>"
operator|+
literal|"<task-result-details>"
operator|+
literal|"<task-id>undeploy</task-id>"
operator|+
literal|"<task-result>SUCCESS</task-result>"
operator|+
literal|"</task-result-details>"
operator|+
literal|"<locale>en_US</locale>"
operator|+
literal|"</frmwk-task-result-details>"
operator|+
literal|"</frmwk-task-result>"
operator|+
literal|"<component-task-result>"
operator|+
literal|"<component-name>"
operator|+
name|ctx
operator|.
name|getComponentName
argument_list|()
operator|+
literal|"</component-name>"
operator|+
literal|"<component-task-result-details>"
operator|+
literal|"<task-result-details>"
operator|+
literal|"<task-id>undeploy</task-id>"
operator|+
literal|"<task-result>SUCCESS</task-result>"
operator|+
literal|"</task-result-details>"
operator|+
literal|"</component-task-result-details>"
operator|+
literal|"</component-task-result>"
operator|+
literal|"</jbi-task-result>"
operator|+
literal|"</jbi-task>"
decl_stmt|;
name|serviceUnits
operator|.
name|remove
argument_list|(
name|suName
argument_list|)
expr_stmt|;
return|return
name|msg
return|;
block|}
specifier|public
specifier|final
name|void
name|init
parameter_list|(
specifier|final
name|String
name|suName
parameter_list|,
specifier|final
name|String
name|suRootPath
parameter_list|)
throws|throws
name|DeploymentException
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.MANAGER.INIT"
argument_list|,
name|LOG
argument_list|)
operator|+
name|suName
operator|+
literal|" path: "
operator|+
name|suRootPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|suName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.NAME.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|suName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.NAME.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|suRootPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.ROOT.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|suRootPath
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.ROOT.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|componentParentLoader
argument_list|)
expr_stmt|;
name|CXFServiceUnit
name|csu
init|=
operator|new
name|CXFServiceUnit
argument_list|(
name|bus
argument_list|,
name|suRootPath
argument_list|,
name|componentParentLoader
argument_list|)
decl_stmt|;
name|csu
operator|.
name|prepare
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|serviceUnits
operator|.
name|put
argument_list|(
name|suName
argument_list|,
name|csu
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|DeploymentException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|final
name|void
name|start
parameter_list|(
specifier|final
name|String
name|suName
parameter_list|)
throws|throws
name|DeploymentException
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.MANAGER.START"
argument_list|,
name|LOG
argument_list|)
operator|+
name|suName
argument_list|)
expr_stmt|;
if|if
condition|(
name|suName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.NAME.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|suName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.NAME.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|serviceUnits
operator|.
name|containsKey
argument_list|(
name|suName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNDEPLOYED.SU"
argument_list|,
name|LOG
argument_list|)
operator|+
name|suName
argument_list|)
throw|;
block|}
name|CXFServiceUnit
name|csu
init|=
name|serviceUnits
operator|.
name|get
argument_list|(
name|suName
argument_list|)
decl_stmt|;
assert|assert
name|csu
operator|!=
literal|null
assert|;
name|csu
operator|.
name|start
argument_list|(
name|ctx
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|putServiceEndpoint
parameter_list|(
name|ServiceEndpoint
name|ref
parameter_list|,
name|CXFServiceUnit
name|csu
parameter_list|)
block|{
name|csuMap
operator|.
name|put
argument_list|(
name|ref
argument_list|,
name|csu
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|CXFServiceUnit
name|getServiceUnitForEndpoint
parameter_list|(
name|ServiceEndpoint
name|ep
parameter_list|)
block|{
return|return
name|csuMap
operator|.
name|get
argument_list|(
name|ep
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|void
name|stop
parameter_list|(
specifier|final
name|String
name|suName
parameter_list|)
throws|throws
name|DeploymentException
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.MANAGER.STOP"
argument_list|,
name|LOG
argument_list|)
operator|+
name|suName
argument_list|)
expr_stmt|;
if|if
condition|(
name|suName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.NAME.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|suName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.NAME.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|serviceUnits
operator|.
name|containsKey
argument_list|(
name|suName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DeploymentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNDEPLOYED.SU"
argument_list|,
name|LOG
argument_list|)
operator|+
name|suName
argument_list|)
throw|;
block|}
name|serviceUnits
operator|.
name|get
argument_list|(
name|suName
argument_list|)
operator|.
name|stop
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
name|Document
name|getServiceDescription
parameter_list|(
specifier|final
name|ServiceEndpoint
name|serviceEndpoint
parameter_list|)
block|{
name|Document
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|csuMap
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|serviceEndpoint
argument_list|)
condition|)
block|{
name|CXFServiceUnit
name|csu
init|=
name|csuMap
operator|.
name|get
argument_list|(
name|serviceEndpoint
argument_list|)
decl_stmt|;
name|ret
operator|=
name|csu
operator|.
name|getWsdlAsDocument
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

