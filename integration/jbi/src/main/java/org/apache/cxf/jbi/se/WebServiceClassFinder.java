begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jbi
operator|.
name|se
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jbi
operator|.
name|ServiceConsumer
import|;
end_import

begin_class
specifier|public
class|class
name|WebServiceClassFinder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WebServiceClassFinder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|rootPath
decl_stmt|;
specifier|private
specifier|final
name|ClassLoader
name|parent
decl_stmt|;
specifier|public
name|WebServiceClassFinder
parameter_list|(
name|String
name|argRootPath
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
if|if
condition|(
name|argRootPath
operator|.
name|endsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
name|argRootPath
operator|=
name|argRootPath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|argRootPath
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|rootPath
operator|=
name|argRootPath
expr_stmt|;
name|parent
operator|=
name|loader
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|findServiceConsumerClasses
parameter_list|()
throws|throws
name|MalformedURLException
block|{
return|return
name|find
argument_list|(
operator|new
name|Matcher
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|)
block|{
return|return
name|ServiceConsumer
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clz
argument_list|)
operator|&&
operator|(
name|clz
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|ABSTRACT
operator|)
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|findWebServiceClasses
parameter_list|()
throws|throws
name|MalformedURLException
block|{
return|return
name|find
argument_list|(
operator|new
name|Matcher
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|)
block|{
return|return
name|clz
operator|.
name|getAnnotation
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|&&
operator|(
name|clz
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|ABSTRACT
operator|)
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|findWebServiceInterface
parameter_list|()
throws|throws
name|MalformedURLException
block|{
return|return
name|find
argument_list|(
operator|new
name|Matcher
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|)
block|{
return|return
name|clz
operator|.
name|getAnnotation
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
operator|!=
literal|null
operator|&&
operator|(
name|clz
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|INTERFACE
operator|)
operator|==
name|Modifier
operator|.
name|INTERFACE
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|find
parameter_list|(
name|Matcher
name|matcher
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|File
name|root
init|=
operator|new
name|File
argument_list|(
name|rootPath
argument_list|)
decl_stmt|;
name|URL
index|[]
name|urls
init|=
block|{
name|root
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
block|}
decl_stmt|;
name|URLClassLoader
name|loader
init|=
operator|new
name|URLClassLoader
argument_list|(
name|urls
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|find
argument_list|(
name|root
argument_list|,
name|loader
argument_list|,
name|classes
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
return|return
name|classes
return|;
block|}
specifier|private
name|void
name|find
parameter_list|(
name|File
name|dir
parameter_list|,
name|ClassLoader
name|loader
parameter_list|,
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
parameter_list|,
name|Matcher
name|matcher
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|f
range|:
name|files
control|)
block|{
if|if
condition|(
name|f
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
name|loadClass
argument_list|(
name|loader
argument_list|,
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|accept
argument_list|(
name|clz
argument_list|)
condition|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|clz
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|find
argument_list|(
name|f
argument_list|,
name|loader
argument_list|,
name|classes
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|ClassLoader
name|loader
parameter_list|,
name|File
name|classFile
parameter_list|)
block|{
name|String
name|fileName
init|=
name|classFile
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|fileName
operator|.
name|substring
argument_list|(
name|rootPath
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|className
operator|=
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|className
operator|.
name|length
argument_list|()
operator|-
literal|".class"
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
if|if
condition|(
name|className
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
comment|// ServiceMix and OpenESB are little different with rootPath, so here className may be begin
comment|// with "."
name|className
operator|=
name|className
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|className
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|loader
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
operator|new
name|Message
argument_list|(
literal|"FAILED.LOAD.CLASS"
argument_list|,
name|LOG
argument_list|)
operator|+
name|className
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
interface|interface
name|Matcher
block|{
name|boolean
name|accept
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

