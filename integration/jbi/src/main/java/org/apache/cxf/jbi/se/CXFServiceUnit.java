begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jbi
operator|.
name|se
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|JBIException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|MessagingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|servicedesc
operator|.
name|ServiceEndpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|EndpointUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jbi
operator|.
name|ServiceConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ConduitInitiatorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jbi
operator|.
name|JBITransportFactory
import|;
end_import

begin_comment
comment|/**  * Wraps a CXF service or client.  */
end_comment

begin_class
specifier|public
class|class
name|CXFServiceUnit
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|CXFServiceUnit
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Bus
name|bus
decl_stmt|;
specifier|private
name|Object
name|serviceImplementation
decl_stmt|;
specifier|private
name|ServiceConsumer
name|serviceConsumer
decl_stmt|;
specifier|private
name|EndpointImpl
name|endpoint
decl_stmt|;
specifier|private
specifier|final
name|String
name|rootPath
decl_stmt|;
specifier|private
specifier|final
name|ClassLoader
name|parentLoader
decl_stmt|;
specifier|private
name|boolean
name|isProvider
decl_stmt|;
specifier|private
name|QName
name|serviceName
decl_stmt|;
specifier|private
name|String
name|endpointName
decl_stmt|;
specifier|private
name|ServiceEndpoint
name|ref
decl_stmt|;
specifier|public
name|CXFServiceUnit
parameter_list|(
name|Bus
name|b
parameter_list|,
name|String
name|path
parameter_list|,
name|ComponentClassLoader
name|parent
parameter_list|)
block|{
name|URL
name|url
init|=
literal|null
decl_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|File
argument_list|(
name|path
operator|+
name|File
operator|.
name|separator
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.FAILED.INIT"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|bus
operator|=
name|b
expr_stmt|;
name|rootPath
operator|=
name|path
expr_stmt|;
name|parent
operator|.
name|addResource
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|parentLoader
operator|=
name|parent
expr_stmt|;
name|parseJbiDescriptor
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isServiceProvider
parameter_list|()
block|{
return|return
name|isProvider
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ctx
operator|.
name|deactivateEndpoint
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JBIException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.FAILED.DEACTIVATE.ENDPOINT"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
name|ref
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|serviceConsumer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|start
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|,
name|CXFServiceUnitManager
name|serviceUnitManager
parameter_list|)
block|{
if|if
condition|(
name|isServiceProvider
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.START.PROVIDER"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ref
operator|=
literal|null
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|JBITransportFactory
operator|)
name|bus
operator|.
name|getExtension
argument_list|(
name|ConduitInitiatorManager
operator|.
name|class
argument_list|)
operator|.
name|getConduitInitiator
argument_list|(
name|CXFServiceEngine
operator|.
name|JBI_TRANSPORT_ID
argument_list|)
operator|)
operator|.
name|setDeliveryChannel
argument_list|(
name|ctx
operator|.
name|getDeliveryChannel
argument_list|()
argument_list|)
expr_stmt|;
name|ref
operator|=
name|ctx
operator|.
name|activateEndpoint
argument_list|(
name|getServiceName
argument_list|()
argument_list|,
name|getEndpointName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JBIException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.FAILED.ACTIVATE.ENDPOINT"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BusException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.FAILED.ACTIVATE.ENDPOINT"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"activated endpoint: "
operator|+
name|ref
operator|.
name|getEndpointName
argument_list|()
operator|+
literal|" service: "
operator|+
name|ref
operator|.
name|getServiceName
argument_list|()
argument_list|)
expr_stmt|;
name|serviceUnitManager
operator|.
name|putServiceEndpoint
argument_list|(
name|ref
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.START.CONSUMER"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|JBITransportFactory
operator|)
name|bus
operator|.
name|getExtension
argument_list|(
name|ConduitInitiatorManager
operator|.
name|class
argument_list|)
operator|.
name|getConduitInitiator
argument_list|(
name|CXFServiceEngine
operator|.
name|JBI_TRANSPORT_ID
argument_list|)
operator|)
operator|.
name|setDeliveryChannel
argument_list|(
name|ctx
operator|.
name|getDeliveryChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BusException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessagingException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
operator|new
name|Thread
argument_list|(
name|serviceConsumer
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|QName
name|getServiceName
parameter_list|()
block|{
name|QName
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isServiceProvider
argument_list|()
condition|)
block|{
if|if
condition|(
name|serviceName
operator|==
literal|null
condition|)
block|{
name|WebService
name|ws
init|=
operator|(
name|WebService
operator|)
name|serviceImplementation
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
decl_stmt|;
name|serviceName
operator|=
operator|new
name|QName
argument_list|(
name|ws
operator|.
name|targetNamespace
argument_list|()
argument_list|,
name|ws
operator|.
name|serviceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|serviceName
expr_stmt|;
block|}
else|else
block|{
name|WebService
name|ws
decl_stmt|;
name|WebServiceClassFinder
name|finder
init|=
operator|new
name|WebServiceClassFinder
argument_list|(
name|rootPath
argument_list|,
name|parentLoader
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
literal|null
decl_stmt|;
try|try
block|{
name|classes
operator|=
name|finder
operator|.
name|findWebServiceInterface
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|classes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
name|classes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ws
operator|=
name|clz
operator|.
name|getAnnotation
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
expr_stmt|;
name|serviceName
operator|=
operator|new
name|QName
argument_list|(
name|ws
operator|.
name|targetNamespace
argument_list|()
argument_list|,
name|ws
operator|.
name|serviceName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|serviceName
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getEndpointName
parameter_list|()
block|{
return|return
name|endpointName
return|;
block|}
specifier|public
name|void
name|prepare
parameter_list|(
name|ComponentContext
name|ctx
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
try|try
block|{
name|WebServiceClassFinder
name|finder
init|=
operator|new
name|WebServiceClassFinder
argument_list|(
name|rootPath
argument_list|,
name|parentLoader
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
name|finder
operator|.
name|findWebServiceClasses
argument_list|()
decl_stmt|;
if|if
condition|(
name|classes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.PUBLISH.ENDPOINT"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|isProvider
operator|=
literal|true
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
name|classes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|serviceImplementation
operator|=
name|clz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
if|if
condition|(
name|EndpointUtils
operator|.
name|isValidImplementor
argument_list|(
name|serviceImplementation
argument_list|)
condition|)
block|{
name|createProviderConfiguration
argument_list|()
expr_stmt|;
name|endpoint
operator|=
operator|new
name|EndpointImpl
argument_list|(
name|bus
argument_list|,
name|serviceImplementation
argument_list|,
literal|"null"
argument_list|)
expr_stmt|;
comment|//dummy endpoint to publish on
name|endpoint
operator|.
name|publish
argument_list|(
literal|"http://foo/bar/baz"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|createConsumerConfiguration
argument_list|()
expr_stmt|;
name|classes
operator|=
name|finder
operator|.
name|findServiceConsumerClasses
argument_list|()
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
name|classes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|serviceConsumer
operator|=
operator|(
name|ServiceConsumer
operator|)
name|clz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|serviceConsumer
operator|.
name|setComponentContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ex
operator|=
operator|(
name|Exception
operator|)
name|ex
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.FAILED.PUBLISH.ENDPOINT"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ClassLoader
name|getClassLoader
parameter_list|()
block|{
return|return
name|parentLoader
return|;
block|}
name|Document
name|getWsdlAsDocument
parameter_list|()
block|{
name|Document
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|WebService
name|ws
init|=
literal|null
decl_stmt|;
name|WebServiceClassFinder
name|finder
init|=
operator|new
name|WebServiceClassFinder
argument_list|(
name|rootPath
argument_list|,
name|parentLoader
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
name|finder
operator|.
name|findWebServiceInterface
argument_list|()
decl_stmt|;
if|if
condition|(
name|classes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
name|classes
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ws
operator|=
name|clz
operator|.
name|getAnnotation
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ws
operator|!=
literal|null
condition|)
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|doc
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|ws
operator|.
name|wsdlLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|severe
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SU.COULDNOT.GET.ANNOTATION"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ex.printStackTrace();
block|}
return|return
name|doc
return|;
block|}
specifier|private
name|void
name|parseJbiDescriptor
parameter_list|()
block|{
comment|// right now, all we are interested in is an endpoint name
comment|// from the jbi dd.
name|File
name|metaInf
init|=
operator|new
name|File
argument_list|(
name|rootPath
argument_list|,
literal|"META-INF"
argument_list|)
decl_stmt|;
name|File
name|jbiXml
init|=
operator|new
name|File
argument_list|(
name|metaInf
argument_list|,
literal|"jbi.xml"
argument_list|)
decl_stmt|;
try|try
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|builder
operator|.
name|parse
argument_list|(
name|jbiXml
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Element
name|providesEl
init|=
operator|(
name|Element
operator|)
name|findNode
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"provides"
argument_list|)
decl_stmt|;
name|Element
name|consumersEl
init|=
operator|(
name|Element
operator|)
name|findNode
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"consumes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|providesEl
operator|!=
literal|null
condition|)
block|{
name|endpointName
operator|=
name|providesEl
operator|.
name|getAttribute
argument_list|(
literal|"endpoint-name"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|consumersEl
operator|!=
literal|null
condition|)
block|{
name|endpointName
operator|=
name|consumersEl
operator|.
name|getAttribute
argument_list|(
literal|"endpoint-name"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"error parsing "
operator|+
name|jbiXml
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Node
name|findNode
parameter_list|(
name|Node
name|root
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|root
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|root
return|;
block|}
name|NodeList
name|children
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Node
name|found
init|=
name|findNode
argument_list|(
name|child
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
operator|!=
literal|null
condition|)
block|{
return|return
name|found
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|createProviderConfiguration
parameter_list|()
block|{
comment|//revisit later on
block|}
specifier|private
name|void
name|createConsumerConfiguration
parameter_list|()
block|{
comment|//revisit later on
block|}
block|}
end_class

end_unit

