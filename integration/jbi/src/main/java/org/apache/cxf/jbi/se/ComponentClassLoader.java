begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jbi
operator|.
name|se
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|FireWallClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
class|class
name|ComponentClassLoader
extends|extends
name|URLClassLoader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ComponentClassLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILTERS_PROPS_FILE
init|=
literal|"filters.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NEFILTERS_PROPS_FILE
init|=
literal|"negativefilters.properties"
decl_stmt|;
specifier|public
name|ComponentClassLoader
parameter_list|(
name|URL
index|[]
name|urls
parameter_list|,
name|ClassLoader
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|urls
argument_list|,
operator|new
name|FireWallClassLoader
argument_list|(
name|p
argument_list|,
name|getFilterList
argument_list|(
name|p
argument_list|,
name|FILTERS_PROPS_FILE
argument_list|)
argument_list|,
name|getFilterList
argument_list|(
name|p
argument_list|,
name|NEFILTERS_PROPS_FILE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addResource
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|addURL
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|getFilterList
parameter_list|(
name|ClassLoader
name|parent
parameter_list|,
name|String
name|propFile
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|filtersProps
init|=
name|getProperties
argument_list|(
name|parent
argument_list|,
name|propFile
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|i
init|=
name|filtersProps
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|config
argument_list|(
literal|"get Filter "
operator|+
name|propFile
operator|+
literal|"::"
operator|+
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|filtersProps
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Properties
name|getProperties
parameter_list|(
name|ClassLoader
name|parent
parameter_list|,
name|String
name|propsFileName
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
name|parent
operator|.
name|getResourceAsStream
argument_list|(
name|propsFileName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|in
condition|)
block|{
name|in
operator|=
name|ComponentClassLoader
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|propsFileName
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|in
condition|)
block|{
name|String
name|msg
init|=
literal|"Internal component classloader failed to locate configuration resource: "
operator|+
name|propsFileName
decl_stmt|;
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
name|ioe
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Contents: "
operator|+
name|propsFileName
operator|+
name|props
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
block|}
end_class

end_unit

