begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jbi
operator|.
name|se
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|management
operator|.
name|DeploymentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CXFServiceUnitManagerTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|CXFServiceUnitManagerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CXF_CONFIG
init|=
literal|"/components/CXFServiceEngine/version_1/META-INF/cxf-config.xml"
decl_stmt|;
specifier|private
name|CXFServiceUnitManager
name|csuManager
decl_stmt|;
specifier|private
name|ComponentContext
name|ctx
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ComponentContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|Configurer
operator|.
name|USER_CFG_FILE_PROPERTY_NAME
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|CXF_CONFIG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bus
operator|=
operator|new
name|SpringBusFactory
argument_list|()
operator|.
name|createBus
argument_list|()
expr_stmt|;
name|ComponentClassLoader
name|componentClassLoader
init|=
operator|new
name|ComponentClassLoader
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|csuManager
operator|=
operator|new
name|CXFServiceUnitManager
argument_list|(
name|bus
argument_list|,
name|ctx
argument_list|,
name|componentClassLoader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|bus
operator|.
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdownWithNull
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|shutDown
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.NAME.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdownWithEmpty
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|shutDown
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.NAME.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdownWithUndeployedSU
parameter_list|()
block|{
try|try
block|{
name|csuManager
operator|.
name|shutDown
argument_list|(
literal|"dummySU"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"UNDEPLOYED.SU"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"dummySU"
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeployWithNullSUName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|deploy
argument_list|(
literal|null
argument_list|,
literal|"dummyRoot"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.NAME.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeployWithEmptySUName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|deploy
argument_list|(
literal|""
argument_list|,
literal|"dummyRoot"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.NAME.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeployWithDuplicatedSU
parameter_list|()
block|{
try|try
block|{
name|csuManager
operator|.
name|deploy
argument_list|(
literal|"dummySU"
argument_list|,
literal|"dummyRoot"
argument_list|)
expr_stmt|;
name|csuManager
operator|.
name|init
argument_list|(
literal|"dummySU"
argument_list|,
literal|"dummyRoot"
argument_list|)
expr_stmt|;
name|csuManager
operator|.
name|deploy
argument_list|(
literal|"dummySU"
argument_list|,
literal|"dummyRoot"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"DUPLICATED.SU"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|"dummySU"
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeployWithNullSURoot
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|deploy
argument_list|(
literal|"dummySU"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.ROOT.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeployWithEmptySURoot
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|deploy
argument_list|(
literal|"dummySU"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.ROOT.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUndeployWithNullSUName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|undeploy
argument_list|(
literal|null
argument_list|,
literal|"dummyRoot"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.NAME.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUndeployWithEmptySUName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|undeploy
argument_list|(
literal|""
argument_list|,
literal|"dummyRoot"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.NAME.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUndeployWithNullSURoot
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|undeploy
argument_list|(
literal|"dummySU"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.ROOT.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUndeployWithEmptySURoot
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|undeploy
argument_list|(
literal|"dummySU"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.ROOT.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitWithNullSUName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|init
argument_list|(
literal|null
argument_list|,
literal|"dummyRoot"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.NAME.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitWithEmptySUName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|init
argument_list|(
literal|""
argument_list|,
literal|"dummyRoot"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.NAME.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitWithNullSURoot
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|init
argument_list|(
literal|"dummySU"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.ROOT.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitWithEmptySURoot
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|init
argument_list|(
literal|"dummySU"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.ROOT.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartWithNullSUName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|start
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.NAME.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartWithEmptySUName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|start
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.NAME.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopWithNullSUName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|stop
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.NAME.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopWithEmptySUName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|csuManager
operator|.
name|stop
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DeploymentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SU.NAME.EMPTY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|fail
argument_list|(
literal|"should get DeploymentException"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

