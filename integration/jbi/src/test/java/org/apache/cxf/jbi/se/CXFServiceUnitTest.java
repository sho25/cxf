begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jbi
operator|.
name|se
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|JBIException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|DeliveryChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ConduitInitiatorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jbi
operator|.
name|JBITransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CXFServiceUnitTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|CXFServiceUnitTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_PATH
init|=
literal|"/service-assemblies/cxf-demo-service-assembly/version_1/sus/"
operator|+
literal|"CXFServiceEngine/JBIDemoSE_AProvider"
decl_stmt|;
specifier|private
name|CXFServiceUnit
name|csu
decl_stmt|;
specifier|private
name|CXFServiceUnitManager
name|csuManager
decl_stmt|;
specifier|private
name|ComponentContext
name|ctx
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ComponentContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DeliveryChannel
name|channel
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|DeliveryChannel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|absCsuPath
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|JBITransportFactory
name|jbiTransportFactory
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|absCsuPath
operator|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|ROOT_PATH
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|bus
operator|=
operator|new
name|SpringBusFactory
argument_list|()
operator|.
name|createBus
argument_list|()
expr_stmt|;
name|ComponentClassLoader
name|componentClassLoader
init|=
operator|new
name|ComponentClassLoader
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|csuManager
operator|=
operator|new
name|CXFServiceUnitManager
argument_list|(
name|bus
argument_list|,
name|ctx
argument_list|,
name|componentClassLoader
argument_list|)
expr_stmt|;
name|csu
operator|=
operator|new
name|CXFServiceUnit
argument_list|(
name|bus
argument_list|,
name|absCsuPath
argument_list|,
name|componentClassLoader
argument_list|)
expr_stmt|;
name|registerJBITransport
argument_list|(
name|bus
argument_list|,
name|csuManager
argument_list|)
expr_stmt|;
name|channel
operator|.
name|accept
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|bus
operator|.
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepare
parameter_list|()
throws|throws
name|Exception
block|{
name|csu
operator|.
name|prepare
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|csu
operator|.
name|isServiceProvider
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|csu
operator|.
name|getServiceName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"http://apache.org/hello_world"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|csu
operator|.
name|getServiceName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|"HelloWorldService"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndpintName
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|csu
operator|.
name|getEndpointName
argument_list|()
argument_list|,
literal|"SE_Endpoint"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServiceName
parameter_list|()
throws|throws
name|Exception
block|{
name|csu
operator|.
name|prepare
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|csu
operator|.
name|getServiceName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"http://apache.org/hello_world"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|csu
operator|.
name|getServiceName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|"HelloWorldService"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStart
parameter_list|()
throws|throws
name|Exception
block|{               }
annotation|@
name|Test
specifier|public
name|void
name|testStop
parameter_list|()
throws|throws
name|Exception
block|{               }
name|void
name|registerJBITransport
parameter_list|(
name|Bus
name|argBus
parameter_list|,
name|CXFServiceUnitManager
name|mgr
parameter_list|)
throws|throws
name|JBIException
block|{
try|try
block|{
name|getTransportFactory
argument_list|()
operator|.
name|setBus
argument_list|(
name|argBus
argument_list|)
expr_stmt|;
comment|//getTransportFactory().setServiceUnitManager(mgr);
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SE.FAILED.REGISTER.TRANSPORT.FACTORY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JBIException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SE.FAILED.REGISTER.TRANSPORT.FACTORY"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|JBITransportFactory
name|getTransportFactory
parameter_list|()
throws|throws
name|JBIException
throws|,
name|BusException
block|{
assert|assert
name|bus
operator|!=
literal|null
assert|;
if|if
condition|(
name|jbiTransportFactory
operator|==
literal|null
condition|)
block|{
name|jbiTransportFactory
operator|=
operator|(
name|JBITransportFactory
operator|)
name|bus
operator|.
name|getExtension
argument_list|(
name|ConduitInitiatorManager
operator|.
name|class
argument_list|)
operator|.
name|getConduitInitiator
argument_list|(
name|CXFServiceEngine
operator|.
name|JBI_TRANSPORT_ID
argument_list|)
expr_stmt|;
name|jbiTransportFactory
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|jbiTransportFactory
operator|.
name|setDeliveryChannel
argument_list|(
name|ctx
operator|.
name|getDeliveryChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|jbiTransportFactory
return|;
block|}
block|}
end_class

end_unit

