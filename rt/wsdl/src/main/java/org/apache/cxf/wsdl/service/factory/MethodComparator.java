begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|service
operator|.
name|factory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_class
class|class
name|MethodComparator
implements|implements
name|Comparator
argument_list|<
name|Method
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Method
name|m1
parameter_list|,
name|Method
name|m2
parameter_list|)
block|{
name|int
name|val
init|=
name|m1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|0
condition|)
block|{
name|val
operator|=
name|m1
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|-
name|m2
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|val
operator|==
literal|0
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|types1
init|=
name|m1
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|types2
init|=
name|m2
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|val
operator|=
name|types1
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|types2
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|!=
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
return|return
name|val
return|;
block|}
block|}
end_class

end_unit

