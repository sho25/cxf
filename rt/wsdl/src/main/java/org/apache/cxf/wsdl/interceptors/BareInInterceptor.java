begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractInDatabindingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|DepthXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_class
specifier|public
class|class
name|BareInInterceptor
extends|extends
name|AbstractInDatabindingInterceptor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|BareInInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|filter
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|filter
operator|.
name|add
argument_list|(
literal|"void"
argument_list|)
expr_stmt|;
name|filter
operator|.
name|add
argument_list|(
literal|"javax.activation.DataHandler"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BareInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|UNMARSHAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|isGET
argument_list|(
name|message
argument_list|)
operator|&&
name|message
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"BareInInterceptor skipped in HTTP GET method"
argument_list|)
expr_stmt|;
return|return;
block|}
name|DepthXMLStreamReader
name|xmlReader
init|=
name|getXMLStreamReader
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|DataReader
argument_list|<
name|XMLStreamReader
argument_list|>
name|dr
init|=
name|getDataReader
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|MessageContentsList
name|parameters
init|=
operator|new
name|MessageContentsList
argument_list|()
decl_stmt|;
name|Endpoint
name|ep
init|=
name|exchange
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|bop
init|=
name|exchange
operator|.
name|getBindingOperationInfo
argument_list|()
decl_stmt|;
name|ServiceInfo
name|si
init|=
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getService
argument_list|()
decl_stmt|;
comment|// XXX - Should the BindingMessageInfo.class be put on
comment|// the message?
comment|//MessageInfo msgInfo = message.get(MessageInfo.class);
name|BindingMessageInfo
name|msgInfo
init|=
literal|null
decl_stmt|;
name|boolean
name|client
init|=
name|isRequestor
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|OperationInfo
argument_list|>
name|ops
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bop
operator|==
literal|null
condition|)
block|{
name|ops
operator|=
operator|new
name|ArrayList
argument_list|<
name|OperationInfo
argument_list|>
argument_list|()
expr_stmt|;
name|ops
operator|.
name|addAll
argument_list|(
name|si
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperations
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|xmlReader
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLStreamReader
operator|.
name|END_ELEMENT
operator|&&
operator|!
name|client
condition|)
block|{
comment|//empty input
comment|//TO DO : check duplicate operation with no input
for|for
control|(
name|OperationInfo
name|op
range|:
name|ops
control|)
block|{
name|MessageInfo
name|bmsg
init|=
name|op
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|bmsg
operator|.
name|getMessagePartsNumber
argument_list|()
operator|==
literal|0
condition|)
block|{
name|BindingOperationInfo
name|boi
init|=
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|getOperation
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|boi
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setOneWay
argument_list|(
name|op
operator|.
name|isOneWay
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// XXX - Is the call to
comment|// AbstractInDatabindingInterceptor.getMessageInfo()
comment|// necessary?  Should we put the BindingMessageInfo on
comment|// the message instead of the MessageInfo?
comment|// msgInfo = getMessageInfo(message, bop, exchange);
name|getMessageInfo
argument_list|(
name|message
argument_list|,
name|bop
argument_list|)
expr_stmt|;
if|if
condition|(
name|client
condition|)
block|{
name|msgInfo
operator|=
name|bop
operator|.
name|getOutput
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|msgInfo
operator|=
name|bop
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|paramNum
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|StaxUtils
operator|.
name|toNextElement
argument_list|(
name|xmlReader
argument_list|)
condition|)
block|{
name|QName
name|elName
init|=
name|xmlReader
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
literal|null
decl_stmt|;
name|MessagePartInfo
name|p
decl_stmt|;
if|if
condition|(
name|msgInfo
operator|!=
literal|null
operator|&&
name|msgInfo
operator|.
name|getMessageParts
argument_list|()
operator|!=
literal|null
condition|)
block|{
assert|assert
name|msgInfo
operator|.
name|getMessageParts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|paramNum
assert|;
name|p
operator|=
name|msgInfo
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
name|paramNum
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|findMessagePart
argument_list|(
name|exchange
argument_list|,
name|ops
argument_list|,
name|elName
argument_list|,
name|client
argument_list|,
name|paramNum
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"NO_PART_FOUND"
argument_list|,
name|LOG
argument_list|,
name|elName
argument_list|)
argument_list|,
name|Fault
operator|.
name|FAULT_CODE_CLIENT
argument_list|)
throw|;
block|}
try|try
block|{
name|o
operator|=
name|dr
operator|.
name|read
argument_list|(
name|p
argument_list|,
name|xmlReader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|fault
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|fault
operator|.
name|setFaultCode
argument_list|(
name|Fault
operator|.
name|FAULT_CODE_CLIENT
argument_list|)
expr_stmt|;
block|}
throw|throw
name|fault
throw|;
block|}
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
name|paramNum
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|parameters
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|message
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

