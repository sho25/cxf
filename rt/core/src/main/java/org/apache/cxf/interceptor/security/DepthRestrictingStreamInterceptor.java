begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|DepthRestrictingStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_comment
comment|/**  * Creates an XMLStreamReader from the InputStream on the Message.  */
end_comment

begin_class
specifier|public
class|class
name|DepthRestrictingStreamInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|XML_SUB_TYPE
init|=
literal|"xml"
decl_stmt|;
specifier|private
name|int
name|elementCountThreshold
init|=
literal|2000
decl_stmt|;
specifier|private
name|int
name|innerElementLevelThreshold
init|=
literal|20
decl_stmt|;
specifier|private
name|int
name|innerElementCountThreshold
init|=
literal|50
decl_stmt|;
specifier|public
name|DepthRestrictingStreamInterceptor
parameter_list|()
block|{
name|this
argument_list|(
name|Phase
operator|.
name|POST_STREAM
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DepthRestrictingStreamInterceptor
parameter_list|(
name|String
name|phase
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DepthRestrictingStreamInterceptor
parameter_list|(
name|String
name|phase
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|after
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
if|if
condition|(
name|after
operator|!=
literal|null
condition|)
block|{
name|addAfter
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DepthRestrictingStreamInterceptor
parameter_list|(
name|String
name|phase
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|before
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|after
parameter_list|)
block|{
name|this
argument_list|(
name|phase
argument_list|,
name|after
argument_list|)
expr_stmt|;
if|if
condition|(
name|before
operator|!=
literal|null
condition|)
block|{
name|addBefore
argument_list|(
name|before
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|canBeIgnored
argument_list|(
name|message
argument_list|)
condition|)
block|{
return|return;
block|}
name|XMLStreamReader
name|reader
init|=
literal|null
decl_stmt|;
name|InputStream
name|is
init|=
name|message
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|reader
operator|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reader
operator|=
name|message
operator|.
name|getContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DepthRestrictingStreamReader
name|dr
init|=
operator|new
name|DepthRestrictingStreamReader
argument_list|(
name|reader
argument_list|,
name|elementCountThreshold
argument_list|,
name|innerElementLevelThreshold
argument_list|,
name|innerElementCountThreshold
argument_list|)
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|,
name|dr
argument_list|)
expr_stmt|;
block|}
comment|// custom subclasses can further customize it
specifier|protected
name|boolean
name|canBeIgnored
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|String
name|ct
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
return|return
name|ct
operator|!=
literal|null
operator|&&
operator|!
name|ct
operator|.
name|contains
argument_list|(
name|XML_SUB_TYPE
argument_list|)
return|;
block|}
comment|/**      * Sets the acceptable total number of elements in the XML payload       * @param elementCountThreshold      */
specifier|public
name|void
name|setElementCountThreshold
parameter_list|(
name|int
name|elementCountThreshold
parameter_list|)
block|{
name|this
operator|.
name|elementCountThreshold
operator|=
name|elementCountThreshold
expr_stmt|;
block|}
specifier|public
name|int
name|getElementCountThreshold
parameter_list|()
block|{
return|return
name|elementCountThreshold
return|;
block|}
comment|/**      * Sets the acceptable total stack depth in the XML payload       * @param elementLevelThreshold      */
specifier|public
name|void
name|setInnerElementLevelThreshold
parameter_list|(
name|int
name|elementLevelThreshold
parameter_list|)
block|{
name|this
operator|.
name|innerElementLevelThreshold
operator|=
name|elementLevelThreshold
expr_stmt|;
block|}
specifier|public
name|int
name|getInnerElementLevelThreshold
parameter_list|()
block|{
return|return
name|innerElementLevelThreshold
return|;
block|}
comment|/**      * Sets the acceptable total number of child elements for the current XML element       * @param innerElementCountThreshold      */
specifier|public
name|void
name|setInnerElementCountThreshold
parameter_list|(
name|int
name|innerElementCountThreshold
parameter_list|)
block|{
name|this
operator|.
name|innerElementCountThreshold
operator|=
name|innerElementCountThreshold
expr_stmt|;
block|}
specifier|public
name|int
name|getInnerElementCountThreshold
parameter_list|()
block|{
return|return
name|innerElementCountThreshold
return|;
block|}
block|}
end_class

end_unit

