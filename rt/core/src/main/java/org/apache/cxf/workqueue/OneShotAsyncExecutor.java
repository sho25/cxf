begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_comment
comment|/**  * Used to provide simple async Executor semantics by creating a one-shot  * thread.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|OneShotAsyncExecutor
implements|implements
name|Executor
block|{
specifier|private
specifier|static
specifier|final
name|OneShotAsyncExecutor
name|INSTANCE
init|=
operator|new
name|OneShotAsyncExecutor
argument_list|()
decl_stmt|;
specifier|private
name|OneShotAsyncExecutor
parameter_list|()
block|{     }
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
operator|new
name|Thread
argument_list|(
name|command
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|OneShotAsyncExecutor
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isA
parameter_list|(
name|Executor
name|executor
parameter_list|)
block|{
return|return
name|executor
operator|==
name|INSTANCE
return|;
block|}
block|}
end_class

end_unit

