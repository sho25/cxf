begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|blueprint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|ExtendedBeanMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|extension
operator|.
name|ExtensionManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|ConfiguredBeanLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|container
operator|.
name|BlueprintContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|container
operator|.
name|NoSuchComponentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|BeanMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|BeanProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|ComponentMetadata
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|BlueprintBeanLocator
implements|implements
name|ConfiguredBeanLocator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|BlueprintBeanLocator
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConfiguredBeanLocator
name|orig
decl_stmt|;
name|BlueprintContainer
name|container
decl_stmt|;
name|BundleContext
name|context
decl_stmt|;
specifier|public
name|BlueprintBeanLocator
parameter_list|(
name|ConfiguredBeanLocator
name|orig
parameter_list|,
name|BlueprintContainer
name|cont
parameter_list|,
name|BundleContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|orig
operator|=
name|orig
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|cont
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
if|if
condition|(
name|orig
operator|instanceof
name|ExtensionManagerImpl
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|container
operator|.
name|getComponentIds
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|ExtensionManagerImpl
operator|)
name|orig
operator|)
operator|.
name|removeBeansOfNames
argument_list|(
name|names
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getClassForMetaData
parameter_list|(
name|BlueprintContainer
name|container
parameter_list|,
name|ComponentMetadata
name|cmd
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cmd
operator|instanceof
name|BeanMetadata
condition|)
block|{
name|BeanMetadata
name|bm
init|=
operator|(
name|BeanMetadata
operator|)
name|cmd
decl_stmt|;
if|if
condition|(
name|bm
operator|instanceof
name|ExtendedBeanMetadata
condition|)
block|{
name|cls
operator|=
operator|(
operator|(
name|ExtendedBeanMetadata
operator|)
name|bm
operator|)
operator|.
name|getRuntimeClass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|Method
name|m
init|=
name|ReflectionUtil
operator|.
name|findMethod
argument_list|(
name|container
operator|.
name|getClass
argument_list|()
argument_list|,
literal|"loadClass"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|cls
operator|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|m
argument_list|)
operator|.
name|invoke
argument_list|(
name|container
argument_list|,
name|bm
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
return|return
name|cls
return|;
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|getClassForMetaData
parameter_list|(
name|ComponentMetadata
name|cmd
parameter_list|)
block|{
return|return
name|getClassForMetaData
argument_list|(
name|container
argument_list|,
name|cmd
argument_list|)
return|;
block|}
specifier|private
name|ComponentMetadata
name|getComponentMetadata
parameter_list|(
name|String
name|id
parameter_list|)
block|{
try|try
block|{
return|return
name|container
operator|.
name|getComponentMetadata
argument_list|(
name|id
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchComponentException
name|nsce
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getBeanOfType
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|ComponentMetadata
name|cmd
init|=
name|getComponentMetadata
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|getClassForMetaData
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|!=
literal|null
operator|&&
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|cls
argument_list|)
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|container
operator|.
name|getComponentInstance
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
return|return
name|orig
operator|.
name|getBeanOfType
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/** {@inheritDoc}*/
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBeanNamesOfType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|container
operator|.
name|getComponentIds
argument_list|()
control|)
block|{
name|ComponentMetadata
name|cmd
init|=
name|container
operator|.
name|getComponentMetadata
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|getClassForMetaData
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|!=
literal|null
operator|&&
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|cls
argument_list|)
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|names
operator|.
name|addAll
argument_list|(
name|orig
operator|.
name|getBeanNamesOfType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|names
argument_list|)
return|;
block|}
comment|/** {@inheritDoc}*/
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|getBeansOfType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|container
operator|.
name|getComponentIds
argument_list|()
control|)
block|{
name|ComponentMetadata
name|cmd
init|=
name|container
operator|.
name|getComponentMetadata
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|getClassForMetaData
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|!=
literal|null
operator|&&
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|cls
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|type
operator|.
name|cast
argument_list|(
name|container
operator|.
name|getComponentInstance
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|addAll
argument_list|(
name|orig
operator|.
name|getBeansOfType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|ServiceReference
name|refs
index|[]
init|=
name|context
operator|.
name|getServiceReferences
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|refs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServiceReference
name|r
range|:
name|refs
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|type
operator|.
name|cast
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|r
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore, just don't support the OSGi services
name|LOG
operator|.
name|info
argument_list|(
literal|"Try to find the Bean with type:"
operator|+
name|type
operator|+
literal|" from OSGi services and get error: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
comment|/** {@inheritDoc}*/
specifier|public
parameter_list|<
name|T
parameter_list|>
name|boolean
name|loadBeansOfType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|BeanLoaderListener
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|container
operator|.
name|getComponentIds
argument_list|()
control|)
block|{
name|ComponentMetadata
name|cmd
init|=
name|container
operator|.
name|getComponentMetadata
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|getClassForMetaData
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|!=
literal|null
operator|&&
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|cls
argument_list|)
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|names
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|names
control|)
block|{
name|ComponentMetadata
name|cmd
init|=
name|container
operator|.
name|getComponentMetadata
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|beanType
init|=
name|getClassForMetaData
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|t
init|=
name|beanType
operator|.
name|asSubclass
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|.
name|loadBean
argument_list|(
name|s
argument_list|,
name|t
argument_list|)
condition|)
block|{
name|Object
name|o
init|=
name|container
operator|.
name|getComponentInstance
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|.
name|beanLoaded
argument_list|(
name|s
argument_list|,
name|type
operator|.
name|cast
argument_list|(
name|o
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|loaded
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|loaded
operator|||
name|orig
operator|.
name|loadBeansOfType
argument_list|(
name|type
argument_list|,
name|listener
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasConfiguredPropertyValue
parameter_list|(
name|String
name|beanName
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|ComponentMetadata
name|cmd
init|=
name|getComponentMetadata
argument_list|(
name|beanName
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|instanceof
name|BeanMetadata
condition|)
block|{
name|BeanMetadata
name|br
init|=
operator|(
name|BeanMetadata
operator|)
name|cmd
decl_stmt|;
for|for
control|(
name|BeanProperty
name|s
range|:
name|br
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|propertyName
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
return|return
name|orig
operator|.
name|hasConfiguredPropertyValue
argument_list|(
name|beanName
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasBeanOfName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ComponentMetadata
name|cmd
init|=
name|getComponentMetadata
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|instanceof
name|BeanMetadata
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|orig
operator|.
name|hasBeanOfName
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

