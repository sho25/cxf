begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingFault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingOperation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Import
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Port
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|PortType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|soap12
operator|.
name|SOAP12Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|BindingFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|AbstractMessageContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|AbstractPropertiesHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingFaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|DescriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceSchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|UnwrappedOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|DestinationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|DestinationFactoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexContentExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObjectCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
operator|.
name|cast
import|;
end_import

begin_class
specifier|public
class|class
name|WSDLServiceBuilder
block|{
specifier|public
specifier|static
specifier|final
name|String
name|WSDL_SCHEMA_LIST
init|=
name|WSDLServiceBuilder
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".SCHEMA"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WSDL_DEFINITION
init|=
name|WSDLServiceBuilder
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".DEFINITION"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WSDL_SERVICE
init|=
name|WSDLServiceBuilder
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".SERVICE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WSDL_PORTTYPE
init|=
name|WSDLServiceBuilder
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".WSDL_PORTTYPE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WSDL_PORT
init|=
name|WSDLServiceBuilder
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".PORT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WSDL_BINDING
init|=
name|WSDLServiceBuilder
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".BINDING"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WSDL_SCHEMA_ELEMENT_LIST
init|=
name|WSDLServiceBuilder
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".SCHEMA_ELEMENTS"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WSDL_OPERATION
init|=
name|WSDLServiceBuilder
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".OPERATION"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WSDL_BINDING_OPERATION
init|=
name|WSDLServiceBuilder
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".BINDING_OPERATION"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WSDLServiceBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|schemaList
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|recordOriginal
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|allowRefs
decl_stmt|;
specifier|private
name|boolean
name|ignoreUnknownBindings
decl_stmt|;
specifier|public
name|WSDLServiceBuilder
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
block|}
specifier|public
name|WSDLServiceBuilder
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|boolean
name|record
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
name|recordOriginal
operator|=
name|record
expr_stmt|;
block|}
specifier|public
name|void
name|setIgnoreUnknownBindings
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|ignoreUnknownBindings
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|void
name|setAllowElementRefs
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|allowRefs
operator|=
name|b
expr_stmt|;
block|}
specifier|private
name|void
name|copyExtensors
parameter_list|(
name|AbstractPropertiesHolder
name|info
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
name|extList
parameter_list|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExtensibilityElement
name|ext
range|:
name|cast
argument_list|(
name|extList
argument_list|,
name|ExtensibilityElement
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|info
operator|.
name|containsExtensor
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|info
operator|.
name|addExtensor
argument_list|(
name|ext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|copyExtensionAttributes
parameter_list|(
name|AbstractPropertiesHolder
name|info
parameter_list|,
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|AttributeExtensible
name|ae
parameter_list|)
block|{
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|ae
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|attrs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|info
operator|.
name|setExtensionAttributes
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|buildServices
parameter_list|(
name|Definition
name|d
parameter_list|)
block|{
name|DescriptionInfo
name|description
init|=
operator|new
name|DescriptionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|recordOriginal
condition|)
block|{
name|description
operator|.
name|setProperty
argument_list|(
name|WSDL_DEFINITION
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
name|description
operator|.
name|setName
argument_list|(
name|d
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|description
operator|.
name|setBaseURI
argument_list|(
name|d
operator|.
name|getDocumentBaseURI
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensors
argument_list|(
name|description
argument_list|,
name|d
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|description
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|serviceList
init|=
operator|new
name|ArrayList
argument_list|<
name|ServiceInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|QName
argument_list|>
name|ite
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|d
operator|.
name|getServices
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
init|;
name|ite
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|QName
name|qn
init|=
name|ite
operator|.
name|next
argument_list|()
decl_stmt|;
name|serviceList
operator|.
name|addAll
argument_list|(
name|buildServices
argument_list|(
name|d
argument_list|,
name|qn
argument_list|,
literal|null
argument_list|,
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|serviceList
return|;
block|}
specifier|public
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|buildServices
parameter_list|(
name|Definition
name|d
parameter_list|,
name|QName
name|name
parameter_list|)
block|{
return|return
name|buildServices
argument_list|(
name|d
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|buildServices
parameter_list|(
name|Definition
name|d
parameter_list|,
name|QName
name|name
parameter_list|,
name|QName
name|endpointName
parameter_list|)
block|{
return|return
name|buildServices
argument_list|(
name|d
argument_list|,
name|name
argument_list|,
name|endpointName
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|buildServices
parameter_list|(
name|Definition
name|d
parameter_list|,
name|QName
name|name
parameter_list|,
name|QName
name|endpointName
parameter_list|,
name|DescriptionInfo
name|description
parameter_list|)
block|{
name|Service
name|service
init|=
name|d
operator|.
name|getService
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"MISSING_SERVICE"
argument_list|,
name|LOG
argument_list|,
name|name
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|WSDLRuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|buildServices
argument_list|(
name|d
argument_list|,
name|service
argument_list|,
name|endpointName
argument_list|,
name|description
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|buildServices
parameter_list|(
name|Definition
name|def
parameter_list|,
name|Service
name|serv
parameter_list|)
block|{
return|return
name|buildServices
argument_list|(
name|def
argument_list|,
name|serv
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|buildServices
parameter_list|(
name|Definition
name|def
parameter_list|,
name|Service
name|serv
parameter_list|,
name|QName
name|endpointName
parameter_list|)
block|{
return|return
name|buildServices
argument_list|(
name|def
argument_list|,
name|serv
argument_list|,
name|endpointName
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|buildMockServices
parameter_list|(
name|Definition
name|d
parameter_list|)
block|{
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|serviceList
init|=
operator|new
name|ArrayList
argument_list|<
name|ServiceInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Definition
argument_list|>
name|defList
init|=
operator|new
name|ArrayList
argument_list|<
name|Definition
argument_list|>
argument_list|()
decl_stmt|;
name|defList
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|parseImports
argument_list|(
name|d
argument_list|,
name|defList
argument_list|)
expr_stmt|;
for|for
control|(
name|Definition
name|def
range|:
name|defList
control|)
block|{
for|for
control|(
name|Iterator
name|ite
init|=
name|def
operator|.
name|getPortTypes
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ite
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|ite
operator|.
name|next
argument_list|()
decl_stmt|;
name|PortType
name|portType
init|=
name|def
operator|.
name|getPortType
argument_list|(
operator|(
name|QName
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|ServiceInfo
name|serviceInfo
init|=
name|this
operator|.
name|buildMockService
argument_list|(
name|def
argument_list|,
name|portType
argument_list|)
decl_stmt|;
name|serviceList
operator|.
name|add
argument_list|(
name|serviceInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|it2
init|=
name|d
operator|.
name|getAllBindings
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Binding
name|b
init|=
operator|(
name|Binding
operator|)
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|getPortType
argument_list|()
operator|==
name|portType
condition|)
block|{
name|this
operator|.
name|buildBinding
argument_list|(
name|serviceInfo
argument_list|,
name|b
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|def
operator|.
name|getPortTypes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|DescriptionInfo
name|description
init|=
operator|new
name|DescriptionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|recordOriginal
condition|)
block|{
name|description
operator|.
name|setProperty
argument_list|(
name|WSDL_DEFINITION
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
name|description
operator|.
name|setName
argument_list|(
name|def
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|description
operator|.
name|setBaseURI
argument_list|(
name|def
operator|.
name|getDocumentBaseURI
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensors
argument_list|(
name|description
argument_list|,
name|def
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|description
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|ServiceInfo
name|service
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|service
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
if|if
condition|(
name|recordOriginal
condition|)
block|{
name|service
operator|.
name|setProperty
argument_list|(
name|WSDL_DEFINITION
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
name|getSchemas
argument_list|(
name|def
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|WSDL_SCHEMA_ELEMENT_LIST
argument_list|,
name|this
operator|.
name|schemaList
argument_list|)
expr_stmt|;
name|serviceList
operator|.
name|add
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|serviceList
return|;
block|}
specifier|public
name|ServiceInfo
name|buildMockService
parameter_list|(
name|Definition
name|def
parameter_list|,
name|PortType
name|p
parameter_list|)
block|{
name|DescriptionInfo
name|description
init|=
operator|new
name|DescriptionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|recordOriginal
condition|)
block|{
name|description
operator|.
name|setProperty
argument_list|(
name|WSDL_DEFINITION
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
name|description
operator|.
name|setName
argument_list|(
name|def
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|description
operator|.
name|setBaseURI
argument_list|(
name|def
operator|.
name|getDocumentBaseURI
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensors
argument_list|(
name|description
argument_list|,
name|def
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|description
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|ServiceInfo
name|service
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|service
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
if|if
condition|(
name|recordOriginal
condition|)
block|{
name|service
operator|.
name|setProperty
argument_list|(
name|WSDL_DEFINITION
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
name|getSchemas
argument_list|(
name|def
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|WSDL_SCHEMA_ELEMENT_LIST
argument_list|,
name|this
operator|.
name|schemaList
argument_list|)
expr_stmt|;
name|buildInterface
argument_list|(
name|service
argument_list|,
name|p
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|private
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|buildServices
parameter_list|(
name|Definition
name|def
parameter_list|,
name|Service
name|serv
parameter_list|,
name|QName
name|endpointName
parameter_list|,
name|DescriptionInfo
name|d
parameter_list|)
block|{
name|Map
argument_list|<
name|QName
argument_list|,
name|ServiceInfo
argument_list|>
name|services
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|QName
argument_list|,
name|ServiceInfo
argument_list|>
argument_list|()
decl_stmt|;
name|DescriptionInfo
name|description
init|=
name|d
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|description
condition|)
block|{
name|description
operator|=
operator|new
name|DescriptionInfo
argument_list|()
expr_stmt|;
if|if
condition|(
name|recordOriginal
condition|)
block|{
name|description
operator|.
name|setProperty
argument_list|(
name|WSDL_DEFINITION
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
name|description
operator|.
name|setName
argument_list|(
name|def
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|description
operator|.
name|setBaseURI
argument_list|(
name|def
operator|.
name|getDocumentBaseURI
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensors
argument_list|(
name|description
argument_list|,
name|def
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|description
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Definition
argument_list|>
name|done
init|=
operator|new
name|HashSet
argument_list|<
name|Definition
argument_list|>
argument_list|()
decl_stmt|;
name|done
operator|.
name|add
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|List
argument_list|<
name|Import
argument_list|>
argument_list|>
name|values
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|def
operator|.
name|getImports
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Import
argument_list|>
name|imports
range|:
name|values
control|)
block|{
for|for
control|(
name|Import
name|imp
range|:
name|imports
control|)
block|{
if|if
condition|(
operator|!
name|done
operator|.
name|contains
argument_list|(
name|imp
operator|.
name|getDefinition
argument_list|()
argument_list|)
condition|)
block|{
name|done
operator|.
name|add
argument_list|(
name|imp
operator|.
name|getDefinition
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensors
argument_list|(
name|description
argument_list|,
name|imp
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|description
argument_list|,
name|imp
argument_list|)
expr_stmt|;
name|copyExtensors
argument_list|(
name|description
argument_list|,
name|imp
operator|.
name|getDefinition
argument_list|()
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|description
argument_list|,
name|imp
operator|.
name|getDefinition
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Port
name|port
range|:
name|cast
argument_list|(
name|serv
operator|.
name|getPorts
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|Port
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|endpointName
operator|!=
literal|null
operator|&&
operator|!
name|endpointName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|port
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Binding
name|binding
init|=
name|port
operator|.
name|getBinding
argument_list|()
decl_stmt|;
name|PortType
name|bindingPt
init|=
name|binding
operator|.
name|getPortType
argument_list|()
decl_stmt|;
if|if
condition|(
name|bindingPt
operator|==
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"BINDING_MISSING_TYPE"
argument_list|,
name|LOG
argument_list|,
name|binding
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|WSDLRuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
comment|//TODO: wsdl4j's bug. if there is recursive import,
comment|//wsdl4j can not get operation input message
name|PortType
name|pt
init|=
name|def
operator|.
name|getPortType
argument_list|(
name|bindingPt
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pt
operator|==
literal|null
condition|)
block|{
name|pt
operator|=
name|bindingPt
expr_stmt|;
block|}
name|ServiceInfo
name|service
init|=
name|services
operator|.
name|get
argument_list|(
name|pt
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
name|service
operator|=
operator|new
name|ServiceInfo
argument_list|()
expr_stmt|;
name|service
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|description
operator|.
name|getDescribed
argument_list|()
operator|.
name|add
argument_list|(
name|service
argument_list|)
expr_stmt|;
if|if
condition|(
name|recordOriginal
condition|)
block|{
name|service
operator|.
name|setProperty
argument_list|(
name|WSDL_DEFINITION
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|WSDL_SERVICE
argument_list|,
name|serv
argument_list|)
expr_stmt|;
block|}
name|getSchemas
argument_list|(
name|def
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|WSDL_SCHEMA_ELEMENT_LIST
argument_list|,
name|this
operator|.
name|schemaList
argument_list|)
expr_stmt|;
name|service
operator|.
name|setTargetNamespace
argument_list|(
name|def
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|setName
argument_list|(
name|serv
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensors
argument_list|(
name|service
argument_list|,
name|serv
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|service
argument_list|,
name|serv
argument_list|)
expr_stmt|;
name|buildInterface
argument_list|(
name|service
argument_list|,
name|pt
argument_list|)
expr_stmt|;
name|services
operator|.
name|put
argument_list|(
name|pt
operator|.
name|getQName
argument_list|()
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
name|BindingInfo
name|bi
init|=
name|service
operator|.
name|getBinding
argument_list|(
name|binding
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bi
operator|==
literal|null
condition|)
block|{
name|bi
operator|=
name|buildBinding
argument_list|(
name|service
argument_list|,
name|binding
argument_list|)
expr_stmt|;
block|}
name|buildEndpoint
argument_list|(
name|service
argument_list|,
name|bi
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|ServiceInfo
argument_list|>
argument_list|(
name|services
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|getSchemas
parameter_list|(
name|Definition
name|def
parameter_list|,
name|ServiceInfo
name|serviceInfo
parameter_list|)
block|{
name|ServiceSchemaInfo
name|serviceSchemaInfo
init|=
literal|null
decl_stmt|;
name|WSDLManager
name|wsdlManager
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|wsdlManager
operator|!=
literal|null
condition|)
block|{
name|serviceSchemaInfo
operator|=
name|wsdlManager
operator|.
name|getSchemasForDefinition
argument_list|(
name|def
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serviceSchemaInfo
operator|==
literal|null
condition|)
block|{
name|SchemaUtil
name|schemaUtil
init|=
operator|new
name|SchemaUtil
argument_list|(
name|bus
argument_list|,
name|this
operator|.
name|schemaList
argument_list|)
decl_stmt|;
name|schemaUtil
operator|.
name|getSchemas
argument_list|(
name|def
argument_list|,
name|serviceInfo
argument_list|)
expr_stmt|;
name|serviceSchemaInfo
operator|=
operator|new
name|ServiceSchemaInfo
argument_list|()
expr_stmt|;
name|serviceSchemaInfo
operator|.
name|setSchemaElementList
argument_list|(
name|this
operator|.
name|schemaList
argument_list|)
expr_stmt|;
name|serviceSchemaInfo
operator|.
name|setSchemaCollection
argument_list|(
name|serviceInfo
operator|.
name|getXmlSchemaCollection
argument_list|()
argument_list|)
expr_stmt|;
name|serviceSchemaInfo
operator|.
name|setSchemaInfoList
argument_list|(
name|serviceInfo
operator|.
name|getSchemas
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|wsdlManager
operator|!=
literal|null
condition|)
block|{
name|wsdlManager
operator|.
name|putSchemasForDefinition
argument_list|(
name|def
argument_list|,
name|serviceSchemaInfo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|serviceInfo
operator|.
name|setServiceSchemaInfo
argument_list|(
name|serviceSchemaInfo
argument_list|)
expr_stmt|;
name|schemaList
operator|.
name|putAll
argument_list|(
name|serviceSchemaInfo
operator|.
name|getSchemaElementList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|parseImports
parameter_list|(
name|Definition
name|def
parameter_list|,
name|List
argument_list|<
name|Definition
argument_list|>
name|defList
parameter_list|)
block|{
name|List
argument_list|<
name|Import
argument_list|>
name|importList
init|=
operator|new
name|ArrayList
argument_list|<
name|Import
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|List
argument_list|<
name|Import
argument_list|>
argument_list|>
name|ilist
init|=
name|cast
argument_list|(
name|def
operator|.
name|getImports
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Import
argument_list|>
name|list
range|:
name|ilist
control|)
block|{
name|importList
operator|.
name|addAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Import
name|impt
range|:
name|importList
control|)
block|{
if|if
condition|(
operator|!
name|defList
operator|.
name|contains
argument_list|(
name|impt
operator|.
name|getDefinition
argument_list|()
argument_list|)
condition|)
block|{
name|defList
operator|.
name|add
argument_list|(
name|impt
operator|.
name|getDefinition
argument_list|()
argument_list|)
expr_stmt|;
name|parseImports
argument_list|(
name|impt
operator|.
name|getDefinition
argument_list|()
argument_list|,
name|defList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|EndpointInfo
name|buildEndpoint
parameter_list|(
name|ServiceInfo
name|service
parameter_list|,
name|BindingInfo
name|bi
parameter_list|,
name|Port
name|port
parameter_list|)
block|{
name|List
name|elements
init|=
name|port
operator|.
name|getExtensibilityElements
argument_list|()
decl_stmt|;
name|String
name|ns
init|=
literal|null
decl_stmt|;
name|DestinationFactory
name|factory
init|=
literal|null
decl_stmt|;
name|EndpointInfo
name|ei
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|elements
operator|&&
name|elements
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ExtensibilityElement
name|el
range|:
name|CastUtils
operator|.
name|cast
argument_list|(
name|elements
argument_list|,
name|ExtensibilityElement
operator|.
name|class
argument_list|)
control|)
block|{
name|ns
operator|=
name|el
operator|.
name|getElementType
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
try|try
block|{
name|factory
operator|=
name|bus
operator|.
name|getExtension
argument_list|(
name|DestinationFactoryManager
operator|.
name|class
argument_list|)
operator|.
name|getDestinationFactory
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BusException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|ns
operator|=
operator|(
operator|(
name|ExtensibilityElement
operator|)
name|elements
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getElementType
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
comment|// get the transport id from bindingInfo
name|elements
operator|=
name|port
operator|.
name|getBinding
argument_list|()
operator|.
name|getExtensibilityElements
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|elements
operator|&&
name|elements
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ExtensibilityElement
name|el
range|:
name|CastUtils
operator|.
name|cast
argument_list|(
name|elements
argument_list|,
name|ExtensibilityElement
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|el
operator|instanceof
name|SOAPBinding
condition|)
block|{
name|ns
operator|=
call|(
name|String
call|)
argument_list|(
operator|(
name|SOAPBinding
operator|)
name|el
argument_list|)
operator|.
name|getTransportURI
argument_list|()
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|el
operator|instanceof
name|SOAP12Binding
condition|)
block|{
name|ns
operator|=
call|(
name|String
call|)
argument_list|(
operator|(
name|SOAP12Binding
operator|)
name|el
argument_list|)
operator|.
name|getTransportURI
argument_list|()
expr_stmt|;
break|break;
comment|// TODO: this is really ugly, but how to link between
comment|// this binding and this transport ?
block|}
elseif|else
if|if
condition|(
literal|"http://cxf.apache.org/bindings/jbi"
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getElementType
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|ns
operator|=
literal|"http://cxf.apache.org/transports/jbi"
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|ns
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|ignoreUnknownBindings
condition|)
block|{
return|return
literal|null
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"MISSING_DESTINATION_FACTORY"
argument_list|,
name|LOG
argument_list|,
name|port
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|WSDLRuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
try|try
block|{
name|factory
operator|=
name|bus
operator|.
name|getExtension
argument_list|(
name|DestinationFactoryManager
operator|.
name|class
argument_list|)
operator|.
name|getDestinationFactory
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BusException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
if|if
condition|(
name|factory
operator|instanceof
name|WSDLEndpointFactory
condition|)
block|{
name|WSDLEndpointFactory
name|wFactory
init|=
operator|(
name|WSDLEndpointFactory
operator|)
name|factory
decl_stmt|;
name|ei
operator|=
name|wFactory
operator|.
name|createEndpointInfo
argument_list|(
name|service
argument_list|,
name|bi
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ei
operator|==
literal|null
condition|)
block|{
name|ei
operator|=
operator|new
name|EndpointInfo
argument_list|(
name|service
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
name|ei
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
name|service
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|port
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setBinding
argument_list|(
name|bi
argument_list|)
expr_stmt|;
name|copyExtensors
argument_list|(
name|ei
argument_list|,
name|port
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|ei
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|service
operator|.
name|addEndpoint
argument_list|(
name|ei
argument_list|)
expr_stmt|;
name|DescriptionInfo
name|d
init|=
name|service
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|d
condition|)
block|{
name|ei
operator|.
name|setDescription
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|.
name|getDescribed
argument_list|()
operator|.
name|add
argument_list|(
name|ei
argument_list|)
expr_stmt|;
block|}
return|return
name|ei
return|;
block|}
specifier|public
name|BindingInfo
name|buildBinding
parameter_list|(
name|ServiceInfo
name|service
parameter_list|,
name|Binding
name|binding
parameter_list|)
block|{
name|BindingInfo
name|bi
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|ns
init|=
operator|new
name|StringBuffer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|BindingFactory
name|factory
init|=
name|WSDLServiceUtils
operator|.
name|getBindingFactory
argument_list|(
name|binding
argument_list|,
name|bus
argument_list|,
name|ns
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|instanceof
name|WSDLBindingFactory
condition|)
block|{
name|WSDLBindingFactory
name|wFactory
init|=
operator|(
name|WSDLBindingFactory
operator|)
name|factory
decl_stmt|;
name|bi
operator|=
name|wFactory
operator|.
name|createBindingInfo
argument_list|(
name|service
argument_list|,
name|binding
argument_list|,
name|ns
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensors
argument_list|(
name|bi
argument_list|,
name|binding
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|bi
argument_list|,
name|binding
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bi
operator|==
literal|null
condition|)
block|{
name|bi
operator|=
operator|new
name|BindingInfo
argument_list|(
name|service
argument_list|,
name|ns
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bi
operator|.
name|setName
argument_list|(
name|binding
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensors
argument_list|(
name|bi
argument_list|,
name|binding
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|bi
argument_list|,
name|binding
argument_list|)
expr_stmt|;
for|for
control|(
name|BindingOperation
name|bop
range|:
name|cast
argument_list|(
name|binding
operator|.
name|getBindingOperations
argument_list|()
argument_list|,
name|BindingOperation
operator|.
name|class
argument_list|)
control|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"binding operation name is "
operator|+
name|bop
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|inName
init|=
literal|null
decl_stmt|;
name|String
name|outName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bop
operator|.
name|getBindingInput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|inName
operator|=
name|bop
operator|.
name|getBindingInput
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bop
operator|.
name|getBindingOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|outName
operator|=
name|bop
operator|.
name|getBindingOutput
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|BindingOperationInfo
name|bop2
init|=
name|bi
operator|.
name|buildOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|service
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|bop
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|inName
argument_list|,
name|outName
argument_list|)
decl_stmt|;
if|if
condition|(
name|bop2
operator|!=
literal|null
condition|)
block|{
name|copyExtensors
argument_list|(
name|bop2
argument_list|,
name|bop
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|bop2
argument_list|,
name|bop
argument_list|)
expr_stmt|;
name|bi
operator|.
name|addOperation
argument_list|(
name|bop2
argument_list|)
expr_stmt|;
if|if
condition|(
name|bop
operator|.
name|getBindingInput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|copyExtensors
argument_list|(
name|bop2
operator|.
name|getInput
argument_list|()
argument_list|,
name|bop
operator|.
name|getBindingInput
argument_list|()
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|bop2
operator|.
name|getInput
argument_list|()
argument_list|,
name|bop
operator|.
name|getBindingInput
argument_list|()
argument_list|)
expr_stmt|;
name|handleHeader
argument_list|(
name|bop2
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bop
operator|.
name|getBindingOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|copyExtensors
argument_list|(
name|bop2
operator|.
name|getOutput
argument_list|()
argument_list|,
name|bop
operator|.
name|getBindingOutput
argument_list|()
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|bop2
operator|.
name|getOutput
argument_list|()
argument_list|,
name|bop
operator|.
name|getBindingOutput
argument_list|()
argument_list|)
expr_stmt|;
name|handleHeader
argument_list|(
name|bop2
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BindingFault
name|f
range|:
name|cast
argument_list|(
name|bop
operator|.
name|getBindingFaults
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|BindingFault
operator|.
name|class
argument_list|)
control|)
block|{
name|BindingFaultInfo
name|bif
init|=
name|bop2
operator|.
name|getFault
argument_list|(
operator|new
name|QName
argument_list|(
name|service
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|copyExtensors
argument_list|(
name|bif
argument_list|,
name|bop
operator|.
name|getBindingFault
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|bif
argument_list|,
name|bop
operator|.
name|getBindingFault
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|service
operator|.
name|addBinding
argument_list|(
name|bi
argument_list|)
expr_stmt|;
name|DescriptionInfo
name|d
init|=
name|service
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|d
condition|)
block|{
name|bi
operator|.
name|setDescription
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|.
name|getDescribed
argument_list|()
operator|.
name|add
argument_list|(
name|bi
argument_list|)
expr_stmt|;
block|}
return|return
name|bi
return|;
block|}
specifier|private
name|void
name|handleHeader
parameter_list|(
name|BindingMessageInfo
name|bindingMessageInfo
parameter_list|)
block|{
comment|// mark all message part which should be in header
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|extensiblilityElement
init|=
name|bindingMessageInfo
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// for non-soap binding, the extensiblilityElement could be null
if|if
condition|(
name|extensiblilityElement
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// for (ExtensibilityElement element : extensiblilityElement) {
comment|// LOG.info("the extensibility is " + element.getClass().getName());
comment|// if (element instanceof SOAPHeader) {
comment|// LOG.info("the header is " + ((SOAPHeader)element).getPart());
comment|// }
comment|// }
block|}
specifier|public
name|void
name|buildInterface
parameter_list|(
name|ServiceInfo
name|si
parameter_list|,
name|PortType
name|p
parameter_list|)
block|{
name|InterfaceInfo
name|inf
init|=
name|si
operator|.
name|createInterface
argument_list|(
name|p
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
name|DescriptionInfo
name|d
init|=
name|si
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|d
condition|)
block|{
name|inf
operator|.
name|setDescription
argument_list|(
name|si
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|getDescribed
argument_list|()
operator|.
name|add
argument_list|(
name|inf
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|copyExtensors
argument_list|(
name|inf
argument_list|,
name|p
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|copyExtensionAttributes
argument_list|(
name|inf
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|recordOriginal
condition|)
block|{
name|inf
operator|.
name|setProperty
argument_list|(
name|WSDL_PORTTYPE
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Operation
name|op
range|:
name|cast
argument_list|(
name|p
operator|.
name|getOperations
argument_list|()
argument_list|,
name|Operation
operator|.
name|class
argument_list|)
control|)
block|{
name|buildInterfaceOperation
argument_list|(
name|inf
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|buildInterfaceOperation
parameter_list|(
name|InterfaceInfo
name|inf
parameter_list|,
name|Operation
name|op
parameter_list|)
block|{
name|OperationInfo
name|opInfo
init|=
name|inf
operator|.
name|addOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|inf
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|op
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|recordOriginal
condition|)
block|{
name|opInfo
operator|.
name|setProperty
argument_list|(
name|WSDL_OPERATION
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|porderList
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
operator|)
name|op
operator|.
name|getParameterOrdering
argument_list|()
argument_list|)
decl_stmt|;
name|opInfo
operator|.
name|setParameterOrdering
argument_list|(
name|porderList
argument_list|)
expr_stmt|;
name|this
operator|.
name|copyExtensors
argument_list|(
name|opInfo
argument_list|,
name|op
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|copyExtensionAttributes
argument_list|(
name|opInfo
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|Input
name|input
init|=
name|op
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|input
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSDLRuntimeException
argument_list|(
name|LOG
argument_list|,
literal|"NO_MESSAGE"
argument_list|,
literal|"input"
argument_list|,
name|op
operator|.
name|getName
argument_list|()
argument_list|,
name|input
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|MessageInfo
name|minfo
init|=
name|opInfo
operator|.
name|createMessage
argument_list|(
name|input
operator|.
name|getMessage
argument_list|()
operator|.
name|getQName
argument_list|()
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|)
decl_stmt|;
name|opInfo
operator|.
name|setInput
argument_list|(
name|input
operator|.
name|getName
argument_list|()
argument_list|,
name|minfo
argument_list|)
expr_stmt|;
name|buildMessage
argument_list|(
name|minfo
argument_list|,
name|input
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensors
argument_list|(
name|minfo
argument_list|,
name|input
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|minfo
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
name|Output
name|output
init|=
name|op
operator|.
name|getOutput
argument_list|()
decl_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|output
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSDLRuntimeException
argument_list|(
name|LOG
argument_list|,
literal|"NO_MESSAGE"
argument_list|,
literal|"output"
argument_list|,
name|op
operator|.
name|getName
argument_list|()
argument_list|,
name|output
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|MessageInfo
name|minfo
init|=
name|opInfo
operator|.
name|createMessage
argument_list|(
name|output
operator|.
name|getMessage
argument_list|()
operator|.
name|getQName
argument_list|()
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|OUTPUT
argument_list|)
decl_stmt|;
name|opInfo
operator|.
name|setOutput
argument_list|(
name|output
operator|.
name|getName
argument_list|()
argument_list|,
name|minfo
argument_list|)
expr_stmt|;
name|buildMessage
argument_list|(
name|minfo
argument_list|,
name|output
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensors
argument_list|(
name|minfo
argument_list|,
name|output
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|minfo
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m
init|=
name|op
operator|.
name|getFaults
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|rawentry
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Fault
argument_list|>
name|entry
init|=
name|cast
argument_list|(
name|rawentry
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Fault
operator|.
name|class
argument_list|)
decl_stmt|;
name|FaultInfo
name|finfo
init|=
name|opInfo
operator|.
name|addFault
argument_list|(
operator|new
name|QName
argument_list|(
name|inf
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
name|buildMessage
argument_list|(
name|finfo
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensors
argument_list|(
name|finfo
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensionAttributes
argument_list|(
name|finfo
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkForWrapped
argument_list|(
name|opInfo
argument_list|,
name|allowRefs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|checkForWrapped
parameter_list|(
name|OperationInfo
name|opInfo
parameter_list|,
name|boolean
name|relaxed
parameter_list|)
block|{
name|checkForWrapped
argument_list|(
name|opInfo
argument_list|,
name|relaxed
argument_list|,
name|relaxed
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|checkForWrapped
parameter_list|(
name|OperationInfo
name|opInfo
parameter_list|,
name|boolean
name|allowRefs
parameter_list|,
name|boolean
name|relaxed
parameter_list|)
block|{
name|MessageInfo
name|inputMessage
init|=
name|opInfo
operator|.
name|getInput
argument_list|()
decl_stmt|;
name|MessageInfo
name|outputMessage
init|=
name|opInfo
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|boolean
name|passedRule
init|=
literal|true
decl_stmt|;
comment|// RULE No.1:
comment|// The operation's input and output message (if present) each contain
comment|// only a single part
comment|// input message must exist
if|if
condition|(
name|inputMessage
operator|==
literal|null
operator|||
name|inputMessage
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
operator|(
name|outputMessage
operator|!=
literal|null
operator|&&
name|outputMessage
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
condition|)
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|passedRule
condition|)
block|{
return|return;
block|}
name|SchemaCollection
name|schemas
init|=
name|opInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getXmlSchemaCollection
argument_list|()
decl_stmt|;
name|XmlSchemaElement
name|inputEl
init|=
literal|null
decl_stmt|;
name|XmlSchemaElement
name|outputEl
init|=
literal|null
decl_stmt|;
comment|// RULE No.2:
comment|// The input message part refers to a global element declaration whose
comment|// local name is equal to the operation name.
name|MessagePartInfo
name|inputPart
init|=
name|inputMessage
operator|.
name|getMessagePartByIndex
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|inputPart
operator|.
name|isElement
argument_list|()
condition|)
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|QName
name|inputElementName
init|=
name|inputPart
operator|.
name|getElementQName
argument_list|()
decl_stmt|;
name|inputEl
operator|=
name|schemas
operator|.
name|getElementByQName
argument_list|(
name|inputElementName
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputEl
operator|==
literal|null
condition|)
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|opInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|inputElementName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|passedRule
operator|=
name|relaxed
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|passedRule
condition|)
block|{
return|return;
block|}
comment|// RULE No.3:
comment|// The output message part refers to a global element declaration
name|MessagePartInfo
name|outputPart
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|outputMessage
operator|!=
literal|null
operator|&&
name|outputMessage
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|outputPart
operator|=
name|outputMessage
operator|.
name|getMessagePartByIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputPart
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|outputPart
operator|.
name|isElement
argument_list|()
operator|||
name|schemas
operator|.
name|getElementByQName
argument_list|(
name|outputPart
operator|.
name|getElementQName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outputEl
operator|=
name|schemas
operator|.
name|getElementByQName
argument_list|(
name|outputPart
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|passedRule
condition|)
block|{
return|return;
block|}
comment|// RULE No.4 and No5:
comment|// wrapper element should be pure complex type
comment|// Now lets see if we have any attributes...
comment|// This should probably look at the restricted and substitute types too.
name|OperationInfo
name|unwrapped
init|=
operator|new
name|UnwrappedOperationInfo
argument_list|(
name|opInfo
argument_list|)
decl_stmt|;
name|MessageInfo
name|unwrappedInput
init|=
operator|new
name|MessageInfo
argument_list|(
name|unwrapped
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|,
name|inputMessage
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageInfo
name|unwrappedOutput
init|=
literal|null
decl_stmt|;
name|XmlSchemaComplexType
name|xsct
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inputEl
operator|.
name|getSchemaType
argument_list|()
operator|instanceof
name|XmlSchemaComplexType
condition|)
block|{
name|xsct
operator|=
operator|(
name|XmlSchemaComplexType
operator|)
name|inputEl
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasAttributes
argument_list|(
name|xsct
argument_list|)
operator|||
operator|(
name|inputEl
operator|.
name|isNillable
argument_list|()
operator|&&
operator|!
name|relaxed
operator|)
operator|||
operator|!
name|isWrappableSequence
argument_list|(
name|xsct
argument_list|,
name|inputEl
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|unwrappedInput
argument_list|,
name|allowRefs
argument_list|)
condition|)
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|passedRule
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|outputMessage
operator|!=
literal|null
condition|)
block|{
name|unwrappedOutput
operator|=
operator|new
name|MessageInfo
argument_list|(
name|unwrapped
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|OUTPUT
argument_list|,
name|outputMessage
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputEl
operator|!=
literal|null
operator|&&
name|outputEl
operator|.
name|getSchemaType
argument_list|()
operator|instanceof
name|XmlSchemaComplexType
condition|)
block|{
name|xsct
operator|=
operator|(
name|XmlSchemaComplexType
operator|)
name|outputEl
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
if|if
condition|(
name|xsct
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|hasAttributes
argument_list|(
name|xsct
argument_list|)
operator|||
operator|(
name|outputEl
operator|.
name|isNillable
argument_list|()
operator|&&
operator|!
name|relaxed
operator|)
operator|||
operator|!
name|isWrappableSequence
argument_list|(
name|xsct
argument_list|,
name|outputEl
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|unwrappedOutput
argument_list|,
name|allowRefs
argument_list|)
condition|)
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|passedRule
condition|)
block|{
return|return;
block|}
comment|// we are wrappable!!
name|opInfo
operator|.
name|setUnwrappedOperation
argument_list|(
name|unwrapped
argument_list|)
expr_stmt|;
name|unwrapped
operator|.
name|setInput
argument_list|(
name|opInfo
operator|.
name|getInputName
argument_list|()
argument_list|,
name|unwrappedInput
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputMessage
operator|!=
literal|null
condition|)
block|{
name|unwrapped
operator|.
name|setOutput
argument_list|(
name|opInfo
operator|.
name|getOutputName
argument_list|()
argument_list|,
name|unwrappedOutput
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|hasAttributes
parameter_list|(
name|XmlSchemaComplexType
name|complexType
parameter_list|)
block|{
comment|// Now lets see if we have any attributes...
comment|// This should probably look at the restricted and substitute types too.
if|if
condition|(
name|complexType
operator|.
name|getAnyAttribute
argument_list|()
operator|!=
literal|null
operator|||
name|complexType
operator|.
name|getAttributes
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isWrappableSequence
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|MessageInfo
name|wrapper
parameter_list|,
name|boolean
name|allowRefs
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|getParticle
argument_list|()
operator|instanceof
name|XmlSchemaSequence
condition|)
block|{
name|XmlSchemaSequence
name|seq
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|type
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|XmlSchemaObjectCollection
name|items
init|=
name|seq
operator|.
name|getItems
argument_list|()
decl_stmt|;
name|boolean
name|ret
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|items
operator|.
name|getCount
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|XmlSchemaObject
name|o
init|=
name|items
operator|.
name|getItem
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|XmlSchemaElement
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|XmlSchemaElement
name|el
init|=
operator|(
name|XmlSchemaElement
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|el
operator|.
name|getSchemaTypeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|MessagePartInfo
name|mpi
init|=
name|wrapper
operator|.
name|addMessagePart
argument_list|(
operator|new
name|QName
argument_list|(
name|namespaceURI
argument_list|,
name|el
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mpi
operator|.
name|setTypeQName
argument_list|(
name|el
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setConcreteName
argument_list|(
name|el
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setElementQName
argument_list|(
name|el
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setXmlSchema
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|el
operator|.
name|getRefName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|MessagePartInfo
name|mpi
init|=
name|wrapper
operator|.
name|addMessagePart
argument_list|(
name|el
operator|.
name|getRefName
argument_list|()
argument_list|)
decl_stmt|;
name|mpi
operator|.
name|setTypeQName
argument_list|(
name|el
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setElementQName
argument_list|(
name|el
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setXmlSchema
argument_list|(
name|el
argument_list|)
expr_stmt|;
comment|// element reference is not permitted for wrapper element
if|if
condition|(
operator|!
name|allowRefs
condition|)
block|{
name|ret
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// anonymous type
name|MessagePartInfo
name|mpi
init|=
name|wrapper
operator|.
name|addMessagePart
argument_list|(
operator|new
name|QName
argument_list|(
name|namespaceURI
argument_list|,
name|el
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mpi
operator|.
name|setConcreteName
argument_list|(
name|el
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setElementQName
argument_list|(
name|mpi
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setXmlSchema
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getParticle
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|getContentModel
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|type
operator|.
name|getContentModel
argument_list|()
operator|.
name|getContent
argument_list|()
operator|instanceof
name|XmlSchemaComplexContentExtension
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|buildMessage
parameter_list|(
name|AbstractMessageContainer
name|minfo
parameter_list|,
name|Message
name|msg
parameter_list|)
block|{
name|SchemaCollection
name|schemas
init|=
name|minfo
operator|.
name|getOperation
argument_list|()
operator|.
name|getInterface
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getXmlSchemaCollection
argument_list|()
decl_stmt|;
name|List
name|orderedParam
init|=
name|msg
operator|.
name|getOrderedParts
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Part
name|part
range|:
name|cast
argument_list|(
name|orderedParam
argument_list|,
name|Part
operator|.
name|class
argument_list|)
control|)
block|{
name|MessagePartInfo
name|pi
init|=
name|minfo
operator|.
name|addMessagePart
argument_list|(
operator|new
name|QName
argument_list|(
name|minfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|part
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|getTypeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pi
operator|.
name|setTypeQName
argument_list|(
name|part
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|pi
operator|.
name|setElement
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pi
operator|.
name|setXmlSchema
argument_list|(
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|part
operator|.
name|getTypeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|.
name|getElementName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pi
operator|.
name|setElementQName
argument_list|(
name|part
operator|.
name|getElementName
argument_list|()
argument_list|)
expr_stmt|;
name|XmlSchemaElement
name|schemaElement
init|=
name|schemas
operator|.
name|getElementByQName
argument_list|(
name|part
operator|.
name|getElementName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|schemaElement
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|errorMessage
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"WSDL4J_BAD_ELEMENT_PART"
argument_list|,
name|LOG
argument_list|,
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|part
operator|.
name|getElementName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|WSDLRuntimeException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
name|pi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pi
operator|.
name|setXmlSchema
argument_list|(
name|schemaElement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|errorMessage
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"PART_NO_NAME_NO_TYPE"
argument_list|,
name|LOG
argument_list|,
name|part
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|WSDLRuntimeException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

