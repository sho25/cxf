begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PreDestroy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|spring
operator|.
name|MapProvider
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ConduitInitiatorManagerImpl
implements|implements
name|ConduitInitiatorManager
block|{
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|ConduitInitiatorManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ConduitInitiator
argument_list|>
name|conduitInitiators
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|public
name|ConduitInitiatorManagerImpl
parameter_list|()
block|{
name|conduitInitiators
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ConduitInitiator
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ConduitInitiatorManagerImpl
parameter_list|(
name|MapProvider
argument_list|<
name|String
argument_list|,
name|ConduitInitiator
argument_list|>
name|conduitInitiators
parameter_list|)
block|{
name|this
operator|.
name|conduitInitiators
operator|=
name|conduitInitiators
operator|.
name|createMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ConduitInitiatorManagerImpl
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ConduitInitiator
argument_list|>
name|conduitInitiators
parameter_list|)
block|{
name|this
operator|.
name|conduitInitiators
operator|=
name|conduitInitiators
expr_stmt|;
block|}
comment|/**      * Spring is slow to resolve constructors. This accessor allows      * for initialization via a property.      * @param mapProvider      */
specifier|public
name|void
name|setMapProvider
parameter_list|(
name|MapProvider
argument_list|<
name|String
argument_list|,
name|ConduitInitiator
argument_list|>
name|mapProvider
parameter_list|)
block|{
name|this
operator|.
name|conduitInitiators
operator|=
name|mapProvider
operator|.
name|createMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Resource
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|register
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|bus
condition|)
block|{
name|bus
operator|.
name|setExtension
argument_list|(
name|this
argument_list|,
name|ConduitInitiatorManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.cxf.bus.ConduitInitiatorManager#registerConduitInitiator(java.lang.String,      *      org.apache.cxf.transports.ConduitInitiator)      */
specifier|public
name|void
name|registerConduitInitiator
parameter_list|(
name|String
name|namespace
parameter_list|,
name|ConduitInitiator
name|factory
parameter_list|)
block|{
name|conduitInitiators
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.cxf.bus.ConduitInitiatorManager#deregisterConduitInitiator(java.lang.String)      */
specifier|public
name|void
name|deregisterConduitInitiator
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|conduitInitiators
operator|.
name|remove
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.cxf.bus.ConduitInitiatorManager#ConduitInitiator(java.lang.String)      */
comment|/**      * Returns the conduit initiator for the given namespace, constructing it      * (and storing in the cache for future reference) if necessary, using its      * list of factory classname to namespace mappings.      *       * @param namespace the namespace.      */
specifier|public
name|ConduitInitiator
name|getConduitInitiator
parameter_list|(
name|String
name|namespace
parameter_list|)
throws|throws
name|BusException
block|{
name|ConduitInitiator
name|factory
init|=
name|conduitInitiators
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|factory
condition|)
block|{
throw|throw
operator|new
name|BusException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"NO_CONDUIT_INITIATOR"
argument_list|,
name|BUNDLE
argument_list|,
name|namespace
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|factory
return|;
block|}
annotation|@
name|PreDestroy
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
comment|// nothing to do
block|}
specifier|public
name|ConduitInitiator
name|getConduitInitiatorForUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

