begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingFault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingInput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingOperation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingOutput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Import
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Port
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|PortType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|WSDLElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|WSDLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|AttributeExtensible
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ElementExtensible
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|UnknownExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|schema
operator|.
name|SchemaImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|NSManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|AbstractMessageContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|AbstractPropertiesHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingFaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|SchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLManager
import|;
end_import

begin_comment
comment|/**  * Consume a set of service definitions and produce a WSDL model. The ServiceInfo objects  * contain the bindings, operations, and ports, plus XMLSchema schemas.   *   * Each wsdl:definition has to have a single target namespace. The first service in the list  * defines the TNS of the overall WSDL. If a subsequent service has a divergent TNS, then  * the code creates a new definition element (i.e., Definition object), and imports it into  * the top-level object.  */
end_comment

begin_class
specifier|public
class|class
name|ServiceWSDLBuilder
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns2prefix
decl_stmt|;
specifier|private
name|Definition
name|definition
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|services
decl_stmt|;
specifier|private
name|boolean
name|useSchemaImports
decl_stmt|;
specifier|private
name|String
name|baseFileName
decl_stmt|;
specifier|private
name|int
name|xsdCount
decl_stmt|;
specifier|private
specifier|final
name|Bus
name|bus
decl_stmt|;
specifier|private
specifier|final
name|NSManager
name|nsMan
decl_stmt|;
specifier|private
name|Document
name|docDoc
decl_stmt|;
comment|/**      * Sets up the builder on a bus with a list of services.      * @param b the bus.      * @param services the services.      */
specifier|public
name|ServiceWSDLBuilder
parameter_list|(
name|Bus
name|b
parameter_list|,
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|services
parameter_list|)
block|{
name|this
operator|.
name|services
operator|=
name|services
expr_stmt|;
name|bus
operator|=
name|b
expr_stmt|;
name|ns2prefix
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|nsMan
operator|=
operator|new
name|NSManager
argument_list|()
expr_stmt|;
block|}
comment|/**      * For callers who prefer varargs, an inline list of ServiceInfo objects instead of       * a List. Primarily used for tests or other callers with only one service in hand.       * @param b the bus.      * @param services the services.      */
specifier|public
name|ServiceWSDLBuilder
parameter_list|(
name|Bus
name|b
parameter_list|,
name|ServiceInfo
modifier|...
name|services
parameter_list|)
block|{
name|this
argument_list|(
name|b
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|services
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set whether to emit references to imported schema files.      * This is only effective for {@link #build(Map)}, which is passed additional schemas for       * import. {@link #build()} resets this flag to false.      * @param b true to use imports.      */
specifier|public
name|void
name|setUseSchemaImports
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|useSchemaImports
operator|=
name|b
expr_stmt|;
block|}
comment|/**      * Base filename for imported files.      * @param s pathname.      */
specifier|public
name|void
name|setBaseFileName
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|baseFileName
operator|=
name|s
expr_stmt|;
block|}
comment|/**      * Create the WSDL Definition object and return it. This function will never create      * imports to schemas.      * @return the WSDL definition.      * @throws WSDLException      */
specifier|public
name|Definition
name|build
parameter_list|()
throws|throws
name|WSDLException
block|{
name|useSchemaImports
operator|=
literal|false
expr_stmt|;
return|return
name|build
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Create the WSDL Definition object and return it. This function respects the       * setting of {@link #setUseSchemaImports(boolean)}.      * @param imports A set of schema imports to either reference as imports or read and       * then inline.      * @return the WSDL definition      * @throws WSDLException      */
specifier|public
name|Definition
name|build
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaInfo
argument_list|>
name|imports
parameter_list|)
throws|throws
name|WSDLException
block|{
try|try
block|{
name|definition
operator|=
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProperty
argument_list|(
name|WSDLServiceBuilder
operator|.
name|WSDL_DEFINITION
argument_list|,
name|Definition
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
if|if
condition|(
name|definition
operator|==
literal|null
condition|)
block|{
name|ServiceInfo
name|si
init|=
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|definition
operator|=
name|newDefinition
argument_list|(
name|si
operator|.
name|getName
argument_list|()
argument_list|,
name|si
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
name|WSDLConstants
operator|.
name|CONVENTIONAL_TNS_PREFIX
argument_list|,
name|si
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|definition
argument_list|)
expr_stmt|;
name|addExtensibilityElements
argument_list|(
name|definition
argument_list|,
name|getWSDL11Extensors
argument_list|(
name|si
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|PortType
argument_list|>
name|portTypes
init|=
operator|new
name|HashSet
argument_list|<
name|PortType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceInfo
name|service
range|:
name|services
control|)
block|{
name|Definition
name|portTypeDef
init|=
name|definition
decl_stmt|;
if|if
condition|(
operator|!
name|isSameTNS
argument_list|(
name|service
argument_list|)
condition|)
block|{
name|portTypeDef
operator|=
name|newDefinition
argument_list|(
name|service
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|service
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|Import
name|wsdlImport
init|=
name|definition
operator|.
name|createImport
argument_list|()
decl_stmt|;
name|String
name|tns
init|=
name|service
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|wsdlImport
operator|.
name|setDefinition
argument_list|(
name|portTypeDef
argument_list|)
expr_stmt|;
name|wsdlImport
operator|.
name|setNamespaceURI
argument_list|(
name|tns
argument_list|)
expr_stmt|;
name|wsdlImport
operator|.
name|setLocationURI
argument_list|(
name|service
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|".wsdl"
argument_list|)
expr_stmt|;
name|definition
operator|.
name|addImport
argument_list|(
name|wsdlImport
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
name|getPrefix
argument_list|(
name|tns
argument_list|)
argument_list|,
name|tns
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
name|portTypes
operator|.
name|add
argument_list|(
name|buildPortType
argument_list|(
name|service
operator|.
name|getInterface
argument_list|()
argument_list|,
name|portTypeDef
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|service
operator|.
name|getSchemas
argument_list|()
operator|!=
literal|null
operator|&&
name|service
operator|.
name|getSchemas
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buildTypes
argument_list|(
name|service
operator|.
name|getSchemas
argument_list|()
argument_list|,
name|imports
argument_list|,
name|portTypeDef
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ServiceInfo
name|service
range|:
name|services
control|)
block|{
name|buildBinding
argument_list|(
name|service
operator|.
name|getBindings
argument_list|()
argument_list|,
name|portTypes
argument_list|)
expr_stmt|;
name|buildService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|definition
return|;
block|}
specifier|private
name|boolean
name|isSameTNS
parameter_list|(
specifier|final
name|ServiceInfo
name|service
parameter_list|)
block|{
return|return
name|service
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|service
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Definition
name|newDefinition
parameter_list|(
specifier|final
name|QName
name|name
parameter_list|,
name|String
name|targetNamespace
parameter_list|)
block|{
name|Definition
name|d
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
operator|.
name|getWSDLFactory
argument_list|()
operator|.
name|newDefinition
argument_list|()
decl_stmt|;
name|d
operator|.
name|setExtensionRegistry
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
operator|.
name|getExtensionRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|d
operator|.
name|setTargetNamespace
argument_list|(
name|targetNamespace
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
name|WSDLConstants
operator|.
name|NP_SCHEMA_XSD
argument_list|,
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
comment|/**       * Return a list of ExtensibilityElements for a particular component, such as a BindingFaultInfo.      * This perhaps should be protected.      * @param holder The item containing the extensibility elements.      * @return the extensibility elements.      */
specifier|public
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|getWSDL11Extensors
parameter_list|(
name|AbstractPropertiesHolder
name|holder
parameter_list|)
block|{
if|if
condition|(
name|holder
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|holder
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
return|;
block|}
specifier|protected
name|void
name|addDocumentation
parameter_list|(
name|WSDLElement
name|wsdlel
parameter_list|,
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|docDoc
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|docDoc
operator|=
name|XMLUtils
operator|.
name|newDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
name|Element
name|el
init|=
name|docDoc
operator|.
name|createElementNS
argument_list|(
name|WSDLConstants
operator|.
name|NS_WSDL11
argument_list|,
literal|"wsdl:documentation"
argument_list|)
decl_stmt|;
name|el
operator|.
name|setTextContent
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|wsdlel
operator|.
name|setDocumentationElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addExtensibilityElements
parameter_list|(
name|ElementExtensible
name|elementExtensible
parameter_list|,
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|extensibilityElements
parameter_list|)
block|{
if|if
condition|(
name|extensibilityElements
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExtensibilityElement
name|element
range|:
name|extensibilityElements
control|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|UnknownExtensibilityElement
condition|)
block|{
name|UnknownExtensibilityElement
name|uee
init|=
operator|(
name|UnknownExtensibilityElement
operator|)
name|element
decl_stmt|;
name|String
name|pfx
init|=
name|uee
operator|.
name|getElement
argument_list|()
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|addNamespace
argument_list|(
name|pfx
argument_list|,
name|element
operator|.
name|getElementType
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QName
name|qn
init|=
name|element
operator|.
name|getElementType
argument_list|()
decl_stmt|;
name|addNamespace
argument_list|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|elementExtensible
operator|.
name|addExtensibilityElement
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addExtensibilityAttributes
parameter_list|(
name|AttributeExtensible
name|attributeExtensible
parameter_list|,
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|attributes
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|QName
name|qname
range|:
name|attributes
operator|.
name|keySet
argument_list|()
control|)
block|{
name|addNamespace
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|attributeExtensible
operator|.
name|setExtensionAttribute
argument_list|(
name|qname
argument_list|,
name|attributes
operator|.
name|get
argument_list|(
name|qname
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|buildTypes
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|SchemaInfo
argument_list|>
name|schemas
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaInfo
argument_list|>
name|imports
parameter_list|,
specifier|final
name|Definition
name|def
parameter_list|)
block|{
name|Types
name|types
init|=
name|def
operator|.
name|createTypes
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|XMLUtils
operator|.
name|newDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"DOM configuration problem"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Element
name|nd
init|=
name|XMLUtils
operator|.
name|createElementNS
argument_list|(
name|doc
argument_list|,
operator|new
name|QName
argument_list|(
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
argument_list|,
literal|"schema"
argument_list|)
argument_list|)
decl_stmt|;
name|nd
operator|.
name|setAttribute
argument_list|(
literal|"xmlns"
argument_list|,
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
argument_list|)
expr_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|nd
argument_list|)
expr_stmt|;
for|for
control|(
name|SchemaInfo
name|schemaInfo
range|:
name|schemas
control|)
block|{
if|if
condition|(
operator|!
name|useSchemaImports
condition|)
block|{
name|SchemaImpl
name|schemaImpl
init|=
operator|new
name|SchemaImpl
argument_list|()
decl_stmt|;
name|schemaImpl
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|schemaImpl
operator|.
name|setElementType
argument_list|(
name|WSDLConstants
operator|.
name|QNAME_SCHEMA
argument_list|)
expr_stmt|;
name|schemaImpl
operator|.
name|setElement
argument_list|(
name|schemaInfo
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|types
operator|.
name|addExtensibilityElement
argument_list|(
name|schemaImpl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//imports
name|String
name|name
init|=
name|baseFileName
operator|+
literal|"_schema"
operator|+
operator|(
operator|++
name|xsdCount
operator|)
operator|+
literal|".xsd"
decl_stmt|;
name|Element
name|imp
init|=
name|XMLUtils
operator|.
name|createElementNS
argument_list|(
name|doc
argument_list|,
operator|new
name|QName
argument_list|(
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
argument_list|,
literal|"import"
argument_list|)
argument_list|)
decl_stmt|;
name|imp
operator|.
name|setAttribute
argument_list|(
literal|"schemaLocation"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setAttribute
argument_list|(
literal|"namespace"
argument_list|,
name|schemaInfo
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|nd
operator|.
name|appendChild
argument_list|(
name|imp
argument_list|)
expr_stmt|;
name|imports
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|schemaInfo
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|useSchemaImports
condition|)
block|{
name|SchemaImpl
name|schemaImpl
init|=
operator|new
name|SchemaImpl
argument_list|()
decl_stmt|;
name|schemaImpl
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|schemaImpl
operator|.
name|setElementType
argument_list|(
name|WSDLConstants
operator|.
name|QNAME_SCHEMA
argument_list|)
expr_stmt|;
name|schemaImpl
operator|.
name|setElement
argument_list|(
name|nd
argument_list|)
expr_stmt|;
name|types
operator|.
name|addExtensibilityElement
argument_list|(
name|schemaImpl
argument_list|)
expr_stmt|;
block|}
name|def
operator|.
name|setTypes
argument_list|(
name|types
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|buildBinding
parameter_list|(
name|Collection
argument_list|<
name|BindingInfo
argument_list|>
name|bindingInfos
parameter_list|,
name|Collection
argument_list|<
name|PortType
argument_list|>
name|portTypes
parameter_list|)
block|{
name|Binding
name|binding
init|=
literal|null
decl_stmt|;
for|for
control|(
name|BindingInfo
name|bindingInfo
range|:
name|bindingInfos
control|)
block|{
name|binding
operator|=
name|definition
operator|.
name|createBinding
argument_list|()
expr_stmt|;
name|addDocumentation
argument_list|(
name|binding
argument_list|,
name|bindingInfo
operator|.
name|getDocumentation
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setUndefined
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|PortType
name|portType
range|:
name|portTypes
control|)
block|{
if|if
condition|(
name|portType
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|bindingInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|binding
operator|.
name|setPortType
argument_list|(
name|portType
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|binding
operator|.
name|setQName
argument_list|(
name|bindingInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|buildBindingOperation
argument_list|(
name|definition
argument_list|,
name|binding
argument_list|,
name|bindingInfo
operator|.
name|getOperations
argument_list|()
argument_list|)
expr_stmt|;
name|addExtensibilityElements
argument_list|(
name|binding
argument_list|,
name|getWSDL11Extensors
argument_list|(
name|bindingInfo
argument_list|)
argument_list|)
expr_stmt|;
name|definition
operator|.
name|addBinding
argument_list|(
name|binding
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|buildBindingOperation
parameter_list|(
name|Definition
name|def
parameter_list|,
name|Binding
name|binding
parameter_list|,
name|Collection
argument_list|<
name|BindingOperationInfo
argument_list|>
name|bindingOperationInfos
parameter_list|)
block|{
name|BindingOperation
name|bindingOperation
init|=
literal|null
decl_stmt|;
for|for
control|(
name|BindingOperationInfo
name|bindingOperationInfo
range|:
name|bindingOperationInfos
control|)
block|{
name|bindingOperation
operator|=
name|def
operator|.
name|createBindingOperation
argument_list|()
expr_stmt|;
name|addDocumentation
argument_list|(
name|bindingOperation
argument_list|,
name|bindingOperationInfo
operator|.
name|getDocumentation
argument_list|()
argument_list|)
expr_stmt|;
name|bindingOperation
operator|.
name|setName
argument_list|(
name|bindingOperationInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Operation
name|operation
range|:
name|CastUtils
operator|.
name|cast
argument_list|(
name|binding
operator|.
name|getPortType
argument_list|()
operator|.
name|getOperations
argument_list|()
argument_list|,
name|Operation
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|operation
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|bindingOperation
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|bindingOperation
operator|.
name|setOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|buildBindingInput
argument_list|(
name|def
argument_list|,
name|bindingOperation
argument_list|,
name|bindingOperationInfo
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|buildBindingOutput
argument_list|(
name|def
argument_list|,
name|bindingOperation
argument_list|,
name|bindingOperationInfo
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|buildBindingFault
argument_list|(
name|def
argument_list|,
name|bindingOperation
argument_list|,
name|bindingOperationInfo
operator|.
name|getFaults
argument_list|()
argument_list|)
expr_stmt|;
name|addExtensibilityAttributes
argument_list|(
name|bindingOperation
argument_list|,
name|bindingOperationInfo
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|addExtensibilityElements
argument_list|(
name|bindingOperation
argument_list|,
name|getWSDL11Extensors
argument_list|(
name|bindingOperationInfo
argument_list|)
argument_list|)
expr_stmt|;
name|binding
operator|.
name|addBindingOperation
argument_list|(
name|bindingOperation
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|buildBindingFault
parameter_list|(
name|Definition
name|def
parameter_list|,
name|BindingOperation
name|bindingOperation
parameter_list|,
name|Collection
argument_list|<
name|BindingFaultInfo
argument_list|>
name|bindingFaultInfos
parameter_list|)
block|{
name|BindingFault
name|bindingFault
init|=
literal|null
decl_stmt|;
for|for
control|(
name|BindingFaultInfo
name|bindingFaultInfo
range|:
name|bindingFaultInfos
control|)
block|{
name|bindingFault
operator|=
name|def
operator|.
name|createBindingFault
argument_list|()
expr_stmt|;
name|addDocumentation
argument_list|(
name|bindingFault
argument_list|,
name|bindingFaultInfo
operator|.
name|getDocumentation
argument_list|()
argument_list|)
expr_stmt|;
name|bindingFault
operator|.
name|setName
argument_list|(
name|bindingFaultInfo
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getFaultName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|bindingOperation
operator|.
name|addBindingFault
argument_list|(
name|bindingFault
argument_list|)
expr_stmt|;
name|addExtensibilityAttributes
argument_list|(
name|bindingFault
argument_list|,
name|bindingFaultInfo
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|addExtensibilityElements
argument_list|(
name|bindingFault
argument_list|,
name|getWSDL11Extensors
argument_list|(
name|bindingFaultInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|buildBindingInput
parameter_list|(
name|Definition
name|def
parameter_list|,
name|BindingOperation
name|bindingOperation
parameter_list|,
name|BindingMessageInfo
name|bindingMessageInfo
parameter_list|)
block|{
name|BindingInput
name|bindingInput
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bindingMessageInfo
operator|!=
literal|null
condition|)
block|{
name|bindingInput
operator|=
name|def
operator|.
name|createBindingInput
argument_list|()
expr_stmt|;
name|addDocumentation
argument_list|(
name|bindingInput
argument_list|,
name|bindingMessageInfo
operator|.
name|getDocumentation
argument_list|()
argument_list|)
expr_stmt|;
name|bindingInput
operator|.
name|setName
argument_list|(
name|bindingMessageInfo
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|bindingOperation
operator|.
name|setBindingInput
argument_list|(
name|bindingInput
argument_list|)
expr_stmt|;
name|addExtensibilityAttributes
argument_list|(
name|bindingInput
argument_list|,
name|bindingMessageInfo
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|addExtensibilityElements
argument_list|(
name|bindingInput
argument_list|,
name|getWSDL11Extensors
argument_list|(
name|bindingMessageInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|buildBindingOutput
parameter_list|(
name|Definition
name|def
parameter_list|,
name|BindingOperation
name|bindingOperation
parameter_list|,
name|BindingMessageInfo
name|bindingMessageInfo
parameter_list|)
block|{
name|BindingOutput
name|bindingOutput
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bindingMessageInfo
operator|!=
literal|null
condition|)
block|{
name|bindingOutput
operator|=
name|def
operator|.
name|createBindingOutput
argument_list|()
expr_stmt|;
name|addDocumentation
argument_list|(
name|bindingOutput
argument_list|,
name|bindingMessageInfo
operator|.
name|getDocumentation
argument_list|()
argument_list|)
expr_stmt|;
name|bindingOutput
operator|.
name|setName
argument_list|(
name|bindingMessageInfo
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|bindingOperation
operator|.
name|setBindingOutput
argument_list|(
name|bindingOutput
argument_list|)
expr_stmt|;
name|addExtensibilityAttributes
argument_list|(
name|bindingOutput
argument_list|,
name|bindingMessageInfo
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|addExtensibilityElements
argument_list|(
name|bindingOutput
argument_list|,
name|getWSDL11Extensors
argument_list|(
name|bindingMessageInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|buildService
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|)
block|{
name|Map
argument_list|<
name|QName
argument_list|,
name|MessageInfo
argument_list|>
name|messages
init|=
name|serviceInfo
operator|.
name|getMessages
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|QName
argument_list|,
name|MessageInfo
argument_list|>
name|mie
range|:
name|messages
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|mie
operator|.
name|getKey
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|definition
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|definition
operator|.
name|getMessage
argument_list|(
name|mie
operator|.
name|getKey
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|Message
name|message
init|=
name|definition
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|addDocumentation
argument_list|(
name|message
argument_list|,
name|mie
operator|.
name|getValue
argument_list|()
operator|.
name|getMessageDocumentation
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setUndefined
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|message
operator|.
name|setQName
argument_list|(
name|mie
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|mie
operator|.
name|getValue
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|Part
name|part
init|=
name|definition
operator|.
name|createPart
argument_list|()
decl_stmt|;
name|boolean
name|elemental
init|=
name|mpi
operator|.
name|isElement
argument_list|()
decl_stmt|;
comment|// RFSB will turn on isElement bogusly.
if|if
condition|(
name|elemental
operator|&&
literal|null
operator|==
name|serviceInfo
operator|.
name|getXmlSchemaCollection
argument_list|()
operator|.
name|getElementByQName
argument_list|(
name|mpi
operator|.
name|getElementQName
argument_list|()
argument_list|)
condition|)
block|{
name|elemental
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|elemental
condition|)
block|{
name|part
operator|.
name|setElementName
argument_list|(
name|mpi
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|part
operator|.
name|setTypeName
argument_list|(
name|mpi
operator|.
name|getTypeQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|part
operator|.
name|setName
argument_list|(
name|mpi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|addPart
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|definition
operator|.
name|addMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|addDocumentation
argument_list|(
name|definition
argument_list|,
name|serviceInfo
operator|.
name|getTopLevelDoc
argument_list|()
argument_list|)
expr_stmt|;
name|Service
name|serv
init|=
name|definition
operator|.
name|createService
argument_list|()
decl_stmt|;
name|addDocumentation
argument_list|(
name|serv
argument_list|,
name|serviceInfo
operator|.
name|getDocumentation
argument_list|()
argument_list|)
expr_stmt|;
name|serv
operator|.
name|setQName
argument_list|(
name|serviceInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|addExtensibilityElements
argument_list|(
name|serv
argument_list|,
name|getWSDL11Extensors
argument_list|(
name|serviceInfo
argument_list|)
argument_list|)
expr_stmt|;
name|definition
operator|.
name|addService
argument_list|(
name|serv
argument_list|)
expr_stmt|;
for|for
control|(
name|EndpointInfo
name|ei
range|:
name|serviceInfo
operator|.
name|getEndpoints
argument_list|()
control|)
block|{
name|addNamespace
argument_list|(
name|ei
operator|.
name|getTransportId
argument_list|()
argument_list|)
expr_stmt|;
name|Port
name|port
init|=
name|definition
operator|.
name|createPort
argument_list|()
decl_stmt|;
name|addDocumentation
argument_list|(
name|port
argument_list|,
name|ei
operator|.
name|getDocumentation
argument_list|()
argument_list|)
expr_stmt|;
name|port
operator|.
name|setName
argument_list|(
name|ei
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|port
operator|.
name|setBinding
argument_list|(
name|definition
operator|.
name|getBinding
argument_list|(
name|ei
operator|.
name|getBinding
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addExtensibilityElements
argument_list|(
name|port
argument_list|,
name|getWSDL11Extensors
argument_list|(
name|ei
argument_list|)
argument_list|)
expr_stmt|;
name|serv
operator|.
name|addPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|PortType
name|buildPortType
parameter_list|(
name|InterfaceInfo
name|intf
parameter_list|,
specifier|final
name|Definition
name|def
parameter_list|)
block|{
name|PortType
name|portType
init|=
literal|null
decl_stmt|;
try|try
block|{
name|portType
operator|=
name|intf
operator|.
name|getProperty
argument_list|(
name|WSDLServiceBuilder
operator|.
name|WSDL_PORTTYPE
argument_list|,
name|PortType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
if|if
condition|(
name|portType
operator|==
literal|null
condition|)
block|{
name|portType
operator|=
name|def
operator|.
name|createPortType
argument_list|()
expr_stmt|;
name|portType
operator|.
name|setQName
argument_list|(
name|intf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addDocumentation
argument_list|(
name|portType
argument_list|,
name|intf
operator|.
name|getDocumentation
argument_list|()
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
name|intf
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|addExtensibilityElements
argument_list|(
name|portType
argument_list|,
name|getWSDL11Extensors
argument_list|(
name|intf
argument_list|)
argument_list|)
expr_stmt|;
name|addExtensibilityAttributes
argument_list|(
name|portType
argument_list|,
name|intf
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|portType
operator|.
name|setUndefined
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|buildPortTypeOperation
argument_list|(
name|portType
argument_list|,
name|intf
operator|.
name|getOperations
argument_list|()
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
name|def
operator|.
name|addPortType
argument_list|(
name|portType
argument_list|)
expr_stmt|;
return|return
name|portType
return|;
block|}
specifier|protected
name|void
name|addNamespace
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|Definition
name|def
parameter_list|)
block|{
name|addNamespace
argument_list|(
name|getPrefix
argument_list|(
name|namespaceURI
argument_list|)
argument_list|,
name|namespaceURI
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addNamespace
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
name|addNamespace
argument_list|(
name|getPrefix
argument_list|(
name|namespaceURI
argument_list|)
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespaceURI
parameter_list|)
block|{
name|addNamespace
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|Definition
name|def
parameter_list|)
block|{
name|ns2prefix
operator|.
name|put
argument_list|(
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|def
operator|.
name|addNamespace
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
specifier|private
name|OperationInfo
name|getOperationInfo
parameter_list|(
name|OperationInfo
name|operation
parameter_list|)
block|{
if|if
condition|(
name|operation
operator|.
name|getUnwrappedOperation
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|operation
operator|.
name|getUnwrappedOperation
argument_list|()
return|;
block|}
return|return
name|operation
return|;
block|}
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|getInputExtensionAttributes
parameter_list|(
name|OperationInfo
name|operation
parameter_list|)
block|{
return|return
name|getOperationInfo
argument_list|(
name|operation
argument_list|)
operator|.
name|getInput
argument_list|()
operator|.
name|getExtensionAttributes
argument_list|()
return|;
block|}
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|getOutputExtensionAttributes
parameter_list|(
name|OperationInfo
name|operation
parameter_list|)
block|{
return|return
name|getOperationInfo
argument_list|(
name|operation
argument_list|)
operator|.
name|getOutput
argument_list|()
operator|.
name|getExtensionAttributes
argument_list|()
return|;
block|}
specifier|protected
name|void
name|buildPortTypeOperation
parameter_list|(
name|PortType
name|portType
parameter_list|,
name|Collection
argument_list|<
name|OperationInfo
argument_list|>
name|operationInfos
parameter_list|,
specifier|final
name|Definition
name|def
parameter_list|)
block|{
for|for
control|(
name|OperationInfo
name|operationInfo
range|:
name|operationInfos
control|)
block|{
name|Operation
name|operation
init|=
literal|null
decl_stmt|;
try|try
block|{
name|operation
operator|=
name|operationInfo
operator|.
name|getProperty
argument_list|(
name|WSDLServiceBuilder
operator|.
name|WSDL_OPERATION
argument_list|,
name|Operation
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
name|operation
operator|=
name|def
operator|.
name|createOperation
argument_list|()
expr_stmt|;
name|addDocumentation
argument_list|(
name|operation
argument_list|,
name|operationInfo
operator|.
name|getDocumentation
argument_list|()
argument_list|)
expr_stmt|;
name|operation
operator|.
name|setUndefined
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|operation
operator|.
name|setName
argument_list|(
name|operationInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
name|operationInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|def
argument_list|)
expr_stmt|;
if|if
condition|(
name|operationInfo
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
name|operation
operator|.
name|setStyle
argument_list|(
name|OperationType
operator|.
name|ONE_WAY
argument_list|)
expr_stmt|;
block|}
name|addExtensibilityElements
argument_list|(
name|operation
argument_list|,
name|getWSDL11Extensors
argument_list|(
name|operationInfo
argument_list|)
argument_list|)
expr_stmt|;
name|Input
name|input
init|=
name|def
operator|.
name|createInput
argument_list|()
decl_stmt|;
name|addDocumentation
argument_list|(
name|input
argument_list|,
name|operationInfo
operator|.
name|getInput
argument_list|()
operator|.
name|getDocumentation
argument_list|()
argument_list|)
expr_stmt|;
name|input
operator|.
name|setName
argument_list|(
name|operationInfo
operator|.
name|getInputName
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|def
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|buildMessage
argument_list|(
name|message
argument_list|,
name|operationInfo
operator|.
name|getInput
argument_list|()
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|this
operator|.
name|addExtensibilityAttributes
argument_list|(
name|input
argument_list|,
name|getInputExtensionAttributes
argument_list|(
name|operationInfo
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|addExtensibilityElements
argument_list|(
name|input
argument_list|,
name|getWSDL11Extensors
argument_list|(
name|operationInfo
operator|.
name|getInput
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|operation
operator|.
name|setInput
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|operation
operator|.
name|setParameterOrdering
argument_list|(
name|operationInfo
operator|.
name|getParameterOrdering
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|operationInfo
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Output
name|output
init|=
name|def
operator|.
name|createOutput
argument_list|()
decl_stmt|;
name|addDocumentation
argument_list|(
name|output
argument_list|,
name|operationInfo
operator|.
name|getOutput
argument_list|()
operator|.
name|getDocumentation
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|setName
argument_list|(
name|operationInfo
operator|.
name|getOutputName
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|=
name|def
operator|.
name|createMessage
argument_list|()
expr_stmt|;
name|buildMessage
argument_list|(
name|message
argument_list|,
name|operationInfo
operator|.
name|getOutput
argument_list|()
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|this
operator|.
name|addExtensibilityAttributes
argument_list|(
name|output
argument_list|,
name|getOutputExtensionAttributes
argument_list|(
name|operationInfo
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|addExtensibilityElements
argument_list|(
name|output
argument_list|,
name|getWSDL11Extensors
argument_list|(
name|operationInfo
operator|.
name|getOutput
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|operation
operator|.
name|setOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
comment|//loop to add fault
name|Collection
argument_list|<
name|FaultInfo
argument_list|>
name|faults
init|=
name|operationInfo
operator|.
name|getFaults
argument_list|()
decl_stmt|;
name|Fault
name|fault
init|=
literal|null
decl_stmt|;
for|for
control|(
name|FaultInfo
name|faultInfo
range|:
name|faults
control|)
block|{
name|fault
operator|=
name|def
operator|.
name|createFault
argument_list|()
expr_stmt|;
name|addDocumentation
argument_list|(
name|fault
argument_list|,
name|faultInfo
operator|.
name|getDocumentation
argument_list|()
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setName
argument_list|(
name|faultInfo
operator|.
name|getFaultName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|=
name|def
operator|.
name|createMessage
argument_list|()
expr_stmt|;
name|buildMessage
argument_list|(
name|message
argument_list|,
name|faultInfo
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|this
operator|.
name|addExtensibilityAttributes
argument_list|(
name|fault
argument_list|,
name|faultInfo
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|addExtensibilityElements
argument_list|(
name|fault
argument_list|,
name|getWSDL11Extensors
argument_list|(
name|faultInfo
argument_list|)
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|operation
operator|.
name|addFault
argument_list|(
name|fault
argument_list|)
expr_stmt|;
block|}
block|}
name|portType
operator|.
name|addOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getPrefix
parameter_list|(
name|String
name|ns
parameter_list|)
block|{
for|for
control|(
name|String
name|namespace
range|:
name|nsMan
operator|.
name|getNamespaces
argument_list|()
control|)
block|{
if|if
condition|(
name|namespace
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|)
block|{
return|return
name|nsMan
operator|.
name|getPrefixFromNS
argument_list|(
name|namespace
argument_list|)
return|;
block|}
block|}
name|String
name|prefix
init|=
name|ns2prefix
operator|.
name|get
argument_list|(
name|ns
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
name|getNewPrefix
argument_list|()
expr_stmt|;
name|ns2prefix
operator|.
name|put
argument_list|(
name|ns
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
return|return
name|prefix
return|;
block|}
specifier|private
name|String
name|getNewPrefix
parameter_list|()
block|{
name|String
name|prefix
init|=
literal|"ns1"
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ns2prefix
operator|.
name|containsValue
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
name|prefix
operator|=
literal|"ns"
operator|+
name|i
expr_stmt|;
block|}
return|return
name|prefix
return|;
block|}
specifier|protected
name|void
name|buildMessage
parameter_list|(
name|Message
name|message
parameter_list|,
name|AbstractMessageContainer
name|messageContainer
parameter_list|,
specifier|final
name|Definition
name|def
parameter_list|)
block|{
name|addDocumentation
argument_list|(
name|message
argument_list|,
name|messageContainer
operator|.
name|getMessageDocumentation
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setQName
argument_list|(
name|messageContainer
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setUndefined
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|def
operator|.
name|addMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|messageParts
init|=
name|messageContainer
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
name|Part
name|messagePart
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MessagePartInfo
name|messagePartInfo
range|:
name|messageParts
control|)
block|{
name|messagePart
operator|=
name|def
operator|.
name|createPart
argument_list|()
expr_stmt|;
name|messagePart
operator|.
name|setName
argument_list|(
name|messagePartInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|messagePartInfo
operator|.
name|isElement
argument_list|()
condition|)
block|{
name|messagePart
operator|.
name|setElementName
argument_list|(
name|messagePartInfo
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
name|messagePartInfo
operator|.
name|getElementQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|messagePartInfo
operator|.
name|getTypeQName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|messagePart
operator|.
name|setTypeName
argument_list|(
name|messagePartInfo
operator|.
name|getTypeQName
argument_list|()
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
name|messagePartInfo
operator|.
name|getTypeQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|addPart
argument_list|(
name|messagePart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

