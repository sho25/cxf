begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|buslifecycle
operator|.
name|BusLifeCycleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|AbstractFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractBasicInterceptorProvider
import|;
end_import

begin_class
specifier|public
class|class
name|CXFBusImpl
extends|extends
name|AbstractBasicInterceptorProvider
implements|implements
name|Bus
block|{
specifier|protected
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
name|extensions
decl_stmt|;
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|BusState
name|state
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|AbstractFeature
argument_list|>
name|features
decl_stmt|;
specifier|public
name|CXFBusImpl
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CXFBusImpl
parameter_list|(
name|Map
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
name|extensions
parameter_list|)
block|{
if|if
condition|(
name|extensions
operator|==
literal|null
condition|)
block|{
name|extensions
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|extensions
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
argument_list|(
name|extensions
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|extensions
operator|=
name|extensions
expr_stmt|;
name|state
operator|=
name|BusState
operator|.
name|INITIAL
expr_stmt|;
name|CXFBusFactory
operator|.
name|possiblySetDefaultBus
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setState
parameter_list|(
name|BusState
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|i
parameter_list|)
block|{
name|id
operator|=
name|i
expr_stmt|;
block|}
specifier|public
specifier|final
parameter_list|<
name|T
parameter_list|>
name|T
name|getExtension
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|extensionType
parameter_list|)
block|{
name|Object
name|obj
init|=
name|extensions
operator|.
name|get
argument_list|(
name|extensionType
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|obj
condition|)
block|{
return|return
name|extensionType
operator|.
name|cast
argument_list|(
name|obj
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|setExtension
parameter_list|(
name|T
name|extension
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|extensionType
parameter_list|)
block|{
name|extensions
operator|.
name|put
argument_list|(
name|extensionType
argument_list|,
name|extension
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
literal|null
operator|==
name|id
condition|?
name|DEFAULT_BUS_ID
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|this
operator|.
name|hashCode
argument_list|()
argument_list|)
else|:
name|id
return|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|state
operator|==
name|BusState
operator|.
name|RUNNING
condition|)
block|{
comment|// REVISIT
return|return;
block|}
name|state
operator|=
name|BusState
operator|.
name|RUNNING
expr_stmt|;
while|while
condition|(
name|state
operator|==
name|BusState
operator|.
name|RUNNING
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|initialize
parameter_list|()
block|{
name|initializeFeatures
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initializeFeatures
parameter_list|()
block|{
if|if
condition|(
name|features
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AbstractFeature
name|f
range|:
name|features
control|)
block|{
name|f
operator|.
name|initialize
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|shutdown
parameter_list|(
name|boolean
name|wait
parameter_list|)
block|{
name|BusLifeCycleManager
name|lifeCycleManager
init|=
name|this
operator|.
name|getExtension
argument_list|(
name|BusLifeCycleManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|lifeCycleManager
condition|)
block|{
name|lifeCycleManager
operator|.
name|preShutdown
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|state
operator|=
name|BusState
operator|.
name|SHUTDOWN
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|lifeCycleManager
condition|)
block|{
name|lifeCycleManager
operator|.
name|postShutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|BusFactory
operator|.
name|getDefaultBus
argument_list|(
literal|false
argument_list|)
operator|==
name|this
condition|)
block|{
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|BusState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|AbstractFeature
argument_list|>
name|getFeatures
parameter_list|()
block|{
return|return
name|features
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|setFeatures
parameter_list|(
name|Collection
argument_list|<
name|AbstractFeature
argument_list|>
name|features
parameter_list|)
block|{
name|this
operator|.
name|features
operator|=
name|features
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|BusState
operator|.
name|RUNNING
condition|)
block|{
name|initializeFeatures
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

