begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|AutomaticWorkQueueImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ManagedService
import|;
end_import

begin_comment
comment|/**  * Use the ManagedWorkQueueList config style instead  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|WorkQueueSingleConfig
implements|implements
name|ManagedService
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_PID
init|=
literal|"org.apache.cxf.workqueue"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_PREFIX
init|=
literal|"org.apache.cxf.workqueue"
decl_stmt|;
name|ManagedWorkQueueList
name|workQueueList
decl_stmt|;
specifier|public
name|WorkQueueSingleConfig
parameter_list|(
name|ManagedWorkQueueList
name|workQueueList
parameter_list|)
block|{
name|this
operator|.
name|workQueueList
operator|=
name|workQueueList
expr_stmt|;
block|}
specifier|public
name|void
name|updated
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Dictionary
name|properties
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|String
name|names
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|PROPERTY_PREFIX
operator|+
literal|".names"
argument_list|)
decl_stmt|;
name|String
index|[]
name|nameAr
init|=
name|names
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|nameAr
control|)
block|{
name|updateQueue
argument_list|(
name|name
operator|.
name|trim
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateQueue
parameter_list|(
name|String
name|name
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queueProperties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|it
init|=
name|properties
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|PROPERTY_PREFIX
operator|+
literal|"."
operator|+
name|name
operator|+
literal|"."
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|String
name|newKey
init|=
operator|(
name|String
operator|)
name|key
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|queueProperties
operator|.
name|put
argument_list|(
name|newKey
argument_list|,
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|queueProperties
operator|.
name|put
argument_list|(
name|AutomaticWorkQueueImpl
operator|.
name|PROPERTY_NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|workQueueList
operator|.
name|updated
argument_list|(
name|name
argument_list|,
name|queueProperties
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

