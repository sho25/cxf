begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|soap
operator|.
name|SOAPBindingImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|UncheckedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractBasicInterceptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|ClientOutFaultObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseChainCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|SynchronousExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ClientImpl
extends|extends
name|AbstractBasicInterceptorProvider
implements|implements
name|Client
implements|,
name|Retryable
implements|,
name|MessageObserver
block|{
specifier|public
specifier|static
specifier|final
name|String
name|THREAD_LOCAL_REQUEST_CONTEXT
init|=
literal|"thread.local.request.context"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FINISHED
init|=
literal|"exchange.finished"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ClientImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Bus
name|bus
decl_stmt|;
specifier|protected
name|ConduitSelector
name|conduitSelector
decl_stmt|;
specifier|protected
name|ClientOutFaultObserver
name|outFaultObserver
decl_stmt|;
specifier|protected
name|int
name|synchronousTimeout
init|=
literal|60000
decl_stmt|;
comment|// default 60 second timeout
specifier|protected
name|PhaseChainCache
name|outboundChainCache
init|=
operator|new
name|PhaseChainCache
argument_list|()
decl_stmt|;
specifier|protected
name|PhaseChainCache
name|inboundChainCache
init|=
operator|new
name|PhaseChainCache
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|currentRequestContext
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|Thread
argument_list|,
name|EchoContext
argument_list|>
name|requestContext
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|WeakHashMap
argument_list|<
name|Thread
argument_list|,
name|EchoContext
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|Thread
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|responseContext
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|WeakHashMap
argument_list|<
name|Thread
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|Executor
name|executor
decl_stmt|;
specifier|public
name|ClientImpl
parameter_list|(
name|Bus
name|b
parameter_list|,
name|Endpoint
name|e
parameter_list|)
block|{
name|this
argument_list|(
name|b
argument_list|,
name|e
argument_list|,
operator|(
name|ConduitSelector
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ClientImpl
parameter_list|(
name|Bus
name|b
parameter_list|,
name|Endpoint
name|e
parameter_list|,
name|Conduit
name|c
parameter_list|)
block|{
name|this
argument_list|(
name|b
argument_list|,
name|e
argument_list|,
operator|new
name|PreexistingConduitSelector
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ClientImpl
parameter_list|(
name|Bus
name|b
parameter_list|,
name|Endpoint
name|e
parameter_list|,
name|ConduitSelector
name|sc
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
name|outFaultObserver
operator|=
operator|new
name|ClientOutFaultObserver
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|getConduitSelector
argument_list|(
name|sc
argument_list|)
operator|.
name|setEndpoint
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|notifyLifecycleManager
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ClientImpl
parameter_list|(
name|URL
name|wsdlUrl
parameter_list|)
block|{
name|this
argument_list|(
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
argument_list|,
name|wsdlUrl
argument_list|,
operator|(
name|QName
operator|)
literal|null
argument_list|,
literal|null
argument_list|,
name|SimpleEndpointImplFactory
operator|.
name|getSingleton
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ClientImpl
parameter_list|(
name|URL
name|wsdlUrl
parameter_list|,
name|QName
name|port
parameter_list|)
block|{
name|this
argument_list|(
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
argument_list|,
name|wsdlUrl
argument_list|,
operator|(
name|QName
operator|)
literal|null
argument_list|,
name|port
argument_list|,
name|SimpleEndpointImplFactory
operator|.
name|getSingleton
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a Client that uses the default EndpointImpl.      * @param bus      * @param wsdlUrl      * @param service      * @param port      */
specifier|public
name|ClientImpl
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|URL
name|wsdlUrl
parameter_list|,
name|QName
name|service
parameter_list|,
name|QName
name|port
parameter_list|)
block|{
name|this
argument_list|(
name|bus
argument_list|,
name|wsdlUrl
argument_list|,
name|service
argument_list|,
name|port
argument_list|,
name|SimpleEndpointImplFactory
operator|.
name|getSingleton
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a Client that uses a specific EndpointImpl.      * @param bus      * @param wsdlUrl      * @param service      * @param port      * @param endpointImplFactory      */
specifier|public
name|ClientImpl
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|URL
name|wsdlUrl
parameter_list|,
name|QName
name|service
parameter_list|,
name|QName
name|port
parameter_list|,
name|EndpointImplFactory
name|endpointImplFactory
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
name|outFaultObserver
operator|=
operator|new
name|ClientOutFaultObserver
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|WSDLServiceFactory
name|sf
init|=
operator|(
name|service
operator|==
literal|null
operator|)
condition|?
operator|(
operator|new
name|WSDLServiceFactory
argument_list|(
name|bus
argument_list|,
name|wsdlUrl
argument_list|)
operator|)
else|:
operator|(
operator|new
name|WSDLServiceFactory
argument_list|(
name|bus
argument_list|,
name|wsdlUrl
argument_list|,
name|service
argument_list|)
operator|)
decl_stmt|;
name|Service
name|svc
init|=
name|sf
operator|.
name|create
argument_list|()
decl_stmt|;
name|EndpointInfo
name|epfo
init|=
name|findEndpoint
argument_list|(
name|svc
argument_list|,
name|port
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|endpointImplFactory
operator|!=
literal|null
condition|)
block|{
name|getConduitSelector
argument_list|()
operator|.
name|setEndpoint
argument_list|(
name|endpointImplFactory
operator|.
name|newEndpointImpl
argument_list|(
name|bus
argument_list|,
name|svc
argument_list|,
name|epfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getConduitSelector
argument_list|()
operator|.
name|setEndpoint
argument_list|(
operator|new
name|EndpointImpl
argument_list|(
name|bus
argument_list|,
name|svc
argument_list|,
name|epfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EndpointException
name|epex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create endpoint: "
operator|+
name|epex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|epex
argument_list|)
throw|;
block|}
name|notifyLifecycleManager
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create a Client that uses a specific EndpointImpl.      * @param bus      * @param wsdlUrl      * @param service      * @param port      * @param endpointImplFactory      */
specifier|public
name|ClientImpl
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|URL
name|wsdlUrl
parameter_list|,
name|Service
name|svc
parameter_list|,
name|QName
name|port
parameter_list|,
name|EndpointImplFactory
name|endpointImplFactory
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
name|outFaultObserver
operator|=
operator|new
name|ClientOutFaultObserver
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|EndpointInfo
name|epfo
init|=
name|findEndpoint
argument_list|(
name|svc
argument_list|,
name|port
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|endpointImplFactory
operator|!=
literal|null
condition|)
block|{
name|getConduitSelector
argument_list|()
operator|.
name|setEndpoint
argument_list|(
name|endpointImplFactory
operator|.
name|newEndpointImpl
argument_list|(
name|bus
argument_list|,
name|svc
argument_list|,
name|epfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getConduitSelector
argument_list|()
operator|.
name|setEndpoint
argument_list|(
operator|new
name|EndpointImpl
argument_list|(
name|bus
argument_list|,
name|svc
argument_list|,
name|epfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EndpointException
name|epex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create endpoint: "
operator|+
name|epex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|epex
argument_list|)
throw|;
block|}
name|notifyLifecycleManager
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|ClientLifeCycleManager
name|mgr
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ClientLifeCycleManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|mgr
condition|)
block|{
name|mgr
operator|.
name|clientDestroyed
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conduitSelector
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|conduitSelector
operator|instanceof
name|Closeable
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|Closeable
operator|)
name|conduitSelector
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//ignore, we're destroying anyway
block|}
block|}
else|else
block|{
name|getConduit
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|notifyLifecycleManager
parameter_list|()
block|{
name|ClientLifeCycleManager
name|mgr
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ClientLifeCycleManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|mgr
condition|)
block|{
name|mgr
operator|.
name|clientCreated
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|EndpointInfo
name|findEndpoint
parameter_list|(
name|Service
name|svc
parameter_list|,
name|QName
name|port
parameter_list|)
block|{
name|EndpointInfo
name|epfo
decl_stmt|;
if|if
condition|(
name|port
operator|!=
literal|null
condition|)
block|{
name|epfo
operator|=
name|svc
operator|.
name|getEndpointInfo
argument_list|(
name|port
argument_list|)
expr_stmt|;
if|if
condition|(
name|epfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The service "
operator|+
name|svc
operator|.
name|getName
argument_list|()
operator|+
literal|" does not have an endpoint "
operator|+
name|port
operator|+
literal|"."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|epfo
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|ServiceInfo
name|svcfo
range|:
name|svc
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
for|for
control|(
name|EndpointInfo
name|e
range|:
name|svcfo
operator|.
name|getEndpoints
argument_list|()
control|)
block|{
name|BindingInfo
name|bfo
init|=
name|e
operator|.
name|getBinding
argument_list|()
decl_stmt|;
if|if
condition|(
name|bfo
operator|.
name|getBindingId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"http://schemas.xmlsoap.org/wsdl/soap/"
argument_list|)
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|bfo
operator|.
name|getExtensors
argument_list|()
operator|.
name|get
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|SOAPBindingImpl
condition|)
block|{
name|SOAPBindingImpl
name|soapB
init|=
operator|(
name|SOAPBindingImpl
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|soapB
operator|.
name|getTransportURI
argument_list|()
operator|.
name|equals
argument_list|(
literal|"http://schemas.xmlsoap.org/soap/http"
argument_list|)
condition|)
block|{
name|epfo
operator|=
name|e
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|epfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Only document-style SOAP 1.1 http are supported "
operator|+
literal|"for auto-selection of endpoint; none were found."
argument_list|)
throw|;
block|}
block|}
return|return
name|epfo
return|;
block|}
specifier|public
name|Endpoint
name|getEndpoint
parameter_list|()
block|{
return|return
name|getConduitSelector
argument_list|()
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getRequestContext
parameter_list|()
block|{
if|if
condition|(
name|isThreadLocalRequestContext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|requestContext
operator|.
name|containsKey
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
condition|)
block|{
name|requestContext
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
operator|new
name|EchoContext
argument_list|(
name|currentRequestContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|requestContext
operator|.
name|get
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
return|;
block|}
return|return
name|currentRequestContext
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getResponseContext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|responseContext
operator|.
name|containsKey
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
condition|)
block|{
name|responseContext
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|responseContext
operator|.
name|get
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isThreadLocalRequestContext
parameter_list|()
block|{
if|if
condition|(
name|currentRequestContext
operator|.
name|containsKey
argument_list|(
name|THREAD_LOCAL_REQUEST_CONTEXT
argument_list|)
condition|)
block|{
name|Object
name|o
init|=
name|currentRequestContext
operator|.
name|get
argument_list|(
name|THREAD_LOCAL_REQUEST_CONTEXT
argument_list|)
decl_stmt|;
name|boolean
name|local
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Boolean
condition|)
block|{
name|local
operator|=
operator|(
operator|(
name|Boolean
operator|)
name|o
operator|)
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|local
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|local
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setThreadLocalRequestContext
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|currentRequestContext
operator|.
name|put
argument_list|(
name|THREAD_LOCAL_REQUEST_CONTEXT
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
index|[]
name|invoke
parameter_list|(
name|BindingOperationInfo
name|oi
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|invoke
argument_list|(
name|oi
argument_list|,
name|params
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Object
index|[]
name|invoke
parameter_list|(
name|String
name|operationName
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|q
init|=
operator|new
name|QName
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|operationName
argument_list|)
decl_stmt|;
return|return
name|invoke
argument_list|(
name|q
argument_list|,
name|params
argument_list|)
return|;
block|}
specifier|public
name|Object
index|[]
name|invoke
parameter_list|(
name|QName
name|operationName
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|BindingOperationInfo
name|op
init|=
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|getOperation
argument_list|(
name|operationName
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UncheckedException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"NO_OPERATION"
argument_list|,
name|LOG
argument_list|,
name|operationName
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|op
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
name|op
operator|=
name|op
operator|.
name|getUnwrappedOperation
argument_list|()
expr_stmt|;
block|}
return|return
name|invoke
argument_list|(
name|op
argument_list|,
name|params
argument_list|)
return|;
block|}
specifier|public
name|Object
index|[]
name|invokeWrapped
parameter_list|(
name|String
name|operationName
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|q
init|=
operator|new
name|QName
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|operationName
argument_list|)
decl_stmt|;
return|return
name|invokeWrapped
argument_list|(
name|q
argument_list|,
name|params
argument_list|)
return|;
block|}
specifier|public
name|Object
index|[]
name|invokeWrapped
parameter_list|(
name|QName
name|operationName
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|BindingOperationInfo
name|op
init|=
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|getOperation
argument_list|(
name|operationName
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UncheckedException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"NO_OPERATION"
argument_list|,
name|LOG
argument_list|,
name|operationName
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|invoke
argument_list|(
name|op
argument_list|,
name|params
argument_list|)
return|;
block|}
specifier|public
name|Object
index|[]
name|invoke
parameter_list|(
name|BindingOperationInfo
name|oi
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resp
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|resp
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|req
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|getRequestContext
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
name|RESPONSE_CONTEXT
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|REQUEST_CONTEXT
argument_list|,
name|req
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|invoke
argument_list|(
name|oi
argument_list|,
name|params
argument_list|,
name|context
argument_list|,
name|exchange
argument_list|)
return|;
block|}
finally|finally
block|{
name|responseContext
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|resp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Object
index|[]
name|invoke
parameter_list|(
name|BindingOperationInfo
name|oi
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|invoke
argument_list|(
name|oi
argument_list|,
name|params
argument_list|,
name|context
argument_list|,
operator|(
name|Exchange
operator|)
literal|null
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resp
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|RESPONSE_CONTEXT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|resp
operator|!=
literal|null
condition|)
block|{
name|responseContext
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|resp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|invoke
parameter_list|(
name|ClientCallback
name|callback
parameter_list|,
name|String
name|operationName
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|q
init|=
operator|new
name|QName
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|operationName
argument_list|)
decl_stmt|;
name|invoke
argument_list|(
name|callback
argument_list|,
name|q
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|invoke
parameter_list|(
name|ClientCallback
name|callback
parameter_list|,
name|QName
name|operationName
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|BindingOperationInfo
name|op
init|=
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|getOperation
argument_list|(
name|operationName
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UncheckedException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"NO_OPERATION"
argument_list|,
name|LOG
argument_list|,
name|operationName
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|op
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
name|op
operator|=
name|op
operator|.
name|getUnwrappedOperation
argument_list|()
expr_stmt|;
block|}
name|invoke
argument_list|(
name|callback
argument_list|,
name|op
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|invokeWrapped
parameter_list|(
name|ClientCallback
name|callback
parameter_list|,
name|String
name|operationName
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|q
init|=
operator|new
name|QName
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|operationName
argument_list|)
decl_stmt|;
name|invokeWrapped
argument_list|(
name|callback
argument_list|,
name|q
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|invokeWrapped
parameter_list|(
name|ClientCallback
name|callback
parameter_list|,
name|QName
name|operationName
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|BindingOperationInfo
name|op
init|=
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|getOperation
argument_list|(
name|operationName
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UncheckedException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"NO_OPERATION"
argument_list|,
name|LOG
argument_list|,
name|operationName
argument_list|)
argument_list|)
throw|;
block|}
name|invoke
argument_list|(
name|callback
argument_list|,
name|op
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|invoke
parameter_list|(
name|ClientCallback
name|callback
parameter_list|,
name|BindingOperationInfo
name|oi
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|invoke
argument_list|(
name|callback
argument_list|,
name|oi
argument_list|,
name|params
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|invoke
parameter_list|(
name|ClientCallback
name|callback
parameter_list|,
name|BindingOperationInfo
name|oi
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|invoke
argument_list|(
name|callback
argument_list|,
name|oi
argument_list|,
name|params
argument_list|,
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|invoke
parameter_list|(
name|ClientCallback
name|callback
parameter_list|,
name|BindingOperationInfo
name|oi
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|invoke
argument_list|(
name|callback
argument_list|,
name|oi
argument_list|,
name|params
argument_list|,
literal|null
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|invoke
parameter_list|(
name|ClientCallback
name|callback
parameter_list|,
name|BindingOperationInfo
name|oi
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|doInvoke
argument_list|(
name|callback
argument_list|,
name|oi
argument_list|,
name|params
argument_list|,
name|context
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
index|[]
name|invoke
parameter_list|(
name|BindingOperationInfo
name|oi
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|doInvoke
argument_list|(
literal|null
argument_list|,
name|oi
argument_list|,
name|params
argument_list|,
name|context
argument_list|,
name|exchange
argument_list|)
return|;
block|}
specifier|private
name|Object
index|[]
name|doInvoke
parameter_list|(
name|ClientCallback
name|callback
parameter_list|,
name|BindingOperationInfo
name|oi
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Bus
name|origBus
init|=
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ClassLoader
name|origLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|ClassLoader
name|loader
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ClassLoader
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|loader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exchange
operator|==
literal|null
condition|)
block|{
name|exchange
operator|=
operator|new
name|ExchangeImpl
argument_list|()
expr_stmt|;
block|}
name|exchange
operator|.
name|setSynchronous
argument_list|(
name|callback
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|getEndpoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Invoke, operation info: "
operator|+
name|oi
operator|+
literal|", params: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Message
name|message
init|=
name|endpoint
operator|.
name|getBinding
argument_list|()
operator|.
name|createMessage
argument_list|()
decl_stmt|;
comment|// Make sure INVOCATION CONTEXT, REQUEST_CONTEXT and RESPONSE_CONTEXT are present
comment|// on message
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|reqContext
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resContext
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|reqContext
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
operator|)
name|context
operator|.
name|get
argument_list|(
name|REQUEST_CONTEXT
argument_list|)
argument_list|)
expr_stmt|;
name|resContext
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
operator|)
name|context
operator|.
name|get
argument_list|(
name|RESPONSE_CONTEXT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|reqContext
operator|==
literal|null
condition|)
block|{
name|reqContext
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|getRequestContext
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|REQUEST_CONTEXT
argument_list|,
name|reqContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resContext
operator|==
literal|null
condition|)
block|{
name|resContext
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|RESPONSE_CONTEXT
argument_list|,
name|resContext
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|INVOCATION_CONTEXT
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|setContext
argument_list|(
name|reqContext
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|reqContext
condition|)
block|{
name|exchange
operator|.
name|putAll
argument_list|(
name|reqContext
argument_list|)
expr_stmt|;
block|}
name|setParameters
argument_list|(
name|params
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|oi
condition|)
block|{
name|exchange
operator|.
name|setOneWay
argument_list|(
name|oi
operator|.
name|getOutput
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|setOutMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|ClientCallback
operator|.
name|class
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|setOutMessageProperties
argument_list|(
name|message
argument_list|,
name|oi
argument_list|)
expr_stmt|;
name|setExchangeProperties
argument_list|(
name|exchange
argument_list|,
name|endpoint
argument_list|,
name|oi
argument_list|)
expr_stmt|;
name|PhaseInterceptorChain
name|chain
init|=
name|setupInterceptorChain
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|message
operator|.
name|setInterceptorChain
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setFaultObserver
argument_list|(
name|outFaultObserver
argument_list|)
expr_stmt|;
name|prepareConduitSelector
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// add additional interceptors and such
name|modifyChain
argument_list|(
name|chain
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|fault
parameter_list|)
block|{
name|enrichFault
argument_list|(
name|fault
argument_list|)
expr_stmt|;
throw|throw
name|fault
throw|;
block|}
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|processResult
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|,
name|oi
argument_list|,
name|resContext
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|origLoader
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|origBus
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * TODO This is SOAP specific code and should not be in cxf core      * @param fault      */
specifier|private
name|void
name|enrichFault
parameter_list|(
name|Fault
name|fault
parameter_list|)
block|{
if|if
condition|(
name|fault
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
operator|||
name|fault
operator|.
name|getCause
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
name|String
name|soap11NS
init|=
literal|"http://schemas.xmlsoap.org/soap/envelope/"
decl_stmt|;
name|String
name|soap12NS
init|=
literal|"http://www.w3.org/2003/05/soap-envelope"
decl_stmt|;
name|QName
name|faultCode
init|=
name|fault
operator|.
name|getFaultCode
argument_list|()
decl_stmt|;
comment|//for SoapFault, if it's underlying cause is IOException,
comment|//it means something like server is down or can't create
comment|//connection, according to soap spec we should set fault as
comment|//Server Fault
if|if
condition|(
name|faultCode
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|soap11NS
argument_list|)
operator|&&
name|faultCode
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Client"
argument_list|)
condition|)
block|{
name|faultCode
operator|=
operator|new
name|QName
argument_list|(
name|soap11NS
argument_list|,
literal|"Server"
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setFaultCode
argument_list|(
name|faultCode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|faultCode
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|soap12NS
argument_list|)
operator|&&
name|faultCode
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Sender"
argument_list|)
condition|)
block|{
name|faultCode
operator|=
operator|new
name|QName
argument_list|(
name|soap12NS
argument_list|,
literal|"Receiver"
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setFaultCode
argument_list|(
name|faultCode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Object
index|[]
name|processResult
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|BindingOperationInfo
name|oi
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
comment|// Check to see if there is a Fault from the outgoing chain if it's an out Message
if|if
condition|(
operator|!
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|INBOUND_MESSAGE
argument_list|)
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
condition|)
block|{
name|ex
operator|=
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|boolean
name|mepCompleteCalled
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|getConduitSelector
argument_list|()
operator|.
name|complete
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|mepCompleteCalled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|ex
operator|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|mepCompleteCalled
condition|)
block|{
name|getConduitSelector
argument_list|()
operator|.
name|complete
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
comment|// Wait for a response if we need to
if|if
condition|(
name|oi
operator|!=
literal|null
operator|&&
operator|!
name|oi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|exchange
init|)
block|{
name|waitResponse
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
comment|// leave the input stream open for the caller
name|Boolean
name|keepConduitAlive
init|=
operator|(
name|Boolean
operator|)
name|exchange
operator|.
name|get
argument_list|(
name|Client
operator|.
name|KEEP_CONDUIT_ALIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|keepConduitAlive
operator|==
literal|null
operator|||
operator|!
name|keepConduitAlive
condition|)
block|{
name|getConduitSelector
argument_list|()
operator|.
name|complete
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|// Grab the response objects if there are any
name|List
name|resList
init|=
literal|null
decl_stmt|;
name|Message
name|inMsg
init|=
name|exchange
operator|.
name|getInMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|inMsg
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|resContext
condition|)
block|{
name|resContext
operator|.
name|putAll
argument_list|(
name|inMsg
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"set responseContext to be"
operator|+
name|resContext
argument_list|)
expr_stmt|;
block|}
name|responseContext
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|resContext
argument_list|)
expr_stmt|;
block|}
name|resList
operator|=
name|inMsg
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// check for an incoming fault
name|ex
operator|=
name|getException
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
if|if
condition|(
name|resList
operator|!=
literal|null
condition|)
block|{
return|return
name|resList
operator|.
name|toArray
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Exception
name|getException
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getInFaultMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|exchange
operator|.
name|getInFaultMessage
argument_list|()
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|exchange
operator|.
name|getOutFaultMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|exchange
operator|.
name|getOutFaultMessage
argument_list|()
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|exchange
operator|.
name|getInMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|exchange
operator|.
name|getInMessage
argument_list|()
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|setContext
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|putAll
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"set requestContext to message be"
operator|+
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|waitResponse
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|int
name|remaining
init|=
name|synchronousTimeout
decl_stmt|;
while|while
condition|(
operator|!
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
name|FINISHED
argument_list|)
argument_list|)
operator|&&
name|remaining
operator|>
literal|0
condition|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|exchange
operator|.
name|wait
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|remaining
operator|-=
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
name|FINISHED
argument_list|)
argument_list|)
condition|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|WARNING
argument_list|,
literal|"RESPONSE_TIMEOUT"
argument_list|,
name|exchange
operator|.
name|get
argument_list|(
name|OperationInfo
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setParameters
parameter_list|(
name|Object
index|[]
name|params
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|MessageContentsList
name|contents
init|=
operator|new
name|MessageContentsList
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|contents
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Endpoint
name|endpoint
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
comment|// in this case correlation will occur outside the transport,
comment|// however there's a possibility that the endpoint may have been
comment|// rebased in the meantime, so that the response will be mediated
comment|// via a set of in interceptors provided by a *different* endpoint
comment|//
name|endpoint
operator|=
name|getConduitSelector
argument_list|()
operator|.
name|getEndpoint
argument_list|()
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
name|message
operator|=
name|endpoint
operator|.
name|getBinding
argument_list|()
operator|.
name|createMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|setInMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|INBOUND_MESSAGE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|PhaseManager
name|pm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PhaseManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i1
init|=
name|bus
operator|.
name|getInInterceptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by bus: "
operator|+
name|i1
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i2
init|=
name|getInInterceptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by client: "
operator|+
name|i2
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i3
init|=
name|endpoint
operator|.
name|getInInterceptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by endpoint: "
operator|+
name|i3
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i4
init|=
name|endpoint
operator|.
name|getBinding
argument_list|()
operator|.
name|getInInterceptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by binding: "
operator|+
name|i4
argument_list|)
expr_stmt|;
block|}
name|PhaseInterceptorChain
name|chain
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getService
argument_list|()
operator|.
name|getDataBinding
argument_list|()
operator|instanceof
name|InterceptorProvider
condition|)
block|{
name|InterceptorProvider
name|p
init|=
operator|(
name|InterceptorProvider
operator|)
name|endpoint
operator|.
name|getService
argument_list|()
operator|.
name|getDataBinding
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by databinging: "
operator|+
name|p
operator|.
name|getInInterceptors
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|chain
operator|=
name|inboundChainCache
operator|.
name|get
argument_list|(
name|pm
operator|.
name|getInPhases
argument_list|()
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|i3
argument_list|,
name|i4
argument_list|,
name|p
operator|.
name|getInInterceptors
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chain
operator|=
name|inboundChainCache
operator|.
name|get
argument_list|(
name|pm
operator|.
name|getInPhases
argument_list|()
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|i3
argument_list|,
name|i4
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|setInterceptorChain
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setFaultObserver
argument_list|(
name|outFaultObserver
argument_list|)
expr_stmt|;
name|modifyChain
argument_list|(
name|chain
argument_list|,
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modifyChain
argument_list|(
name|chain
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Bus
name|origBus
init|=
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
comment|// execute chain
name|ClientCallback
name|callback
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|ClientCallback
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|callback
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|getConduitSelector
argument_list|()
operator|.
name|complete
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|callback
operator|.
name|start
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|String
name|startingAfterInterceptorID
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|PhaseInterceptorChain
operator|.
name|STARTING_AFTER_INTERCEPTOR_ID
argument_list|)
decl_stmt|;
name|String
name|startingInterceptorID
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|PhaseInterceptorChain
operator|.
name|STARTING_AT_INTERCEPTOR_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|startingAfterInterceptorID
operator|!=
literal|null
condition|)
block|{
name|chain
operator|.
name|doInterceptStartingAfter
argument_list|(
name|message
argument_list|,
name|startingAfterInterceptorID
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|startingInterceptorID
operator|!=
literal|null
condition|)
block|{
name|chain
operator|.
name|doInterceptStartingAt
argument_list|(
name|message
argument_list|,
name|startingInterceptorID
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|outFaultObserver
operator|.
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|callback
operator|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|ClientCallback
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
operator|&&
operator|!
name|isPartialResponse
argument_list|(
name|message
argument_list|)
condition|)
block|{
try|try
block|{
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
comment|//so that asyn callback handler get chance to
comment|//handle non-runtime exceptions
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|setInMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resCtx
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|INVOCATION_CONTEXT
argument_list|)
argument_list|)
decl_stmt|;
name|resCtx
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|resCtx
operator|.
name|get
argument_list|(
name|RESPONSE_CONTEXT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|resCtx
operator|!=
literal|null
condition|)
block|{
name|responseContext
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|resCtx
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|handleException
argument_list|(
name|resCtx
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
name|callback
operator|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|ClientCallback
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
operator|&&
operator|!
name|isPartialResponse
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|setInMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resCtx
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|INVOCATION_CONTEXT
argument_list|)
argument_list|)
decl_stmt|;
name|resCtx
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|resCtx
operator|.
name|get
argument_list|(
name|RESPONSE_CONTEXT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|resCtx
operator|!=
literal|null
condition|)
block|{
name|responseContext
operator|.
name|put
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|,
name|resCtx
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Object
name|obj
index|[]
init|=
name|processResult
argument_list|(
name|message
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|,
literal|null
argument_list|,
name|resCtx
argument_list|)
decl_stmt|;
name|callback
operator|.
name|handleResponse
argument_list|(
name|resCtx
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|callback
operator|.
name|handleException
argument_list|(
name|resCtx
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|message
operator|.
name|getExchange
argument_list|()
init|)
block|{
if|if
condition|(
operator|!
name|isPartialResponse
argument_list|(
name|message
argument_list|)
operator|&&
name|callback
operator|==
literal|null
condition|)
block|{
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|FINISHED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|setInMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|origBus
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Conduit
name|getConduit
parameter_list|()
block|{
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|message
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|setExchangeProperties
argument_list|(
name|exchange
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|getConduitSelector
argument_list|()
operator|.
name|selectConduit
argument_list|(
name|message
argument_list|)
return|;
block|}
specifier|protected
name|void
name|prepareConduitSelector
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|getConduitSelector
argument_list|()
operator|.
name|prepare
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|ConduitSelector
operator|.
name|class
argument_list|,
name|getConduitSelector
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setOutMessageProperties
parameter_list|(
name|Message
name|message
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|INBOUND_MESSAGE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|boi
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|BindingMessageInfo
operator|.
name|class
argument_list|,
name|boi
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|MessageInfo
operator|.
name|class
argument_list|,
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setExchangeProperties
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Service
operator|.
name|class
argument_list|,
name|endpoint
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getService
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|put
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|,
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|InterfaceInfo
operator|.
name|class
argument_list|,
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getInterface
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|put
argument_list|(
name|Binding
operator|.
name|class
argument_list|,
name|endpoint
operator|.
name|getBinding
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|,
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|boi
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|put
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|boi
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|OperationInfo
operator|.
name|class
argument_list|,
name|boi
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exchange
operator|.
name|isSynchronous
argument_list|()
operator|||
name|executor
operator|==
literal|null
condition|)
block|{
name|exchange
operator|.
name|put
argument_list|(
name|MessageObserver
operator|.
name|class
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|put
argument_list|(
name|Executor
operator|.
name|class
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|MessageObserver
operator|.
name|class
argument_list|,
operator|new
name|MessageObserver
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|containsKey
argument_list|(
name|Executor
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".USING_SPECIFIED"
argument_list|)
condition|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ClientImpl
operator|.
name|this
operator|.
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ClientImpl
operator|.
name|this
operator|.
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|put
argument_list|(
name|Retryable
operator|.
name|class
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Client
operator|.
name|class
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Bus
operator|.
name|class
argument_list|,
name|bus
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|!=
literal|null
operator|&&
name|boi
operator|!=
literal|null
condition|)
block|{
name|EndpointInfo
name|endpointInfo
init|=
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_OPERATION
argument_list|,
name|boi
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|QName
name|serviceQName
init|=
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_SERVICE
argument_list|,
name|serviceQName
argument_list|)
expr_stmt|;
name|QName
name|interfaceQName
init|=
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_INTERFACE
argument_list|,
name|interfaceQName
argument_list|)
expr_stmt|;
name|QName
name|portQName
init|=
name|endpointInfo
operator|.
name|getName
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_PORT
argument_list|,
name|portQName
argument_list|)
expr_stmt|;
name|URI
name|wsdlDescription
init|=
name|endpointInfo
operator|.
name|getProperty
argument_list|(
literal|"URI"
argument_list|,
name|URI
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|wsdlDescription
operator|==
literal|null
condition|)
block|{
name|String
name|address
init|=
name|endpointInfo
operator|.
name|getAddress
argument_list|()
decl_stmt|;
try|try
block|{
name|wsdlDescription
operator|=
operator|new
name|URI
argument_list|(
name|address
operator|+
literal|"?wsdl"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
name|endpointInfo
operator|.
name|setProperty
argument_list|(
literal|"URI"
argument_list|,
name|wsdlDescription
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_DESCRIPTION
argument_list|,
name|wsdlDescription
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|PhaseInterceptorChain
name|setupInterceptorChain
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|PhaseManager
name|pm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PhaseManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i1
init|=
name|bus
operator|.
name|getOutInterceptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by bus: "
operator|+
name|i1
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i2
init|=
name|getOutInterceptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by client: "
operator|+
name|i2
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i3
init|=
name|endpoint
operator|.
name|getOutInterceptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by endpoint: "
operator|+
name|i3
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i4
init|=
name|endpoint
operator|.
name|getBinding
argument_list|()
operator|.
name|getOutInterceptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by binding: "
operator|+
name|i4
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i5
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getService
argument_list|()
operator|.
name|getDataBinding
argument_list|()
operator|instanceof
name|InterceptorProvider
condition|)
block|{
name|i5
operator|=
operator|(
operator|(
name|InterceptorProvider
operator|)
name|endpoint
operator|.
name|getService
argument_list|()
operator|.
name|getDataBinding
argument_list|()
operator|)
operator|.
name|getOutInterceptors
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by databinding: "
operator|+
name|i5
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i5
operator|!=
literal|null
condition|)
block|{
return|return
name|outboundChainCache
operator|.
name|get
argument_list|(
name|pm
operator|.
name|getOutPhases
argument_list|()
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|i3
argument_list|,
name|i4
argument_list|,
name|i5
argument_list|)
return|;
block|}
return|return
name|outboundChainCache
operator|.
name|get
argument_list|(
name|pm
operator|.
name|getOutPhases
argument_list|()
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|i3
argument_list|,
name|i4
argument_list|)
return|;
block|}
specifier|protected
name|void
name|modifyChain
parameter_list|(
name|InterceptorChain
name|chain
parameter_list|,
name|Message
name|ctx
parameter_list|,
name|boolean
name|in
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|InterceptorProvider
argument_list|>
name|providers
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|Message
operator|.
name|INTERCEPTOR_PROVIDERS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|providers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|InterceptorProvider
name|p
range|:
name|providers
control|)
block|{
if|if
condition|(
name|in
condition|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|p
operator|.
name|getInInterceptors
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chain
operator|.
name|add
argument_list|(
name|p
operator|.
name|getOutInterceptors
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|key
init|=
name|in
condition|?
name|Message
operator|.
name|IN_INTERCEPTORS
else|:
name|Message
operator|.
name|OUT_INTERCEPTORS
decl_stmt|;
name|Collection
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|is
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setEndpoint
parameter_list|(
name|Endpoint
name|e
parameter_list|)
block|{
name|getConduitSelector
argument_list|()
operator|.
name|setEndpoint
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getSynchronousTimeout
parameter_list|()
block|{
return|return
name|synchronousTimeout
return|;
block|}
specifier|public
name|void
name|setSynchronousTimeout
parameter_list|(
name|int
name|synchronousTimeout
parameter_list|)
block|{
name|this
operator|.
name|synchronousTimeout
operator|=
name|synchronousTimeout
expr_stmt|;
block|}
specifier|public
specifier|final
name|ConduitSelector
name|getConduitSelector
parameter_list|()
block|{
return|return
name|getConduitSelector
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|protected
specifier|final
name|ConduitSelector
name|getConduitSelector
parameter_list|(
name|ConduitSelector
name|override
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|conduitSelector
condition|)
block|{
name|setConduitSelector
argument_list|(
name|override
argument_list|)
expr_stmt|;
block|}
return|return
name|conduitSelector
return|;
block|}
specifier|public
specifier|final
specifier|synchronized
name|void
name|setConduitSelector
parameter_list|(
name|ConduitSelector
name|selector
parameter_list|)
block|{
name|conduitSelector
operator|=
name|selector
operator|==
literal|null
condition|?
operator|new
name|UpfrontConduitSelector
argument_list|()
else|:
name|selector
expr_stmt|;
block|}
specifier|private
name|boolean
name|isPartialResponse
parameter_list|(
name|Message
name|in
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|in
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PARTIAL_RESPONSE_MESSAGE
argument_list|)
argument_list|)
return|;
block|}
comment|/*      * modification are echoed back to the shared map      */
specifier|public
specifier|static
class|class
name|EchoContext
extends|extends
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shared
decl_stmt|;
specifier|public
name|EchoContext
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sharedMap
parameter_list|)
block|{
name|super
argument_list|(
name|sharedMap
argument_list|)
expr_stmt|;
name|shared
operator|=
name|sharedMap
expr_stmt|;
block|}
specifier|public
name|Object
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|shared
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|String
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|t
parameter_list|)
block|{
name|shared
operator|.
name|putAll
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|super
operator|.
name|putAll
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|shared
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|reload
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|putAll
argument_list|(
name|shared
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setExecutor
parameter_list|(
name|Executor
name|executor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|SynchronousExecutor
operator|.
name|isA
argument_list|(
name|executor
argument_list|)
condition|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

