begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PushbackInputStream
import|;
end_import

begin_class
specifier|public
class|class
name|MimeBodyPartInputStream
extends|extends
name|InputStream
block|{
name|PushbackInputStream
name|inStream
decl_stmt|;
name|boolean
name|boundaryFound
decl_stmt|;
name|byte
index|[]
name|boundary
decl_stmt|;
specifier|public
name|MimeBodyPartInputStream
parameter_list|(
name|PushbackInputStream
name|inStreamParam
parameter_list|,
name|byte
index|[]
name|boundaryParam
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|inStream
operator|=
name|inStreamParam
expr_stmt|;
name|this
operator|.
name|boundary
operator|=
name|boundaryParam
expr_stmt|;
block|}
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|needUnread0d0a
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|boundaryFound
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// read the next value from stream
name|int
name|value
init|=
name|inStream
operator|.
name|read
argument_list|()
decl_stmt|;
comment|// A problem occurred because all the mime parts tends to have a /r/n
comment|// at the end. Making it hard to transform them to correct
comment|// DataSources.
comment|// This logic introduced to handle it
if|if
condition|(
name|value
operator|==
literal|13
condition|)
block|{
name|value
operator|=
name|inStream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|10
condition|)
block|{
name|inStream
operator|.
name|unread
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
literal|13
return|;
block|}
else|else
block|{
name|value
operator|=
name|inStream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|byte
operator|)
name|value
operator|!=
name|boundary
index|[
literal|0
index|]
condition|)
block|{
name|inStream
operator|.
name|unread
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|inStream
operator|.
name|unread
argument_list|(
literal|10
argument_list|)
expr_stmt|;
return|return
literal|13
return|;
block|}
else|else
block|{
name|needUnread0d0a
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|byte
operator|)
name|value
operator|!=
name|boundary
index|[
literal|0
index|]
condition|)
block|{
return|return
name|value
return|;
block|}
comment|// read value is the first byte of the boundary. Start matching the
comment|// next characters to find a boundary
name|int
name|boundaryIndex
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|boundaryIndex
operator|<
name|boundary
operator|.
name|length
operator|)
operator|&&
operator|(
operator|(
name|byte
operator|)
name|value
operator|==
name|boundary
index|[
name|boundaryIndex
index|]
operator|)
condition|)
block|{
name|value
operator|=
name|inStream
operator|.
name|read
argument_list|()
expr_stmt|;
name|boundaryIndex
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|boundaryIndex
operator|==
name|boundary
operator|.
name|length
condition|)
block|{
comment|// boundary found
name|boundaryFound
operator|=
literal|true
expr_stmt|;
name|int
name|dashNext
init|=
name|inStream
operator|.
name|read
argument_list|()
decl_stmt|;
comment|// read the end of line character
if|if
condition|(
name|dashNext
operator|==
literal|45
operator|&&
name|value
operator|==
literal|45
condition|)
block|{
comment|// Last mime boundary should have a succeeding "--"
comment|// as we are on it, read the terminating CRLF
name|inStream
operator|.
name|read
argument_list|()
expr_stmt|;
name|inStream
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|// Boundary not found. Restoring bytes skipped.
comment|// write first skipped byte, push back the rest
if|if
condition|(
name|value
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Stream might have ended
name|inStream
operator|.
name|unread
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needUnread0d0a
condition|)
block|{
name|inStream
operator|.
name|unread
argument_list|(
name|boundary
argument_list|,
literal|0
argument_list|,
name|boundaryIndex
argument_list|)
expr_stmt|;
name|inStream
operator|.
name|unread
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|value
operator|=
literal|13
expr_stmt|;
block|}
else|else
block|{
name|inStream
operator|.
name|unread
argument_list|(
name|boundary
argument_list|,
literal|1
argument_list|,
name|boundaryIndex
operator|-
literal|1
argument_list|)
expr_stmt|;
name|value
operator|=
name|boundary
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

