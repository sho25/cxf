begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|ConfiguredBeanLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|Mergeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|BeanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|TypedStringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ConfigurableApplicationContext
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|SpringBeanLocator
implements|implements
name|ConfiguredBeanLocator
block|{
name|ApplicationContext
name|context
decl_stmt|;
specifier|public
name|SpringBeanLocator
parameter_list|(
name|ApplicationContext
name|ctx
parameter_list|)
block|{
name|context
operator|=
name|ctx
expr_stmt|;
block|}
comment|/** {@inheritDoc}*/
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBeanNamesOfType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|context
operator|.
name|getBeanNamesForType
argument_list|(
name|type
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
comment|/** {@inheritDoc}*/
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getBeanOfType
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|context
operator|.
name|getBean
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
block|}
comment|/** {@inheritDoc}*/
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|getBeansOfType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|context
operator|.
name|getBeansOfType
argument_list|(
name|type
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|boolean
name|loadBeansOfType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|BeanLoaderListener
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|context
operator|.
name|getBeanNamesForType
argument_list|(
name|type
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|list
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|list
control|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|c
init|=
name|context
operator|.
name|getType
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|.
name|loadBean
argument_list|(
name|s
argument_list|,
name|c
argument_list|)
condition|)
block|{
name|Object
name|o
init|=
name|context
operator|.
name|getBean
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|.
name|beanLoaded
argument_list|(
name|s
argument_list|,
name|type
operator|.
name|cast
argument_list|(
name|o
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasConfiguredPropertyValue
parameter_list|(
name|String
name|beanName
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|searchValue
parameter_list|)
block|{
name|ConfigurableApplicationContext
name|ctxt
init|=
operator|(
name|ConfigurableApplicationContext
operator|)
name|context
decl_stmt|;
name|BeanDefinition
name|def
init|=
name|ctxt
operator|.
name|getBeanFactory
argument_list|()
operator|.
name|getBeanDefinition
argument_list|(
name|beanName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ctxt
operator|.
name|getBeanFactory
argument_list|()
operator|.
name|isSingleton
argument_list|(
name|beanName
argument_list|)
operator|||
name|def
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Collection
argument_list|<
name|?
argument_list|>
name|ids
init|=
literal|null
decl_stmt|;
name|PropertyValue
name|pv
init|=
name|def
operator|.
name|getPropertyValues
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|pv
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|pv
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Collection
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The property "
operator|+
name|propertyName
operator|+
literal|" must be a collection!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Mergeable
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|Mergeable
operator|)
name|value
operator|)
operator|.
name|isMergeEnabled
argument_list|()
condition|)
block|{
name|ids
operator|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
expr_stmt|;
block|}
block|}
else|else
block|{
name|ids
operator|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ids
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|itr
init|=
name|ids
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|TypedStringValue
condition|)
block|{
if|if
condition|(
name|searchValue
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|TypedStringValue
operator|)
name|o
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|searchValue
operator|.
name|equals
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

