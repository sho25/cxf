begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|InternetHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|HttpHeaderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Attachment
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|AttachmentUtil
block|{
specifier|public
specifier|static
specifier|final
name|String
name|BODY_ATTACHMENT_ID
init|=
literal|"root.message@cxf.apache.org"
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|int
name|counter
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ATT_UUID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|BOUND_RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|AttachmentUtil
parameter_list|()
block|{      }
comment|/**      * @param ns      * @return      */
specifier|public
specifier|static
name|String
name|createContentID
parameter_list|(
name|String
name|ns
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
comment|// tend to change
name|String
name|cid
init|=
literal|"http://cxf.apache.org/"
decl_stmt|;
name|String
name|name
init|=
name|ATT_UUID
operator|+
literal|"-"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
operator|++
name|counter
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|!=
literal|null
operator|&&
operator|(
name|ns
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|uri
operator|.
name|toURL
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|cid
operator|=
name|host
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|cid
operator|=
name|ns
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|cid
operator|=
name|ns
expr_stmt|;
block|}
block|}
return|return
name|URLEncoder
operator|.
name|encode
argument_list|(
name|name
argument_list|,
literal|"UTF-8"
argument_list|)
operator|+
literal|"@"
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|cid
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getUniqueBoundaryValue
parameter_list|()
block|{
comment|//generate a random UUID.
comment|//we don't need the cryptographically secure random uuid that
comment|//UUID.randomUUID() will produce.  Thus, use a faster
comment|//pseudo-random thing
name|long
name|leastSigBits
init|=
literal|0
decl_stmt|;
name|long
name|mostSigBits
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|BOUND_RANDOM
init|)
block|{
name|mostSigBits
operator|=
name|BOUND_RANDOM
operator|.
name|nextLong
argument_list|()
expr_stmt|;
name|leastSigBits
operator|=
name|BOUND_RANDOM
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|mostSigBits
operator|&=
literal|0xFFFFFFFFFFFF0FFFL
expr_stmt|;
comment|//clear version
name|mostSigBits
operator||=
literal|0x0000000000004000L
expr_stmt|;
comment|//set version
name|leastSigBits
operator|&=
literal|0x3FFFFFFFFFFFFFFFL
expr_stmt|;
comment|//clear the variant
name|leastSigBits
operator||=
literal|0x8000000000000000L
expr_stmt|;
comment|//set to IETF variant
name|UUID
name|result
init|=
operator|new
name|UUID
argument_list|(
name|mostSigBits
argument_list|,
name|leastSigBits
argument_list|)
decl_stmt|;
return|return
literal|"uuid:"
operator|+
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getAttachmentPartHeader
parameter_list|(
name|Attachment
name|att
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|HttpHeaderHelper
operator|.
name|getHeaderKey
argument_list|(
name|HttpHeaderHelper
operator|.
name|CONTENT_TYPE
argument_list|)
operator|+
literal|": "
operator|+
name|att
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getContentType
argument_list|()
operator|+
literal|";\r\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|att
operator|.
name|isXOP
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"Content-Transfer-Encoding: binary\r\n"
argument_list|)
expr_stmt|;
block|}
name|String
name|id
init|=
name|att
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'<'
condition|)
block|{
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|id
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"Content-ID:<"
operator|+
name|id
operator|+
literal|">\r\n\r\n"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|getDHMap
parameter_list|(
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|attachments
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|dataHandlers
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attachments
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|attachments
operator|instanceof
name|LazyAttachmentCollection
condition|)
block|{
name|dataHandlers
operator|=
operator|(
operator|(
name|LazyAttachmentCollection
operator|)
name|attachments
operator|)
operator|.
name|createDataHandlerMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//preserve the order of iteration
name|dataHandlers
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Attachment
name|attachment
range|:
name|attachments
control|)
block|{
name|dataHandlers
operator|.
name|put
argument_list|(
name|attachment
operator|.
name|getId
argument_list|()
argument_list|,
name|attachment
operator|.
name|getDataHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|dataHandlers
operator|==
literal|null
condition|?
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
argument_list|()
else|:
name|dataHandlers
return|;
block|}
specifier|public
specifier|static
name|Attachment
name|createAttachment
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|InternetHeaders
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|id
init|=
name|headers
operator|.
name|getHeader
argument_list|(
literal|"Content-ID"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|id
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|id
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//no Content-ID, set cxf default ID
name|id
operator|=
literal|"Content-ID:<root.message@cxf.apache.org"
expr_stmt|;
block|}
name|id
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|id
operator|.
name|startsWith
argument_list|(
literal|"cid:"
argument_list|)
condition|?
name|id
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
else|:
name|id
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|AttachmentImpl
name|att
init|=
operator|new
name|AttachmentImpl
argument_list|(
name|id
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ct
init|=
name|headers
operator|.
name|getHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|quotedPrintable
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|headers
operator|.
name|getAllHeaders
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Header
name|header
init|=
operator|(
name|Header
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|header
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Content-Transfer-Encoding"
argument_list|)
condition|)
block|{
if|if
condition|(
name|header
operator|.
name|getValue
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"binary"
argument_list|)
condition|)
block|{
name|att
operator|.
name|setXOP
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|header
operator|.
name|getValue
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"quoted-printable"
argument_list|)
condition|)
block|{
name|quotedPrintable
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|att
operator|.
name|setHeader
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|,
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|quotedPrintable
condition|)
block|{
name|DataSource
name|source
init|=
operator|new
name|AttachmentDataSource
argument_list|(
name|ct
argument_list|,
operator|new
name|QuotedPrintableDecoderStream
argument_list|(
name|stream
argument_list|)
argument_list|)
decl_stmt|;
name|att
operator|.
name|setDataHandler
argument_list|(
operator|new
name|DataHandler
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DataSource
name|source
init|=
operator|new
name|AttachmentDataSource
argument_list|(
name|ct
argument_list|,
name|stream
argument_list|)
decl_stmt|;
name|att
operator|.
name|setDataHandler
argument_list|(
operator|new
name|DataHandler
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|att
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isTypeSupported
parameter_list|(
name|String
name|contentType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|types
parameter_list|)
block|{
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|contentType
operator|=
name|contentType
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|types
control|)
block|{
if|if
condition|(
name|contentType
operator|.
name|indexOf
argument_list|(
name|s
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

