begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|extension
operator|.
name|BusExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|NoSuchBeanDefinitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|AutowireCapableBeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|BeanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|support
operator|.
name|BeanDefinitionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|wiring
operator|.
name|BeanConfigurerSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|wiring
operator|.
name|BeanWiringInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|wiring
operator|.
name|BeanWiringInfoResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContextAware
import|;
end_import

begin_class
specifier|public
class|class
name|ConfigurerImpl
extends|extends
name|BeanConfigurerSupport
implements|implements
name|Configurer
implements|,
name|ApplicationContextAware
implements|,
name|BusExtension
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ConfigurerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ApplicationContext
name|appContext
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|wildCardBeanDefinitions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ConfigurerImpl
parameter_list|()
block|{
comment|// complete
block|}
specifier|public
name|ConfigurerImpl
parameter_list|(
name|ApplicationContext
name|ac
parameter_list|)
block|{
name|setApplicationContext
argument_list|(
name|ac
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initWildcardDefinitionMap
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|appContext
condition|)
block|{
for|for
control|(
name|String
name|n
range|:
name|appContext
operator|.
name|getBeanDefinitionNames
argument_list|()
control|)
block|{
if|if
condition|(
name|isWildcardBeanName
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|AutowireCapableBeanFactory
name|bf
init|=
name|appContext
operator|.
name|getAutowireCapableBeanFactory
argument_list|()
decl_stmt|;
name|BeanDefinitionRegistry
name|bdr
init|=
operator|(
name|BeanDefinitionRegistry
operator|)
name|bf
decl_stmt|;
name|BeanDefinition
name|bd
init|=
name|bdr
operator|.
name|getBeanDefinition
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|bd
operator|.
name|getBeanClassName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|className
condition|)
block|{
if|if
condition|(
operator|!
name|wildCardBeanDefinitions
operator|.
name|containsKey
argument_list|(
name|className
argument_list|)
condition|)
block|{
name|wildCardBeanDefinitions
operator|.
name|put
argument_list|(
name|className
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|WARNING
argument_list|,
literal|"ONE_WILDCARD_BEAN_ID_PER_CLASS_MSG"
argument_list|,
operator|new
name|String
index|[]
block|{
name|wildCardBeanDefinitions
operator|.
name|get
argument_list|(
name|className
argument_list|)
block|,
name|className
block|,
name|n
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|WARNING
argument_list|,
literal|"WILDCARD_BEAN_ID_WITH_NO_CLASS_MSG"
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|configureBean
parameter_list|(
name|Object
name|beanInstance
parameter_list|)
block|{
name|configureBean
argument_list|(
literal|null
argument_list|,
name|beanInstance
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|configureBean
parameter_list|(
name|String
name|bn
parameter_list|,
name|Object
name|beanInstance
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|appContext
condition|)
block|{
return|return;
block|}
if|if
condition|(
literal|null
operator|==
name|bn
condition|)
block|{
name|bn
operator|=
name|getBeanName
argument_list|(
name|beanInstance
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|bn
condition|)
block|{
return|return;
block|}
name|configureWithWildCard
argument_list|(
name|bn
argument_list|,
name|beanInstance
argument_list|)
expr_stmt|;
specifier|final
name|String
name|beanName
init|=
name|bn
decl_stmt|;
name|setBeanWiringInfoResolver
argument_list|(
operator|new
name|BeanWiringInfoResolver
argument_list|()
block|{
specifier|public
name|BeanWiringInfo
name|resolveWiringInfo
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|beanName
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|beanName
argument_list|)
condition|)
block|{
return|return
operator|new
name|BeanWiringInfo
argument_list|(
name|beanName
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|super
operator|.
name|configureBean
argument_list|(
name|beanInstance
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Successfully performed injection."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchBeanDefinitionException
name|ex
parameter_list|)
block|{
comment|// users often wonder why the settings in their configuration files seem
comment|// to have no effect - the most common cause is that they have been using
comment|// incorrect bean ids
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"NO_MATCHING_BEAN_MSG"
argument_list|,
name|beanName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|configureWithWildCard
parameter_list|(
name|String
name|bn
parameter_list|,
name|Object
name|beanInstance
parameter_list|)
block|{
if|if
condition|(
operator|!
name|wildCardBeanDefinitions
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|isWildcardBeanName
argument_list|(
name|bn
argument_list|)
condition|)
block|{
name|String
name|className
init|=
name|beanInstance
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|wildCardBeanDefinitions
operator|.
name|containsKey
argument_list|(
name|className
argument_list|)
condition|)
block|{
name|String
name|wildCardBeanId
init|=
name|wildCardBeanDefinitions
operator|.
name|get
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|bn
operator|.
name|endsWith
argument_list|(
name|stripStar
argument_list|(
name|wildCardBeanId
argument_list|)
argument_list|)
condition|)
block|{
name|configureBean
argument_list|(
name|wildCardBeanId
argument_list|,
name|beanInstance
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|isWildcardBeanName
parameter_list|(
name|String
name|bn
parameter_list|)
block|{
return|return
name|bn
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'*'
return|;
block|}
specifier|private
name|String
name|stripStar
parameter_list|(
name|String
name|wildCardBeanId
parameter_list|)
block|{
return|return
name|wildCardBeanId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBeanName
parameter_list|(
name|Object
name|beanInstance
parameter_list|)
block|{
if|if
condition|(
name|beanInstance
operator|instanceof
name|Configurable
condition|)
block|{
return|return
operator|(
operator|(
name|Configurable
operator|)
name|beanInstance
operator|)
operator|.
name|getBeanName
argument_list|()
return|;
block|}
name|String
name|beanName
init|=
literal|null
decl_stmt|;
name|Method
name|m
init|=
literal|null
decl_stmt|;
try|try
block|{
name|m
operator|=
name|beanInstance
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getBeanName"
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
try|try
block|{
name|m
operator|=
name|beanInstance
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getBeanName"
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|beanName
operator|=
call|(
name|String
call|)
argument_list|(
name|m
operator|.
name|invoke
argument_list|(
name|beanInstance
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|WARNING
argument_list|,
literal|"ERROR_DETERMINING_BEAN_NAME_EXC"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|==
name|beanName
condition|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|INFO
argument_list|,
literal|"COULD_NOT_DETERMINE_BEAN_NAME_MSG"
argument_list|,
name|beanInstance
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|beanName
return|;
block|}
specifier|public
specifier|final
name|void
name|setApplicationContext
parameter_list|(
name|ApplicationContext
name|ac
parameter_list|)
block|{
name|appContext
operator|=
name|ac
expr_stmt|;
name|setBeanFactory
argument_list|(
name|appContext
operator|.
name|getAutowireCapableBeanFactory
argument_list|()
argument_list|)
expr_stmt|;
name|initWildcardDefinitionMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getRegistrationType
parameter_list|()
block|{
return|return
name|Configurer
operator|.
name|class
return|;
block|}
block|}
end_class

end_unit

