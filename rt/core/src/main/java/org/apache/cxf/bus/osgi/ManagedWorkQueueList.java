begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyChangeEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyChangeListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|AbstractServiceFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|AutomaticWorkQueueImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ManagedServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_comment
comment|/**  * List of work queues that can be managed using the OSGi configuration admin service  */
end_comment

begin_class
specifier|public
class|class
name|ManagedWorkQueueList
implements|implements
name|ManagedServiceFactory
implements|,
name|PropertyChangeListener
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FACTORY_PID
init|=
literal|"org.apache.cxf.workqueues"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractServiceFactoryBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AutomaticWorkQueueImpl
argument_list|>
name|queues
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|AutomaticWorkQueueImpl
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ServiceTracker
name|configAdminTracker
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|FACTORY_PID
return|;
block|}
specifier|public
name|void
name|updated
parameter_list|(
name|String
name|pid
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Dictionary
name|props
parameter_list|)
throws|throws
name|ConfigurationException
block|{
if|if
condition|(
name|pid
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|String
name|queueName
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|AutomaticWorkQueueImpl
operator|.
name|PROPERTY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|queues
operator|.
name|containsKey
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
name|queues
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
operator|.
name|update
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AutomaticWorkQueueImpl
name|wq
init|=
operator|new
name|AutomaticWorkQueueImpl
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|wq
operator|.
name|setShared
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wq
operator|.
name|update
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|wq
operator|.
name|addChangeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|queues
operator|.
name|put
argument_list|(
name|pid
argument_list|,
name|wq
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deleted
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
name|queues
operator|.
name|remove
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|propertyChange
parameter_list|(
name|PropertyChangeEvent
name|evt
parameter_list|)
block|{
try|try
block|{
name|AutomaticWorkQueueImpl
name|queue
init|=
operator|(
name|AutomaticWorkQueueImpl
operator|)
name|evt
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|ConfigurationAdmin
name|configurationAdmin
init|=
operator|(
name|ConfigurationAdmin
operator|)
name|configAdminTracker
operator|.
name|getService
argument_list|()
decl_stmt|;
if|if
condition|(
name|configurationAdmin
operator|!=
literal|null
condition|)
block|{
name|Configuration
name|selectedConfig
init|=
name|findConfigForQueueName
argument_list|(
name|queue
argument_list|,
name|configurationAdmin
argument_list|)
decl_stmt|;
if|if
condition|(
name|selectedConfig
operator|!=
literal|null
condition|)
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
name|queue
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|selectedConfig
operator|.
name|update
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Configuration
name|findConfigForQueueName
parameter_list|(
name|AutomaticWorkQueueImpl
name|queue
parameter_list|,
name|ConfigurationAdmin
name|configurationAdmin
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|selectedConfig
init|=
literal|null
decl_stmt|;
name|String
name|filter
init|=
literal|"(service.factoryPid="
operator|+
name|ManagedWorkQueueList
operator|.
name|FACTORY_PID
operator|+
literal|")"
decl_stmt|;
name|Configuration
index|[]
name|configs
init|=
name|configurationAdmin
operator|.
name|listConfigurations
argument_list|(
name|filter
argument_list|)
decl_stmt|;
for|for
control|(
name|Configuration
name|configuration
range|:
name|configs
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Dictionary
name|props
init|=
name|configuration
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|AutomaticWorkQueueImpl
operator|.
name|PROPERTY_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|selectedConfig
operator|=
name|configuration
expr_stmt|;
block|}
block|}
return|return
name|selectedConfig
return|;
block|}
specifier|public
name|void
name|setConfigAdminTracker
parameter_list|(
name|ServiceTracker
name|configAdminTracker
parameter_list|)
block|{
name|this
operator|.
name|configAdminTracker
operator|=
name|configAdminTracker
expr_stmt|;
block|}
block|}
end_class

end_unit

