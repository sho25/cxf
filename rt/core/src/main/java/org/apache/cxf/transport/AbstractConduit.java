begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_comment
comment|/**  * Abstract base class factoring out common Conduit logic,  * allowing non-decoupled transports to be written without any  * regard for the decoupled back-channel or partial response logic.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractConduit
extends|extends
name|AbstractObservable
implements|implements
name|Conduit
block|{
specifier|protected
specifier|final
name|EndpointReferenceType
name|target
decl_stmt|;
specifier|public
name|AbstractConduit
parameter_list|(
name|EndpointReferenceType
name|t
parameter_list|)
block|{
name|target
operator|=
name|t
expr_stmt|;
block|}
comment|/**      * @return the reference associated with the target Destination      */
specifier|public
name|EndpointReferenceType
name|getTarget
parameter_list|()
block|{
return|return
name|target
return|;
block|}
comment|/**      * @param message for which content should be closed.      */
specifier|public
name|void
name|close
parameter_list|(
name|Message
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|os
init|=
name|msg
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|InputStream
name|in
init|=
name|msg
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Close the conduit.      */
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// nothing to do by default
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"conduit: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
operator|+
literal|"target: "
operator|+
operator|(
operator|(
name|getTarget
argument_list|()
operator|!=
literal|null
operator|&&
name|getTarget
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|getTarget
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
else|:
literal|"null"
operator|)
return|;
block|}
block|}
end_class

end_unit

