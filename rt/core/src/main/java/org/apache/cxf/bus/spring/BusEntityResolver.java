begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|DelegatingEntityResolver
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|BusEntityResolver
extends|extends
name|DelegatingEntityResolver
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|BusEntityResolver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|EntityResolver
name|dtdResolver
decl_stmt|;
specifier|private
name|EntityResolver
name|schemaResolver
decl_stmt|;
specifier|public
name|BusEntityResolver
parameter_list|(
name|EntityResolver
name|dr
parameter_list|,
name|EntityResolver
name|sr
parameter_list|)
block|{
name|super
argument_list|(
name|dr
argument_list|,
name|sr
argument_list|)
expr_stmt|;
name|dtdResolver
operator|=
name|dr
expr_stmt|;
name|schemaResolver
operator|=
name|sr
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
name|InputSource
name|source
init|=
name|super
operator|.
name|resolveEntity
argument_list|(
name|publicId
argument_list|,
name|systemId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|source
operator|&&
literal|null
operator|!=
name|systemId
condition|)
block|{
comment|// try the schema and dtd resolver in turn, ignoring the suffix in publicId
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Attempting to resolve systemId {0}"
argument_list|,
name|systemId
argument_list|)
expr_stmt|;
name|source
operator|=
name|schemaResolver
operator|.
name|resolveEntity
argument_list|(
name|publicId
argument_list|,
name|systemId
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|source
condition|)
block|{
name|source
operator|=
name|dtdResolver
operator|.
name|resolveEntity
argument_list|(
name|publicId
argument_list|,
name|systemId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|source
return|;
block|}
block|}
end_class

end_unit

