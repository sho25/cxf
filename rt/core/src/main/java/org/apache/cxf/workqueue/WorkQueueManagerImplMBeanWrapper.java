begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|ManagedComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|ManagementConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|WorkQueueManager
operator|.
name|ThreadingModel
import|;
end_import

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|componentName
operator|=
literal|"WorkQueue"
argument_list|,
name|description
operator|=
literal|"The CXF internal thread pool for manangement "
argument_list|,
name|currencyTimeLimit
operator|=
literal|15
argument_list|,
name|persistPolicy
operator|=
literal|"OnUpdate"
argument_list|,
name|persistPeriod
operator|=
literal|200
argument_list|)
specifier|public
class|class
name|WorkQueueManagerImplMBeanWrapper
implements|implements
name|ManagedComponent
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NAME_VALUE
init|=
literal|"Bus.WorkQueue"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TYPE_VALUE
init|=
literal|"WorkQueueMBean"
decl_stmt|;
specifier|private
name|WorkQueueManagerImpl
name|wqManager
decl_stmt|;
specifier|private
name|AutomaticWorkQueueImpl
name|aWorkQueue
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|public
name|WorkQueueManagerImplMBeanWrapper
parameter_list|(
name|WorkQueueManagerImpl
name|wq
parameter_list|)
block|{
name|wqManager
operator|=
name|wq
expr_stmt|;
name|bus
operator|=
name|wq
operator|.
name|getBus
argument_list|()
expr_stmt|;
if|if
condition|(
name|wqManager
operator|.
name|autoQueue
operator|!=
literal|null
operator|&&
name|AutomaticWorkQueueImpl
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|wqManager
operator|.
name|autoQueue
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|aWorkQueue
operator|=
operator|(
name|AutomaticWorkQueueImpl
operator|)
name|wqManager
operator|.
name|autoQueue
expr_stmt|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|currencyTimeLimit
operator|=
literal|30
argument_list|)
specifier|public
name|void
name|shutdown
parameter_list|(
name|boolean
name|processRemainingWorkItems
parameter_list|)
block|{
name|wqManager
operator|.
name|shutdown
argument_list|(
name|processRemainingWorkItems
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The thread pool work model"
argument_list|,
name|defaultValue
operator|=
literal|"SINGLE_THREADED"
argument_list|,
name|persistPolicy
operator|=
literal|"OnUpdate"
argument_list|)
specifier|public
name|String
name|getThreadingModel
parameter_list|()
block|{
return|return
name|wqManager
operator|.
name|getThreadingModel
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setThreadingModel
parameter_list|(
name|String
name|model
parameter_list|)
block|{
if|if
condition|(
name|model
operator|.
name|compareTo
argument_list|(
literal|"SINGLE_THREADED"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|wqManager
operator|.
name|setThreadingModel
argument_list|(
name|ThreadingModel
operator|.
name|SINGLE_THREADED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|model
operator|.
name|compareTo
argument_list|(
literal|"MULTI_THREADED"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|wqManager
operator|.
name|setThreadingModel
argument_list|(
name|ThreadingModel
operator|.
name|MULTI_THREADED
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The WorkQueueMaxSize"
argument_list|,
name|persistPolicy
operator|=
literal|"OnUpdate"
argument_list|)
specifier|public
name|long
name|getWorkQueueMaxSize
parameter_list|()
block|{
return|return
name|aWorkQueue
operator|.
name|getMaxSize
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The WorkQueue Current size"
argument_list|,
name|persistPolicy
operator|=
literal|"OnUpdate"
argument_list|)
specifier|public
name|long
name|getWorkQueueSize
parameter_list|()
block|{
return|return
name|aWorkQueue
operator|.
name|getSize
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The WorkQueue has nothing to do"
argument_list|,
name|persistPolicy
operator|=
literal|"OnUpdate"
argument_list|)
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|aWorkQueue
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The WorkQueue is very busy"
argument_list|)
specifier|public
name|boolean
name|isFull
parameter_list|()
block|{
return|return
name|aWorkQueue
operator|.
name|isFull
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The WorkQueue HighWaterMark"
argument_list|,
name|persistPolicy
operator|=
literal|"OnUpdate"
argument_list|)
specifier|public
name|int
name|getHighWaterMark
parameter_list|()
block|{
return|return
name|aWorkQueue
operator|.
name|getHighWaterMark
argument_list|()
return|;
block|}
specifier|public
name|void
name|setHighWaterMark
parameter_list|(
name|int
name|hwm
parameter_list|)
block|{
name|aWorkQueue
operator|.
name|setHighWaterMark
argument_list|(
name|hwm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The WorkQueue LowWaterMark"
argument_list|,
name|persistPolicy
operator|=
literal|"OnUpdate"
argument_list|)
specifier|public
name|int
name|getLowWaterMark
parameter_list|()
block|{
return|return
name|aWorkQueue
operator|.
name|getLowWaterMark
argument_list|()
return|;
block|}
specifier|public
name|void
name|setLowWaterMark
parameter_list|(
name|int
name|lwm
parameter_list|)
block|{
name|aWorkQueue
operator|.
name|setLowWaterMark
argument_list|(
name|lwm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ObjectName
name|getObjectName
parameter_list|()
throws|throws
name|JMException
block|{
name|String
name|busId
init|=
name|bus
operator|.
name|getId
argument_list|()
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|DEFAULT_DOMAIN_NAME
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|BUS_ID_PROP
operator|+
literal|"="
operator|+
name|busId
operator|+
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|TYPE_PROP
operator|+
literal|"="
operator|+
name|TYPE_VALUE
operator|+
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|NAME_PROP
operator|+
literal|"="
operator|+
name|NAME_VALUE
argument_list|)
expr_stmt|;
comment|//Use default domain name of server
return|return
operator|new
name|ObjectName
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

