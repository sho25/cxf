begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|WSDLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_comment
comment|/**  * A basic test case meant for helping users unit test their services.  * @see TestUtilities  */
end_comment

begin_class
specifier|public
class|class
name|AbstractCXFTest
extends|extends
name|Assert
block|{
specifier|protected
name|TestUtilities
name|testUtilities
decl_stmt|;
specifier|protected
name|Bus
name|bus
decl_stmt|;
specifier|protected
name|AbstractCXFTest
parameter_list|()
block|{
name|testUtilities
operator|=
operator|new
name|TestUtilities
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|testUtilities
operator|.
name|addDefaultNamespaces
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUpBus
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|bus
operator|==
literal|null
condition|)
block|{
name|bus
operator|=
name|createBus
argument_list|()
expr_stmt|;
name|testUtilities
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|shutdownBus
parameter_list|()
block|{
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|bus
operator|.
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|bus
operator|=
literal|null
expr_stmt|;
block|}
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Bus
name|createBus
parameter_list|()
throws|throws
name|BusException
block|{
return|return
name|BusFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createBus
argument_list|()
return|;
block|}
specifier|protected
name|byte
index|[]
name|invokeBytes
parameter_list|(
name|String
name|address
parameter_list|,
name|String
name|transport
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|testUtilities
operator|.
name|invokeBytes
argument_list|(
name|address
argument_list|,
name|transport
argument_list|,
name|message
argument_list|)
return|;
block|}
specifier|protected
name|Node
name|invoke
parameter_list|(
name|String
name|address
parameter_list|,
name|String
name|transport
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|testUtilities
operator|.
name|invoke
argument_list|(
name|address
argument_list|,
name|transport
argument_list|,
name|message
argument_list|)
return|;
block|}
specifier|protected
name|Node
name|invoke
parameter_list|(
name|String
name|address
parameter_list|,
name|String
name|transport
parameter_list|,
name|byte
index|[]
name|message
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|testUtilities
operator|.
name|invoke
argument_list|(
name|address
argument_list|,
name|transport
argument_list|,
name|message
argument_list|)
return|;
block|}
comment|/**      * Assert that the following XPath query selects one or more nodes.      *       * @param xpath      * @throws Exception       */
specifier|public
name|NodeList
name|assertValid
parameter_list|(
name|String
name|xpath
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|testUtilities
operator|.
name|assertValid
argument_list|(
name|xpath
argument_list|,
name|node
argument_list|)
return|;
block|}
comment|/**      * Assert that the following XPath query selects a boolean value.      *       * @param xpath      * @throws Exception       */
specifier|public
name|boolean
name|assertValidBoolean
parameter_list|(
name|String
name|xpath
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|testUtilities
operator|.
name|assertValidBoolean
argument_list|(
name|xpath
argument_list|,
name|node
argument_list|)
return|;
block|}
comment|/**      * Assert that the following XPath query selects no nodes.      *       * @param xpath      */
specifier|public
name|NodeList
name|assertInvalid
parameter_list|(
name|String
name|xpath
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|testUtilities
operator|.
name|assertInvalid
argument_list|(
name|xpath
argument_list|,
name|node
argument_list|)
return|;
block|}
comment|/**      * Assert that the text of the xpath node retrieved is equal to the value      * specified.      *       * @param xpath      * @param value      * @param node      */
specifier|public
name|void
name|assertXPathEquals
parameter_list|(
name|String
name|xpath
parameter_list|,
name|String
name|value
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
name|testUtilities
operator|.
name|assertXPathEquals
argument_list|(
name|xpath
argument_list|,
name|value
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|/**      * Assert that this node is not a SOAP fault part.      * @param node      * @throws Exception      */
specifier|public
name|void
name|assertNoFault
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
name|testUtilities
operator|.
name|assertNoFault
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a namespace that will be used for XPath expressions.      *       * @param ns Namespace name.      * @param uri The namespace uri.      */
specifier|public
name|void
name|addNamespace
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|testUtilities
operator|.
name|addNamespace
argument_list|(
name|ns
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNamespaces
parameter_list|()
block|{
return|return
name|testUtilities
operator|.
name|getNamespaces
argument_list|()
return|;
block|}
specifier|protected
name|InputStream
name|getResourceAsStream
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
return|return
name|testUtilities
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
return|;
block|}
specifier|protected
name|Reader
name|getResourceAsReader
parameter_list|(
name|String
name|resource
parameter_list|)
block|{
return|return
name|testUtilities
operator|.
name|getResourceAsReader
argument_list|(
name|resource
argument_list|)
return|;
block|}
specifier|public
name|File
name|getTestFile
parameter_list|(
name|String
name|relativePath
parameter_list|)
block|{
return|return
name|testUtilities
operator|.
name|getTestFile
argument_list|(
name|relativePath
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getBasedir
parameter_list|()
block|{
return|return
name|TestUtilities
operator|.
name|getBasedir
argument_list|()
return|;
block|}
specifier|protected
name|Document
name|getWSDLDocument
parameter_list|(
name|Server
name|server
parameter_list|)
throws|throws
name|WSDLException
block|{
return|return
name|testUtilities
operator|.
name|getWSDLDocument
argument_list|(
name|server
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|TestMessageObserver
extends|extends
name|TestUtilities
operator|.
name|TestMessageObserver
block|{
specifier|public
name|TestMessageObserver
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

