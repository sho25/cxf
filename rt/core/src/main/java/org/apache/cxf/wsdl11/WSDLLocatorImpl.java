begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|xml
operator|.
name|WSDLLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ExtendedURIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|resolver
operator|.
name|Catalog
import|;
end_import

begin_class
specifier|public
class|class
name|WSDLLocatorImpl
implements|implements
name|WSDLLocator
block|{
specifier|private
name|String
name|wsdlUrl
decl_stmt|;
specifier|private
name|ExtendedURIResolver
name|resolver
decl_stmt|;
specifier|private
name|String
name|baseUri
decl_stmt|;
specifier|private
name|String
name|importedUri
decl_stmt|;
specifier|private
name|Catalog
name|catalogResolver
decl_stmt|;
specifier|public
name|WSDLLocatorImpl
parameter_list|(
name|String
name|wsdlUrl
parameter_list|)
block|{
name|this
operator|.
name|wsdlUrl
operator|=
name|wsdlUrl
expr_stmt|;
name|this
operator|.
name|baseUri
operator|=
name|this
operator|.
name|wsdlUrl
expr_stmt|;
name|resolver
operator|=
operator|new
name|ExtendedURIResolver
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setCatalogResolver
parameter_list|(
specifier|final
name|Catalog
name|cr
parameter_list|)
block|{
name|this
operator|.
name|catalogResolver
operator|=
name|cr
expr_stmt|;
block|}
specifier|private
name|InputSource
name|resolve
parameter_list|(
specifier|final
name|String
name|target
parameter_list|,
specifier|final
name|String
name|base
parameter_list|)
block|{
try|try
block|{
name|String
name|resolvedLocation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|catalogResolver
operator|!=
literal|null
condition|)
block|{
name|resolvedLocation
operator|=
name|catalogResolver
operator|.
name|resolveSystem
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolvedLocation
operator|==
literal|null
condition|)
block|{
name|resolvedLocation
operator|=
name|catalogResolver
operator|.
name|resolveURI
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resolvedLocation
operator|==
literal|null
condition|)
block|{
name|resolvedLocation
operator|=
name|catalogResolver
operator|.
name|resolvePublic
argument_list|(
name|target
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resolvedLocation
operator|==
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|resolver
operator|.
name|resolve
argument_list|(
name|target
argument_list|,
name|base
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|resolver
operator|.
name|resolve
argument_list|(
name|resolvedLocation
argument_list|,
name|base
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Catalog resolve failed: "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|InputSource
name|getBaseInputSource
parameter_list|()
block|{
name|InputSource
name|result
init|=
name|resolve
argument_list|(
name|baseUri
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|baseUri
operator|=
name|resolver
operator|.
name|getURI
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|String
name|getBaseURI
parameter_list|()
block|{
return|return
name|baseUri
return|;
block|}
specifier|public
name|String
name|getLatestImportURI
parameter_list|()
block|{
return|return
name|resolver
operator|.
name|getLatestImportURI
argument_list|()
return|;
block|}
specifier|public
name|InputSource
name|getImportInputSource
parameter_list|(
name|String
name|parent
parameter_list|,
name|String
name|importLocation
parameter_list|)
block|{
name|this
operator|.
name|baseUri
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|importedUri
operator|=
name|importLocation
expr_stmt|;
return|return
name|resolve
argument_list|(
name|this
operator|.
name|importedUri
argument_list|,
name|this
operator|.
name|baseUri
argument_list|)
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|resolver
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

