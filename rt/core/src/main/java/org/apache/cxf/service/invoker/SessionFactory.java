begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_comment
comment|/**  * Creates a new instance for each session.  *   * This may have restrictions on what the bean can look like.   For example,   * some session implementations require the beans to be Serializable  */
end_comment

begin_class
specifier|public
class|class
name|SessionFactory
implements|implements
name|Factory
block|{
name|Factory
name|factory
decl_stmt|;
specifier|public
name|SessionFactory
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|svcClass
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|PerRequestFactory
argument_list|(
name|svcClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SessionFactory
parameter_list|(
name|Factory
name|f
parameter_list|)
block|{
name|factory
operator|=
name|f
expr_stmt|;
block|}
comment|/** {@inheritDoc}*/
specifier|public
name|Object
name|create
parameter_list|(
name|Exchange
name|e
parameter_list|)
throws|throws
name|Throwable
block|{
name|Service
name|serv
init|=
name|e
operator|.
name|get
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|serv
init|)
block|{
name|o
operator|=
name|e
operator|.
name|getSession
argument_list|()
operator|.
name|get
argument_list|(
name|serv
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|factory
operator|.
name|create
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|getSession
argument_list|()
operator|.
name|put
argument_list|(
name|serv
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|o
return|;
block|}
comment|/** {@inheritDoc}*/
specifier|public
name|void
name|release
parameter_list|(
name|Exchange
name|e
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
comment|//nothing
block|}
block|}
end_class

end_unit

