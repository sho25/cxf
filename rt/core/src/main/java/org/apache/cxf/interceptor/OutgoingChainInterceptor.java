begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ConduitSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|PreexistingConduitSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseChainCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_class
specifier|public
class|class
name|OutgoingChainInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|OutgoingChainInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|PhaseChainCache
name|chainCache
init|=
operator|new
name|PhaseChainCache
argument_list|()
decl_stmt|;
specifier|public
name|OutgoingChainInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|POST_INVOKE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Exchange
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|bin
init|=
name|ex
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|bin
operator|&&
literal|null
operator|!=
name|bin
operator|.
name|getOperationInfo
argument_list|()
operator|&&
name|bin
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
name|closeInput
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return;
block|}
name|Message
name|out
init|=
name|ex
operator|.
name|getOutMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|getBackChannelConduit
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|bin
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|put
argument_list|(
name|MessageInfo
operator|.
name|class
argument_list|,
name|bin
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|put
argument_list|(
name|BindingMessageInfo
operator|.
name|class
argument_list|,
name|bin
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|InterceptorChain
name|outChain
init|=
name|out
operator|.
name|getInterceptorChain
argument_list|()
decl_stmt|;
if|if
condition|(
name|outChain
operator|==
literal|null
condition|)
block|{
name|outChain
operator|=
name|getChain
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|out
operator|.
name|setInterceptorChain
argument_list|(
name|outChain
argument_list|)
expr_stmt|;
block|}
name|outChain
operator|.
name|doIntercept
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|closeInput
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|InputStream
name|is
init|=
name|message
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|message
operator|.
name|removeContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
specifier|protected
specifier|static
name|Conduit
name|getBackChannelConduit
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Conduit
name|conduit
init|=
literal|null
decl_stmt|;
name|Exchange
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|.
name|getConduit
argument_list|(
name|message
argument_list|)
operator|==
literal|null
operator|&&
name|ex
operator|.
name|getDestination
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|conduit
operator|=
name|ex
operator|.
name|getDestination
argument_list|()
operator|.
name|getBackChannel
argument_list|(
name|ex
operator|.
name|getInMessage
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|ConduitSelector
operator|.
name|class
argument_list|,
operator|new
name|PreexistingConduitSelector
argument_list|(
name|conduit
argument_list|,
name|ex
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|conduit
return|;
block|}
specifier|public
specifier|static
name|InterceptorChain
name|getOutInterceptorChain
parameter_list|(
name|Exchange
name|ex
parameter_list|)
block|{
name|Bus
name|bus
init|=
name|ex
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|Binding
name|binding
init|=
name|ex
operator|.
name|get
argument_list|(
name|Binding
operator|.
name|class
argument_list|)
decl_stmt|;
name|PhaseManager
name|pm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PhaseManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|PhaseInterceptorChain
name|chain
init|=
operator|new
name|PhaseInterceptorChain
argument_list|(
name|pm
operator|.
name|getOutPhases
argument_list|()
argument_list|)
decl_stmt|;
name|Endpoint
name|ep
init|=
name|ex
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|il
init|=
name|ep
operator|.
name|getOutInterceptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by endpoint: "
operator|+
name|il
argument_list|)
expr_stmt|;
block|}
name|chain
operator|.
name|add
argument_list|(
name|il
argument_list|)
expr_stmt|;
name|il
operator|=
name|ep
operator|.
name|getService
argument_list|()
operator|.
name|getOutInterceptors
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by service: "
operator|+
name|il
argument_list|)
expr_stmt|;
block|}
name|chain
operator|.
name|add
argument_list|(
name|il
argument_list|)
expr_stmt|;
name|il
operator|=
name|bus
operator|.
name|getOutInterceptors
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by bus: "
operator|+
name|il
argument_list|)
expr_stmt|;
block|}
name|chain
operator|.
name|add
argument_list|(
name|il
argument_list|)
expr_stmt|;
if|if
condition|(
name|binding
operator|!=
literal|null
condition|)
block|{
name|il
operator|=
name|binding
operator|.
name|getOutInterceptors
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by binding: "
operator|+
name|il
argument_list|)
expr_stmt|;
block|}
name|chain
operator|.
name|add
argument_list|(
name|il
argument_list|)
expr_stmt|;
block|}
name|modifyChain
argument_list|(
name|chain
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setFaultObserver
argument_list|(
name|ep
operator|.
name|getOutFaultObserver
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|chain
return|;
block|}
specifier|private
specifier|static
name|void
name|modifyChain
parameter_list|(
name|PhaseInterceptorChain
name|chain
parameter_list|,
name|Exchange
name|ex
parameter_list|)
block|{
name|modifyChain
argument_list|(
name|chain
argument_list|,
name|ex
operator|.
name|getInMessage
argument_list|()
argument_list|)
expr_stmt|;
name|modifyChain
argument_list|(
name|chain
argument_list|,
name|ex
operator|.
name|getOutMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|modifyChain
parameter_list|(
name|PhaseInterceptorChain
name|chain
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|InterceptorProvider
argument_list|>
name|providers
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|INTERCEPTOR_PROVIDERS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|providers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|InterceptorProvider
name|p
range|:
name|providers
control|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|p
operator|.
name|getOutInterceptors
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Collection
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|is
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|m
operator|.
name|get
argument_list|(
name|Message
operator|.
name|OUT_INTERCEPTORS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|.
name|getDestination
argument_list|()
operator|instanceof
name|InterceptorProvider
condition|)
block|{
name|chain
operator|.
name|add
argument_list|(
operator|(
operator|(
name|InterceptorProvider
operator|)
name|m
operator|.
name|getDestination
argument_list|()
operator|)
operator|.
name|getOutInterceptors
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PhaseInterceptorChain
name|getChain
parameter_list|(
name|Exchange
name|ex
parameter_list|)
block|{
name|Bus
name|bus
init|=
name|ex
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|Binding
name|binding
init|=
name|ex
operator|.
name|get
argument_list|(
name|Binding
operator|.
name|class
argument_list|)
decl_stmt|;
name|Endpoint
name|ep
init|=
name|ex
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i1
init|=
name|bus
operator|.
name|getOutInterceptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by bus: "
operator|+
name|i1
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i2
init|=
name|ep
operator|.
name|getService
argument_list|()
operator|.
name|getOutInterceptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by service: "
operator|+
name|i2
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i3
init|=
name|ep
operator|.
name|getOutInterceptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by endpoint: "
operator|+
name|i3
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i4
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|binding
operator|!=
literal|null
condition|)
block|{
name|i4
operator|=
name|binding
operator|.
name|getOutInterceptors
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by binding: "
operator|+
name|i4
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|i5
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ep
operator|.
name|getService
argument_list|()
operator|.
name|getDataBinding
argument_list|()
operator|instanceof
name|InterceptorProvider
condition|)
block|{
name|i5
operator|=
operator|(
operator|(
name|InterceptorProvider
operator|)
name|ep
operator|.
name|getService
argument_list|()
operator|.
name|getDataBinding
argument_list|()
operator|)
operator|.
name|getOutInterceptors
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by databinding: "
operator|+
name|i5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i4
operator|==
literal|null
condition|)
block|{
name|i4
operator|=
name|i5
expr_stmt|;
name|i5
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|PhaseInterceptorChain
name|chain
decl_stmt|;
if|if
condition|(
name|i5
operator|!=
literal|null
condition|)
block|{
name|chain
operator|=
name|chainCache
operator|.
name|get
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|PhaseManager
operator|.
name|class
argument_list|)
operator|.
name|getOutPhases
argument_list|()
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|i3
argument_list|,
name|i4
argument_list|,
name|i5
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i4
operator|!=
literal|null
condition|)
block|{
name|chain
operator|=
name|chainCache
operator|.
name|get
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|PhaseManager
operator|.
name|class
argument_list|)
operator|.
name|getOutPhases
argument_list|()
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|i3
argument_list|,
name|i4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chain
operator|=
name|chainCache
operator|.
name|get
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|PhaseManager
operator|.
name|class
argument_list|)
operator|.
name|getOutPhases
argument_list|()
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|i3
argument_list|)
expr_stmt|;
block|}
name|modifyChain
argument_list|(
name|chain
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setFaultObserver
argument_list|(
name|ep
operator|.
name|getOutFaultObserver
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|chain
return|;
block|}
block|}
end_class

end_unit

