begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|InstrumentationManager
import|;
end_import

begin_class
specifier|public
class|class
name|AutomaticWorkQueueImpl
extends|extends
name|ThreadPoolExecutor
implements|implements
name|AutomaticWorkQueue
block|{
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_QUEUE_SIZE
init|=
literal|256
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AutomaticWorkQueueImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|maxQueueSize
decl_stmt|;
name|WorkQueueManagerImpl
name|manager
decl_stmt|;
name|String
name|name
init|=
literal|"default"
decl_stmt|;
specifier|public
name|AutomaticWorkQueueImpl
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_MAX_QUEUE_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AutomaticWorkQueueImpl
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|DEFAULT_MAX_QUEUE_SIZE
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AutomaticWorkQueueImpl
parameter_list|(
name|int
name|max
parameter_list|)
block|{
name|this
argument_list|(
name|max
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AutomaticWorkQueueImpl
parameter_list|(
name|int
name|max
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|max
argument_list|,
literal|0
argument_list|,
literal|25
argument_list|,
literal|5
argument_list|,
literal|2
operator|*
literal|60
operator|*
literal|1000L
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AutomaticWorkQueueImpl
parameter_list|(
name|int
name|mqs
parameter_list|,
name|int
name|initialThreads
parameter_list|,
name|int
name|highWaterMark
parameter_list|,
name|int
name|lowWaterMark
parameter_list|,
name|long
name|dequeueTimeout
parameter_list|)
block|{
name|this
argument_list|(
name|mqs
argument_list|,
name|initialThreads
argument_list|,
name|highWaterMark
argument_list|,
name|lowWaterMark
argument_list|,
name|dequeueTimeout
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AutomaticWorkQueueImpl
parameter_list|(
name|int
name|mqs
parameter_list|,
name|int
name|initialThreads
parameter_list|,
name|int
name|highWaterMark
parameter_list|,
name|int
name|lowWaterMark
parameter_list|,
name|long
name|dequeueTimeout
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
operator|-
literal|1
operator|==
name|lowWaterMark
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|lowWaterMark
argument_list|,
operator|-
literal|1
operator|==
name|highWaterMark
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|highWaterMark
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
name|dequeueTimeout
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|mqs
operator|==
operator|-
literal|1
condition|?
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|DEFAULT_MAX_QUEUE_SIZE
argument_list|)
else|:
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|mqs
argument_list|)
argument_list|,
name|createThreadFactory
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|maxQueueSize
operator|=
name|mqs
operator|==
operator|-
literal|1
condition|?
name|DEFAULT_MAX_QUEUE_SIZE
else|:
name|mqs
expr_stmt|;
name|lowWaterMark
operator|=
operator|-
literal|1
operator|==
name|lowWaterMark
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|lowWaterMark
expr_stmt|;
name|highWaterMark
operator|=
operator|-
literal|1
operator|==
name|highWaterMark
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|highWaterMark
expr_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"Constructing automatic work queue with:\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"max queue size: "
operator|+
name|maxQueueSize
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"initialThreads: "
operator|+
name|initialThreads
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"lowWaterMark: "
operator|+
name|lowWaterMark
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"highWaterMark: "
operator|+
name|highWaterMark
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|initialThreads
operator|>
name|highWaterMark
condition|)
block|{
name|initialThreads
operator|=
name|highWaterMark
expr_stmt|;
block|}
comment|// as we cannot prestart more core than corePoolSize initial threads, we temporarily
comment|// change the corePoolSize to the number of initial threads
comment|// this is important as otherwise these threads will be created only when the queue has filled up,
comment|// potentially causing problems with starting up under heavy load
if|if
condition|(
name|initialThreads
argument_list|<
name|Integer
operator|.
name|MAX_VALUE
operator|&&
name|initialThreads
argument_list|>
literal|0
condition|)
block|{
name|setCorePoolSize
argument_list|(
name|initialThreads
argument_list|)
expr_stmt|;
name|int
name|started
init|=
name|prestartAllCoreThreads
argument_list|()
decl_stmt|;
if|if
condition|(
name|started
operator|<
name|initialThreads
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"THREAD_START_FAILURE_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|started
block|,
name|initialThreads
block|}
argument_list|)
expr_stmt|;
block|}
name|setCorePoolSize
argument_list|(
name|lowWaterMark
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|ThreadFactory
name|createThreadFactory
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|ThreadGroup
name|group
decl_stmt|;
try|try
block|{
comment|//Try and find the highest level ThreadGroup that we're allowed to use.
comment|//That SHOULD allow the default classloader and thread locals and such
comment|//to be the least likely to cause issues down the road.
name|group
operator|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ThreadGroup
argument_list|>
argument_list|()
block|{
specifier|public
name|ThreadGroup
name|run
parameter_list|()
block|{
name|ThreadGroup
name|group
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getThreadGroup
argument_list|()
decl_stmt|;
name|ThreadGroup
name|parent
init|=
name|group
decl_stmt|;
try|try
block|{
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|group
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|//ignore - if we get here, the "group" is as high as
comment|//the security manager will allow us to go.   Use that one.
block|}
return|return
operator|new
name|ThreadGroup
argument_list|(
name|group
argument_list|,
name|name
operator|+
literal|"-workqueue"
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|group
operator|=
operator|new
name|ThreadGroup
argument_list|(
name|name
operator|+
literal|"-workqueue"
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|AWQThreadFactory
argument_list|(
name|group
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|static
class|class
name|AWQThreadFactory
implements|implements
name|ThreadFactory
block|{
specifier|final
name|AtomicInteger
name|threadNumber
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ThreadGroup
name|group
decl_stmt|;
name|String
name|name
decl_stmt|;
name|ClassLoader
name|loader
decl_stmt|;
name|AWQThreadFactory
parameter_list|(
name|ThreadGroup
name|gp
parameter_list|,
name|String
name|nm
parameter_list|)
block|{
name|group
operator|=
name|gp
expr_stmt|;
name|name
operator|=
name|nm
expr_stmt|;
comment|//force the loader to be the loader of CXF, not the application loader
name|loader
operator|=
name|AutomaticWorkQueueImpl
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|group
argument_list|,
name|r
argument_list|,
name|name
operator|+
literal|"-workqueue-"
operator|+
name|threadNumber
operator|.
name|getAndIncrement
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|t
operator|.
name|setContextClassLoader
argument_list|(
name|loader
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|isDaemon
argument_list|()
condition|)
block|{
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|.
name|getPriority
argument_list|()
operator|!=
name|Thread
operator|.
name|NORM_PRIORITY
condition|)
block|{
name|t
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|NORM_PRIORITY
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|name
operator|=
name|s
expr_stmt|;
block|}
block|}
annotation|@
name|Resource
argument_list|(
name|name
operator|=
literal|"org.apache.cxf.workqueue.WorkQueueManager"
argument_list|)
specifier|public
name|void
name|setManager
parameter_list|(
name|WorkQueueManager
name|mgr
parameter_list|)
block|{
name|manager
operator|=
operator|(
name|WorkQueueManagerImpl
operator|)
name|mgr
expr_stmt|;
block|}
specifier|public
name|WorkQueueManager
name|getManager
parameter_list|()
block|{
return|return
name|manager
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|name
operator|=
name|s
expr_stmt|;
name|ThreadFactory
name|factory
init|=
name|this
operator|.
name|getThreadFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|factory
operator|instanceof
name|AWQThreadFactory
condition|)
block|{
operator|(
operator|(
name|AWQThreadFactory
operator|)
name|factory
operator|)
operator|.
name|setName
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|register
parameter_list|()
block|{
if|if
condition|(
name|manager
operator|!=
literal|null
condition|)
block|{
name|manager
operator|.
name|addNamedWorkQueue
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|InstrumentationManager
name|imanager
init|=
name|manager
operator|.
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|InstrumentationManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|imanager
condition|)
block|{
try|try
block|{
name|imanager
operator|.
name|register
argument_list|(
operator|new
name|WorkQueueImplMBeanWrapper
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMException
name|jmex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|jmex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|jmex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" [queue size: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", max size: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|maxQueueSize
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", threads: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", active threads: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getActiveCount
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", low water mark: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getLowWaterMark
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", high water mark: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getHighWaterMark
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
specifier|final
name|Runnable
name|command
parameter_list|)
block|{
comment|//Grab the context classloader of this thread.   We'll make sure we use that
comment|//on the thread the runnable actually runs on.
specifier|final
name|ClassLoader
name|loader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Runnable
name|r
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ClassLoader
name|orig
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|orig
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|super
operator|.
name|execute
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
comment|// WorkQueue interface
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|work
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
try|try
block|{
name|execute
argument_list|(
name|work
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ree
parameter_list|)
block|{
try|try
block|{
name|getQueue
argument_list|()
operator|.
name|offer
argument_list|(
name|work
argument_list|,
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|schedule
parameter_list|(
specifier|final
name|Runnable
name|work
parameter_list|,
specifier|final
name|long
name|delay
parameter_list|)
block|{
comment|// temporary implementation, replace with shared long-lived scheduler
comment|// task
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// ignore
block|}
name|work
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// AutomaticWorkQueue interface
specifier|public
name|void
name|shutdown
parameter_list|(
name|boolean
name|processRemainingWorkItems
parameter_list|)
block|{
if|if
condition|(
operator|!
name|processRemainingWorkItems
condition|)
block|{
name|getQueue
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Gets the maximum size (capacity) of the backing queue.      * @return the maximum size (capacity) of the backing queue.      */
specifier|public
name|long
name|getMaxSize
parameter_list|()
block|{
return|return
name|maxQueueSize
return|;
block|}
comment|/**      * Gets the current size of the backing queue.      * @return the current size of the backing queue.      */
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
name|boolean
name|isFull
parameter_list|()
block|{
return|return
name|getQueue
argument_list|()
operator|.
name|remainingCapacity
argument_list|()
operator|==
literal|0
return|;
block|}
specifier|public
name|int
name|getHighWaterMark
parameter_list|()
block|{
name|int
name|hwm
init|=
name|getMaximumPoolSize
argument_list|()
decl_stmt|;
return|return
name|hwm
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|?
operator|-
literal|1
else|:
name|hwm
return|;
block|}
specifier|public
name|int
name|getLowWaterMark
parameter_list|()
block|{
name|int
name|lwm
init|=
name|getCorePoolSize
argument_list|()
decl_stmt|;
return|return
name|lwm
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|?
operator|-
literal|1
else|:
name|lwm
return|;
block|}
specifier|public
name|void
name|setHighWaterMark
parameter_list|(
name|int
name|hwm
parameter_list|)
block|{
name|setMaximumPoolSize
argument_list|(
name|hwm
operator|<
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|hwm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLowWaterMark
parameter_list|(
name|int
name|lwm
parameter_list|)
block|{
name|setCorePoolSize
argument_list|(
name|lwm
operator|<
literal|0
condition|?
literal|0
else|:
name|lwm
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

