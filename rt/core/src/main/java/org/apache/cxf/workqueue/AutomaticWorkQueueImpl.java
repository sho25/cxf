begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyChangeEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyChangeListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
operator|.
name|ClassLoaderHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|injection
operator|.
name|NoJSR250Annotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_class
annotation|@
name|NoJSR250Annotations
specifier|public
class|class
name|AutomaticWorkQueueImpl
implements|implements
name|AutomaticWorkQueue
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_NAME
init|=
literal|"name"
decl_stmt|;
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_QUEUE_SIZE
init|=
literal|256
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AutomaticWorkQueueImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|name
init|=
literal|"default"
decl_stmt|;
name|int
name|maxQueueSize
decl_stmt|;
name|int
name|initialThreads
decl_stmt|;
name|int
name|lowWaterMark
decl_stmt|;
name|int
name|highWaterMark
decl_stmt|;
name|long
name|dequeueTimeout
decl_stmt|;
name|ThreadPoolExecutor
name|executor
decl_stmt|;
name|AWQThreadFactory
name|threadFactory
decl_stmt|;
name|ReentrantLock
name|mainLock
decl_stmt|;
name|DelayQueue
argument_list|<
name|DelayedTaskWrapper
argument_list|>
name|delayQueue
decl_stmt|;
name|WatchDog
name|watchDog
decl_stmt|;
name|boolean
name|shared
decl_stmt|;
name|int
name|sharedCount
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PropertyChangeListener
argument_list|>
name|changeListenerList
decl_stmt|;
specifier|public
name|AutomaticWorkQueueImpl
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_MAX_QUEUE_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AutomaticWorkQueueImpl
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|DEFAULT_MAX_QUEUE_SIZE
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AutomaticWorkQueueImpl
parameter_list|(
name|int
name|max
parameter_list|)
block|{
name|this
argument_list|(
name|max
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AutomaticWorkQueueImpl
parameter_list|(
name|int
name|max
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|max
argument_list|,
literal|0
argument_list|,
literal|25
argument_list|,
literal|5
argument_list|,
literal|2
operator|*
literal|60
operator|*
literal|1000L
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AutomaticWorkQueueImpl
parameter_list|(
name|int
name|mqs
parameter_list|,
name|int
name|initialThreads
parameter_list|,
name|int
name|highWaterMark
parameter_list|,
name|int
name|lowWaterMark
parameter_list|,
name|long
name|dequeueTimeout
parameter_list|)
block|{
name|this
argument_list|(
name|mqs
argument_list|,
name|initialThreads
argument_list|,
name|highWaterMark
argument_list|,
name|lowWaterMark
argument_list|,
name|dequeueTimeout
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AutomaticWorkQueueImpl
parameter_list|(
name|int
name|mqs
parameter_list|,
name|int
name|initialThreads
parameter_list|,
name|int
name|highWaterMark
parameter_list|,
name|int
name|lowWaterMark
parameter_list|,
name|long
name|dequeueTimeout
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|maxQueueSize
operator|=
name|mqs
operator|==
operator|-
literal|1
condition|?
name|DEFAULT_MAX_QUEUE_SIZE
else|:
name|mqs
expr_stmt|;
name|this
operator|.
name|initialThreads
operator|=
name|initialThreads
expr_stmt|;
name|this
operator|.
name|highWaterMark
operator|=
operator|-
literal|1
operator|==
name|highWaterMark
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|highWaterMark
expr_stmt|;
name|this
operator|.
name|lowWaterMark
operator|=
operator|-
literal|1
operator|==
name|lowWaterMark
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|lowWaterMark
expr_stmt|;
name|this
operator|.
name|dequeueTimeout
operator|=
name|dequeueTimeout
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|changeListenerList
operator|=
operator|new
name|ArrayList
argument_list|<
name|PropertyChangeListener
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addChangeListener
parameter_list|(
name|PropertyChangeListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|changeListenerList
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeChangeListener
parameter_list|(
name|PropertyChangeListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|changeListenerList
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|notifyChangeListeners
parameter_list|(
name|PropertyChangeEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|PropertyChangeListener
name|listener
range|:
name|changeListenerList
control|)
block|{
name|listener
operator|.
name|propertyChange
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setShared
parameter_list|(
name|boolean
name|shared
parameter_list|)
block|{
name|this
operator|.
name|shared
operator|=
name|shared
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShared
parameter_list|()
block|{
return|return
name|shared
return|;
block|}
specifier|public
name|void
name|addSharedUser
parameter_list|()
block|{
name|sharedCount
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|removeSharedUser
parameter_list|()
block|{
name|sharedCount
operator|--
expr_stmt|;
block|}
specifier|public
name|int
name|getShareCount
parameter_list|()
block|{
return|return
name|sharedCount
return|;
block|}
specifier|protected
specifier|synchronized
name|ThreadPoolExecutor
name|getExecutor
parameter_list|()
block|{
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
name|threadFactory
operator|=
name|createThreadFactory
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|executor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|lowWaterMark
argument_list|,
name|highWaterMark
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
name|dequeueTimeout
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|maxQueueSize
argument_list|)
argument_list|,
name|threadFactory
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|terminated
parameter_list|()
block|{
name|ThreadFactory
name|f
init|=
name|executor
operator|.
name|getThreadFactory
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|instanceof
name|AWQThreadFactory
condition|)
block|{
operator|(
operator|(
name|AWQThreadFactory
operator|)
name|f
operator|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|watchDog
operator|!=
literal|null
condition|)
block|{
name|watchDog
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"Constructing automatic work queue with:\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"max queue size: "
operator|+
name|maxQueueSize
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"initialThreads: "
operator|+
name|initialThreads
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"lowWaterMark: "
operator|+
name|lowWaterMark
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"highWaterMark: "
operator|+
name|highWaterMark
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|initialThreads
operator|>
name|highWaterMark
condition|)
block|{
name|initialThreads
operator|=
name|highWaterMark
expr_stmt|;
block|}
comment|// as we cannot prestart more core than corePoolSize initial threads, we temporarily
comment|// change the corePoolSize to the number of initial threads
comment|// this is important as otherwise these threads will be created only when
comment|// the queue has filled up,
comment|// potentially causing problems with starting up under heavy load
if|if
condition|(
name|initialThreads
argument_list|<
name|Integer
operator|.
name|MAX_VALUE
operator|&&
name|initialThreads
argument_list|>
literal|0
condition|)
block|{
name|executor
operator|.
name|setCorePoolSize
argument_list|(
name|initialThreads
argument_list|)
expr_stmt|;
name|int
name|started
init|=
name|executor
operator|.
name|prestartAllCoreThreads
argument_list|()
decl_stmt|;
if|if
condition|(
name|started
operator|<
name|initialThreads
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"THREAD_START_FAILURE_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|started
block|,
name|initialThreads
block|}
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|setCorePoolSize
argument_list|(
name|lowWaterMark
argument_list|)
expr_stmt|;
block|}
name|ReentrantLock
name|l
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Field
name|f
init|=
name|ThreadPoolExecutor
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"mainLock"
argument_list|)
decl_stmt|;
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|l
operator|=
operator|(
name|ReentrantLock
operator|)
name|f
operator|.
name|get
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|l
operator|=
operator|new
name|ReentrantLock
argument_list|()
expr_stmt|;
block|}
name|mainLock
operator|=
name|l
expr_stmt|;
block|}
return|return
name|executor
return|;
block|}
specifier|private
specifier|static
name|AWQThreadFactory
name|createThreadFactory
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|ThreadGroup
name|group
decl_stmt|;
try|try
block|{
comment|//Try and find the highest level ThreadGroup that we're allowed to use.
comment|//That SHOULD allow the default classloader and thread locals and such
comment|//to be the least likely to cause issues down the road.
name|group
operator|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ThreadGroup
argument_list|>
argument_list|()
block|{
specifier|public
name|ThreadGroup
name|run
parameter_list|()
block|{
name|ThreadGroup
name|group
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getThreadGroup
argument_list|()
decl_stmt|;
name|ThreadGroup
name|parent
init|=
name|group
decl_stmt|;
try|try
block|{
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|group
operator|=
name|parent
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|//ignore - if we get here, the "group" is as high as
comment|//the security manager will allow us to go.   Use that one.
block|}
return|return
operator|new
name|ThreadGroup
argument_list|(
name|group
argument_list|,
name|name
operator|+
literal|"-workqueue"
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|group
operator|=
operator|new
name|ThreadGroup
argument_list|(
name|name
operator|+
literal|"-workqueue"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AWQThreadFactory
argument_list|(
name|group
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|static
class|class
name|DelayedTaskWrapper
implements|implements
name|Delayed
implements|,
name|Runnable
block|{
name|long
name|trigger
decl_stmt|;
name|Runnable
name|work
decl_stmt|;
name|DelayedTaskWrapper
parameter_list|(
name|Runnable
name|work
parameter_list|,
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|work
operator|=
name|work
expr_stmt|;
name|trigger
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|delay
expr_stmt|;
block|}
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
name|long
name|n
init|=
name|trigger
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
return|return
name|unit
operator|.
name|convert
argument_list|(
name|n
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|delayed
parameter_list|)
block|{
name|long
name|other
init|=
operator|(
operator|(
name|DelayedTaskWrapper
operator|)
name|delayed
operator|)
operator|.
name|trigger
decl_stmt|;
name|int
name|returnValue
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|trigger
operator|<
name|other
condition|)
block|{
name|returnValue
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|trigger
operator|>
name|other
condition|)
block|{
name|returnValue
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|returnValue
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|returnValue
return|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|work
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
class|class
name|WatchDog
extends|extends
name|Thread
block|{
name|DelayQueue
argument_list|<
name|DelayedTaskWrapper
argument_list|>
name|delayQueue
decl_stmt|;
name|AtomicBoolean
name|shutdown
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|WatchDog
parameter_list|(
name|DelayQueue
argument_list|<
name|DelayedTaskWrapper
argument_list|>
name|queue
parameter_list|)
block|{
name|delayQueue
operator|=
name|queue
expr_stmt|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|shutdown
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// to exit the waiting thread
name|interrupt
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|DelayedTaskWrapper
name|task
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|shutdown
operator|.
name|get
argument_list|()
condition|)
block|{
name|task
operator|=
name|delayQueue
operator|.
name|take
argument_list|()
expr_stmt|;
if|if
condition|(
name|task
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|execute
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Executing the task from DelayQueue with exception: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|finer
argument_list|(
literal|"The DelayQueue watchdog Task is stopping"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|static
class|class
name|AWQThreadFactory
implements|implements
name|ThreadFactory
block|{
specifier|final
name|AtomicInteger
name|threadNumber
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ThreadGroup
name|group
decl_stmt|;
name|String
name|name
decl_stmt|;
name|ClassLoader
name|loader
decl_stmt|;
name|AWQThreadFactory
parameter_list|(
name|ThreadGroup
name|gp
parameter_list|,
name|String
name|nm
parameter_list|)
block|{
name|group
operator|=
name|gp
expr_stmt|;
name|name
operator|=
name|nm
expr_stmt|;
comment|//force the loader to be the loader of CXF, not the application loader
name|loader
operator|=
name|AutomaticWorkQueueImpl
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
if|if
condition|(
name|group
operator|.
name|isDestroyed
argument_list|()
condition|)
block|{
name|group
operator|=
operator|new
name|ThreadGroup
argument_list|(
name|group
operator|.
name|getParent
argument_list|()
argument_list|,
name|name
operator|+
literal|"-workqueue"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|group
argument_list|,
name|r
argument_list|,
name|name
operator|+
literal|"-workqueue-"
operator|+
name|threadNumber
operator|.
name|getAndIncrement
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|run
parameter_list|()
block|{
name|t
operator|.
name|setContextClassLoader
argument_list|(
name|loader
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|getPriority
argument_list|()
operator|!=
name|Thread
operator|.
name|NORM_PRIORITY
condition|)
block|{
name|t
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|NORM_PRIORITY
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|name
operator|=
name|s
expr_stmt|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|isDestroyed
argument_list|()
condition|)
block|{
try|try
block|{
name|group
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|group
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|name
operator|=
name|s
expr_stmt|;
if|if
condition|(
name|threadFactory
operator|!=
literal|null
condition|)
block|{
name|threadFactory
operator|.
name|setName
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" [queue size: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", max size: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|maxQueueSize
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", threads: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", active threads: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getActiveCount
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", low water mark: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getLowWaterMark
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", high water mark: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getHighWaterMark
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
specifier|final
name|Runnable
name|command
parameter_list|)
block|{
comment|//Grab the context classloader of this thread.   We'll make sure we use that
comment|//on the thread the runnable actually runs on.
specifier|final
name|ClassLoader
name|loader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Runnable
name|r
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ClassLoaderHolder
name|orig
init|=
name|ClassLoaderUtils
operator|.
name|setThreadContextClassloader
argument_list|(
name|loader
argument_list|)
decl_stmt|;
try|try
block|{
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|orig
operator|!=
literal|null
condition|)
block|{
name|orig
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
comment|//The ThreadPoolExecutor in the JDK doesn't expand the number
comment|//of threads until the queue is full.   However, we would
comment|//prefer the number of threads to expand immediately and
comment|//only uses the queue if we've reached the maximum number
comment|//of threads.   Thus, we'll set the core size to the max,
comment|//add the runnable, and set back.  That will cause the
comment|//threads to be created as needed.
name|ThreadPoolExecutor
name|ex
init|=
name|getExecutor
argument_list|()
decl_stmt|;
name|ex
operator|.
name|execute
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ex
operator|.
name|getQueue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|this
operator|.
name|getPoolSize
argument_list|()
operator|<
name|highWaterMark
condition|)
block|{
name|mainLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|ps
init|=
name|this
operator|.
name|getPoolSize
argument_list|()
decl_stmt|;
name|int
name|sz
init|=
name|executor
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|sz2
init|=
name|this
operator|.
name|getActiveCount
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|sz
operator|+
name|sz2
operator|)
operator|>
name|ps
condition|)
block|{
name|Method
name|m
init|=
name|ThreadPoolExecutor
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"addIfUnderMaximumPoolSize"
argument_list|,
name|Runnable
operator|.
name|class
argument_list|)
decl_stmt|;
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|m
argument_list|)
operator|.
name|invoke
argument_list|(
name|executor
argument_list|,
operator|new
name|Object
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
comment|//ignore
block|}
finally|finally
block|{
name|mainLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// WorkQueue interface
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|work
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
try|try
block|{
name|execute
argument_list|(
name|work
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ree
parameter_list|)
block|{
try|try
block|{
name|getExecutor
argument_list|()
operator|.
name|getQueue
argument_list|()
operator|.
name|offer
argument_list|(
name|work
argument_list|,
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|schedule
parameter_list|(
specifier|final
name|Runnable
name|work
parameter_list|,
specifier|final
name|long
name|delay
parameter_list|)
block|{
if|if
condition|(
name|delayQueue
operator|==
literal|null
condition|)
block|{
name|delayQueue
operator|=
operator|new
name|DelayQueue
argument_list|<
name|DelayedTaskWrapper
argument_list|>
argument_list|()
expr_stmt|;
name|watchDog
operator|=
operator|new
name|WatchDog
argument_list|(
name|delayQueue
argument_list|)
expr_stmt|;
name|watchDog
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|watchDog
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|delayQueue
operator|.
name|put
argument_list|(
operator|new
name|DelayedTaskWrapper
argument_list|(
name|work
argument_list|,
name|delay
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// AutomaticWorkQueue interface
specifier|public
name|void
name|shutdown
parameter_list|(
name|boolean
name|processRemainingWorkItems
parameter_list|)
block|{
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|processRemainingWorkItems
condition|)
block|{
name|executor
operator|.
name|getQueue
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Gets the maximum size (capacity) of the backing queue.      * @return the maximum size (capacity) of the backing queue.      */
specifier|public
name|long
name|getMaxSize
parameter_list|()
block|{
return|return
name|maxQueueSize
return|;
block|}
comment|/**      * Gets the current size of the backing queue.      * @return the current size of the backing queue.      */
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|executor
operator|==
literal|null
condition|?
literal|0
else|:
name|executor
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|executor
operator|==
literal|null
condition|?
literal|true
else|:
name|executor
operator|.
name|getQueue
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
name|boolean
name|isFull
parameter_list|()
block|{
return|return
name|executor
operator|==
literal|null
condition|?
literal|false
else|:
name|executor
operator|.
name|getQueue
argument_list|()
operator|.
name|remainingCapacity
argument_list|()
operator|==
literal|0
return|;
block|}
specifier|public
name|int
name|getHighWaterMark
parameter_list|()
block|{
name|int
name|hwm
init|=
name|executor
operator|==
literal|null
condition|?
name|highWaterMark
else|:
name|executor
operator|.
name|getMaximumPoolSize
argument_list|()
decl_stmt|;
return|return
name|hwm
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|?
operator|-
literal|1
else|:
name|hwm
return|;
block|}
specifier|public
name|int
name|getLowWaterMark
parameter_list|()
block|{
name|int
name|lwm
init|=
name|executor
operator|==
literal|null
condition|?
name|lowWaterMark
else|:
name|executor
operator|.
name|getCorePoolSize
argument_list|()
decl_stmt|;
return|return
name|lwm
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|?
operator|-
literal|1
else|:
name|lwm
return|;
block|}
specifier|public
name|int
name|getInitialSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|initialThreads
return|;
block|}
specifier|public
name|void
name|setHighWaterMark
parameter_list|(
name|int
name|hwm
parameter_list|)
block|{
name|highWaterMark
operator|=
name|hwm
operator|<
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|hwm
expr_stmt|;
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|notifyChangeListeners
argument_list|(
operator|new
name|PropertyChangeEvent
argument_list|(
name|this
argument_list|,
literal|"highWaterMark"
argument_list|,
name|this
operator|.
name|executor
operator|.
name|getMaximumPoolSize
argument_list|()
argument_list|,
name|hwm
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|setMaximumPoolSize
argument_list|(
name|highWaterMark
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setLowWaterMark
parameter_list|(
name|int
name|lwm
parameter_list|)
block|{
name|lowWaterMark
operator|=
name|lwm
operator|<
literal|0
condition|?
literal|0
else|:
name|lwm
expr_stmt|;
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|notifyChangeListeners
argument_list|(
operator|new
name|PropertyChangeEvent
argument_list|(
name|this
argument_list|,
literal|"lowWaterMark"
argument_list|,
name|this
operator|.
name|executor
operator|.
name|getCorePoolSize
argument_list|()
argument_list|,
name|lwm
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|setCorePoolSize
argument_list|(
name|lowWaterMark
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setInitialSize
parameter_list|(
name|int
name|initialSize
parameter_list|)
block|{
name|notifyChangeListeners
argument_list|(
operator|new
name|PropertyChangeEvent
argument_list|(
name|this
argument_list|,
literal|"initialSize"
argument_list|,
name|this
operator|.
name|initialThreads
argument_list|,
name|initialSize
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|initialThreads
operator|=
name|initialSize
expr_stmt|;
block|}
specifier|public
name|void
name|setQueueSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|notifyChangeListeners
argument_list|(
operator|new
name|PropertyChangeEvent
argument_list|(
name|this
argument_list|,
literal|"queueSize"
argument_list|,
name|this
operator|.
name|maxQueueSize
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxQueueSize
operator|=
name|size
expr_stmt|;
block|}
specifier|public
name|void
name|setDequeueTimeout
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|notifyChangeListeners
argument_list|(
operator|new
name|PropertyChangeEvent
argument_list|(
name|this
argument_list|,
literal|"dequeueTimeout"
argument_list|,
name|this
operator|.
name|dequeueTimeout
argument_list|,
name|l
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|dequeueTimeout
operator|=
name|l
expr_stmt|;
block|}
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|executor
operator|.
name|isShutdown
argument_list|()
return|;
block|}
specifier|public
name|int
name|getLargestPoolSize
parameter_list|()
block|{
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|executor
operator|.
name|getLargestPoolSize
argument_list|()
return|;
block|}
specifier|public
name|int
name|getPoolSize
parameter_list|()
block|{
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|executor
operator|.
name|getPoolSize
argument_list|()
return|;
block|}
specifier|public
name|int
name|getActiveCount
parameter_list|()
block|{
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|executor
operator|.
name|getActiveCount
argument_list|()
return|;
block|}
specifier|public
name|void
name|update
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|)
block|{
name|String
name|s
init|=
name|config
operator|.
name|get
argument_list|(
literal|"highWaterMark"
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|highWaterMark
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
name|config
operator|.
name|get
argument_list|(
literal|"lowWaterMark"
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|lowWaterMark
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
name|config
operator|.
name|get
argument_list|(
literal|"initialSize"
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|initialThreads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
name|config
operator|.
name|get
argument_list|(
literal|"dequeueTimeout"
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|dequeueTimeout
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
name|config
operator|.
name|get
argument_list|(
literal|"queueSize"
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|maxQueueSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProperties
parameter_list|()
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|NumberFormat
name|nf
init|=
name|NumberFormat
operator|.
name|getIntegerInstance
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|nf
operator|.
name|format
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"highWaterMark"
argument_list|,
name|nf
operator|.
name|format
argument_list|(
name|getHighWaterMark
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"lowWaterMark"
argument_list|,
name|nf
operator|.
name|format
argument_list|(
name|getLowWaterMark
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"initialSize"
argument_list|,
name|nf
operator|.
name|format
argument_list|(
name|getLowWaterMark
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"dequeueTimeout"
argument_list|,
name|nf
operator|.
name|format
argument_list|(
name|getLowWaterMark
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"queueSize"
argument_list|,
name|nf
operator|.
name|format
argument_list|(
name|getLowWaterMark
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
block|}
end_class

end_unit

