begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|injection
operator|.
name|NoJSR250Annotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SortedArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|extension
operator|.
name|BusExtension
import|;
end_import

begin_class
annotation|@
name|NoJSR250Annotations
specifier|public
class|class
name|PhaseManagerImpl
implements|implements
name|PhaseManager
implements|,
name|BusExtension
block|{
specifier|private
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|inPhases
decl_stmt|;
specifier|private
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|outPhases
decl_stmt|;
specifier|public
name|PhaseManagerImpl
parameter_list|()
block|{
name|createInPhases
argument_list|()
expr_stmt|;
name|createOutPhases
argument_list|()
expr_stmt|;
block|}
specifier|public
name|PhaseManagerImpl
parameter_list|(
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|in
parameter_list|,
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|out
parameter_list|)
block|{
name|inPhases
operator|=
name|in
expr_stmt|;
name|outPhases
operator|=
name|out
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getRegistrationType
parameter_list|()
block|{
return|return
name|PhaseManager
operator|.
name|class
return|;
block|}
specifier|public
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|getInPhases
parameter_list|()
block|{
return|return
name|inPhases
return|;
block|}
specifier|public
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|getOutPhases
parameter_list|()
block|{
return|return
name|outPhases
return|;
block|}
specifier|final
name|void
name|createInPhases
parameter_list|()
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|inPhases
operator|=
operator|new
name|SortedArraySet
argument_list|<
name|Phase
argument_list|>
argument_list|()
expr_stmt|;
name|inPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|RECEIVE
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|inPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|PRE_STREAM
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|inPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|USER_STREAM
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|inPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|POST_STREAM
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|inPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|READ
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|inPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|PRE_PROTOCOL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|inPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|USER_PROTOCOL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|inPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|POST_PROTOCOL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|inPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|UNMARSHAL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|inPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|PRE_LOGICAL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|inPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|USER_LOGICAL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|inPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|POST_LOGICAL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|inPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|PRE_INVOKE
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|inPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|INVOKE
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|inPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|POST_INVOKE
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|void
name|createOutPhases
parameter_list|()
block|{
name|outPhases
operator|=
operator|new
name|SortedArraySet
argument_list|<
name|Phase
argument_list|>
argument_list|()
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|SETUP
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|PRE_LOGICAL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|USER_LOGICAL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|POST_LOGICAL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|PREPARE_SEND
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|PRE_STREAM
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|PRE_PROTOCOL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|WRITE
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|PRE_MARSHAL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|MARSHAL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|POST_MARSHAL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|USER_PROTOCOL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|POST_PROTOCOL
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|USER_STREAM
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|POST_STREAM
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|SEND
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|//Make sure ending interceptors are put in positions symmetric
comment|// to their starting interceptors
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|SEND_ENDING
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|POST_STREAM_ENDING
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|USER_STREAM_ENDING
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|POST_PROTOCOL_ENDING
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|USER_PROTOCOL_ENDING
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|MARSHAL_ENDING
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|WRITE_ENDING
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|PRE_PROTOCOL_ENDING
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|PRE_STREAM_ENDING
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|PREPARE_SEND_ENDING
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|POST_LOGICAL_ENDING
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|USER_LOGICAL_ENDING
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|PRE_LOGICAL_ENDING
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|outPhases
operator|.
name|add
argument_list|(
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|SETUP_ENDING
argument_list|,
operator|++
name|i
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

