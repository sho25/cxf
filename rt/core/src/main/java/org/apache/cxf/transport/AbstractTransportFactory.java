begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_comment
comment|/**  * Helper methods for {@link DestinationFactory}s and {@link ConduitInitiator}s.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTransportFactory
block|{
specifier|protected
name|Bus
name|bus
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|transportIds
decl_stmt|;
specifier|public
name|AbstractTransportFactory
parameter_list|()
block|{     }
specifier|public
name|AbstractTransportFactory
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|,
name|Bus
name|b
parameter_list|)
block|{
name|transportIds
operator|=
name|ids
expr_stmt|;
name|bus
operator|=
name|b
expr_stmt|;
name|register
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|unregister
argument_list|()
expr_stmt|;
name|bus
operator|=
name|b
expr_stmt|;
name|register
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|getTransportIds
parameter_list|()
block|{
return|return
name|transportIds
return|;
block|}
specifier|public
name|void
name|setTransportIds
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|transportIds
parameter_list|)
block|{
name|unregister
argument_list|()
expr_stmt|;
name|this
operator|.
name|transportIds
operator|=
name|transportIds
expr_stmt|;
name|register
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getUriPrefixes
parameter_list|()
block|{
return|return
name|CastUtils
operator|.
name|cast
argument_list|(
name|Collections
operator|.
name|EMPTY_SET
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|void
name|register
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|bus
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|this
operator|instanceof
name|DestinationFactory
condition|)
block|{
name|DestinationFactoryManager
name|dfm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|DestinationFactoryManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|dfm
operator|&&
name|getTransportIds
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|ns
range|:
name|getTransportIds
argument_list|()
control|)
block|{
name|dfm
operator|.
name|registerDestinationFactory
argument_list|(
name|ns
argument_list|,
operator|(
name|DestinationFactory
operator|)
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|this
operator|instanceof
name|ConduitInitiator
condition|)
block|{
name|ConduitInitiatorManager
name|cim
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ConduitInitiatorManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cim
operator|!=
literal|null
operator|&&
name|getTransportIds
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|ns
range|:
name|getTransportIds
argument_list|()
control|)
block|{
name|cim
operator|.
name|registerConduitInitiator
argument_list|(
name|ns
argument_list|,
operator|(
name|ConduitInitiator
operator|)
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|final
name|void
name|unregister
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|bus
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|this
operator|instanceof
name|DestinationFactory
condition|)
block|{
name|DestinationFactoryManager
name|dfm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|DestinationFactoryManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|dfm
operator|&&
name|getTransportIds
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|ns
range|:
name|getTransportIds
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|dfm
operator|.
name|getDestinationFactory
argument_list|(
name|ns
argument_list|)
operator|==
name|this
condition|)
block|{
name|dfm
operator|.
name|deregisterDestinationFactory
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|BusException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
block|}
if|if
condition|(
name|this
operator|instanceof
name|ConduitInitiator
condition|)
block|{
name|ConduitInitiatorManager
name|cim
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ConduitInitiatorManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cim
operator|!=
literal|null
operator|&&
name|getTransportIds
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|ns
range|:
name|getTransportIds
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|cim
operator|.
name|getConduitInitiator
argument_list|(
name|ns
argument_list|)
operator|==
name|this
condition|)
block|{
name|cim
operator|.
name|deregisterConduitInitiator
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|BusException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

