begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|extension
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|DefaultResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|SinglePropertyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ExtensionManagerTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|String
name|EXTENSIONMANAGER_TEST_RESOURECE_NAME
init|=
literal|"extensionManagerTest"
decl_stmt|;
specifier|private
name|ExtensionManagerImpl
name|manager
decl_stmt|;
specifier|private
name|MyService
name|myService
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
name|extensions
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|ResourceResolver
name|resolver
init|=
operator|new
name|SinglePropertyResolver
argument_list|(
name|EXTENSIONMANAGER_TEST_RESOURECE_NAME
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|ResourceManager
name|rm
init|=
operator|new
name|DefaultResourceManager
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|extensions
operator|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|extensions
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|=
operator|new
name|ExtensionManagerImpl
argument_list|(
literal|"test-extension.xml"
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|,
name|extensions
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|myService
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadAndRegister
parameter_list|()
block|{
name|Extension
name|e
init|=
operator|new
name|Extension
argument_list|()
decl_stmt|;
name|e
operator|.
name|setClassname
argument_list|(
literal|"java.lang.String"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setDeferred
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|manager
operator|.
name|loadAndRegister
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|String
name|interfaceName
init|=
literal|"java.lang.Runnable"
decl_stmt|;
name|e
operator|.
name|setDeferred
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|e
operator|.
name|setClassname
argument_list|(
literal|"java.lang.Thread"
argument_list|)
expr_stmt|;
name|e
operator|.
name|setInterfaceName
argument_list|(
name|interfaceName
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Object is registered."
argument_list|,
name|extensions
operator|.
name|get
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|loadAndRegister
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Object was not registered."
argument_list|,
name|extensions
operator|.
name|get
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|interfaceName
operator|=
literal|"java.lang.Integer"
expr_stmt|;
name|e
operator|.
name|setInterfaceName
argument_list|(
name|interfaceName
argument_list|)
expr_stmt|;
name|e
operator|.
name|setClassname
argument_list|(
literal|"no.such.Class"
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|extensions
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Object is not registered."
argument_list|,
name|obj
argument_list|)
expr_stmt|;
name|manager
operator|.
name|loadAndRegister
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Registered object was replaced."
argument_list|,
name|obj
argument_list|,
name|extensions
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActivateViaNS
parameter_list|()
block|{
name|verifyActivateViaNS
argument_list|(
name|MyResourceService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"http://cxf.apache.org/resource"
argument_list|)
expr_stmt|;
name|verifyActivateViaNS
argument_list|(
name|MySetterService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"http://cxf.apache.org/setter"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|verifyActivateViaNS
parameter_list|(
name|String
name|extensionClass
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
name|Extension
name|e
init|=
operator|new
name|Extension
argument_list|()
decl_stmt|;
name|e
operator|.
name|setClassname
argument_list|(
name|extensionClass
argument_list|)
expr_stmt|;
name|e
operator|.
name|getNamespaces
argument_list|()
operator|.
name|add
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|e
operator|.
name|setDeferred
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|manager
operator|.
name|processExtension
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|myService
argument_list|)
expr_stmt|;
name|manager
operator|.
name|activateViaNS
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|myService
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|myService
operator|.
name|getActivationNamespaces
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ns
argument_list|,
name|myService
operator|.
name|getActivationNamespaces
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// second activation should be a no-op
name|MyService
name|first
init|=
name|myService
decl_stmt|;
name|manager
operator|.
name|activateViaNS
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|first
argument_list|,
name|myService
argument_list|)
expr_stmt|;
name|myService
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|setMyService
parameter_list|(
name|MyService
name|m
parameter_list|)
block|{
name|myService
operator|=
name|m
expr_stmt|;
block|}
block|}
end_class

end_unit

