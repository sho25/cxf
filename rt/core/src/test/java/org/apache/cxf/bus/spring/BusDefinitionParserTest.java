begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|CXFBusImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|AbstractFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|LoggingInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_class
specifier|public
class|class
name|BusDefinitionParserTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testFeatures
parameter_list|()
block|{
name|String
name|cfgFile
init|=
literal|"org/apache/cxf/bus/spring/bus.xml"
decl_stmt|;
name|Bus
name|bus
init|=
operator|new
name|SpringBusFactory
argument_list|()
operator|.
name|createBus
argument_list|(
name|cfgFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|in
init|=
name|bus
operator|.
name|getInInterceptors
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Interceptor
name|i
range|:
name|in
control|)
block|{
if|if
condition|(
name|i
operator|instanceof
name|LoggingInInterceptor
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"could not find logging interceptor."
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AbstractFeature
argument_list|>
name|features
init|=
operator|(
operator|(
name|CXFBusImpl
operator|)
name|bus
operator|)
operator|.
name|getFeatures
argument_list|()
decl_stmt|;
name|TestFeature
name|tf
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AbstractFeature
name|f
range|:
name|features
control|)
block|{
if|if
condition|(
name|f
operator|instanceof
name|TestFeature
condition|)
block|{
name|tf
operator|=
operator|(
name|TestFeature
operator|)
name|f
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|tf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"test feature  has not been initialised"
argument_list|,
name|tf
operator|.
name|initialised
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"test feature has not been injected"
argument_list|,
name|tf
operator|.
name|testBean
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"bean injected into test feature has not been initialised"
argument_list|,
name|tf
operator|.
name|testBean
operator|.
name|initialised
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBusConfigure
parameter_list|()
block|{
name|ClassPathXmlApplicationContext
name|context
init|=
literal|null
decl_stmt|;
try|try
block|{
name|context
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/cxf/bus/spring/customerBus.xml"
argument_list|)
expr_stmt|;
name|Bus
name|cxf1
init|=
operator|(
name|Bus
operator|)
name|context
operator|.
name|getBean
argument_list|(
literal|"cxf1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cxf1
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cxf1
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Bus
name|cxf2
init|=
operator|(
name|Bus
operator|)
name|context
operator|.
name|getBean
argument_list|(
literal|"cxf2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cxf2
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cxf2
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|TestBean
block|{
name|boolean
name|initialised
decl_stmt|;
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialise
parameter_list|()
block|{
name|initialised
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|TestFeature
extends|extends
name|AbstractFeature
block|{
name|boolean
name|initialised
decl_stmt|;
name|TestBean
name|testBean
decl_stmt|;
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialise
parameter_list|()
block|{
name|initialised
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|setTestBean
parameter_list|(
name|TestBean
name|tb
parameter_list|)
block|{
name|testBean
operator|=
name|tb
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

