begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|managers
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|EndpointResolverRegistryImplTest
extends|extends
name|Assert
block|{
specifier|private
name|EndpointResolverRegistryImpl
name|registry
decl_stmt|;
specifier|private
name|EndpointResolver
name|resolver1
decl_stmt|;
specifier|private
name|EndpointResolver
name|resolver2
decl_stmt|;
specifier|private
name|EndpointReferenceType
name|logical
decl_stmt|;
specifier|private
name|EndpointReferenceType
name|physical
decl_stmt|;
specifier|private
name|EndpointReferenceType
name|fresh
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|QName
name|serviceName
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|registry
operator|=
operator|new
name|EndpointResolverRegistryImpl
argument_list|()
expr_stmt|;
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|resolver1
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|resolver2
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|logical
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointReferenceType
operator|.
name|class
argument_list|)
expr_stmt|;
name|physical
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointReferenceType
operator|.
name|class
argument_list|)
expr_stmt|;
name|fresh
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointReferenceType
operator|.
name|class
argument_list|)
expr_stmt|;
name|serviceName
operator|=
operator|new
name|QName
argument_list|(
literal|"namespace"
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|resolver1
operator|=
literal|null
expr_stmt|;
name|resolver2
operator|=
literal|null
expr_stmt|;
name|logical
operator|=
literal|null
expr_stmt|;
name|physical
operator|=
literal|null
expr_stmt|;
name|serviceName
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegister
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"unexpected resolver count"
argument_list|,
literal|0
argument_list|,
name|registry
operator|.
name|getResolvers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|resolver1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected resolver count"
argument_list|,
literal|1
argument_list|,
name|registry
operator|.
name|getResolvers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected resolver to be registered"
argument_list|,
name|registry
operator|.
name|getResolvers
argument_list|()
operator|.
name|contains
argument_list|(
name|resolver1
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|unregister
argument_list|(
name|resolver1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected resolver count"
argument_list|,
literal|0
argument_list|,
name|registry
operator|.
name|getResolvers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"expected resolver to be registered"
argument_list|,
name|registry
operator|.
name|getResolvers
argument_list|()
operator|.
name|contains
argument_list|(
name|resolver1
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|resolver2
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|resolver1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected resolver count"
argument_list|,
literal|2
argument_list|,
name|registry
operator|.
name|getResolvers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected resolver to be registered"
argument_list|,
name|registry
operator|.
name|getResolvers
argument_list|()
operator|.
name|contains
argument_list|(
name|resolver1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected resolver to be registered"
argument_list|,
name|registry
operator|.
name|getResolvers
argument_list|()
operator|.
name|contains
argument_list|(
name|resolver2
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|unregister
argument_list|(
name|resolver2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected resolver count"
argument_list|,
literal|1
argument_list|,
name|registry
operator|.
name|getResolvers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected resolver to be registered"
argument_list|,
name|registry
operator|.
name|getResolvers
argument_list|()
operator|.
name|contains
argument_list|(
name|resolver1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"expected resolver to be registered"
argument_list|,
name|registry
operator|.
name|getResolvers
argument_list|()
operator|.
name|contains
argument_list|(
name|resolver2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolve
parameter_list|()
block|{
name|registry
operator|.
name|register
argument_list|(
name|resolver1
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|resolver2
argument_list|)
expr_stmt|;
name|resolver1
operator|.
name|resolve
argument_list|(
name|logical
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|physical
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|EndpointReferenceType
name|resolved
init|=
name|registry
operator|.
name|resolve
argument_list|(
name|logical
argument_list|)
decl_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
literal|"unexpected physical EPR"
argument_list|,
name|physical
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|resolver1
operator|.
name|resolve
argument_list|(
name|logical
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|resolver2
operator|.
name|resolve
argument_list|(
name|logical
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|physical
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|resolved
operator|=
name|registry
operator|.
name|resolve
argument_list|(
name|logical
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
literal|"unexpected physical EPR"
argument_list|,
name|physical
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|resolver1
operator|.
name|resolve
argument_list|(
name|logical
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|resolver2
operator|.
name|resolve
argument_list|(
name|logical
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|resolved
operator|=
name|registry
operator|.
name|resolve
argument_list|(
name|logical
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"unexpected physical EPR"
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRenew
parameter_list|()
block|{
name|registry
operator|.
name|register
argument_list|(
name|resolver1
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|resolver2
argument_list|)
expr_stmt|;
name|resolver1
operator|.
name|renew
argument_list|(
name|logical
argument_list|,
name|physical
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|fresh
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|EndpointReferenceType
name|renewed
init|=
name|registry
operator|.
name|renew
argument_list|(
name|logical
argument_list|,
name|physical
argument_list|)
decl_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
literal|"unexpected physical EPR"
argument_list|,
name|fresh
argument_list|,
name|renewed
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|resolver1
operator|.
name|renew
argument_list|(
name|logical
argument_list|,
name|physical
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|resolver2
operator|.
name|renew
argument_list|(
name|logical
argument_list|,
name|physical
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|physical
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|renewed
operator|=
name|registry
operator|.
name|renew
argument_list|(
name|logical
argument_list|,
name|physical
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
literal|"unexpected physical EPR"
argument_list|,
name|physical
argument_list|,
name|renewed
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|resolver1
operator|.
name|renew
argument_list|(
name|logical
argument_list|,
name|physical
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|resolver2
operator|.
name|renew
argument_list|(
name|logical
argument_list|,
name|physical
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|renewed
operator|=
name|registry
operator|.
name|renew
argument_list|(
name|logical
argument_list|,
name|physical
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"unexpected physical EPR"
argument_list|,
name|renewed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMintFromServiceName
parameter_list|()
block|{
name|registry
operator|.
name|register
argument_list|(
name|resolver1
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|resolver2
argument_list|)
expr_stmt|;
name|resolver1
operator|.
name|mint
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|logical
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|EndpointReferenceType
name|minted
init|=
name|registry
operator|.
name|mint
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
literal|"unexpected minted EPR"
argument_list|,
name|logical
argument_list|,
name|minted
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|resolver1
operator|.
name|mint
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|resolver2
operator|.
name|mint
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|logical
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|minted
operator|=
name|registry
operator|.
name|mint
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
literal|"unexpected minted EPR"
argument_list|,
name|logical
argument_list|,
name|minted
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|resolver1
operator|.
name|mint
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|resolver2
operator|.
name|mint
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|minted
operator|=
name|registry
operator|.
name|mint
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"unexpected minted EPR"
argument_list|,
name|minted
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMintFromPhysical
parameter_list|()
block|{
name|registry
operator|.
name|register
argument_list|(
name|resolver1
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|resolver2
argument_list|)
expr_stmt|;
name|resolver1
operator|.
name|mint
argument_list|(
name|physical
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|logical
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|EndpointReferenceType
name|minted
init|=
name|registry
operator|.
name|mint
argument_list|(
name|physical
argument_list|)
decl_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
literal|"unexpected minted EPR"
argument_list|,
name|logical
argument_list|,
name|minted
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|resolver1
operator|.
name|mint
argument_list|(
name|physical
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|resolver2
operator|.
name|mint
argument_list|(
name|physical
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|logical
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|minted
operator|=
name|registry
operator|.
name|mint
argument_list|(
name|physical
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
literal|"unexpected minted EPR"
argument_list|,
name|logical
argument_list|,
name|minted
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|resolver1
operator|.
name|mint
argument_list|(
name|physical
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|resolver2
operator|.
name|mint
argument_list|(
name|physical
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|minted
operator|=
name|registry
operator|.
name|mint
argument_list|(
name|physical
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"unexpected minted EPR"
argument_list|,
name|minted
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

