begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|MethodDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SimpleAuthorizingInterceptorTest
extends|extends
name|Assert
block|{
specifier|private
name|Method
name|method
decl_stmt|;
specifier|private
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|method
operator|=
name|TestService
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"echo"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
operator|new
name|TestSecurityContext
argument_list|()
argument_list|)
expr_stmt|;
name|Exchange
name|ex
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|message
operator|.
name|setExchange
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|Service
name|service
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|Service
operator|.
name|class
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|MethodDispatcher
name|md
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MethodDispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
name|service
operator|.
name|get
argument_list|(
name|MethodDispatcher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|boi
argument_list|)
expr_stmt|;
name|md
operator|.
name|getMethod
argument_list|(
name|boi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|service
argument_list|,
name|md
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPermitWithNoRoles
parameter_list|()
block|{
operator|new
name|SimpleAuthorizingInterceptor
argument_list|()
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPermitWithMethodRoles
parameter_list|()
block|{
name|SimpleAuthorizingInterceptor
name|in
init|=
operator|new
name|SimpleAuthorizingInterceptor
argument_list|()
decl_stmt|;
name|in
operator|.
name|setMethodRolesMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"echo"
argument_list|,
literal|"role1 testRole"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPermitAll
parameter_list|()
block|{
name|SimpleAuthorizingInterceptor
name|in
init|=
operator|new
name|SimpleAuthorizingInterceptor
argument_list|()
decl_stmt|;
name|in
operator|.
name|setMethodRolesMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"echo"
argument_list|,
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPermitWithClassRoles
parameter_list|()
block|{
name|SimpleAuthorizingInterceptor
name|in
init|=
operator|new
name|SimpleAuthorizingInterceptor
argument_list|()
decl_stmt|;
name|in
operator|.
name|setGlobalRoles
argument_list|(
literal|"role1 testRole"
argument_list|)
expr_stmt|;
name|in
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDenyWithMethodRoles
parameter_list|()
block|{
name|SimpleAuthorizingInterceptor
name|in
init|=
operator|new
name|SimpleAuthorizingInterceptor
argument_list|()
decl_stmt|;
name|in
operator|.
name|setMethodRolesMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"echo"
argument_list|,
literal|"role1 role2"
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDenyWithClassRoles
parameter_list|()
block|{
name|SimpleAuthorizingInterceptor
name|in
init|=
operator|new
name|SimpleAuthorizingInterceptor
argument_list|()
decl_stmt|;
name|in
operator|.
name|setGlobalRoles
argument_list|(
literal|"role1 role2"
argument_list|)
expr_stmt|;
name|in
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPermitWithDenyRoles
parameter_list|()
block|{
name|SimpleAuthorizingInterceptor
name|in
init|=
operator|new
name|SimpleAuthorizingInterceptor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDenyRoles
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"frogs"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|in
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDenyWithDenyRoles
parameter_list|()
block|{
name|SimpleAuthorizingInterceptor
name|in
init|=
operator|new
name|SimpleAuthorizingInterceptor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDenyRoles
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"testRole"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|in
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDenyAll
parameter_list|()
block|{
name|SimpleAuthorizingInterceptor
name|in
init|=
operator|new
name|SimpleAuthorizingInterceptor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDenyRoles
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|in
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TestService
block|{
specifier|public
name|void
name|echo
parameter_list|()
block|{                      }
block|}
specifier|private
specifier|static
class|class
name|TestSecurityContext
implements|implements
name|SecurityContext
block|{
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
return|return
literal|"testRole"
operator|.
name|equals
argument_list|(
name|role
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

