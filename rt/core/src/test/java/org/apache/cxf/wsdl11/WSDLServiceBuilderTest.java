begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|UnknownExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|factory
operator|.
name|WSDLFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|xml
operator|.
name|WSDLReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|BindingFactoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|catalog
operator|.
name|CatalogWSDLLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingFaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|SchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|DestinationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|DestinationFactoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|WSDLServiceBuilderTest
extends|extends
name|Assert
block|{
comment|// TODO: reuse the wsdl in testutils and add the parameter order into one of the wsdl
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|WSDLServiceBuilderTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WSDL_PATH
init|=
literal|"hello_world.wsdl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BARE_WSDL_PATH
init|=
literal|"hello_world_bare.wsdl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|IMPORT_WSDL_PATH
init|=
literal|"hello_world_schema_import.wsdl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MULTIPORT_WSDL_PATH
init|=
literal|"hello_world_multiporttype.wsdl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NO_BODY_PARTS_WSDL_PATH
init|=
literal|"no_body_parts.wsdl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXTENSION_NAMESPACE
init|=
literal|"http://cxf.apache.org/extension/ns"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|EXTENSION_ATTR_BOOLEAN
init|=
operator|new
name|QName
argument_list|(
name|EXTENSION_NAMESPACE
argument_list|,
literal|"booleanAttr"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|EXTENSION_ATTR_STRING
init|=
operator|new
name|QName
argument_list|(
name|EXTENSION_NAMESPACE
argument_list|,
literal|"stringAttr"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|EXTENSION_ELEM
init|=
operator|new
name|QName
argument_list|(
name|EXTENSION_NAMESPACE
argument_list|,
literal|"stringElem"
argument_list|)
decl_stmt|;
specifier|private
name|Definition
name|def
decl_stmt|;
specifier|private
name|Service
name|service
decl_stmt|;
specifier|private
name|ServiceInfo
name|serviceInfo
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|serviceInfos
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|BindingFactoryManager
name|bindingFactoryManager
decl_stmt|;
specifier|private
name|DestinationFactoryManager
name|destinationFactoryManager
decl_stmt|;
specifier|public
name|void
name|setUpBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpWSDL
argument_list|(
name|WSDL_PATH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpWSDL
parameter_list|(
name|String
name|wsdl
parameter_list|,
name|int
name|serviceSeq
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|wsdl
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"could not find wsdl "
operator|+
name|wsdl
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|String
name|wsdlUrl
init|=
name|url
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"the path of wsdl file is "
operator|+
name|wsdlUrl
argument_list|)
expr_stmt|;
name|WSDLFactory
name|wsdlFactory
init|=
name|WSDLFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|WSDLReader
name|wsdlReader
init|=
name|wsdlFactory
operator|.
name|newWSDLReader
argument_list|()
decl_stmt|;
name|wsdlReader
operator|.
name|setFeature
argument_list|(
literal|"javax.wsdl.verbose"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|def
operator|=
name|wsdlReader
operator|.
name|readWSDL
argument_list|(
operator|new
name|CatalogWSDLLocator
argument_list|(
name|wsdlUrl
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|seq
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Service
name|serv
range|:
name|CastUtils
operator|.
name|cast
argument_list|(
name|def
operator|.
name|getServices
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|Service
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|serv
operator|!=
literal|null
condition|)
block|{
name|service
operator|=
name|serv
expr_stmt|;
if|if
condition|(
name|seq
operator|==
name|serviceSeq
condition|)
block|{
break|break;
block|}
else|else
block|{
name|seq
operator|++
expr_stmt|;
block|}
block|}
block|}
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|bus
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
expr_stmt|;
name|bindingFactoryManager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingFactoryManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|destinationFactoryManager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationFactoryManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|DestinationFactory
name|destinationFactory
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|WSDLServiceBuilder
name|wsdlServiceBuilder
init|=
operator|new
name|WSDLServiceBuilder
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|BindingFactoryManager
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bindingFactoryManager
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|DestinationFactoryManager
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destinationFactoryManager
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destinationFactoryManager
operator|.
name|getDestinationFactory
argument_list|(
literal|"http://schemas.xmlsoap.org/wsdl/soap/"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destinationFactory
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|serviceInfos
operator|=
name|wsdlServiceBuilder
operator|.
name|buildServices
argument_list|(
name|def
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|serviceInfo
operator|=
name|serviceInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiPorttype
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpWSDL
argument_list|(
name|MULTIPORT_WSDL_PATH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|serviceInfos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServiceInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpBasic
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SOAPService"
argument_list|,
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
name|serviceInfo
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|serviceInfo
operator|.
name|getProperty
argument_list|(
name|WSDLServiceBuilder
operator|.
name|WSDL_DEFINITION
argument_list|)
operator|==
name|def
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|serviceInfo
operator|.
name|getProperty
argument_list|(
name|WSDLServiceBuilder
operator|.
name|WSDL_SERVICE
argument_list|)
operator|==
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of endpoints"
argument_list|,
literal|1
argument_list|,
name|serviceInfo
operator|.
name|getEndpoints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|serviceInfo
operator|.
name|getEndpoint
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SoapPort"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ei
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://schemas.xmlsoap.org/wsdl/soap/"
argument_list|,
name|ei
operator|.
name|getTransportId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ei
operator|.
name|getBinding
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterfaceInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpBasic
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Greeter"
argument_list|,
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOperationInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpBasic
argument_list|()
expr_stmt|;
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"sayHi"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OperationInfo
name|sayHi
init|=
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"sayHi"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sayHi
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sayHi
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sayHi
operator|.
name|isOneWay
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sayHi
operator|.
name|hasInput
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sayHi
operator|.
name|hasOutput
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|sayHi
operator|.
name|getParameterOrdering
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
operator|new
name|QName
argument_list|(
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"greetMe"
argument_list|)
expr_stmt|;
name|OperationInfo
name|greetMe
init|=
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperation
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|greetMe
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|greetMe
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|greetMe
operator|.
name|isOneWay
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|greetMe
operator|.
name|hasInput
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|greetMe
operator|.
name|hasOutput
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|inParts
init|=
name|greetMe
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|inParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MessagePartInfo
name|part
init|=
name|inParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|part
operator|.
name|getXmlSchema
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|part
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|outParts
init|=
name|greetMe
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|=
name|outParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|part
operator|.
name|getXmlSchema
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|part
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"greatMe should be wrapped"
argument_list|,
name|greetMe
operator|.
name|isUnwrappedCapable
argument_list|()
argument_list|)
expr_stmt|;
name|OperationInfo
name|greetMeUnwrapped
init|=
name|greetMe
operator|.
name|getUnwrappedOperation
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|greetMeUnwrapped
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|greetMeUnwrapped
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrapped part not set"
argument_list|,
literal|1
argument_list|,
name|greetMeUnwrapped
operator|.
name|getInput
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrapped part not set"
argument_list|,
literal|1
argument_list|,
name|greetMeUnwrapped
operator|.
name|getOutput
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrapper part name wrong"
argument_list|,
literal|"requestType"
argument_list|,
name|greetMeUnwrapped
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrapper part type name wrong"
argument_list|,
literal|"MyStringType"
argument_list|,
name|greetMeUnwrapped
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
literal|0
argument_list|)
operator|.
name|getTypeQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrapper part name wrong"
argument_list|,
literal|"responseType"
argument_list|,
name|greetMeUnwrapped
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrapper part type name wrong"
argument_list|,
literal|"string"
argument_list|,
name|greetMeUnwrapped
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
literal|0
argument_list|)
operator|.
name|getTypeQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
operator|new
name|QName
argument_list|(
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"greetMeOneWay"
argument_list|)
expr_stmt|;
name|OperationInfo
name|greetMeOneWay
init|=
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperation
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|greetMeOneWay
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|greetMeOneWay
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|greetMeOneWay
operator|.
name|isOneWay
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|greetMeOneWay
operator|.
name|hasInput
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|greetMeOneWay
operator|.
name|hasOutput
argument_list|()
argument_list|)
expr_stmt|;
name|OperationInfo
name|greetMeOneWayUnwrapped
init|=
name|greetMeOneWay
operator|.
name|getUnwrappedOperation
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|greetMeOneWayUnwrapped
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|greetMeOneWayUnwrapped
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|greetMeOneWayUnwrapped
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrapped part not set"
argument_list|,
literal|1
argument_list|,
name|greetMeOneWayUnwrapped
operator|.
name|getInput
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http/types"
argument_list|,
literal|"requestType"
argument_list|)
argument_list|,
name|greetMeOneWayUnwrapped
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
literal|0
argument_list|)
operator|.
name|getConcreteName
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
operator|new
name|QName
argument_list|(
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"pingMe"
argument_list|)
expr_stmt|;
name|OperationInfo
name|pingMe
init|=
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperation
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|pingMe
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pingMe
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pingMe
operator|.
name|isOneWay
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pingMe
operator|.
name|hasInput
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pingMe
operator|.
name|hasOutput
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
literal|"what ever"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindingInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpBasic
argument_list|()
expr_stmt|;
name|BindingInfo
name|bindingInfo
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serviceInfo
operator|.
name|getBindings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|bindingInfo
operator|=
name|serviceInfo
operator|.
name|getBindings
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|bindingInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|"Greeter"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|"Greeter_SOAPBinding"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"http://apache.org/hello_world_soap_http"
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindingOperationInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpBasic
argument_list|()
expr_stmt|;
name|BindingInfo
name|bindingInfo
init|=
literal|null
decl_stmt|;
name|bindingInfo
operator|=
name|serviceInfo
operator|.
name|getBindings
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|BindingOperationInfo
argument_list|>
name|bindingOperationInfos
init|=
name|bindingInfo
operator|.
name|getOperations
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|bindingOperationInfos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOperationInfos
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"the binding operation is "
operator|+
name|bindingOperationInfos
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"sayHi"
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|sayHi
init|=
name|bindingInfo
operator|.
name|getOperation
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sayHi
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sayHi
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|name
operator|=
operator|new
name|QName
argument_list|(
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"greetMe"
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|greetMe
init|=
name|bindingInfo
operator|.
name|getOperation
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|greetMe
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|greetMe
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|name
operator|=
operator|new
name|QName
argument_list|(
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"greetMeOneWay"
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|greetMeOneWay
init|=
name|bindingInfo
operator|.
name|getOperation
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|greetMeOneWay
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|greetMeOneWay
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|name
operator|=
operator|new
name|QName
argument_list|(
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"pingMe"
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|pingMe
init|=
name|bindingInfo
operator|.
name|getOperation
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|pingMe
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pingMe
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindingMessageInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpBasic
argument_list|()
expr_stmt|;
name|BindingInfo
name|bindingInfo
init|=
literal|null
decl_stmt|;
name|bindingInfo
operator|=
name|serviceInfo
operator|.
name|getBindings
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"sayHi"
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|sayHi
init|=
name|bindingInfo
operator|.
name|getOperation
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|BindingMessageInfo
name|input
init|=
name|sayHi
operator|.
name|getInput
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|input
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|"sayHiRequest"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|input
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"http://apache.org/hello_world_soap_http"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|input
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|input
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|"in"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|input
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"http://apache.org/hello_world_soap_http"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|input
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isElement
argument_list|()
argument_list|)
expr_stmt|;
name|QName
name|elementName
init|=
name|input
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getElementQName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|elementName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|"sayHi"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|elementName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"http://apache.org/hello_world_soap_http/types"
argument_list|)
expr_stmt|;
name|BindingMessageInfo
name|output
init|=
name|sayHi
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|output
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|"sayHiResponse"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|output
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"http://apache.org/hello_world_soap_http"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|output
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|output
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|"out"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|output
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"http://apache.org/hello_world_soap_http"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|output
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isElement
argument_list|()
argument_list|)
expr_stmt|;
name|elementName
operator|=
name|output
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getElementQName
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|elementName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|"sayHiResponse"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|elementName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"http://apache.org/hello_world_soap_http/types"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sayHi
operator|.
name|getFaults
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|name
operator|=
operator|new
name|QName
argument_list|(
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"pingMe"
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|pingMe
init|=
name|bindingInfo
operator|.
name|getOperation
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|pingMe
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pingMe
operator|.
name|getFaults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BindingFaultInfo
name|fault
init|=
name|pingMe
operator|.
name|getFaults
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|fault
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fault
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|"pingMeFault"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fault
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"http://apache.org/hello_world_soap_http"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fault
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fault
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|"faultDetail"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fault
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"http://apache.org/hello_world_soap_http"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fault
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isElement
argument_list|()
argument_list|)
expr_stmt|;
name|elementName
operator|=
name|fault
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getElementQName
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|elementName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|"faultDetail"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|elementName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"http://apache.org/hello_world_soap_http/types"
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpBasic
argument_list|()
expr_stmt|;
name|SchemaCollection
name|schemas
init|=
name|serviceInfo
operator|.
name|getXmlSchemaCollection
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schemas
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serviceInfo
operator|.
name|getSchemas
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SchemaInfo
name|schemaInfo
init|=
name|serviceInfo
operator|.
name|getSchemas
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|schemaInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|schemaInfo
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"http://apache.org/hello_world_soap_http/types"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|schemas
operator|.
name|read
argument_list|(
name|schemaInfo
operator|.
name|getElement
argument_list|()
argument_list|)
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
literal|"http://apache.org/hello_world_soap_http/types"
argument_list|)
expr_stmt|;
comment|// add below code to test the creation of javax.xml.validation.Schema
comment|// with schema in serviceInfo
name|Schema
name|schema
init|=
name|EndpointReferenceUtils
operator|.
name|getSchema
argument_list|(
name|serviceInfo
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoBodyParts
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpWSDL
argument_list|(
name|NO_BODY_PARTS_WSDL_PATH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QName
name|messageName
init|=
operator|new
name|QName
argument_list|(
literal|"urn:org:apache:cxf:no_body_parts/wsdl"
argument_list|,
literal|"operation1Request"
argument_list|)
decl_stmt|;
name|MessageInfo
name|mi
init|=
name|serviceInfo
operator|.
name|getMessage
argument_list|(
name|messageName
argument_list|)
decl_stmt|;
name|QName
name|partName
init|=
operator|new
name|QName
argument_list|(
literal|"urn:org:apache:cxf:no_body_parts/wsdl"
argument_list|,
literal|"mimeAttachment"
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|pi
init|=
name|mi
operator|.
name|getMessagePart
argument_list|(
name|partName
argument_list|)
decl_stmt|;
name|QName
name|typeName
init|=
operator|new
name|QName
argument_list|(
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|,
literal|"base64Binary"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|typeName
argument_list|,
name|pi
operator|.
name|getTypeQName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|pi
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBare
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpWSDL
argument_list|(
name|BARE_WSDL_PATH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|BindingInfo
name|bindingInfo
init|=
literal|null
decl_stmt|;
name|bindingInfo
operator|=
name|serviceInfo
operator|.
name|getBindings
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|BindingOperationInfo
argument_list|>
name|bindingOperationInfos
init|=
name|bindingInfo
operator|.
name|getOperations
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|bindingOperationInfos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOperationInfos
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"the binding operation is "
operator|+
name|bindingOperationInfos
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"greetMe"
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|greetMe
init|=
name|bindingInfo
operator|.
name|getOperation
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|greetMe
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"greetMe OperationInfo name error"
argument_list|,
name|greetMe
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"greetMe should be a Unwrapped operation "
argument_list|,
name|greetMe
operator|.
name|isUnwrappedCapable
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|serviceInfo
operator|.
name|getXmlSchemaCollection
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImport
parameter_list|()
throws|throws
name|Exception
block|{
comment|// rewrite the schema1.xsd to import schema2.xsd with absolute path.
name|DocumentBuilder
name|db
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|db
operator|.
name|parse
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"./s1/s2/schema2.xsd"
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|schemaImport
init|=
literal|null
decl_stmt|;
name|Node
name|node
init|=
name|doc
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
block|{
name|schemaImport
operator|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|schemaImport
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Can't find import element"
argument_list|)
expr_stmt|;
block|}
name|String
name|filePath
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"./s1/s2/s4/schema4.xsd"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|importPath
init|=
name|schemaImport
operator|.
name|getAttributeNode
argument_list|(
literal|"schemaLocation"
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|new
name|URI
argument_list|(
name|URLEncoder
operator|.
name|encode
argument_list|(
name|importPath
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|schemaImport
operator|.
name|getAttributeNode
argument_list|(
literal|"schemaLocation"
argument_list|)
operator|.
name|setNodeValue
argument_list|(
literal|"file:"
operator|+
name|filePath
argument_list|)
expr_stmt|;
name|String
name|fileStr
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"./s1/s2/schema2.xsd"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|fileStr
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|fileStr
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|fileStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|FileOutputStream
name|fout
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|XMLUtils
operator|.
name|writeTo
argument_list|(
name|doc
argument_list|,
name|fout
argument_list|)
expr_stmt|;
name|fout
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|setUpWSDL
argument_list|(
name|IMPORT_WSDL_PATH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|serviceInfo
operator|.
name|getSchemas
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|ele
init|=
name|serviceInfo
operator|.
name|getSchemas
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ele
argument_list|)
expr_stmt|;
name|Schema
name|schema
init|=
name|EndpointReferenceUtils
operator|.
name|getSchema
argument_list|(
name|serviceInfo
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDiffPortTypeNsImport
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpWSDL
argument_list|(
literal|"/DiffPortTypeNs.wsdl"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doDiffPortTypeNsImport
argument_list|()
expr_stmt|;
name|setUpWSDL
argument_list|(
literal|"/DiffPortTypeNs.wsdl"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doDiffPortTypeNsImport
argument_list|()
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|doDiffPortTypeNsImport
parameter_list|()
block|{
if|if
condition|(
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Rpc"
argument_list|)
condition|)
block|{
name|String
name|ns
init|=
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|OperationInfo
name|oi
init|=
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"NewOperationRpc"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|ns
operator|=
name|oi
operator|.
name|getInput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
name|MessagePartInfo
name|mpi
init|=
name|oi
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePart
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"NewOperationRequestRpc"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mpi
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|ns
init|=
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|OperationInfo
name|oi
init|=
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"NewOperation"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|ns
operator|=
name|oi
operator|.
name|getInput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
name|MessagePartInfo
name|mpi
init|=
name|oi
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePart
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"NewOperationRequest"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|mpi
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParameterOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ns
init|=
literal|"http://apache.org/hello_world_xml_http/bare"
decl_stmt|;
name|setUpWSDL
argument_list|(
literal|"hello_world_xml_bare.wsdl"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|OperationInfo
name|operation
init|=
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"testTriPart"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|parts
init|=
name|operation
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in3"
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in1"
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in2"
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|order
init|=
name|operation
operator|.
name|getParameterOrdering
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|order
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in1"
argument_list|,
name|order
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in3"
argument_list|,
name|order
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in2"
argument_list|,
name|order
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|parts
operator|=
name|operation
operator|.
name|getInput
argument_list|()
operator|.
name|getOrderedParts
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in1"
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in3"
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in2"
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|operation
operator|=
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"testTriPartNoOrder"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|parts
operator|=
name|operation
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in3"
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in1"
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"in2"
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParameterOrder2
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpWSDL
argument_list|(
literal|"header2.wsdl"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|String
name|ns
init|=
literal|"http://apache.org/header2"
decl_stmt|;
name|OperationInfo
name|operation
init|=
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"headerMethod"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|parts
init|=
name|operation
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"header_info"
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the_request"
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtensions
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpWSDL
argument_list|(
literal|"hello_world_ext.wsdl"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|String
name|ns
init|=
literal|"http://apache.org/hello_world_soap_http"
decl_stmt|;
name|QName
name|pingMeOpName
init|=
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"pingMe"
argument_list|)
decl_stmt|;
name|QName
name|greetMeOpName
init|=
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"greetMe"
argument_list|)
decl_stmt|;
name|QName
name|faultName
init|=
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"pingMeFault"
argument_list|)
decl_stmt|;
comment|// portType extensions
name|InterfaceInfo
name|ii
init|=
name|serviceInfo
operator|.
name|getInterface
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ii
operator|.
name|getExtensionAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ii
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ii
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ii
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXTENSION_ELEM
argument_list|,
name|ii
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|getElementType
argument_list|()
argument_list|)
expr_stmt|;
comment|// portType/operation extensions
name|OperationInfo
name|oi
init|=
name|ii
operator|.
name|getOperation
argument_list|(
name|pingMeOpName
argument_list|)
decl_stmt|;
name|assertPortTypeOperationExtensions
argument_list|(
name|oi
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPortTypeOperationExtensions
argument_list|(
name|ii
operator|.
name|getOperation
argument_list|(
name|greetMeOpName
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// portType/operation/[input|output|fault] extensions
name|assertPortTypeOperationMessageExtensions
argument_list|(
name|oi
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|faultName
argument_list|)
expr_stmt|;
name|assertPortTypeOperationMessageExtensions
argument_list|(
name|ii
operator|.
name|getOperation
argument_list|(
name|greetMeOpName
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// service extensions
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serviceInfo
operator|.
name|getExtensionAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|serviceInfo
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serviceInfo
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXTENSION_ELEM
argument_list|,
name|serviceInfo
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|getElementType
argument_list|()
argument_list|)
expr_stmt|;
comment|// service/port extensions
name|EndpointInfo
name|ei
init|=
name|serviceInfo
operator|.
name|getEndpoints
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ei
operator|.
name|getExtensionAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ei
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ei
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXTENSION_ELEM
argument_list|,
name|ei
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|getElementType
argument_list|()
argument_list|)
expr_stmt|;
comment|// binding extensions
name|BindingInfo
name|bi
init|=
name|ei
operator|.
name|getBinding
argument_list|()
decl_stmt|;
comment|// REVISIT: bug in wsdl4j?
comment|// getExtensionAttributes on binding element returns an empty map
comment|// assertEquals(1, bi.getExtensionAttributes().size());
comment|// assertNotNull(bi.getExtensionAttribute(EXTENSION_ATTR_STRING));
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXTENSION_ELEM
argument_list|,
name|bi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|getElementType
argument_list|()
argument_list|)
expr_stmt|;
comment|// binding/operation extensions
name|BindingOperationInfo
name|boi
init|=
name|bi
operator|.
name|getOperation
argument_list|(
name|pingMeOpName
argument_list|)
decl_stmt|;
name|assertBindingOperationExtensions
argument_list|(
name|boi
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertBindingOperationExtensions
argument_list|(
name|bi
operator|.
name|getOperation
argument_list|(
name|greetMeOpName
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// binding/operation/[input|output|fault] extensions
name|assertBindingOperationMessageExtensions
argument_list|(
name|boi
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|faultName
argument_list|)
expr_stmt|;
name|assertBindingOperationMessageExtensions
argument_list|(
name|bi
operator|.
name|getOperation
argument_list|(
name|greetMeOpName
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|assertPortTypeOperationExtensions
parameter_list|(
name|OperationInfo
name|oi
parameter_list|,
name|boolean
name|expectExtensions
parameter_list|)
block|{
if|if
condition|(
name|expectExtensions
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|oi
operator|.
name|getExtensionAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|oi
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|oi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXTENSION_ELEM
argument_list|,
name|oi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|getElementType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|oi
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|oi
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|oi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|oi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertBindingOperationExtensions
parameter_list|(
name|BindingOperationInfo
name|boi
parameter_list|,
name|boolean
name|expectExtensions
parameter_list|)
block|{
if|if
condition|(
name|expectExtensions
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|boi
operator|.
name|getExtensionAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|boi
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|boi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXTENSION_ELEM
argument_list|,
name|boi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|getElementType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|boi
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|boi
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|boi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|boi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertPortTypeOperationMessageExtensions
parameter_list|(
name|OperationInfo
name|oi
parameter_list|,
name|boolean
name|expectExtensions
parameter_list|,
name|boolean
name|hasOutput
parameter_list|,
name|QName
name|fault
parameter_list|)
block|{
name|MessageInfo
name|mi
init|=
name|oi
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectExtensions
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mi
operator|.
name|getExtensionAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|mi
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXTENSION_ELEM
argument_list|,
name|mi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|getElementType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|mi
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mi
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasOutput
condition|)
block|{
name|mi
operator|=
name|oi
operator|.
name|getOutput
argument_list|()
expr_stmt|;
if|if
condition|(
name|expectExtensions
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mi
operator|.
name|getExtensionAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|mi
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXTENSION_ELEM
argument_list|,
name|mi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|getElementType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|mi
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mi
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|fault
condition|)
block|{
name|FaultInfo
name|fi
init|=
name|oi
operator|.
name|getFault
argument_list|(
name|fault
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectExtensions
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fi
operator|.
name|getExtensionAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fi
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXTENSION_ELEM
argument_list|,
name|fi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|getElementType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|fi
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fi
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|fi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|assertBindingOperationMessageExtensions
parameter_list|(
name|BindingOperationInfo
name|boi
parameter_list|,
name|boolean
name|expectExtensions
parameter_list|,
name|boolean
name|hasOutput
parameter_list|,
name|QName
name|fault
parameter_list|)
block|{
name|BindingMessageInfo
name|bmi
init|=
name|boi
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectExtensions
condition|)
block|{
comment|// REVISIT: bug in wsdl4j?
comment|// getExtensionAttributes on binding/operation/input element returns an empty map
comment|// assertEquals(1, bmi.getExtensionAttributes().size());
comment|// assertNotNull(bmi.getExtensionAttribute(EXTENSION_ATTR_STRING));
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bmi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXTENSION_ELEM
argument_list|,
name|bmi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|getElementType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|bmi
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bmi
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bmi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bmi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasOutput
condition|)
block|{
name|bmi
operator|=
name|boi
operator|.
name|getOutput
argument_list|()
expr_stmt|;
if|if
condition|(
name|expectExtensions
condition|)
block|{
comment|// REVISIT: bug in wsdl4j?
comment|// getExtensionAttributes on binding/operation/output element returns an empty map
comment|// assertEquals(1, bmi.getExtensionAttributes().size());
comment|// assertNotNull(bmi.getExtensionAttribute(EXTENSION_ATTR_STRING));
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bmi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXTENSION_ELEM
argument_list|,
name|bmi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|getElementType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|bmi
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bmi
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bmi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bmi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|fault
condition|)
block|{
name|BindingFaultInfo
name|bfi
init|=
name|boi
operator|.
name|getFault
argument_list|(
name|fault
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectExtensions
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bfi
operator|.
name|getExtensionAttributes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bfi
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bfi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXTENSION_ELEM
argument_list|,
name|bfi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
operator|.
name|getElementType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|bfi
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bfi
operator|.
name|getExtensionAttribute
argument_list|(
name|EXTENSION_ATTR_STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bfi
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bfi
operator|.
name|getExtensor
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

