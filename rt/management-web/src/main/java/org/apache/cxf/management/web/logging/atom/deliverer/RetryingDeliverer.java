begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|atom
operator|.
name|deliverer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|Validate
import|;
end_import

begin_comment
comment|/**  * Wrapper on other deliverer retrying delivery in case of failure. Delivery attempts repeat in loop with some  * pause time between retries until successful delivery or exceeding time limit. Time delay between delivery  * is configurable strategy. Two predefined strategies are given: each time pause same amount of time (linear)  * and each next time pause time doubles (exponential).  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|RetryingDeliverer
implements|implements
name|Deliverer
block|{
specifier|private
name|Deliverer
name|deliverer
decl_stmt|;
specifier|private
name|PauseCalculator
name|pauser
decl_stmt|;
specifier|private
name|int
name|timeout
decl_stmt|;
comment|/**      * Creates retrying deliverer with predefined retry strategy.      *       * @param worker real deliverer used to push data out.      * @param timeout maximum time range (in seconds) that retrial is continued; time spent on delivery call      *            is included. No timeout (infinite loop) if set to zero.      * @param pause time of pause (in seconds) greater than zero.      * @param linear if true linear strategy (each time pause same amount of time), exponential otherwise      *            (each next time pause time doubles).      */
specifier|public
name|RetryingDeliverer
parameter_list|(
name|Deliverer
name|worker
parameter_list|,
name|int
name|timeout
parameter_list|,
name|int
name|pause
parameter_list|,
name|boolean
name|linear
parameter_list|)
block|{
name|Validate
operator|.
name|notNull
argument_list|(
name|worker
argument_list|,
literal|"worker is null"
argument_list|)
expr_stmt|;
name|Validate
operator|.
name|isTrue
argument_list|(
name|timeout
operator|>=
literal|0
argument_list|,
literal|"timeout is negative"
argument_list|)
expr_stmt|;
name|Validate
operator|.
name|isTrue
argument_list|(
name|pause
operator|>
literal|0
argument_list|,
literal|"pause is not greater than zero"
argument_list|)
expr_stmt|;
name|deliverer
operator|=
name|worker
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|this
operator|.
name|pauser
operator|=
name|linear
condition|?
operator|new
name|ConstantPause
argument_list|(
name|pause
argument_list|)
else|:
operator|new
name|ExponentialPause
argument_list|(
name|pause
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates retrying deliverer with custom retry strategy.      *       * @param worker real deliverer used to push data out.      * @param timeout maximum time range (in seconds) that retrial is continued; time spent on delivery call      *            is included. No timeout (infinite loop) if set to zero.      * @param strategy custom retry pausing strategy.      */
specifier|public
name|RetryingDeliverer
parameter_list|(
name|Deliverer
name|worker
parameter_list|,
name|int
name|timeout
parameter_list|,
name|PauseCalculator
name|strategy
parameter_list|)
block|{
name|Validate
operator|.
name|notNull
argument_list|(
name|worker
argument_list|,
literal|"worker is null"
argument_list|)
expr_stmt|;
name|Validate
operator|.
name|notNull
argument_list|(
name|strategy
argument_list|,
literal|"strategy is null"
argument_list|)
expr_stmt|;
name|Validate
operator|.
name|isTrue
argument_list|(
name|timeout
operator|>=
literal|0
argument_list|,
literal|"timeout is negative"
argument_list|)
expr_stmt|;
name|deliverer
operator|=
name|worker
expr_stmt|;
name|pauser
operator|=
name|strategy
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
specifier|public
name|boolean
name|deliver
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|Date
name|timeoutDate
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|deliverer
operator|.
name|deliver
argument_list|(
name|element
argument_list|)
condition|)
block|{
name|int
name|sleep
init|=
name|pauser
operator|.
name|nextPause
argument_list|()
decl_stmt|;
name|cal
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
name|sleep
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
operator|==
literal|0
operator|||
name|timeoutDate
operator|.
name|after
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|long
operator|)
name|sleep
operator|*
literal|1000L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pauser
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|pauser
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/** Calculates time of subsequent pauses between delivery attempts. */
specifier|public
interface|interface
name|PauseCalculator
block|{
comment|/** Time of next pause (in seconds). */
name|int
name|nextPause
parameter_list|()
function_decl|;
comment|/** Restarts calculation. */
name|void
name|reset
parameter_list|()
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|ConstantPause
implements|implements
name|PauseCalculator
block|{
specifier|private
name|int
name|pause
decl_stmt|;
name|ConstantPause
parameter_list|(
name|int
name|pause
parameter_list|)
block|{
name|this
operator|.
name|pause
operator|=
name|pause
expr_stmt|;
block|}
specifier|public
name|int
name|nextPause
parameter_list|()
block|{
return|return
name|pause
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{         }
block|}
specifier|private
specifier|static
class|class
name|ExponentialPause
implements|implements
name|PauseCalculator
block|{
specifier|private
name|int
name|pause
decl_stmt|;
specifier|private
name|int
name|current
decl_stmt|;
name|ExponentialPause
parameter_list|(
name|int
name|pause
parameter_list|)
block|{
name|this
operator|.
name|pause
operator|=
name|pause
expr_stmt|;
name|current
operator|=
name|pause
expr_stmt|;
block|}
specifier|public
name|int
name|nextPause
parameter_list|()
block|{
name|int
name|c
init|=
name|current
decl_stmt|;
name|current
operator|*=
literal|2
expr_stmt|;
return|return
name|c
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|current
operator|=
name|pause
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getEndpointAddress
parameter_list|()
block|{
return|return
name|deliverer
operator|.
name|getEndpointAddress
argument_list|()
return|;
block|}
block|}
end_class

end_unit

