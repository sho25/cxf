begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|browser
operator|.
name|client
operator|.
name|service
operator|.
name|browser
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|xml
operator|.
name|client
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|xml
operator|.
name|client
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|xml
operator|.
name|client
operator|.
name|NodeList
import|;
end_import

begin_class
specifier|public
class|class
name|Links
block|{
specifier|public
specifier|static
specifier|final
name|Links
name|EMPTY
init|=
operator|new
name|Links
argument_list|()
decl_stmt|;
annotation|@
name|Nullable
specifier|private
name|String
name|first
decl_stmt|;
annotation|@
name|Nullable
specifier|private
name|String
name|previous
decl_stmt|;
annotation|@
name|Nullable
specifier|private
name|String
name|self
decl_stmt|;
annotation|@
name|Nullable
specifier|private
name|String
name|next
decl_stmt|;
annotation|@
name|Nullable
specifier|private
name|String
name|last
decl_stmt|;
specifier|private
name|Links
parameter_list|()
block|{     }
specifier|public
name|Links
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Document
name|document
parameter_list|)
block|{
operator|new
name|XmlParser
argument_list|()
operator|.
name|parseLinks
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|firstAvailable
parameter_list|()
block|{
return|return
name|available
argument_list|(
name|first
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|previousAvailable
parameter_list|()
block|{
return|return
name|available
argument_list|(
name|previous
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|selfAvailable
parameter_list|()
block|{
return|return
name|available
argument_list|(
name|self
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|nextAvailable
parameter_list|()
block|{
return|return
name|available
argument_list|(
name|next
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|lastAvailable
parameter_list|()
block|{
return|return
name|available
argument_list|(
name|last
argument_list|)
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|String
name|getFirst
parameter_list|()
block|{
return|return
name|first
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|String
name|getPrevious
parameter_list|()
block|{
return|return
name|previous
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|String
name|getSelf
parameter_list|()
block|{
return|return
name|self
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|String
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|String
name|getLast
parameter_list|()
block|{
return|return
name|last
return|;
block|}
specifier|private
name|boolean
name|available
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|String
name|link
parameter_list|)
block|{
return|return
name|link
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|link
argument_list|)
return|;
block|}
specifier|private
specifier|final
class|class
name|XmlParser
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FEED_TAG
init|=
literal|"feed"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LINK_TAG
init|=
literal|"link"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TYPE_ATTRIBUTE
init|=
literal|"rel"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URL_ATTRIBUTE
init|=
literal|"href"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FIRST_LINK
init|=
literal|"first"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PREVIOUS_LINK
init|=
literal|"previous"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SELF_LINK
init|=
literal|"self"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NEXT_LINK
init|=
literal|"next"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LAST_LINK
init|=
literal|"last"
decl_stmt|;
specifier|private
name|XmlParser
parameter_list|()
block|{         }
specifier|private
name|void
name|parseLinks
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Document
name|document
parameter_list|)
block|{
name|NodeList
name|linkNodes
init|=
name|document
operator|.
name|getElementsByTagName
argument_list|(
name|LINK_TAG
argument_list|)
decl_stmt|;
if|if
condition|(
name|linkNodes
operator|!=
literal|null
condition|)
block|{
name|Node
name|linkNode
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|linkNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|linkNode
operator|=
name|linkNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLinkBelongToFeed
argument_list|(
name|linkNode
argument_list|)
condition|)
block|{
name|setLink
argument_list|(
name|linkNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|isLinkBelongToFeed
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Node
name|node
parameter_list|)
block|{
return|return
name|node
operator|.
name|getParentNode
argument_list|()
operator|!=
literal|null
operator|&&
name|FEED_TAG
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getParentNode
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|setLink
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Node
name|node
parameter_list|)
block|{
name|Node
name|typeNode
init|=
name|node
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
name|TYPE_ATTRIBUTE
argument_list|)
decl_stmt|;
name|Node
name|urlNode
init|=
name|node
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
name|URL_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeNode
operator|!=
literal|null
operator|&&
name|urlNode
operator|!=
literal|null
condition|)
block|{
name|String
name|typeValue
init|=
name|typeNode
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|String
name|urlValue
init|=
name|urlNode
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|FIRST_LINK
operator|.
name|equals
argument_list|(
name|typeValue
argument_list|)
condition|)
block|{
name|first
operator|=
name|urlValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PREVIOUS_LINK
operator|.
name|equals
argument_list|(
name|typeValue
argument_list|)
condition|)
block|{
name|previous
operator|=
name|urlValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SELF_LINK
operator|.
name|equals
argument_list|(
name|typeValue
argument_list|)
condition|)
block|{
name|self
operator|=
name|urlValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|NEXT_LINK
operator|.
name|equals
argument_list|(
name|typeValue
argument_list|)
condition|)
block|{
name|next
operator|=
name|urlValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LAST_LINK
operator|.
name|equals
argument_list|(
name|typeValue
argument_list|)
condition|)
block|{
name|last
operator|=
name|urlValue
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

