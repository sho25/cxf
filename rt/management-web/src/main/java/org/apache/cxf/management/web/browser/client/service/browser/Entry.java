begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|browser
operator|.
name|client
operator|.
name|service
operator|.
name|browser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|xml
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|xml
operator|.
name|client
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|xml
operator|.
name|client
operator|.
name|NodeList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|xml
operator|.
name|client
operator|.
name|Node
operator|.
name|ELEMENT_NODE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|xml
operator|.
name|client
operator|.
name|Node
operator|.
name|TEXT_NODE
import|;
end_import

begin_comment
comment|/**  * The class represents log record, which is parsed from DOM representation of {@link LogRecord}.  *<p/>  * Log record is single piece of information log by logger. For example:  *<code>  *<p/>  *</code>  *  * @see FeedProxy  */
end_comment

begin_class
specifier|public
class|class
name|Entry
block|{
comment|/**      * short message      */
specifier|private
name|String
name|title
decl_stmt|;
comment|/**      * long message      */
specifier|private
name|String
name|message
decl_stmt|;
comment|/**      * level: 'DEBUG', 'INFO', 'WARN', 'ERROR'      */
specifier|private
name|String
name|level
decl_stmt|;
comment|/**      * error message and stack trace related with occured exception      */
specifier|private
name|String
name|throwable
decl_stmt|;
comment|/**      * date of occured      */
specifier|private
name|Date
name|eventTimestamp
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|LazyXmlParser
name|xmlParser
decl_stmt|;
comment|/**      * Constructs a new<code>Entry</code> by convert DOM representation.      *      * @param entryNode XML node which represent entry (nonnull);      */
specifier|public
name|Entry
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Node
name|entryNode
parameter_list|)
block|{
name|xmlParser
operator|=
operator|new
name|LazyXmlParser
argument_list|(
name|entryNode
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns short message of the log record.      *      * @return short message (nonull)      */
annotation|@
name|Nonnull
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
if|if
condition|(
name|title
operator|==
literal|null
condition|)
block|{
name|title
operator|=
name|avoidNull
argument_list|(
name|xmlParser
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|title
return|;
block|}
comment|/**      * Returns long message of the log record.      *      * @return long message (nonull)      */
annotation|@
name|Nonnull
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|message
operator|=
name|avoidNull
argument_list|(
name|xmlParser
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
comment|/**      * Returns level of the log record. Possible values: 'DEBUG', 'INFO', 'WARN', 'ERROR'.      *      * @return level (nonull)      */
annotation|@
name|Nonnull
specifier|public
name|String
name|getLevel
parameter_list|()
block|{
if|if
condition|(
name|level
operator|==
literal|null
condition|)
block|{
name|level
operator|=
name|avoidNull
argument_list|(
name|xmlParser
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|level
return|;
block|}
comment|/**      * Returns error message and stack trace related with occured exception.      *      * @return error message and stack trace (nonull)      */
annotation|@
name|Nonnull
specifier|public
name|String
name|getThrowable
parameter_list|()
block|{
if|if
condition|(
name|throwable
operator|==
literal|null
condition|)
block|{
name|throwable
operator|=
name|avoidNull
argument_list|(
name|xmlParser
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|throwable
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|Date
name|getEventTimestamp
parameter_list|()
block|{
if|if
condition|(
name|eventTimestamp
operator|==
literal|null
condition|)
block|{
name|eventTimestamp
operator|=
name|xmlParser
operator|.
name|getEventTimestamp
argument_list|()
expr_stmt|;
block|}
return|return
name|eventTimestamp
operator|!=
literal|null
condition|?
operator|(
name|Date
operator|)
name|eventTimestamp
operator|.
name|clone
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|String
name|avoidNull
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|!=
literal|null
condition|?
name|value
else|:
literal|""
return|;
block|}
specifier|private
specifier|static
class|class
name|LazyXmlParser
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TITLE_TAG
init|=
literal|"title"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MESSAGE_TAG
init|=
literal|"message"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LEVEL_TAG
init|=
literal|"level"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|THROWABLE_TAG
init|=
literal|"throwable"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EVENT_TIMESTAMP_TAG
init|=
literal|"date"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DateTimeFormat
name|DATETIME_FORMATTER
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"yyyy-MM-ddTHH:mm:ss'.'SSSZ"
argument_list|)
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|Node
name|entryNode
decl_stmt|;
name|LazyXmlParser
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Node
name|entryNode
parameter_list|)
block|{
assert|assert
literal|"entry"
operator|.
name|equals
argument_list|(
name|entryNode
operator|.
name|getNodeName
argument_list|()
argument_list|)
assert|;
assert|assert
name|entryNode
operator|.
name|getNodeType
argument_list|()
operator|==
name|ELEMENT_NODE
assert|;
name|this
operator|.
name|entryNode
operator|=
name|entryNode
expr_stmt|;
block|}
annotation|@
name|Nullable
specifier|private
name|String
name|getTagValue
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|tagName
parameter_list|)
block|{
name|Node
name|node
init|=
name|getUniqueElementByTagName
argument_list|(
name|tagName
argument_list|)
decl_stmt|;
return|return
name|node
operator|!=
literal|null
condition|?
name|getTextValue
argument_list|(
name|node
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Nullable
specifier|private
name|Node
name|getUniqueElementByTagName
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|tagName
parameter_list|)
block|{
name|NodeList
name|nodes
init|=
operator|(
operator|(
name|Element
operator|)
name|entryNode
operator|)
operator|.
name|getElementsByTagName
argument_list|(
name|tagName
argument_list|)
decl_stmt|;
return|return
name|nodes
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|?
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Nullable
specifier|private
name|String
name|getTextValue
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Node
name|node
parameter_list|)
block|{
name|Node
name|child
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|!=
literal|null
operator|&&
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|TEXT_NODE
condition|)
block|{
return|return
name|child
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|getTagValue
argument_list|(
name|TITLE_TAG
argument_list|)
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|getTagValue
argument_list|(
name|MESSAGE_TAG
argument_list|)
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|String
name|getLevel
parameter_list|()
block|{
return|return
name|getTagValue
argument_list|(
name|LEVEL_TAG
argument_list|)
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|String
name|getThrowable
parameter_list|()
block|{
return|return
name|getTagValue
argument_list|(
name|THROWABLE_TAG
argument_list|)
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|Date
name|getEventTimestamp
parameter_list|()
block|{
name|String
name|value
init|=
name|getTagValue
argument_list|(
name|EVENT_TIMESTAMP_TAG
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|DATETIME_FORMATTER
operator|.
name|parse
argument_list|(
name|value
argument_list|)
else|:
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

