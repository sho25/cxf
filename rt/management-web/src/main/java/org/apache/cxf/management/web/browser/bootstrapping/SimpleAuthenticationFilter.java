begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|browser
operator|.
name|bootstrapping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|Validate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_class
annotation|@
name|Provider
specifier|public
class|class
name|SimpleAuthenticationFilter
extends|extends
name|AbstractAuthenticationFilter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SimpleAuthenticationFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|authData
decl_stmt|;
specifier|public
name|SimpleAuthenticationFilter
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|authData
parameter_list|)
block|{
name|Validate
operator|.
name|notNull
argument_list|(
name|authData
argument_list|,
literal|"authData is null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|authData
operator|=
name|authData
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|authenticate
parameter_list|(
name|Message
name|m
parameter_list|,
name|ClassResourceInfo
name|resourceClass
parameter_list|)
block|{
assert|assert
name|authData
operator|!=
literal|null
assert|;
name|AuthorizationPolicy
name|policy
init|=
operator|(
name|AuthorizationPolicy
operator|)
name|m
operator|.
name|get
argument_list|(
name|AuthorizationPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|fine
argument_list|(
literal|"No authentication data'"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|isValid
argument_list|(
name|policy
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|fine
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Successful authentication, username='%s'"
argument_list|,
name|policy
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|fine
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed authentication, username='%s'"
argument_list|,
name|policy
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|isValid
parameter_list|(
specifier|final
name|AuthorizationPolicy
name|policy
parameter_list|)
block|{
return|return
name|authData
operator|.
name|containsKey
argument_list|(
name|policy
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|&&
name|authData
operator|.
name|get
argument_list|(
name|policy
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
name|authData
operator|.
name|get
argument_list|(
name|policy
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|policy
operator|.
name|getPassword
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

