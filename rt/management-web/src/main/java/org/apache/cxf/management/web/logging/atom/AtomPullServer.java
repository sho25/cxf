begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|atom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|abdera
operator|.
name|model
operator|.
name|Feed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|ConditionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|OrSearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|PrimitiveStatement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchConditionVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|LogRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|ReadWriteLogStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|ReadableLogStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|atom
operator|.
name|converter
operator|.
name|StandardConverter
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/logs"
argument_list|)
specifier|public
class|class
name|AtomPullServer
extends|extends
name|AbstractAtomBean
block|{
specifier|private
name|List
argument_list|<
name|LogRecord
argument_list|>
name|records
init|=
operator|new
name|LinkedList
argument_list|<
name|LogRecord
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|WeakHashMap
argument_list|<
name|Integer
argument_list|,
name|Feed
argument_list|>
name|feeds
init|=
operator|new
name|WeakHashMap
argument_list|<
name|Integer
argument_list|,
name|Feed
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ReadableLogStorage
name|storage
decl_stmt|;
specifier|private
name|int
name|pageSize
init|=
literal|20
decl_stmt|;
specifier|private
name|int
name|maxInMemorySize
init|=
literal|1000
decl_stmt|;
specifier|private
name|boolean
name|useArchivedFeeds
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|recordsSize
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|alreadyClosed
decl_stmt|;
specifier|private
name|SearchCondition
argument_list|<
name|LogRecord
argument_list|>
name|readableStorageCondition
decl_stmt|;
annotation|@
name|Context
specifier|private
name|MessageContext
name|context
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|endpointAddresses
decl_stmt|;
specifier|private
name|String
name|serverAddress
decl_stmt|;
specifier|public
name|void
name|setEndpointAddress
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|setEndpointAddresses
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setEndpointAddresses
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|addresses
parameter_list|)
block|{
name|this
operator|.
name|endpointAddresses
operator|=
name|addresses
expr_stmt|;
block|}
specifier|public
name|void
name|setServerAddress
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|this
operator|.
name|serverAddress
operator|=
name|address
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
block|{
comment|// the storage might've been used to save previous records or it might
comment|// point to a file log entries are added to
if|if
condition|(
name|storage
operator|!=
literal|null
condition|)
block|{
comment|//-1 can be returned by read-only storage if it does not know in advance
comment|// a number of records it may contain
name|recordsSize
operator|=
name|storage
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|storage
operator|==
literal|null
operator|||
name|storage
operator|instanceof
name|ReadWriteLogStorage
condition|)
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// super.init() results in the additional Handler being created and publish()
comment|// method being called as a result. If the storage is read-only it is assumed it points to
comment|// the external source of log records thus no need to get the publish events here
comment|// instead we create a SearchCondition the external storage will check against when
comment|// loading the matching records on request
name|List
argument_list|<
name|SearchCondition
argument_list|<
name|LogRecord
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|SearchCondition
argument_list|<
name|LogRecord
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|LoggerLevel
name|l
range|:
name|super
operator|.
name|getLoggers
argument_list|()
control|)
block|{
name|LogRecord
name|r
init|=
operator|new
name|LogRecord
argument_list|()
decl_stmt|;
name|r
operator|.
name|setLoggerName
argument_list|(
name|l
operator|.
name|getLogger
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setLevel
argument_list|(
name|LogLevel
operator|.
name|valueOf
argument_list|(
name|l
operator|.
name|getLevel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|SearchConditionImpl
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|readableStorageCondition
operator|=
operator|new
name|OrSearchCondition
argument_list|<
name|LogRecord
argument_list|>
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
name|initBusProperty
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Handler
name|createHandler
parameter_list|()
block|{
return|return
operator|new
name|AtomPullHandler
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|initBusProperty
parameter_list|()
block|{
if|if
condition|(
name|endpointAddresses
operator|!=
literal|null
operator|&&
name|serverAddress
operator|!=
literal|null
operator|&&
name|getBus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Bus
name|bus
init|=
name|getBus
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|bus
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|addresses
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|bus
operator|.
name|getProperty
argument_list|(
literal|"org.apache.cxf.extensions.logging.atom.pull"
argument_list|)
decl_stmt|;
if|if
condition|(
name|addresses
operator|==
literal|null
condition|)
block|{
name|addresses
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|address
range|:
name|endpointAddresses
control|)
block|{
name|addresses
operator|.
name|put
argument_list|(
name|address
argument_list|,
name|serverAddress
operator|+
literal|"/logs"
argument_list|)
expr_stmt|;
block|}
name|bus
operator|.
name|setProperty
argument_list|(
literal|"org.apache.cxf.extensions.logging.atom.pull"
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
literal|"application/atom+xml"
argument_list|)
specifier|public
name|Feed
name|getXmlFeed
parameter_list|()
block|{
return|return
name|getXmlFeedWithPage
argument_list|(
literal|1
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
literal|"application/atom+xml"
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"{id}"
argument_list|)
specifier|public
name|Feed
name|getXmlFeedWithPage
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|int
name|page
parameter_list|)
block|{
comment|// lets check if the Atom reader is asking for a set of records which has already been
comment|// converted to Feed
synchronized|synchronized
init|(
name|feeds
init|)
block|{
name|Feed
name|f
init|=
name|feeds
operator|.
name|get
argument_list|(
name|page
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
return|return
name|f
return|;
block|}
block|}
name|Feed
name|feed
init|=
literal|null
decl_stmt|;
name|SearchCondition
argument_list|<
name|LogRecord
argument_list|>
name|condition
init|=
name|getCurrentCondition
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|records
init|)
block|{
name|List
argument_list|<
name|LogRecord
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|LogRecord
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|lastPage
init|=
name|fillSubList
argument_list|(
name|list
argument_list|,
name|page
argument_list|,
name|condition
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
operator|new
name|LogRecordComparator
argument_list|()
argument_list|)
expr_stmt|;
name|feed
operator|=
operator|(
name|Feed
operator|)
operator|new
name|CustomFeedConverter
argument_list|(
name|page
argument_list|)
operator|.
name|convert
argument_list|(
name|list
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setFeedPageProperties
argument_list|(
name|feed
argument_list|,
name|page
argument_list|,
name|lastPage
argument_list|)
expr_stmt|;
block|}
comment|// if at the moment we've converted n< pageSize number of records only and
comment|// persist a Feed keyed by a page then another reader requesting the same page
comment|// may miss latest records which might've been added since the original request
if|if
condition|(
name|condition
operator|==
literal|null
operator|&&
name|feed
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|pageSize
condition|)
block|{
synchronized|synchronized
init|(
name|feeds
init|)
block|{
name|feeds
operator|.
name|put
argument_list|(
name|page
argument_list|,
name|feed
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|feed
return|;
block|}
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
literal|"text/html"
block|,
literal|"application/xhtml+xml"
block|}
argument_list|)
annotation|@
name|Path
argument_list|(
literal|"alternate/{id}"
argument_list|)
specifier|public
name|String
name|getAlternateFeed
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|int
name|page
parameter_list|)
block|{
name|List
argument_list|<
name|LogRecord
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|LogRecord
argument_list|>
argument_list|()
decl_stmt|;
name|fillSubList
argument_list|(
name|list
argument_list|,
name|page
argument_list|,
name|getCurrentCondition
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
operator|new
name|LogRecordComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|convertEntriesToHtml
argument_list|(
name|list
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"entry/{id}"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"application/atom+xml;type=entry"
argument_list|)
specifier|public
name|Entry
name|getEntry
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|int
name|index
parameter_list|)
block|{
name|List
argument_list|<
name|LogRecord
argument_list|>
name|list
init|=
name|getLogRecords
argument_list|(
name|index
argument_list|,
name|getCurrentCondition
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|Entry
operator|)
operator|new
name|CustomEntryConverter
argument_list|(
name|index
argument_list|)
operator|.
name|convert
argument_list|(
name|list
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"entry/alternate/{id}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
literal|"text/html"
block|,
literal|"application/xhtml+xml"
block|}
argument_list|)
specifier|public
name|String
name|getAlternateEntry
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|int
name|index
parameter_list|)
block|{
name|List
argument_list|<
name|LogRecord
argument_list|>
name|logRecords
init|=
name|getLogRecords
argument_list|(
name|index
argument_list|,
name|getCurrentCondition
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|convertEntryToHtml
argument_list|(
name|logRecords
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"records"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"text/plain"
argument_list|)
specifier|public
name|int
name|getNumberOfAvailableRecords
parameter_list|()
block|{
return|return
name|recordsSize
return|;
block|}
specifier|private
name|List
argument_list|<
name|LogRecord
argument_list|>
name|getLogRecords
parameter_list|(
name|int
name|index
parameter_list|,
name|SearchCondition
argument_list|<
name|LogRecord
argument_list|>
name|theSearch
parameter_list|)
block|{
name|List
argument_list|<
name|LogRecord
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|LogRecord
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|storage
operator|!=
literal|null
condition|)
block|{
name|int
name|storageSize
init|=
name|storage
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|recordsSize
operator|==
operator|-
literal|1
operator|||
name|index
operator|<
name|storageSize
condition|)
block|{
name|storage
operator|.
name|load
argument_list|(
name|list
argument_list|,
name|theSearch
argument_list|,
name|index
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|index
operator|<
name|recordsSize
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|records
operator|.
name|get
argument_list|(
name|index
operator|-
name|storageSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|records
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
literal|404
argument_list|)
throw|;
block|}
return|return
name|list
return|;
block|}
specifier|protected
name|int
name|fillSubList
parameter_list|(
name|List
argument_list|<
name|LogRecord
argument_list|>
name|list
parameter_list|,
name|int
name|page
parameter_list|,
name|SearchCondition
argument_list|<
name|LogRecord
argument_list|>
name|theSearch
parameter_list|)
block|{
if|if
condition|(
name|recordsSize
operator|==
operator|-
literal|1
condition|)
block|{
comment|// let the external storage load the records it knows about
name|storage
operator|.
name|load
argument_list|(
name|list
argument_list|,
name|theSearch
argument_list|,
name|page
operator|==
literal|1
condition|?
literal|0
else|:
operator|(
name|page
operator|-
literal|1
operator|)
operator|*
name|pageSize
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
return|return
name|page
return|;
block|}
if|if
condition|(
name|recordsSize
operator|==
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
name|int
name|fromIndex
init|=
literal|0
decl_stmt|;
name|int
name|toIndex
init|=
literal|0
decl_stmt|;
comment|// see http://tools.ietf.org/html/draft-nottingham-atompub-feed-history-07
if|if
condition|(
operator|!
name|useArchivedFeeds
condition|)
block|{
name|fromIndex
operator|=
name|page
operator|==
literal|1
condition|?
literal|0
else|:
operator|(
name|page
operator|-
literal|1
operator|)
operator|*
name|pageSize
expr_stmt|;
if|if
condition|(
name|fromIndex
operator|>
name|recordsSize
condition|)
block|{
comment|// this should not happen really
name|page
operator|=
literal|1
expr_stmt|;
name|fromIndex
operator|=
literal|0
expr_stmt|;
block|}
name|toIndex
operator|=
name|page
operator|==
literal|1
condition|?
name|pageSize
else|:
name|fromIndex
operator|+
name|pageSize
expr_stmt|;
if|if
condition|(
name|toIndex
operator|>
name|recordsSize
condition|)
block|{
name|toIndex
operator|=
name|recordsSize
expr_stmt|;
block|}
block|}
else|else
block|{
name|fromIndex
operator|=
name|recordsSize
operator|-
name|pageSize
operator|*
name|page
expr_stmt|;
if|if
condition|(
name|fromIndex
operator|<
literal|0
condition|)
block|{
name|fromIndex
operator|=
literal|0
expr_stmt|;
block|}
name|toIndex
operator|=
name|pageSize
operator|<
name|recordsSize
condition|?
name|recordsSize
else|:
name|pageSize
expr_stmt|;
block|}
comment|// if we have the storage then try to load from it
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|storage
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fromIndex
operator|<
name|storage
operator|.
name|getSize
argument_list|()
condition|)
block|{
name|int
name|storageSize
init|=
name|storage
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|int
name|maxQuantityToLoad
init|=
name|toIndex
operator|>
name|storageSize
condition|?
name|toIndex
operator|-
name|storageSize
else|:
name|toIndex
operator|-
name|fromIndex
decl_stmt|;
name|storage
operator|.
name|load
argument_list|(
name|list
argument_list|,
name|theSearch
argument_list|,
name|fromIndex
argument_list|,
name|maxQuantityToLoad
argument_list|)
expr_stmt|;
name|loaded
operator|=
literal|true
expr_stmt|;
name|int
name|totalQuantity
init|=
name|toIndex
operator|-
name|fromIndex
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|<
name|totalQuantity
condition|)
block|{
name|int
name|remaining
init|=
name|totalQuantity
operator|-
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|remaining
operator|>
name|records
operator|.
name|size
argument_list|()
condition|)
block|{
name|remaining
operator|=
name|records
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|fromIndex
operator|=
literal|0
expr_stmt|;
name|toIndex
operator|=
name|remaining
expr_stmt|;
name|loaded
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|fromIndex
operator|-=
name|storage
operator|.
name|getSize
argument_list|()
expr_stmt|;
name|toIndex
operator|-=
name|storage
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|loaded
condition|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|filterRecords
argument_list|(
name|records
operator|.
name|subList
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
argument_list|,
name|theSearch
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|theSearch
operator|!=
literal|null
operator|&&
name|list
operator|.
name|size
argument_list|()
operator|<
name|pageSize
operator|&&
name|page
operator|*
name|pageSize
operator|<
name|recordsSize
condition|)
block|{
return|return
name|fillSubList
argument_list|(
name|list
argument_list|,
name|page
operator|+
literal|1
argument_list|,
name|theSearch
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|page
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|LogRecord
argument_list|>
name|filterRecords
parameter_list|(
name|List
argument_list|<
name|LogRecord
argument_list|>
name|list
parameter_list|,
name|SearchCondition
argument_list|<
name|LogRecord
argument_list|>
name|theSearch
parameter_list|)
block|{
return|return
name|theSearch
operator|==
literal|null
condition|?
name|list
else|:
name|theSearch
operator|.
name|findAll
argument_list|(
name|list
argument_list|)
return|;
block|}
specifier|private
name|SearchCondition
argument_list|<
name|LogRecord
argument_list|>
name|getCurrentCondition
parameter_list|()
block|{
name|SearchCondition
argument_list|<
name|LogRecord
argument_list|>
name|current
init|=
name|context
operator|.
name|getContext
argument_list|(
name|SearchContext
operator|.
name|class
argument_list|)
operator|.
name|getCondition
argument_list|(
name|LogRecord
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
return|return
name|readableStorageCondition
return|;
block|}
else|else
block|{
return|return
name|current
return|;
block|}
block|}
specifier|private
name|String
name|getSearchExpression
parameter_list|()
block|{
return|return
name|context
operator|.
name|getContext
argument_list|(
name|SearchContext
operator|.
name|class
argument_list|)
operator|.
name|getSearchExpression
argument_list|()
return|;
block|}
specifier|protected
name|void
name|setFeedPageProperties
parameter_list|(
name|Feed
name|feed
parameter_list|,
name|int
name|page
parameter_list|,
name|int
name|lastPage
parameter_list|)
block|{
name|String
name|self
init|=
name|context
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|feed
operator|.
name|addLink
argument_list|(
name|self
argument_list|,
literal|"self"
argument_list|)
expr_stmt|;
name|int
name|feedSize
init|=
name|feed
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
name|searchExpression
init|=
name|getSearchExpression
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|context
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getBaseUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
literal|"logs"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|feed
operator|.
name|addLink
argument_list|(
name|uri
operator|+
literal|"/alternate/"
operator|+
name|page
argument_list|,
literal|"alternate"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useArchivedFeeds
condition|)
block|{
if|if
condition|(
name|recordsSize
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|page
operator|>
literal|2
condition|)
block|{
name|feed
operator|.
name|addLink
argument_list|(
name|createLinkUri
argument_list|(
name|uri
argument_list|,
name|searchExpression
argument_list|)
argument_list|,
literal|"first"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchExpression
operator|==
literal|null
operator|&&
name|lastPage
operator|*
name|pageSize
operator|<
name|recordsSize
operator|||
name|searchExpression
operator|!=
literal|null
operator|&&
name|feedSize
operator|==
name|pageSize
condition|)
block|{
name|feed
operator|.
name|addLink
argument_list|(
name|createLinkUri
argument_list|(
name|uri
operator|+
literal|"/"
operator|+
operator|(
name|lastPage
operator|+
literal|1
operator|)
argument_list|,
name|searchExpression
argument_list|)
argument_list|,
literal|"next"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchExpression
operator|==
literal|null
operator|&&
name|page
operator|*
operator|(
name|pageSize
operator|+
literal|1
operator|)
operator|<
name|recordsSize
condition|)
block|{
name|feed
operator|.
name|addLink
argument_list|(
name|uri
operator|+
literal|"/"
operator|+
operator|(
name|recordsSize
operator|/
name|pageSize
operator|+
literal|1
operator|)
argument_list|,
literal|"last"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|feedSize
operator|==
name|pageSize
condition|)
block|{
name|feed
operator|.
name|addLink
argument_list|(
name|createLinkUri
argument_list|(
name|uri
operator|+
literal|"/"
operator|+
operator|(
name|page
operator|+
literal|1
operator|)
argument_list|,
name|searchExpression
argument_list|)
argument_list|,
literal|"next"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|searchExpression
operator|==
literal|null
operator|&&
name|page
operator|>
literal|1
condition|)
block|{
name|uri
operator|=
name|page
operator|>
literal|2
condition|?
name|uri
operator|+
literal|"/"
operator|+
operator|(
name|page
operator|-
literal|1
operator|)
else|:
name|uri
expr_stmt|;
name|feed
operator|.
name|addLink
argument_list|(
name|createLinkUri
argument_list|(
name|uri
argument_list|,
name|searchExpression
argument_list|)
argument_list|,
literal|"previous"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|Response
operator|.
name|serverError
argument_list|()
operator|.
name|entity
argument_list|(
literal|"Archived feeds are not supported yet"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
throw|;
comment|// feed.addLink(self, "current");
comment|// TODO : add prev-archive and next-archive; next-archive should not be set if it will point to
comment|// current
comment|// and xmlns:fh="http://purl.org/syndication/history/1.0":archive extension but only if
comment|// it is not current
block|}
block|}
specifier|private
name|String
name|createLinkUri
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|search
parameter_list|)
block|{
return|return
name|search
operator|==
literal|null
condition|?
name|uri
else|:
name|uri
operator|+
literal|"?_s="
operator|+
name|search
return|;
block|}
specifier|public
name|void
name|publish
parameter_list|(
name|LogRecord
name|record
parameter_list|)
block|{
if|if
condition|(
name|alreadyClosed
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"AtomPullServer has been closed, the following log record can not be saved : "
operator|+
name|record
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|records
init|)
block|{
if|if
condition|(
name|records
operator|.
name|size
argument_list|()
operator|==
name|maxInMemorySize
condition|)
block|{
if|if
condition|(
name|storage
operator|instanceof
name|ReadWriteLogStorage
condition|)
block|{
operator|(
operator|(
name|ReadWriteLogStorage
operator|)
name|storage
operator|)
operator|.
name|save
argument_list|(
name|records
argument_list|)
expr_stmt|;
name|records
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LogRecord
name|oldRecord
init|=
name|records
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The oldest log record is removed : "
operator|+
name|oldRecord
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|records
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
operator|++
name|recordsSize
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setPageSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|pageSize
operator|=
name|size
expr_stmt|;
block|}
specifier|public
name|void
name|setMaxInMemorySize
parameter_list|(
name|int
name|maxInMemorySize
parameter_list|)
block|{
name|this
operator|.
name|maxInMemorySize
operator|=
name|maxInMemorySize
expr_stmt|;
block|}
specifier|public
name|void
name|setStorage
parameter_list|(
name|ReadableLogStorage
name|storage
parameter_list|)
block|{
name|this
operator|.
name|storage
operator|=
name|storage
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|alreadyClosed
condition|)
block|{
return|return;
block|}
name|alreadyClosed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|storage
operator|instanceof
name|ReadWriteLogStorage
condition|)
block|{
operator|(
operator|(
name|ReadWriteLogStorage
operator|)
name|storage
operator|)
operator|.
name|save
argument_list|(
name|records
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|records
operator|.
name|clear
argument_list|()
expr_stmt|;
name|recordsSize
operator|=
literal|0
expr_stmt|;
name|feeds
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// TODO : this all can be done later on in a simple xslt template
specifier|private
name|String
name|convertEntriesToHtml
parameter_list|(
name|List
argument_list|<
name|LogRecord
argument_list|>
name|rs
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|startHtmlHeadAndBody
argument_list|(
name|sb
argument_list|,
literal|"CXF Service Log Entries"
argument_list|)
expr_stmt|;
name|addRecordToTable
argument_list|(
name|sb
argument_list|,
name|rs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</body></html>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// TODO : this all can be done later on in a simple xslt template
specifier|private
name|String
name|convertEntryToHtml
parameter_list|(
name|LogRecord
name|r
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|startHtmlHeadAndBody
argument_list|(
name|sb
argument_list|,
name|r
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|addRecordToTable
argument_list|(
name|sb
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|r
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</body></html>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|addRecordToTable
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|List
argument_list|<
name|LogRecord
argument_list|>
name|list
parameter_list|,
name|boolean
name|forFeed
parameter_list|)
block|{
name|DateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"dd/MM/yy HH:mm:ss"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<table border=\"1\">"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<tr><th>Date</th><th>Level</th><th>Logger</th><th>Message</th></tr>"
argument_list|)
expr_stmt|;
for|for
control|(
name|LogRecord
name|lr
range|:
name|list
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td>"
operator|+
name|df
operator|.
name|format
argument_list|(
name|lr
operator|.
name|getEventTimestamp
argument_list|()
argument_list|)
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td>"
operator|+
name|lr
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<td>"
operator|+
name|lr
operator|.
name|getLoggerName
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|lr
operator|.
name|getMessage
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|message
operator|=
name|lr
operator|.
name|getThrowable
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|lr
operator|.
name|getMessage
argument_list|()
operator|+
literal|" : "
operator|+
name|lr
operator|.
name|getThrowable
argument_list|()
else|:
name|lr
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lr
operator|.
name|getThrowable
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|message
operator|=
name|lr
operator|.
name|getThrowable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
literal|"&nbsp"
expr_stmt|;
block|}
if|if
condition|(
name|forFeed
operator|&&
name|lr
operator|.
name|getThrowable
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|message
operator|=
name|message
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|message
operator|.
name|length
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"<td>"
operator|+
name|message
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</table><br/><br/>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|startHtmlHeadAndBody
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|title
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<html xmlns=\"http://www.w3.org/1999/xhtml\">"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<head>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\"/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<title>"
operator|+
literal|"Log record with level "
operator|+
name|title
operator|+
literal|"</title>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</head>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<body>"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|SearchConditionImpl
implements|implements
name|SearchCondition
argument_list|<
name|LogRecord
argument_list|>
block|{
specifier|private
name|LogRecord
name|template
decl_stmt|;
specifier|public
name|SearchConditionImpl
parameter_list|(
name|LogRecord
name|l
parameter_list|)
block|{
name|this
operator|.
name|template
operator|=
name|l
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMet
parameter_list|(
name|LogRecord
name|pojo
parameter_list|)
block|{
return|return
operator|(
name|template
operator|.
name|getLevel
argument_list|()
operator|==
name|LogLevel
operator|.
name|ALL
operator|||
name|pojo
operator|.
name|getLevel
argument_list|()
operator|.
name|compareTo
argument_list|(
name|template
operator|.
name|getLevel
argument_list|()
argument_list|)
operator|<=
literal|0
operator|)
operator|&&
name|template
operator|.
name|getLoggerName
argument_list|()
operator|.
name|equals
argument_list|(
name|pojo
operator|.
name|getLoggerName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|LogRecord
name|getCondition
parameter_list|()
block|{
return|return
operator|new
name|LogRecord
argument_list|(
name|template
argument_list|)
return|;
block|}
specifier|public
name|ConditionType
name|getConditionType
parameter_list|()
block|{
return|return
name|ConditionType
operator|.
name|CUSTOM
return|;
block|}
specifier|public
name|List
argument_list|<
name|SearchCondition
argument_list|<
name|LogRecord
argument_list|>
argument_list|>
name|getSearchConditions
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|LogRecord
argument_list|>
name|findAll
parameter_list|(
name|Collection
argument_list|<
name|LogRecord
argument_list|>
name|pojos
parameter_list|)
block|{
name|List
argument_list|<
name|LogRecord
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|LogRecord
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|LogRecord
name|r
range|:
name|pojos
control|)
block|{
if|if
condition|(
name|isMet
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
specifier|public
name|PrimitiveStatement
name|getStatement
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|toSQL
parameter_list|(
name|String
name|table
parameter_list|,
name|String
modifier|...
name|columns
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|accept
parameter_list|(
name|SearchConditionVisitor
argument_list|<
name|LogRecord
argument_list|>
name|visitor
parameter_list|)
block|{         }
block|}
specifier|private
specifier|static
class|class
name|LogRecordComparator
implements|implements
name|Comparator
argument_list|<
name|LogRecord
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|LogRecord
name|r1
parameter_list|,
name|LogRecord
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|.
name|getEventTimestamp
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getEventTimestamp
argument_list|()
argument_list|)
operator|*
operator|-
literal|1
return|;
block|}
block|}
specifier|private
class|class
name|CustomFeedConverter
extends|extends
name|StandardConverter
block|{
specifier|private
name|int
name|page
decl_stmt|;
specifier|public
name|CustomFeedConverter
parameter_list|(
name|int
name|page
parameter_list|)
block|{
name|super
argument_list|(
name|Output
operator|.
name|FEED
argument_list|,
name|Multiplicity
operator|.
name|MANY
argument_list|,
name|Format
operator|.
name|CONTENT
argument_list|)
expr_stmt|;
name|this
operator|.
name|page
operator|=
name|page
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setDefaultEntryProperties
parameter_list|(
name|Entry
name|entry
parameter_list|,
name|List
argument_list|<
name|LogRecord
argument_list|>
name|rs
parameter_list|,
name|int
name|entryIndex
parameter_list|)
block|{
name|super
operator|.
name|setDefaultEntryProperties
argument_list|(
name|entry
argument_list|,
name|rs
argument_list|,
name|entryIndex
argument_list|)
expr_stmt|;
name|UriBuilder
name|builder
init|=
name|context
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getAbsolutePathBuilder
argument_list|()
operator|.
name|path
argument_list|(
literal|"entry"
argument_list|)
decl_stmt|;
name|Integer
name|realIndex
init|=
name|page
operator|==
literal|1
condition|?
name|entryIndex
else|:
name|page
operator|*
name|pageSize
operator|+
name|entryIndex
decl_stmt|;
name|entry
operator|.
name|addLink
argument_list|(
name|builder
operator|.
name|clone
argument_list|()
operator|.
name|path
argument_list|(
name|realIndex
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"self"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|addLink
argument_list|(
name|builder
operator|.
name|path
argument_list|(
literal|"alternate"
argument_list|)
operator|.
name|path
argument_list|(
name|realIndex
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"alternate"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|CustomEntryConverter
extends|extends
name|StandardConverter
block|{
specifier|private
name|String
name|selfFragment
decl_stmt|;
specifier|private
name|String
name|altFragment
decl_stmt|;
specifier|public
name|CustomEntryConverter
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|super
argument_list|(
name|Output
operator|.
name|ENTRY
argument_list|,
name|Multiplicity
operator|.
name|ONE
argument_list|,
name|Format
operator|.
name|CONTENT
argument_list|)
expr_stmt|;
name|this
operator|.
name|selfFragment
operator|=
literal|"logs/entry/"
operator|+
name|index
expr_stmt|;
name|this
operator|.
name|altFragment
operator|=
literal|"logs/alternate/entry/"
operator|+
name|index
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setDefaultEntryProperties
parameter_list|(
name|Entry
name|entry
parameter_list|,
name|List
argument_list|<
name|LogRecord
argument_list|>
name|rs
parameter_list|,
name|int
name|entryIndex
parameter_list|)
block|{
name|super
operator|.
name|setDefaultEntryProperties
argument_list|(
name|entry
argument_list|,
name|rs
argument_list|,
name|entryIndex
argument_list|)
expr_stmt|;
name|entry
operator|.
name|addLink
argument_list|(
name|context
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getBaseUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
name|selfFragment
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"self"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|addLink
argument_list|(
name|context
operator|.
name|getUriInfo
argument_list|()
operator|.
name|getBaseUriBuilder
argument_list|()
operator|.
name|path
argument_list|(
name|altFragment
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"alternate"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

