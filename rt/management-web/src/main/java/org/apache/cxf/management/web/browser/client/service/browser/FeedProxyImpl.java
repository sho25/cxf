begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|browser
operator|.
name|client
operator|.
name|service
operator|.
name|browser
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|RequestBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|RequestCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|RequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|xml
operator|.
name|client
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|xml
operator|.
name|client
operator|.
name|XMLParser
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|RequestBuilder
operator|.
name|GET
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|RequestBuilder
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|browser
operator|.
name|client
operator|.
name|service
operator|.
name|AbstractCallback
import|;
end_import

begin_class
specifier|public
class|class
name|FeedProxyImpl
implements|implements
name|FeedProxy
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT_TYPE_HEADER
init|=
literal|"Content-Type"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ACCEPT_HEADER
init|=
literal|"Accept"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ATOM_TYPE
init|=
literal|"application/atom+xml"
decl_stmt|;
specifier|public
name|void
name|getFeed
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|String
name|url
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|RequestCallback
name|callback
parameter_list|)
block|{
name|RequestBuilder
name|builder
init|=
name|buildRequest
argument_list|(
name|GET
argument_list|,
name|url
argument_list|)
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|sendRequest
argument_list|(
literal|null
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RequestException
name|ex
parameter_list|)
block|{
comment|// TODO add custom exception
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
name|RequestBuilder
name|buildRequest
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Method
name|method
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|String
name|url
parameter_list|)
block|{
assert|assert
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|url
argument_list|)
assert|;
name|RequestBuilder
name|builder
init|=
operator|new
name|RequestBuilder
argument_list|(
name|method
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setHeader
argument_list|(
name|CONTENT_TYPE_HEADER
argument_list|,
name|ATOM_TYPE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHeader
argument_list|(
name|ACCEPT_HEADER
argument_list|,
name|ATOM_TYPE
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
specifier|public
specifier|abstract
specifier|static
class|class
name|Callback
extends|extends
name|AbstractCallback
argument_list|<
name|Feed
argument_list|>
block|{
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|protected
name|Feed
name|parse
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Response
name|response
parameter_list|)
block|{
name|Document
name|document
init|=
name|convertFromXML
argument_list|(
name|response
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Feed
argument_list|(
name|document
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Feed
operator|.
name|EMPTY
return|;
block|}
block|}
annotation|@
name|Nullable
specifier|private
name|Document
name|convertFromXML
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Response
name|response
parameter_list|)
block|{
if|if
condition|(
name|response
operator|.
name|getText
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|XMLParser
operator|.
name|parse
argument_list|(
name|response
operator|.
name|getText
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

