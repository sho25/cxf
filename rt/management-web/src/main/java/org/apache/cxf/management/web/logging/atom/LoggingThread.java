begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
operator|.
name|atom
package|;
end_package

begin_comment
comment|/**  * Helps disable logging from calls of the same thread. Motivation: log handlers in this package causes other  * threads (from executor) to start logging (by using JAXB that itself uses JUL) which in turn can be caught  * by the same handler leading to infinite loop.  *<p>  * Other approach than using thread local storage would be scanning of stack trace of current thread to see if  * root of call comes from same package as package of handler - it's less effective so TLS is using here.  */
end_comment

begin_class
specifier|final
class|class
name|LoggingThread
block|{
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
name|threadLocal
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|LoggingThread
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|markSilent
parameter_list|(
name|boolean
name|silent
parameter_list|)
block|{
if|if
condition|(
name|silent
condition|)
block|{
name|threadLocal
operator|.
name|set
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|threadLocal
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isSilent
parameter_list|()
block|{
name|Boolean
name|b
init|=
name|threadLocal
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

