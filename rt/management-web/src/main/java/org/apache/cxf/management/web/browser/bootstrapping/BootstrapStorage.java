begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|browser
operator|.
name|bootstrapping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|JarURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Variant
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|Validate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|provider
operator|.
name|json
operator|.
name|JSONProvider
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/browser"
argument_list|)
specifier|public
class|class
name|BootstrapStorage
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|BootstrapStorage
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SettingsStorage
name|storage
decl_stmt|;
specifier|public
name|BootstrapStorage
parameter_list|(
specifier|final
name|SettingsStorage
name|storage
parameter_list|)
block|{
name|Validate
operator|.
name|notNull
argument_list|(
name|storage
argument_list|,
literal|"provider is null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|storage
operator|=
name|storage
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/settings"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"application/json"
argument_list|)
specifier|public
name|Settings
name|getSettings
parameter_list|()
block|{
comment|//TODO Remove username everywhere
name|String
name|username
init|=
literal|"admin"
decl_stmt|;
name|Validate
operator|.
name|notNull
argument_list|(
name|username
argument_list|,
literal|"username is null"
argument_list|)
expr_stmt|;
name|Validate
operator|.
name|notEmpty
argument_list|(
name|username
argument_list|,
literal|"username is empty"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|fine
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Retrieve settings, user='%s'"
argument_list|,
name|username
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|storage
operator|.
name|getSettings
argument_list|(
name|username
argument_list|)
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"/settings"
argument_list|)
annotation|@
name|Consumes
argument_list|(
literal|"application/json"
argument_list|)
specifier|public
name|Response
name|setSettings
parameter_list|(
specifier|final
name|Settings
name|settings
parameter_list|)
block|{
comment|//TODO Remove username everywhere
name|String
name|username
init|=
literal|"admin"
decl_stmt|;
name|Validate
operator|.
name|notNull
argument_list|(
name|username
argument_list|,
literal|"username is null"
argument_list|)
expr_stmt|;
name|Validate
operator|.
name|notEmpty
argument_list|(
name|username
argument_list|,
literal|"username is empty"
argument_list|)
expr_stmt|;
name|Validate
operator|.
name|notNull
argument_list|(
name|settings
argument_list|,
literal|"settings is null"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|fine
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Save settings, user='%s'; settings='%s'"
argument_list|,
name|username
argument_list|,
name|settings
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|setSettings
argument_list|(
name|username
argument_list|,
name|settings
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"{resource:.*}"
argument_list|)
specifier|public
name|Response
name|getResource
parameter_list|(
annotation|@
name|Context
specifier|final
name|MessageContext
name|mc
parameter_list|,
annotation|@
name|PathParam
argument_list|(
literal|"resource"
argument_list|)
specifier|final
name|String
name|resource
parameter_list|)
block|{
if|if
condition|(
name|isLastModifiedRequest
argument_list|(
name|mc
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|notModified
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
try|try
block|{
name|URL
name|url
decl_stmt|;
name|URL
name|jar
init|=
name|getClass
argument_list|()
operator|.
name|getProtectionDomain
argument_list|()
operator|.
name|getCodeSource
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"jar:%s!/static-content/logbrowser/%s"
argument_list|,
name|jar
argument_list|,
name|resource
argument_list|)
argument_list|)
expr_stmt|;
name|JarURLConnection
name|connection
init|=
operator|(
name|JarURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|connection
operator|.
name|getContentLength
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|connection
operator|.
name|getJarEntry
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|connection
operator|.
name|getJarEntry
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
comment|// correct
name|MediaType
name|mime
init|=
name|getMimeType
argument_list|(
name|mc
argument_list|,
name|resource
argument_list|)
decl_stmt|;
name|StaticFile
name|staticFile
init|=
operator|new
name|StaticFile
argument_list|(
name|url
argument_list|,
name|acceptsGzip
argument_list|(
name|mc
argument_list|)
argument_list|,
name|mime
argument_list|)
decl_stmt|;
name|Response
operator|.
name|ResponseBuilder
name|builder
init|=
name|Response
operator|.
name|ok
argument_list|(
name|staticFile
argument_list|)
decl_stmt|;
name|builder
operator|.
name|variant
argument_list|(
operator|new
name|Variant
argument_list|(
name|mime
argument_list|,
operator|(
name|Locale
operator|)
literal|null
argument_list|,
name|staticFile
operator|.
name|isGzipEnabled
argument_list|()
condition|?
literal|"gzip"
else|:
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Error occur while retrieve static file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|serverError
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|private
name|boolean
name|isLastModifiedRequest
parameter_list|(
specifier|final
name|MessageContext
name|mc
parameter_list|)
block|{
return|return
name|mc
operator|.
name|getHttpServletRequest
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"Last-Modified"
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|private
name|MediaType
name|getMimeType
parameter_list|(
specifier|final
name|MessageContext
name|mc
parameter_list|,
specifier|final
name|String
name|resource
parameter_list|)
block|{
return|return
name|MediaType
operator|.
name|valueOf
argument_list|(
name|mc
operator|.
name|getServletContext
argument_list|()
operator|.
name|getMimeType
argument_list|(
name|resource
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|acceptsGzip
parameter_list|(
specifier|final
name|MessageContext
name|mc
parameter_list|)
block|{
name|String
name|ae
init|=
name|mc
operator|.
name|getHttpServletRequest
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"Accept-Encoding"
argument_list|)
decl_stmt|;
return|return
name|ae
operator|!=
literal|null
operator|&&
name|ae
operator|.
name|contains
argument_list|(
literal|"gzip"
argument_list|)
return|;
block|}
specifier|private
specifier|final
class|class
name|StaticFile
block|{
specifier|private
name|URL
name|url
decl_stmt|;
specifier|private
name|boolean
name|isGzipEnabled
decl_stmt|;
specifier|private
name|StaticFile
parameter_list|(
name|URL
name|url
parameter_list|,
name|boolean
name|acceptsGzip
parameter_list|,
name|MediaType
name|mime
parameter_list|)
block|{
assert|assert
name|url
operator|!=
literal|null
assert|;
assert|assert
name|mime
operator|!=
literal|null
assert|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|isGzipEnabled
operator|=
name|acceptsGzip
operator|&&
literal|"text"
operator|.
name|equals
argument_list|(
name|mime
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|URL
name|getUrl
parameter_list|()
block|{
return|return
name|this
operator|.
name|url
return|;
block|}
specifier|public
name|boolean
name|isGzipEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|isGzipEnabled
return|;
block|}
block|}
annotation|@
name|Provider
specifier|public
specifier|static
class|class
name|StaticFileProvider
implements|implements
name|MessageBodyWriter
argument_list|<
name|StaticFile
argument_list|>
block|{
specifier|public
name|boolean
name|isWriteable
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
specifier|final
name|Type
name|genericType
parameter_list|,
specifier|final
name|Annotation
index|[]
name|annotations
parameter_list|,
specifier|final
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
name|StaticFile
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|long
name|getSize
parameter_list|(
specifier|final
name|StaticFile
name|staticFile
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
specifier|final
name|Type
name|genericType
parameter_list|,
specifier|final
name|Annotation
index|[]
name|annotations
parameter_list|,
specifier|final
name|MediaType
name|mediaType
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
specifier|final
name|StaticFile
name|staticFile
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|Type
name|genericType
parameter_list|,
specifier|final
name|Annotation
index|[]
name|annotations
parameter_list|,
specifier|final
name|MediaType
name|type
parameter_list|,
specifier|final
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
specifier|final
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|staticFile
operator|.
name|isGzipEnabled
argument_list|()
condition|)
block|{
name|GZIPOutputStream
name|gzip
init|=
operator|new
name|GZIPOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyAndCloseInput
argument_list|(
name|staticFile
operator|.
name|getUrl
argument_list|()
operator|.
name|openStream
argument_list|()
argument_list|,
name|gzip
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|gzip
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|IOUtils
operator|.
name|copyAndCloseInput
argument_list|(
name|staticFile
operator|.
name|getUrl
argument_list|()
operator|.
name|openStream
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Provider
specifier|public
specifier|static
class|class
name|SettingsProvider
extends|extends
name|JSONProvider
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|LOGGING_NAMESPACE
init|=
literal|"http://cxf.apache.org/log"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SUBSCRIPTIONS_ARRAY
init|=
literal|"subscriptions"
decl_stmt|;
specifier|public
name|SettingsProvider
parameter_list|()
block|{
name|setIgnoreNamespaces
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Solved common JSON's problem with parsing array, which has only one element
name|setSerializeAsArray
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setArrayKeys
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SUBSCRIPTIONS_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
comment|// Removes namespace from output
comment|/*             setOutTransformElements(new HashMap<String, String>() {                 private static final long serialVersionUID = -1341932955817405356L;                  {                     put("{" + LOGGING_NAMESPACE + "}*", "*");                 }             }); */
name|setOutTransformElements
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"{"
operator|+
name|LOGGING_NAMESPACE
operator|+
literal|"}*"
argument_list|,
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Adds namespace to input
comment|/*             setInTransformElements(new HashMap<String, String>() {                 private static final long serialVersionUID = -1509522821399368946L;                  {                     put("*", "{" + LOGGING_NAMESPACE + "}*");                 }             }); */
name|setInTransformElements
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"*"
argument_list|,
literal|"{"
operator|+
name|LOGGING_NAMESPACE
operator|+
literal|"}*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

