begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|browser
operator|.
name|client
operator|.
name|service
operator|.
name|browser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|xml
operator|.
name|client
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|xml
operator|.
name|client
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|xml
operator|.
name|client
operator|.
name|NodeList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|xml
operator|.
name|client
operator|.
name|Node
operator|.
name|ELEMENT_NODE
import|;
end_import

begin_class
specifier|public
class|class
name|Feed
block|{
specifier|public
specifier|static
specifier|final
name|Feed
name|EMPTY
init|=
operator|new
name|Feed
argument_list|()
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|Links
name|links
decl_stmt|;
specifier|private
name|Feed
parameter_list|()
block|{
name|entries
operator|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|()
expr_stmt|;
name|links
operator|=
name|Links
operator|.
name|EMPTY
expr_stmt|;
block|}
specifier|public
name|Feed
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Document
name|document
parameter_list|)
block|{
name|entries
operator|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|>
argument_list|()
expr_stmt|;
operator|new
name|XmlParser
argument_list|()
operator|.
name|parseEntries
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|links
operator|=
operator|new
name|Links
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|public
name|List
argument_list|<
name|Entry
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
name|entries
return|;
block|}
annotation|@
name|Nonnull
specifier|public
name|Links
name|getLinks
parameter_list|()
block|{
return|return
name|links
return|;
block|}
specifier|private
specifier|final
class|class
name|XmlParser
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ENTRY_TAG
init|=
literal|"entry"
decl_stmt|;
specifier|private
name|XmlParser
parameter_list|()
block|{         }
specifier|private
name|void
name|parseEntries
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Document
name|document
parameter_list|)
block|{
name|NodeList
name|entryNodes
init|=
name|document
operator|.
name|getElementsByTagName
argument_list|(
name|ENTRY_TAG
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryNodes
operator|!=
literal|null
condition|)
block|{
name|Node
name|entryNode
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entryNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|entryNode
operator|=
name|entryNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
assert|assert
name|entryNode
operator|!=
literal|null
assert|;
if|if
condition|(
name|entryNode
operator|.
name|getNodeType
argument_list|()
operator|==
name|ELEMENT_NODE
condition|)
block|{
name|entries
operator|.
name|add
argument_list|(
operator|new
name|Entry
argument_list|(
name|entryNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

