begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|search
operator|.
name|SearchCondition
import|;
end_import

begin_comment
comment|/**  * Facilitates reading the log entries from the existing log files  */
end_comment

begin_class
specifier|public
class|class
name|ReadOnlyFileStorage
implements|implements
name|ReadableLogStorage
block|{
specifier|public
specifier|static
specifier|final
name|String
name|LEVEL_PROPERTY
init|=
literal|"level"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATE_PROPERTY
init|=
literal|"date"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MESSAGE_PROPERTY
init|=
literal|"message"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CATEGORY_PROPERTY
init|=
literal|"category"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|THREAD_PROPERTY
init|=
literal|"thread"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DATE_ONLY_FORMAT
init|=
literal|"yyyy_MM_dd"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LINE_SEP
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
specifier|private
name|String
name|columnSep
decl_stmt|;
specifier|private
name|int
name|numberOfColumns
decl_stmt|;
specifier|private
name|boolean
name|startsFromSeparator
decl_stmt|;
specifier|private
name|boolean
name|endsWithSeparator
decl_stmt|;
specifier|private
name|SimpleDateFormat
name|recordDateFormat
decl_stmt|;
specifier|private
name|boolean
name|useFileModifiedDate
decl_stmt|;
specifier|private
name|Pattern
name|fileNameDatePattern
decl_stmt|;
specifier|private
name|String
name|fileNameDateFormat
decl_stmt|;
specifier|private
name|File
name|logDirectory
decl_stmt|;
specifier|private
name|Comparator
argument_list|<
name|String
argument_list|>
name|fileNameComparator
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|columnsMap
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FileInfo
argument_list|>
name|logFiles
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|LinkedList
argument_list|<
name|FileInfo
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|levelsMap
decl_stmt|;
specifier|private
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|PageInfo
argument_list|>
name|pagesMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|PageInfo
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|List
argument_list|<
name|LogRecord
argument_list|>
name|list
parameter_list|,
name|SearchCondition
argument_list|<
name|LogRecord
argument_list|>
name|condition
parameter_list|,
name|int
name|pageNumber
parameter_list|,
name|int
name|pageSize
parameter_list|)
block|{
name|FileInfo
name|logFileInfo
init|=
name|getLogFileInfo
argument_list|(
name|pageNumber
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|logFileInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|LogRecord
name|record
init|=
name|readRecord
argument_list|(
name|logFileInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|==
literal|null
condition|)
block|{
name|logFileInfo
operator|=
name|getNextLogFileInfo
argument_list|(
name|logFileInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|logFileInfo
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
else|else
block|{
return|return;
block|}
block|}
if|if
condition|(
name|condition
operator|==
literal|null
operator|||
name|condition
operator|.
name|isMet
argument_list|(
name|record
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|count
operator|==
name|pageSize
condition|)
block|{
break|break;
block|}
block|}
block|}
name|savePagePosition
argument_list|(
name|pageNumber
argument_list|,
name|logFileInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FileInfo
name|getNextLogFileInfo
parameter_list|(
name|FileInfo
name|logFileInfo
parameter_list|,
name|boolean
name|firstTry
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|FileInfo
argument_list|>
name|it
init|=
name|logFiles
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|FileInfo
name|fileInfo
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileInfo
operator|==
name|logFileInfo
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|it
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|firstTry
operator|&&
name|logDirectory
operator|!=
literal|null
operator|&&
name|scanLogDirectory
argument_list|()
condition|)
block|{
return|return
name|getNextLogFileInfo
argument_list|(
name|logFileInfo
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|FileInfo
name|getLogFileInfo
parameter_list|(
name|int
name|pageNumber
parameter_list|,
name|boolean
name|firstTry
parameter_list|)
block|{
name|PageInfo
name|pageInfo
init|=
name|pagesMap
operator|.
name|get
argument_list|(
name|pageNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|pageInfo
operator|!=
literal|null
condition|)
block|{
name|FileInfo
name|fileInfo
init|=
name|pageInfo
operator|.
name|getFileInfo
argument_list|()
decl_stmt|;
try|try
block|{
name|fileInfo
operator|.
name|getFile
argument_list|()
operator|.
name|seek
argument_list|(
name|pageInfo
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Problem setting a page position in "
operator|+
name|fileInfo
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|pageInfo
operator|.
name|getFileInfo
argument_list|()
return|;
block|}
if|if
condition|(
name|pageNumber
operator|==
literal|1
operator|&&
name|logDirectory
operator|!=
literal|null
operator|&&
name|firstTry
operator|&&
name|logFiles
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|scanLogDirectory
argument_list|()
condition|)
block|{
name|FileInfo
name|fileInfo
init|=
name|logFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|savePagePosition
argument_list|(
literal|0
argument_list|,
name|fileInfo
argument_list|)
expr_stmt|;
return|return
name|fileInfo
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|savePagePosition
parameter_list|(
name|int
name|pageNumber
parameter_list|,
name|FileInfo
name|fileInfo
parameter_list|)
block|{
try|try
block|{
name|long
name|pos
init|=
name|fileInfo
operator|.
name|getFile
argument_list|()
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|pagesMap
operator|.
name|put
argument_list|(
name|pageNumber
operator|+
literal|1
argument_list|,
operator|new
name|PageInfo
argument_list|(
name|fileInfo
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
specifier|protected
name|LogRecord
name|readRecord
parameter_list|(
name|FileInfo
name|logFileInfo
parameter_list|)
block|{
try|try
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|(
name|numberOfColumns
argument_list|)
decl_stmt|;
name|readTheLine
argument_list|(
name|logFileInfo
operator|.
name|getFile
argument_list|()
argument_list|,
name|map
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|createRecord
argument_list|(
name|map
argument_list|,
name|logFileInfo
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|LogRecord
name|createRecord
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|FileInfo
name|logFileInfo
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LogRecord
name|record
init|=
operator|new
name|LogRecord
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|propertyName
init|=
name|columnsMap
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LEVEL_PROPERTY
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|setLogRecordLevel
argument_list|(
name|record
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DATE_PROPERTY
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|setLogRecordDate
argument_list|(
name|record
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|logFileInfo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MESSAGE_PROPERTY
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|record
operator|.
name|setMessage
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CATEGORY_PROPERTY
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|record
operator|.
name|setLoggerName
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|THREAD_PROPERTY
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
name|record
operator|.
name|setThreadName
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|record
return|;
block|}
specifier|protected
name|void
name|setLogRecordLevel
parameter_list|(
name|LogRecord
name|record
parameter_list|,
name|String
name|logLevel
parameter_list|)
block|{
if|if
condition|(
name|levelsMap
operator|!=
literal|null
condition|)
block|{
name|logLevel
operator|=
name|levelsMap
operator|.
name|get
argument_list|(
name|logLevel
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logLevel
operator|!=
literal|null
condition|)
block|{
name|record
operator|.
name|setLevel
argument_list|(
name|LogLevel
operator|.
name|valueOf
argument_list|(
name|logLevel
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setLogRecordDate
parameter_list|(
name|LogRecord
name|record
parameter_list|,
name|String
name|logDate
parameter_list|,
name|FileInfo
name|logFileInfo
parameter_list|)
block|{
if|if
condition|(
name|recordDateFormat
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|String
name|fileModifiedDate
init|=
name|logFileInfo
operator|.
name|getFileModified
argument_list|()
decl_stmt|;
name|logDate
operator|=
name|fileModifiedDate
operator|!=
literal|null
condition|?
name|fileModifiedDate
operator|+
literal|" "
operator|+
name|logDate
else|:
name|logDate
expr_stmt|;
name|Date
name|date
init|=
name|recordDateFormat
operator|.
name|parse
argument_list|(
name|logDate
argument_list|)
decl_stmt|;
name|record
operator|.
name|setEventTimestamp
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
specifier|protected
name|void
name|readTheLine
parameter_list|(
name|RandomAccessFile
name|logFile
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|int
name|columnIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|nextPos
init|=
name|logFile
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextPos
operator|>=
name|logFile
operator|.
name|length
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|line
init|=
name|logFile
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|int
name|lastIndex
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|columnIndex
operator|==
literal|1
operator|&&
name|startsFromSeparator
condition|)
block|{
name|lastIndex
operator|=
literal|1
expr_stmt|;
block|}
name|Set
argument_list|<
name|Integer
argument_list|>
name|requestedColumns
init|=
name|columnsMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|int
name|startingColumn
init|=
name|columnIndex
decl_stmt|;
while|while
condition|(
name|lastIndex
operator|<
name|line
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|sepIndex
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|columnSep
argument_list|,
name|lastIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|sepIndex
operator|!=
operator|-
literal|1
operator|&&
name|startingColumn
operator|==
name|numberOfColumns
operator|&&
operator|!
name|endsWithSeparator
condition|)
block|{
name|logFile
operator|.
name|seek
argument_list|(
name|nextPos
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|actualIndex
init|=
name|sepIndex
operator|==
operator|-
literal|1
condition|?
name|line
operator|.
name|length
argument_list|()
else|:
name|sepIndex
decl_stmt|;
if|if
condition|(
name|requestedColumns
operator|.
name|contains
argument_list|(
name|columnIndex
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|line
operator|.
name|substring
argument_list|(
name|lastIndex
argument_list|,
name|actualIndex
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|existingValue
init|=
name|map
operator|.
name|get
argument_list|(
name|columnIndex
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|columnIndex
argument_list|,
name|existingValue
operator|==
literal|null
condition|?
name|value
else|:
name|existingValue
operator|+
name|LINE_SEP
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
name|lastIndex
operator|=
name|actualIndex
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|sepIndex
operator|!=
operator|-
literal|1
operator|&&
name|columnIndex
operator|!=
name|numberOfColumns
condition|)
block|{
name|columnIndex
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|columnIndex
operator|==
name|numberOfColumns
condition|)
block|{
name|readTheLine
argument_list|(
name|logFile
argument_list|,
name|map
argument_list|,
name|columnIndex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setColumnSep
parameter_list|(
name|String
name|columnSep
parameter_list|)
block|{
name|this
operator|.
name|columnSep
operator|=
name|columnSep
expr_stmt|;
block|}
specifier|public
name|void
name|setNumberOfColums
parameter_list|(
name|String
name|number
parameter_list|)
block|{
name|this
operator|.
name|numberOfColumns
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setColumnsMap
parameter_list|(
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|columnsMap
parameter_list|)
block|{
name|this
operator|.
name|columnsMap
operator|=
name|columnsMap
expr_stmt|;
block|}
specifier|public
name|void
name|setLogLocations
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|locations
parameter_list|)
block|{
name|logFiles
operator|=
operator|new
name|LinkedList
argument_list|<
name|FileInfo
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locations
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|realPath
init|=
name|getRealLocation
argument_list|(
name|locations
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|processNewLogFile
argument_list|(
operator|new
name|File
argument_list|(
name|realPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The log file "
operator|+
name|realPath
operator|+
literal|" can not be opened: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|processNewLogFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|RandomAccessFile
name|logFile
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
name|String
name|fileModifiedDate
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useFileModifiedDate
condition|)
block|{
name|String
name|dateFormat
init|=
name|fileNameDateFormat
operator|==
literal|null
condition|?
name|DATE_ONLY_FORMAT
else|:
name|fileNameDateFormat
decl_stmt|;
if|if
condition|(
name|fileNameDatePattern
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|m
init|=
name|fileNameDatePattern
operator|.
name|matcher
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|fileModifiedDate
operator|=
name|m
operator|.
name|group
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fileModifiedDate
operator|==
literal|null
condition|)
block|{
name|Date
name|fileDate
init|=
operator|new
name|Date
argument_list|(
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
decl_stmt|;
name|fileModifiedDate
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
name|dateFormat
argument_list|)
operator|.
name|format
argument_list|(
name|fileDate
argument_list|)
expr_stmt|;
block|}
block|}
name|FileInfo
name|fileInfo
init|=
operator|new
name|FileInfo
argument_list|(
name|logFile
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|fileModifiedDate
argument_list|)
decl_stmt|;
name|skipIgnorableRecords
argument_list|(
name|fileInfo
argument_list|,
name|logFiles
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|logFiles
operator|.
name|add
argument_list|(
name|fileInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getRealLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|int
name|indexOpen
init|=
name|location
operator|.
name|indexOf
argument_list|(
literal|"{"
argument_list|)
decl_stmt|;
name|int
name|indexClose
init|=
name|location
operator|.
name|indexOf
argument_list|(
literal|"}"
argument_list|)
decl_stmt|;
name|String
name|realPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|indexOpen
operator|==
literal|0
operator|&&
name|indexClose
operator|!=
operator|-
literal|1
condition|)
block|{
name|realPath
operator|=
name|location
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|indexClose
argument_list|)
operator|+
name|location
operator|.
name|substring
argument_list|(
name|indexClose
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|realPath
operator|=
name|location
expr_stmt|;
block|}
return|return
name|realPath
return|;
block|}
specifier|public
name|void
name|setLogLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|String
name|realPath
init|=
name|getRealLocation
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|realPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|logDirectory
operator|=
name|file
expr_stmt|;
block|}
else|else
block|{
name|setLogLocations
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|realPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|skipIgnorableRecords
parameter_list|(
name|FileInfo
name|fInfo
parameter_list|,
name|boolean
name|first
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|nextPos
init|=
name|fInfo
operator|.
name|getFile
argument_list|()
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|String
name|line
init|=
name|fInfo
operator|.
name|getFile
argument_list|()
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
name|columnSep
argument_list|)
condition|)
block|{
name|fInfo
operator|.
name|getFile
argument_list|()
operator|.
name|seek
argument_list|(
name|nextPos
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|pagesMap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
operator|new
name|PageInfo
argument_list|(
name|fInfo
argument_list|,
name|nextPos
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|skipIgnorableRecords
argument_list|(
name|fInfo
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setRecordDateFormat
parameter_list|(
name|String
name|format
parameter_list|)
block|{
name|recordDateFormat
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLevelsMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|levelsMap
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|void
name|setFileNameComparator
parameter_list|(
name|Comparator
argument_list|<
name|String
argument_list|>
name|comp
parameter_list|)
block|{
name|this
operator|.
name|fileNameComparator
operator|=
name|comp
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|FileInfo
name|fileInfo
range|:
name|logFiles
control|)
block|{
try|try
block|{
name|fileInfo
operator|.
name|getFile
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
specifier|public
name|void
name|setUseFileModifiedDate
parameter_list|(
name|boolean
name|useFileModifiedDate
parameter_list|)
block|{
name|this
operator|.
name|useFileModifiedDate
operator|=
name|useFileModifiedDate
expr_stmt|;
block|}
specifier|private
name|boolean
name|scanLogDirectory
parameter_list|()
block|{
name|int
name|oldSize
init|=
name|logFiles
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|logDirectory
operator|.
name|listFiles
argument_list|()
control|)
block|{
comment|// just in case
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// continue
block|}
name|boolean
name|isNew
init|=
literal|true
decl_stmt|;
for|for
control|(
name|FileInfo
name|fInfo
range|:
name|logFiles
control|)
block|{
if|if
condition|(
name|fInfo
operator|.
name|getFileName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|isNew
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|isNew
condition|)
block|{
try|try
block|{
name|processNewLogFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Log file "
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|" can not be opened"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|logFiles
operator|.
name|size
argument_list|()
operator|>
name|oldSize
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|logFiles
argument_list|,
operator|new
name|FileInfoComparator
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|setFileNameDatePattern
parameter_list|(
name|String
name|fileNameDatePattern
parameter_list|)
block|{
name|this
operator|.
name|fileNameDatePattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|fileNameDatePattern
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFileNameDateFormat
parameter_list|(
name|String
name|fileNameDateFormat
parameter_list|)
block|{
name|this
operator|.
name|fileNameDateFormat
operator|=
name|fileNameDateFormat
expr_stmt|;
block|}
specifier|protected
specifier|static
class|class
name|PageInfo
block|{
specifier|private
name|FileInfo
name|fileInfo
decl_stmt|;
specifier|private
name|long
name|pos
decl_stmt|;
specifier|public
name|PageInfo
parameter_list|(
name|FileInfo
name|fileInfo
parameter_list|,
name|long
name|pos
parameter_list|)
block|{
name|this
operator|.
name|fileInfo
operator|=
name|fileInfo
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
block|}
specifier|public
name|FileInfo
name|getFileInfo
parameter_list|()
block|{
return|return
name|fileInfo
return|;
block|}
specifier|public
name|long
name|getPosition
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|FileInfo
block|{
specifier|private
name|RandomAccessFile
name|file
decl_stmt|;
specifier|private
name|String
name|fileModified
decl_stmt|;
specifier|private
name|String
name|fileName
decl_stmt|;
specifier|public
name|FileInfo
parameter_list|(
name|RandomAccessFile
name|file
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|fileModified
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|fileModified
operator|=
name|fileModified
expr_stmt|;
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
specifier|public
name|RandomAccessFile
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
specifier|public
name|String
name|getFileModified
parameter_list|()
block|{
return|return
name|fileModified
return|;
block|}
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|fileName
return|;
block|}
block|}
specifier|protected
class|class
name|FileInfoComparator
implements|implements
name|Comparator
argument_list|<
name|FileInfo
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FileInfo
name|info1
parameter_list|,
name|FileInfo
name|info2
parameter_list|)
block|{
name|String
name|name1
init|=
name|info1
operator|.
name|getFileName
argument_list|()
decl_stmt|;
name|String
name|name2
init|=
name|info2
operator|.
name|getFileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileNameComparator
operator|!=
literal|null
condition|)
block|{
return|return
name|fileNameComparator
operator|.
name|compare
argument_list|(
name|name1
argument_list|,
name|name2
argument_list|)
return|;
block|}
name|Integer
name|logIndex1
init|=
name|getLogIndex
argument_list|(
name|name1
argument_list|)
decl_stmt|;
name|Integer
name|logIndex2
init|=
name|getLogIndex
argument_list|(
name|name2
argument_list|)
decl_stmt|;
return|return
name|logIndex1
operator|.
name|compareTo
argument_list|(
name|logIndex2
argument_list|)
operator|*
operator|-
literal|1
return|;
block|}
specifier|private
name|int
name|getLogIndex
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|index
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

