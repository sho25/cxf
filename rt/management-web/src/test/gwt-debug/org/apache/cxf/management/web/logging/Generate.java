begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|web
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
class|class
name|Generate
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|Generate
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LEVEL
init|=
literal|"level"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MESSAGE
init|=
literal|"message"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COPIES
init|=
literal|"copies"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXCEPTION_MESSAGE
init|=
literal|"exceptionMessage"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FORM_URL
init|=
literal|"./generate.html"
decl_stmt|;
specifier|private
enum|enum
name|Levels
block|{
name|DEBUG
block|,
name|INFO
block|,
name|WARNING
block|,
name|ERROR
block|;     }
specifier|public
name|void
name|doGet
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
specifier|final
name|String
name|level
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|LEVEL
argument_list|)
operator|!=
literal|null
condition|?
name|request
operator|.
name|getParameter
argument_list|(
name|LEVEL
argument_list|)
operator|.
name|toLowerCase
argument_list|()
else|:
literal|null
decl_stmt|;
specifier|final
name|String
name|message
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|MESSAGE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|exceptionMessage
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|EXCEPTION_MESSAGE
argument_list|)
decl_stmt|;
name|int
name|copies
decl_stmt|;
try|try
block|{
name|copies
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
name|COPIES
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|copies
operator|<
literal|0
condition|)
block|{
name|copies
operator|=
literal|1
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|copies
operator|=
literal|1
expr_stmt|;
block|}
assert|assert
name|copies
operator|>=
literal|1
assert|;
assert|assert
name|level
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|level
argument_list|)
assert|;
if|if
condition|(
name|name
argument_list|(
name|Levels
operator|.
name|DEBUG
argument_list|)
operator|.
name|equals
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|message
argument_list|,
name|exceptionMessage
argument_list|,
name|copies
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
argument_list|(
name|Levels
operator|.
name|INFO
argument_list|)
operator|.
name|equals
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
name|message
argument_list|,
name|exceptionMessage
argument_list|,
name|copies
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
argument_list|(
name|Levels
operator|.
name|WARNING
argument_list|)
operator|.
name|equals
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|message
argument_list|,
name|exceptionMessage
argument_list|,
name|copies
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
argument_list|(
name|Levels
operator|.
name|ERROR
argument_list|)
operator|.
name|equals
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|message
argument_list|,
name|exceptionMessage
argument_list|,
name|copies
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_MOVED_TEMPORARILY
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Location"
argument_list|,
name|FORM_URL
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|log
parameter_list|(
specifier|final
name|Level
name|level
parameter_list|,
specifier|final
name|String
name|message
parameter_list|,
specifier|final
name|String
name|exceptionMessage
parameter_list|,
specifier|final
name|int
name|copies
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|message
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copies
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|exceptionMessage
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|exceptionMessage
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|log
argument_list|(
name|level
argument_list|,
name|message
argument_list|,
operator|new
name|Exception
argument_list|(
name|exceptionMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|log
argument_list|(
name|level
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|name
parameter_list|(
specifier|final
name|Levels
name|level
parameter_list|)
block|{
return|return
name|level
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
block|}
end_class

end_unit

