begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|local
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|AbstractWrappedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|AbstractConduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|SynchronousExecutor
import|;
end_import

begin_class
specifier|public
class|class
name|LocalConduit
extends|extends
name|AbstractConduit
block|{
specifier|private
specifier|final
class|class
name|LocalConduitOutputStream
extends|extends
name|AbstractWrappedOutputStream
block|{
specifier|private
specifier|final
name|LocalConduit
name|conduit
decl_stmt|;
specifier|private
specifier|final
name|Exchange
name|exchange
decl_stmt|;
specifier|private
specifier|final
name|Message
name|message
decl_stmt|;
specifier|private
name|LocalConduitOutputStream
parameter_list|(
name|LocalConduit
name|conduit
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|this
operator|.
name|conduit
operator|=
name|conduit
expr_stmt|;
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|written
condition|)
block|{
name|dispatchToService
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|onFirstWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|dispatchToService
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|dispatchToService
parameter_list|(
name|boolean
name|empty
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MessageImpl
name|inMsg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|transportFactory
operator|.
name|copy
argument_list|(
name|message
argument_list|,
name|inMsg
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|empty
condition|)
block|{
specifier|final
name|PipedInputStream
name|stream
init|=
operator|new
name|PipedInputStream
argument_list|()
decl_stmt|;
name|wrappedStream
operator|=
operator|new
name|PipedOutputStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|inMsg
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
name|inMsg
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|inMsg
operator|.
name|put
argument_list|(
name|IN_CONDUIT
argument_list|,
name|conduit
argument_list|)
expr_stmt|;
specifier|final
name|Runnable
name|receiver
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ExchangeImpl
name|ex
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|Bus
operator|.
name|class
argument_list|,
name|destination
operator|.
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|.
name|setInMessage
argument_list|(
name|inMsg
argument_list|)
expr_stmt|;
name|inMsg
operator|.
name|setExchange
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|IN_EXCHANGE
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
try|try
block|{
name|destination
operator|.
name|getMessageObserver
argument_list|()
operator|.
name|onMessage
argument_list|(
name|inMsg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Message
name|m
init|=
name|inMsg
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutFaultMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|m
operator|=
name|inMsg
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|m
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|m
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
block|}
block|}
decl_stmt|;
name|Executor
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|!=
literal|null
condition|?
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Executor
operator|.
name|class
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|ex
operator|==
literal|null
operator|||
name|SynchronousExecutor
operator|.
name|isA
argument_list|(
name|ex
argument_list|)
condition|)
block|{
name|ex
operator|=
name|transportFactory
operator|.
name|getExecutor
argument_list|(
name|destination
operator|.
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|ex
operator|.
name|execute
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|new
name|Thread
argument_list|(
name|receiver
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|ex
operator|.
name|execute
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|final
name|String
name|IN_CONDUIT
init|=
name|LocalConduit
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".inConduit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RESPONSE_CONDUIT
init|=
name|LocalConduit
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".inConduit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IN_EXCHANGE
init|=
name|LocalConduit
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".inExchange"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DIRECT_DISPATCH
init|=
name|LocalConduit
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".directDispatch"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MESSAGE_FILTER_PROPERTIES
init|=
name|LocalTransportFactory
operator|.
name|MESSAGE_FILTER_PROPERTIES
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|LocalConduit
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|LocalDestination
name|destination
decl_stmt|;
specifier|private
name|LocalTransportFactory
name|transportFactory
decl_stmt|;
specifier|public
name|LocalConduit
parameter_list|(
name|LocalTransportFactory
name|transportFactory
parameter_list|,
name|LocalDestination
name|destination
parameter_list|)
block|{
name|super
argument_list|(
name|destination
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|transportFactory
operator|=
name|transportFactory
expr_stmt|;
block|}
specifier|public
name|void
name|prepare
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|getContextualProperty
argument_list|(
name|DIRECT_DISPATCH
argument_list|)
argument_list|)
condition|)
block|{
name|dispatchViaPipe
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// prepare the stream here
name|CachedOutputStream
name|stream
init|=
operator|new
name|CachedOutputStream
argument_list|()
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
name|stream
argument_list|)
expr_stmt|;
comment|//save the original stream
name|message
operator|.
name|put
argument_list|(
name|CachedOutputStream
operator|.
name|class
argument_list|,
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|holdTempFile
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|getContextualProperty
argument_list|(
name|DIRECT_DISPATCH
argument_list|)
argument_list|)
operator|&&
operator|!
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|INBOUND_MESSAGE
argument_list|)
argument_list|)
condition|)
block|{
name|dispatchDirect
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|close
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|dispatchDirect
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|destination
operator|.
name|getMessageObserver
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Local destination does not have a MessageObserver on address "
operator|+
name|destination
operator|.
name|getAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
throw|;
block|}
name|MessageImpl
name|copy
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|copy
operator|.
name|put
argument_list|(
name|IN_CONDUIT
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|transportFactory
operator|.
name|copy
argument_list|(
name|message
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|MessageImpl
operator|.
name|copyContent
argument_list|(
name|message
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|message
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|CachedOutputStream
name|stream
init|=
name|message
operator|.
name|get
argument_list|(
name|CachedOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|copy
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|stream
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|removeContent
argument_list|(
name|CachedOutputStream
operator|.
name|class
argument_list|)
expr_stmt|;
name|stream
operator|.
name|releaseTempFileHold
argument_list|()
expr_stmt|;
comment|// Create a new incoming exchange and store the original exchange for the response
name|ExchangeImpl
name|ex
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setInMessage
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|IN_EXCHANGE
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|LocalConduit
operator|.
name|DIRECT_DISPATCH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ex
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|destination
operator|.
name|getMessageObserver
argument_list|()
operator|.
name|onMessage
argument_list|(
name|copy
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|dispatchViaPipe
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LocalConduit
name|conduit
init|=
name|this
decl_stmt|;
specifier|final
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
if|if
condition|(
name|destination
operator|.
name|getMessageObserver
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Local destination does not have a MessageObserver on address "
operator|+
name|destination
operator|.
name|getAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
throw|;
block|}
name|AbstractWrappedOutputStream
name|cout
init|=
operator|new
name|LocalConduitOutputStream
argument_list|(
name|conduit
argument_list|,
name|exchange
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
name|cout
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
block|}
end_class

end_unit

