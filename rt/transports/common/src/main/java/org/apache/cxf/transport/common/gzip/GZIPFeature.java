begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|common
operator|.
name|gzip
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|injection
operator|.
name|NoJSR250Annotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|AbstractFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * This class is used to control GZIP compression of messages.  * Attaching this feature to an endpoint will allow the endpoint to handle  * compressed requests, and will cause outgoing responses to be compressed if  * the client indicates (via the Accept-Encoding header) that it can handle  * them.  *<pre>  *<![CDATA[  *<jaxws:endpoint ...>  *<jaxws:features>  *<bean class="org.apache.cxf.transport.http.gzip.GZIPFeature"/>  *</jaxws:features>  *</jaxws:endpoint>  * ]]>  *</pre>  * Attaching this feature to a client will cause outgoing request messages to  * be compressed and incoming compressed responses to be uncompressed.  If you  * want the service to know that your client can accept compressed responses,  * you will also need to set the "AcceptEncoding" value in the relevant HTTP  * conduit client configuration.  *<pre>  *<![CDATA[  *<http-conf:conduit name="{http://apache.org/hello_world_soap_http}SoapPort.http-conduit">  *<http-conf:client AcceptEncoding="gzip" />  *</http-conf:conduit>  * ]]>  *</pre>  */
end_comment

begin_class
annotation|@
name|NoJSR250Annotations
specifier|public
class|class
name|GZIPFeature
extends|extends
name|AbstractFeature
block|{
specifier|private
specifier|static
specifier|final
name|GZIPInInterceptor
name|IN
init|=
operator|new
name|GZIPInInterceptor
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GZIPOutInterceptor
name|OUT
init|=
operator|new
name|GZIPOutInterceptor
argument_list|()
decl_stmt|;
comment|/**      * The compression threshold to pass to the outgoing interceptor.      */
name|int
name|threshold
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|initializeProvider
parameter_list|(
name|InterceptorProvider
name|provider
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|provider
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|IN
argument_list|)
expr_stmt|;
if|if
condition|(
name|threshold
operator|==
operator|-
literal|1
condition|)
block|{
name|provider
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|OUT
argument_list|)
expr_stmt|;
name|provider
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|OUT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|GZIPOutInterceptor
name|out
init|=
operator|new
name|GZIPOutInterceptor
argument_list|()
decl_stmt|;
name|out
operator|.
name|setThreshold
argument_list|(
name|threshold
argument_list|)
expr_stmt|;
name|remove
argument_list|(
name|provider
operator|.
name|getOutInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|remove
argument_list|(
name|provider
operator|.
name|getOutFaultInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|provider
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|remove
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|outInterceptors
parameter_list|)
block|{
name|int
name|x
init|=
name|outInterceptors
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|x
operator|>
literal|0
condition|)
block|{
operator|--
name|x
expr_stmt|;
if|if
condition|(
name|outInterceptors
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|instanceof
name|GZIPOutInterceptor
condition|)
block|{
name|outInterceptors
operator|.
name|remove
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setThreshold
parameter_list|(
name|int
name|threshold
parameter_list|)
block|{
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
block|}
specifier|public
name|int
name|getThreshold
parameter_list|()
block|{
return|return
name|threshold
return|;
block|}
block|}
end_class

end_unit

