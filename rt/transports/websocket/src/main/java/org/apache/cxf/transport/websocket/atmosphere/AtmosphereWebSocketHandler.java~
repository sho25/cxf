/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.cxf.transport.websocket.atmosphere;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.Principal;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.servlet.DispatcherType;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.cxf.common.logging.LogUtils;
import org.apache.cxf.transport.websocket.WebSocketDestinationService;
import org.apache.cxf.transport.websocket.WebSocketServletHolder;
import org.apache.cxf.transport.websocket.WebSocketVirtualServletRequest;
import org.apache.cxf.transport.websocket.WebSocketVirtualServletResponse;
import org.atmosphere.cpr.AtmosphereConfig;
import org.atmosphere.cpr.AtmosphereRequest;
import org.atmosphere.websocket.WebSocket;
import org.atmosphere.websocket.WebSocketProcessor.WebSocketException;
import org.atmosphere.websocket.WebSocketProtocol;

/**
 * 
 */
public class AtmosphereWebSocketHandler implements WebSocketProtocol {
    private static final Logger LOG = LogUtils.getL7dLogger(AtmosphereWebSocketHandler.class);

    protected AtmosphereWebSocketServletDestination destination;
    
    
    public AtmosphereWebSocketServletDestination getDestination() {
        return destination;
    }

    public void setDestination(AtmosphereWebSocketServletDestination destination) {
        this.destination = destination;
    }

    /** {@inheritDoc}*/
    @Override
    public void configure(AtmosphereConfig config) {
        // TODO Auto-generated method stub

    }

    /** {@inheritDoc}*/
    @Override
    public List<AtmosphereRequest> onMessage(WebSocket webSocket, String data) {
        LOG.info("onMessage(WebSocket, String)");
        return null;
    }

    /** {@inheritDoc}*/
    @Override
    public List<AtmosphereRequest> onMessage(WebSocket webSocket, byte[] data, int offset, int length) {
        LOG.info("onMessage(WebSocket, byte[], int, int)");
        
        try {
            WebSocketServletHolder webSocketHolder = new AtmosphereWebSocketServletHolder(webSocket);
            HttpServletRequest request = createServletRequest(webSocketHolder, data, offset, length);
            HttpServletResponse response = createServletResponse(webSocketHolder);
            if (destination != null) {
                ((WebSocketDestinationService)destination).invokeInternal(null, webSocket.resource().getRequest().getServletContext(),
                                                                          request, response);
            }
        } catch (Exception e) {
            LOG.log(Level.WARNING, "Failed to invoke service", e);
        }
        return null;
    }

    /** {@inheritDoc}*/
    @Override
    public void onOpen(WebSocket webSocket) {
        LOG.info("onOpen(WebSocket)");
    }

    /** {@inheritDoc}*/
    @Override
    public void onClose(WebSocket webSocket) {
        LOG.info("onClose(WebSocket)");
        
    }

    /** {@inheritDoc}*/
    @Override
    public void onError(WebSocket webSocket, WebSocketException t) {
        // TODO Auto-generated method stub
        LOG.info("onError(WebSocket, WebSocketException)");
    }

    protected WebSocketVirtualServletRequest createServletRequest(WebSocketServletHolder webSocketHolder, byte[] data, int offset, int length) 
        throws IOException {
        return new WebSocketVirtualServletRequest(null, webSocketHolder, new ByteArrayInputStream(data, offset, length));
    }
    
    protected WebSocketVirtualServletRequest createServletRequest(WebSocketServletHolder webSocketHolder, InputStream stream)
        throws IOException {
        return new WebSocketVirtualServletRequest(null, webSocketHolder, stream);
    }

    protected WebSocketVirtualServletResponse createServletResponse(WebSocketServletHolder webSocketHolder) throws IOException {
        return new WebSocketVirtualServletResponse(webSocketHolder);
    }
    
    static class AtmosphereWebSocketServletHolder implements WebSocketServletHolder {
        private WebSocket webSocket;
        
        public AtmosphereWebSocketServletHolder(WebSocket webSocket) {
            this.webSocket = webSocket;
        }
        
        @Override
        public String getAuthType() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public String getContextPath() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public String getLocalAddr() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public String getLocalName() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public int getLocalPort() {
            // TODO Auto-generated method stub
            return 0;
        }

        @Override
        public Locale getLocale() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public Enumeration<Locale> getLocales() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public String getProtocol() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public String getRemoteAddr() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public String getRemoteHost() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public int getRemotePort() {
            // TODO Auto-generated method stub
            return 0;
        }

        @Override
        public String getRequestURI() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public StringBuffer getRequestURL() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public DispatcherType getDispatcherType() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public boolean isSecure() {
            // TODO Auto-generated method stub
            return false;
        }

        @Override
        public String getPathInfo() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public String getPathTranslated() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public String getScheme() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public String getServerName() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public String getServletPath() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public int getServerPort() {
            // TODO Auto-generated method stub
            return 0;
        }

        @Override
        public Principal getUserPrincipal() {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public void write(byte[] data, int i, int length) throws IOException {
            // TODO Auto-generated method stub
            
        }

        @Override
        public ServletOutputStream getServletOutputStream(Map<String, String> headers) {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public OutputStream getOutputStream(Map<String, String> headers) {
            // TODO Auto-generated method stub
            return null;
        }
        
    }

}
