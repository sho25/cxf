begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|websocket
operator|.
name|atmosphere
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|DestinationRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|servlet
operator|.
name|ServletDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|websocket
operator|.
name|WebSocketDestinationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|atmosphere
operator|.
name|cpr
operator|.
name|ApplicationConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|atmosphere
operator|.
name|cpr
operator|.
name|AtmosphereFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|atmosphere
operator|.
name|cpr
operator|.
name|AtmosphereRequestImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|atmosphere
operator|.
name|cpr
operator|.
name|AtmosphereResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|atmosphere
operator|.
name|cpr
operator|.
name|AtmosphereResponseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|atmosphere
operator|.
name|handler
operator|.
name|AbstractReflectorAtmosphereHandler
import|;
end_import

begin_comment
comment|/**  * WebSocket Servlet Destination based on Atmosphere  */
end_comment

begin_class
specifier|public
class|class
name|AtmosphereWebSocketServletDestination
extends|extends
name|ServletDestination
implements|implements
name|WebSocketDestinationService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AtmosphereWebSocketServletDestination
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AtmosphereFramework
name|framework
decl_stmt|;
specifier|public
name|AtmosphereWebSocketServletDestination
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|DestinationRegistry
name|registry
parameter_list|,
name|EndpointInfo
name|ei
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|bus
argument_list|,
name|registry
argument_list|,
name|ei
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|framework
operator|=
name|create
argument_list|(
name|bus
argument_list|)
expr_stmt|;
block|}
specifier|private
name|AtmosphereFramework
name|create
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
specifier|final
name|AtmosphereFramework
name|instance
init|=
operator|new
name|AtmosphereFramework
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|instance
operator|.
name|setUseNativeImplementation
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|instance
operator|.
name|addInitParameter
argument_list|(
name|ApplicationConfig
operator|.
name|PROPERTY_NATIVE_COMETSUPPORT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|instance
operator|.
name|addInitParameter
argument_list|(
name|ApplicationConfig
operator|.
name|PROPERTY_SESSION_SUPPORT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|instance
operator|.
name|addInitParameter
argument_list|(
name|ApplicationConfig
operator|.
name|WEBSOCKET_SUPPORT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|instance
operator|.
name|addInitParameter
argument_list|(
name|ApplicationConfig
operator|.
name|WEBSOCKET_PROTOCOL_EXECUTION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// workaround for atmosphere's jsr356 initialization requiring servletConfig
name|instance
operator|.
name|addInitParameter
argument_list|(
name|ApplicationConfig
operator|.
name|WEBSOCKET_SUPPRESS_JSR356
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|AtmosphereUtils
operator|.
name|addInterceptors
argument_list|(
name|instance
argument_list|,
name|bus
argument_list|)
expr_stmt|;
name|instance
operator|.
name|addAtmosphereHandler
argument_list|(
literal|"/"
argument_list|,
operator|new
name|DestinationHandler
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|finalizeConfig
parameter_list|()
block|{
name|framework
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onServletConfigAvailable
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
comment|// Very likely there is JSR-356 implementation available, let us reconfigure the Atmosphere framework
comment|// to use it since ServletConfig instance is already available.
specifier|final
name|Object
name|container
init|=
name|config
operator|.
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"javax.websocket.server.ServerContainer"
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|framework
operator|.
name|initialized
argument_list|()
condition|)
block|{
name|framework
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|framework
operator|=
name|create
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|framework
operator|.
name|addInitParameter
argument_list|(
name|ApplicationConfig
operator|.
name|PROPERTY_NATIVE_COMETSUPPORT
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|framework
operator|.
name|addInitParameter
argument_list|(
name|ApplicationConfig
operator|.
name|WEBSOCKET_SUPPRESS_JSR356
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|framework
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|invoke
parameter_list|(
name|ServletConfig
name|config
parameter_list|,
name|ServletContext
name|context
parameter_list|,
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|AtmosphereUtils
operator|.
name|useAtmosphere
argument_list|(
name|req
argument_list|)
condition|)
block|{
try|try
block|{
name|framework
operator|.
name|doCometSupport
argument_list|(
name|AtmosphereRequestImpl
operator|.
name|wrap
argument_list|(
name|req
argument_list|)
argument_list|,
name|AtmosphereResponseImpl
operator|.
name|wrap
argument_list|(
name|resp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return;
block|}
name|super
operator|.
name|invoke
argument_list|(
name|config
argument_list|,
name|context
argument_list|,
name|req
argument_list|,
name|resp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|invokeInternal
parameter_list|(
name|ServletConfig
name|config
parameter_list|,
name|ServletContext
name|context
parameter_list|,
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|invoke
argument_list|(
name|config
argument_list|,
name|context
argument_list|,
name|req
argument_list|,
name|resp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setupMessage
parameter_list|(
name|Message
name|inMessage
parameter_list|,
name|ServletConfig
name|config
parameter_list|,
name|ServletContext
name|context
parameter_list|,
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|setupMessage
argument_list|(
name|inMessage
argument_list|,
name|config
argument_list|,
name|context
argument_list|,
name|req
argument_list|,
name|resp
argument_list|)
expr_stmt|;
comment|// There are some complications with detecting a full request URL in JSR-356 spec, so
comment|// every WS Container has different interpretation.
comment|//
comment|//   https://bz.apache.org/bugzilla/show_bug.cgi?id=56573
comment|//   https://java.net/jira/browse/WEBSOCKET_SPEC-228
comment|//
comment|// We have do manually inject the transport endpoint address, otherwise the
comment|// JAX-RS resources won't be found.
specifier|final
name|Object
name|address
init|=
name|req
operator|.
name|getAttribute
argument_list|(
literal|"org.apache.cxf.transport.endpoint.address"
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
name|String
name|basePath
init|=
operator|(
name|String
operator|)
name|inMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|BASE_PATH
argument_list|)
decl_stmt|;
name|req
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.cxf.transport.endpoint.address"
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
try|try
block|{
name|framework
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
finally|finally
block|{
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|DestinationHandler
extends|extends
name|AbstractReflectorAtmosphereHandler
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRequest
parameter_list|(
specifier|final
name|AtmosphereResource
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"onRequest"
argument_list|)
expr_stmt|;
try|try
block|{
name|invokeInternal
argument_list|(
literal|null
argument_list|,
name|resource
operator|.
name|getRequest
argument_list|()
operator|.
name|getServletContext
argument_list|()
argument_list|,
name|resource
operator|.
name|getRequest
argument_list|()
argument_list|,
name|resource
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Failed to invoke service"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// used for internal tests
name|AtmosphereFramework
name|getAtmosphereFramework
parameter_list|()
block|{
return|return
name|framework
return|;
block|}
block|}
end_class

end_unit

