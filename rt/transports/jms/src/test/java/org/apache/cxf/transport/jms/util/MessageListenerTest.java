begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueBrowser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQXAConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
operator|.
name|XaPooledConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|transaction
operator|.
name|manager
operator|.
name|GeronimoTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|awaitility
operator|.
name|Awaitility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|MessageListenerTest
block|{
enum|enum
name|TestMessage
block|{
name|OK
block|,
name|FAILFIRST
block|,
name|FAIL
block|;     }
annotation|@
name|Test
specifier|public
name|void
name|testConnectionProblem
parameter_list|()
throws|throws
name|JMSException
block|{
name|Connection
name|connection
init|=
name|createConnection
argument_list|(
literal|"broker"
argument_list|)
decl_stmt|;
name|Queue
name|dest
init|=
name|JMSUtil
operator|.
name|createQueue
argument_list|(
name|connection
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|MessageListener
name|listenerHandler
init|=
operator|new
name|TestMessageListener
argument_list|()
decl_stmt|;
name|TestExceptionListener
name|exListener
init|=
operator|new
name|TestExceptionListener
argument_list|()
decl_stmt|;
name|PollingMessageListenerContainer
name|container
init|=
comment|//
operator|new
name|PollingMessageListenerContainer
argument_list|(
name|connection
argument_list|,
name|dest
argument_list|,
name|listenerHandler
argument_list|,
name|exListener
argument_list|)
decl_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Simulate connection problem
name|container
operator|.
name|start
argument_list|()
expr_stmt|;
name|Awaitility
operator|.
name|await
argument_list|()
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|exListener
operator|.
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|JMSException
name|ex
init|=
name|exListener
operator|.
name|exception
decl_stmt|;
name|assertNotNull
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The connection is already closed"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectionProblemXA
parameter_list|()
throws|throws
name|JMSException
throws|,
name|XAException
throws|,
name|InterruptedException
block|{
name|TransactionManager
name|transactionManager
init|=
operator|new
name|GeronimoTransactionManager
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
name|createXAConnection
argument_list|(
literal|"brokerJTA"
argument_list|,
name|transactionManager
argument_list|)
decl_stmt|;
name|Queue
name|dest
init|=
name|JMSUtil
operator|.
name|createQueue
argument_list|(
name|connection
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|MessageListener
name|listenerHandler
init|=
operator|new
name|TestMessageListener
argument_list|()
decl_stmt|;
name|TestExceptionListener
name|exListener
init|=
operator|new
name|TestExceptionListener
argument_list|()
decl_stmt|;
name|PollingMessageListenerContainer
name|container
init|=
comment|//
operator|new
name|PollingMessageListenerContainer
argument_list|(
name|connection
argument_list|,
name|dest
argument_list|,
name|listenerHandler
argument_list|,
name|exListener
argument_list|)
decl_stmt|;
name|container
operator|.
name|setTransacted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|container
operator|.
name|setAcknowledgeMode
argument_list|(
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
name|container
operator|.
name|setTransactionManager
argument_list|(
name|transactionManager
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Simulate connection problem
name|container
operator|.
name|start
argument_list|()
expr_stmt|;
name|Awaitility
operator|.
name|await
argument_list|()
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|exListener
operator|.
name|exception
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|JMSException
name|ex
init|=
name|exListener
operator|.
name|exception
decl_stmt|;
name|assertNotNull
argument_list|(
name|ex
argument_list|)
expr_stmt|;
comment|// Closing the pooled connection will result in a NPE when using it
name|assertEquals
argument_list|(
literal|"Wrapped exception. null"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithJTA
parameter_list|()
throws|throws
name|JMSException
throws|,
name|XAException
throws|,
name|InterruptedException
block|{
name|TransactionManager
name|transactionManager
init|=
operator|new
name|GeronimoTransactionManager
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
name|createXAConnection
argument_list|(
literal|"brokerJTA"
argument_list|,
name|transactionManager
argument_list|)
decl_stmt|;
name|Queue
name|dest
init|=
name|JMSUtil
operator|.
name|createQueue
argument_list|(
name|connection
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|MessageListener
name|listenerHandler
init|=
operator|new
name|TestMessageListener
argument_list|()
decl_stmt|;
name|ExceptionListener
name|exListener
init|=
operator|new
name|TestExceptionListener
argument_list|()
decl_stmt|;
name|PollingMessageListenerContainer
name|container
init|=
operator|new
name|PollingMessageListenerContainer
argument_list|(
name|connection
argument_list|,
name|dest
argument_list|,
name|listenerHandler
argument_list|,
name|exListener
argument_list|)
decl_stmt|;
name|container
operator|.
name|setTransacted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|container
operator|.
name|setAcknowledgeMode
argument_list|(
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
name|container
operator|.
name|setTransactionManager
argument_list|(
name|transactionManager
argument_list|)
expr_stmt|;
name|container
operator|.
name|start
argument_list|()
expr_stmt|;
name|testTransactionalBehaviour
argument_list|(
name|connection
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|container
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoTransaction
parameter_list|()
throws|throws
name|JMSException
throws|,
name|XAException
throws|,
name|InterruptedException
block|{
name|Connection
name|connection
init|=
name|createConnection
argument_list|(
literal|"brokerNoTransaction"
argument_list|)
decl_stmt|;
name|Queue
name|dest
init|=
name|JMSUtil
operator|.
name|createQueue
argument_list|(
name|connection
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|MessageListener
name|listenerHandler
init|=
operator|new
name|TestMessageListener
argument_list|()
decl_stmt|;
name|AbstractMessageListenerContainer
name|container
init|=
operator|new
name|MessageListenerContainer
argument_list|(
name|connection
argument_list|,
name|dest
argument_list|,
name|listenerHandler
argument_list|)
decl_stmt|;
name|container
operator|.
name|setTransacted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|container
operator|.
name|setAcknowledgeMode
argument_list|(
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|container
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertNumMessagesInQueue
argument_list|(
literal|"At the start the queue should be empty"
argument_list|,
name|connection
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|connection
argument_list|,
name|dest
argument_list|,
name|TestMessage
operator|.
name|OK
argument_list|)
expr_stmt|;
name|assertNumMessagesInQueue
argument_list|(
literal|"This message should be committed"
argument_list|,
name|connection
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|connection
argument_list|,
name|dest
argument_list|,
name|TestMessage
operator|.
name|FAIL
argument_list|)
expr_stmt|;
name|assertNumMessagesInQueue
argument_list|(
literal|"Even when an exception occurs the message should be committed"
argument_list|,
name|connection
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|container
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocalTransaction
parameter_list|()
throws|throws
name|JMSException
throws|,
name|XAException
throws|,
name|InterruptedException
block|{
name|Connection
name|connection
init|=
name|createConnection
argument_list|(
literal|"brokerLocalTransaction"
argument_list|)
decl_stmt|;
name|Queue
name|dest
init|=
name|JMSUtil
operator|.
name|createQueue
argument_list|(
name|connection
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|MessageListener
name|listenerHandler
init|=
operator|new
name|TestMessageListener
argument_list|()
decl_stmt|;
name|AbstractMessageListenerContainer
name|container
init|=
operator|new
name|MessageListenerContainer
argument_list|(
name|connection
argument_list|,
name|dest
argument_list|,
name|listenerHandler
argument_list|)
decl_stmt|;
name|container
operator|.
name|setTransacted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|container
operator|.
name|setAcknowledgeMode
argument_list|(
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
name|container
operator|.
name|start
argument_list|()
expr_stmt|;
name|testTransactionalBehaviour
argument_list|(
name|connection
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|container
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|testTransactionalBehaviour
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Queue
name|dest
parameter_list|)
throws|throws
name|JMSException
throws|,
name|InterruptedException
block|{
name|Queue
name|dlq
init|=
name|JMSUtil
operator|.
name|createQueue
argument_list|(
name|connection
argument_list|,
literal|"ActiveMQ.DLQ"
argument_list|)
decl_stmt|;
name|assertNumMessagesInQueue
argument_list|(
literal|"At the start the queue should be empty"
argument_list|,
name|connection
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|assertNumMessagesInQueue
argument_list|(
literal|"At the start the DLQ should be empty"
argument_list|,
name|connection
argument_list|,
name|dlq
argument_list|,
literal|0
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|connection
argument_list|,
name|dest
argument_list|,
name|TestMessage
operator|.
name|OK
argument_list|)
expr_stmt|;
name|assertNumMessagesInQueue
argument_list|(
literal|"This message should be committed"
argument_list|,
name|connection
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|connection
argument_list|,
name|dest
argument_list|,
name|TestMessage
operator|.
name|FAILFIRST
argument_list|)
expr_stmt|;
name|assertNumMessagesInQueue
argument_list|(
literal|"Should succeed on second try"
argument_list|,
name|connection
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|,
literal|2000L
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|connection
argument_list|,
name|dest
argument_list|,
name|TestMessage
operator|.
name|FAIL
argument_list|)
expr_stmt|;
name|assertNumMessagesInQueue
argument_list|(
literal|"Should be rolled back"
argument_list|,
name|connection
argument_list|,
name|dlq
argument_list|,
literal|1
argument_list|,
literal|2500L
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Connection
name|createConnection
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://"
operator|+
name|name
operator|+
literal|"?broker.persistent=false"
argument_list|)
decl_stmt|;
name|cf
operator|.
name|setRedeliveryPolicy
argument_list|(
name|redeliveryPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
specifier|private
specifier|static
name|Connection
name|createXAConnection
parameter_list|(
name|String
name|name
parameter_list|,
name|TransactionManager
name|tm
parameter_list|)
throws|throws
name|JMSException
block|{
name|ActiveMQXAConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
literal|"vm://"
operator|+
name|name
operator|+
literal|"?broker.persistent=false"
argument_list|)
decl_stmt|;
name|cf
operator|.
name|setRedeliveryPolicy
argument_list|(
name|redeliveryPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|XaPooledConnectionFactory
name|cfp
init|=
operator|new
name|XaPooledConnectionFactory
argument_list|(
name|cf
argument_list|)
decl_stmt|;
name|cfp
operator|.
name|setTransactionManager
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|cfp
operator|.
name|setConnectionFactory
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|cfp
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
specifier|private
specifier|static
name|RedeliveryPolicy
name|redeliveryPolicy
parameter_list|()
block|{
name|RedeliveryPolicy
name|redeliveryPolicy
init|=
operator|new
name|RedeliveryPolicy
argument_list|()
decl_stmt|;
name|redeliveryPolicy
operator|.
name|setRedeliveryDelay
argument_list|(
literal|500L
argument_list|)
expr_stmt|;
name|redeliveryPolicy
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|redeliveryPolicy
return|;
block|}
specifier|private
specifier|static
name|void
name|assertNumMessagesInQueue
parameter_list|(
name|String
name|message
parameter_list|,
name|Connection
name|connection
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|int
name|expectedNum
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|JMSException
throws|,
name|InterruptedException
block|{
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|QueueBrowser
name|browser
init|=
name|session
operator|.
name|createBrowser
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|int
name|actualNum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
init|;
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|<
name|timeout
condition|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100L
argument_list|)
control|)
block|{
name|actualNum
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|messages
init|=
name|browser
operator|.
name|getEnumeration
argument_list|()
init|;
name|messages
operator|.
name|hasMoreElements
argument_list|()
condition|;
name|actualNum
operator|++
control|)
block|{
name|messages
operator|.
name|nextElement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|actualNum
operator|==
name|expectedNum
condition|)
block|{
break|break;
block|}
comment|//System.out.println("Messages in queue " + queue.getQueueName() + ": " + actualNum
comment|//                   + ", expecting: " + expectedNum);
block|}
name|browser
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|message
operator|+
literal|" -> number of messages on queue"
argument_list|,
name|expectedNum
argument_list|,
name|actualNum
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|sendMessage
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Destination
name|dest
parameter_list|,
name|TestMessage
name|content
parameter_list|)
throws|throws
name|JMSException
block|{
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|prod
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|content
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|prod
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|prod
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//        Thread.sleep(500L); // Give receiver some time to process
block|}
specifier|private
specifier|static
specifier|final
class|class
name|TestMessageListener
implements|implements
name|MessageListener
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|TextMessage
name|textMessage
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|TestMessage
operator|.
name|valueOf
argument_list|(
name|textMessage
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|OK
case|:
comment|//System.out.println("Simulating Processing successful");
break|break;
case|case
name|FAILFIRST
case|:
if|if
condition|(
name|message
operator|.
name|getJMSRedelivered
argument_list|()
condition|)
block|{
comment|//System.out.println("Simulating processing worked on second try");
break|break;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Simulating something went wrong. Expecting rollback"
argument_list|)
throw|;
case|case
name|FAIL
case|:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Simulating something went wrong. Expecting rollback"
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid message type"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|TestExceptionListener
implements|implements
name|ExceptionListener
block|{
name|JMSException
name|exception
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|JMSException
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
end_class

end_unit

