begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|continuations
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|continuations
operator|.
name|SuspendedInvocationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JMSContinuationTest
extends|extends
name|Assert
block|{
specifier|private
name|Message
name|m
decl_stmt|;
specifier|private
name|List
argument_list|<
name|JMSContinuation
argument_list|>
name|continuations
decl_stmt|;
specifier|private
name|Bus
name|b
decl_stmt|;
specifier|private
name|MessageObserver
name|observer
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|m
operator|=
operator|new
name|MessageImpl
argument_list|()
expr_stmt|;
name|continuations
operator|=
operator|new
name|LinkedList
argument_list|<
name|JMSContinuation
argument_list|>
argument_list|()
expr_stmt|;
name|b
operator|=
name|BusFactory
operator|.
name|getDefaultBus
argument_list|()
expr_stmt|;
name|observer
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MessageObserver
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitialStatus
parameter_list|()
block|{
name|JMSContinuation
name|cw
init|=
operator|new
name|JMSContinuation
argument_list|(
name|b
argument_list|,
name|m
argument_list|,
name|observer
argument_list|,
name|continuations
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cw
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cw
operator|.
name|isPending
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cw
operator|.
name|isResumed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuspendResume
parameter_list|()
block|{
name|TestJMSContinuationWrapper
name|cw
init|=
operator|new
name|TestJMSContinuationWrapper
argument_list|(
name|b
argument_list|,
name|m
argument_list|,
name|observer
argument_list|,
name|continuations
argument_list|)
decl_stmt|;
try|try
block|{
name|cw
operator|.
name|suspend
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SuspendInvocation exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SuspendedInvocationException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
name|assertFalse
argument_list|(
name|cw
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cw
operator|.
name|isPending
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cw
operator|.
name|isResumed
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cw
operator|.
name|isTaskCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cw
operator|.
name|isTaskCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|continuations
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|continuations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cw
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cw
operator|.
name|suspend
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|observer
operator|.
name|onMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|observer
argument_list|)
expr_stmt|;
name|cw
operator|.
name|resume
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|cw
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cw
operator|.
name|isPending
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cw
operator|.
name|isResumed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cw
operator|.
name|isTaskCreated
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cw
operator|.
name|isTaskCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|continuations
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserObject
parameter_list|()
block|{
name|JMSContinuation
name|cw
init|=
operator|new
name|JMSContinuation
argument_list|(
name|b
argument_list|,
name|m
argument_list|,
name|observer
argument_list|,
name|continuations
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|cw
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|userObject
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|cw
operator|.
name|setObject
argument_list|(
name|userObject
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|userObject
argument_list|,
name|cw
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TestJMSContinuationWrapper
extends|extends
name|JMSContinuation
block|{
specifier|private
name|boolean
name|taskCreated
decl_stmt|;
specifier|private
name|boolean
name|taskCancelled
decl_stmt|;
specifier|public
name|TestJMSContinuationWrapper
parameter_list|(
name|Bus
name|b
parameter_list|,
name|Message
name|m
parameter_list|,
name|MessageObserver
name|observer
parameter_list|,
name|List
argument_list|<
name|JMSContinuation
argument_list|>
name|cList
parameter_list|)
block|{
name|super
argument_list|(
name|b
argument_list|,
name|m
argument_list|,
name|observer
argument_list|,
name|cList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|createTimerTask
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|taskCreated
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|cancelTimerTask
parameter_list|()
block|{
name|taskCancelled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTaskCreated
parameter_list|()
block|{
name|boolean
name|result
init|=
name|taskCreated
decl_stmt|;
name|taskCreated
operator|=
literal|false
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|isTaskCancelled
parameter_list|()
block|{
name|boolean
name|result
init|=
name|taskCancelled
decl_stmt|;
name|taskCancelled
operator|=
literal|false
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

