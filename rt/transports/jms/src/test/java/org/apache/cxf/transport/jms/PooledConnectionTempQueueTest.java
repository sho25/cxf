begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryQueue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
operator|.
name|PooledConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|PooledConnectionTempQueueTest
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|SERVICE_QUEUE
init|=
literal|"queue1"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testTempQueueIssue
parameter_list|()
throws|throws
name|JMSException
throws|,
name|InterruptedException
block|{
specifier|final
name|ConnectionFactory
name|cf
init|=
operator|new
name|PooledConnectionFactory
argument_list|(
literal|"vm://localhost?broker.persistent=false"
argument_list|)
decl_stmt|;
name|Connection
name|con1
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|con1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// This order seems to matter to reproduce the issue
name|con1
operator|.
name|close
argument_list|()
expr_stmt|;
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|receiveAndRespondWithMessageIdAsCorrelationId
argument_list|(
name|cf
argument_list|,
name|SERVICE_QUEUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|sendWithReplyToTemp
argument_list|(
name|cf
argument_list|,
name|SERVICE_QUEUE
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|sendWithReplyToTemp
parameter_list|(
name|ConnectionFactory
name|cf
parameter_list|,
name|String
name|serviceQueue
parameter_list|)
throws|throws
name|JMSException
throws|,
name|InterruptedException
block|{
name|Connection
name|con
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|con
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TemporaryQueue
name|tempQueue
init|=
name|session
operator|.
name|createTemporaryQueue
argument_list|()
decl_stmt|;
name|TextMessage
name|msg
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Request"
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setJMSReplyTo
argument_list|(
name|tempQueue
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|serviceQueue
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
comment|// This sleep also seems to matter
name|Thread
operator|.
name|sleep
argument_list|(
literal|500L
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|tempQueue
argument_list|)
decl_stmt|;
name|Message
name|replyMsg
init|=
name|consumer
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|replyMsg
argument_list|)
expr_stmt|;
comment|//System.out.println(replyMsg.getJMSCorrelationID());
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|receiveAndRespondWithMessageIdAsCorrelationId
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|JMSException
block|{
name|Connection
name|con
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|javax
operator|.
name|jms
operator|.
name|Message
name|inMessage
init|=
name|consumer
operator|.
name|receive
argument_list|()
decl_stmt|;
comment|//String requestMessageId = inMessage.getJMSMessageID();
comment|//System.out.println("Received message " + requestMessageId);
specifier|final
name|TextMessage
name|replyMessage
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Result"
argument_list|)
decl_stmt|;
name|replyMessage
operator|.
name|setJMSCorrelationID
argument_list|(
name|inMessage
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|inMessage
operator|.
name|getJMSReplyTo
argument_list|()
argument_list|)
decl_stmt|;
comment|//System.out.println("Sending reply to " + inMessage.getJMSReplyTo());
name|producer
operator|.
name|send
argument_list|(
name|replyMessage
argument_list|)
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

