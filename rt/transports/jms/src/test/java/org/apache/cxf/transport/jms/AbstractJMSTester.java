begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
operator|.
name|PooledConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|memory
operator|.
name|MemoryPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractJMSTester
extends|extends
name|Assert
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|WSDL
init|=
literal|"/jms_test.wsdl"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|SERVICE_NS
init|=
literal|"http://cxf.apache.org/hello_world_jms"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|MAX_RECEIVE_TIME
init|=
literal|10
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|MESSAGE_CONTENT
init|=
literal|"HelloWorld"
decl_stmt|;
specifier|protected
specifier|static
name|Bus
name|bus
decl_stmt|;
specifier|protected
specifier|static
name|ConnectionFactory
name|cf
decl_stmt|;
specifier|protected
specifier|static
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
enum|enum
name|ExchangePattern
block|{
name|oneway
block|,
name|requestReply
block|}
empty_stmt|;
specifier|protected
name|EndpointReferenceType
name|target
decl_stmt|;
specifier|protected
name|Message
name|inMessage
decl_stmt|;
specifier|protected
name|Message
name|destMessage
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startSerices
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPopulateJMSXUserID
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseAuthenticatedPrincipalForJMSXUserID
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
operator|new
name|MemoryPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|brokerUri
init|=
literal|"tcp://localhost:"
operator|+
name|TestUtil
operator|.
name|getNewPortNumber
argument_list|(
name|AbstractJMSTester
operator|.
name|class
argument_list|)
decl_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
name|brokerUri
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|bus
operator|=
name|BusFactory
operator|.
name|getDefaultBus
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|cf1
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerUri
argument_list|)
decl_stmt|;
name|cf
operator|=
operator|new
name|PooledConnectionFactory
argument_list|(
name|cf1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|stopServices
parameter_list|()
throws|throws
name|Exception
block|{
name|bus
operator|.
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|EndpointInfo
name|setupServiceInfo
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|String
name|portName
parameter_list|)
block|{
return|return
name|setupServiceInfo
argument_list|(
name|SERVICE_NS
argument_list|,
name|WSDL
argument_list|,
name|serviceName
argument_list|,
name|portName
argument_list|)
return|;
block|}
specifier|protected
name|EndpointInfo
name|setupServiceInfo
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|wsdl
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|String
name|portName
parameter_list|)
block|{
name|URL
name|wsdlUrl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|wsdl
argument_list|)
decl_stmt|;
if|if
condition|(
name|wsdlUrl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wsdl file not found on class path "
operator|+
name|wsdl
argument_list|)
throw|;
block|}
name|WSDLServiceFactory
name|factory
init|=
operator|new
name|WSDLServiceFactory
argument_list|(
name|bus
argument_list|,
name|wsdlUrl
operator|.
name|toExternalForm
argument_list|()
argument_list|,
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|serviceName
argument_list|)
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|factory
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|service
operator|.
name|getEndpointInfo
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|portName
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|MessageObserver
name|createMessageObserver
parameter_list|()
block|{
return|return
operator|new
name|MessageObserver
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setInMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|destMessage
operator|=
name|m
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|protected
name|void
name|sendMessageAsync
parameter_list|(
name|Conduit
name|conduit
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|sendoutMessage
argument_list|(
name|conduit
argument_list|,
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|sendMessageSync
parameter_list|(
name|Conduit
name|conduit
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|sendoutMessage
argument_list|(
name|conduit
argument_list|,
name|message
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|sendMessage
parameter_list|(
name|Conduit
name|conduit
parameter_list|,
name|Message
name|message
parameter_list|,
name|boolean
name|synchronous
parameter_list|)
throws|throws
name|IOException
block|{
name|sendoutMessage
argument_list|(
name|conduit
argument_list|,
name|message
argument_list|,
literal|false
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|sendOneWayMessage
parameter_list|(
name|Conduit
name|conduit
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|sendoutMessage
argument_list|(
name|conduit
argument_list|,
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sendoutMessage
parameter_list|(
name|Conduit
name|conduit
parameter_list|,
name|Message
name|message
parameter_list|,
name|boolean
name|isOneWay
parameter_list|,
name|boolean
name|synchronous
parameter_list|)
throws|throws
name|IOException
block|{
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setOneWay
argument_list|(
name|isOneWay
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setSynchronous
argument_list|(
name|synchronous
argument_list|)
expr_stmt|;
name|message
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setOutMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|conduit
operator|.
name|prepare
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|message
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Writer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The OutputStream and Writer should not both be null "
argument_list|,
name|os
operator|!=
literal|null
operator|||
name|writer
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|MESSAGE_CONTENT
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO encoding
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
name|MESSAGE_CONTENT
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|JMSConduit
name|setupJMSConduit
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|)
throws|throws
name|IOException
block|{
name|JMSConfiguration
name|jmsConfig
init|=
name|JMSConfigFactory
operator|.
name|createFromEndpointInfo
argument_list|(
name|bus
argument_list|,
name|ei
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|jmsConfig
operator|.
name|setConnectionFactory
argument_list|(
name|cf
argument_list|)
expr_stmt|;
return|return
operator|new
name|JMSConduit
argument_list|(
name|target
argument_list|,
name|jmsConfig
argument_list|,
name|bus
argument_list|)
return|;
block|}
specifier|protected
name|JMSConduit
name|setupJMSConduitWithObserver
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|)
throws|throws
name|IOException
block|{
name|JMSConduit
name|jmsConduit
init|=
name|setupJMSConduit
argument_list|(
name|ei
argument_list|)
decl_stmt|;
name|MessageObserver
name|observer
init|=
operator|new
name|MessageObserver
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|inMessage
operator|=
name|m
expr_stmt|;
block|}
block|}
decl_stmt|;
name|jmsConduit
operator|.
name|setMessageObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
return|return
name|jmsConduit
return|;
block|}
specifier|protected
name|JMSDestination
name|setupJMSDestination
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|)
throws|throws
name|IOException
block|{
name|JMSConfiguration
name|jmsConfig
init|=
name|JMSConfigFactory
operator|.
name|createFromEndpointInfo
argument_list|(
name|bus
argument_list|,
name|ei
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|jmsConfig
operator|.
name|setConnectionFactory
argument_list|(
name|cf
argument_list|)
expr_stmt|;
return|return
operator|new
name|JMSDestination
argument_list|(
name|bus
argument_list|,
name|ei
argument_list|,
name|jmsConfig
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getContent
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|ByteArrayInputStream
name|bis
init|=
operator|(
name|ByteArrayInputStream
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|response
init|=
literal|"<not found>"
decl_stmt|;
if|if
condition|(
name|bis
operator|!=
literal|null
condition|)
block|{
name|byte
name|bytes
index|[]
init|=
operator|new
name|byte
index|[
name|bis
operator|.
name|available
argument_list|()
index|]
decl_stmt|;
try|try
block|{
name|bis
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"Read the Destination recieved Message error "
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|response
operator|=
name|IOUtils
operator|.
name|newStringFromBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringReader
name|reader
init|=
operator|(
name|StringReader
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|Reader
operator|.
name|class
argument_list|)
decl_stmt|;
name|char
name|buffer
index|[]
init|=
operator|new
name|char
index|[
literal|5000
index|]
decl_stmt|;
try|try
block|{
name|int
name|i
init|=
name|reader
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|response
operator|=
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"Read the Destination recieved Message error "
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|response
return|;
block|}
specifier|protected
name|void
name|waitForReceiveInMessage
parameter_list|()
block|{
name|int
name|waitTime
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|inMessage
operator|==
literal|null
operator|&&
name|waitTime
operator|<
name|MAX_RECEIVE_TIME
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// do nothing here
block|}
name|waitTime
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Can't receive the Conduit Message in "
operator|+
name|MAX_RECEIVE_TIME
operator|+
literal|" seconds"
argument_list|,
name|inMessage
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|waitForReceiveDestMessage
parameter_list|()
block|{
name|int
name|waitTime
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|destMessage
operator|==
literal|null
operator|&&
name|waitTime
operator|<
name|MAX_RECEIVE_TIME
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// do nothing here
block|}
name|waitTime
operator|++
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Can't receive the Destination message in "
operator|+
name|MAX_RECEIVE_TIME
operator|+
literal|" seconds"
argument_list|,
name|destMessage
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

