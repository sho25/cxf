begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryQueue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSession
import|;
end_import

begin_comment
comment|/**  * Encapsulates pooled session, unidentified producer, destination& associated consumer (certain elements may  * be null depending on the context).  *<p>  * Currently only the point-to-point domain is supported, though the intention is to genericize this to the  * pub-sub domain also.  */
end_comment

begin_class
specifier|public
class|class
name|PooledSession
block|{
specifier|private
name|Session
name|theSession
decl_stmt|;
specifier|private
name|MessageProducer
name|theProducer
decl_stmt|;
specifier|private
name|MessageConsumer
name|theConsumer
decl_stmt|;
specifier|private
name|Queue
name|replyDestination
decl_stmt|;
specifier|private
name|String
name|correlationID
decl_stmt|;
specifier|private
name|boolean
name|isQueueStyle
decl_stmt|;
comment|/**      * Constructor.      */
name|PooledSession
parameter_list|(
name|Session
name|session
parameter_list|,
name|boolean
name|isQueueStyle
parameter_list|)
block|{
name|this
operator|.
name|theSession
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|isQueueStyle
operator|=
name|isQueueStyle
expr_stmt|;
name|this
operator|.
name|theProducer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|theConsumer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|replyDestination
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * @return the pooled JMS Session      */
name|Session
name|session
parameter_list|()
block|{
return|return
name|theSession
return|;
block|}
comment|/**      * @return the unidentified producer      */
name|MessageProducer
name|producer
parameter_list|()
block|{
if|if
condition|(
name|theProducer
operator|==
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|isQueueStyle
condition|)
block|{
name|theProducer
operator|=
operator|(
operator|(
name|QueueSession
operator|)
name|theSession
operator|)
operator|.
name|createSender
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|theProducer
operator|=
operator|(
operator|(
name|TopicSession
operator|)
name|theSession
operator|)
operator|.
name|createPublisher
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|theProducer
return|;
block|}
specifier|private
name|String
name|generateUniqueSelector
parameter_list|()
block|{
name|String
name|host
init|=
literal|"localhost"
decl_stmt|;
try|try
block|{
name|InetAddress
name|addr
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
name|host
operator|=
name|addr
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|ukex
parameter_list|)
block|{
comment|// Default to localhost.
block|}
name|long
name|time
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTimeInMillis
argument_list|()
decl_stmt|;
return|return
name|host
operator|+
literal|"_"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
operator|+
literal|"_"
operator|+
name|this
operator|+
name|time
return|;
block|}
name|MessageConsumer
name|consumer
parameter_list|()
block|{
return|return
name|theConsumer
return|;
block|}
comment|/**      * @return the per-destination consumer      */
specifier|public
name|void
name|initConsumerAndReplyDestination
parameter_list|(
name|Queue
name|destination
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|theSession
operator|instanceof
name|QueueSession
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"session should be Queuesession expected"
argument_list|)
throw|;
block|}
if|if
condition|(
name|theConsumer
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|String
name|selector
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|destination
condition|)
block|{
name|replyDestination
operator|=
name|destination
expr_stmt|;
name|selector
operator|=
literal|"JMSCorrelationID = '"
operator|+
name|generateUniqueSelector
argument_list|()
operator|+
literal|"'"
expr_stmt|;
block|}
else|else
block|{
name|replyDestination
operator|=
name|theSession
operator|.
name|createTemporaryQueue
argument_list|()
expr_stmt|;
block|}
name|theConsumer
operator|=
operator|(
operator|(
name|QueueSession
operator|)
name|theSession
operator|)
operator|.
name|createReceiver
argument_list|(
name|replyDestination
argument_list|,
name|selector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * @return messageSelector if any set.      */
name|String
name|getCorrelationID
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|correlationID
operator|==
literal|null
operator|&&
name|theConsumer
operator|!=
literal|null
condition|)
block|{
comment|// Must be request/reply
name|String
name|selector
init|=
name|theConsumer
operator|.
name|getMessageSelector
argument_list|()
decl_stmt|;
if|if
condition|(
name|selector
operator|!=
literal|null
operator|&&
name|selector
operator|.
name|startsWith
argument_list|(
literal|"JMSCorrelationID"
argument_list|)
condition|)
block|{
name|int
name|i
init|=
name|selector
operator|.
name|indexOf
argument_list|(
literal|'\''
argument_list|)
decl_stmt|;
name|correlationID
operator|=
name|selector
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|selector
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|correlationID
return|;
block|}
name|void
name|close
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|theProducer
operator|!=
literal|null
condition|)
block|{
name|theProducer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|theConsumer
operator|!=
literal|null
condition|)
block|{
name|theConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|replyDestination
operator|instanceof
name|TemporaryQueue
condition|)
block|{
operator|(
operator|(
name|TemporaryQueue
operator|)
name|replyDestination
operator|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|theSession
operator|!=
literal|null
condition|)
block|{
name|theSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Queue
name|getReplyDestination
parameter_list|()
block|{
return|return
name|replyDestination
return|;
block|}
block|}
end_class

end_unit

