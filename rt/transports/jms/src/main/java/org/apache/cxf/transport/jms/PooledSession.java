begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryQueue
import|;
end_import

begin_comment
comment|/**  * Encapsulates pooled session, unidentified producer, destination&  * associated consumer (certain elements may be null depending on the  * context).  *<p>  * Currently only the point-to-point domain is supported,  * though the intention is to genericize this to the pub-sub domain  * also.  *  * @author Eoghan Glynn  */
end_comment

begin_class
specifier|public
class|class
name|PooledSession
block|{
specifier|private
specifier|final
name|Session
name|theSession
decl_stmt|;
specifier|private
name|Destination
name|theDestination
decl_stmt|;
specifier|private
specifier|final
name|MessageProducer
name|theProducer
decl_stmt|;
specifier|private
name|MessageConsumer
name|theConsumer
decl_stmt|;
specifier|private
name|String
name|correlationID
decl_stmt|;
comment|/**      * Constructor.      */
name|PooledSession
parameter_list|(
name|Session
name|session
parameter_list|,
name|Destination
name|destination
parameter_list|,
name|MessageProducer
name|producer
parameter_list|,
name|MessageConsumer
name|consumer
parameter_list|)
block|{
name|theSession
operator|=
name|session
expr_stmt|;
name|theDestination
operator|=
name|destination
expr_stmt|;
name|theProducer
operator|=
name|producer
expr_stmt|;
name|theConsumer
operator|=
name|consumer
expr_stmt|;
block|}
comment|/**      * @return the pooled JMS Session      */
name|Session
name|session
parameter_list|()
block|{
return|return
name|theSession
return|;
block|}
comment|/**      * @return the destination associated with the consumer      */
name|Destination
name|destination
parameter_list|()
block|{
return|return
name|theDestination
return|;
block|}
comment|/**      * @param destination the destination to encapsulate      */
name|void
name|destination
parameter_list|(
name|Destination
name|destination
parameter_list|)
block|{
name|theDestination
operator|=
name|destination
expr_stmt|;
block|}
comment|/**      * @return the unidentified producer      */
name|MessageProducer
name|producer
parameter_list|()
block|{
return|return
name|theProducer
return|;
block|}
comment|/**      * @return the per-destination consumer      */
name|MessageConsumer
name|consumer
parameter_list|()
block|{
return|return
name|theConsumer
return|;
block|}
comment|/**      * @return messageSelector if any set.      */
name|String
name|getCorrelationID
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|correlationID
operator|==
literal|null
operator|&&
name|theConsumer
operator|!=
literal|null
condition|)
block|{
comment|//Must be request/reply
name|String
name|selector
init|=
name|theConsumer
operator|.
name|getMessageSelector
argument_list|()
decl_stmt|;
if|if
condition|(
name|selector
operator|!=
literal|null
operator|&&
name|selector
operator|.
name|startsWith
argument_list|(
literal|"JMSCorrelationID"
argument_list|)
condition|)
block|{
name|int
name|i
init|=
name|selector
operator|.
name|indexOf
argument_list|(
literal|'\''
argument_list|)
decl_stmt|;
name|correlationID
operator|=
name|selector
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|selector
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|correlationID
return|;
block|}
comment|/**      * @param consumer the consumer to encapsulate      */
name|void
name|consumer
parameter_list|(
name|MessageConsumer
name|consumer
parameter_list|)
block|{
name|theConsumer
operator|=
name|consumer
expr_stmt|;
block|}
name|void
name|close
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|theProducer
operator|!=
literal|null
condition|)
block|{
name|theProducer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|theConsumer
operator|!=
literal|null
condition|)
block|{
name|theConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|theDestination
operator|instanceof
name|TemporaryQueue
condition|)
block|{
operator|(
operator|(
name|TemporaryQueue
operator|)
name|theDestination
operator|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|theSession
operator|!=
literal|null
condition|)
block|{
name|theSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

