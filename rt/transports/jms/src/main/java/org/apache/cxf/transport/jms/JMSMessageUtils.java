begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|HttpHeaderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|uri
operator|.
name|JMSEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|util
operator|.
name|JMSMessageConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|util
operator|.
name|JMSUtil
import|;
end_import

begin_comment
comment|/**  * Static util methods for converting cxf to jms messages and vice a versa  */
end_comment

begin_class
specifier|final
class|class
name|JMSMessageUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JMSMessageUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|JMSMessageUtils
parameter_list|()
block|{      }
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|asCXFMessage
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|jmsHeadersKey
parameter_list|)
throws|throws
name|UnsupportedEncodingException
throws|,
name|JMSException
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|inMessage
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|JMSMessageHeadersType
name|messageHeaders
init|=
name|JMSMessageHeadersType
operator|.
name|from
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|jmsHeadersKey
argument_list|,
name|messageHeaders
argument_list|)
expr_stmt|;
name|populateIncomingContext
argument_list|(
name|messageHeaders
argument_list|,
name|inMessage
argument_list|)
expr_stmt|;
name|retrieveAndSetPayload
argument_list|(
name|inMessage
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
name|inMessage
return|;
block|}
comment|/**      * Extract the payload of an incoming JMS message      *      * @param inMessage      * @param message the incoming message      * @throws UnsupportedEncodingException      * @throws JMSException      */
specifier|private
specifier|static
name|void
name|retrieveAndSetPayload
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|inMessage
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|UnsupportedEncodingException
throws|,
name|JMSException
block|{
name|String
name|messageType
init|=
literal|null
decl_stmt|;
name|Object
name|converted
init|=
operator|new
name|JMSMessageConverter
argument_list|()
operator|.
name|fromMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|converted
operator|instanceof
name|String
condition|)
block|{
name|inMessage
operator|.
name|setContent
argument_list|(
name|Reader
operator|.
name|class
argument_list|,
operator|new
name|StringReader
argument_list|(
operator|(
name|String
operator|)
name|converted
argument_list|)
argument_list|)
expr_stmt|;
name|messageType
operator|=
name|JMSConstants
operator|.
name|TEXT_MESSAGE_TYPE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|converted
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|inMessage
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|converted
argument_list|)
argument_list|)
expr_stmt|;
name|messageType
operator|=
name|JMSConstants
operator|.
name|BYTE_MESSAGE_TYPE
expr_stmt|;
block|}
else|else
block|{
name|messageType
operator|=
literal|"unknown"
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|inMessage
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|JMS_MESSAGE_TYPE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|messageType
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|populateIncomingContext
parameter_list|(
name|JMSMessageHeadersType
name|messageHeaders
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|inMessage
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|String
name|contentType
init|=
name|messageHeaders
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
name|inMessage
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|ENCODING
argument_list|,
name|getEncoding
argument_list|(
name|contentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|responseCode
init|=
operator|(
name|String
operator|)
name|messageHeaders
operator|.
name|getProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseCode
operator|!=
literal|null
condition|)
block|{
name|inMessage
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|responseCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|protHeaders
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|messageHeaders
operator|.
name|getPropertyKeys
argument_list|()
control|)
block|{
name|String
name|val
init|=
operator|(
name|String
operator|)
name|messageHeaders
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|protHeaders
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|requestURI
init|=
name|messageHeaders
operator|.
name|getSOAPJMSRequestURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|requestURI
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|JMSEndpoint
name|endpoint
init|=
operator|new
name|JMSEndpoint
argument_list|(
name|requestURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getTargetService
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|protHeaders
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|TARGET_SERVICE_IN_REQUESTURI
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requestURI
operator|!=
literal|null
condition|)
block|{
name|inMessage
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|REQUEST_URI
argument_list|,
name|requestURI
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|protHeaders
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|MALFORMED_REQUESTURI
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|inMessage
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|protHeaders
argument_list|)
expr_stmt|;
block|}
specifier|static
name|String
name|getEncoding
parameter_list|(
name|String
name|ct
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|String
name|contentType
init|=
name|ct
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|enc
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|contentType
argument_list|,
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
name|int
name|index
init|=
name|token
operator|.
name|indexOf
argument_list|(
literal|"charset="
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|enc
operator|=
name|token
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|8
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|String
name|normalizedEncoding
init|=
name|HttpHeaderHelper
operator|.
name|mapCharset
argument_list|(
name|enc
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalizedEncoding
operator|==
literal|null
condition|)
block|{
name|String
name|m
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"INVALID_ENCODING_MSG"
argument_list|,
name|LOG
argument_list|,
operator|new
name|Object
index|[]
block|{
name|enc
block|}
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|m
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedEncodingException
argument_list|(
name|m
argument_list|)
throw|;
block|}
return|return
name|normalizedEncoding
return|;
block|}
specifier|private
specifier|static
name|String
name|getContentType
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|message
parameter_list|)
block|{
name|String
name|contentType
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|String
name|enc
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|ENCODING
argument_list|)
decl_stmt|;
comment|// add the encoding information
if|if
condition|(
literal|null
operator|!=
name|contentType
condition|)
block|{
if|if
condition|(
name|enc
operator|!=
literal|null
operator|&&
name|contentType
operator|.
name|indexOf
argument_list|(
literal|"charset="
argument_list|)
operator|==
operator|-
literal|1
operator|&&
operator|!
name|contentType
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"multipart/related"
argument_list|)
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|+
literal|"; charset="
operator|+
name|enc
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|enc
operator|!=
literal|null
condition|)
block|{
name|contentType
operator|=
literal|"text/xml; charset="
operator|+
name|enc
expr_stmt|;
block|}
else|else
block|{
name|contentType
operator|=
literal|"text/xml"
expr_stmt|;
block|}
comment|// Retrieve or create protocol headers
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|headers
condition|)
block|{
name|headers
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
return|return
name|contentType
return|;
block|}
specifier|private
specifier|static
name|String
name|getContentEncoding
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|message
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|headers
operator|.
name|get
argument_list|(
literal|"Content-Encoding"
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Message
name|asJMSMessage
parameter_list|(
name|JMSConfiguration
name|jmsConfig
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|outMessage
parameter_list|,
name|Object
name|payload
parameter_list|,
name|String
name|messageType
parameter_list|,
name|Session
name|session
parameter_list|,
name|String
name|correlationId
parameter_list|,
name|String
name|headerType
parameter_list|)
throws|throws
name|JMSException
block|{
name|Message
name|jmsMessage
init|=
name|JMSUtil
operator|.
name|createAndSetPayload
argument_list|(
name|payload
argument_list|,
name|session
argument_list|,
name|messageType
argument_list|)
decl_stmt|;
name|JMSMessageHeadersType
name|messageHeaders
init|=
name|getOrCreateHeader
argument_list|(
name|outMessage
argument_list|,
name|headerType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|messageHeaders
operator|.
name|isSetJMSDeliveryMode
argument_list|()
condition|)
block|{
name|messageHeaders
operator|.
name|setJMSDeliveryMode
argument_list|(
name|jmsConfig
operator|.
name|getDeliveryMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|messageHeaders
operator|.
name|isSetTimeToLive
argument_list|()
condition|)
block|{
name|messageHeaders
operator|.
name|setTimeToLive
argument_list|(
name|jmsConfig
operator|.
name|getTimeToLive
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|messageHeaders
operator|.
name|isSetJMSPriority
argument_list|()
condition|)
block|{
name|messageHeaders
operator|.
name|setJMSPriority
argument_list|(
name|jmsConfig
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Retrieve or create protocol headers
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|outMessage
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isSoapMessage
init|=
operator|!
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|REST_MESSAGE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSoapMessage
condition|)
block|{
if|if
condition|(
operator|!
name|messageHeaders
operator|.
name|isSetSOAPJMSTargetService
argument_list|()
condition|)
block|{
name|messageHeaders
operator|.
name|setSOAPJMSTargetService
argument_list|(
name|jmsConfig
operator|.
name|getTargetService
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|messageHeaders
operator|.
name|isSetSOAPJMSBindingVersion
argument_list|()
condition|)
block|{
name|messageHeaders
operator|.
name|setSOAPJMSBindingVersion
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
block|}
name|messageHeaders
operator|.
name|setSOAPJMSContentType
argument_list|(
name|JMSMessageUtils
operator|.
name|getContentType
argument_list|(
name|outMessage
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|JMSMessageUtils
operator|.
name|getContentEncoding
argument_list|(
name|outMessage
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|messageHeaders
operator|.
name|setSOAPJMSContentEncoding
argument_list|(
name|JMSMessageUtils
operator|.
name|getContentEncoding
argument_list|(
name|outMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|soapAction
init|=
name|JMSMessageUtils
operator|.
name|getSoapAction
argument_list|(
name|messageHeaders
argument_list|,
name|outMessage
argument_list|,
name|headers
argument_list|)
decl_stmt|;
if|if
condition|(
name|soapAction
operator|!=
literal|null
condition|)
block|{
name|messageHeaders
operator|.
name|setSOAPJMSSOAPAction
argument_list|(
name|soapAction
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|messageHeaders
operator|.
name|isSetSOAPJMSIsFault
argument_list|()
condition|)
block|{
name|boolean
name|isFault
init|=
name|outMessage
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|messageHeaders
operator|.
name|setSOAPJMSIsFault
argument_list|(
name|isFault
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|messageHeaders
operator|.
name|isSetSOAPJMSRequestURI
argument_list|()
condition|)
block|{
name|messageHeaders
operator|.
name|setSOAPJMSRequestURI
argument_list|(
name|jmsConfig
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|outMessage
argument_list|)
condition|)
block|{
name|addJMSPropertiesFromMessage
argument_list|(
name|messageHeaders
argument_list|,
name|outMessage
argument_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|REQUEST_URI
argument_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addJMSPropertyFromMessage
argument_list|(
name|messageHeaders
argument_list|,
name|outMessage
argument_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
expr_stmt|;
block|}
name|addJMSPropertyFromMessage
argument_list|(
name|messageHeaders
argument_list|,
name|outMessage
argument_list|,
name|JMSConstants
operator|.
name|RS_CONTENT_TYPE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|ent
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|messageHeaders
operator|.
name|putProperty
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|JMSMessageUtils
operator|.
name|join
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|messageHeaders
operator|.
name|writeTo
argument_list|(
name|jmsMessage
argument_list|)
expr_stmt|;
name|jmsMessage
operator|.
name|setJMSCorrelationID
argument_list|(
name|correlationId
argument_list|)
expr_stmt|;
return|return
name|jmsMessage
return|;
block|}
specifier|private
specifier|static
name|JMSMessageHeadersType
name|getOrCreateHeader
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|message
parameter_list|,
name|String
name|headerName
parameter_list|)
block|{
name|JMSMessageHeadersType
name|messageProperties
init|=
operator|(
name|JMSMessageHeadersType
operator|)
name|message
operator|.
name|get
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageProperties
operator|==
literal|null
condition|)
block|{
name|messageProperties
operator|=
operator|new
name|JMSMessageHeadersType
argument_list|()
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|headerName
argument_list|,
name|messageProperties
argument_list|)
expr_stmt|;
block|}
return|return
name|messageProperties
return|;
block|}
specifier|private
specifier|static
name|String
name|join
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|valueList
parameter_list|,
name|char
name|seperator
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|valueList
control|)
block|{
if|if
condition|(
name|b
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|seperator
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getSoapAction
parameter_list|(
name|JMSMessageHeadersType
name|messageProperties
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|outMessage
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|)
block|{
name|String
name|soapAction
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|action
init|=
name|headers
operator|.
name|remove
argument_list|(
literal|"SOAPAction"
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
operator|&&
operator|!
name|action
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|soapAction
operator|=
name|action
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|soapAction
operator|==
literal|null
condition|)
block|{
name|soapAction
operator|=
name|messageProperties
operator|.
name|getSOAPJMSSOAPAction
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|soapAction
operator|==
literal|null
condition|)
block|{
name|soapAction
operator|=
name|extractActionFromSoap12
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
block|}
return|return
name|soapAction
return|;
block|}
specifier|private
specifier|static
name|void
name|addJMSPropertiesFromMessage
parameter_list|(
name|JMSMessageHeadersType
name|messageProperties
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|message
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|addJMSPropertyFromMessage
argument_list|(
name|messageProperties
argument_list|,
name|message
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addJMSPropertyFromMessage
parameter_list|(
name|JMSMessageHeadersType
name|messageProperties
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|message
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|Object
name|value
init|=
name|message
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|messageProperties
operator|.
name|putProperty
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getMessageType
parameter_list|(
specifier|final
name|javax
operator|.
name|jms
operator|.
name|Message
name|request
parameter_list|)
block|{
specifier|final
name|String
name|msgType
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|TextMessage
condition|)
block|{
name|msgType
operator|=
name|JMSConstants
operator|.
name|TEXT_MESSAGE_TYPE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|instanceof
name|BytesMessage
condition|)
block|{
name|msgType
operator|=
name|JMSConstants
operator|.
name|BYTE_MESSAGE_TYPE
expr_stmt|;
block|}
else|else
block|{
name|msgType
operator|=
name|JMSConstants
operator|.
name|BINARY_MESSAGE_TYPE
expr_stmt|;
block|}
return|return
name|msgType
return|;
block|}
specifier|private
specifier|static
name|String
name|extractActionFromSoap12
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|message
parameter_list|)
block|{
name|String
name|ct
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ct
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|start
init|=
name|ct
operator|.
name|indexOf
argument_list|(
literal|"action="
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|end
decl_stmt|;
if|if
condition|(
name|ct
operator|.
name|charAt
argument_list|(
name|start
operator|+
literal|7
argument_list|)
operator|==
literal|'\"'
condition|)
block|{
name|start
operator|+=
literal|8
expr_stmt|;
name|end
operator|=
name|ct
operator|.
name|indexOf
argument_list|(
literal|'\"'
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|start
operator|+=
literal|7
expr_stmt|;
name|end
operator|=
name|ct
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|,
name|start
argument_list|)
expr_stmt|;
if|if
condition|(
name|end
operator|==
operator|-
literal|1
condition|)
block|{
name|end
operator|=
name|ct
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ct
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isMtomEnabled
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|message
parameter_list|)
block|{
return|return
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|getContextualProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|MTOM_ENABLED
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

