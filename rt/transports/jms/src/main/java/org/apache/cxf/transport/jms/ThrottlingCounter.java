begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|continuations
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|util
operator|.
name|JMSListenerContainer
import|;
end_import

begin_comment
comment|/**  * Counter that throttles a jms listener on a high and low water mark.  *   * When the counter reaches the high watermark the listener will be stopped.  * When the counter reaches the low watermark the listener will be started.  */
end_comment

begin_class
specifier|public
class|class
name|ThrottlingCounter
implements|implements
name|Counter
block|{
specifier|private
name|AtomicInteger
name|counter
decl_stmt|;
specifier|private
name|int
name|lowWatermark
decl_stmt|;
specifier|private
name|int
name|highWatermark
decl_stmt|;
specifier|private
name|JMSListenerContainer
name|listenerContainer
decl_stmt|;
specifier|public
name|ThrottlingCounter
parameter_list|(
name|JMSListenerContainer
name|listenerContainer
parameter_list|,
name|int
name|lowWatermark
parameter_list|,
name|int
name|highWatermark
parameter_list|)
block|{
name|this
operator|.
name|counter
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
name|this
operator|.
name|lowWatermark
operator|=
name|lowWatermark
expr_stmt|;
name|this
operator|.
name|highWatermark
operator|=
name|highWatermark
expr_stmt|;
name|this
operator|.
name|listenerContainer
operator|=
name|listenerContainer
expr_stmt|;
block|}
specifier|public
specifier|final
name|int
name|incrementAndGet
parameter_list|()
block|{
name|int
name|curCounter
init|=
name|counter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|curCounter
operator|>=
name|highWatermark
operator|&&
name|listenerContainer
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|listenerContainer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
return|return
name|curCounter
return|;
block|}
specifier|public
specifier|final
name|int
name|decrementAndGet
parameter_list|()
block|{
name|int
name|curCounter
init|=
name|counter
operator|.
name|decrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|curCounter
operator|<=
name|lowWatermark
operator|&&
operator|!
name|listenerContainer
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|listenerContainer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|curCounter
return|;
block|}
block|}
end_class

end_unit

