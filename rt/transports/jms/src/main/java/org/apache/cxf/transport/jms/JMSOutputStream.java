begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_comment
comment|/**  * Outputstream that sends a message when the exchange is closed  */
end_comment

begin_class
class|class
name|JMSOutputStream
extends|extends
name|CachedOutputStream
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JMSOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|JMSExchangeSender
name|sender
decl_stmt|;
specifier|private
name|Exchange
name|exchange
decl_stmt|;
specifier|private
name|boolean
name|isTextPayload
decl_stmt|;
specifier|public
name|JMSOutputStream
parameter_list|(
name|JMSExchangeSender
name|sender
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|isTextPayload
parameter_list|)
block|{
name|this
operator|.
name|sender
operator|=
name|sender
expr_stmt|;
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|isTextPayload
operator|=
name|isTextPayload
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doFlush
parameter_list|()
throws|throws
name|IOException
block|{
comment|// do nothing here
block|}
annotation|@
name|Override
comment|/**      * Close the stream and send the message out      */
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
name|Object
name|payload
init|=
name|retrieveRequestFromStream
argument_list|(
name|isTextPayload
argument_list|)
decl_stmt|;
name|this
operator|.
name|sender
operator|.
name|sendExchange
argument_list|(
name|exchange
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
comment|/**      * Extract the request from the OutputStream      *      * @return for textPayloads a String is returned else a byte[]      * @throws IOException      */
specifier|private
name|Object
name|retrieveRequestFromStream
parameter_list|(
name|boolean
name|isTextPayload1
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|request
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isTextPayload1
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
name|this
operator|.
name|writeCacheTo
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|request
operator|=
name|builder
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|request
operator|=
name|getBytes
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error creating request Object from Message content, exception "
operator|+
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Payload to be sent out is :["
operator|+
name|request
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|request
return|;
block|}
block|}
end_class

end_unit

