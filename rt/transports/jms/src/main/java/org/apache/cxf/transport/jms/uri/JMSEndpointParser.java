begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|uri
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|JMSEndpointParser
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JMSEndpointParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|JMSEndpointParser
parameter_list|()
block|{     }
specifier|public
specifier|static
name|JMSEndpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
comment|// encode URI string to the unsafe URI characters
name|URI
name|u
init|=
operator|new
name|URI
argument_list|(
name|UnsafeUriCharactersEncoder
operator|.
name|encode
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|u
operator|.
name|getSchemeSpecificPart
argument_list|()
decl_stmt|;
comment|// lets trim off any query arguments
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|int
name|idx
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
name|URISupport
operator|.
name|parseParameters
argument_list|(
name|u
argument_list|)
decl_stmt|;
name|validateURI
argument_list|(
name|uri
argument_list|,
name|path
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Creating endpoint uri=["
operator|+
name|uri
operator|+
literal|"], path=["
operator|+
name|path
operator|+
literal|"], parameters=["
operator|+
name|parameters
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|JMSEndpoint
name|endpoint
init|=
name|createEndpoint
argument_list|(
name|uri
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
name|configureProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
return|return
name|endpoint
return|;
block|}
comment|/**      * @param endpoint      * @param parameters      */
specifier|private
specifier|static
name|void
name|configureProperties
parameter_list|(
name|JMSEndpoint
name|endpoint
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|String
name|deliveryMode
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
name|JMSURIConstants
operator|.
name|DELIVERYMODE_PARAMETER_NAME
argument_list|)
decl_stmt|;
name|String
name|timeToLive
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
name|JMSURIConstants
operator|.
name|TIMETOLIVE_PARAMETER_NAME
argument_list|)
decl_stmt|;
name|String
name|priority
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
name|JMSURIConstants
operator|.
name|PRIORITY_PARAMETER_NAME
argument_list|)
decl_stmt|;
name|String
name|replyToName
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
name|JMSURIConstants
operator|.
name|REPLYTONAME_PARAMETER_NAME
argument_list|)
decl_stmt|;
name|String
name|topicReplyToName
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
name|JMSURIConstants
operator|.
name|TOPICREPLYTONAME_PARAMETER_NAME
argument_list|)
decl_stmt|;
name|String
name|jndiConnectionFactoryName
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
name|JMSURIConstants
operator|.
name|JNDICONNECTIONFACTORYNAME_PARAMETER_NAME
argument_list|)
decl_stmt|;
name|String
name|jndiInitialContextFactory
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
name|JMSURIConstants
operator|.
name|JNDIINITIALCONTEXTFACTORY_PARAMETER_NAME
argument_list|)
decl_stmt|;
name|String
name|jndiUrl
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
name|JMSURIConstants
operator|.
name|JNDIURL_PARAMETER_NAME
argument_list|)
decl_stmt|;
name|String
name|messageType
init|=
name|getAndRemoveParameter
argument_list|(
name|parameters
argument_list|,
name|JMSURIConstants
operator|.
name|MESSAGE_TYPE_PARAMETER_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|deliveryMode
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryModeType
operator|.
name|valueOf
argument_list|(
name|deliveryMode
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeToLive
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setTimeToLive
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|timeToLive
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|priority
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setPriority
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|replyToName
operator|!=
literal|null
operator|&&
name|topicReplyToName
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The replyToName and topicReplyToName should not be defined at the same time."
argument_list|)
throw|;
block|}
if|if
condition|(
name|replyToName
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setReplyToName
argument_list|(
name|replyToName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|topicReplyToName
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setTopicReplyToName
argument_list|(
name|topicReplyToName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jndiConnectionFactoryName
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setJndiConnectionFactoryName
argument_list|(
name|jndiConnectionFactoryName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jndiInitialContextFactory
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setJndiInitialContextFactory
argument_list|(
name|jndiInitialContextFactory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jndiUrl
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setJndiURL
argument_list|(
name|jndiUrl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageType
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|setMessageType
argument_list|(
name|MessageType
operator|.
name|fromValue
argument_list|(
name|messageType
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|key
range|:
name|parameters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|parameters
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|JMSURIConstants
operator|.
name|JNDI_PARAMETER_NAME_PREFIX
argument_list|)
condition|)
block|{
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|putJndiParameter
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpoint
operator|.
name|putParameter
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @param parameters      * @param deliverymodeParameterName      * @return      */
specifier|private
specifier|static
name|String
name|getAndRemoveParameter
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|,
name|String
name|parameterName
parameter_list|)
block|{
name|String
name|value
init|=
name|parameters
operator|.
name|get
argument_list|(
name|parameterName
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|remove
argument_list|(
name|parameterName
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
comment|/**      * Strategy for validation of the uri when creating the endpoint.      *       * @param uri the uri - the uri the end user provided untouched      * @param path the path - part after the scheme      * @param parameters the parameters, an empty map if no parameters given      * @throws ResolveEndpointFailedException should be thrown if the URI validation failed      */
specifier|protected
specifier|static
name|void
name|validateURI
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|ResolveEndpointFailedException
block|{
comment|// check for uri containing& but no ? marker
if|if
condition|(
name|uri
operator|.
name|contains
argument_list|(
literal|"&"
argument_list|)
operator|&&
operator|!
name|uri
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|uri
argument_list|,
literal|"Invalid uri syntax: no ? marker however the uri "
operator|+
literal|"has& parameter separators. "
operator|+
literal|"Check the uri if its missing a ? marker."
argument_list|)
throw|;
block|}
comment|// check for uri containing double&& markers
if|if
condition|(
name|uri
operator|.
name|contains
argument_list|(
literal|"&&"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
name|uri
argument_list|,
literal|"Invalid uri syntax: Double&& marker found. "
operator|+
literal|"Check the uri and remove the "
operator|+
literal|"duplicate& marker."
argument_list|)
throw|;
block|}
block|}
comment|/**      * A factory method allowing derived components to create a new endpoint from the given URI, remaining      * path and optional parameters      *       * @param uri the full URI of the endpoint      * @param remaining the remaining part of the URI without the query parameters or component prefix      * @param parameters the optional parameters passed in      * @return a newly created endpoint or null if the endpoint cannot be created based on the inputs      */
specifier|protected
specifier|static
name|JMSEndpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|isQueue
init|=
literal|false
decl_stmt|;
name|boolean
name|isTopic
init|=
literal|false
decl_stmt|;
name|boolean
name|isJndi
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|remaining
operator|.
name|startsWith
argument_list|(
name|JMSURIConstants
operator|.
name|QUEUE_PREFIX
argument_list|)
condition|)
block|{
name|remaining
operator|=
name|removeStartingCharacters
argument_list|(
name|remaining
operator|.
name|substring
argument_list|(
name|JMSURIConstants
operator|.
name|QUEUE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|isQueue
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|remaining
operator|.
name|startsWith
argument_list|(
name|JMSURIConstants
operator|.
name|TOPIC_PREFIX
argument_list|)
condition|)
block|{
name|remaining
operator|=
name|removeStartingCharacters
argument_list|(
name|remaining
operator|.
name|substring
argument_list|(
name|JMSURIConstants
operator|.
name|TOPIC_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|isTopic
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|remaining
operator|.
name|startsWith
argument_list|(
name|JMSURIConstants
operator|.
name|JNDI_PREFIX
argument_list|)
condition|)
block|{
name|remaining
operator|=
name|removeStartingCharacters
argument_list|(
name|remaining
operator|.
name|substring
argument_list|(
name|JMSURIConstants
operator|.
name|JNDI_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|isJndi
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unknow JMS Variant"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|subject
init|=
name|convertPathToActualDestination
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
comment|// lets make sure we copy the configuration as each endpoint can
comment|// customize its own version
comment|// JMSConfiguration newConfiguration = getConfiguration().copy();
name|JMSEndpoint
name|endpoint
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isQueue
condition|)
block|{
name|endpoint
operator|=
operator|new
name|JMSEndpoint
argument_list|(
name|uri
argument_list|,
name|JMSURIConstants
operator|.
name|QUEUE
argument_list|,
name|subject
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isTopic
condition|)
block|{
name|endpoint
operator|=
operator|new
name|JMSEndpoint
argument_list|(
name|uri
argument_list|,
name|JMSURIConstants
operator|.
name|TOPIC
argument_list|,
name|subject
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isJndi
condition|)
block|{
name|endpoint
operator|=
operator|new
name|JMSEndpoint
argument_list|(
name|uri
argument_list|,
name|JMSURIConstants
operator|.
name|JNDI
argument_list|,
name|subject
argument_list|)
expr_stmt|;
block|}
return|return
name|endpoint
return|;
block|}
comment|/**      * A strategy method allowing the URI destination to be translated into the actual JMS destination name      * (say by looking up in JNDI or something)      */
specifier|protected
specifier|static
name|String
name|convertPathToActualDestination
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
return|;
block|}
specifier|public
specifier|static
name|JMSURIConstants
name|getConfiguration
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|// Some helper methods
comment|// -------------------------------------------------------------------------
comment|/**      * Removes any starting characters on the given text which match the given character      *       * @param text the string      * @param ch the initial characters to remove      * @return either the original string or the new substring      */
specifier|public
specifier|static
name|String
name|removeStartingCharacters
parameter_list|(
name|String
name|text
parameter_list|,
name|char
name|ch
parameter_list|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|text
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
name|ch
condition|)
block|{
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
return|return
name|text
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
return|;
block|}
return|return
name|text
return|;
block|}
block|}
end_class

end_unit

