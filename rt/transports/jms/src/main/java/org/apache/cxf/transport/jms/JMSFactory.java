begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|XAConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|task
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|connection
operator|.
name|SingleConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|connection
operator|.
name|UserCredentialsConnectionFactoryAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|SessionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|AbstractMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|support
operator|.
name|destination
operator|.
name|DestinationResolver
import|;
end_import

begin_comment
comment|/**  * Factory to create JmsTemplates and JmsListeners from configuration and context information  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|JMSFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JMSFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|JMSFactory
parameter_list|()
block|{     }
comment|/**      * Retreive connection factory from jndi, wrap it in a UserCredentialsConnectionFactoryAdapter,      * set username and password and return the ConnectionFactory      *       * @param jmsConfig      * @param jndiConfig      * @return      */
specifier|static
name|ConnectionFactory
name|getConnectionFactoryFromJndi
parameter_list|(
name|JMSConfiguration
name|jmsConfig
parameter_list|)
block|{
name|JNDIConfiguration
name|jndiConfig
init|=
name|jmsConfig
operator|.
name|getJndiConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|jndiConfig
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|connectionFactoryName
init|=
name|jndiConfig
operator|.
name|getJndiConnectionFactoryName
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionFactoryName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|userName
init|=
name|jndiConfig
operator|.
name|getConnectionUserName
argument_list|()
decl_stmt|;
name|String
name|password
init|=
name|jndiConfig
operator|.
name|getConnectionPassword
argument_list|()
decl_stmt|;
try|try
block|{
name|ConnectionFactory
name|cf
init|=
operator|(
name|ConnectionFactory
operator|)
name|jmsConfig
operator|.
name|getJndiTemplate
argument_list|()
operator|.
name|lookup
argument_list|(
name|connectionFactoryName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|cf
operator|instanceof
name|SingleConnectionFactory
operator|)
condition|)
block|{
name|UserCredentialsConnectionFactoryAdapter
name|uccf
init|=
operator|new
name|UserCredentialsConnectionFactoryAdapter
argument_list|()
decl_stmt|;
name|uccf
operator|.
name|setUsername
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|uccf
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|uccf
operator|.
name|setTargetConnectionFactory
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|cf
operator|=
name|uccf
expr_stmt|;
block|}
return|return
name|cf
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create JmsTemplate from configuration information. Most settings are taken from jmsConfig. The QoS      * settings in headers override the settings from jmsConfig      *       * @param jmsConfig configuration information      * @param messageProperties context headers      * @return      */
specifier|public
specifier|static
name|JmsTemplate
name|createJmsTemplate
parameter_list|(
name|JMSConfiguration
name|jmsConfig
parameter_list|,
name|JMSMessageHeadersType
name|messageProperties
parameter_list|)
block|{
if|if
condition|(
name|jmsConfig
operator|.
name|getJmsTemplate
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|jmsConfig
operator|.
name|getJmsTemplate
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|JmsTemplate
name|jmsTemplate
init|=
name|jmsConfig
operator|.
name|isUseJms11
argument_list|()
condition|?
operator|new
name|JmsTemplate
argument_list|()
else|:
operator|new
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate102
argument_list|()
decl_stmt|;
name|jmsTemplate
operator|.
name|setConnectionFactory
argument_list|(
name|jmsConfig
operator|.
name|getOrCreateWrappedConnectionFactory
argument_list|()
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|setPubSubDomain
argument_list|(
name|jmsConfig
operator|.
name|isPubSubDomain
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|jmsConfig
operator|.
name|getReceiveTimeout
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|jmsTemplate
operator|.
name|setReceiveTimeout
argument_list|(
name|jmsConfig
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|timeToLive
init|=
operator|(
name|messageProperties
operator|!=
literal|null
operator|&&
name|messageProperties
operator|.
name|isSetTimeToLive
argument_list|()
operator|)
condition|?
name|messageProperties
operator|.
name|getTimeToLive
argument_list|()
else|:
name|jmsConfig
operator|.
name|getTimeToLive
argument_list|()
decl_stmt|;
name|jmsTemplate
operator|.
name|setTimeToLive
argument_list|(
name|timeToLive
argument_list|)
expr_stmt|;
name|int
name|priority
init|=
operator|(
name|messageProperties
operator|!=
literal|null
operator|&&
name|messageProperties
operator|.
name|isSetJMSPriority
argument_list|()
operator|)
condition|?
name|messageProperties
operator|.
name|getJMSPriority
argument_list|()
else|:
name|jmsConfig
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|jmsTemplate
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|int
name|deliveryMode
init|=
operator|(
name|messageProperties
operator|!=
literal|null
operator|&&
name|messageProperties
operator|.
name|isSetJMSDeliveryMode
argument_list|()
operator|)
condition|?
name|messageProperties
operator|.
name|getJMSDeliveryMode
argument_list|()
else|:
name|jmsConfig
operator|.
name|getDeliveryMode
argument_list|()
decl_stmt|;
name|jmsTemplate
operator|.
name|setDeliveryMode
argument_list|(
name|deliveryMode
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|setExplicitQosEnabled
argument_list|(
name|jmsConfig
operator|.
name|isExplicitQosEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|setSessionTransacted
argument_list|(
name|jmsConfig
operator|.
name|isSessionTransacted
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|jmsConfig
operator|.
name|getDestinationResolver
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|jmsTemplate
operator|.
name|setDestinationResolver
argument_list|(
name|jmsConfig
operator|.
name|getDestinationResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|jmsTemplate
return|;
block|}
comment|/**      * Create and start listener using configuration information from jmsConfig. Uses      * resolveOrCreateDestination to determine the destination for the listener.      *       * @param ei the EndpointInfo for the listener      * @param jmsConfig configuration information      * @param listenerHandler object to be called when a message arrives      * @param destinationName null for temp dest or a destination name      * @return      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|static
name|AbstractMessageListenerContainer
name|createJmsListener
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|JMSConfiguration
name|jmsConfig
parameter_list|,
name|MessageListener
name|listenerHandler
parameter_list|,
name|String
name|destinationName
parameter_list|)
block|{
if|if
condition|(
name|jmsConfig
operator|.
name|getMessageListenerContainer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|AbstractMessageListenerContainer
name|jmsListener
init|=
name|jmsConfig
operator|.
name|getMessageListenerContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|jmsListener
operator|.
name|getMessageListener
argument_list|()
operator|==
literal|null
condition|)
block|{
name|jmsListener
operator|.
name|setMessageListener
argument_list|(
name|listenerHandler
argument_list|)
expr_stmt|;
name|jmsListener
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|jmsListener
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|jmsListener
return|;
block|}
if|if
condition|(
name|jmsConfig
operator|.
name|getMessageListenerContainer
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|jmsConfig
operator|.
name|getMessageListenerContainer
argument_list|()
return|;
block|}
name|DefaultMessageListenerContainer
name|jmsListener
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jmsConfig
operator|.
name|isUseJms11
argument_list|()
condition|)
block|{
comment|//Check to see if transport is being used in JCA RA with XA
name|Method
name|method
init|=
name|ei
operator|.
name|getProperty
argument_list|(
name|JCATransactionalMessageListenerContainer
operator|.
name|MDB_TRANSACTED_METHOD
argument_list|,
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
operator|&&
name|jmsConfig
operator|.
name|getConnectionFactory
argument_list|()
operator|instanceof
name|XAConnectionFactory
condition|)
block|{
name|jmsListener
operator|=
operator|new
name|JCATransactionalMessageListenerContainer
argument_list|(
name|ei
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jmsListener
operator|=
operator|new
name|DefaultMessageListenerContainer
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|jmsListener
operator|=
operator|new
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer102
argument_list|()
expr_stmt|;
block|}
return|return
name|createJmsListener
argument_list|(
name|jmsListener
argument_list|,
name|jmsConfig
argument_list|,
name|listenerHandler
argument_list|,
name|destinationName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Create and start listener using configuration information from jmsConfig. Uses      * resolveOrCreateDestination to determine the destination for the listener.      *       * @param jmsConfig configuration information      * @param listenerHandler object to be called when a message arrives      * @param destinationName null for temp dest or a destination name      * @param messageSelectorPrefix prefix for the messageselector      * @return      */
specifier|public
specifier|static
name|DefaultMessageListenerContainer
name|createJmsListener
parameter_list|(
name|JMSConfiguration
name|jmsConfig
parameter_list|,
name|MessageListener
name|listenerHandler
parameter_list|,
name|Destination
name|destination
parameter_list|,
name|String
name|messageSelectorPrefix
parameter_list|,
name|boolean
name|userCID
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|DefaultMessageListenerContainer
name|jmsListener
init|=
name|jmsConfig
operator|.
name|isUseJms11
argument_list|()
condition|?
operator|new
name|DefaultMessageListenerContainer
argument_list|()
else|:
operator|new
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer102
argument_list|()
decl_stmt|;
return|return
name|createJmsListener
argument_list|(
name|jmsListener
argument_list|,
name|jmsConfig
argument_list|,
name|listenerHandler
argument_list|,
literal|null
argument_list|,
name|destination
argument_list|,
name|messageSelectorPrefix
argument_list|,
name|userCID
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DefaultMessageListenerContainer
name|createJmsListener
parameter_list|(
name|JMSConfiguration
name|jmsConfig
parameter_list|,
name|MessageListener
name|listenerHandler
parameter_list|,
name|String
name|destination
parameter_list|,
name|String
name|messageSelectorPrefix
parameter_list|,
name|boolean
name|userCID
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|DefaultMessageListenerContainer
name|jmsListener
init|=
name|jmsConfig
operator|.
name|isUseJms11
argument_list|()
condition|?
operator|new
name|DefaultMessageListenerContainer
argument_list|()
else|:
operator|new
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer102
argument_list|()
decl_stmt|;
return|return
name|createJmsListener
argument_list|(
name|jmsListener
argument_list|,
name|jmsConfig
argument_list|,
name|listenerHandler
argument_list|,
name|destination
argument_list|,
literal|null
argument_list|,
name|messageSelectorPrefix
argument_list|,
name|userCID
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DefaultMessageListenerContainer
name|createJmsListener
parameter_list|(
name|DefaultMessageListenerContainer
name|jmsListener
parameter_list|,
name|JMSConfiguration
name|jmsConfig
parameter_list|,
name|MessageListener
name|listenerHandler
parameter_list|,
name|String
name|destinationName
parameter_list|,
name|Destination
name|destination
parameter_list|,
name|String
name|messageSelectorPrefix
parameter_list|,
name|boolean
name|userCID
parameter_list|)
block|{
name|jmsListener
operator|.
name|setConcurrentConsumers
argument_list|(
name|jmsConfig
operator|.
name|getConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|jmsListener
operator|.
name|setMaxConcurrentConsumers
argument_list|(
name|jmsConfig
operator|.
name|getMaxConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|jmsListener
operator|.
name|setPubSubDomain
argument_list|(
name|jmsConfig
operator|.
name|isPubSubDomain
argument_list|()
argument_list|)
expr_stmt|;
name|jmsListener
operator|.
name|setPubSubNoLocal
argument_list|(
name|jmsConfig
operator|.
name|isPubSubNoLocal
argument_list|()
argument_list|)
expr_stmt|;
name|jmsListener
operator|.
name|setConnectionFactory
argument_list|(
name|jmsConfig
operator|.
name|getOrCreateWrappedConnectionFactory
argument_list|()
argument_list|)
expr_stmt|;
name|jmsListener
operator|.
name|setMessageSelector
argument_list|(
name|jmsConfig
operator|.
name|getMessageSelector
argument_list|()
argument_list|)
expr_stmt|;
name|jmsListener
operator|.
name|setSubscriptionDurable
argument_list|(
name|jmsConfig
operator|.
name|isSubscriptionDurable
argument_list|()
argument_list|)
expr_stmt|;
name|jmsListener
operator|.
name|setDurableSubscriptionName
argument_list|(
name|jmsConfig
operator|.
name|getDurableSubscriptionName
argument_list|()
argument_list|)
expr_stmt|;
name|jmsListener
operator|.
name|setSessionTransacted
argument_list|(
name|jmsConfig
operator|.
name|isSessionTransacted
argument_list|()
argument_list|)
expr_stmt|;
name|jmsListener
operator|.
name|setTransactionManager
argument_list|(
name|jmsConfig
operator|.
name|getTransactionManager
argument_list|()
argument_list|)
expr_stmt|;
name|jmsListener
operator|.
name|setMessageListener
argument_list|(
name|listenerHandler
argument_list|)
expr_stmt|;
if|if
condition|(
name|jmsConfig
operator|.
name|getReceiveTimeout
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|jmsListener
operator|.
name|setReceiveTimeout
argument_list|(
name|jmsConfig
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jmsConfig
operator|.
name|getRecoveryInterval
argument_list|()
operator|!=
name|JMSConfiguration
operator|.
name|DEFAULT_VALUE
condition|)
block|{
name|jmsListener
operator|.
name|setRecoveryInterval
argument_list|(
name|jmsConfig
operator|.
name|getRecoveryInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jmsConfig
operator|.
name|getCacheLevelName
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|jmsConfig
operator|.
name|getCacheLevelName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|jmsListener
operator|.
name|setCacheLevelName
argument_list|(
name|jmsConfig
operator|.
name|getCacheLevelName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|jmsConfig
operator|.
name|getCacheLevel
argument_list|()
operator|!=
name|JMSConfiguration
operator|.
name|DEFAULT_VALUE
condition|)
block|{
name|jmsListener
operator|.
name|setCacheLevel
argument_list|(
name|jmsConfig
operator|.
name|getCacheLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jmsListener
operator|.
name|getCacheLevel
argument_list|()
operator|>=
name|DefaultMessageListenerContainer
operator|.
name|CACHE_CONSUMER
operator|&&
name|jmsConfig
operator|.
name|getMaxSuspendedContinuations
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"maxSuspendedContinuations value will be ignored - "
operator|+
literal|", please set cacheLevel to the value less than "
operator|+
literal|" org.springframework.jms.listener.DefaultMessageListenerContainer.CACHE_CONSUMER"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jmsConfig
operator|.
name|isAcceptMessagesWhileStopping
argument_list|()
condition|)
block|{
name|jmsListener
operator|.
name|setAcceptMessagesWhileStopping
argument_list|(
name|jmsConfig
operator|.
name|isAcceptMessagesWhileStopping
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|staticSelectorPrefix
init|=
name|jmsConfig
operator|.
name|getConduitSelectorPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|userCID
operator|&&
name|messageSelectorPrefix
operator|!=
literal|null
operator|&&
name|jmsConfig
operator|.
name|isUseConduitIdSelector
argument_list|()
condition|)
block|{
name|jmsListener
operator|.
name|setMessageSelector
argument_list|(
literal|"JMSCorrelationID LIKE '"
operator|+
name|staticSelectorPrefix
operator|+
name|messageSelectorPrefix
operator|+
literal|"%'"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|staticSelectorPrefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|jmsListener
operator|.
name|setMessageSelector
argument_list|(
literal|"JMSCorrelationID LIKE '"
operator|+
name|staticSelectorPrefix
operator|+
literal|"%'"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jmsConfig
operator|.
name|getDestinationResolver
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|jmsListener
operator|.
name|setDestinationResolver
argument_list|(
name|jmsConfig
operator|.
name|getDestinationResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jmsConfig
operator|.
name|getTaskExecutor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setTaskExecutor
argument_list|(
name|jmsListener
argument_list|,
name|jmsConfig
operator|.
name|getTaskExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
name|jmsListener
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|jmsConfig
operator|.
name|isAutoResolveDestination
argument_list|()
condition|)
block|{
name|jmsListener
operator|.
name|setDestinationName
argument_list|(
name|destinationName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JmsTemplate
name|jmsTemplate
init|=
name|createJmsTemplate
argument_list|(
name|jmsConfig
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Destination
name|dest
init|=
name|JMSFactory
operator|.
name|resolveOrCreateDestination
argument_list|(
name|jmsTemplate
argument_list|,
name|destinationName
argument_list|,
name|jmsConfig
operator|.
name|isPubSubDomain
argument_list|()
argument_list|)
decl_stmt|;
name|jmsListener
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
name|jmsListener
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|jmsListener
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|jmsListener
return|;
block|}
specifier|private
specifier|static
name|void
name|setTaskExecutor
parameter_list|(
name|DefaultMessageListenerContainer
name|jmsListener
parameter_list|,
name|TaskExecutor
name|exec
parameter_list|)
block|{
comment|//CXF-2630 - The method sig for DefaultMessageListenerContainer.setTaskExecutor changed between
comment|//Spring 2.5 and 3.0 and code compiled for one won't run on the other.   Thus, we need
comment|//to revert to using some reflection to make this call
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|jmsListener
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
literal|"setTaskExecutor"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|isInstance
argument_list|(
name|exec
argument_list|)
condition|)
block|{
try|try
block|{
name|m
operator|.
name|invoke
argument_list|(
name|jmsListener
argument_list|,
name|exec
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
comment|//if we get here, we couldn't find a valid method or something else went wrong
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"ERROR_SETTING_TASKEXECUTOR"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"NO_SETTASKEXECUTOR_METHOD"
argument_list|,
name|jmsListener
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * If the destinationName given is null then a temporary destination is created else the destination name      * is resolved using the resolver from the jmsConfig      *       * @param jmsTemplate template to use for session and resolver      * @param replyToDestinationName null for temporary destination or a destination name      * @param pubSubDomain true=pubSub, false=Queues      * @return resolved destination      */
specifier|public
specifier|static
name|Destination
name|resolveOrCreateDestination
parameter_list|(
specifier|final
name|JmsTemplate
name|jmsTemplate
parameter_list|,
specifier|final
name|String
name|replyToDestinationName
parameter_list|,
specifier|final
name|boolean
name|pubSubDomain
parameter_list|)
block|{
return|return
name|jmsTemplate
operator|.
name|execute
argument_list|(
operator|new
name|SessionCallback
argument_list|<
name|Destination
argument_list|>
argument_list|()
block|{
specifier|public
name|Destination
name|doInJms
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|replyToDestinationName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|session
operator|instanceof
name|QueueSession
condition|)
block|{
comment|// For JMS 1.0.2
return|return
operator|(
operator|(
name|QueueSession
operator|)
name|session
operator|)
operator|.
name|createTemporaryQueue
argument_list|()
return|;
block|}
else|else
block|{
comment|// For JMS 1.1
return|return
name|session
operator|.
name|createTemporaryQueue
argument_list|()
return|;
block|}
block|}
name|DestinationResolver
name|resolv
init|=
name|jmsTemplate
operator|.
name|getDestinationResolver
argument_list|()
decl_stmt|;
return|return
name|resolv
operator|.
name|resolveDestinationName
argument_list|(
name|session
argument_list|,
name|replyToDestinationName
argument_list|,
name|pubSubDomain
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

