begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SimpleTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueSender
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|AbstractConduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|AbstractMultiplexDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ConduitInitiator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|WorkQueueManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_class
specifier|public
class|class
name|JMSDestination
extends|extends
name|AbstractMultiplexDestination
implements|implements
name|Configurable
implements|,
name|JMSTransport
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|BASE_BEAN_NAME_SUFFIX
init|=
literal|".jms-destination-base"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JMSDestination
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|ServerConfig
name|serverConfig
decl_stmt|;
specifier|protected
name|ServerBehaviorPolicyType
name|runtimePolicy
decl_stmt|;
specifier|protected
name|AddressType
name|address
decl_stmt|;
specifier|protected
name|SessionPoolType
name|sessionPool
decl_stmt|;
specifier|final
name|ConduitInitiator
name|conduitInitiator
decl_stmt|;
specifier|final
name|JMSTransportBase
name|base
decl_stmt|;
name|PooledSession
name|listenerSession
decl_stmt|;
name|JMSListenerThread
name|listenerThread
decl_stmt|;
specifier|public
name|JMSDestination
parameter_list|(
name|Bus
name|b
parameter_list|,
name|ConduitInitiator
name|ci
parameter_list|,
name|EndpointInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|b
argument_list|,
name|getTargetReference
argument_list|(
name|info
argument_list|,
name|b
argument_list|)
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|base
operator|=
operator|new
name|JMSTransportBase
argument_list|(
name|b
argument_list|,
name|endpointInfo
argument_list|,
literal|true
argument_list|,
name|BASE_BEAN_NAME_SUFFIX
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|conduitInitiator
operator|=
name|ci
expr_stmt|;
name|initConfig
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
comment|/**      * @param inMessage the incoming message      * @return the inbuilt backchannel      */
specifier|protected
name|Conduit
name|getInbuiltBackChannel
parameter_list|(
name|Message
name|inMessage
parameter_list|)
block|{
return|return
operator|new
name|BackChannelConduit
argument_list|(
name|EndpointReferenceUtils
operator|.
name|getAnonymousEndpointReference
argument_list|()
argument_list|,
name|inMessage
argument_list|)
return|;
block|}
specifier|public
name|void
name|activate
parameter_list|()
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"JMSServerTransport activate().... "
argument_list|)
expr_stmt|;
try|try
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"establishing JMS connection"
argument_list|)
expr_stmt|;
name|JMSProviderHub
operator|.
name|connect
argument_list|(
name|this
argument_list|,
name|serverConfig
argument_list|,
name|runtimePolicy
argument_list|)
expr_stmt|;
comment|//Get a non-pooled session.
name|listenerSession
operator|=
name|base
operator|.
name|sessionFactory
operator|.
name|get
argument_list|(
name|base
operator|.
name|targetDestination
argument_list|)
expr_stmt|;
name|listenerThread
operator|=
operator|new
name|JMSListenerThread
argument_list|(
name|listenerSession
argument_list|,
name|getEndpointInfo
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getEndpointInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|listenerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|ex
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"JMS connect failed with JMSException : "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|nex
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"JMS connect failed with NamingException : "
argument_list|,
name|nex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
try|try
block|{
name|listenerSession
operator|.
name|consumer
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|listenerThread
operator|!=
literal|null
condition|)
block|{
name|listenerThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|base
operator|.
name|sessionFactory
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//Do nothing here
block|}
catch|catch
parameter_list|(
name|JMSException
name|ex
parameter_list|)
block|{
comment|//Do nothing here
block|}
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"JMSDestination shutdown()"
argument_list|)
expr_stmt|;
name|this
operator|.
name|deactivate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Queue
name|getReplyToDestination
parameter_list|(
name|Message
name|inMessage
parameter_list|)
throws|throws
name|JMSException
throws|,
name|NamingException
block|{
name|Queue
name|replyTo
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|message
init|=
operator|(
name|javax
operator|.
name|jms
operator|.
name|Message
operator|)
name|inMessage
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_REQUEST_MESSAGE
argument_list|)
decl_stmt|;
comment|// If WS-Addressing had set the replyTo header.
if|if
condition|(
name|inMessage
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_REBASED_REPLY_TO
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|replyTo
operator|=
name|base
operator|.
name|sessionFactory
operator|.
name|getQueueFromInitialContext
argument_list|(
operator|(
name|String
operator|)
name|inMessage
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_REBASED_REPLY_TO
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|replyTo
operator|=
operator|(
literal|null
operator|!=
name|message
operator|.
name|getJMSReplyTo
argument_list|()
operator|)
condition|?
operator|(
name|Queue
operator|)
name|message
operator|.
name|getJMSReplyTo
argument_list|()
else|:
operator|(
name|Queue
operator|)
name|base
operator|.
name|replyDestination
expr_stmt|;
block|}
return|return
name|replyTo
return|;
block|}
specifier|public
name|void
name|setReplyCorrelationID
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|Message
name|request
parameter_list|,
name|javax
operator|.
name|jms
operator|.
name|Message
name|reply
parameter_list|)
throws|throws
name|JMSException
block|{
name|String
name|correlationID
init|=
name|request
operator|.
name|getJMSCorrelationID
argument_list|()
decl_stmt|;
if|if
condition|(
name|correlationID
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|correlationID
argument_list|)
operator|&&
name|getRuntimePolicy
argument_list|()
operator|.
name|isUseMessageIDAsCorrelationID
argument_list|()
condition|)
block|{
name|correlationID
operator|=
name|request
operator|.
name|getJMSMessageID
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|correlationID
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|correlationID
argument_list|)
condition|)
block|{
name|reply
operator|.
name|setJMSCorrelationID
argument_list|(
name|correlationID
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|incoming
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"server received request: "
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|Object
name|request
init|=
name|base
operator|.
name|unmarshal
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"The Request Message is [ "
operator|+
name|request
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|message
operator|instanceof
name|TextMessage
condition|)
block|{
name|String
name|requestString
init|=
operator|(
name|String
operator|)
name|request
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"server received request: "
argument_list|,
name|requestString
argument_list|)
expr_stmt|;
name|bytes
operator|=
name|requestString
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//Both ByteMessage and ObjectMessage would get unmarshalled to byte array.
name|bytes
operator|=
operator|(
name|byte
index|[]
operator|)
name|request
expr_stmt|;
block|}
comment|// get the message to be interceptor
name|MessageImpl
name|inMessage
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|inMessage
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|base
operator|.
name|populateIncomingContext
argument_list|(
name|message
argument_list|,
name|inMessage
argument_list|,
name|JMSConstants
operator|.
name|JMS_SERVER_REQUEST_HEADERS
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|JMS_SERVER_RESPONSE_HEADERS
argument_list|,
operator|new
name|JMSMessageHeadersType
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|JMS_REQUEST_MESSAGE
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|setDestination
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
comment|//handle the incoming message
name|incomingObserver
operator|.
name|onMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsex
parameter_list|)
block|{
comment|//TODO: need to revisit for which exception should we throw.
throw|throw
operator|new
name|IOException
argument_list|(
name|jmsex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|connected
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|Destination
name|target
parameter_list|,
name|javax
operator|.
name|jms
operator|.
name|Destination
name|reply
parameter_list|,
name|JMSSessionFactory
name|factory
parameter_list|)
block|{
name|base
operator|.
name|connected
argument_list|(
name|target
argument_list|,
name|reply
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getBeanName
parameter_list|()
block|{
return|return
name|endpointInfo
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".jms-destination"
return|;
block|}
specifier|private
name|void
name|initConfig
parameter_list|()
block|{
name|this
operator|.
name|runtimePolicy
operator|=
name|endpointInfo
operator|.
name|getTraversedExtensor
argument_list|(
operator|new
name|ServerBehaviorPolicyType
argument_list|()
argument_list|,
name|ServerBehaviorPolicyType
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverConfig
operator|=
name|endpointInfo
operator|.
name|getTraversedExtensor
argument_list|(
operator|new
name|ServerConfig
argument_list|()
argument_list|,
name|ServerConfig
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|address
operator|=
name|endpointInfo
operator|.
name|getTraversedExtensor
argument_list|(
operator|new
name|AddressType
argument_list|()
argument_list|,
name|AddressType
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|sessionPool
operator|=
name|endpointInfo
operator|.
name|getTraversedExtensor
argument_list|(
operator|new
name|SessionPoolType
argument_list|()
argument_list|,
name|SessionPoolType
operator|.
name|class
argument_list|)
expr_stmt|;
name|Configurer
name|configurer
init|=
name|base
operator|.
name|bus
operator|.
name|getExtension
argument_list|(
name|Configurer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|configurer
condition|)
block|{
name|configurer
operator|.
name|configureBean
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|AddressType
name|getJMSAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
specifier|public
name|void
name|setJMSAddress
parameter_list|(
name|AddressType
name|a
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|a
expr_stmt|;
block|}
specifier|public
name|ServerBehaviorPolicyType
name|getRuntimePolicy
parameter_list|()
block|{
return|return
name|runtimePolicy
return|;
block|}
specifier|public
name|void
name|setRuntimePolicy
parameter_list|(
name|ServerBehaviorPolicyType
name|runtimePolicy
parameter_list|)
block|{
name|this
operator|.
name|runtimePolicy
operator|=
name|runtimePolicy
expr_stmt|;
block|}
specifier|public
name|ServerConfig
name|getServerConfig
parameter_list|()
block|{
return|return
name|serverConfig
return|;
block|}
specifier|public
name|void
name|setServerConfig
parameter_list|(
name|ServerConfig
name|serverConfig
parameter_list|)
block|{
name|this
operator|.
name|serverConfig
operator|=
name|serverConfig
expr_stmt|;
block|}
specifier|public
name|SessionPoolType
name|getSessionPool
parameter_list|()
block|{
return|return
name|sessionPool
return|;
block|}
specifier|public
name|void
name|setSessionPool
parameter_list|(
name|SessionPoolType
name|sessionPool
parameter_list|)
block|{
name|this
operator|.
name|sessionPool
operator|=
name|sessionPool
expr_stmt|;
block|}
specifier|protected
class|class
name|JMSListenerThread
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|PooledSession
name|listenSession
decl_stmt|;
specifier|private
specifier|final
name|QName
name|name
decl_stmt|;
specifier|public
name|JMSListenerThread
parameter_list|(
name|PooledSession
name|session
parameter_list|,
name|QName
name|n
parameter_list|)
block|{
name|listenSession
operator|=
name|session
expr_stmt|;
name|name
operator|=
name|n
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Executor
name|executor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
name|WorkQueueManager
name|wqm
init|=
name|base
operator|.
name|bus
operator|.
name|getExtension
argument_list|(
name|WorkQueueManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|wqm
condition|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|executor
operator|=
name|wqm
operator|.
name|getNamedWorkQueue
argument_list|(
literal|"{"
operator|+
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"}"
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
name|executor
operator|=
name|wqm
operator|.
name|getNamedWorkQueue
argument_list|(
literal|"jms"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
name|executor
operator|=
name|wqm
operator|.
name|getAutomaticWorkQueue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|javax
operator|.
name|jms
operator|.
name|Message
name|message
init|=
name|listenSession
operator|.
name|consumer
argument_list|()
operator|.
name|receive
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Null message received from message consumer."
argument_list|,
literal|" Exiting ListenerThread::run()."
argument_list|)
expr_stmt|;
return|return;
block|}
while|while
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
comment|//REVISIT  to get the thread pool
comment|//Executor executor = jmsDestination.callback.getExecutor();
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|JMSExecutor
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ree
parameter_list|)
block|{
comment|//FIXME - no room left on workqueue, what to do
comment|//for now, loop until it WILL fit on the queue,
comment|//although we could just dispatch on this thread.
block|}
block|}
else|else
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"handle the incoming message in listener thread"
argument_list|)
expr_stmt|;
try|try
block|{
name|incoming
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Failed to process incoming message : "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|message
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsex
parameter_list|)
block|{
name|jmsex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Exiting ListenerThread::run(): "
argument_list|,
name|jmsex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|jmsex
parameter_list|)
block|{
name|jmsex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Exiting ListenerThread::run(): "
argument_list|,
name|jmsex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
class|class
name|JMSExecutor
implements|implements
name|Runnable
block|{
name|javax
operator|.
name|jms
operator|.
name|Message
name|message
decl_stmt|;
name|JMSExecutor
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|Message
name|m
parameter_list|)
block|{
name|message
operator|=
name|m
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"run the incoming message in the threadpool"
argument_list|)
expr_stmt|;
try|try
block|{
name|incoming
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|//TODO: Decide what to do if we receive the exception.
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Failed to process incoming message : "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// this should deal with the cxf message
specifier|protected
class|class
name|BackChannelConduit
extends|extends
name|AbstractConduit
block|{
specifier|protected
name|Message
name|inMessage
decl_stmt|;
name|BackChannelConduit
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|inMessage
operator|=
name|message
expr_stmt|;
block|}
comment|/**          * Register a message observer for incoming messages.          *           * @param observer the observer to notify on receipt of incoming          */
specifier|public
name|void
name|setMessageObserver
parameter_list|(
name|MessageObserver
name|observer
parameter_list|)
block|{
comment|// shouldn't be called for a back channel conduit
block|}
comment|/**          * Send an outbound message, assumed to contain all the name-value          * mappings of the corresponding input message (if any).           *           * @param message the message to be sent.          */
specifier|public
name|void
name|prepare
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
comment|// setup the message to be send back
name|message
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|JMS_REQUEST_MESSAGE
argument_list|,
name|inMessage
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_REQUEST_MESSAGE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|message
operator|.
name|containsKey
argument_list|(
name|JMSConstants
operator|.
name|JMS_SERVER_RESPONSE_HEADERS
argument_list|)
operator|&&
name|inMessage
operator|.
name|containsKey
argument_list|(
name|JMSConstants
operator|.
name|JMS_SERVER_RESPONSE_HEADERS
argument_list|)
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|JMSConstants
operator|.
name|JMS_SERVER_RESPONSE_HEADERS
argument_list|,
name|inMessage
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_SERVER_RESPONSE_HEADERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|setContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
operator|new
name|JMSOutputStream
argument_list|(
name|inMessage
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
block|}
specifier|private
class|class
name|JMSOutputStream
extends|extends
name|CachedOutputStream
block|{
specifier|private
name|Message
name|inMessage
decl_stmt|;
specifier|private
name|Message
name|outMessage
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|Message
name|reply
decl_stmt|;
specifier|private
name|Queue
name|replyTo
decl_stmt|;
specifier|private
name|QueueSender
name|sender
decl_stmt|;
comment|// setup the ByteArrayStream
specifier|public
name|JMSOutputStream
parameter_list|(
name|Message
name|m
parameter_list|,
name|Message
name|o
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|inMessage
operator|=
name|m
expr_stmt|;
name|outMessage
operator|=
name|o
expr_stmt|;
block|}
comment|//to prepear the message and get the send out message
specifier|private
name|void
name|commitOutputMessage
parameter_list|()
throws|throws
name|IOException
block|{
name|JMSMessageHeadersType
name|headers
init|=
operator|(
name|JMSMessageHeadersType
operator|)
name|outMessage
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_SERVER_RESPONSE_HEADERS
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|request
init|=
operator|(
name|javax
operator|.
name|jms
operator|.
name|Message
operator|)
name|inMessage
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_REQUEST_MESSAGE
argument_list|)
decl_stmt|;
name|PooledSession
name|replySession
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|base
operator|.
name|isDestinationStyleQueue
argument_list|()
condition|)
block|{
try|try
block|{
comment|//setup the reply message
name|replyTo
operator|=
name|getReplyToDestination
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
name|replySession
operator|=
name|base
operator|.
name|sessionFactory
operator|.
name|get
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sender
operator|=
operator|(
name|QueueSender
operator|)
name|replySession
operator|.
name|producer
argument_list|()
expr_stmt|;
name|String
name|msgType
init|=
name|JMSConstants
operator|.
name|TEXT_MESSAGE_TYPE
decl_stmt|;
name|Object
name|replyObj
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|TextMessage
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|this
operator|.
name|writeCacheTo
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|replyObj
operator|=
name|builder
operator|.
name|toString
argument_list|()
expr_stmt|;
name|msgType
operator|=
name|JMSConstants
operator|.
name|TEXT_MESSAGE_TYPE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|instanceof
name|BytesMessage
condition|)
block|{
name|replyObj
operator|=
name|getBytes
argument_list|()
expr_stmt|;
name|msgType
operator|=
name|JMSConstants
operator|.
name|BYTE_MESSAGE_TYPE
expr_stmt|;
block|}
else|else
block|{
name|replyObj
operator|=
name|getBytes
argument_list|()
expr_stmt|;
name|msgType
operator|=
name|JMSConstants
operator|.
name|BINARY_MESSAGE_TYPE
expr_stmt|;
block|}
if|if
condition|(
name|getLogger
argument_list|()
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"The response message is ["
operator|+
operator|(
name|replyObj
operator|instanceof
name|String
condition|?
operator|(
name|String
operator|)
name|replyObj
else|:
name|IOUtils
operator|.
name|newStringFromBytes
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|replyObj
argument_list|)
operator|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|reply
operator|=
name|base
operator|.
name|marshal
argument_list|(
name|replyObj
argument_list|,
name|replySession
operator|.
name|session
argument_list|()
argument_list|,
literal|null
argument_list|,
name|msgType
argument_list|)
expr_stmt|;
name|setReplyCorrelationID
argument_list|(
name|request
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|base
operator|.
name|setMessageProperties
argument_list|(
name|headers
argument_list|,
name|reply
argument_list|)
expr_stmt|;
comment|//ensure that the contentType is set to the out jms message header
name|base
operator|.
name|setContentToProtocalHeader
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|protHeaders
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|outMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
name|base
operator|.
name|addProtocolHeaders
argument_list|(
name|reply
argument_list|,
name|protHeaders
argument_list|)
expr_stmt|;
name|sendResponse
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|ex
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Failed in post dispatch ..."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|nex
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Failed in post dispatch ..."
argument_list|,
name|nex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|nex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// house-keeping
if|if
condition|(
name|replySession
operator|!=
literal|null
condition|)
block|{
name|base
operator|.
name|sessionFactory
operator|.
name|recycle
argument_list|(
name|replySession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// we will never receive a non-oneway invocation in pub-sub
comment|// domain from CXF client - however a mis-behaving pure JMS
comment|// client could conceivably make suce an invocation, in which
comment|// case we silently discard the reply
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"discarding reply for non-oneway invocation "
argument_list|,
literal|"with 'topic' destinationStyle"
argument_list|)
expr_stmt|;
block|}
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"just server sending reply: "
argument_list|,
name|reply
argument_list|)
expr_stmt|;
comment|// Check the reply time limit Stream close will call for this
block|}
specifier|private
name|void
name|sendResponse
parameter_list|()
throws|throws
name|JMSException
block|{
name|JMSMessageHeadersType
name|headers
init|=
operator|(
name|JMSMessageHeadersType
operator|)
name|inMessage
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_SERVER_REQUEST_HEADERS
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|request
init|=
operator|(
name|javax
operator|.
name|jms
operator|.
name|Message
operator|)
name|inMessage
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_REQUEST_MESSAGE
argument_list|)
decl_stmt|;
name|int
name|deliveryMode
init|=
name|base
operator|.
name|getJMSDeliveryMode
argument_list|(
name|headers
argument_list|)
decl_stmt|;
name|int
name|priority
init|=
name|base
operator|.
name|getJMSPriority
argument_list|(
name|headers
argument_list|)
decl_stmt|;
name|long
name|ttl
init|=
name|base
operator|.
name|getTimeToLive
argument_list|(
name|headers
argument_list|)
decl_stmt|;
if|if
condition|(
name|ttl
operator|<=
literal|0
condition|)
block|{
name|ttl
operator|=
name|getServerConfig
argument_list|()
operator|.
name|getMessageTimeToLive
argument_list|()
expr_stmt|;
block|}
name|long
name|timeToLive
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getJMSExpiration
argument_list|()
operator|>
literal|0
condition|)
block|{
name|TimeZone
name|tz
init|=
operator|new
name|SimpleTimeZone
argument_list|(
literal|0
argument_list|,
literal|"GMT"
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
operator|new
name|GregorianCalendar
argument_list|(
name|tz
argument_list|)
decl_stmt|;
name|timeToLive
operator|=
name|request
operator|.
name|getJMSExpiration
argument_list|()
operator|-
name|cal
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timeToLive
operator|>=
literal|0
condition|)
block|{
name|ttl
operator|=
name|ttl
operator|>
literal|0
condition|?
name|ttl
else|:
name|timeToLive
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"send out the message!"
argument_list|)
expr_stmt|;
name|sender
operator|.
name|send
argument_list|(
name|replyTo
argument_list|,
name|reply
argument_list|,
name|deliveryMode
argument_list|,
name|priority
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the request message had dead
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"Message time to live is already expired skipping response."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doFlush
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO Auto-generated method stub
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
name|commitOutputMessage
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onWrite
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Do nothing here
block|}
block|}
block|}
end_class

end_unit

