begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_comment
comment|/**  * This class acts as the hub of JMS provider usage, creating shared JMS Connections and providing access to a  * pool of JMS Sessions.  *<p>  * A new JMS connection is created for each each port based<jms:address> - however its likely that in  * practice the same JMS provider will be specified for each port, and hence the connection resources could be  * shared accross ports.  *<p>  * For the moment this class is realized as just a container for static methods, but the intention is to  * support in future sharing of JMS resources accross compatible ports.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|JMSProviderHub
block|{
comment|/**      * Constructor.      */
specifier|private
name|JMSProviderHub
parameter_list|()
block|{     }
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"JMSProviderHub"
return|;
block|}
specifier|protected
specifier|static
name|void
name|connect
parameter_list|(
name|JMSOnConnectCallback
name|onConnectCallback
parameter_list|,
name|AddressType
name|addrDetails
parameter_list|,
name|SessionPoolType
name|sessionPoolConfig
parameter_list|)
throws|throws
name|JMSException
throws|,
name|NamingException
block|{
name|connect
argument_list|(
name|onConnectCallback
argument_list|,
name|addrDetails
argument_list|,
name|sessionPoolConfig
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Destination
name|resolveRequestDestination
parameter_list|(
name|Context
name|context
parameter_list|,
name|Connection
name|connection
parameter_list|,
name|AddressType
name|addrDetails
parameter_list|)
throws|throws
name|JMSException
throws|,
name|NamingException
block|{
name|Destination
name|requestDestination
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// see if jndiDestination is set
if|if
condition|(
name|addrDetails
operator|.
name|getJndiDestinationName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|requestDestination
operator|=
operator|(
name|Destination
operator|)
name|context
operator|.
name|lookup
argument_list|(
name|addrDetails
operator|.
name|getJndiDestinationName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if no jndiDestination or it fails see if jmsDestination is set
comment|// and try to create it.
if|if
condition|(
name|requestDestination
operator|==
literal|null
operator|&&
name|addrDetails
operator|.
name|getJmsDestinationName
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|JMSUtils
operator|.
name|isDestinationStyleQueue
argument_list|(
name|addrDetails
argument_list|)
condition|)
block|{
name|requestDestination
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
operator|.
name|createQueue
argument_list|(
name|addrDetails
operator|.
name|getJmsDestinationName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requestDestination
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
operator|.
name|createTopic
argument_list|(
name|addrDetails
operator|.
name|getJmsDestinationName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|requestDestination
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|ne
parameter_list|)
block|{
comment|// Propogate NamingException.
throw|throw
name|ne
throw|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|connect
parameter_list|(
name|JMSOnConnectCallback
name|onConnectCallBack
parameter_list|,
name|AddressType
name|addrDetails
parameter_list|,
name|SessionPoolType
name|sessionPoolConfig
parameter_list|,
name|ServerConfig
name|jmsDestConfigBean
parameter_list|,
name|ServerBehaviorPolicyType
name|runtimePolicy
parameter_list|)
throws|throws
name|JMSException
throws|,
name|NamingException
block|{
comment|// get JMS connection resources and destination
comment|//
name|Context
name|context
init|=
name|JMSUtils
operator|.
name|getInitialContext
argument_list|(
name|addrDetails
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|JMSUtils
operator|.
name|isDestinationStyleQueue
argument_list|(
name|addrDetails
argument_list|)
condition|)
block|{
name|QueueConnectionFactory
name|qcf
init|=
operator|(
name|QueueConnectionFactory
operator|)
name|context
operator|.
name|lookup
argument_list|(
name|addrDetails
operator|.
name|getJndiConnectionFactoryName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|addrDetails
operator|.
name|isSetConnectionUserName
argument_list|()
condition|)
block|{
name|connection
operator|=
name|qcf
operator|.
name|createQueueConnection
argument_list|(
name|addrDetails
operator|.
name|getConnectionUserName
argument_list|()
argument_list|,
name|addrDetails
operator|.
name|getConnectionPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|=
name|qcf
operator|.
name|createQueueConnection
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TopicConnectionFactory
name|tcf
init|=
operator|(
name|TopicConnectionFactory
operator|)
name|context
operator|.
name|lookup
argument_list|(
name|addrDetails
operator|.
name|getJndiConnectionFactoryName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|addrDetails
operator|.
name|isSetConnectionUserName
argument_list|()
condition|)
block|{
name|connection
operator|=
name|tcf
operator|.
name|createTopicConnection
argument_list|(
name|addrDetails
operator|.
name|getConnectionUserName
argument_list|()
argument_list|,
name|addrDetails
operator|.
name|getConnectionPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|=
name|tcf
operator|.
name|createTopicConnection
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|jmsDestConfigBean
condition|)
block|{
name|String
name|clientID
init|=
name|jmsDestConfigBean
operator|.
name|getDurableSubscriptionClientId
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientID
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|setClientID
argument_list|(
name|clientID
argument_list|)
expr_stmt|;
block|}
block|}
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Destination
name|requestDestination
init|=
name|resolveRequestDestination
argument_list|(
name|context
argument_list|,
name|connection
argument_list|,
name|addrDetails
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestDestination
operator|==
literal|null
condition|)
block|{
comment|// fail to locate or create requestDestination throw Exception.
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Failed to lookup or create requestDestination"
argument_list|)
throw|;
block|}
name|Destination
name|replyDestination
init|=
name|resolveReplyDestination
argument_list|(
name|addrDetails
argument_list|,
name|context
argument_list|,
name|connection
argument_list|)
decl_stmt|;
comment|// create session factory to manage session, reply destination,
comment|// producer and consumer pooling
comment|//
name|JMSSessionFactory
name|sf
init|=
operator|new
name|JMSSessionFactory
argument_list|(
name|connection
argument_list|,
name|replyDestination
argument_list|,
name|context
argument_list|,
name|JMSUtils
operator|.
name|isDestinationStyleQueue
argument_list|(
name|addrDetails
argument_list|)
argument_list|,
name|sessionPoolConfig
argument_list|,
name|runtimePolicy
argument_list|)
decl_stmt|;
comment|// notify transport that connection is complete
name|onConnectCallBack
operator|.
name|connected
argument_list|(
name|requestDestination
argument_list|,
name|replyDestination
argument_list|,
name|sf
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Destination
name|resolveReplyDestination
parameter_list|(
name|AddressType
name|addrDetails
parameter_list|,
name|Context
name|context
parameter_list|,
name|Connection
name|connection
parameter_list|)
throws|throws
name|NamingException
throws|,
name|JMSException
block|{
name|Destination
name|replyDestination
init|=
literal|null
decl_stmt|;
comment|// Reply Destination is used (if present) only if the session is
comment|// point-to-point session
if|if
condition|(
name|JMSUtils
operator|.
name|isDestinationStyleQueue
argument_list|(
name|addrDetails
argument_list|)
condition|)
block|{
if|if
condition|(
name|addrDetails
operator|.
name|getJndiReplyDestinationName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|replyDestination
operator|=
operator|(
name|Destination
operator|)
name|context
operator|.
name|lookup
argument_list|(
name|addrDetails
operator|.
name|getJndiReplyDestinationName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|replyDestination
operator|==
literal|null
operator|&&
name|addrDetails
operator|.
name|getJmsReplyDestinationName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|replyDestination
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
operator|.
name|createQueue
argument_list|(
name|addrDetails
operator|.
name|getJmsReplyDestinationName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|replyDestination
return|;
block|}
block|}
end_class

end_unit

