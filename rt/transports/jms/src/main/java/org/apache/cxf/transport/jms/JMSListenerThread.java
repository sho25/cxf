begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|SynchronousExecutor
import|;
end_import

begin_comment
comment|/**  * Waits for JMS messages to be received on a JMS Destination. When a message is received it is forwarded to  * the JMSDestination.incoming() method using an Executor  */
end_comment

begin_class
class|class
name|JMSListenerThread
extends|extends
name|Thread
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JMSListenerThread
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MessageListener
name|messageListener
decl_stmt|;
specifier|private
name|Executor
name|executor
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|MessageConsumer
name|consumer
decl_stmt|;
specifier|public
name|JMSListenerThread
parameter_list|(
name|Executor
name|executor
parameter_list|,
name|MessageListener
name|messageListener
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|messageListener
operator|=
name|messageListener
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Destination
name|destination
parameter_list|,
name|String
name|messageSelector
parameter_list|,
name|String
name|durableName
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|destination
operator|instanceof
name|Queue
condition|)
block|{
name|QueueSession
name|qSession
init|=
operator|(
operator|(
name|QueueConnection
operator|)
name|connection
operator|)
operator|.
name|createQueueSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|consumer
operator|=
name|qSession
operator|.
name|createReceiver
argument_list|(
operator|(
name|Queue
operator|)
name|destination
argument_list|)
expr_stmt|;
name|session
operator|=
name|qSession
expr_stmt|;
block|}
else|else
block|{
name|TopicSession
name|tSession
init|=
operator|(
operator|(
name|TopicConnection
operator|)
name|connection
operator|)
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|sub
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|durableName
operator|!=
literal|null
condition|)
block|{
name|sub
operator|=
name|tSession
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|destination
argument_list|,
name|durableName
argument_list|,
name|messageSelector
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sub
operator|=
name|tSession
operator|.
name|createSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|destination
argument_list|,
name|messageSelector
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|=
name|sub
expr_stmt|;
name|session
operator|=
name|tSession
expr_stmt|;
block|}
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|javax
operator|.
name|jms
operator|.
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Null message received from message consumer."
argument_list|,
literal|" Exiting ListenerThread::run()."
argument_list|)
expr_stmt|;
return|return;
block|}
while|while
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
comment|// REVISIT to get the thread pool
comment|// Executor executor = jmsDestination.callback.getExecutor();
try|try
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|JMSExecutable
argument_list|(
name|message
argument_list|,
name|messageListener
argument_list|,
name|executor
operator|instanceof
name|SynchronousExecutor
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ree
parameter_list|)
block|{
comment|// FIXME - no room left on workqueue, what to do
comment|// for now, loop until it WILL fit on the queue,
comment|// although we could just dispatch on this thread.
block|}
name|message
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jmsex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Exiting ListenerThread::run(): "
argument_list|,
name|jmsex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
block|{
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
comment|// Do nothing here
block|}
block|}
block|}
specifier|protected
class|class
name|JMSExecutable
implements|implements
name|Runnable
block|{
specifier|private
name|Message
name|message
decl_stmt|;
specifier|private
name|MessageListener
name|messageListener
decl_stmt|;
specifier|private
name|boolean
name|inThreadPool
decl_stmt|;
name|JMSExecutable
parameter_list|(
name|Message
name|message
parameter_list|,
name|MessageListener
name|messageListener
parameter_list|,
name|boolean
name|inThreadPool
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|messageListener
operator|=
name|messageListener
expr_stmt|;
name|this
operator|.
name|inThreadPool
operator|=
name|inThreadPool
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|logMessage
init|=
literal|"handle the incoming message in "
operator|+
operator|(
name|inThreadPool
condition|?
literal|"the threadpool"
else|:
literal|"listener thread"
operator|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
name|logMessage
argument_list|)
expr_stmt|;
try|try
block|{
name|messageListener
operator|.
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
comment|// TODO: Decide what to do if we receive the exception.
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Failed to process incoming message : "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
try|try
block|{
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Do nothing here
block|}
block|}
block|}
end_class

end_unit

