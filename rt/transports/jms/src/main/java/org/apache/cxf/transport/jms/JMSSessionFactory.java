begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|AbstractTwoStageCache
import|;
end_import

begin_comment
comment|/**  * This class encapsulates the creation and pooling logic for JMS Sessions.  * The usage patterns for sessions, producers& consumers are as follows ...  *<p>  * client-side: an invoking thread requires relatively short-term exclusive  * use of a session, an unidentified producer to send the request message,  * and in the point-to-point domain a consumer for the temporary ReplyTo  * destination to synchronously receive the reply if the operation is twoway  * (in the pub-sub domain only oneway operations are supported, so a there  * is never a requirement for a reply destination)  *<p>  * server-side receive: each port based on<jms:address> requires relatively  * long-term exclusive use of a session, a consumer with a MessageListener for  * the JMS destination specified for the port, and an unidentified producer  * to send the request message  *<p>  * server-side send: each dispatch of a twoway request requires relatively  * short-term exclusive use of a session and an indentified producer (but  * not a consumer) - note that the session used for the recieve side cannot  * be re-used for the send, as MessageListener usage precludes any synchronous  * sends or receives on that session  *<p>  * So on the client-side, pooling of sessions is bound up with pooling  * of temporary reply destinations, whereas on the server receive side  * the benefit of pooling is marginal as the session is required from  * the point at which the port was activated until the Bus is shutdown  * The server send side resembles the client side,  * except that a consumer for the temporary destination is never required.  * Hence different pooling strategies make sense ...  *<p>  * client-side: a SoftReference-based cache of send/receive sessions is  * maintained containing an aggregate of a session, indentified producer,  * temporary reply destination& consumer for same  *<p>  * server-side receive: as sessions cannot be usefully recycled, they are  * simply created on demand and closed when no longer required  *<p>  * server-side send: a SoftReference-based cache of send-only sessions is  * maintained containing an aggregate of a session and an indentified producer  *<p>  * In a pure client or pure server, only a single cache is ever  * populated.  Where client and server logic is co-located, a client  * session retrieval for a twoway invocation checks the reply-capable  * cache first and then the send-only cache - if a session is  * available in the later then its used after a tempory destination is  * created before being recycled back into the reply-capable cache. A  * server send side retrieval or client retrieval for a oneway  * invocation checks the send-only cache first and then the  * reply-capable cache - if a session is available in the later then  * its used and the tempory destination is ignored. So in the  * co-located case, sessions migrate from the send-only cache to the  * reply-capable cache as necessary.  *<p>  *  */
end_comment

begin_class
specifier|public
class|class
name|JMSSessionFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JMSSessionFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|lowWaterMark
decl_stmt|;
specifier|private
name|int
name|highWaterMark
decl_stmt|;
specifier|private
specifier|final
name|Context
name|initialContext
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|theConnection
decl_stmt|;
specifier|private
name|AbstractTwoStageCache
argument_list|<
name|PooledSession
argument_list|>
name|replyCapableSessionCache
decl_stmt|;
specifier|private
name|AbstractTwoStageCache
argument_list|<
name|PooledSession
argument_list|>
name|sendOnlySessionCache
decl_stmt|;
specifier|private
specifier|final
name|Destination
name|theReplyDestination
decl_stmt|;
specifier|private
specifier|final
name|JMSTransport
name|jmsTransport
decl_stmt|;
specifier|private
specifier|final
name|ServerBehaviorPolicyType
name|runtimePolicy
decl_stmt|;
comment|/**      * Constructor.      *      * @param connection the shared {Queue|Topic}Connection      */
specifier|public
name|JMSSessionFactory
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Destination
name|replyDestination
parameter_list|,
name|Context
name|context
parameter_list|,
name|JMSTransport
name|tbb
parameter_list|,
name|ServerBehaviorPolicyType
name|runtimePolicy
parameter_list|)
block|{
name|theConnection
operator|=
name|connection
expr_stmt|;
name|theReplyDestination
operator|=
name|replyDestination
expr_stmt|;
name|initialContext
operator|=
name|context
expr_stmt|;
name|jmsTransport
operator|=
name|tbb
expr_stmt|;
name|this
operator|.
name|runtimePolicy
operator|=
name|runtimePolicy
expr_stmt|;
name|SessionPoolType
name|sessionPoolConfig
init|=
name|jmsTransport
operator|.
name|getSessionPool
argument_list|()
decl_stmt|;
name|lowWaterMark
operator|=
name|sessionPoolConfig
operator|.
name|getLowWaterMark
argument_list|()
expr_stmt|;
name|highWaterMark
operator|=
name|sessionPoolConfig
operator|.
name|getHighWaterMark
argument_list|()
expr_stmt|;
comment|// create session caches (REVISIT sizes should be configurable)
comment|//
if|if
condition|(
name|isDestinationStyleQueue
argument_list|()
condition|)
block|{
comment|// the reply capable cache is only required in the point-to-point
comment|// domain
comment|//
name|replyCapableSessionCache
operator|=
operator|new
name|AbstractTwoStageCache
argument_list|<
name|PooledSession
argument_list|>
argument_list|(
name|lowWaterMark
argument_list|,
name|highWaterMark
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
block|{
specifier|public
specifier|final
name|PooledSession
name|create
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|createPointToPointReplyCapableSession
argument_list|()
return|;
block|}
block|}
expr_stmt|;
try|try
block|{
name|replyCapableSessionCache
operator|.
name|populateCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"JMS Session cache populate failed: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
comment|// send-only cache for point-to-point oneway requests and replies
comment|//
name|sendOnlySessionCache
operator|=
operator|new
name|AbstractTwoStageCache
argument_list|<
name|PooledSession
argument_list|>
argument_list|(
name|lowWaterMark
argument_list|,
name|highWaterMark
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
block|{
specifier|public
specifier|final
name|PooledSession
name|create
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|createPointToPointSendOnlySession
argument_list|()
return|;
block|}
block|}
expr_stmt|;
try|try
block|{
name|sendOnlySessionCache
operator|.
name|populateCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"JMS Session cache populate failed: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// send-only cache for pub-sub oneway requests
comment|//
name|sendOnlySessionCache
operator|=
operator|new
name|AbstractTwoStageCache
argument_list|<
name|PooledSession
argument_list|>
argument_list|(
name|lowWaterMark
argument_list|,
name|highWaterMark
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
block|{
specifier|public
specifier|final
name|PooledSession
name|create
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|createPubSubSession
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
expr_stmt|;
try|try
block|{
name|sendOnlySessionCache
operator|.
name|populateCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"JMS Session cache populate failed: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//--java.lang.Object Overrides----------------------------------------------
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"JMSSessionFactory"
return|;
block|}
comment|//--Methods-----------------------------------------------------------------
specifier|protected
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|theConnection
return|;
block|}
specifier|public
name|Queue
name|getQueueFromInitialContext
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|NamingException
block|{
return|return
operator|(
name|Queue
operator|)
name|initialContext
operator|.
name|lookup
argument_list|(
name|queueName
argument_list|)
return|;
block|}
specifier|public
name|PooledSession
name|get
parameter_list|(
name|boolean
name|replyCapable
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|get
argument_list|(
literal|null
argument_list|,
name|replyCapable
argument_list|)
return|;
block|}
comment|/**      * Retrieve a new or cached Session.      * @param replyDest Destination name if coming from wsa:Header      * @param replyCapable true iff the session is to be used to receive replies      * (implies client side twoway invocation )      * @return a new or cached Session      */
specifier|public
name|PooledSession
name|get
parameter_list|(
name|Destination
name|replyDest
parameter_list|,
name|boolean
name|replyCapable
parameter_list|)
throws|throws
name|JMSException
block|{
name|PooledSession
name|ret
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|replyCapable
condition|)
block|{
comment|// first try reply capable cache
comment|//
name|ret
operator|=
name|replyCapableSessionCache
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
comment|// fall back to send only cache, creating temporary reply
comment|// queue and consumer
comment|//
name|ret
operator|=
name|sendOnlySessionCache
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
name|QueueSession
name|session
init|=
operator|(
name|QueueSession
operator|)
name|ret
operator|.
name|session
argument_list|()
decl_stmt|;
name|Queue
name|destination
init|=
literal|null
decl_stmt|;
name|String
name|selector
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|theReplyDestination
operator|||
literal|null
operator|!=
name|replyDest
condition|)
block|{
name|destination
operator|=
literal|null
operator|!=
name|replyDest
condition|?
operator|(
name|Queue
operator|)
name|replyDest
else|:
operator|(
name|Queue
operator|)
name|theReplyDestination
expr_stmt|;
name|selector
operator|=
literal|"JMSCorrelationID = '"
operator|+
name|generateUniqueSelector
argument_list|(
name|ret
argument_list|)
operator|+
literal|"'"
expr_stmt|;
block|}
if|if
condition|(
name|destination
operator|==
literal|null
condition|)
block|{
comment|//neither replyDestination not replyDest are present.
name|destination
operator|=
name|session
operator|.
name|createTemporaryQueue
argument_list|()
expr_stmt|;
name|selector
operator|=
literal|"JMSCorrelationID = '"
operator|+
name|generateUniqueSelector
argument_list|(
name|ret
argument_list|)
operator|+
literal|"'"
expr_stmt|;
block|}
name|ret
operator|.
name|destination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createReceiver
argument_list|(
name|destination
argument_list|,
name|selector
argument_list|)
decl_stmt|;
name|ret
operator|.
name|consumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no pooled session available in either cache => create one in
comment|// in the reply capable cache
comment|//
try|try
block|{
name|ret
operator|=
name|replyCapableSessionCache
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// factory method may only throw JMSException
comment|//
throw|throw
operator|(
name|JMSException
operator|)
name|t
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// first try send only cache
comment|//
name|ret
operator|=
name|sendOnlySessionCache
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
comment|// fall back to reply capable cache if one exists (only in the
comment|// point-to-point domain), ignoring temporary reply destination
comment|// and consumer
comment|//
if|if
condition|(
name|replyCapableSessionCache
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|replyCapableSessionCache
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
comment|// no pooled session available in either cache => create one in
comment|// in the send only cache
comment|//
try|try
block|{
name|ret
operator|=
name|sendOnlySessionCache
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// factory method may only throw JMSException
comment|//
throw|throw
operator|(
name|JMSException
operator|)
name|t
throw|;
block|}
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Retrieve a new      *      * @param destination the target JMS queue or topic (non-null implies      * server receive side)      * @return a new or cached Session      */
specifier|public
name|PooledSession
name|get
parameter_list|(
name|Destination
name|destination
parameter_list|)
throws|throws
name|JMSException
block|{
name|PooledSession
name|ret
init|=
literal|null
decl_stmt|;
comment|// the destination is only specified on the server receive side,
comment|// in which case a new session is always created
comment|//
if|if
condition|(
name|isDestinationStyleQueue
argument_list|()
condition|)
block|{
name|ret
operator|=
name|createPointToPointServerSession
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|createPubSubSession
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Return a Session to the pool      *      * @param pooled_session the session to recycle      */
specifier|public
name|void
name|recycle
parameter_list|(
name|PooledSession
name|pooledSession
parameter_list|)
block|{
comment|// sessions used long-term by the server receive side are not cached,
comment|// only non-null destinations are temp queues
specifier|final
name|boolean
name|replyCapable
init|=
name|pooledSession
operator|.
name|destination
argument_list|()
operator|!=
literal|null
decl_stmt|;
name|boolean
name|discard
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// re-cache session, closing if it cannot be it can be accomodated
comment|//
name|discard
operator|=
name|replyCapable
condition|?
operator|(
operator|!
name|replyCapableSessionCache
operator|.
name|recycle
argument_list|(
name|pooledSession
argument_list|)
operator|)
else|:
operator|(
operator|!
name|sendOnlySessionCache
operator|.
name|recycle
argument_list|(
name|pooledSession
argument_list|)
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|discard
condition|)
block|{
try|try
block|{
name|pooledSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"JMS Session discard failed: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Shutdown the session factory.      */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
try|try
block|{
name|PooledSession
name|curr
decl_stmt|;
if|if
condition|(
name|replyCapableSessionCache
operator|!=
literal|null
condition|)
block|{
name|curr
operator|=
name|replyCapableSessionCache
operator|.
name|poll
argument_list|()
expr_stmt|;
while|while
condition|(
name|curr
operator|!=
literal|null
condition|)
block|{
name|curr
operator|.
name|close
argument_list|()
expr_stmt|;
name|curr
operator|=
name|replyCapableSessionCache
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sendOnlySessionCache
operator|!=
literal|null
condition|)
block|{
name|curr
operator|=
name|sendOnlySessionCache
operator|.
name|poll
argument_list|()
expr_stmt|;
while|while
condition|(
name|curr
operator|!=
literal|null
condition|)
block|{
name|curr
operator|.
name|close
argument_list|()
expr_stmt|;
name|curr
operator|=
name|sendOnlySessionCache
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
block|}
name|theConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"queue connection close failed: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|// help GC
comment|//
name|replyCapableSessionCache
operator|=
literal|null
expr_stmt|;
name|sendOnlySessionCache
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Helper method to create a point-to-point pooled session.      *      * @param producer true iff producing      * @param consumer true iff consuming      * @param destination the target destination      * @return an appropriate pooled session      */
name|PooledSession
name|createPointToPointReplyCapableSession
parameter_list|()
throws|throws
name|JMSException
block|{
name|QueueSession
name|session
init|=
operator|(
operator|(
name|QueueConnection
operator|)
name|theConnection
operator|)
operator|.
name|createQueueSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
literal|null
decl_stmt|;
name|String
name|selector
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|theReplyDestination
condition|)
block|{
name|destination
operator|=
name|theReplyDestination
expr_stmt|;
name|selector
operator|=
literal|"JMSCorrelationID = '"
operator|+
name|generateUniqueSelector
argument_list|(
name|session
argument_list|)
operator|+
literal|"'"
expr_stmt|;
block|}
else|else
block|{
name|destination
operator|=
name|session
operator|.
name|createTemporaryQueue
argument_list|()
expr_stmt|;
block|}
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createReceiver
argument_list|(
operator|(
name|Queue
operator|)
name|destination
argument_list|,
name|selector
argument_list|)
decl_stmt|;
return|return
operator|new
name|PooledSession
argument_list|(
name|session
argument_list|,
name|destination
argument_list|,
name|session
operator|.
name|createSender
argument_list|(
literal|null
argument_list|)
argument_list|,
name|consumer
argument_list|)
return|;
block|}
comment|/**      * Helper method to create a point-to-point pooled session.      *      * @return an appropriate pooled session      */
name|PooledSession
name|createPointToPointSendOnlySession
parameter_list|()
throws|throws
name|JMSException
block|{
name|QueueSession
name|session
init|=
operator|(
operator|(
name|QueueConnection
operator|)
name|theConnection
operator|)
operator|.
name|createQueueSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
return|return
operator|new
name|PooledSession
argument_list|(
name|session
argument_list|,
literal|null
argument_list|,
name|session
operator|.
name|createSender
argument_list|(
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Helper method to create a point-to-point pooled session for consumer only.      *      * @param destination the target destination      * @return an appropriate pooled session      */
specifier|private
name|PooledSession
name|createPointToPointServerSession
parameter_list|(
name|Destination
name|destination
parameter_list|)
throws|throws
name|JMSException
block|{
name|QueueSession
name|session
init|=
operator|(
operator|(
name|QueueConnection
operator|)
name|theConnection
operator|)
operator|.
name|createQueueSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
return|return
operator|new
name|PooledSession
argument_list|(
name|session
argument_list|,
name|destination
argument_list|,
name|session
operator|.
name|createSender
argument_list|(
literal|null
argument_list|)
argument_list|,
name|session
operator|.
name|createReceiver
argument_list|(
operator|(
name|Queue
operator|)
name|destination
argument_list|,
name|runtimePolicy
operator|.
name|getMessageSelector
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Helper method to create a pub-sub pooled session.      *      * @param producer true iff producing      * @param consumer true iff consuming      * @param destination the target destination      * @return an appropriate pooled session      */
name|PooledSession
name|createPubSubSession
parameter_list|(
name|boolean
name|producer
parameter_list|,
name|boolean
name|consumer
parameter_list|,
name|Destination
name|destination
parameter_list|)
throws|throws
name|JMSException
block|{
name|TopicSession
name|session
init|=
operator|(
operator|(
name|TopicConnection
operator|)
name|theConnection
operator|)
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|sub
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|consumer
condition|)
block|{
name|String
name|messageSelector
init|=
name|runtimePolicy
operator|.
name|getMessageSelector
argument_list|()
decl_stmt|;
name|String
name|durableName
init|=
name|runtimePolicy
operator|.
name|getDurableSubscriberName
argument_list|()
decl_stmt|;
if|if
condition|(
name|durableName
operator|!=
literal|null
condition|)
block|{
name|sub
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|destination
argument_list|,
name|durableName
argument_list|,
name|messageSelector
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sub
operator|=
name|session
operator|.
name|createSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|destination
argument_list|,
name|messageSelector
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|PooledSession
argument_list|(
name|session
argument_list|,
literal|null
argument_list|,
name|producer
condition|?
name|session
operator|.
name|createPublisher
argument_list|(
literal|null
argument_list|)
else|:
literal|null
argument_list|,
name|sub
argument_list|)
return|;
block|}
specifier|private
name|String
name|generateUniqueSelector
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|String
name|host
init|=
literal|"localhost"
decl_stmt|;
try|try
block|{
name|InetAddress
name|addr
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
name|host
operator|=
name|addr
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|ukex
parameter_list|)
block|{
comment|//Default to localhost.
block|}
name|long
name|time
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTimeInMillis
argument_list|()
decl_stmt|;
return|return
name|host
operator|+
literal|"_"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
operator|+
literal|"_"
operator|+
name|obj
operator|+
name|time
return|;
block|}
specifier|private
name|boolean
name|isDestinationStyleQueue
parameter_list|()
block|{
return|return
name|JMSConstants
operator|.
name|JMS_QUEUE
operator|.
name|equals
argument_list|(
name|jmsTransport
operator|.
name|getJMSAddress
argument_list|()
operator|.
name|getDestinationStyle
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

