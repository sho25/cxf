begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|AbstractTwoStageCache
import|;
end_import

begin_comment
comment|/**  * This class encapsulates the creation and pooling logic for JMS Sessions. The usage patterns for sessions,  * producers& consumers are as follows ...  *<p>  * client-side: an invoking thread requires relatively short-term exclusive use of a session, an unidentified  * producer to send the request message, and in the point-to-point domain a consumer for the temporary ReplyTo  * destination to synchronously receive the reply if the operation is twoway (in the pub-sub domain only  * oneway operations are supported, so a there is never a requirement for a reply destination)  *<p>  * server-side receive: each port based on<jms:address> requires relatively long-term exclusive use of a  * session, a consumer with a MessageListener for the JMS destination specified for the port, and an  * unidentified producer to send the request message  *<p>  * server-side send: each dispatch of a twoway request requires relatively short-term exclusive use of a  * session and an identified producer (but not a consumer) - note that the session used for the receive side  * cannot be re-used for the send, as MessageListener usage precludes any synchronous sends or receives on  * that session  *<p>  * So on the client-side, pooling of sessions is bound up with pooling of temporary reply destinations,  * whereas on the server receive side the benefit of pooling is marginal as the session is required from the  * point at which the port was activated until the Bus is shutdown The server send side resembles the client  * side, except that a consumer for the temporary destination is never required. Hence different pooling  * strategies make sense ...  *<p>  * client-side: a SoftReference-based cache of send/receive sessions is maintained containing an aggregate of  * a session, identified producer, temporary reply destination& consumer for same  *<p>  * server-side receive: as sessions cannot be usefully recycled, they are simply created on demand and closed  * when no longer required  *<p>  * server-side send: a SoftReference-based cache of send-only sessions is maintained containing an aggregate  * of a session and an identified producer  *<p>  * In a pure client or pure server, only a single cache is ever populated. Where client and server logic is  * co-located, a client session retrieval for a twoway invocation checks the reply-capable cache first and  * then the send-only cache - if a session is available in the later then its used after a tempory destination  * is created before being recycled back into the reply-capable cache. A server send side retrieval or client  * retrieval for a oneway invocation checks the send-only cache first and then the reply-capable cache - if a  * session is available in the later then its used and the tempory destination is ignored. So in the  * co-located case, sessions migrate from the send-only cache to the reply-capable cache as necessary.  *<p>  */
end_comment

begin_class
specifier|public
class|class
name|JMSSessionFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JMSSessionFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|lowWaterMark
decl_stmt|;
specifier|private
name|int
name|highWaterMark
decl_stmt|;
specifier|private
specifier|final
name|Context
name|initialContext
decl_stmt|;
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|connection
decl_stmt|;
specifier|private
name|AbstractTwoStageCache
argument_list|<
name|PooledSession
argument_list|>
name|sessionCache
decl_stmt|;
specifier|private
name|boolean
name|destinationIsQueue
decl_stmt|;
comment|/**      * Constructor.      *       * @param connectionFactory      * @param connection the shared {Queue|Topic}Connection      */
specifier|protected
name|JMSSessionFactory
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|,
name|Connection
name|connection
parameter_list|,
name|Destination
name|replyDestination
parameter_list|,
name|Context
name|context
parameter_list|,
name|boolean
name|destinationIsQueue
parameter_list|,
name|SessionPoolType
name|sessionPoolConfig
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|destinationIsQueue
operator|=
name|destinationIsQueue
expr_stmt|;
name|initialContext
operator|=
name|context
expr_stmt|;
name|lowWaterMark
operator|=
name|sessionPoolConfig
operator|.
name|getLowWaterMark
argument_list|()
expr_stmt|;
name|highWaterMark
operator|=
name|sessionPoolConfig
operator|.
name|getHighWaterMark
argument_list|()
expr_stmt|;
comment|// create session caches (REVISIT sizes should be configurable)
try|try
block|{
name|sessionCache
operator|=
operator|new
name|AbstractTwoStageCache
argument_list|<
name|PooledSession
argument_list|>
argument_list|(
name|lowWaterMark
argument_list|,
name|highWaterMark
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
block|{
specifier|public
specifier|final
name|PooledSession
name|create
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|createSession
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|sessionCache
operator|.
name|populateCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"JMS Session cache populate failed: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Helper method to create a point-to-point pooled session.      *       * @return an appropriate pooled session      */
specifier|private
name|PooledSession
name|createSession
parameter_list|()
throws|throws
name|JMSException
block|{
name|Session
name|session
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|destinationIsQueue
condition|)
block|{
name|session
operator|=
operator|(
operator|(
name|QueueConnection
operator|)
name|connection
operator|)
operator|.
name|createQueueSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|session
operator|=
operator|(
operator|(
name|TopicConnection
operator|)
name|connection
operator|)
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PooledSession
argument_list|(
name|session
argument_list|,
name|destinationIsQueue
argument_list|)
return|;
block|}
comment|/**      * This class acts as the hub of JMS provider usage, creating shared JMS Connections and providing access      * to a pool of JMS Sessions.      *<p>      * A new JMS connection is created for each each port based<jms:address> - however its likely that in      * practice the same JMS provider will be specified for each port, and hence the connection resources      * could be shared accross ports.      *<p>      * For the moment this class is realized as just a container for static methods, but the intention is to      * support in future sharing of JMS resources accross compatible ports.      */
specifier|protected
specifier|static
name|JMSSessionFactory
name|connect
parameter_list|(
name|AddressType
name|addrDetails
parameter_list|,
name|SessionPoolType
name|sessionPoolConfig
parameter_list|,
name|ServerConfig
name|serverConfig
parameter_list|)
throws|throws
name|JMSException
throws|,
name|NamingException
block|{
name|Properties
name|env
init|=
name|JMSUtils
operator|.
name|getInitialContextEnv
argument_list|(
name|addrDetails
argument_list|)
decl_stmt|;
name|Context
name|context
init|=
operator|new
name|InitialContext
argument_list|(
name|env
argument_list|)
decl_stmt|;
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|JMSUtils
operator|.
name|isDestinationStyleQueue
argument_list|(
name|addrDetails
argument_list|)
condition|)
block|{
name|QueueConnectionFactory
name|qcf
init|=
operator|(
name|QueueConnectionFactory
operator|)
name|context
operator|.
name|lookup
argument_list|(
name|addrDetails
operator|.
name|getJndiConnectionFactoryName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|addrDetails
operator|.
name|isSetConnectionUserName
argument_list|()
condition|)
block|{
name|connection
operator|=
name|qcf
operator|.
name|createQueueConnection
argument_list|(
name|addrDetails
operator|.
name|getConnectionUserName
argument_list|()
argument_list|,
name|addrDetails
operator|.
name|getConnectionPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|=
name|qcf
operator|.
name|createQueueConnection
argument_list|()
expr_stmt|;
block|}
name|connectionFactory
operator|=
name|qcf
expr_stmt|;
block|}
else|else
block|{
name|TopicConnectionFactory
name|tcf
init|=
operator|(
name|TopicConnectionFactory
operator|)
name|context
operator|.
name|lookup
argument_list|(
name|addrDetails
operator|.
name|getJndiConnectionFactoryName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|addrDetails
operator|.
name|isSetConnectionUserName
argument_list|()
condition|)
block|{
name|connection
operator|=
name|tcf
operator|.
name|createTopicConnection
argument_list|(
name|addrDetails
operator|.
name|getConnectionUserName
argument_list|()
argument_list|,
name|addrDetails
operator|.
name|getConnectionPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|=
name|tcf
operator|.
name|createTopicConnection
argument_list|()
expr_stmt|;
block|}
name|connectionFactory
operator|=
name|tcf
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|serverConfig
condition|)
block|{
name|String
name|clientID
init|=
name|serverConfig
operator|.
name|getDurableSubscriptionClientId
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientID
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|setClientID
argument_list|(
name|clientID
argument_list|)
expr_stmt|;
block|}
block|}
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
comment|/*          * Destination requestDestination = resolveRequestDestination(context, connection, addrDetails);          */
name|Destination
name|replyDestination
init|=
name|JMSUtils
operator|.
name|resolveReplyDestination
argument_list|(
name|context
argument_list|,
name|connection
argument_list|,
name|addrDetails
argument_list|)
decl_stmt|;
comment|// create session factory to manage session, reply destination,
comment|// producer and consumer pooling
comment|//
name|JMSSessionFactory
name|sf
init|=
operator|new
name|JMSSessionFactory
argument_list|(
name|connectionFactory
argument_list|,
name|connection
argument_list|,
name|replyDestination
argument_list|,
name|context
argument_list|,
name|JMSUtils
operator|.
name|isDestinationStyleQueue
argument_list|(
name|addrDetails
argument_list|)
argument_list|,
name|sessionPoolConfig
argument_list|)
decl_stmt|;
return|return
name|sf
return|;
block|}
comment|// --java.lang.Object Overrides----------------------------------------------
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"JMSSessionFactory"
return|;
block|}
comment|// --Methods-----------------------------------------------------------------
specifier|public
name|ConnectionFactory
name|getConnectionFactory
parameter_list|()
block|{
return|return
name|connectionFactory
return|;
block|}
specifier|protected
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
specifier|public
name|Context
name|getInitialContext
parameter_list|()
block|{
return|return
name|initialContext
return|;
block|}
comment|/**      * Retrieve a new or cached Session.      *       * @return a new or cached Session      */
specifier|public
name|PooledSession
name|get
parameter_list|()
block|{
name|PooledSession
name|ret
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|ret
operator|=
name|sessionCache
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|ret
operator|=
name|sessionCache
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Return a Session to the pool      *       * @param pooled_session the session to recycle      */
specifier|public
name|void
name|recycle
parameter_list|(
name|PooledSession
name|pooledSession
parameter_list|)
block|{
comment|// sessions used long-term by the server receive side are not cached,
comment|// only non-null destinations are temp queues
if|if
condition|(
name|pooledSession
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|discard
init|=
literal|false
decl_stmt|;
comment|// re-cache session, closing if it cannot be it can be accomodated
synchronized|synchronized
init|(
name|this
init|)
block|{
name|discard
operator|=
operator|!
name|sessionCache
operator|.
name|recycle
argument_list|(
name|pooledSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|discard
condition|)
block|{
try|try
block|{
name|pooledSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"JMS Session discard failed: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Shutdown the session factory.      */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
try|try
block|{
name|PooledSession
name|curr
decl_stmt|;
if|if
condition|(
name|sessionCache
operator|!=
literal|null
condition|)
block|{
name|curr
operator|=
name|sessionCache
operator|.
name|poll
argument_list|()
expr_stmt|;
while|while
condition|(
name|curr
operator|!=
literal|null
condition|)
block|{
name|curr
operator|.
name|close
argument_list|()
expr_stmt|;
name|curr
operator|=
name|sessionCache
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"queue connection close failed: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|// help GC
comment|//
name|sessionCache
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

