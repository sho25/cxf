begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|InitializingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Required
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|AbstractJmsListeningContainer
import|;
end_import

begin_class
specifier|public
class|class
name|JMSConfiguration
implements|implements
name|InitializingBean
block|{
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
name|JmsTemplate
name|jmsTemplate
decl_stmt|;
specifier|private
name|AbstractJmsListeningContainer
name|jmsListener
decl_stmt|;
specifier|private
name|String
name|targetDestination
decl_stmt|;
specifier|private
name|String
name|replyDestination
decl_stmt|;
specifier|private
name|String
name|messageType
decl_stmt|;
specifier|private
name|boolean
name|pubSubDomain
decl_stmt|;
specifier|public
name|JMSConfiguration
parameter_list|()
block|{
name|targetDestination
operator|=
literal|null
expr_stmt|;
name|replyDestination
operator|=
literal|null
expr_stmt|;
name|messageType
operator|=
name|JMSConstants
operator|.
name|TEXT_MESSAGE_TYPE
expr_stmt|;
name|pubSubDomain
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*          * if (connectionFactory == null) { throw new RuntimeException("Required property connectionfactory          * was not set"); } jmsTemplate.setConnectionFactory(connectionFactory);          * jmsListener.setConnectionFactory(connectionFactory);          */
block|}
specifier|public
name|JmsTemplate
name|getJmsTemplate
parameter_list|()
block|{
return|return
name|jmsTemplate
return|;
block|}
annotation|@
name|Required
specifier|public
name|void
name|setJmsTemplate
parameter_list|(
name|JmsTemplate
name|jmsTemplate
parameter_list|)
block|{
name|this
operator|.
name|jmsTemplate
operator|=
name|jmsTemplate
expr_stmt|;
block|}
specifier|public
name|AbstractJmsListeningContainer
name|getJmsListener
parameter_list|()
block|{
return|return
name|jmsListener
return|;
block|}
annotation|@
name|Required
specifier|public
name|void
name|setJmsListener
parameter_list|(
name|AbstractJmsListeningContainer
name|jmsListener
parameter_list|)
block|{
name|this
operator|.
name|jmsListener
operator|=
name|jmsListener
expr_stmt|;
block|}
specifier|public
name|ConnectionFactory
name|getConnectionFactory
parameter_list|()
block|{
return|return
name|connectionFactory
return|;
block|}
annotation|@
name|Required
specifier|public
name|void
name|setConnectionFactory
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
block|}
specifier|public
name|String
name|getTargetDestination
parameter_list|()
block|{
return|return
name|targetDestination
return|;
block|}
specifier|public
name|void
name|setTargetDestination
parameter_list|(
name|String
name|targetDestination
parameter_list|)
block|{
name|this
operator|.
name|targetDestination
operator|=
name|targetDestination
expr_stmt|;
block|}
specifier|public
name|String
name|getReplyDestination
parameter_list|()
block|{
return|return
name|replyDestination
return|;
block|}
specifier|public
name|void
name|setReplyDestination
parameter_list|(
name|String
name|replyDestination
parameter_list|)
block|{
name|this
operator|.
name|replyDestination
operator|=
name|replyDestination
expr_stmt|;
block|}
specifier|public
name|String
name|getMessageType
parameter_list|()
block|{
return|return
name|messageType
return|;
block|}
specifier|public
name|void
name|setMessageType
parameter_list|(
name|String
name|messageType
parameter_list|)
block|{
name|this
operator|.
name|messageType
operator|=
name|messageType
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPubSubDomain
parameter_list|()
block|{
return|return
name|pubSubDomain
return|;
block|}
specifier|public
name|void
name|setPubSubDomain
parameter_list|(
name|boolean
name|pubSubDomain
parameter_list|)
block|{
name|this
operator|.
name|pubSubDomain
operator|=
name|pubSubDomain
expr_stmt|;
block|}
block|}
end_class

end_unit

