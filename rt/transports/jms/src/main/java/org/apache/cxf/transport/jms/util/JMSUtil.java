begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|util
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
operator|.
name|JMSConstants
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JMSUtil
block|{
specifier|public
specifier|static
specifier|final
name|String
name|JMS_MESSAGE_CONSUMER
init|=
literal|"jms_message_consumer"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMS_IGNORE_TIMEOUT
init|=
literal|"jms_ignore_timeout"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|CORRELATTION_ID_PADDING
init|=
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
decl_stmt|;
specifier|private
name|JMSUtil
parameter_list|()
block|{     }
specifier|public
specifier|static
name|Message
name|receive
parameter_list|(
name|Session
name|session
parameter_list|,
name|Destination
name|replyToDestination
parameter_list|,
name|String
name|correlationId
parameter_list|,
name|long
name|receiveTimeout
parameter_list|,
name|boolean
name|pubSubNoLocal
parameter_list|)
block|{
try|try
init|(
name|ResourceCloser
name|closer
init|=
operator|new
name|ResourceCloser
argument_list|()
init|)
block|{
name|String
name|messageSelector
init|=
name|correlationId
operator|==
literal|null
condition|?
literal|null
else|:
literal|"JMSCorrelationID = '"
operator|+
name|correlationId
operator|+
literal|"'"
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|closer
operator|.
name|register
argument_list|(
name|session
operator|.
name|createConsumer
argument_list|(
name|replyToDestination
argument_list|,
name|messageSelector
argument_list|,
name|pubSubNoLocal
argument_list|)
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|replyMessage
init|=
name|consumer
operator|.
name|receive
argument_list|(
name|receiveTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|replyMessage
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Timeout receiving message with correlationId "
operator|+
name|correlationId
argument_list|)
throw|;
block|}
return|return
name|replyMessage
return|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|convertJmsException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Message
name|receive
parameter_list|(
name|Session
name|session
parameter_list|,
name|Destination
name|replyToDestination
parameter_list|,
name|String
name|correlationId
parameter_list|,
name|long
name|receiveTimeout
parameter_list|,
name|boolean
name|pubSubNoLocal
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
try|try
init|(
name|ResourceCloser
name|closer
init|=
operator|new
name|ResourceCloser
argument_list|()
init|)
block|{
name|String
name|messageSelector
init|=
name|correlationId
operator|==
literal|null
condition|?
literal|null
else|:
literal|"JMSCorrelationID = '"
operator|+
name|correlationId
operator|+
literal|"'"
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|closer
operator|.
name|register
argument_list|(
name|session
operator|.
name|createConsumer
argument_list|(
name|replyToDestination
argument_list|,
name|messageSelector
argument_list|,
name|pubSubNoLocal
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|put
argument_list|(
name|JMS_MESSAGE_CONSUMER
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
name|javax
operator|.
name|jms
operator|.
name|Message
name|replyMessage
init|=
name|consumer
operator|.
name|receive
argument_list|(
name|receiveTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|replyMessage
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|boolean
operator|)
name|exchange
operator|.
name|get
argument_list|(
name|JMSUtil
operator|.
name|JMS_IGNORE_TIMEOUT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Timeout receiving message with correlationId "
operator|+
name|correlationId
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Timeout receiving message with correlationId "
operator|+
name|correlationId
argument_list|)
throw|;
block|}
block|}
return|return
name|replyMessage
return|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|convertJmsException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|RuntimeException
name|convertJmsException
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
return|return
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|createCorrelationId
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|,
name|long
name|sequenceNUm
parameter_list|)
block|{
name|String
name|index
init|=
name|Long
operator|.
name|toHexString
argument_list|(
name|sequenceNUm
argument_list|)
decl_stmt|;
name|StringBuilder
name|id
init|=
operator|new
name|StringBuilder
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|id
operator|.
name|append
argument_list|(
name|CORRELATTION_ID_PADDING
argument_list|,
literal|0
argument_list|,
literal|16
operator|-
name|index
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|id
operator|.
name|append
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|id
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Create a JMS of the appropriate type populated with the given payload.      *      * @param payload the message payload, expected to be either of type String or byte[] depending on payload      *            type      * @param session the JMS session      * @param replyTo the ReplyTo destination if any      * @return a JMS of the appropriate type populated with the given payload      */
specifier|public
specifier|static
name|Message
name|createAndSetPayload
parameter_list|(
name|Object
name|payload
parameter_list|,
name|Session
name|session
parameter_list|,
name|String
name|messageType
parameter_list|)
throws|throws
name|JMSException
block|{
name|Message
name|message
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|JMSConstants
operator|.
name|TEXT_MESSAGE_TYPE
operator|.
name|equals
argument_list|(
name|messageType
argument_list|)
condition|)
block|{
name|message
operator|=
name|session
operator|.
name|createTextMessage
argument_list|(
operator|(
name|String
operator|)
name|payload
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JMSConstants
operator|.
name|BYTE_MESSAGE_TYPE
operator|.
name|equals
argument_list|(
name|messageType
argument_list|)
condition|)
block|{
name|message
operator|=
name|session
operator|.
name|createBytesMessage
argument_list|()
expr_stmt|;
operator|(
operator|(
name|BytesMessage
operator|)
name|message
operator|)
operator|.
name|writeBytes
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|payload
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
name|session
operator|.
name|createObjectMessage
argument_list|()
expr_stmt|;
operator|(
operator|(
name|ObjectMessage
operator|)
name|message
operator|)
operator|.
name|setObject
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|payload
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
specifier|public
specifier|static
name|Queue
name|createQueue
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
return|return
name|session
operator|.
name|createQueue
argument_list|(
name|name
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

