begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|connection
operator|.
name|SingleConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|connection
operator|.
name|UserCredentialsConnectionFactoryAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|support
operator|.
name|destination
operator|.
name|JndiDestinationResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jndi
operator|.
name|JndiTemplate
import|;
end_import

begin_class
specifier|public
class|class
name|JMSOldConfigHolder
block|{
specifier|protected
name|ClientConfig
name|clientConfig
decl_stmt|;
specifier|protected
name|ClientBehaviorPolicyType
name|runtimePolicy
decl_stmt|;
specifier|protected
name|AddressType
name|address
decl_stmt|;
specifier|protected
name|SessionPoolType
name|sessionPool
decl_stmt|;
specifier|private
name|ConnectionFactory
name|getConnectionFactoryFromJndi
parameter_list|(
name|String
name|connectionFactoryName
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|,
name|JndiTemplate
name|jt
parameter_list|)
block|{
if|if
condition|(
name|connectionFactoryName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|ConnectionFactory
name|connectionFactory
init|=
operator|(
name|ConnectionFactory
operator|)
name|jt
operator|.
name|lookup
argument_list|(
name|connectionFactoryName
argument_list|)
decl_stmt|;
name|UserCredentialsConnectionFactoryAdapter
name|uccf
init|=
operator|new
name|UserCredentialsConnectionFactoryAdapter
argument_list|()
decl_stmt|;
name|uccf
operator|.
name|setUsername
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|uccf
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|uccf
operator|.
name|setTargetConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|SingleConnectionFactory
name|scf
init|=
operator|new
name|SingleConnectionFactory
argument_list|()
decl_stmt|;
name|scf
operator|.
name|setTargetConnectionFactory
argument_list|(
name|uccf
argument_list|)
expr_stmt|;
return|return
name|scf
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|JMSConfiguration
name|createJMSConfigurationFromEndpointInfo
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|)
block|{
name|JMSConfiguration
name|jmsConf
init|=
operator|new
name|JMSConfiguration
argument_list|()
decl_stmt|;
comment|// Retrieve configuration information that was extracted from the wsdl
name|address
operator|=
name|endpointInfo
operator|.
name|getTraversedExtensor
argument_list|(
operator|new
name|AddressType
argument_list|()
argument_list|,
name|AddressType
operator|.
name|class
argument_list|)
expr_stmt|;
name|clientConfig
operator|=
name|endpointInfo
operator|.
name|getTraversedExtensor
argument_list|(
operator|new
name|ClientConfig
argument_list|()
argument_list|,
name|ClientConfig
operator|.
name|class
argument_list|)
expr_stmt|;
name|runtimePolicy
operator|=
name|endpointInfo
operator|.
name|getTraversedExtensor
argument_list|(
operator|new
name|ClientBehaviorPolicyType
argument_list|()
argument_list|,
name|ClientBehaviorPolicyType
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Try to retrieve configuration information from the spring
comment|// config. Search for a tag<jms:conduit> with name=endpoint name + ".jms-conduit"
name|Configurer
name|configurer
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|Configurer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|configurer
condition|)
block|{
name|String
name|name
init|=
name|endpointInfo
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".jms-conduit"
decl_stmt|;
name|configurer
operator|.
name|configureBean
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|JndiTemplate
name|jt
init|=
operator|new
name|JndiTemplate
argument_list|()
decl_stmt|;
name|jt
operator|.
name|setEnvironment
argument_list|(
name|JMSUtils
operator|.
name|getInitialContextEnv
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
name|ConnectionFactory
name|cf
init|=
name|getConnectionFactoryFromJndi
argument_list|(
name|address
operator|.
name|getJndiConnectionFactoryName
argument_list|()
argument_list|,
name|address
operator|.
name|getConnectionUserName
argument_list|()
argument_list|,
name|address
operator|.
name|getConnectionPassword
argument_list|()
argument_list|,
name|jt
argument_list|)
decl_stmt|;
comment|// TODO Use JmsTemplate102 in case JMS 1.1 is not available
name|JmsTemplate
name|jmsTemplate
init|=
operator|new
name|JmsTemplate
argument_list|()
decl_stmt|;
name|jmsTemplate
operator|.
name|setConnectionFactory
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|boolean
name|pubSubDomain
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|address
operator|.
name|isSetDestinationStyle
argument_list|()
condition|)
block|{
name|pubSubDomain
operator|=
name|DestinationStyleType
operator|.
name|TOPIC
operator|==
name|address
operator|.
name|getDestinationStyle
argument_list|()
expr_stmt|;
block|}
name|jmsTemplate
operator|.
name|setPubSubDomain
argument_list|(
name|pubSubDomain
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|setReceiveTimeout
argument_list|(
name|clientConfig
operator|.
name|getClientReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|setTimeToLive
argument_list|(
name|clientConfig
operator|.
name|getMessageTimeToLive
argument_list|()
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|setPriority
argument_list|(
name|Message
operator|.
name|DEFAULT_PRIORITY
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|setDeliveryMode
argument_list|(
name|Message
operator|.
name|DEFAULT_DELIVERY_MODE
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|setExplicitQosEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|address
operator|.
name|isSetJndiDestinationName
argument_list|()
condition|)
block|{
comment|// Setup Destination jndi destination resolver
specifier|final
name|JndiDestinationResolver
name|jndiDestinationResolver
init|=
operator|new
name|JndiDestinationResolver
argument_list|()
decl_stmt|;
name|jndiDestinationResolver
operator|.
name|setJndiTemplate
argument_list|(
name|jt
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|setDestinationResolver
argument_list|(
name|jndiDestinationResolver
argument_list|)
expr_stmt|;
name|jmsConf
operator|.
name|setTargetDestination
argument_list|(
name|address
operator|.
name|getJndiDestinationName
argument_list|()
argument_list|)
expr_stmt|;
name|jmsConf
operator|.
name|setReplyDestination
argument_list|(
name|address
operator|.
name|getJndiReplyDestinationName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Use the default dynamic destination resolver
name|jmsConf
operator|.
name|setTargetDestination
argument_list|(
name|address
operator|.
name|getJmsDestinationName
argument_list|()
argument_list|)
expr_stmt|;
name|jmsConf
operator|.
name|setReplyDestination
argument_list|(
name|address
operator|.
name|getJmsReplyDestinationName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runtimePolicy
operator|.
name|isSetMessageType
argument_list|()
condition|)
block|{
name|jmsConf
operator|.
name|setMessageType
argument_list|(
name|runtimePolicy
operator|.
name|getMessageType
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|jmsConf
operator|.
name|setJmsTemplate
argument_list|(
name|jmsTemplate
argument_list|)
expr_stmt|;
return|return
name|jmsConf
return|;
block|}
specifier|public
name|ClientConfig
name|getClientConfig
parameter_list|()
block|{
return|return
name|clientConfig
return|;
block|}
specifier|public
name|void
name|setClientConfig
parameter_list|(
name|ClientConfig
name|clientConfig
parameter_list|)
block|{
name|this
operator|.
name|clientConfig
operator|=
name|clientConfig
expr_stmt|;
block|}
specifier|public
name|ClientBehaviorPolicyType
name|getRuntimePolicy
parameter_list|()
block|{
return|return
name|runtimePolicy
return|;
block|}
specifier|public
name|void
name|setRuntimePolicy
parameter_list|(
name|ClientBehaviorPolicyType
name|runtimePolicy
parameter_list|)
block|{
name|this
operator|.
name|runtimePolicy
operator|=
name|runtimePolicy
expr_stmt|;
block|}
specifier|public
name|AddressType
name|getAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
specifier|public
name|void
name|setAddress
parameter_list|(
name|AddressType
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
block|}
specifier|public
name|SessionPoolType
name|getSessionPool
parameter_list|()
block|{
return|return
name|sessionPool
return|;
block|}
specifier|public
name|void
name|setSessionPool
parameter_list|(
name|SessionPoolType
name|sessionPool
parameter_list|)
block|{
name|this
operator|.
name|sessionPool
operator|=
name|sessionPool
expr_stmt|;
block|}
block|}
end_class

end_unit

