begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|AbstractConduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_comment
comment|/**  * JMSConduit is instantiated by the JMSTransportfactory which is selected by a client if the transport  * protocol starts with jms:// JMSConduit converts CXF Messages to JMS Messages and sends the request by using  * JMS topics or queues. If the Exchange is not oneway it then recevies the response and converts it to a CXF  * Message. This is then provided in the Exchange and also sent to the incomingObserver  */
end_comment

begin_class
specifier|public
class|class
name|JMSConduit
extends|extends
name|AbstractConduit
implements|implements
name|Configurable
implements|,
name|JMSExchangeSender
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|BASE_BEAN_NAME_SUFFIX
init|=
literal|".jms-conduit-base"
decl_stmt|;
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JMSConduit
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Destination
name|targetDestination
decl_stmt|;
specifier|protected
name|JMSSessionFactory
name|sessionFactory
decl_stmt|;
specifier|protected
name|Bus
name|bus
decl_stmt|;
specifier|protected
name|EndpointInfo
name|endpointInfo
decl_stmt|;
specifier|protected
name|String
name|beanNameSuffix
decl_stmt|;
specifier|protected
name|ClientConfig
name|clientConfig
decl_stmt|;
specifier|protected
name|ClientBehaviorPolicyType
name|runtimePolicy
decl_stmt|;
specifier|protected
name|AddressType
name|address
decl_stmt|;
specifier|protected
name|SessionPoolType
name|sessionPool
decl_stmt|;
specifier|private
name|Queue
name|replyDestination
decl_stmt|;
specifier|private
name|Context
name|context
decl_stmt|;
specifier|public
name|JMSConduit
parameter_list|(
name|Bus
name|b
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|)
block|{
name|this
argument_list|(
name|b
argument_list|,
name|endpointInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JMSConduit
parameter_list|(
name|Bus
name|b
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|,
name|EndpointReferenceType
name|target
parameter_list|)
block|{
name|super
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|this
operator|.
name|bus
operator|=
name|b
expr_stmt|;
name|this
operator|.
name|endpointInfo
operator|=
name|endpointInfo
expr_stmt|;
name|this
operator|.
name|beanNameSuffix
operator|=
name|BASE_BEAN_NAME_SUFFIX
expr_stmt|;
name|initConfig
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initConfig
parameter_list|()
block|{
name|this
operator|.
name|address
operator|=
name|endpointInfo
operator|.
name|getTraversedExtensor
argument_list|(
operator|new
name|AddressType
argument_list|()
argument_list|,
name|AddressType
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|sessionPool
operator|=
name|endpointInfo
operator|.
name|getTraversedExtensor
argument_list|(
operator|new
name|SessionPoolType
argument_list|()
argument_list|,
name|SessionPoolType
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientConfig
operator|=
name|endpointInfo
operator|.
name|getTraversedExtensor
argument_list|(
operator|new
name|ClientConfig
argument_list|()
argument_list|,
name|ClientConfig
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|runtimePolicy
operator|=
name|endpointInfo
operator|.
name|getTraversedExtensor
argument_list|(
operator|new
name|ClientBehaviorPolicyType
argument_list|()
argument_list|,
name|ClientBehaviorPolicyType
operator|.
name|class
argument_list|)
expr_stmt|;
name|Configurer
name|configurer
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|Configurer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|configurer
condition|)
block|{
name|configurer
operator|.
name|configureBean
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|JMSSessionFactory
name|getOrCreateSessionFactory
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|sessionFactory
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|context
operator|=
name|JMSUtils
operator|.
name|getInitialContext
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|this
operator|.
name|sessionFactory
operator|=
name|JMSSessionFactory
operator|.
name|connect
argument_list|(
name|getJMSAddress
argument_list|()
argument_list|,
name|getSessionPool
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetDestination
operator|=
name|JMSUtils
operator|.
name|resolveRequestDestination
argument_list|(
name|sessionFactory
operator|.
name|getInitialContext
argument_list|()
argument_list|,
name|sessionFactory
operator|.
name|getConnection
argument_list|()
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|this
operator|.
name|replyDestination
operator|=
name|JMSUtils
operator|.
name|resolveReplyDestination
argument_list|(
name|context
argument_list|,
name|sessionFactory
operator|.
name|getConnection
argument_list|()
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|jmsex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"JMS connect failed: "
argument_list|,
name|jmsex
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|targetDestination
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to lookup or create requestDestination"
argument_list|)
throw|;
block|}
return|return
name|this
operator|.
name|sessionFactory
return|;
block|}
comment|// prepare the message for send out , not actually send out the message
specifier|public
name|void
name|prepare
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|address
operator|==
literal|null
operator|||
name|this
operator|.
name|address
operator|.
name|getJndiConnectionFactoryName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Insufficient configuration for Conduit. "
operator|+
literal|"Did you configure a<jms:conduit name=\""
operator|+
name|getBeanName
argument_list|()
operator|+
literal|"\"> and set the jndiConnectionFactoryName ?"
argument_list|)
throw|;
block|}
name|message
operator|.
name|setContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
operator|new
name|JMSOutputStream
argument_list|(
name|this
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|,
name|isTextPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// After this step flow will continue in JMSOutputStream.doClose()
block|}
comment|/**      * Send the JMS Request out and if not oneWay receive the response      *       * @param outMessage      * @param request      * @return inMessage      */
specifier|public
name|void
name|sendExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|request
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"JMSConduit send message"
argument_list|)
expr_stmt|;
name|sessionFactory
operator|=
name|getOrCreateSessionFactory
argument_list|()
expr_stmt|;
name|PooledSession
name|pooledSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pooledSession
operator|=
name|sessionFactory
operator|.
name|get
argument_list|()
expr_stmt|;
name|Destination
name|replyTo
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|exchange
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
name|pooledSession
operator|.
name|initConsumerAndReplyDestination
argument_list|(
name|replyDestination
argument_list|)
expr_stmt|;
name|replyTo
operator|=
name|pooledSession
operator|.
name|getReplyDestination
argument_list|()
expr_stmt|;
block|}
comment|// TODO setting up the responseExpected
comment|// We don't want to send temp queue in
comment|// replyTo header for oneway calls
if|if
condition|(
name|exchange
operator|.
name|isOneWay
argument_list|()
operator|&&
operator|(
name|getJMSAddress
argument_list|()
operator|.
name|getJndiReplyDestinationName
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
name|replyTo
operator|=
literal|null
expr_stmt|;
block|}
name|Message
name|outMessage
init|=
name|exchange
operator|.
name|getOutMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|outMessage
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exchange to be sent has no outMessage"
argument_list|)
throw|;
block|}
name|sendMessage
argument_list|(
name|outMessage
argument_list|,
name|request
argument_list|,
name|pooledSession
argument_list|,
name|replyTo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exchange
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
name|long
name|receiveTimeout
init|=
name|clientConfig
operator|.
name|getClientReceiveTimeout
argument_list|()
decl_stmt|;
name|Long
name|messageReceiveTimeout
init|=
operator|(
name|Long
operator|)
name|exchange
operator|.
name|getOutMessage
argument_list|()
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_RECEIVE_TIMEOUT
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageReceiveTimeout
operator|!=
literal|null
condition|)
block|{
name|receiveTimeout
operator|=
name|messageReceiveTimeout
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
name|Message
name|inMessage
init|=
name|receiveResponse
argument_list|(
name|pooledSession
operator|.
name|consumer
argument_list|()
argument_list|,
name|receiveTimeout
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setInMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
name|incomingObserver
operator|.
name|onMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sessionFactory
operator|.
name|recycle
argument_list|(
name|pooledSession
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|sendMessage
parameter_list|(
name|Message
name|outMessage
parameter_list|,
name|Object
name|request
parameter_list|,
name|PooledSession
name|pooledSession
parameter_list|,
name|Destination
name|replyTo
parameter_list|)
block|{
try|try
block|{
name|String
name|messageType
init|=
name|runtimePolicy
operator|.
name|getMessageType
argument_list|()
operator|.
name|value
argument_list|()
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
decl_stmt|;
name|jmsMessage
operator|=
name|JMSUtils
operator|.
name|buildJMSMessageFromCXFMessage
argument_list|(
name|outMessage
argument_list|,
name|request
argument_list|,
name|messageType
argument_list|,
name|pooledSession
operator|.
name|session
argument_list|()
argument_list|,
name|replyTo
argument_list|,
name|pooledSession
operator|.
name|getCorrelationID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Retrieve JMS QoS parameters from CXF message headers
name|JMSMessageHeadersType
name|headers
init|=
operator|(
name|JMSMessageHeadersType
operator|)
name|outMessage
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_REQUEST_HEADERS
argument_list|)
decl_stmt|;
name|long
name|ttl
init|=
name|JMSUtils
operator|.
name|getTimeToLive
argument_list|(
name|headers
argument_list|)
decl_stmt|;
if|if
condition|(
name|ttl
operator|<=
literal|0
condition|)
block|{
name|ttl
operator|=
name|clientConfig
operator|.
name|getMessageTimeToLive
argument_list|()
expr_stmt|;
block|}
name|int
name|deliveryMode
init|=
name|JMSUtils
operator|.
name|getJMSDeliveryMode
argument_list|(
name|headers
argument_list|)
decl_stmt|;
name|int
name|priority
init|=
name|JMSUtils
operator|.
name|getJMSPriority
argument_list|(
name|headers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"client sending request: "
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|JMSUtils
operator|.
name|sendMessage
argument_list|(
name|pooledSession
operator|.
name|producer
argument_list|()
argument_list|,
name|targetDestination
argument_list|,
name|jmsMessage
argument_list|,
name|ttl
argument_list|,
name|deliveryMode
argument_list|,
name|priority
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Problem while sending JMS message"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Message
name|receiveResponse
parameter_list|(
name|MessageConsumer
name|consumer
parameter_list|,
name|long
name|receiveTimeout
parameter_list|)
block|{
comment|// TODO if outMessage need to get the response
try|try
block|{
name|Message
name|inMessage
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
comment|// set the message header back to the incomeMessage
comment|// inMessage.put(JMSConstants.JMS_CLIENT_RESPONSE_HEADERS,
comment|// outMessage.get(JMSConstants.JMS_CLIENT_RESPONSE_HEADERS));
name|byte
index|[]
name|response
init|=
literal|null
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|consumer
operator|.
name|receive
argument_list|(
name|receiveTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|jmsMessage
operator|==
literal|null
condition|)
block|{
comment|// TODO: Review what exception should we throw.
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"JMS receive timed out"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"client received reply: "
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|JMSUtils
operator|.
name|populateIncomingContext
argument_list|(
name|jmsMessage
argument_list|,
name|inMessage
argument_list|,
name|JMSConstants
operator|.
name|JMS_CLIENT_RESPONSE_HEADERS
argument_list|)
expr_stmt|;
name|response
operator|=
name|JMSUtils
operator|.
name|retrievePayload
argument_list|(
name|jmsMessage
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"The Response Message payload is : ["
operator|+
name|response
operator|+
literal|"]"
argument_list|)
expr_stmt|;
comment|// setup the inMessage response stream
name|inMessage
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"incoming observer is "
operator|+
name|incomingObserver
argument_list|)
expr_stmt|;
return|return
name|inMessage
return|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Problem while receiving JMS message"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isTextPayload
parameter_list|()
block|{
return|return
name|JMSConstants
operator|.
name|TEXT_MESSAGE_TYPE
operator|.
name|equals
argument_list|(
name|runtimePolicy
operator|.
name|getMessageType
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"JMSConduit closed "
argument_list|)
expr_stmt|;
comment|// ensure resources held by session factory are released
if|if
condition|(
name|sessionFactory
operator|!=
literal|null
condition|)
block|{
name|sessionFactory
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
specifier|public
name|String
name|getBeanName
parameter_list|()
block|{
return|return
name|endpointInfo
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".jms-conduit"
return|;
block|}
specifier|public
name|AddressType
name|getJMSAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
specifier|public
name|void
name|setJMSAddress
parameter_list|(
name|AddressType
name|a
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|a
expr_stmt|;
block|}
specifier|public
name|ClientConfig
name|getClientConfig
parameter_list|()
block|{
return|return
name|clientConfig
return|;
block|}
specifier|public
name|void
name|setClientConfig
parameter_list|(
name|ClientConfig
name|clientConfig
parameter_list|)
block|{
name|this
operator|.
name|clientConfig
operator|=
name|clientConfig
expr_stmt|;
block|}
specifier|public
name|ClientBehaviorPolicyType
name|getRuntimePolicy
parameter_list|()
block|{
return|return
name|runtimePolicy
return|;
block|}
specifier|public
name|void
name|setRuntimePolicy
parameter_list|(
name|ClientBehaviorPolicyType
name|runtimePolicy
parameter_list|)
block|{
name|this
operator|.
name|runtimePolicy
operator|=
name|runtimePolicy
expr_stmt|;
block|}
specifier|public
name|SessionPoolType
name|getSessionPool
parameter_list|()
block|{
return|return
name|sessionPool
return|;
block|}
specifier|public
name|void
name|setSessionPool
parameter_list|(
name|SessionPoolType
name|sessionPool
parameter_list|)
block|{
name|this
operator|.
name|sessionPool
operator|=
name|sessionPool
expr_stmt|;
block|}
block|}
end_class

end_unit

