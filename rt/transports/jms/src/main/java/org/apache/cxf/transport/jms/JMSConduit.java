begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|AbstractConduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|MessageCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|support
operator|.
name|JmsUtils
import|;
end_import

begin_comment
comment|/**  * JMSConduit is instantiated by the JMSTransportfactory which is selected by a client if the transport  * protocol starts with jms:// JMSConduit converts CXF Messages to JMS Messages and sends the request by using  * a JMS destination. If the Exchange is not oneway it then recevies the response and converts it to a CXF  * Message. This is then provided in the Exchange and also sent to the incomingObserver  */
end_comment

begin_class
specifier|public
class|class
name|JMSConduit
extends|extends
name|AbstractConduit
implements|implements
name|JMSExchangeSender
implements|,
name|MessageListener
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JMSConduit
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|EndpointInfo
name|endpointInfo
decl_stmt|;
specifier|private
name|JMSConfiguration
name|jmsConfig
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Message
argument_list|>
name|correlationMap
decl_stmt|;
specifier|private
name|DefaultMessageListenerContainer
name|jmsListener
decl_stmt|;
specifier|public
name|JMSConduit
parameter_list|(
name|EndpointInfo
name|endpointInfo
parameter_list|,
name|EndpointReferenceType
name|target
parameter_list|,
name|JMSConfiguration
name|jmsConfig
parameter_list|)
block|{
name|super
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|this
operator|.
name|jmsConfig
operator|=
name|jmsConfig
expr_stmt|;
name|this
operator|.
name|endpointInfo
operator|=
name|endpointInfo
expr_stmt|;
name|correlationMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Message
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Prepare the message for send out. The message will be sent after the caller has written the payload to      * the OutputStream of the message and calls the close method of the stream. In the JMS case the      * JMSOutputStream will then call back the sendExchange method of this class. {@inheritDoc}      */
specifier|public
name|void
name|prepare
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|jmsConfig
operator|.
name|getTargetDestination
argument_list|()
operator|==
literal|null
operator|||
name|jmsConfig
operator|.
name|getConnectionFactory
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|name
init|=
name|endpointInfo
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".jms-conduit"
decl_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"INSUFFICIENT_CONFIGURATION_CONDUIT"
argument_list|,
name|LOG
argument_list|,
name|name
argument_list|)
argument_list|)
throw|;
block|}
name|boolean
name|isTextPayload
init|=
name|JMSConstants
operator|.
name|TEXT_MESSAGE_TYPE
operator|.
name|equals
argument_list|(
name|jmsConfig
operator|.
name|getMessageType
argument_list|()
argument_list|)
decl_stmt|;
name|JMSOutputStream
name|out
init|=
operator|new
name|JMSOutputStream
argument_list|(
name|this
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|,
name|isTextPayload
argument_list|)
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**      * Send the JMS Request out and if not oneWay receive the response      *       * @param outMessage      * @param request      * @return inMessage      */
specifier|public
name|void
name|sendExchange
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|Object
name|request
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"JMSConduit send message"
argument_list|)
expr_stmt|;
specifier|final
name|Message
name|outMessage
init|=
name|exchange
operator|.
name|getOutMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|outMessage
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exchange to be sent has no outMessage"
argument_list|)
throw|;
block|}
name|JMSMessageHeadersType
name|headers
init|=
operator|(
name|JMSMessageHeadersType
operator|)
name|outMessage
operator|.
name|get
argument_list|(
name|JMSConstants
operator|.
name|JMS_CLIENT_REQUEST_HEADERS
argument_list|)
decl_stmt|;
name|JmsTemplate
name|jmsTemplate
init|=
name|JMSFactory
operator|.
name|createJmsTemplate
argument_list|(
name|jmsConfig
argument_list|,
name|headers
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exchange
operator|.
name|isOneWay
argument_list|()
operator|&&
name|jmsListener
operator|==
literal|null
condition|)
block|{
name|jmsListener
operator|=
name|JMSFactory
operator|.
name|createJmsListener
argument_list|(
name|jmsConfig
argument_list|,
name|this
argument_list|,
name|jmsConfig
operator|.
name|getReplyDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|javax
operator|.
name|jms
operator|.
name|Destination
name|replyTo
init|=
name|exchange
operator|.
name|isOneWay
argument_list|()
condition|?
literal|null
else|:
name|jmsListener
operator|.
name|getDestination
argument_list|()
decl_stmt|;
specifier|final
name|String
name|correlationId
init|=
operator|(
name|headers
operator|!=
literal|null
operator|&&
name|headers
operator|.
name|isSetJMSCorrelationID
argument_list|()
operator|)
condition|?
name|headers
operator|.
name|getJMSCorrelationID
argument_list|()
else|:
name|JMSUtils
operator|.
name|generateCorrelationId
argument_list|()
decl_stmt|;
name|MessageCreator
name|messageCreator
init|=
operator|new
name|MessageCreator
argument_list|()
block|{
specifier|public
name|javax
operator|.
name|jms
operator|.
name|Message
name|createMessage
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|String
name|messageType
init|=
name|jmsConfig
operator|.
name|getMessageType
argument_list|()
decl_stmt|;
specifier|final
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
decl_stmt|;
name|jmsMessage
operator|=
name|JMSUtils
operator|.
name|buildJMSMessageFromCXFMessage
argument_list|(
name|outMessage
argument_list|,
name|request
argument_list|,
name|messageType
argument_list|,
name|session
argument_list|,
name|replyTo
argument_list|,
name|correlationId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"client sending request: "
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
return|return
name|jmsMessage
return|;
block|}
block|}
decl_stmt|;
comment|/**          * If the message is not oneWay we will expect to receive a reply on the listener. To receive this          * reply we add the correlationId and an empty CXF Message to the correlationMap. The listener will          * fill to Message and notify this thread          */
if|if
condition|(
operator|!
name|exchange
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
name|Message
name|inMessage
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|inMessage
init|)
block|{
name|correlationMap
operator|.
name|put
argument_list|(
name|correlationId
argument_list|,
name|inMessage
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|send
argument_list|(
name|jmsConfig
operator|.
name|getTargetDestination
argument_list|()
argument_list|,
name|messageCreator
argument_list|)
expr_stmt|;
try|try
block|{
name|inMessage
operator|.
name|wait
argument_list|(
name|jmsTemplate
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|correlationMap
operator|.
name|remove
argument_list|(
name|correlationId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|correlationMap
operator|.
name|remove
argument_list|(
name|correlationId
argument_list|)
expr_stmt|;
if|if
condition|(
name|inMessage
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Timeout receiving message with correlationId "
operator|+
name|correlationId
argument_list|)
throw|;
block|}
block|}
name|exchange
operator|.
name|setInMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
if|if
condition|(
name|incomingObserver
operator|!=
literal|null
condition|)
block|{
name|incomingObserver
operator|.
name|onMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|jmsTemplate
operator|.
name|send
argument_list|(
name|jmsConfig
operator|.
name|getTargetDestination
argument_list|()
argument_list|,
name|messageCreator
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * When a message is received on the reply destination the correlation map is searched for the      * correlationId. If it is found the message is converted to a CXF message and the thread sending the      * request is notified {@inheritDoc}      */
specifier|public
name|void
name|onMessage
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
parameter_list|)
block|{
name|String
name|correlationId
decl_stmt|;
try|try
block|{
name|correlationId
operator|=
name|jmsMessage
operator|.
name|getJMSCorrelationID
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|JmsUtils
operator|.
name|convertJmsAccessException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Message
name|inMessage
init|=
name|correlationMap
operator|.
name|get
argument_list|(
name|correlationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|inMessage
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Could not correlate message with correlationId "
operator|+
name|correlationId
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"client received reply: "
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|JMSUtils
operator|.
name|populateIncomingContext
argument_list|(
name|jmsMessage
argument_list|,
name|inMessage
argument_list|,
name|JMSConstants
operator|.
name|JMS_CLIENT_RESPONSE_HEADERS
argument_list|)
expr_stmt|;
name|byte
index|[]
name|response
init|=
name|JMSUtils
operator|.
name|retrievePayload
argument_list|(
name|jmsMessage
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"The Response Message payload is : ["
operator|+
name|response
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|inMessage
init|)
block|{
name|inMessage
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|jmsListener
operator|!=
literal|null
condition|)
block|{
name|jmsListener
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"JMSConduit closed "
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
specifier|public
name|JMSConfiguration
name|getJmsConfig
parameter_list|()
block|{
return|return
name|jmsConfig
return|;
block|}
specifier|public
name|void
name|setJmsConfig
parameter_list|(
name|JMSConfiguration
name|jmsConfig
parameter_list|)
block|{
name|this
operator|.
name|jmsConfig
operator|=
name|jmsConfig
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
name|jmsListener
operator|!=
literal|null
condition|)
block|{
name|jmsListener
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

