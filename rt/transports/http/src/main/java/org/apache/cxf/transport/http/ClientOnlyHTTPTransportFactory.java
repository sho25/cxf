begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ConduitInitiator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_class
specifier|public
class|class
name|ClientOnlyHTTPTransportFactory
extends|extends
name|AbstractHTTPTransportFactory
implements|implements
name|ConduitInitiator
block|{
specifier|public
name|ClientOnlyHTTPTransportFactory
parameter_list|()
block|{     }
annotation|@
name|Resource
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|super
operator|.
name|setBus
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
comment|/**      * This call creates a new HTTPConduit for the endpoint. It is equivalent      * to calling getConduit without an EndpointReferenceType.      */
specifier|public
name|Conduit
name|getConduit
parameter_list|(
name|EndpointInfo
name|endpointInfo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getConduit
argument_list|(
name|endpointInfo
argument_list|,
name|endpointInfo
operator|.
name|getTarget
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * This call creates a new HTTP Conduit based on the EndpointInfo and      * EndpointReferenceType.      * TODO: What are the formal constraints on EndpointInfo and       * EndpointReferenceType values?      */
specifier|public
name|Conduit
name|getConduit
parameter_list|(
name|EndpointInfo
name|endpointInfo
parameter_list|,
name|EndpointReferenceType
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|HTTPConduit
name|conduit
init|=
name|target
operator|==
literal|null
condition|?
operator|new
name|HTTPConduit
argument_list|(
name|bus
argument_list|,
name|endpointInfo
argument_list|)
else|:
operator|new
name|HTTPConduit
argument_list|(
name|bus
argument_list|,
name|endpointInfo
argument_list|,
name|target
argument_list|)
decl_stmt|;
comment|// Spring configure the conduit.
name|String
name|address
init|=
name|conduit
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
operator|&&
name|address
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|address
operator|=
name|address
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|address
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|configure
argument_list|(
name|conduit
argument_list|,
name|conduit
operator|.
name|getBeanName
argument_list|()
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|conduit
operator|.
name|finalizeConfig
argument_list|()
expr_stmt|;
return|return
name|conduit
return|;
block|}
block|}
end_class

end_unit

