begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|AbstractDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|servlet
operator|.
name|ServletConfigAware
import|;
end_import

begin_class
specifier|public
class|class
name|DestinationRegistryImpl
implements|implements
name|DestinationRegistry
implements|,
name|ServletConfigAware
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SLASH
init|=
literal|"/"
decl_stmt|;
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|AbstractHTTPDestination
argument_list|>
name|destinations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AbstractHTTPDestination
argument_list|>
name|decodedDestinations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|DestinationRegistryImpl
parameter_list|()
block|{     }
specifier|public
specifier|synchronized
name|void
name|addDestination
parameter_list|(
name|AbstractHTTPDestination
name|destination
parameter_list|)
block|{
name|String
name|path
init|=
name|getTrimmedPath
argument_list|(
name|destination
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|)
decl_stmt|;
name|AbstractHTTPDestination
name|dest
init|=
name|destinations
operator|.
name|putIfAbsent
argument_list|(
name|path
argument_list|,
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|dest
operator|!=
literal|null
operator|&&
name|dest
operator|!=
name|destination
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Already a destination on "
operator|+
name|path
argument_list|)
throw|;
block|}
try|try
block|{
name|String
name|path2
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|path
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|path2
argument_list|)
condition|)
block|{
name|decodedDestinations
operator|.
name|put
argument_list|(
name|path2
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported Encoding"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|removeDestination
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|destinations
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|path2
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|path
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|path2
argument_list|)
condition|)
block|{
name|decodedDestinations
operator|.
name|remove
argument_list|(
name|path2
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported Encoding"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AbstractHTTPDestination
name|getDestinationForPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|getDestinationForPath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|AbstractHTTPDestination
name|getDestinationForPath
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|tryDecoding
parameter_list|)
block|{
comment|// to use the url context match
name|String
name|m
init|=
name|getTrimmedPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|AbstractHTTPDestination
name|s
init|=
name|destinations
operator|.
name|get
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|decodedDestinations
operator|.
name|get
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
specifier|public
name|AbstractHTTPDestination
name|checkRestfulRequest
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|AbstractHTTPDestination
name|ret
init|=
name|getRestfulDestination
argument_list|(
name|getDestinationsPaths
argument_list|()
argument_list|,
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
name|getRestfulDestination
argument_list|(
name|decodedDestinations
operator|.
name|keySet
argument_list|()
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|getMessageObserver
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|AbstractHTTPDestination
name|getRestfulDestination
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|destPaths
parameter_list|,
name|String
name|address
parameter_list|)
block|{
name|int
name|len
init|=
operator|-
literal|1
decl_stmt|;
name|AbstractHTTPDestination
name|ret
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|destPaths
control|)
block|{
name|String
name|thePath
init|=
name|path
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
name|path
operator|.
name|endsWith
argument_list|(
name|SLASH
argument_list|)
condition|?
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
else|:
name|path
decl_stmt|;
if|if
condition|(
operator|(
name|address
operator|.
name|equals
argument_list|(
name|thePath
argument_list|)
operator|||
name|SLASH
operator|.
name|equals
argument_list|(
name|thePath
argument_list|)
operator|||
operator|(
name|address
operator|.
name|length
argument_list|()
operator|>
name|thePath
operator|.
name|length
argument_list|()
operator|&&
name|address
operator|.
name|startsWith
argument_list|(
name|thePath
argument_list|)
operator|&&
name|address
operator|.
name|charAt
argument_list|(
name|thePath
operator|.
name|length
argument_list|()
argument_list|)
operator|==
literal|'/'
operator|)
operator|)
operator|&&
name|thePath
operator|.
name|length
argument_list|()
operator|>
name|len
condition|)
block|{
name|ret
operator|=
name|getDestinationForPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|len
operator|=
name|path
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|AbstractHTTPDestination
argument_list|>
name|getDestinations
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|destinations
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|AbstractDestination
index|[]
name|getSortedDestinations
parameter_list|()
block|{
name|List
argument_list|<
name|AbstractHTTPDestination
argument_list|>
name|dest2
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|getDestinations
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|dest2
argument_list|,
operator|new
name|Comparator
argument_list|<
name|AbstractHTTPDestination
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|AbstractHTTPDestination
name|o1
parameter_list|,
name|AbstractHTTPDestination
name|o2
parameter_list|)
block|{
name|InterfaceInfo
name|i1
init|=
name|o1
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getInterface
argument_list|()
decl_stmt|;
name|InterfaceInfo
name|i2
init|=
name|o2
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getInterface
argument_list|()
decl_stmt|;
if|if
condition|(
name|i1
operator|==
literal|null
operator|&&
name|i2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|i1
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|i2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
name|i1
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|compareTo
argument_list|(
name|i2
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|dest2
operator|.
name|toArray
argument_list|(
operator|new
name|AbstractDestination
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getDestinationsPaths
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|destinations
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Remove the transport protocol from the path and make      * it starts with /      * @param path      * @return trimmed path      */
specifier|public
name|String
name|getTrimmedPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|"/"
return|;
block|}
specifier|final
name|String
name|lh
init|=
literal|"http://localhost/"
decl_stmt|;
specifier|final
name|String
name|lhs
init|=
literal|"https://localhost/"
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|lh
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|lh
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|lhs
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|lhs
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|contains
argument_list|(
literal|"://"
argument_list|)
operator|&&
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onServletConfigAvailable
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
for|for
control|(
specifier|final
name|AbstractHTTPDestination
name|destination
range|:
name|getDestinations
argument_list|()
control|)
block|{
if|if
condition|(
name|destination
operator|instanceof
name|ServletConfigAware
condition|)
block|{
operator|(
operator|(
name|ServletConfigAware
operator|)
name|destination
operator|)
operator|.
name|onServletConfigAvailable
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

