begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|blueprint
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|ParserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|mutable
operator|.
name|MutableBeanMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|blueprint
operator|.
name|AbstractBPBeanDefinitionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSClientParametersConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|CertificateConstraintsType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|CipherSuites
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|FiltersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|KeyManagersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|SecureRandomParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|TLSClientParametersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|TrustManagersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|HTTPConduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|MessageTrustDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|auth
operator|.
name|HttpAuthSupplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|Metadata
import|;
end_import

begin_class
specifier|public
class|class
name|HttpConduitBPBeanDefinitionParser
extends|extends
name|AbstractBPBeanDefinitionParser
block|{
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_NS
init|=
literal|"http://cxf.apache.org/transports/http/configuration"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SECURITY_NS
init|=
literal|"http://cxf.apache.org/configuration/security"
decl_stmt|;
specifier|public
name|Metadata
name|parse
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|context
parameter_list|)
block|{
name|MutableBeanMetadata
name|bean
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|bean
operator|.
name|setRuntimeClass
argument_list|(
name|HTTPConduit
operator|.
name|class
argument_list|)
expr_stmt|;
name|mapElementToHolder
argument_list|(
name|context
argument_list|,
name|bean
argument_list|,
name|element
argument_list|,
operator|new
name|QName
argument_list|(
name|HTTP_NS
argument_list|,
literal|"client"
argument_list|)
argument_list|,
literal|"client"
argument_list|,
name|HTTPClientPolicyHolder
operator|.
name|class
argument_list|)
expr_stmt|;
name|mapElementToHolder
argument_list|(
name|context
argument_list|,
name|bean
argument_list|,
name|element
argument_list|,
operator|new
name|QName
argument_list|(
name|HTTP_NS
argument_list|,
literal|"proxyAuthorization"
argument_list|)
argument_list|,
literal|"proxyAuthorization"
argument_list|,
name|ProxyAuthorizationPolicyHolder
operator|.
name|class
argument_list|)
expr_stmt|;
name|mapElementToHolder
argument_list|(
name|context
argument_list|,
name|bean
argument_list|,
name|element
argument_list|,
operator|new
name|QName
argument_list|(
name|HTTP_NS
argument_list|,
literal|"authorization"
argument_list|)
argument_list|,
literal|"authorization"
argument_list|,
name|AuthorizationPolicyHolder
operator|.
name|class
argument_list|)
expr_stmt|;
name|parseAttributes
argument_list|(
name|element
argument_list|,
name|context
argument_list|,
name|bean
argument_list|)
expr_stmt|;
name|parseChildElements
argument_list|(
name|element
argument_list|,
name|context
argument_list|,
name|bean
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setScope
argument_list|(
name|MutableBeanMetadata
operator|.
name|SCOPE_PROTOTYPE
argument_list|)
expr_stmt|;
return|return
name|bean
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processNameAttribute
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|context
parameter_list|,
name|MutableBeanMetadata
name|bean
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|bean
operator|.
name|setId
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|mapElement
parameter_list|(
name|ParserContext
name|ctx
parameter_list|,
name|MutableBeanMetadata
name|bean
parameter_list|,
name|Element
name|el
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
literal|"tlsClientParameters"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|mapTLSClientParameters
argument_list|(
name|ctx
argument_list|,
name|bean
argument_list|,
name|el
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"trustDecider"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|mapBeanOrClassElement
argument_list|(
name|ctx
argument_list|,
name|bean
argument_list|,
name|el
argument_list|,
name|MessageTrustDecider
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"authSupplier"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|mapBeanOrClassElement
argument_list|(
name|ctx
argument_list|,
name|bean
argument_list|,
name|el
argument_list|,
name|HttpAuthSupplier
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|mapTLSClientParameters
parameter_list|(
name|ParserContext
name|ctx
parameter_list|,
name|MutableBeanMetadata
name|bean
parameter_list|,
name|Element
name|el
parameter_list|)
block|{
name|MutableBeanMetadata
name|paramsbean
init|=
name|ctx
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|paramsbean
operator|.
name|setRuntimeClass
argument_list|(
name|TLSClientParametersConfig
operator|.
name|TLSClientParametersTypeInternal
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// read the attributes
name|NamedNodeMap
name|as
init|=
name|el
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|as
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Attr
name|a
init|=
operator|(
name|Attr
operator|)
name|as
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|getNamespaceURI
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|aname
init|=
name|a
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"useHttpsURLConnectionDefaultSslSocketFactory"
operator|.
name|equals
argument_list|(
name|aname
argument_list|)
operator|||
literal|"useHttpsURLConnectionDefaultHostnameVerifier"
operator|.
name|equals
argument_list|(
name|aname
argument_list|)
operator|||
literal|"disableCNCheck"
operator|.
name|equals
argument_list|(
name|aname
argument_list|)
operator|||
literal|"jsseProvider"
operator|.
name|equals
argument_list|(
name|aname
argument_list|)
operator|||
literal|"secureSocketProtocol"
operator|.
name|equals
argument_list|(
name|aname
argument_list|)
operator|||
literal|"sslCacheTimeout"
operator|.
name|equals
argument_list|(
name|aname
argument_list|)
condition|)
block|{
name|paramsbean
operator|.
name|addProperty
argument_list|(
name|aname
argument_list|,
name|createValue
argument_list|(
name|ctx
argument_list|,
name|a
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// read the child elements
name|Node
name|n
init|=
name|el
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|!=
name|n
operator|.
name|getNodeType
argument_list|()
operator|||
operator|!
name|SECURITY_NS
operator|.
name|equals
argument_list|(
name|n
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|n
operator|=
name|n
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|String
name|ename
init|=
name|n
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
comment|// Schema should require that no more than one each of these exist.
name|String
name|ref
init|=
operator|(
operator|(
name|Element
operator|)
name|n
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"ref"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"keyManagers"
operator|.
name|equals
argument_list|(
name|ename
argument_list|)
condition|)
block|{
if|if
condition|(
name|ref
operator|!=
literal|null
operator|&&
name|ref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|paramsbean
operator|.
name|addProperty
argument_list|(
literal|"keyManagersRef"
argument_list|,
name|createRef
argument_list|(
name|ctx
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mapElementToJaxbProperty
argument_list|(
name|ctx
argument_list|,
name|paramsbean
argument_list|,
operator|(
name|Element
operator|)
name|n
argument_list|,
name|ename
argument_list|,
name|KeyManagersType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"trustManagers"
operator|.
name|equals
argument_list|(
name|ename
argument_list|)
condition|)
block|{
if|if
condition|(
name|ref
operator|!=
literal|null
operator|&&
name|ref
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|paramsbean
operator|.
name|addProperty
argument_list|(
literal|"trustManagersRef"
argument_list|,
name|createRef
argument_list|(
name|ctx
argument_list|,
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mapElementToJaxbProperty
argument_list|(
name|ctx
argument_list|,
name|paramsbean
argument_list|,
operator|(
name|Element
operator|)
name|n
argument_list|,
name|ename
argument_list|,
name|TrustManagersType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"cipherSuites"
operator|.
name|equals
argument_list|(
name|ename
argument_list|)
condition|)
block|{
name|mapElementToJaxbProperty
argument_list|(
name|ctx
argument_list|,
name|paramsbean
argument_list|,
operator|(
name|Element
operator|)
name|n
argument_list|,
name|ename
argument_list|,
name|CipherSuites
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"cipherSuitesFilter"
operator|.
name|equals
argument_list|(
name|ename
argument_list|)
condition|)
block|{
name|mapElementToJaxbProperty
argument_list|(
name|ctx
argument_list|,
name|paramsbean
argument_list|,
operator|(
name|Element
operator|)
name|n
argument_list|,
name|ename
argument_list|,
name|FiltersType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"secureRandomParameters"
operator|.
name|equals
argument_list|(
name|ename
argument_list|)
condition|)
block|{
name|mapElementToJaxbProperty
argument_list|(
name|ctx
argument_list|,
name|paramsbean
argument_list|,
operator|(
name|Element
operator|)
name|n
argument_list|,
name|ename
argument_list|,
name|SecureRandomParameters
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"certConstraints"
operator|.
name|equals
argument_list|(
name|ename
argument_list|)
condition|)
block|{
name|mapElementToJaxbProperty
argument_list|(
name|ctx
argument_list|,
name|paramsbean
argument_list|,
operator|(
name|Element
operator|)
name|n
argument_list|,
name|ename
argument_list|,
name|CertificateConstraintsType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"certAlias"
operator|.
name|equals
argument_list|(
name|ename
argument_list|)
condition|)
block|{
name|paramsbean
operator|.
name|addProperty
argument_list|(
name|ename
argument_list|,
name|createValue
argument_list|(
name|ctx
argument_list|,
name|n
operator|.
name|getTextContent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|n
operator|=
name|n
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|MutableBeanMetadata
name|jaxbbean
init|=
name|ctx
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|jaxbbean
operator|.
name|setRuntimeClass
argument_list|(
name|TLSClientParametersConfig
operator|.
name|class
argument_list|)
expr_stmt|;
name|jaxbbean
operator|.
name|setFactoryMethod
argument_list|(
literal|"createTLSClientParametersFromType"
argument_list|)
expr_stmt|;
name|jaxbbean
operator|.
name|addArgument
argument_list|(
name|paramsbean
argument_list|,
name|TLSClientParametersType
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bean
operator|.
name|addProperty
argument_list|(
literal|"tlsClientParameters"
argument_list|,
name|jaxbbean
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|mapBeanOrClassElement
parameter_list|(
name|ParserContext
name|ctx
parameter_list|,
name|MutableBeanMetadata
name|bean
parameter_list|,
name|Element
name|el
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|String
name|elementName
init|=
name|el
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|classProperty
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|String
name|beanref
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"bean"
argument_list|)
decl_stmt|;
if|if
condition|(
name|classProperty
operator|!=
literal|null
operator|&&
operator|!
name|classProperty
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|bean
operator|.
name|addProperty
argument_list|(
name|elementName
argument_list|,
name|createObjectOfClass
argument_list|(
name|ctx
argument_list|,
name|classProperty
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|beanref
operator|!=
literal|null
operator|&&
operator|!
name|beanref
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|bean
operator|.
name|addProperty
argument_list|(
name|elementName
argument_list|,
name|createRef
argument_list|(
name|ctx
argument_list|,
name|beanref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

