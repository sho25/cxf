begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|servlet
operator|.
name|servicelist
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|AbstractDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|servlet
operator|.
name|ServletDestination
import|;
end_import

begin_class
specifier|public
class|class
name|UnformattedServiceListWriter
implements|implements
name|ServiceListWriter
block|{
name|boolean
name|renderWsdlList
decl_stmt|;
specifier|public
name|UnformattedServiceListWriter
parameter_list|(
name|boolean
name|renderWsdlList
parameter_list|)
block|{
name|this
operator|.
name|renderWsdlList
operator|=
name|renderWsdlList
expr_stmt|;
block|}
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|"text/html; charset=UTF-8"
return|;
block|}
specifier|public
name|void
name|writeServiceList
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|String
name|basePath
parameter_list|,
name|AbstractDestination
index|[]
name|soapDestinations
parameter_list|,
name|AbstractDestination
index|[]
name|restDestinations
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|soapDestinations
operator|.
name|length
operator|>
literal|0
operator|||
name|restDestinations
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|soapDestinations
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|writeUnformattedSOAPEndpoints
argument_list|(
name|writer
argument_list|,
name|basePath
argument_list|,
name|soapDestinations
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|restDestinations
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|writeUnformattedRESTfulEndpoints
argument_list|(
name|writer
argument_list|,
name|basePath
argument_list|,
name|restDestinations
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"No services have been found."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeUnformattedSOAPEndpoints
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|String
name|baseAddress
parameter_list|,
name|AbstractDestination
index|[]
name|destinations
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|AbstractDestination
name|sd
range|:
name|destinations
control|)
block|{
name|String
name|address
init|=
name|getAbsoluteAddress
argument_list|(
name|baseAddress
argument_list|,
name|sd
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|address
argument_list|)
expr_stmt|;
if|if
condition|(
name|renderWsdlList
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"?wsdl"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeUnformattedRESTfulEndpoints
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|String
name|baseAddress
parameter_list|,
name|AbstractDestination
index|[]
name|destinations
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|AbstractDestination
name|sd
range|:
name|destinations
control|)
block|{
name|String
name|address
init|=
name|getAbsoluteAddress
argument_list|(
name|baseAddress
argument_list|,
name|sd
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|address
operator|+
literal|"?_wadl\n"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getAbsoluteAddress
parameter_list|(
name|String
name|basePath
parameter_list|,
name|AbstractDestination
name|d
parameter_list|)
block|{
name|String
name|endpointAddress
init|=
operator|(
name|String
operator|)
name|d
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"publishedEndpointUrl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpointAddress
operator|!=
literal|null
condition|)
block|{
return|return
name|endpointAddress
return|;
block|}
name|endpointAddress
operator|=
name|d
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
expr_stmt|;
if|if
condition|(
name|d
operator|instanceof
name|ServletDestination
operator|&&
operator|(
name|endpointAddress
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
operator|||
name|endpointAddress
operator|.
name|startsWith
argument_list|(
literal|"https://"
argument_list|)
operator|)
condition|)
block|{
name|String
name|path
init|=
operator|(
operator|(
name|ServletDestination
operator|)
name|d
operator|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|basePath
operator|+
name|path
return|;
block|}
elseif|else
if|if
condition|(
name|basePath
operator|==
literal|null
operator|||
name|endpointAddress
operator|.
name|startsWith
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
return|return
name|endpointAddress
return|;
block|}
else|else
block|{
return|return
name|basePath
operator|+
name|endpointAddress
return|;
block|}
block|}
block|}
end_class

end_unit

