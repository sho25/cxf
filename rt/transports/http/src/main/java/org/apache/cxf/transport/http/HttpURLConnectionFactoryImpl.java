begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_comment
comment|/**  * This class is a URLConnectionFactory that creates URLConnections  * for the HTTP protocol.  *  */
end_comment

begin_class
specifier|public
class|class
name|HttpURLConnectionFactoryImpl
implements|implements
name|HttpURLConnectionFactory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_URL_PROTOCOL_ID
init|=
literal|"http"
decl_stmt|;
comment|/**      * This call creates an URLConnection for an HTTP url.      * @throws IOException if the url protocol is not "http".      */
specifier|public
name|HttpURLConnection
name|createConnection
parameter_list|(
name|Proxy
name|proxy
parameter_list|,
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|url
operator|.
name|getProtocol
argument_list|()
operator|.
name|equals
argument_list|(
name|HTTP_URL_PROTOCOL_ID
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal Protocol "
operator|+
name|url
operator|.
name|getProtocol
argument_list|()
operator|+
literal|" for HTTP URLConnection Factory."
argument_list|)
throw|;
block|}
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|(
name|proxy
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
return|;
block|}
block|}
comment|/**      * This operation returns the HttpURLConnectionInfo object that      * represents the HttpURLConnection.      */
specifier|public
name|HttpURLConnectionInfo
name|getConnectionInfo
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
comment|// There is no special information other than the URL
comment|// to represent for an HttpURLConnection.
return|return
operator|new
name|HttpURLConnectionInfo
argument_list|(
name|connection
argument_list|)
return|;
block|}
block|}
end_class

end_unit

