begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Authenticator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|PasswordAuthentication
import|;
end_import

begin_class
specifier|public
class|class
name|ReferencingAuthenticator
extends|extends
name|Authenticator
block|{
specifier|final
name|Reference
argument_list|<
name|Authenticator
argument_list|>
name|auth
decl_stmt|;
specifier|final
name|Authenticator
name|wrapped
decl_stmt|;
specifier|public
name|ReferencingAuthenticator
parameter_list|(
name|Authenticator
name|cxfauth
parameter_list|,
name|Authenticator
name|wrapped
parameter_list|)
block|{
name|this
operator|.
name|auth
operator|=
operator|new
name|WeakReference
argument_list|<>
argument_list|(
name|cxfauth
argument_list|)
expr_stmt|;
name|this
operator|.
name|wrapped
operator|=
name|wrapped
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|PasswordAuthentication
name|getPasswordAuthentication
parameter_list|()
block|{
name|Authenticator
name|cxfauth
init|=
name|auth
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|cxfauth
operator|==
literal|null
condition|)
block|{
name|remove
argument_list|()
expr_stmt|;
block|}
name|PasswordAuthentication
name|pauth
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|wrapped
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|pauth
operator|=
name|tryWith
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
if|if
condition|(
name|pauth
operator|!=
literal|null
condition|)
block|{
return|return
name|pauth
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|pauth
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cxfauth
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|pauth
operator|=
name|tryWith
argument_list|(
name|cxfauth
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|pauth
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|pauth
return|;
block|}
specifier|public
specifier|final
name|void
name|check
parameter_list|()
block|{
name|Authenticator
name|cxfauth
init|=
name|auth
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|cxfauth
operator|==
literal|null
condition|)
block|{
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|wrapped
operator|!=
literal|null
operator|&&
name|wrapped
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ReferencingAuthenticator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|Method
name|m
init|=
name|wrapped
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"check"
argument_list|)
decl_stmt|;
name|m
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m
operator|.
name|invoke
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
specifier|private
name|void
name|remove
parameter_list|()
block|{
try|try
block|{
for|for
control|(
specifier|final
name|Field
name|f
range|:
name|Authenticator
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|Authenticator
operator|.
name|class
argument_list|)
condition|)
block|{
try|try
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Authenticator
name|o
init|=
operator|(
name|Authenticator
operator|)
name|f
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
comment|//this is at the root of any chain of authenticators
name|Authenticator
operator|.
name|setDefault
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removeFromChain
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
block|}
specifier|private
name|void
name|removeFromChain
parameter_list|(
name|Authenticator
name|a
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|a
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ReferencingAuthenticator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|//multiple referencing authenticators, we can remove ourself
name|Field
name|f2
init|=
name|a
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"wrapped"
argument_list|)
decl_stmt|;
name|f2
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Authenticator
name|a2
init|=
operator|(
name|Authenticator
operator|)
name|f2
operator|.
name|get
argument_list|(
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|a2
operator|==
name|this
condition|)
block|{
name|f2
operator|.
name|set
argument_list|(
name|a
argument_list|,
name|wrapped
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removeFromChain
argument_list|(
name|a2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
block|}
name|PasswordAuthentication
name|tryWith
parameter_list|(
name|Authenticator
name|a
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
specifier|final
name|Field
name|f
range|:
name|Authenticator
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|f
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|f
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|f
operator|.
name|set
argument_list|(
name|a
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Method
name|m
init|=
name|Authenticator
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getPasswordAuthentication"
argument_list|)
decl_stmt|;
name|m
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|PasswordAuthentication
operator|)
name|m
operator|.
name|invoke
argument_list|(
name|a
argument_list|)
return|;
block|}
block|}
end_class

end_unit

