begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/*  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|httpclient
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * A collection of utilities relating to InetAddresses.  *  * Copied from httpclient.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|InetAddressUtils
block|{
specifier|private
specifier|static
specifier|final
name|String
name|IPV4_BASIC_PATTERN_STRING
init|=
literal|"(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}"
comment|// initial 3 fields, 0-255 followed by .
operator|+
literal|"([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])"
decl_stmt|;
comment|// final field, 0-255
specifier|private
specifier|static
specifier|final
name|Pattern
name|IPV4_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^"
operator|+
name|IPV4_BASIC_PATTERN_STRING
operator|+
literal|"$"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|IPV4_MAPPED_IPV6_PATTERN
init|=
comment|// TODO does not allow for redundant leading zeros
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^::[fF]{4}:"
operator|+
name|IPV4_BASIC_PATTERN_STRING
operator|+
literal|"$"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|IPV6_STD_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[0-9a-fA-F]{1,4}(:[0-9a-fA-F]{1,4}){7}$"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|IPV6_HEX_COMPRESSED_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5})?)"
comment|// 0-6 hex fields
operator|+
literal|"::"
operator|+
literal|"(([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5})?)$"
argument_list|)
decl_stmt|;
comment|// 0-6 hex fields
comment|/*      *  The above pattern is not totally rigorous as it allows for more than 7 hex fields in total      */
specifier|private
specifier|static
specifier|final
name|char
name|COLON_CHAR
init|=
literal|':'
decl_stmt|;
comment|// Must not have more than 7 colons (i.e. 8 fields)
specifier|private
specifier|static
specifier|final
name|int
name|MAX_COLON_COUNT
init|=
literal|7
decl_stmt|;
specifier|private
name|InetAddressUtils
parameter_list|()
block|{     }
comment|/**      * Checks whether the parameter is a valid IPv4 address      *      * @param input the address string to check for validity      * @return true if the input parameter is a valid IPv4 address      */
specifier|public
specifier|static
name|boolean
name|isIPv4Address
parameter_list|(
specifier|final
name|String
name|input
parameter_list|)
block|{
return|return
name|IPV4_PATTERN
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isIPv4MappedIPv64Address
parameter_list|(
specifier|final
name|String
name|input
parameter_list|)
block|{
return|return
name|IPV4_MAPPED_IPV6_PATTERN
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
comment|/**      * Checks whether the parameter is a valid standard (non-compressed) IPv6 address      *      * @param input the address string to check for validity      * @return true if the input parameter is a valid standard (non-compressed) IPv6 address      */
specifier|public
specifier|static
name|boolean
name|isIPv6StdAddress
parameter_list|(
specifier|final
name|String
name|input
parameter_list|)
block|{
return|return
name|IPV6_STD_PATTERN
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
comment|/**      * Checks whether the parameter is a valid compressed IPv6 address      *      * @param input the address string to check for validity      * @return true if the input parameter is a valid compressed IPv6 address      */
specifier|public
specifier|static
name|boolean
name|isIPv6HexCompressedAddress
parameter_list|(
specifier|final
name|String
name|input
parameter_list|)
block|{
name|int
name|colonCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|input
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|input
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
name|COLON_CHAR
condition|)
block|{
name|colonCount
operator|++
expr_stmt|;
block|}
block|}
return|return
name|colonCount
operator|<=
name|MAX_COLON_COUNT
operator|&&
name|IPV6_HEX_COMPRESSED_PATTERN
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
comment|/**      * Checks whether the parameter is a valid IPv6 address (including compressed).      *      * @param input the address string to check for validity      * @return true if the input parameter is a valid standard or compressed IPv6 address      */
specifier|public
specifier|static
name|boolean
name|isIPv6Address
parameter_list|(
specifier|final
name|String
name|input
parameter_list|)
block|{
return|return
name|isIPv6StdAddress
argument_list|(
name|input
argument_list|)
operator|||
name|isIPv6HexCompressedAddress
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
end_class

end_unit

