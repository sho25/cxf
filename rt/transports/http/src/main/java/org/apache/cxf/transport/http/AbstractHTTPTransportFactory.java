begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Port
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|http
operator|.
name|HTTPAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|soap
operator|.
name|SOAPAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSClientParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|AbstractTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ConduitInitiator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ConduitInitiatorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|HttpsURLConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|http
operator|.
name|AddressType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLEndpointFactory
import|;
end_import

begin_comment
comment|/**  * As a ConduitInitiator, this class sets up new HTTPConduits for particular  * endpoints.  *  * TODO: Document WSDLEndpointFactory  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractHTTPTransportFactory
extends|extends
name|AbstractTransportFactory
implements|implements
name|ConduitInitiator
implements|,
name|WSDLEndpointFactory
block|{
comment|/**      * This constant holds the prefixes served by this factory.      */
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|URI_PREFIXES
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|URI_PREFIXES
operator|.
name|add
argument_list|(
literal|"http://"
argument_list|)
expr_stmt|;
name|URI_PREFIXES
operator|.
name|add
argument_list|(
literal|"https://"
argument_list|)
expr_stmt|;
block|}
comment|/**      * The CXF Bus which this HTTPTransportFactory      * is governed.      */
specifier|protected
name|Bus
name|bus
decl_stmt|;
comment|/**      * This collection contains "activationNamespaces" which is synominous      * with "transportId"s.       */
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|activationNamespaces
decl_stmt|;
comment|/**      * This method is used by Spring to inject the bus.      * @param b The CXF bus.      */
annotation|@
name|Resource
argument_list|(
name|name
operator|=
literal|"cxf"
argument_list|)
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
block|}
comment|/**      * This method returns the CXF Bus under which this HTTPTransportFactory      * is governed.      */
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
comment|/**      * This call is used by CXF ExtensionManager to inject the activationNamespaces      * @param ans The transport ids.      */
specifier|public
name|void
name|setActivationNamespaces
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|ans
parameter_list|)
block|{
name|activationNamespaces
operator|=
name|ans
expr_stmt|;
block|}
comment|/**      * This call gets called after this class is instantiated by Spring.      * It registers itself as a ConduitInitiator and DestinationFactory under      * the many names that are considered "transportIds" (which are currently      * named "activationNamespaces").      */
annotation|@
name|PostConstruct
specifier|public
name|void
name|registerWithBindingManager
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|bus
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|getTransportIds
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setTransportIds
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|activationNamespaces
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|activationNamespaces
operator|==
literal|null
condition|)
block|{
name|activationNamespaces
operator|=
name|getTransportIds
argument_list|()
expr_stmt|;
block|}
name|ConduitInitiatorManager
name|cim
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ConduitInitiatorManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Note, activationNamespaces can be null
if|if
condition|(
literal|null
operator|!=
name|cim
operator|&&
literal|null
operator|!=
name|activationNamespaces
condition|)
block|{
for|for
control|(
name|String
name|ns
range|:
name|activationNamespaces
control|)
block|{
name|cim
operator|.
name|registerConduitInitiator
argument_list|(
name|ns
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This call creates a new HTTPConduit for the endpoint. It is equivalent      * to calling getConduit without an EndpointReferenceType.      */
specifier|public
name|Conduit
name|getConduit
parameter_list|(
name|EndpointInfo
name|endpointInfo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getConduit
argument_list|(
name|endpointInfo
argument_list|,
name|endpointInfo
operator|.
name|getTarget
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * This call creates a new HTTP Conduit based on the EndpointInfo and      * EndpointReferenceType.      * TODO: What are the formal constraints on EndpointInfo and       * EndpointReferenceType values?      */
specifier|public
name|Conduit
name|getConduit
parameter_list|(
name|EndpointInfo
name|endpointInfo
parameter_list|,
name|EndpointReferenceType
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|HTTPConduit
name|conduit
init|=
name|target
operator|==
literal|null
condition|?
operator|new
name|HTTPConduit
argument_list|(
name|bus
argument_list|,
name|endpointInfo
argument_list|)
else|:
operator|new
name|HTTPConduit
argument_list|(
name|bus
argument_list|,
name|endpointInfo
argument_list|,
name|target
argument_list|)
decl_stmt|;
comment|// Spring configure the conduit.
name|configure
argument_list|(
name|conduit
argument_list|)
expr_stmt|;
name|conduit
operator|.
name|finalizeConfig
argument_list|()
expr_stmt|;
return|return
name|conduit
return|;
block|}
specifier|public
name|EndpointInfo
name|createEndpointInfo
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|,
name|BindingInfo
name|b
parameter_list|,
name|Port
name|port
parameter_list|)
block|{
if|if
condition|(
name|port
operator|!=
literal|null
condition|)
block|{
name|List
name|ees
init|=
name|port
operator|.
name|getExtensibilityElements
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|itr
init|=
name|ees
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|extensor
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extensor
operator|instanceof
name|HTTPAddress
condition|)
block|{
specifier|final
name|HTTPAddress
name|httpAdd
init|=
operator|(
name|HTTPAddress
operator|)
name|extensor
decl_stmt|;
name|EndpointInfo
name|info
init|=
operator|new
name|HttpEndpointInfo
argument_list|(
name|serviceInfo
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/http/"
argument_list|)
decl_stmt|;
name|info
operator|.
name|setAddress
argument_list|(
name|httpAdd
operator|.
name|getLocationURI
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|addExtensor
argument_list|(
name|httpAdd
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
elseif|else
if|if
condition|(
name|extensor
operator|instanceof
name|AddressType
condition|)
block|{
specifier|final
name|AddressType
name|httpAdd
init|=
operator|(
name|AddressType
operator|)
name|extensor
decl_stmt|;
name|EndpointInfo
name|info
init|=
operator|new
name|HttpEndpointInfo
argument_list|(
name|serviceInfo
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/http/"
argument_list|)
decl_stmt|;
name|info
operator|.
name|setAddress
argument_list|(
name|httpAdd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|addExtensor
argument_list|(
name|httpAdd
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
block|}
block|}
name|HttpEndpointInfo
name|hei
init|=
operator|new
name|HttpEndpointInfo
argument_list|(
name|serviceInfo
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/http/"
argument_list|)
decl_stmt|;
name|AddressType
name|at
init|=
operator|new
name|HttpAddressType
argument_list|()
decl_stmt|;
name|hei
operator|.
name|addExtensor
argument_list|(
name|at
argument_list|)
expr_stmt|;
return|return
name|hei
return|;
block|}
specifier|public
name|void
name|createPortExtensors
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|Service
name|service
parameter_list|)
block|{
comment|// TODO
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getUriPrefixes
parameter_list|()
block|{
return|return
name|URI_PREFIXES
return|;
block|}
comment|/**      * This call uses the Configurer from the bus to configure      * a bean.      *       * @param bean      */
specifier|protected
name|void
name|configure
parameter_list|(
name|Object
name|bean
parameter_list|)
block|{
name|Configurer
name|configurer
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|Configurer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|configurer
condition|)
block|{
name|configurer
operator|.
name|configureBean
argument_list|(
name|bean
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This static call creates a connection factory based on      * the existence of the SSL (TLS) client side configuration.       */
specifier|static
name|HttpURLConnectionFactory
name|getConnectionFactory
parameter_list|(
name|HTTPConduit
name|configuredConduit
parameter_list|)
block|{
name|HttpURLConnectionFactory
name|fac
init|=
literal|null
decl_stmt|;
name|boolean
name|useHttps
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|address
init|=
name|configuredConduit
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
operator|&&
name|address
operator|.
name|startsWith
argument_list|(
name|HttpsURLConnectionFactory
operator|.
name|HTTPS_URL_PROTOCOL_ID
operator|+
literal|":/"
argument_list|)
condition|)
block|{
name|useHttps
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|//ignore, just use info based on Tls
block|}
if|if
condition|(
name|useHttps
operator|||
name|configuredConduit
operator|.
name|getTlsClientParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TLSClientParameters
name|params
init|=
name|configuredConduit
operator|.
name|getTlsClientParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|TLSClientParameters
argument_list|()
expr_stmt|;
comment|//use defaults
block|}
name|fac
operator|=
operator|new
name|HttpsURLConnectionFactory
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fac
operator|=
operator|new
name|HttpURLConnectionFactoryImpl
argument_list|()
expr_stmt|;
block|}
return|return
name|fac
return|;
block|}
specifier|private
specifier|static
class|class
name|HttpEndpointInfo
extends|extends
name|EndpointInfo
block|{
name|AddressType
name|saddress
decl_stmt|;
name|HttpEndpointInfo
parameter_list|(
name|ServiceInfo
name|serv
parameter_list|,
name|String
name|trans
parameter_list|)
block|{
name|super
argument_list|(
name|serv
argument_list|,
name|trans
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setAddress
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
operator|.
name|setAddress
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|saddress
operator|!=
literal|null
condition|)
block|{
name|saddress
operator|.
name|setLocation
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addExtensor
parameter_list|(
name|Object
name|el
parameter_list|)
block|{
name|super
operator|.
name|addExtensor
argument_list|(
name|el
argument_list|)
expr_stmt|;
if|if
condition|(
name|el
operator|instanceof
name|AddressType
condition|)
block|{
name|saddress
operator|=
operator|(
name|AddressType
operator|)
name|el
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|HttpAddressType
extends|extends
name|AddressType
implements|implements
name|HTTPAddress
implements|,
name|SOAPAddress
block|{
specifier|public
name|HttpAddressType
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setElementType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://schemas.xmlsoap.org/wsdl/soap/"
argument_list|,
literal|"address"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getLocationURI
parameter_list|()
block|{
return|return
name|getLocation
argument_list|()
return|;
block|}
specifier|public
name|void
name|setLocationURI
parameter_list|(
name|String
name|locationURI
parameter_list|)
block|{
name|setLocation
argument_list|(
name|locationURI
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

