begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|ProxyAuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|MessageSenderInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPClientPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|Oid
import|;
end_import

begin_class
specifier|public
class|class
name|HttpSpnegoAuthInterceptor
implements|implements
name|PhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
specifier|final
class|class
name|CreateServiceTicketAction
implements|implements
name|PrivilegedExceptionAction
argument_list|<
name|byte
index|[]
argument_list|>
block|{
specifier|private
specifier|final
name|GSSContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|token
decl_stmt|;
specifier|private
name|CreateServiceTicketAction
parameter_list|(
name|GSSContext
name|context
parameter_list|,
name|byte
index|[]
name|token
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|run
parameter_list|()
throws|throws
name|GSSException
block|{
return|return
name|context
operator|.
name|initSecContext
argument_list|(
name|token
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|length
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|String
name|AUTH_NEGOTIATE_SCHEMA
init|=
literal|"Negotiate"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KERBEROS_OID
init|=
literal|"1.2.840.113554.1.2.2"
decl_stmt|;
comment|//private static final String SPNEGO_OID = "1.3.6.1.5.5.2";
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|HTTPConduit
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|BEFORE
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|BEFORE
operator|.
name|add
argument_list|(
name|MessageSenderInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
try|try
block|{
name|HTTPConduit
name|conduit
init|=
operator|(
name|HTTPConduit
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getConduit
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|addNegotiationAuth
argument_list|(
name|conduit
argument_list|,
name|message
operator|.
name|getDestination
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|GSSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|addNegotiationAuth
parameter_list|(
name|HTTPConduit
name|http
parameter_list|,
name|String
name|address
parameter_list|)
throws|throws
name|PrivilegedActionException
throws|,
name|GSSException
throws|,
name|MalformedURLException
throws|,
name|LoginException
block|{
name|HTTPClientPolicy
name|httpClientPolicy
init|=
name|http
operator|.
name|getClient
argument_list|()
decl_stmt|;
if|if
condition|(
name|httpClientPolicy
operator|.
name|getProxyServer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ProxyAuthorizationPolicy
name|proxyAuthPolicy
init|=
name|http
operator|.
name|getProxyAuthorization
argument_list|()
decl_stmt|;
if|if
condition|(
name|proxyAuthPolicy
operator|!=
literal|null
operator|&&
name|AUTH_NEGOTIATE_SCHEMA
operator|.
name|equals
argument_list|(
name|proxyAuthPolicy
operator|.
name|getAuthorizationType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|proxyServicePrincipalName
init|=
literal|"HTTP/"
operator|+
name|httpClientPolicy
operator|.
name|getProxyServer
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Adding http proxy authorization service ticket for service principal name: "
operator|+
name|proxyServicePrincipalName
argument_list|)
expr_stmt|;
name|byte
index|[]
name|token
init|=
name|getToken
argument_list|(
name|proxyAuthPolicy
argument_list|,
name|proxyServicePrincipalName
argument_list|)
decl_stmt|;
name|proxyAuthPolicy
operator|.
name|setAuthorization
argument_list|(
name|Base64Utility
operator|.
name|encode
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|AuthorizationPolicy
name|authPolicy
init|=
name|http
operator|.
name|getAuthorization
argument_list|()
decl_stmt|;
if|if
condition|(
name|authPolicy
operator|!=
literal|null
operator|&&
name|AUTH_NEGOTIATE_SCHEMA
operator|.
name|equals
argument_list|(
name|authPolicy
operator|.
name|getAuthorizationType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|spn
init|=
literal|"HTTP/"
operator|+
operator|new
name|URL
argument_list|(
name|address
argument_list|)
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Adding authorization service ticket for service principal name: "
operator|+
name|spn
argument_list|)
expr_stmt|;
name|byte
index|[]
name|token
init|=
name|getToken
argument_list|(
name|authPolicy
argument_list|,
name|spn
argument_list|)
decl_stmt|;
name|authPolicy
operator|.
name|setAuthorization
argument_list|(
name|Base64Utility
operator|.
name|encode
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|CallbackHandler
name|getUsernamePasswordHandler
parameter_list|(
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|password
parameter_list|)
block|{
specifier|final
name|CallbackHandler
name|handler
init|=
operator|new
name|CallbackHandler
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
specifier|final
name|Callback
index|[]
name|callback
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callback
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|callback
index|[
name|i
index|]
operator|instanceof
name|NameCallback
condition|)
block|{
specifier|final
name|NameCallback
name|nameCallback
init|=
operator|(
name|NameCallback
operator|)
name|callback
index|[
name|i
index|]
decl_stmt|;
name|nameCallback
operator|.
name|setName
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
index|[
name|i
index|]
operator|instanceof
name|PasswordCallback
condition|)
block|{
specifier|final
name|PasswordCallback
name|passCallback
init|=
operator|(
name|PasswordCallback
operator|)
name|callback
index|[
name|i
index|]
decl_stmt|;
name|passCallback
operator|.
name|setPassword
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
return|return
name|handler
return|;
block|}
comment|/**      * Create and return service ticket token      *       * @param authPolicy      * @param context      * @return      * @throws GSSException      * @throws LoginException      */
specifier|private
name|byte
index|[]
name|getToken
parameter_list|(
name|AuthorizationPolicy
name|authPolicy
parameter_list|,
specifier|final
name|GSSContext
name|context
parameter_list|)
throws|throws
name|GSSException
throws|,
name|LoginException
block|{
specifier|final
name|byte
index|[]
name|token
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|authPolicy
operator|.
name|getUserName
argument_list|()
operator|==
literal|null
operator|||
name|authPolicy
operator|.
name|getUserName
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|context
operator|.
name|initSecContext
argument_list|(
name|token
argument_list|,
literal|0
argument_list|,
name|token
operator|.
name|length
argument_list|)
return|;
block|}
comment|// here only if we don't have a cached token and we pass credentials
comment|// through authPolicy
name|LoginContext
name|lc
init|=
operator|new
name|LoginContext
argument_list|(
name|authPolicy
operator|.
name|getAuthorization
argument_list|()
argument_list|,
name|getUsernamePasswordHandler
argument_list|(
name|authPolicy
operator|.
name|getUserName
argument_list|()
argument_list|,
name|authPolicy
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|lc
operator|.
name|login
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|Subject
operator|.
name|doAs
argument_list|(
name|lc
operator|.
name|getSubject
argument_list|()
argument_list|,
operator|new
name|CreateServiceTicketAction
argument_list|(
name|context
argument_list|,
name|token
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|GSSException
condition|)
block|{
throw|throw
operator|(
name|GSSException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"initSecContext"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Create and return a service ticket token for a given service principal      * name      *       * @param proxyAuthPolicy      * @param spn      * @return service ticket token      * @throws GSSException      * @throws LoginException      */
specifier|private
name|byte
index|[]
name|getToken
parameter_list|(
name|AuthorizationPolicy
name|proxyAuthPolicy
parameter_list|,
name|String
name|spn
parameter_list|)
throws|throws
name|GSSException
throws|,
name|LoginException
block|{
name|GSSManager
name|manager
init|=
name|GSSManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|GSSName
name|serverName
init|=
name|manager
operator|.
name|createName
argument_list|(
name|spn
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// TODO Is it correct to use kerberos oid instead of spnego here?
name|Oid
name|oid
init|=
operator|new
name|Oid
argument_list|(
name|KERBEROS_OID
argument_list|)
decl_stmt|;
name|GSSContext
name|context
init|=
name|manager
operator|.
name|createContext
argument_list|(
name|serverName
operator|.
name|canonicalize
argument_list|(
name|oid
argument_list|)
argument_list|,
name|oid
argument_list|,
literal|null
argument_list|,
name|GSSContext
operator|.
name|DEFAULT_LIFETIME
argument_list|)
decl_stmt|;
comment|// TODO Do we need mutual auth. Will the code we have really work with
comment|// mutual auth?
name|context
operator|.
name|requestMutualAuth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// TODO Credential delegation could be a security hole if it was not
comment|// intended. Both settings should be configurable
name|context
operator|.
name|requestCredDeleg
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|getToken
argument_list|(
name|proxyAuthPolicy
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAfter
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getBefore
parameter_list|()
block|{
return|return
name|BEFORE
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|HttpSpnegoAuthInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPhase
parameter_list|()
block|{
return|return
name|Phase
operator|.
name|PREPARE_SEND
return|;
block|}
specifier|public
name|void
name|handleFault
parameter_list|(
name|Message
name|message
parameter_list|)
block|{      }
block|}
end_class

end_unit

