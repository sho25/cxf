begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SystemPropertyAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPClientPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|ProxyServerType
import|;
end_import

begin_class
specifier|public
class|class
name|ProxyFactory
block|{
comment|/**      * JVM/System property name holding the hostname of the http proxy.      */
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PROXY_HOST
init|=
literal|"http.proxyHost"
decl_stmt|;
comment|/**      * JVM/System property name holding the port of the http proxy.      */
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PROXY_PORT
init|=
literal|"http.proxyPort"
decl_stmt|;
comment|/**      * JVM/System property name holding the list of hosts/patterns that      * should not use the proxy configuration.      */
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_NON_PROXY_HOSTS
init|=
literal|"http.nonProxyHosts"
decl_stmt|;
comment|/**      * This field holds ONLY the static System proxy configuration:      * + http.proxyHost      * + http.proxyPort (default 8080)      * + http.nonProxyHosts (default null)      * It is initialized at the instance creation (and may be null      * if there is no appropriate System properties)      */
specifier|private
name|HTTPClientPolicy
name|systemProxyConfiguration
decl_stmt|;
specifier|public
name|ProxyFactory
parameter_list|()
block|{
name|this
operator|.
name|systemProxyConfiguration
operator|=
name|createSystemProxyConfiguration
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|HTTPClientPolicy
name|createSystemProxyConfiguration
parameter_list|()
block|{
comment|// Retrieve system properties (if any)
name|HTTPClientPolicy
name|systemProxyConfiguration
init|=
literal|null
decl_stmt|;
name|String
name|proxyHost
init|=
name|SystemPropertyAction
operator|.
name|getPropertyOrNull
argument_list|(
name|HTTP_PROXY_HOST
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|proxyHost
argument_list|)
condition|)
block|{
name|proxyHost
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|proxyHost
operator|!=
literal|null
condition|)
block|{
comment|// System is configured with a proxy, use it
name|systemProxyConfiguration
operator|=
operator|new
name|HTTPClientPolicy
argument_list|()
expr_stmt|;
name|systemProxyConfiguration
operator|.
name|setProxyServer
argument_list|(
name|proxyHost
argument_list|)
expr_stmt|;
name|systemProxyConfiguration
operator|.
name|setProxyServerType
argument_list|(
name|ProxyServerType
operator|.
name|HTTP
argument_list|)
expr_stmt|;
comment|// 8080 is the default proxy port value as per some documentation
name|String
name|proxyPort
init|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
name|HTTP_PROXY_PORT
argument_list|,
literal|"8080"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|proxyPort
argument_list|)
condition|)
block|{
name|proxyPort
operator|=
literal|"8080"
expr_stmt|;
block|}
name|systemProxyConfiguration
operator|.
name|setProxyServerPort
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|proxyPort
argument_list|)
argument_list|)
expr_stmt|;
comment|// Load non proxy hosts
name|String
name|nonProxyHosts
init|=
name|SystemPropertyAction
operator|.
name|getPropertyOrNull
argument_list|(
name|HTTP_NON_PROXY_HOSTS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|nonProxyHosts
argument_list|)
condition|)
block|{
name|systemProxyConfiguration
operator|.
name|setNonProxyHosts
argument_list|(
name|nonProxyHosts
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|systemProxyConfiguration
return|;
block|}
comment|/**      * This method returns the Proxy server should it be set on the       * Client Side Policy.      *       * @return The proxy server or null, if not set.      */
specifier|public
name|Proxy
name|createProxy
parameter_list|(
name|HTTPClientPolicy
name|policy
parameter_list|,
name|URI
name|currentUrl
parameter_list|)
block|{
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
comment|// Maybe the user has provided some proxy information
if|if
condition|(
name|policy
operator|.
name|isSetProxyServer
argument_list|()
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|policy
operator|.
name|getProxyServer
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getProxy
argument_list|(
name|policy
argument_list|,
name|currentUrl
operator|.
name|getHost
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// There is a policy but no Proxy configuration,
comment|// fallback on the system proxy configuration
return|return
name|getSystemProxy
argument_list|(
name|currentUrl
operator|.
name|getHost
argument_list|()
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|// Use system proxy configuration
return|return
name|getSystemProxy
argument_list|(
name|currentUrl
operator|.
name|getHost
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Get the system proxy (if any) for the given URL's host.      */
specifier|private
name|Proxy
name|getSystemProxy
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
if|if
condition|(
name|systemProxyConfiguration
operator|!=
literal|null
condition|)
block|{
return|return
name|getProxy
argument_list|(
name|systemProxyConfiguration
argument_list|,
name|hostname
argument_list|)
return|;
block|}
comment|// No proxy configured
return|return
literal|null
return|;
block|}
comment|/**      * Honor the nonProxyHosts property value (if set).      */
specifier|private
name|Proxy
name|getProxy
parameter_list|(
specifier|final
name|HTTPClientPolicy
name|policy
parameter_list|,
specifier|final
name|String
name|hostname
parameter_list|)
block|{
if|if
condition|(
name|policy
operator|.
name|isSetNonProxyHosts
argument_list|()
condition|)
block|{
comment|// Try to match the URL hostname with the exclusion pattern
name|Pattern
name|pattern
init|=
name|PatternBuilder
operator|.
name|build
argument_list|(
name|policy
operator|.
name|getNonProxyHosts
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|matcher
argument_list|(
name|hostname
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// Excluded hostname -> no proxy
return|return
name|Proxy
operator|.
name|NO_PROXY
return|;
block|}
block|}
comment|// Either nonProxyHosts is not set or the pattern did not match
return|return
name|createProxy
argument_list|(
name|policy
argument_list|)
return|;
block|}
comment|/**      * Construct a new {@code Proxy} instance from the given policy.      */
specifier|private
name|Proxy
name|createProxy
parameter_list|(
specifier|final
name|HTTPClientPolicy
name|policy
parameter_list|)
block|{
return|return
operator|new
name|Proxy
argument_list|(
name|Proxy
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|policy
operator|.
name|getProxyServerType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
name|policy
operator|.
name|getProxyServer
argument_list|()
argument_list|,
name|policy
operator|.
name|getProxyServerPort
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

