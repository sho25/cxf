begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PushbackInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|HttpHeaderHelper
import|;
end_import

begin_class
specifier|final
class|class
name|ChunkedUtil
block|{
specifier|private
name|ChunkedUtil
parameter_list|()
block|{     }
comment|/**      * Get an input stream containing the partial response if one is present.      *       * @param connection the connection in question      * @param responseCode the response code      * @return an input stream if a partial response is pending on the connection       */
specifier|public
specifier|static
name|InputStream
name|getPartialResponse
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|,
name|int
name|responseCode
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|responseCode
operator|==
name|HttpURLConnection
operator|.
name|HTTP_ACCEPTED
operator|||
name|responseCode
operator|==
name|HttpURLConnection
operator|.
name|HTTP_OK
condition|)
block|{
if|if
condition|(
name|connection
operator|.
name|getContentLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|in
operator|=
name|connection
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasChunkedResponse
argument_list|(
name|connection
argument_list|)
operator|||
name|hasEofTerminatedResponse
argument_list|(
name|connection
argument_list|)
condition|)
block|{
comment|// ensure chunked or EOF-terminated response is non-empty
name|in
operator|=
name|getNonEmptyContent
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|in
return|;
block|}
comment|/**      * @param connection the given HttpURLConnection      * @return true iff the connection has a chunked response pending      */
specifier|private
specifier|static
name|boolean
name|hasChunkedResponse
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
block|{
return|return
name|HttpHeaderHelper
operator|.
name|CHUNKED
operator|.
name|equalsIgnoreCase
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|HttpHeaderHelper
operator|.
name|TRANSFER_ENCODING
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * @param connection the given HttpURLConnection      * @return true iff the connection has a chunked response pending      */
specifier|private
specifier|static
name|boolean
name|hasEofTerminatedResponse
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
block|{
return|return
name|HttpHeaderHelper
operator|.
name|CLOSE
operator|.
name|equalsIgnoreCase
argument_list|(
name|connection
operator|.
name|getHeaderField
argument_list|(
name|HttpHeaderHelper
operator|.
name|CONNECTION
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * @param connection the given HttpURLConnection      * @return an input stream containing the response content if non-empty      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
specifier|private
specifier|static
name|InputStream
name|getNonEmptyContent
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|PushbackInputStream
name|pin
init|=
operator|new
name|PushbackInputStream
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|pin
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
operator|-
literal|1
condition|)
block|{
name|pin
operator|.
name|unread
argument_list|(
operator|(
name|byte
operator|)
name|c
argument_list|)
expr_stmt|;
name|in
operator|=
name|pin
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// ignore
block|}
return|return
name|in
return|;
block|}
block|}
end_class

end_unit

