begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|HttpsURLConnectionInfo
import|;
end_import

begin_class
specifier|final
class|class
name|TrustDecisionUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|TrustDecisionUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TrustDecisionUtil
parameter_list|()
block|{     }
comment|/**      * This call must take place before anything is written to the       * URLConnection. The URLConnection.connect() will be called in order       * to get the connection information.       *       * This method is invoked just after setURLRequestHeaders() from the       * WrappedOutputStream before it writes data to the URLConnection.      *       * If trust cannot be established the Trust Decider implemenation      * throws an IOException.      *       * @param message      The message being sent.      * @throws IOException This exception is thrown if trust cannot be      *                     established by the configured MessageTrustDecider.      * @see MessageTrustDecider      */
specifier|static
name|void
name|makeTrustDecision
parameter_list|(
name|MessageTrustDecider
name|trustDecider
parameter_list|,
name|Message
name|message
parameter_list|,
name|HttpURLConnection
name|connection
parameter_list|,
name|String
name|conduitName
parameter_list|)
throws|throws
name|IOException
block|{
name|MessageTrustDecider
name|decider2
init|=
name|message
operator|.
name|get
argument_list|(
name|MessageTrustDecider
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|trustDecider
operator|!=
literal|null
operator|||
name|decider2
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// We must connect or we will not get the credentials.
comment|// The call is (said to be) ingored internally if
comment|// already connected.
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|HttpsURLConnectionInfo
name|info
init|=
operator|new
name|HttpsURLConnectionInfo
argument_list|(
name|connection
argument_list|)
decl_stmt|;
if|if
condition|(
name|trustDecider
operator|!=
literal|null
condition|)
block|{
name|trustDecider
operator|.
name|establishTrust
argument_list|(
name|conduitName
argument_list|,
name|info
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Trust Decider "
operator|+
name|trustDecider
operator|.
name|getLogicalName
argument_list|()
operator|+
literal|" considers Conduit "
operator|+
name|conduitName
operator|+
literal|" trusted."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|decider2
operator|!=
literal|null
condition|)
block|{
name|decider2
operator|.
name|establishTrust
argument_list|(
name|conduitName
argument_list|,
name|info
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Trust Decider "
operator|+
name|decider2
operator|.
name|getLogicalName
argument_list|()
operator|+
literal|" considers Conduit "
operator|+
name|conduitName
operator|+
literal|" trusted."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UntrustedURLConnectionIOException
name|untrustedEx
parameter_list|)
block|{
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Trust Decider "
operator|+
name|trustDecider
operator|.
name|getLogicalName
argument_list|()
operator|+
literal|" considers Conduit "
operator|+
name|conduitName
operator|+
literal|" untrusted."
argument_list|,
name|untrustedEx
argument_list|)
expr_stmt|;
block|}
throw|throw
name|untrustedEx
throw|;
block|}
block|}
else|else
block|{
comment|// This case, when there is no trust decider, a trust
comment|// decision should be a matter of policy.
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"No Trust Decider for Conduit '"
operator|+
name|conduitName
operator|+
literal|"'. An afirmative Trust Decision is assumed."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

