begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509KeyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSClientParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSParameterBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSServerParameters
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|SSLUtils
block|{
specifier|private
name|SSLUtils
parameter_list|()
block|{
comment|//Helper class
block|}
specifier|public
specifier|static
name|SSLContext
name|getSSLContext
parameter_list|(
name|TLSParameterBase
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO do we need to cache the context
name|String
name|provider
init|=
name|parameters
operator|.
name|getJsseProvider
argument_list|()
decl_stmt|;
name|String
name|protocol
init|=
name|parameters
operator|.
name|getSecureSocketProtocol
argument_list|()
operator|!=
literal|null
condition|?
name|parameters
operator|.
name|getSecureSocketProtocol
argument_list|()
else|:
literal|"TLS"
decl_stmt|;
name|SSLContext
name|ctx
init|=
name|provider
operator|==
literal|null
condition|?
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|protocol
argument_list|)
else|:
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|protocol
argument_list|,
name|provider
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameters
operator|instanceof
name|TLSClientParameters
condition|)
block|{
name|ctx
operator|.
name|getClientSessionContext
argument_list|()
operator|.
name|setSessionTimeout
argument_list|(
operator|(
operator|(
name|TLSClientParameters
operator|)
name|parameters
operator|)
operator|.
name|getSslCacheTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO setting on the server side
name|KeyManager
index|[]
name|keyManagers
init|=
name|parameters
operator|.
name|getKeyManagers
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameters
operator|.
name|getCertAlias
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getKeyManagersWithCertAlias
argument_list|(
name|parameters
argument_list|,
name|keyManagers
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|init
argument_list|(
name|keyManagers
argument_list|,
name|parameters
operator|.
name|getTrustManagers
argument_list|()
argument_list|,
name|parameters
operator|.
name|getSecureRandom
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
specifier|protected
specifier|static
name|void
name|getKeyManagersWithCertAlias
parameter_list|(
name|TLSParameterBase
name|tlsParameters
parameter_list|,
name|KeyManager
index|[]
name|keyManagers
parameter_list|)
throws|throws
name|GeneralSecurityException
block|{
if|if
condition|(
name|tlsParameters
operator|.
name|getCertAlias
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|keyManagers
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|keyManagers
index|[
name|idx
index|]
operator|instanceof
name|X509KeyManager
condition|)
block|{
try|try
block|{
name|keyManagers
index|[
name|idx
index|]
operator|=
operator|new
name|AliasedX509ExtendedKeyManager
argument_list|(
name|tlsParameters
operator|.
name|getCertAlias
argument_list|()
argument_list|,
operator|(
name|X509KeyManager
operator|)
name|keyManagers
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GeneralSecurityException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|SSLEngine
name|createServerSSLEngine
parameter_list|(
name|TLSServerParameters
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|SSLContext
name|sslContext
init|=
name|getSSLContext
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|SSLEngine
name|serverEngine
init|=
name|sslContext
operator|.
name|createSSLEngine
argument_list|()
decl_stmt|;
name|serverEngine
operator|.
name|setUseClientMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|serverEngine
operator|.
name|setNeedClientAuth
argument_list|(
name|parameters
operator|.
name|getClientAuthentication
argument_list|()
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|serverEngine
return|;
block|}
specifier|public
specifier|static
name|SSLEngine
name|createClientSSLEngine
parameter_list|(
name|TLSClientParameters
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|SSLContext
name|sslContext
init|=
name|getSSLContext
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|SSLEngine
name|clientEngine
init|=
name|sslContext
operator|.
name|createSSLEngine
argument_list|()
decl_stmt|;
name|clientEngine
operator|.
name|setUseClientMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|clientEngine
return|;
block|}
block|}
end_class

end_unit

