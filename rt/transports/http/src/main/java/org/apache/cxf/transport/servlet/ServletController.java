begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|AbstractHTTPDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|DestinationRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|QueryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|QueryHandlerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLLibrary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|http
operator|.
name|AddressType
import|;
end_import

begin_class
specifier|public
class|class
name|ServletController
extends|extends
name|AbstractServletController
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ServletController
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|String
name|lastBase
init|=
literal|""
decl_stmt|;
specifier|public
name|ServletController
parameter_list|(
name|DestinationRegistry
name|destinationRegistry
parameter_list|,
name|ServletConfig
name|config
parameter_list|,
name|HttpServlet
name|serviceListGeneratorServlet
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|,
name|destinationRegistry
argument_list|,
name|serviceListGeneratorServlet
argument_list|)
expr_stmt|;
block|}
name|String
name|getLastBaseURL
parameter_list|()
block|{
return|return
name|lastBase
return|;
block|}
specifier|protected
specifier|synchronized
name|void
name|updateDests
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|String
name|base
init|=
name|forcedBaseAddress
operator|==
literal|null
condition|?
name|getBaseURL
argument_list|(
name|request
argument_list|)
else|:
name|forcedBaseAddress
decl_stmt|;
if|if
condition|(
name|base
operator|.
name|equals
argument_list|(
name|lastBase
argument_list|)
condition|)
block|{
return|return;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|destinationRegistry
operator|.
name|getDestinationsPaths
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|AbstractHTTPDestination
name|d2
init|=
name|destinationRegistry
operator|.
name|getDestinationForPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|ad
init|=
name|d2
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|ad
operator|==
literal|null
operator|&&
name|d2
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
operator|&&
name|d2
operator|.
name|getAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ad
operator|=
name|d2
operator|.
name|getAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|ad
operator|==
literal|null
condition|)
block|{
name|ad
operator|=
literal|"/"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ad
operator|!=
literal|null
operator|&&
operator|(
name|ad
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|||
name|ad
operator|.
name|equals
argument_list|(
name|lastBase
operator|+
name|path
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|disableAddressUpdates
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
literal|"org.apache.cxf.transport.endpoint.address"
argument_list|,
name|base
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d2
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|setAddress
argument_list|(
name|base
operator|+
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|WSDLLibrary
operator|.
name|isAvailable
argument_list|()
operator|&&
name|d2
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getExtensor
argument_list|(
name|AddressType
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|d2
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getExtensor
argument_list|(
name|AddressType
operator|.
name|class
argument_list|)
operator|.
name|setLocation
argument_list|(
name|base
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|disableAddressUpdates
condition|)
block|{
return|return;
block|}
name|lastBase
operator|=
name|base
expr_stmt|;
block|}
specifier|public
name|void
name|invoke
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|ServletException
block|{
try|try
block|{
name|EndpointInfo
name|ei
init|=
operator|new
name|EndpointInfo
argument_list|()
decl_stmt|;
name|String
name|address
init|=
name|request
operator|.
name|getPathInfo
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|request
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
name|ei
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|AbstractHTTPDestination
name|d
init|=
name|destinationRegistry
operator|.
name|getDestinationForPath
argument_list|(
name|ei
operator|.
name|getAddress
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|isHideServiceList
operator|&&
operator|(
name|request
operator|.
name|getRequestURI
argument_list|()
operator|.
name|endsWith
argument_list|(
name|serviceListRelativePath
argument_list|)
operator|||
name|request
operator|.
name|getRequestURI
argument_list|()
operator|.
name|endsWith
argument_list|(
name|serviceListRelativePath
operator|+
literal|"/"
argument_list|)
operator|||
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|)
operator|||
literal|"/"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|updateDests
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|serviceListGenerator
operator|.
name|service
argument_list|(
name|request
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
name|destinationRegistry
operator|.
name|checkRestfulRequest
argument_list|(
name|address
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Can't find the request for "
operator|+
name|request
operator|.
name|getRequestURL
argument_list|()
operator|+
literal|"'s Observer "
argument_list|)
expr_stmt|;
name|generateNotFound
argument_list|(
name|request
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the request should be a restful service request
name|updateDests
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|invokeDestination
argument_list|(
name|request
argument_list|,
name|res
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|ei
operator|=
name|d
operator|.
name|getEndpointInfo
argument_list|()
expr_stmt|;
name|Bus
name|bus
init|=
name|d
operator|.
name|getBus
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"GET"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|&&
literal|null
operator|!=
name|request
operator|.
name|getQueryString
argument_list|()
operator|&&
name|request
operator|.
name|getQueryString
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|bus
operator|.
name|getExtension
argument_list|(
name|QueryHandlerRegistry
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|ctxUri
init|=
name|request
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
name|String
name|baseUri
init|=
name|request
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"?"
operator|+
name|request
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
comment|// update the EndPoint Address with request url
name|updateDests
argument_list|(
name|request
argument_list|)
expr_stmt|;
for|for
control|(
name|QueryHandler
name|qh
range|:
name|bus
operator|.
name|getExtension
argument_list|(
name|QueryHandlerRegistry
operator|.
name|class
argument_list|)
operator|.
name|getHandlers
argument_list|()
control|)
block|{
if|if
condition|(
name|qh
operator|.
name|isRecognizedQuery
argument_list|(
name|baseUri
argument_list|,
name|ctxUri
argument_list|,
name|ei
argument_list|)
condition|)
block|{
name|res
operator|.
name|setContentType
argument_list|(
name|qh
operator|.
name|getResponseContentType
argument_list|(
name|baseUri
argument_list|,
name|ctxUri
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|res
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|qh
operator|.
name|writeResponse
argument_list|(
name|baseUri
argument_list|,
name|ctxUri
argument_list|,
name|ei
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|WARNING
argument_list|,
name|qh
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" Exception caught writing response."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
else|else
block|{
name|updateDests
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
name|invokeDestination
argument_list|(
name|request
argument_list|,
name|res
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Fault
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

