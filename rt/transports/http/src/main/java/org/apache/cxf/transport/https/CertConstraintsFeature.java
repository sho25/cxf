begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|injection
operator|.
name|NoJSR250Annotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|CertificateConstraintsType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|AbstractPortableFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|DelegatingFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorProvider
import|;
end_import

begin_comment
comment|/**  *<pre>  *<![CDATA[<jaxws:endpoint ...><jaxws:features><bean class="org.apache.cxf.transport.https.CertConstraintsFeature"><property name="CertificateConstraints"><bean class="org.apache.cxf.configuration.security.CertificateConstraintsType"><property name="SubjectDNConstraints"><bean class="org.apache.cxf.configuration.security.DNConstraintsType"><property name="RegularExpression"><list><value>.*CN=(Bethal|Gordy).*</value><value>.*O=ApacheTest.*</value></list></property></bean></property>                    .........</bean></property></bean></jaxws:features></jaxws:endpoint>   ]]></pre>  */
end_comment

begin_class
annotation|@
name|NoJSR250Annotations
specifier|public
class|class
name|CertConstraintsFeature
extends|extends
name|DelegatingFeature
argument_list|<
name|CertConstraintsFeature
operator|.
name|Portable
argument_list|>
block|{
specifier|public
name|CertConstraintsFeature
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|Portable
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCertificateConstraints
parameter_list|(
name|CertificateConstraintsType
name|c
parameter_list|)
block|{
name|delegate
operator|.
name|setCertificateConstraints
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CertificateConstraintsType
name|getCertificateConstraints
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getCertificateConstraints
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|Portable
implements|implements
name|AbstractPortableFeature
block|{
name|CertificateConstraintsType
name|contraints
decl_stmt|;
specifier|public
name|Portable
parameter_list|()
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Server
name|server
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
if|if
condition|(
name|contraints
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doInitializeProvider
argument_list|(
name|server
operator|.
name|getEndpoint
argument_list|()
argument_list|,
name|bus
argument_list|)
expr_stmt|;
name|CertConstraints
name|c
init|=
name|CertConstraintsJaxBUtils
operator|.
name|createCertConstraints
argument_list|(
name|contraints
argument_list|)
decl_stmt|;
name|server
operator|.
name|getEndpoint
argument_list|()
operator|.
name|put
argument_list|(
name|CertConstraints
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Client
name|client
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
if|if
condition|(
name|contraints
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doInitializeProvider
argument_list|(
name|client
argument_list|,
name|bus
argument_list|)
expr_stmt|;
name|CertConstraints
name|c
init|=
name|CertConstraintsJaxBUtils
operator|.
name|createCertConstraints
argument_list|(
name|contraints
argument_list|)
decl_stmt|;
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|put
argument_list|(
name|CertConstraints
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
if|if
condition|(
name|contraints
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|doInitializeProvider
argument_list|(
name|bus
argument_list|,
name|bus
argument_list|)
expr_stmt|;
name|CertConstraints
name|c
init|=
name|CertConstraintsJaxBUtils
operator|.
name|createCertConstraints
argument_list|(
name|contraints
argument_list|)
decl_stmt|;
name|bus
operator|.
name|setProperty
argument_list|(
name|CertConstraints
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doInitializeProvider
parameter_list|(
name|InterceptorProvider
name|provider
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
if|if
condition|(
name|contraints
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|provider
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|CertConstraintsInterceptor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|provider
operator|.
name|getInFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|CertConstraintsInterceptor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCertificateConstraints
parameter_list|(
name|CertificateConstraintsType
name|c
parameter_list|)
block|{
name|contraints
operator|=
name|c
expr_stmt|;
block|}
specifier|public
name|CertificateConstraintsType
name|getCertificateConstraints
parameter_list|()
block|{
return|return
name|contraints
return|;
block|}
block|}
block|}
end_class

end_unit

