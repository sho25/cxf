begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|commons_text
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Executes a sequence of translators one after the other. Execution ends whenever  * the first translator consumes codepoints from the input.  *  * @since 1.0  */
end_comment

begin_class
class|class
name|AggregateTranslator
extends|extends
name|CharSequenceTranslator
block|{
comment|/**      * Translator list.      */
specifier|private
specifier|final
name|List
argument_list|<
name|CharSequenceTranslator
argument_list|>
name|translators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Specify the translators to be used at creation time.      *      * @param translators CharSequenceTranslator array to aggregate      */
name|AggregateTranslator
parameter_list|(
specifier|final
name|CharSequenceTranslator
modifier|...
name|translators
parameter_list|)
block|{
if|if
condition|(
name|translators
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|CharSequenceTranslator
name|translator
range|:
name|translators
control|)
block|{
if|if
condition|(
name|translator
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|translators
operator|.
name|add
argument_list|(
name|translator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * The first translator to consume codepoints from the input is the 'winner'.      * Execution stops with the number of consumed codepoints being returned.      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|int
name|translate
parameter_list|(
specifier|final
name|CharSequence
name|input
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|Writer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
specifier|final
name|CharSequenceTranslator
name|translator
range|:
name|translators
control|)
block|{
specifier|final
name|int
name|consumed
init|=
name|translator
operator|.
name|translate
argument_list|(
name|input
argument_list|,
name|index
argument_list|,
name|out
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumed
operator|!=
literal|0
condition|)
block|{
return|return
name|consumed
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

