begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|RequestDispatcher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractHTTPServlet
extends|extends
name|HttpServlet
block|{
comment|/**      * List of well-known HTTP 1.1 verbs, with POST and GET being the most used verbs at the top       */
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|KNOWN_HTTP_VERBS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"POST"
block|,
literal|"GET"
block|,
literal|"PUT"
block|,
literal|"DELETE"
block|,
literal|"HEAD"
block|,
literal|"OPTIONS"
block|,
literal|"TRACE"
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STATIC_RESOURCES_PARAMETER
init|=
literal|"static-resources-list"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REDIRECTS_PARAMETER
init|=
literal|"redirects-list"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REDIRECT_SERVLET_NAME_PARAMETER
init|=
literal|"redirect-servlet-name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REDIRECT_SERVLET_PATH_PARAMETER
init|=
literal|"redirect-servlet-path"
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|staticResourcesList
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|redirectList
decl_stmt|;
specifier|private
name|String
name|dispatcherServletPath
decl_stmt|;
specifier|private
name|String
name|dispatcherServletName
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|ServletConfig
name|servletConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|servletConfig
argument_list|)
expr_stmt|;
name|staticResourcesList
operator|=
name|parseListSequence
argument_list|(
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|STATIC_RESOURCES_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
name|redirectList
operator|=
name|parseListSequence
argument_list|(
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|REDIRECTS_PARAMETER
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcherServletName
operator|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|REDIRECT_SERVLET_NAME_PARAMETER
argument_list|)
expr_stmt|;
name|dispatcherServletPath
operator|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
name|REDIRECT_SERVLET_PATH_PARAMETER
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|parseListSequence
parameter_list|(
name|String
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|pathValues
init|=
name|values
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|pathValues
control|)
block|{
name|String
name|theValue
init|=
name|value
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|theValue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|theValue
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
block|{
name|handleRequest
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
block|{
name|handleRequest
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doDelete
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|handleRequest
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doPut
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|handleRequest
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doHead
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|handleRequest
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doOptions
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|handleRequest
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      *       * javax.http.servlet.HttpServlet does not let to override the code which deals with      * unrecognized HTTP verbs such as PATCH (being standardized), WebDav ones, etc.      * Thus we let CXF servlets process unrecognized HTTP verbs directly, otherwise we delegate      * to HttpService        */
annotation|@
name|Override
specifier|public
name|void
name|service
parameter_list|(
name|ServletRequest
name|req
parameter_list|,
name|ServletResponse
name|res
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|HttpServletRequest
name|request
decl_stmt|;
name|HttpServletResponse
name|response
decl_stmt|;
try|try
block|{
name|request
operator|=
operator|(
name|HttpServletRequest
operator|)
name|req
expr_stmt|;
name|response
operator|=
operator|(
name|HttpServletResponse
operator|)
name|res
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Unrecognized HTTP request or response object"
argument_list|)
throw|;
block|}
name|String
name|method
init|=
name|request
operator|.
name|getMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|KNOWN_HTTP_VERBS
operator|.
name|contains
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|super
operator|.
name|service
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleRequest
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|handleRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
block|{
if|if
condition|(
name|staticResourcesList
operator|!=
literal|null
operator|&&
name|matchPath
argument_list|(
name|staticResourcesList
argument_list|,
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|)
condition|)
block|{
name|serveStaticContent
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|redirectList
operator|!=
literal|null
operator|&&
name|matchPath
argument_list|(
name|redirectList
argument_list|,
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|)
condition|)
block|{
name|redirect
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|invoke
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|matchPath
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
name|String
name|pathInfo
parameter_list|)
block|{
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|pathInfo
operator|.
name|matches
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|serveStaticContent
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|pathInfo
parameter_list|)
throws|throws
name|ServletException
block|{
name|InputStream
name|is
init|=
name|super
operator|.
name|getServletContext
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|pathInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Static resource "
operator|+
name|pathInfo
operator|+
literal|" is not available"
argument_list|)
throw|;
block|}
try|try
block|{
name|ServletOutputStream
name|os
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Static resource "
operator|+
name|pathInfo
operator|+
literal|" can not be written to the output stream"
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|redirect
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|pathInfo
parameter_list|)
throws|throws
name|ServletException
block|{
name|String
name|theServletPath
init|=
name|dispatcherServletPath
operator|==
literal|null
condition|?
literal|"/"
else|:
name|dispatcherServletPath
decl_stmt|;
name|ServletContext
name|sc
init|=
name|super
operator|.
name|getServletContext
argument_list|()
decl_stmt|;
name|RequestDispatcher
name|rd
init|=
name|dispatcherServletName
operator|!=
literal|null
condition|?
name|sc
operator|.
name|getNamedDispatcher
argument_list|(
name|dispatcherServletName
argument_list|)
else|:
name|sc
operator|.
name|getRequestDispatcher
argument_list|(
name|theServletPath
operator|+
name|pathInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|rd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"No RequestDispatcher can be created for path "
operator|+
name|pathInfo
argument_list|)
throw|;
block|}
try|try
block|{
name|HttpServletRequestFilter
name|servletRequest
init|=
operator|new
name|HttpServletRequestFilter
argument_list|(
name|request
argument_list|,
name|pathInfo
argument_list|,
name|theServletPath
argument_list|)
decl_stmt|;
name|rd
operator|.
name|forward
argument_list|(
name|servletRequest
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"RequestDispatcher for path "
operator|+
name|pathInfo
operator|+
literal|" has failed"
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|abstract
name|void
name|invoke
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
function_decl|;
specifier|private
specifier|static
class|class
name|HttpServletRequestFilter
extends|extends
name|HttpServletRequestWrapper
block|{
specifier|private
name|String
name|pathInfo
decl_stmt|;
specifier|private
name|String
name|servletPath
decl_stmt|;
specifier|public
name|HttpServletRequestFilter
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|pathInfo
parameter_list|,
name|String
name|servletPath
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|this
operator|.
name|pathInfo
operator|=
name|pathInfo
expr_stmt|;
name|this
operator|.
name|servletPath
operator|=
name|servletPath
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getServletPath
parameter_list|()
block|{
return|return
name|servletPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPathInfo
parameter_list|()
block|{
return|return
name|pathInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRequestURI
parameter_list|()
block|{
name|String
name|query
init|=
name|super
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
return|return
name|query
operator|!=
literal|null
condition|?
name|pathInfo
operator|+
literal|"?"
operator|+
name|query
else|:
name|pathInfo
return|;
block|}
block|}
block|}
end_class

end_unit

