begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPClientPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPServerPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|jaxb
operator|.
name|JaxbAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PolicyUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HTTPCONF_NAMESPACE
init|=
literal|"http://cxf.apache.org/transports/http/configuration"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|HTTPCLIENTPOLICY_ASSERTION_QNAME
init|=
operator|new
name|QName
argument_list|(
name|HTTPCONF_NAMESPACE
argument_list|,
literal|"client"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|HTTPSERVERPOLICY_ASSERTION_QNAME
init|=
operator|new
name|QName
argument_list|(
name|HTTPCONF_NAMESPACE
argument_list|,
literal|"server"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|PolicyUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Prevents instantiation.      *      */
specifier|private
name|PolicyUtils
parameter_list|()
block|{             }
comment|/**      * Returns a HTTPClientPolicy that is compatible with the assertions included in the      * service, endpoint, operation and message policy subjects AND the HTTPClientPolicy       * passed as a second argument.      * @param message the message      * @param confPolicy the additional policy to be compatible with      * @return the HTTPClientPolicy for the message      * @throws PolicyException if no compatible HTTPClientPolicy can be determined      */
specifier|public
specifier|static
name|HTTPClientPolicy
name|getClient
parameter_list|(
name|Message
name|message
parameter_list|,
name|HTTPClientPolicy
name|confPolicy
parameter_list|)
block|{
name|HTTPClientPolicy
name|pol
init|=
name|message
operator|.
name|get
argument_list|(
name|HTTPClientPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pol
operator|!=
literal|null
condition|)
block|{
return|return
name|intersect
argument_list|(
name|pol
argument_list|,
name|confPolicy
argument_list|)
return|;
block|}
name|AssertionInfoMap
name|amap
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|amap
operator|||
name|amap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|confPolicy
return|;
block|}
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|amap
operator|.
name|get
argument_list|(
name|HTTPCLIENTPOLICY_ASSERTION_QNAME
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ais
condition|)
block|{
return|return
name|confPolicy
return|;
block|}
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|alternative
init|=
operator|new
name|ArrayList
argument_list|<
name|Assertion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|alternative
operator|.
name|add
argument_list|(
name|ai
operator|.
name|getAssertion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HTTPClientPolicy
name|compatible
init|=
name|getClient
argument_list|(
name|alternative
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|compatible
operator|&&
literal|null
operator|!=
name|confPolicy
condition|)
block|{
if|if
condition|(
name|PolicyUtils
operator|.
name|compatible
argument_list|(
name|compatible
argument_list|,
name|confPolicy
argument_list|)
condition|)
block|{
name|compatible
operator|=
name|intersect
argument_list|(
name|compatible
argument_list|,
name|confPolicy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"INCOMPATIBLE_HTTPCLIENTPOLICY_ASSERTIONS"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PolicyException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"INCOMPATIBLE_HTTPCLIENTPOLICY_ASSERTIONS"
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|compatible
return|;
block|}
comment|/**      * Returns a HTTPServerPolicy that is compatible with the assertions included in the      * service, endpoint, operation and message policy subjects AND the HTTPServerPolicy       * passed as a second argument.      * @param message the message      * @param confPolicy the additional policy to be compatible with      * @return the HTTPServerPolicy for the message      * @throws PolicyException if no compatible HTTPServerPolicy can be determined      */
specifier|public
specifier|static
name|HTTPServerPolicy
name|getServer
parameter_list|(
name|Message
name|message
parameter_list|,
name|HTTPServerPolicy
name|confPolicy
parameter_list|)
block|{
name|AssertionInfoMap
name|amap
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|amap
condition|)
block|{
return|return
name|confPolicy
return|;
block|}
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|amap
operator|.
name|get
argument_list|(
name|HTTPSERVERPOLICY_ASSERTION_QNAME
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ais
condition|)
block|{
return|return
name|confPolicy
return|;
block|}
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|alternative
init|=
operator|new
name|ArrayList
argument_list|<
name|Assertion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|alternative
operator|.
name|add
argument_list|(
name|ai
operator|.
name|getAssertion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HTTPServerPolicy
name|compatible
init|=
name|getServer
argument_list|(
name|alternative
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|compatible
operator|&&
literal|null
operator|!=
name|confPolicy
condition|)
block|{
if|if
condition|(
name|PolicyUtils
operator|.
name|compatible
argument_list|(
name|compatible
argument_list|,
name|confPolicy
argument_list|)
condition|)
block|{
name|compatible
operator|=
name|intersect
argument_list|(
name|compatible
argument_list|,
name|confPolicy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"INCOMPATIBLE_HTTPSERVERPOLICY_ASSERTIONS"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PolicyException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"INCOMPATIBLE_HTTPSERVERPOLICY_ASSERTIONS"
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|compatible
return|;
block|}
comment|/**      * Returns a HTTPClientPolicy that is compatible with the assertions included in the      * service and endpoint policy subjects, or null if there are no such assertions.      * @param pe the policy engine      * @param ei the endpoint info      * @param c the conduit      * @return the compatible policy      * @throws PolicyException if no compatible HTTPClientPolicy can be determined      */
specifier|public
specifier|static
name|HTTPClientPolicy
name|getClient
parameter_list|(
name|PolicyEngine
name|pe
parameter_list|,
name|EndpointInfo
name|ei
parameter_list|,
name|Conduit
name|c
parameter_list|)
block|{
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|alternative
init|=
name|pe
operator|.
name|getClientEndpointPolicy
argument_list|(
name|ei
argument_list|,
name|c
argument_list|)
operator|.
name|getChosenAlternative
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|compatible
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Assertion
name|a
range|:
name|alternative
control|)
block|{
if|if
condition|(
name|HTTPCLIENTPOLICY_ASSERTION_QNAME
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|HTTPClientPolicy
name|p
init|=
name|JaxbAssertion
operator|.
name|cast
argument_list|(
name|a
argument_list|,
name|HTTPClientPolicy
operator|.
name|class
argument_list|)
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|compatible
condition|)
block|{
name|compatible
operator|=
name|p
expr_stmt|;
block|}
else|else
block|{
name|compatible
operator|=
name|intersect
argument_list|(
name|compatible
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|compatible
condition|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"INCOMPATIBLE_HTTPCLIENTPOLICY_ASSERTIONS"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PolicyException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"INCOMPATIBLE_HTTPCLIENTPOLICY_ASSERTIONS"
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|compatible
return|;
block|}
comment|/**      * Returns a HTTPServerPolicy that is compatible with the assertions included in the      * service and endpoint policy subjects, or null if there are no such assertions.      * @param pe the policy engine      * @param ei the endpoint info      * @param d the destination      * @return the compatible policy      * @throws PolicyException if no compatible HTTPServerPolicy can be determined      */
specifier|public
specifier|static
name|HTTPServerPolicy
name|getServer
parameter_list|(
name|PolicyEngine
name|pe
parameter_list|,
name|EndpointInfo
name|ei
parameter_list|,
name|Destination
name|d
parameter_list|)
block|{
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|alternative
init|=
name|pe
operator|.
name|getServerEndpointPolicy
argument_list|(
name|ei
argument_list|,
name|d
argument_list|)
operator|.
name|getChosenAlternative
argument_list|()
decl_stmt|;
name|HTTPServerPolicy
name|compatible
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Assertion
name|a
range|:
name|alternative
control|)
block|{
if|if
condition|(
name|HTTPSERVERPOLICY_ASSERTION_QNAME
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|HTTPServerPolicy
name|p
init|=
name|JaxbAssertion
operator|.
name|cast
argument_list|(
name|a
argument_list|,
name|HTTPServerPolicy
operator|.
name|class
argument_list|)
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|compatible
condition|)
block|{
name|compatible
operator|=
name|p
expr_stmt|;
block|}
else|else
block|{
name|compatible
operator|=
name|intersect
argument_list|(
name|compatible
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|compatible
condition|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"INCOMPATIBLE_HTTPSERVERPOLICY_ASSERTIONS"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PolicyException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"INCOMPATIBLE_HTTPSERVERPOLICY_ASSERTIONS"
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|compatible
return|;
block|}
comment|/**      * Asserts all HTTPClientPolicy assertions that are compatible with the specified      * client policy.      * @param message the current message      * @param client the client policy      */
specifier|public
specifier|static
name|void
name|assertClientPolicy
parameter_list|(
name|Message
name|message
parameter_list|,
name|HTTPClientPolicy
name|client
parameter_list|)
block|{
name|HTTPClientPolicy
name|pol
init|=
name|message
operator|.
name|get
argument_list|(
name|HTTPClientPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pol
operator|!=
literal|null
condition|)
block|{
name|client
operator|=
name|intersect
argument_list|(
name|pol
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aim
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|HTTPCLIENTPOLICY_ASSERTION_QNAME
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ais
operator|||
name|ais
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// assert all assertion(s) that are compatible with the value configured for the conduit
if|if
condition|(
name|MessageUtils
operator|.
name|isOutbound
argument_list|(
name|message
argument_list|)
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|HTTPClientPolicy
name|p
init|=
operator|(
name|JaxbAssertion
operator|.
name|cast
argument_list|(
name|ai
operator|.
name|getAssertion
argument_list|()
argument_list|,
name|HTTPClientPolicy
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|compatible
argument_list|(
name|p
argument_list|,
name|client
argument_list|)
condition|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Asserts all HTTPServerPolicy assertions that are equal to the specified      * server policy.      * @param message the current message      * @param server the server policy      */
specifier|public
specifier|static
name|void
name|assertServerPolicy
parameter_list|(
name|Message
name|message
parameter_list|,
name|HTTPServerPolicy
name|server
parameter_list|)
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aim
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|HTTPSERVERPOLICY_ASSERTION_QNAME
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ais
operator|||
name|ais
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// assert all assertion(s) that are equal to the value configured for the conduit
if|if
condition|(
name|MessageUtils
operator|.
name|isOutbound
argument_list|(
name|message
argument_list|)
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|HTTPServerPolicy
name|p
init|=
operator|(
name|JaxbAssertion
operator|.
name|cast
argument_list|(
name|ai
operator|.
name|getAssertion
argument_list|()
argument_list|,
name|HTTPServerPolicy
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|equals
argument_list|(
name|p
argument_list|,
name|server
argument_list|)
condition|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Checks if two HTTPClientPolicy objects are compatible.      * @param p1 one client policy      * @param p2 another client policy      * @return true iff policies are compatible      */
specifier|public
specifier|static
name|boolean
name|compatible
parameter_list|(
name|HTTPClientPolicy
name|p1
parameter_list|,
name|HTTPClientPolicy
name|p2
parameter_list|)
block|{
if|if
condition|(
name|p1
operator|==
name|p2
operator|||
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|compatible
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|compatible
argument_list|(
name|p1
operator|.
name|getAccept
argument_list|()
argument_list|,
name|p2
operator|.
name|getAccept
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|compatible
argument_list|(
name|p1
operator|.
name|getAcceptEncoding
argument_list|()
argument_list|,
name|p2
operator|.
name|getAcceptEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|compatible
argument_list|(
name|p1
operator|.
name|getAcceptLanguage
argument_list|()
argument_list|,
name|p2
operator|.
name|getAcceptLanguage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|compatible
argument_list|(
name|p1
operator|.
name|getBrowserType
argument_list|()
argument_list|,
name|p2
operator|.
name|getBrowserType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
operator|!
name|p1
operator|.
name|isSetCacheControl
argument_list|()
operator|||
operator|!
name|p2
operator|.
name|isSetCacheControl
argument_list|()
operator|||
name|p1
operator|.
name|getCacheControl
argument_list|()
operator|.
name|equals
argument_list|(
name|p2
operator|.
name|getCacheControl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|=
operator|!
name|p1
operator|.
name|isSetConnection
argument_list|()
operator|||
operator|!
name|p2
operator|.
name|isSetConnection
argument_list|()
operator|||
name|p1
operator|.
name|getConnection
argument_list|()
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
name|p2
operator|.
name|getConnection
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|=
operator|!
name|p1
operator|.
name|isSetContentType
argument_list|()
operator|||
operator|!
name|p2
operator|.
name|isSetContentType
argument_list|()
operator|||
name|p1
operator|.
name|getContentType
argument_list|()
operator|.
name|equals
argument_list|(
name|p2
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|compatible
argument_list|(
name|p1
operator|.
name|getCookie
argument_list|()
argument_list|,
name|p2
operator|.
name|getCookie
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// REVISIT: Should compatibility require strict equality?
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|compatible
argument_list|(
name|p1
operator|.
name|getDecoupledEndpoint
argument_list|()
argument_list|,
name|p2
operator|.
name|getDecoupledEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|compatible
argument_list|(
name|p1
operator|.
name|getHost
argument_list|()
argument_list|,
name|p2
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|compatible
argument_list|(
name|p1
operator|.
name|getProxyServer
argument_list|()
argument_list|,
name|p2
operator|.
name|getProxyServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
operator|!
name|p1
operator|.
name|isSetProxyServerPort
argument_list|()
operator|||
operator|!
name|p2
operator|.
name|isSetProxyServerPort
argument_list|()
operator|||
name|p1
operator|.
name|getProxyServerPort
argument_list|()
operator|==
name|p2
operator|.
name|getProxyServerPort
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
operator|!
name|p1
operator|.
name|isSetProxyServerType
argument_list|()
operator|||
operator|!
name|p2
operator|.
name|isSetProxyServerType
argument_list|()
operator|||
name|p1
operator|.
name|getProxyServerType
argument_list|()
operator|.
name|equals
argument_list|(
name|p2
operator|.
name|getProxyServerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|compatible
argument_list|(
name|p1
operator|.
name|getReferer
argument_list|()
argument_list|,
name|p2
operator|.
name|getReferer
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|p1
operator|.
name|isAllowChunking
argument_list|()
operator|==
name|p2
operator|.
name|isAllowChunking
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|p1
operator|.
name|isAutoRedirect
argument_list|()
operator|==
name|p2
operator|.
name|isAutoRedirect
argument_list|()
expr_stmt|;
block|}
return|return
name|compatible
return|;
block|}
comment|/**      * Returns a new HTTPClientPolicy that is compatible with the two specified policies or      * null if no compatible policy can be determined.      * @param p1 one policy      * @param p2 another policy      * @return the compatible policy      */
specifier|public
specifier|static
name|HTTPClientPolicy
name|intersect
parameter_list|(
name|HTTPClientPolicy
name|p1
parameter_list|,
name|HTTPClientPolicy
name|p2
parameter_list|)
block|{
comment|// incompatibilities
if|if
condition|(
operator|!
name|compatible
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// ok - compute compatible policy
name|HTTPClientPolicy
name|p
init|=
operator|new
name|HTTPClientPolicy
argument_list|()
decl_stmt|;
name|p
operator|.
name|setAccept
argument_list|(
name|combine
argument_list|(
name|p1
operator|.
name|getAccept
argument_list|()
argument_list|,
name|p2
operator|.
name|getAccept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setAcceptEncoding
argument_list|(
name|combine
argument_list|(
name|p1
operator|.
name|getAcceptEncoding
argument_list|()
argument_list|,
name|p2
operator|.
name|getAcceptEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setAcceptLanguage
argument_list|(
name|combine
argument_list|(
name|p1
operator|.
name|getAcceptLanguage
argument_list|()
argument_list|,
name|p2
operator|.
name|getAcceptLanguage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p1
operator|.
name|isSetAllowChunking
argument_list|()
condition|)
block|{
name|p
operator|.
name|setAllowChunking
argument_list|(
name|p1
operator|.
name|isAllowChunking
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetAllowChunking
argument_list|()
condition|)
block|{
name|p
operator|.
name|setAllowChunking
argument_list|(
name|p2
operator|.
name|isAllowChunking
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p1
operator|.
name|isSetAutoRedirect
argument_list|()
condition|)
block|{
name|p
operator|.
name|setAutoRedirect
argument_list|(
name|p1
operator|.
name|isAutoRedirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetAutoRedirect
argument_list|()
condition|)
block|{
name|p
operator|.
name|setAutoRedirect
argument_list|(
name|p2
operator|.
name|isAutoRedirect
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setBrowserType
argument_list|(
name|combine
argument_list|(
name|p1
operator|.
name|getBrowserType
argument_list|()
argument_list|,
name|p2
operator|.
name|getBrowserType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p1
operator|.
name|isSetCacheControl
argument_list|()
condition|)
block|{
name|p
operator|.
name|setCacheControl
argument_list|(
name|p1
operator|.
name|getCacheControl
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetCacheControl
argument_list|()
condition|)
block|{
name|p
operator|.
name|setCacheControl
argument_list|(
name|p2
operator|.
name|getCacheControl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p1
operator|.
name|isSetConnection
argument_list|()
condition|)
block|{
name|p
operator|.
name|setConnection
argument_list|(
name|p1
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetConnection
argument_list|()
condition|)
block|{
name|p
operator|.
name|setConnection
argument_list|(
name|p2
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p1
operator|.
name|isSetContentType
argument_list|()
condition|)
block|{
name|p
operator|.
name|setContentType
argument_list|(
name|p1
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetContentType
argument_list|()
condition|)
block|{
name|p
operator|.
name|setContentType
argument_list|(
name|p2
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setCookie
argument_list|(
name|combine
argument_list|(
name|p1
operator|.
name|getCookie
argument_list|()
argument_list|,
name|p2
operator|.
name|getCookie
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setDecoupledEndpoint
argument_list|(
name|combine
argument_list|(
name|p1
operator|.
name|getDecoupledEndpoint
argument_list|()
argument_list|,
name|p2
operator|.
name|getDecoupledEndpoint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setHost
argument_list|(
name|combine
argument_list|(
name|p1
operator|.
name|getHost
argument_list|()
argument_list|,
name|p2
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProxyServer
argument_list|(
name|combine
argument_list|(
name|p1
operator|.
name|getProxyServer
argument_list|()
argument_list|,
name|p2
operator|.
name|getProxyServer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p1
operator|.
name|isSetProxyServerPort
argument_list|()
condition|)
block|{
name|p
operator|.
name|setProxyServerPort
argument_list|(
name|p1
operator|.
name|getProxyServerPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetProxyServerPort
argument_list|()
condition|)
block|{
name|p
operator|.
name|setProxyServerPort
argument_list|(
name|p2
operator|.
name|getProxyServerPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p1
operator|.
name|isSetProxyServerType
argument_list|()
condition|)
block|{
name|p
operator|.
name|setProxyServerType
argument_list|(
name|p1
operator|.
name|getProxyServerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetProxyServerType
argument_list|()
condition|)
block|{
name|p
operator|.
name|setProxyServerType
argument_list|(
name|p2
operator|.
name|getProxyServerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setReferer
argument_list|(
name|combine
argument_list|(
name|p1
operator|.
name|getReferer
argument_list|()
argument_list|,
name|p2
operator|.
name|getReferer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p1
operator|.
name|isSetConnectionTimeout
argument_list|()
operator|||
name|p2
operator|.
name|isSetConnectionTimeout
argument_list|()
condition|)
block|{
name|p
operator|.
name|setConnectionTimeout
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|p1
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|,
name|p2
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p1
operator|.
name|isSetReceiveTimeout
argument_list|()
operator|||
name|p2
operator|.
name|isSetReceiveTimeout
argument_list|()
condition|)
block|{
name|p
operator|.
name|setReceiveTimeout
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|p1
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|,
name|p2
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
comment|/**      * Determines if two HTTPClientPolicy objects are equal.      * REVISIT: Check if this can be replaced by a generated equals method.      * @param p1 one client policy      * @param p2 another client policy      * @return true iff the two policies are equal      */
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|HTTPClientPolicy
name|p1
parameter_list|,
name|HTTPClientPolicy
name|p2
parameter_list|)
block|{
if|if
condition|(
name|p1
operator|==
name|p2
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|result
operator|&=
operator|(
name|p1
operator|.
name|isAllowChunking
argument_list|()
operator|==
name|p2
operator|.
name|isAllowChunking
argument_list|()
operator|)
operator|&&
operator|(
name|p1
operator|.
name|isAutoRedirect
argument_list|()
operator|==
name|p2
operator|.
name|isAutoRedirect
argument_list|()
operator|)
operator|&&
name|equals
argument_list|(
name|p1
operator|.
name|getAccept
argument_list|()
argument_list|,
name|p2
operator|.
name|getAccept
argument_list|()
argument_list|)
operator|&&
name|equals
argument_list|(
name|p1
operator|.
name|getAcceptEncoding
argument_list|()
argument_list|,
name|p2
operator|.
name|getAcceptEncoding
argument_list|()
argument_list|)
operator|&&
name|equals
argument_list|(
name|p1
operator|.
name|getAcceptLanguage
argument_list|()
argument_list|,
name|p2
operator|.
name|getAcceptLanguage
argument_list|()
argument_list|)
operator|&&
name|equals
argument_list|(
name|p1
operator|.
name|getBrowserType
argument_list|()
argument_list|,
name|p2
operator|.
name|getBrowserType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
return|return
literal|false
return|;
block|}
name|result
operator|&=
operator|(
name|p1
operator|.
name|getCacheControl
argument_list|()
operator|==
literal|null
condition|?
name|p2
operator|.
name|getCacheControl
argument_list|()
operator|==
literal|null
else|:
name|p1
operator|.
name|getCacheControl
argument_list|()
operator|.
name|equals
argument_list|(
name|p2
operator|.
name|getCacheControl
argument_list|()
argument_list|)
operator|&&
name|p1
operator|.
name|getConnection
argument_list|()
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
name|p2
operator|.
name|getConnection
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|p1
operator|.
name|getConnectionTimeout
argument_list|()
operator|==
name|p2
operator|.
name|getConnectionTimeout
argument_list|()
operator|)
operator|&&
name|equals
argument_list|(
name|p1
operator|.
name|getContentType
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|&&
name|equals
argument_list|(
name|p1
operator|.
name|getCookie
argument_list|()
argument_list|,
name|p2
operator|.
name|getCookie
argument_list|()
argument_list|)
operator|&&
name|equals
argument_list|(
name|p1
operator|.
name|getDecoupledEndpoint
argument_list|()
argument_list|,
name|p2
operator|.
name|getDecoupledEndpoint
argument_list|()
argument_list|)
operator|&&
name|equals
argument_list|(
name|p1
operator|.
name|getHost
argument_list|()
argument_list|,
name|p2
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
return|return
literal|false
return|;
block|}
name|result
operator|&=
name|equals
argument_list|(
name|p1
operator|.
name|getProxyServer
argument_list|()
argument_list|,
name|p2
operator|.
name|getProxyServer
argument_list|()
argument_list|)
operator|&&
operator|(
name|p1
operator|.
name|isSetProxyServerPort
argument_list|()
condition|?
name|p1
operator|.
name|getProxyServerPort
argument_list|()
operator|==
name|p2
operator|.
name|getProxyServerPort
argument_list|()
else|:
operator|!
name|p2
operator|.
name|isSetProxyServerPort
argument_list|()
operator|)
operator|&&
name|p1
operator|.
name|getProxyServerType
argument_list|()
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
name|p2
operator|.
name|getProxyServerType
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
operator|&&
operator|(
name|p1
operator|.
name|getReceiveTimeout
argument_list|()
operator|==
name|p2
operator|.
name|getReceiveTimeout
argument_list|()
operator|)
operator|&&
name|equals
argument_list|(
name|p1
operator|.
name|getReferer
argument_list|()
argument_list|,
name|p2
operator|.
name|getReferer
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Checks if two HTTPServerPolicy objects are compatible.      * @param p1 one server policy      * @param p2 another server policy      * @return true iff policies are compatible      */
specifier|public
specifier|static
name|boolean
name|compatible
parameter_list|(
name|HTTPServerPolicy
name|p1
parameter_list|,
name|HTTPServerPolicy
name|p2
parameter_list|)
block|{
if|if
condition|(
name|p1
operator|==
name|p2
operator|||
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|compatible
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
operator|!
name|p1
operator|.
name|isSetCacheControl
argument_list|()
operator|||
operator|!
name|p2
operator|.
name|isSetCacheControl
argument_list|()
operator|||
name|p1
operator|.
name|getCacheControl
argument_list|()
operator|.
name|equals
argument_list|(
name|p2
operator|.
name|getCacheControl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|compatible
argument_list|(
name|p1
operator|.
name|getContentEncoding
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|compatible
argument_list|(
name|p1
operator|.
name|getContentLocation
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|compatible
argument_list|(
name|p1
operator|.
name|getContentType
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|compatible
argument_list|(
name|p1
operator|.
name|getRedirectURL
argument_list|()
argument_list|,
name|p2
operator|.
name|getRedirectURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|compatible
argument_list|(
name|p1
operator|.
name|getServerType
argument_list|()
argument_list|,
name|p2
operator|.
name|getServerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|p1
operator|.
name|isHonorKeepAlive
argument_list|()
operator|==
name|p2
operator|.
name|isHonorKeepAlive
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|p1
operator|.
name|isSuppressClientReceiveErrors
argument_list|()
operator|==
name|p2
operator|.
name|isSuppressClientReceiveErrors
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|p1
operator|.
name|isSuppressClientSendErrors
argument_list|()
operator|==
name|p2
operator|.
name|isSuppressClientSendErrors
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|compatible
argument_list|(
name|p1
operator|.
name|getKeepAliveParameters
argument_list|()
argument_list|,
name|p2
operator|.
name|getKeepAliveParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|compatible
return|;
block|}
comment|/**      * Returns a new HTTPServerPolicy that is compatible with the two specified policies or      * null if no compatible policy can be determined.      * @param p1 one policy      * @param p2 another policy      * @return the compatible policy      */
specifier|public
specifier|static
name|HTTPServerPolicy
name|intersect
parameter_list|(
name|HTTPServerPolicy
name|p1
parameter_list|,
name|HTTPServerPolicy
name|p2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|compatible
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HTTPServerPolicy
name|p
init|=
operator|new
name|HTTPServerPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|.
name|isSetCacheControl
argument_list|()
condition|)
block|{
name|p
operator|.
name|setCacheControl
argument_list|(
name|p1
operator|.
name|getCacheControl
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetCacheControl
argument_list|()
condition|)
block|{
name|p
operator|.
name|setCacheControl
argument_list|(
name|p2
operator|.
name|getCacheControl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setContentEncoding
argument_list|(
name|combine
argument_list|(
name|p1
operator|.
name|getContentEncoding
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setContentLocation
argument_list|(
name|combine
argument_list|(
name|p1
operator|.
name|getContentLocation
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p1
operator|.
name|isSetContentType
argument_list|()
condition|)
block|{
name|p
operator|.
name|setContentType
argument_list|(
name|p1
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetContentType
argument_list|()
condition|)
block|{
name|p
operator|.
name|setContentType
argument_list|(
name|p2
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p1
operator|.
name|isSetHonorKeepAlive
argument_list|()
condition|)
block|{
name|p
operator|.
name|setHonorKeepAlive
argument_list|(
name|p1
operator|.
name|isHonorKeepAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetHonorKeepAlive
argument_list|()
condition|)
block|{
name|p
operator|.
name|setHonorKeepAlive
argument_list|(
name|p2
operator|.
name|isHonorKeepAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p1
operator|.
name|isSetKeepAliveParameters
argument_list|()
condition|)
block|{
name|p
operator|.
name|setKeepAliveParameters
argument_list|(
name|p1
operator|.
name|getKeepAliveParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetKeepAliveParameters
argument_list|()
condition|)
block|{
name|p
operator|.
name|setKeepAliveParameters
argument_list|(
name|p2
operator|.
name|getKeepAliveParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p1
operator|.
name|isSetReceiveTimeout
argument_list|()
operator|||
name|p2
operator|.
name|isSetReceiveTimeout
argument_list|()
condition|)
block|{
name|p
operator|.
name|setReceiveTimeout
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|p1
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|,
name|p2
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setRedirectURL
argument_list|(
name|combine
argument_list|(
name|p1
operator|.
name|getRedirectURL
argument_list|()
argument_list|,
name|p2
operator|.
name|getRedirectURL
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setServerType
argument_list|(
name|combine
argument_list|(
name|p1
operator|.
name|getServerType
argument_list|()
argument_list|,
name|p2
operator|.
name|getServerType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p1
operator|.
name|isSetSuppressClientReceiveErrors
argument_list|()
condition|)
block|{
name|p
operator|.
name|setSuppressClientReceiveErrors
argument_list|(
name|p1
operator|.
name|isSuppressClientReceiveErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetSuppressClientReceiveErrors
argument_list|()
condition|)
block|{
name|p
operator|.
name|setSuppressClientReceiveErrors
argument_list|(
name|p2
operator|.
name|isSuppressClientReceiveErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p1
operator|.
name|isSetSuppressClientSendErrors
argument_list|()
condition|)
block|{
name|p
operator|.
name|setSuppressClientSendErrors
argument_list|(
name|p1
operator|.
name|isSuppressClientSendErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetSuppressClientSendErrors
argument_list|()
condition|)
block|{
name|p
operator|.
name|setSuppressClientSendErrors
argument_list|(
name|p2
operator|.
name|isSuppressClientSendErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
comment|/**      * Determines if two HTTPServerPolicy objects are equal.      * REVISIT: Check if this can be replaced by a generated equals method.      * @param p1 one server policy      * @param p2 another server policy      * @return true iff the two policies are equal      */
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|HTTPServerPolicy
name|p1
parameter_list|,
name|HTTPServerPolicy
name|p2
parameter_list|)
block|{
if|if
condition|(
name|p1
operator|==
name|p2
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|result
operator|&=
operator|(
name|p1
operator|.
name|isHonorKeepAlive
argument_list|()
operator|==
name|p2
operator|.
name|isHonorKeepAlive
argument_list|()
operator|)
operator|&&
operator|(
name|p1
operator|.
name|getCacheControl
argument_list|()
operator|==
literal|null
condition|?
name|p2
operator|.
name|getCacheControl
argument_list|()
operator|==
literal|null
else|:
name|p1
operator|.
name|getCacheControl
argument_list|()
operator|.
name|equals
argument_list|(
name|p2
operator|.
name|getCacheControl
argument_list|()
argument_list|)
operator|)
operator|&&
name|equals
argument_list|(
name|p1
operator|.
name|getContentEncoding
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentEncoding
argument_list|()
argument_list|)
operator|&&
name|equals
argument_list|(
name|p1
operator|.
name|getContentLocation
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentLocation
argument_list|()
argument_list|)
operator|&&
name|equals
argument_list|(
name|p1
operator|.
name|getContentType
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|&&
name|equals
argument_list|(
name|p1
operator|.
name|getKeepAliveParameters
argument_list|()
argument_list|,
name|p2
operator|.
name|getKeepAliveParameters
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
return|return
literal|false
return|;
block|}
name|result
operator|&=
operator|(
name|p1
operator|.
name|getReceiveTimeout
argument_list|()
operator|==
name|p2
operator|.
name|getReceiveTimeout
argument_list|()
operator|)
operator|&&
name|equals
argument_list|(
name|p1
operator|.
name|getRedirectURL
argument_list|()
argument_list|,
name|p2
operator|.
name|getRedirectURL
argument_list|()
argument_list|)
operator|&&
name|equals
argument_list|(
name|p1
operator|.
name|getServerType
argument_list|()
argument_list|,
name|p2
operator|.
name|getServerType
argument_list|()
argument_list|)
operator|&&
operator|(
name|p1
operator|.
name|isSuppressClientReceiveErrors
argument_list|()
operator|==
name|p2
operator|.
name|isSuppressClientReceiveErrors
argument_list|()
operator|)
operator|&&
operator|(
name|p1
operator|.
name|isSuppressClientSendErrors
argument_list|()
operator|==
name|p2
operator|.
name|isSuppressClientSendErrors
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|String
name|combine
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
return|return
name|s1
operator|==
literal|null
condition|?
name|s2
else|:
name|s1
return|;
block|}
specifier|private
specifier|static
name|boolean
name|equals
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
return|return
name|s1
operator|==
literal|null
condition|?
name|s2
operator|==
literal|null
else|:
name|s1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|compatible
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
return|return
name|s1
operator|==
literal|null
operator|||
name|s2
operator|==
literal|null
operator|||
name|s1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|HTTPClientPolicy
name|getClient
parameter_list|(
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|alternative
parameter_list|)
block|{
name|HTTPClientPolicy
name|compatible
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Assertion
name|a
range|:
name|alternative
control|)
block|{
if|if
condition|(
name|HTTPCLIENTPOLICY_ASSERTION_QNAME
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|HTTPClientPolicy
name|p
init|=
name|JaxbAssertion
operator|.
name|cast
argument_list|(
name|a
argument_list|,
name|HTTPClientPolicy
operator|.
name|class
argument_list|)
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|compatible
condition|)
block|{
name|compatible
operator|=
name|p
expr_stmt|;
block|}
else|else
block|{
name|compatible
operator|=
name|intersect
argument_list|(
name|compatible
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|compatible
condition|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"INCOMPATIBLE_HTTPCLIENTPOLICY_ASSERTIONS"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|m
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"INCOMPATIBLE_HTTPCLIENTPOLICY_ASSERTIONS"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|PolicyException
argument_list|(
name|m
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|compatible
return|;
block|}
specifier|private
specifier|static
name|HTTPServerPolicy
name|getServer
parameter_list|(
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|alternative
parameter_list|)
block|{
name|HTTPServerPolicy
name|compatible
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Assertion
name|a
range|:
name|alternative
control|)
block|{
if|if
condition|(
name|HTTPSERVERPOLICY_ASSERTION_QNAME
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|HTTPServerPolicy
name|p
init|=
name|JaxbAssertion
operator|.
name|cast
argument_list|(
name|a
argument_list|,
name|HTTPServerPolicy
operator|.
name|class
argument_list|)
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|compatible
condition|)
block|{
name|compatible
operator|=
name|p
expr_stmt|;
block|}
else|else
block|{
name|compatible
operator|=
name|intersect
argument_list|(
name|compatible
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|compatible
condition|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"INCOMPATIBLE_HTTPSERVERPOLICY_ASSERTIONS"
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|m
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"INCOMPATIBLE_HTTPSERVERPOLICY_ASSERTIONS"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|PolicyException
argument_list|(
name|m
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|compatible
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|HTTPClientPolicy
name|p
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"[DecoupledEndpoint=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|p
operator|.
name|getDecoupledEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\", ReceiveTimeout="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|p
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"])"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|HTTPServerPolicy
name|p
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"[ContentType=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|p
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\", ReceiveTimeout="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|p
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"])"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

