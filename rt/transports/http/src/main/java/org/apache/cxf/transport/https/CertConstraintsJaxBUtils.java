begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|CertificateConstraintsType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|CombinatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|DNConstraintsType
import|;
end_import

begin_comment
comment|/**  * A set of static methods that operate on the generated CertificateConstraintsType.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|CertConstraintsJaxBUtils
block|{
specifier|private
name|CertConstraintsJaxBUtils
parameter_list|()
block|{
comment|// complete
block|}
comment|/**      * Create a CertConstraints object from a JAXB CertificateConstraintsType      */
specifier|public
specifier|static
name|CertConstraints
name|createCertConstraints
parameter_list|(
name|CertificateConstraintsType
name|certConstraints
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|subjectRegexps
init|=
name|getSubjectConstraints
argument_list|(
name|certConstraints
argument_list|)
decl_stmt|;
name|CertConstraints
operator|.
name|Combinator
name|subjectCombinator
init|=
name|getSubjectConstraintsCombinator
argument_list|(
name|certConstraints
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|issuerRegexps
init|=
name|getIssuerConstraints
argument_list|(
name|certConstraints
argument_list|)
decl_stmt|;
name|CertConstraints
operator|.
name|Combinator
name|issuerCombinator
init|=
name|getIssuerConstraintsCombinator
argument_list|(
name|certConstraints
argument_list|)
decl_stmt|;
return|return
operator|new
name|CertConstraints
argument_list|(
name|subjectRegexps
argument_list|,
name|subjectCombinator
argument_list|,
name|issuerRegexps
argument_list|,
name|issuerCombinator
argument_list|)
return|;
block|}
comment|/**      * Get a List of Strings that corresponds to the subject regular expression      * constraints from a JAXB CertificateConstraintsType      */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getSubjectConstraints
parameter_list|(
name|CertificateConstraintsType
name|certConstraints
parameter_list|)
block|{
if|if
condition|(
name|certConstraints
operator|!=
literal|null
operator|&&
name|certConstraints
operator|.
name|isSetSubjectDNConstraints
argument_list|()
condition|)
block|{
name|DNConstraintsType
name|constraints
init|=
name|certConstraints
operator|.
name|getSubjectDNConstraints
argument_list|()
decl_stmt|;
return|return
name|constraints
operator|.
name|getRegularExpression
argument_list|()
return|;
block|}
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/**      * Get a List of Strings that corresponds to the issuer regular expression      * constraints from a JAXB CertificateConstraintsType      */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getIssuerConstraints
parameter_list|(
name|CertificateConstraintsType
name|certConstraints
parameter_list|)
block|{
if|if
condition|(
name|certConstraints
operator|!=
literal|null
operator|&&
name|certConstraints
operator|.
name|isSetIssuerDNConstraints
argument_list|()
condition|)
block|{
name|DNConstraintsType
name|constraints
init|=
name|certConstraints
operator|.
name|getIssuerDNConstraints
argument_list|()
decl_stmt|;
return|return
name|constraints
operator|.
name|getRegularExpression
argument_list|()
return|;
block|}
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/**      * Get a (subject) CertConstrains.Combinator from a JAXB CertificateConstraintsType      */
specifier|public
specifier|static
name|CertConstraints
operator|.
name|Combinator
name|getSubjectConstraintsCombinator
parameter_list|(
name|CertificateConstraintsType
name|certConstraints
parameter_list|)
block|{
if|if
condition|(
name|certConstraints
operator|!=
literal|null
operator|&&
name|certConstraints
operator|.
name|isSetSubjectDNConstraints
argument_list|()
condition|)
block|{
name|DNConstraintsType
name|constraints
init|=
name|certConstraints
operator|.
name|getSubjectDNConstraints
argument_list|()
decl_stmt|;
if|if
condition|(
name|constraints
operator|!=
literal|null
operator|&&
name|constraints
operator|.
name|isSetCombinator
argument_list|()
condition|)
block|{
name|CombinatorType
name|combinator
init|=
name|constraints
operator|.
name|getCombinator
argument_list|()
decl_stmt|;
if|if
condition|(
name|combinator
operator|==
name|CombinatorType
operator|.
name|ANY
condition|)
block|{
return|return
name|CertConstraints
operator|.
name|Combinator
operator|.
name|ANY
return|;
block|}
block|}
block|}
return|return
name|CertConstraints
operator|.
name|Combinator
operator|.
name|ALL
return|;
block|}
comment|/**      * Get a (issuer) CertConstrains.Combinator from a JAXB CertificateConstraintsType      */
specifier|public
specifier|static
name|CertConstraints
operator|.
name|Combinator
name|getIssuerConstraintsCombinator
parameter_list|(
name|CertificateConstraintsType
name|certConstraints
parameter_list|)
block|{
if|if
condition|(
name|certConstraints
operator|!=
literal|null
operator|&&
name|certConstraints
operator|.
name|isSetIssuerDNConstraints
argument_list|()
condition|)
block|{
name|DNConstraintsType
name|constraints
init|=
name|certConstraints
operator|.
name|getIssuerDNConstraints
argument_list|()
decl_stmt|;
if|if
condition|(
name|constraints
operator|!=
literal|null
operator|&&
name|constraints
operator|.
name|isSetCombinator
argument_list|()
condition|)
block|{
name|CombinatorType
name|combinator
init|=
name|constraints
operator|.
name|getCombinator
argument_list|()
decl_stmt|;
if|if
condition|(
name|combinator
operator|==
name|CombinatorType
operator|.
name|ANY
condition|)
block|{
return|return
name|CertConstraints
operator|.
name|Combinator
operator|.
name|ANY
return|;
block|}
block|}
block|}
return|return
name|CertConstraints
operator|.
name|Combinator
operator|.
name|ALL
return|;
block|}
block|}
end_class

end_unit

