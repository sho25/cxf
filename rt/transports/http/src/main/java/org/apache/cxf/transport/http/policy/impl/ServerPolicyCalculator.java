begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|policy
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|policy
operator|.
name|PolicyCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPServerPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|ObjectFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ServerPolicyCalculator
implements|implements
name|PolicyCalculator
argument_list|<
name|HTTPServerPolicy
argument_list|>
block|{
comment|/**      * Returns a new HTTPServerPolicy that is compatible with the two specified      * policies or null if no compatible policy can be determined.      *      * @param p1 one policy      * @param p2 another policy      * @return the compatible policy      */
specifier|public
name|HTTPServerPolicy
name|intersect
parameter_list|(
name|HTTPServerPolicy
name|p1
parameter_list|,
name|HTTPServerPolicy
name|p2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|compatible
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HTTPServerPolicy
name|p
init|=
operator|new
name|HTTPServerPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|.
name|isSetCacheControl
argument_list|()
condition|)
block|{
name|p
operator|.
name|setCacheControl
argument_list|(
name|p1
operator|.
name|getCacheControl
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetCacheControl
argument_list|()
condition|)
block|{
name|p
operator|.
name|setCacheControl
argument_list|(
name|p2
operator|.
name|getCacheControl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setContentEncoding
argument_list|(
name|StringUtils
operator|.
name|combine
argument_list|(
name|p1
operator|.
name|getContentEncoding
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setContentLocation
argument_list|(
name|StringUtils
operator|.
name|combine
argument_list|(
name|p1
operator|.
name|getContentLocation
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p1
operator|.
name|isSetContentType
argument_list|()
condition|)
block|{
name|p
operator|.
name|setContentType
argument_list|(
name|p1
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetContentType
argument_list|()
condition|)
block|{
name|p
operator|.
name|setContentType
argument_list|(
name|p2
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p1
operator|.
name|isSetHonorKeepAlive
argument_list|()
condition|)
block|{
name|p
operator|.
name|setHonorKeepAlive
argument_list|(
name|p1
operator|.
name|isHonorKeepAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetHonorKeepAlive
argument_list|()
condition|)
block|{
name|p
operator|.
name|setHonorKeepAlive
argument_list|(
name|p2
operator|.
name|isHonorKeepAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p1
operator|.
name|isSetKeepAliveParameters
argument_list|()
condition|)
block|{
name|p
operator|.
name|setKeepAliveParameters
argument_list|(
name|p1
operator|.
name|getKeepAliveParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetKeepAliveParameters
argument_list|()
condition|)
block|{
name|p
operator|.
name|setKeepAliveParameters
argument_list|(
name|p2
operator|.
name|getKeepAliveParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p1
operator|.
name|isSetReceiveTimeout
argument_list|()
operator|||
name|p2
operator|.
name|isSetReceiveTimeout
argument_list|()
condition|)
block|{
name|p
operator|.
name|setReceiveTimeout
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|p1
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|,
name|p2
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setRedirectURL
argument_list|(
name|StringUtils
operator|.
name|combine
argument_list|(
name|p1
operator|.
name|getRedirectURL
argument_list|()
argument_list|,
name|p2
operator|.
name|getRedirectURL
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setServerType
argument_list|(
name|StringUtils
operator|.
name|combine
argument_list|(
name|p1
operator|.
name|getServerType
argument_list|()
argument_list|,
name|p2
operator|.
name|getServerType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p1
operator|.
name|isSetSuppressClientReceiveErrors
argument_list|()
condition|)
block|{
name|p
operator|.
name|setSuppressClientReceiveErrors
argument_list|(
name|p1
operator|.
name|isSuppressClientReceiveErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetSuppressClientReceiveErrors
argument_list|()
condition|)
block|{
name|p
operator|.
name|setSuppressClientReceiveErrors
argument_list|(
name|p2
operator|.
name|isSuppressClientReceiveErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p1
operator|.
name|isSetSuppressClientSendErrors
argument_list|()
condition|)
block|{
name|p
operator|.
name|setSuppressClientSendErrors
argument_list|(
name|p1
operator|.
name|isSuppressClientSendErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p2
operator|.
name|isSetSuppressClientSendErrors
argument_list|()
condition|)
block|{
name|p
operator|.
name|setSuppressClientSendErrors
argument_list|(
name|p2
operator|.
name|isSuppressClientSendErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
comment|/**      * Checks if two HTTPServerPolicy objects are compatible.      *      * @param p1 one server policy      * @param p2 another server policy      * @return true iff policies are compatible      */
specifier|public
name|boolean
name|compatible
parameter_list|(
name|HTTPServerPolicy
name|p1
parameter_list|,
name|HTTPServerPolicy
name|p2
parameter_list|)
block|{
if|if
condition|(
name|p1
operator|==
name|p2
operator|||
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|compatible
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
operator|!
name|p1
operator|.
name|isSetCacheControl
argument_list|()
operator|||
operator|!
name|p2
operator|.
name|isSetCacheControl
argument_list|()
operator|||
name|p1
operator|.
name|getCacheControl
argument_list|()
operator|.
name|equals
argument_list|(
name|p2
operator|.
name|getCacheControl
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|StringUtils
operator|.
name|compatible
argument_list|(
name|p1
operator|.
name|getContentEncoding
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|StringUtils
operator|.
name|compatible
argument_list|(
name|p1
operator|.
name|getContentLocation
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|StringUtils
operator|.
name|compatible
argument_list|(
name|p1
operator|.
name|getContentType
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|StringUtils
operator|.
name|compatible
argument_list|(
name|p1
operator|.
name|getRedirectURL
argument_list|()
argument_list|,
name|p2
operator|.
name|getRedirectURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|StringUtils
operator|.
name|compatible
argument_list|(
name|p1
operator|.
name|getServerType
argument_list|()
argument_list|,
name|p2
operator|.
name|getServerType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|p1
operator|.
name|isHonorKeepAlive
argument_list|()
operator|==
name|p2
operator|.
name|isHonorKeepAlive
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|p1
operator|.
name|isSuppressClientReceiveErrors
argument_list|()
operator|==
name|p2
operator|.
name|isSuppressClientReceiveErrors
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|p1
operator|.
name|isSuppressClientSendErrors
argument_list|()
operator|==
name|p2
operator|.
name|isSuppressClientSendErrors
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|compatible
condition|)
block|{
name|compatible
operator|&=
name|StringUtils
operator|.
name|compatible
argument_list|(
name|p1
operator|.
name|getKeepAliveParameters
argument_list|()
argument_list|,
name|p2
operator|.
name|getKeepAliveParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|compatible
return|;
block|}
comment|/**      * Determines if two HTTPServerPolicy objects are equal. REVISIT: Check if      * this can be replaced by a generated equals method.      *      * @param p1 one server policy      * @param p2 another server policy      * @return true iff the two policies are equal      */
specifier|public
name|boolean
name|equals
parameter_list|(
name|HTTPServerPolicy
name|p1
parameter_list|,
name|HTTPServerPolicy
name|p2
parameter_list|)
block|{
if|if
condition|(
name|p1
operator|==
name|p2
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|result
operator|&=
operator|(
name|p1
operator|.
name|isHonorKeepAlive
argument_list|()
operator|==
name|p2
operator|.
name|isHonorKeepAlive
argument_list|()
operator|)
operator|&&
operator|(
name|p1
operator|.
name|getCacheControl
argument_list|()
operator|==
literal|null
condition|?
name|p2
operator|.
name|getCacheControl
argument_list|()
operator|==
literal|null
else|:
name|p1
operator|.
name|getCacheControl
argument_list|()
operator|.
name|equals
argument_list|(
name|p2
operator|.
name|getCacheControl
argument_list|()
argument_list|)
operator|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|p1
operator|.
name|getContentEncoding
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentEncoding
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|p1
operator|.
name|getContentLocation
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentLocation
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|p1
operator|.
name|getContentType
argument_list|()
argument_list|,
name|p2
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|p1
operator|.
name|getKeepAliveParameters
argument_list|()
argument_list|,
name|p2
operator|.
name|getKeepAliveParameters
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
return|return
literal|false
return|;
block|}
name|result
operator|&=
operator|(
name|p1
operator|.
name|getReceiveTimeout
argument_list|()
operator|==
name|p2
operator|.
name|getReceiveTimeout
argument_list|()
operator|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|p1
operator|.
name|getRedirectURL
argument_list|()
argument_list|,
name|p2
operator|.
name|getRedirectURL
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|p1
operator|.
name|getServerType
argument_list|()
argument_list|,
name|p2
operator|.
name|getServerType
argument_list|()
argument_list|)
operator|&&
operator|(
name|p1
operator|.
name|isSuppressClientReceiveErrors
argument_list|()
operator|==
name|p2
operator|.
name|isSuppressClientReceiveErrors
argument_list|()
operator|)
operator|&&
operator|(
name|p1
operator|.
name|isSuppressClientSendErrors
argument_list|()
operator|==
name|p2
operator|.
name|isSuppressClientSendErrors
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|isAsserted
parameter_list|(
name|Message
name|message
parameter_list|,
name|HTTPServerPolicy
name|policy
parameter_list|,
name|HTTPServerPolicy
name|refPolicy
parameter_list|)
block|{
return|return
name|MessageUtils
operator|.
name|isOutbound
argument_list|(
name|message
argument_list|)
operator|||
name|equals
argument_list|(
name|policy
argument_list|,
name|refPolicy
argument_list|)
return|;
block|}
specifier|public
name|Class
argument_list|<
name|HTTPServerPolicy
argument_list|>
name|getDataClass
parameter_list|()
block|{
return|return
name|HTTPServerPolicy
operator|.
name|class
return|;
block|}
specifier|public
name|QName
name|getDataClassName
parameter_list|()
block|{
return|return
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createServer
argument_list|(
literal|null
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|HTTPServerPolicy
name|p
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"[ContentType=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|p
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\", ReceiveTimeout="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|p
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"])"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

