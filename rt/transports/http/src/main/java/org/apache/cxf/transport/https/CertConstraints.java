begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * This class represents a set of constraints that can be placed on an X.509 certificate,  * in the form of a regular expression on a SubjectDN or IssuerDN.  *  * A CertConstraints object is initialized using a CertificateConstraintsType, which has  * a definition in schema and is so generated.  */
end_comment

begin_class
specifier|public
class|class
name|CertConstraints
block|{
specifier|public
enum|enum
name|Combinator
block|{
name|ANY
block|,
name|ALL
block|}
empty_stmt|;
specifier|private
specifier|static
class|class
name|DNConstraints
block|{
comment|/**          * the matching combinator (ANY or ALL)          */
specifier|private
specifier|final
name|Combinator
name|combinator
decl_stmt|;
comment|/**          * a collection of compiled regular expression patterns          */
specifier|private
specifier|final
name|Collection
argument_list|<
name|Pattern
argument_list|>
name|dnPatterns
init|=
operator|new
name|ArrayList
argument_list|<
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
argument_list|>
argument_list|()
decl_stmt|;
comment|/**          * Creates a DNConstraints from a list of Strings          */
name|DNConstraints
parameter_list|(
specifier|final
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
name|patterns
parameter_list|,
specifier|final
name|Combinator
name|patternCombinator
parameter_list|)
throws|throws
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
block|{
if|if
condition|(
name|patterns
operator|==
literal|null
condition|)
block|{
name|combinator
operator|=
name|Combinator
operator|.
name|ALL
expr_stmt|;
return|return;
block|}
name|combinator
operator|=
name|patternCombinator
expr_stmt|;
for|for
control|(
name|String
name|expression
range|:
name|patterns
control|)
block|{
name|dnPatterns
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * @return      true if the DN name matches all patterns in the DNConstraints,          *              if the combinator is ALL, or any such pattern, if the combinator is          *              ANY.  Note that if the combinator is ALL and the list of patterns          *              is empty, then any dn will match (by definition of the universal quantifier)          */
specifier|final
name|boolean
name|matches
parameter_list|(
specifier|final
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|x500
operator|.
name|X500Principal
name|dn
parameter_list|)
block|{
name|boolean
name|atLeastOnePatternMatches
init|=
literal|false
decl_stmt|;
name|boolean
name|atLeastOnePatternDoesNotMatch
init|=
literal|false
decl_stmt|;
comment|//
comment|// try matching dn against the patterns in this class
comment|//
for|for
control|(
name|Pattern
name|dnPattern
range|:
name|dnPatterns
control|)
block|{
specifier|final
name|Matcher
name|matcher
init|=
name|dnPattern
operator|.
name|matcher
argument_list|(
name|dn
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|atLeastOnePatternMatches
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|combinator
operator|==
name|Combinator
operator|.
name|ANY
condition|)
block|{
break|break;
block|}
block|}
else|else
block|{
name|atLeastOnePatternDoesNotMatch
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|combinator
operator|==
name|Combinator
operator|.
name|ALL
condition|)
block|{
break|break;
block|}
block|}
block|}
comment|//
comment|// check combinator logic
comment|//
switch|switch
condition|(
name|combinator
condition|)
block|{
case|case
name|ALL
case|:
return|return
operator|!
name|atLeastOnePatternDoesNotMatch
return|;
case|case
name|ANY
case|:
return|return
name|atLeastOnePatternMatches
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"LOGIC ERROR: Unreachable code"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * The DNConstraints on the SubjectDN      */
specifier|private
specifier|final
name|DNConstraints
name|subjectDNConstraints
decl_stmt|;
comment|/**      * The DNConstraints on the IssuerDN      */
specifier|private
specifier|final
name|DNConstraints
name|issuerDNConstraints
decl_stmt|;
comment|/**      * Create a CertificateConstraints from a CertificateConstraintsType specification      */
specifier|public
name|CertConstraints
parameter_list|(
specifier|final
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
name|subjectConstraints
parameter_list|,
specifier|final
name|Combinator
name|subjectConstraintsCombinator
parameter_list|,
specifier|final
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
name|issuerConstraints
parameter_list|,
specifier|final
name|Combinator
name|issuerConstraintsCombinator
parameter_list|)
throws|throws
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
block|{
name|this
operator|.
name|subjectDNConstraints
operator|=
operator|new
name|DNConstraints
argument_list|(
name|subjectConstraints
argument_list|,
name|subjectConstraintsCombinator
argument_list|)
expr_stmt|;
name|this
operator|.
name|issuerDNConstraints
operator|=
operator|new
name|DNConstraints
argument_list|(
name|issuerConstraints
argument_list|,
name|issuerConstraintsCombinator
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return      true if the certificate's SubjectDN matches the constraints defined in the      *              subject DNConstraints and the certificate's IssuerDN matches the issuer      *              DNConstraints; false, otherwise      */
specifier|public
name|boolean
name|matches
parameter_list|(
specifier|final
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
name|cert
parameter_list|)
block|{
return|return
name|this
operator|.
name|subjectDNConstraints
operator|.
name|matches
argument_list|(
name|cert
operator|.
name|getSubjectX500Principal
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|issuerDNConstraints
operator|.
name|matches
argument_list|(
name|cert
operator|.
name|getIssuerX500Principal
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

