begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
operator|.
name|AttachmentDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|continuations
operator|.
name|ContinuationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|continuations
operator|.
name|SuspendedInvocationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|HttpHeaderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|AbstractWrappedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|DelegatingInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|policy
operator|.
name|PolicyDataEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|AbstractDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|AbstractMultiplexDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Assertor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|policy
operator|.
name|impl
operator|.
name|ServerPolicyCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|CertConstraints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|CertConstraintsInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|SSLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPServerPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLLibrary
import|;
end_import

begin_comment
comment|/**  * Common base for HTTP Destination implementations.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractHTTPDestination
extends|extends
name|AbstractMultiplexDestination
implements|implements
name|Configurable
implements|,
name|Assertor
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_REQUEST
init|=
literal|"HTTP.REQUEST"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_RESPONSE
init|=
literal|"HTTP.RESPONSE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_CONTEXT
init|=
literal|"HTTP.CONTEXT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_CONFIG
init|=
literal|"HTTP.CONFIG"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_CONTEXT_MATCH_STRATEGY
init|=
literal|"HTTP_CONTEXT_MATCH_STRATEGY"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RESPONSE_HEADERS_COPIED
init|=
literal|"http.headers.copied"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RESPONSE_COMMITED
init|=
literal|"http.response.done"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REQUEST_REDIRECTED
init|=
literal|"http.request.redirected"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CXF_CONTINUATION_MESSAGE
init|=
literal|"cxf.continuation.message"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CXF_ASYNC_CONTEXT
init|=
literal|"cxf.async.context"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_REDIRECTION
init|=
literal|"http.service.redirection"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_BASE_PATH
init|=
literal|"http.base.path"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractHTTPDestination
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|Bus
name|bus
decl_stmt|;
specifier|protected
name|DestinationRegistry
name|registry
decl_stmt|;
specifier|protected
specifier|final
name|String
name|path
decl_stmt|;
comment|// Configuration values
specifier|protected
name|HTTPServerPolicy
name|server
decl_stmt|;
specifier|protected
name|String
name|contextMatchStrategy
init|=
literal|"stem"
decl_stmt|;
specifier|protected
name|boolean
name|fixedParameterOrder
decl_stmt|;
specifier|protected
name|boolean
name|multiplexWithAddress
decl_stmt|;
specifier|protected
name|CertConstraints
name|certConstraints
decl_stmt|;
specifier|protected
name|boolean
name|isServlet3
decl_stmt|;
comment|/**      * Constructor      *       * @param b the associated Bus      * @param ci the associated conduit initiator      * @param ei the endpoint info of the destination       * @param dp true for adding the default port if it is missing      * @throws IOException      */
specifier|public
name|AbstractHTTPDestination
parameter_list|(
name|Bus
name|b
parameter_list|,
name|DestinationRegistry
name|registry
parameter_list|,
name|EndpointInfo
name|ei
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|dp
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|b
argument_list|,
name|getTargetReference
argument_list|(
name|getAddressValue
argument_list|(
name|ei
argument_list|,
name|dp
argument_list|)
argument_list|,
name|b
argument_list|)
argument_list|,
name|ei
argument_list|)
expr_stmt|;
name|this
operator|.
name|bus
operator|=
name|b
expr_stmt|;
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
try|try
block|{
name|ServletRequest
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"isAsyncSupported"
argument_list|)
expr_stmt|;
name|isServlet3
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//servlet 2.5 or earlier, no async support
block|}
name|initConfig
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
specifier|private
name|AuthorizationPolicy
name|getAuthorizationPolicyFromMessage
parameter_list|(
name|String
name|credentials
parameter_list|)
block|{
if|if
condition|(
name|credentials
operator|==
literal|null
operator|||
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|credentials
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|authType
init|=
name|credentials
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
literal|"Basic"
operator|.
name|equals
argument_list|(
name|authType
argument_list|)
condition|)
block|{
name|String
name|authEncoded
init|=
name|credentials
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
try|try
block|{
name|String
name|authDecoded
init|=
operator|new
name|String
argument_list|(
name|Base64Utility
operator|.
name|decode
argument_list|(
name|authEncoded
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|authInfo
index|[]
init|=
name|authDecoded
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|username
init|=
operator|(
name|authInfo
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
name|authInfo
index|[
literal|0
index|]
else|:
literal|""
decl_stmt|;
comment|// Below line for systems that blank out password after authentication;
comment|// see CXF-1495 for more info
name|String
name|password
init|=
operator|(
name|authInfo
operator|.
name|length
operator|>
literal|1
operator|)
condition|?
name|authInfo
index|[
literal|1
index|]
else|:
literal|""
decl_stmt|;
name|AuthorizationPolicy
name|policy
init|=
operator|new
name|AuthorizationPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setUserName
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
return|return
name|policy
return|;
block|}
catch|catch
parameter_list|(
name|Base64Exception
name|ex
parameter_list|)
block|{
comment|// Invalid authentication => treat as not authenticated
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**       * @param message the message under consideration      * @return true iff the message has been marked as oneway      */
specifier|protected
specifier|final
name|boolean
name|isOneWay
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Exchange
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
return|return
name|ex
operator|==
literal|null
condition|?
literal|false
else|:
name|ex
operator|.
name|isOneWay
argument_list|()
return|;
block|}
specifier|public
name|void
name|invoke
parameter_list|(
specifier|final
name|ServletConfig
name|config
parameter_list|,
specifier|final
name|ServletContext
name|context
parameter_list|,
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
name|Message
name|inMessage
init|=
name|retrieveFromContinuation
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|inMessage
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Create a new message for processing"
argument_list|)
expr_stmt|;
name|inMessage
operator|=
operator|new
name|MessageImpl
argument_list|()
expr_stmt|;
name|setupMessage
argument_list|(
name|inMessage
argument_list|,
name|config
argument_list|,
name|context
argument_list|,
name|req
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|ExchangeImpl
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setInMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setSession
argument_list|(
operator|new
name|HTTPSession
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MessageImpl
operator|)
name|inMessage
operator|)
operator|.
name|setDestination
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Get the message from the request for processing"
argument_list|)
expr_stmt|;
block|}
name|copyKnownRequestParameters
argument_list|(
name|req
argument_list|,
name|inMessage
argument_list|)
expr_stmt|;
try|try
block|{
name|incomingObserver
operator|.
name|onMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SuspendedInvocationException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getRuntimeException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ex
operator|.
name|getRuntimeException
argument_list|()
throw|;
block|}
comment|//else nothing to do, just finishing the processing
block|}
block|}
specifier|private
name|void
name|copyKnownRequestParameters
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|message
operator|.
name|put
argument_list|(
name|SERVICE_REDIRECTION
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
name|SERVICE_REDIRECTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setupMessage
parameter_list|(
name|Message
name|inMessage
parameter_list|,
specifier|final
name|ServletContext
name|context
parameter_list|,
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
name|setupMessage
argument_list|(
name|inMessage
argument_list|,
literal|null
argument_list|,
name|context
argument_list|,
name|req
argument_list|,
name|resp
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setupMessage
parameter_list|(
specifier|final
name|Message
name|inMessage
parameter_list|,
specifier|final
name|ServletConfig
name|config
parameter_list|,
specifier|final
name|ServletContext
name|context
parameter_list|,
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
name|setupContinuation
argument_list|(
name|inMessage
argument_list|,
name|req
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|DelegatingInputStream
name|in
init|=
operator|new
name|DelegatingInputStream
argument_list|(
name|req
operator|.
name|getInputStream
argument_list|()
argument_list|)
block|{
specifier|public
name|void
name|cacheInput
parameter_list|()
block|{
if|if
condition|(
operator|!
name|cached
operator|&&
name|inMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//For one-ways, we need to cache the values of the HttpServletRequest
comment|//so they can be queried later for things like paths and schemes
comment|//and such like that.
name|inMessage
operator|.
name|put
argument_list|(
name|HTTP_REQUEST
argument_list|,
operator|new
name|HttpServletRequestSnapshot
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|cacheInput
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|inMessage
operator|.
name|setContent
argument_list|(
name|DelegatingInputStream
operator|.
name|class
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|HTTP_REQUEST
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|HTTP_RESPONSE
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|HTTP_CONTEXT
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|HTTP_CONFIG
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|HTTP_CONTEXT_MATCH_STRATEGY
argument_list|,
name|contextMatchStrategy
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|requestURI
init|=
name|req
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|,
name|requestURI
argument_list|)
expr_stmt|;
name|String
name|requestURL
init|=
name|req
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUEST_URL
argument_list|,
name|requestURL
argument_list|)
expr_stmt|;
name|String
name|contextPath
init|=
name|req
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|contextPath
operator|==
literal|null
condition|)
block|{
name|contextPath
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|servletPath
init|=
name|req
operator|.
name|getServletPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|servletPath
operator|==
literal|null
condition|)
block|{
name|servletPath
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|contextServletPath
init|=
name|contextPath
operator|+
name|servletPath
decl_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PATH_INFO
argument_list|,
name|contextServletPath
operator|+
name|req
operator|.
name|getPathInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|requestURI
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|requestURL
operator|.
name|indexOf
argument_list|(
name|requestURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
comment|// Can be useful for referencing resources with URIs not covered by CXFServlet.
comment|// For example, if we a have web application name 'app' and CXFServlet listening
comment|// on "/services/*" then having HTTP_BASE_PATH pointing to say
comment|// http://localhost:8080/app will make it easy to refer to non CXF resources
name|String
name|schemaInfo
init|=
name|requestURL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|String
name|basePathWithContextOnly
init|=
name|schemaInfo
operator|+
name|contextPath
decl_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|HTTP_BASE_PATH
argument_list|,
name|basePathWithContextOnly
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|servletPath
argument_list|)
operator|&&
name|requestURL
operator|.
name|endsWith
argument_list|(
name|servletPath
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|requestURL
operator|.
name|lastIndexOf
argument_list|(
name|servletPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|inMessage
operator|.
name|put
argument_list|(
name|HTTP_BASE_PATH
argument_list|,
name|requestURL
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|contentType
init|=
name|req
operator|.
name|getContentType
argument_list|()
decl_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|setEncoding
argument_list|(
name|inMessage
argument_list|,
name|req
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|QUERY_STRING
argument_list|,
name|req
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|,
name|req
operator|.
name|getHeader
argument_list|(
literal|"Accept"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|basePath
init|=
name|getBasePath
argument_list|(
name|contextServletPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|BASE_PATH
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
block|}
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|FIXED_PARAMETER_ORDER
argument_list|,
name|isFixedParameterOrder
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ASYNC_POST_RESPONSE_DISPATCH
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
operator|new
name|SecurityContext
argument_list|()
block|{
specifier|private
name|Principal
name|pp
init|=
name|req
operator|.
name|getUserPrincipal
argument_list|()
decl_stmt|;
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
name|pp
return|;
block|}
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
return|return
name|req
operator|.
name|isUserInRole
argument_list|(
name|role
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Headers
name|headers
init|=
operator|new
name|Headers
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
name|headers
operator|.
name|copyFromRequest
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|String
name|credentials
init|=
name|headers
operator|.
name|getAuthorization
argument_list|()
decl_stmt|;
name|AuthorizationPolicy
name|authPolicy
init|=
name|getAuthorizationPolicyFromMessage
argument_list|(
name|credentials
argument_list|)
decl_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|AuthorizationPolicy
operator|.
name|class
argument_list|,
name|authPolicy
argument_list|)
expr_stmt|;
name|SSLUtils
operator|.
name|propogateSecureSession
argument_list|(
name|req
argument_list|,
name|inMessage
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|CertConstraints
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|certConstraints
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|IN_INTERCEPTORS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Interceptor
index|[]
block|{
name|CertConstraintsInterceptor
operator|.
name|INSTANCE
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|setEncoding
parameter_list|(
specifier|final
name|Message
name|inMessage
parameter_list|,
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|String
name|contentType
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|enc
init|=
name|HttpHeaderHelper
operator|.
name|findCharset
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
if|if
condition|(
name|enc
operator|==
literal|null
condition|)
block|{
name|enc
operator|=
name|req
operator|.
name|getCharacterEncoding
argument_list|()
expr_stmt|;
block|}
comment|// work around a bug with Jetty which results in the character
comment|// encoding not being trimmed correctly.
if|if
condition|(
name|enc
operator|!=
literal|null
operator|&&
name|enc
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|enc
operator|=
name|enc
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|enc
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enc
operator|!=
literal|null
operator|||
literal|"POST"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|||
literal|"PUT"
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
comment|//allow gets/deletes/options to not specify an encoding
name|String
name|normalizedEncoding
init|=
name|HttpHeaderHelper
operator|.
name|mapCharset
argument_list|(
name|enc
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalizedEncoding
operator|==
literal|null
condition|)
block|{
name|String
name|m
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"INVALID_ENCODING_MSG"
argument_list|,
name|LOG
argument_list|,
name|enc
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|m
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|m
argument_list|)
throw|;
block|}
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENCODING
argument_list|,
name|normalizedEncoding
argument_list|)
expr_stmt|;
block|}
return|return
name|contentType
return|;
block|}
specifier|protected
name|Message
name|retrieveFromContinuation
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isServlet3
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|retrieveFromServlet3Async
argument_list|(
name|req
argument_list|)
return|;
block|}
specifier|protected
name|Message
name|retrieveFromServlet3Async
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|Message
operator|)
name|req
operator|.
name|getAttribute
argument_list|(
name|CXF_CONTINUATION_MESSAGE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// the request may not implement the Servlet3 API
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|setupContinuation
parameter_list|(
name|Message
name|inMessage
parameter_list|,
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|HttpServletResponse
name|resp
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|isServlet3
operator|&&
name|req
operator|.
name|isAsyncSupported
argument_list|()
condition|)
block|{
name|inMessage
operator|.
name|put
argument_list|(
name|ContinuationProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|Servlet3ContinuationProvider
argument_list|(
name|req
argument_list|,
name|resp
argument_list|,
name|inMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// the request may not implement the Servlet3 API
block|}
block|}
specifier|protected
name|String
name|getBasePath
parameter_list|(
name|String
name|contextPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|endpointInfo
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
operator|new
name|URL
argument_list|(
name|endpointInfo
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|EndpointInfo
name|getAddressValue
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|)
block|{
return|return
name|getAddressValue
argument_list|(
name|ei
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|EndpointInfo
name|getAddressValue
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|boolean
name|dp
parameter_list|)
block|{
if|if
condition|(
name|dp
condition|)
block|{
name|String
name|eiAddress
init|=
name|ei
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|eiAddress
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|ServerSocket
name|s
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ei
operator|.
name|setAddress
argument_list|(
literal|"http://localhost:"
operator|+
name|s
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|ei
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// problem allocating a random port, go to the default one
name|ei
operator|.
name|setAddress
argument_list|(
literal|"http://localhost"
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|addr
init|=
name|StringUtils
operator|.
name|addDefaultPortIfMissing
argument_list|(
name|ei
operator|.
name|getAddress
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|!=
literal|null
condition|)
block|{
name|ei
operator|.
name|setAddress
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ei
return|;
block|}
comment|/**      * @param inMessage the incoming message      * @return the inbuilt backchannel      */
specifier|protected
name|Conduit
name|getInbuiltBackChannel
parameter_list|(
name|Message
name|inMessage
parameter_list|)
block|{
name|HttpServletResponse
name|response
init|=
operator|(
name|HttpServletResponse
operator|)
name|inMessage
operator|.
name|get
argument_list|(
name|HTTP_RESPONSE
argument_list|)
decl_stmt|;
return|return
operator|new
name|BackChannelConduit
argument_list|(
name|response
argument_list|)
return|;
block|}
specifier|private
name|void
name|initConfig
parameter_list|()
block|{
name|PolicyDataEngine
name|pde
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyDataEngine
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pde
operator|!=
literal|null
condition|)
block|{
name|server
operator|=
name|pde
operator|.
name|getServerEndpointPolicy
argument_list|(
name|endpointInfo
argument_list|,
name|this
argument_list|,
operator|new
name|ServerPolicyCalculator
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|server
operator|&&
name|WSDLLibrary
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|server
operator|=
name|endpointInfo
operator|.
name|getTraversedExtensor
argument_list|(
operator|new
name|HTTPServerPolicy
argument_list|()
argument_list|,
name|HTTPServerPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * On first write, we need to make sure any attachments and such that are still on the incoming stream       * are read in.  Otherwise we can get into a deadlock where the client is still trying to send the       * request, but the server is trying to send the response.   Neither side is reading and both blocked       * on full buffers.  Not a good situation.          * @param outMessage      */
specifier|private
name|void
name|cacheInput
parameter_list|(
name|Message
name|outMessage
parameter_list|)
block|{
if|if
condition|(
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Message
name|inMessage
init|=
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|inMessage
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|atts
init|=
name|inMessage
operator|.
name|getAttachments
argument_list|()
decl_stmt|;
if|if
condition|(
name|atts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Attachment
name|a
range|:
name|atts
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getDataSource
argument_list|()
operator|instanceof
name|AttachmentDataSource
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|AttachmentDataSource
operator|)
name|a
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getDataSource
argument_list|()
operator|)
operator|.
name|cache
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|DelegatingInputStream
name|in
init|=
name|inMessage
operator|.
name|getContent
argument_list|(
name|DelegatingInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|cacheInput
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|OutputStream
name|flushHeaders
parameter_list|(
name|Message
name|outMessage
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|flushHeaders
argument_list|(
name|outMessage
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|OutputStream
name|flushHeaders
parameter_list|(
name|Message
name|outMessage
parameter_list|,
name|boolean
name|getStream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isResponseRedirected
argument_list|(
name|outMessage
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|cacheInput
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
operator|new
name|Headers
argument_list|(
name|outMessage
argument_list|)
operator|.
name|setFromServerPolicy
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|OutputStream
name|responseStream
init|=
literal|null
decl_stmt|;
name|boolean
name|oneWay
init|=
name|isOneWay
argument_list|(
name|outMessage
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|response
init|=
name|getHttpResponseFromMessage
argument_list|(
name|outMessage
argument_list|)
decl_stmt|;
name|int
name|responseCode
init|=
name|getReponseCodeFromMessage
argument_list|(
name|outMessage
argument_list|)
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|responseCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|HttpURLConnection
operator|.
name|HTTP_INTERNAL_ERROR
operator|==
name|responseCode
condition|)
block|{
operator|new
name|Headers
argument_list|(
name|outMessage
argument_list|)
operator|.
name|removeContentType
argument_list|()
expr_stmt|;
block|}
operator|new
name|Headers
argument_list|(
name|outMessage
argument_list|)
operator|.
name|copyToResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|outMessage
operator|.
name|put
argument_list|(
name|RESPONSE_HEADERS_COPIED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasNoResponseContent
argument_list|(
name|outMessage
argument_list|)
condition|)
block|{
name|response
operator|.
name|setContentLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
name|response
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|getStream
condition|)
block|{
name|response
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|responseStream
operator|=
name|response
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|oneWay
condition|)
block|{
name|outMessage
operator|.
name|remove
argument_list|(
name|HTTP_RESPONSE
argument_list|)
expr_stmt|;
block|}
return|return
name|responseStream
return|;
block|}
specifier|private
name|int
name|getReponseCodeFromMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Integer
name|i
init|=
operator|(
name|Integer
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
condition|)
block|{
return|return
name|i
operator|.
name|intValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|hasNoResponseContent
argument_list|(
name|message
argument_list|)
condition|)
block|{
return|return
name|HttpURLConnection
operator|.
name|HTTP_ACCEPTED
return|;
block|}
else|else
block|{
return|return
name|HttpURLConnection
operator|.
name|HTTP_OK
return|;
block|}
block|}
comment|/**      * Determines if the current message has no response content.      * The message has no response content if either:      *  - the request is oneway and the current message is no partial       *    response or an empty partial response.      *  - the request is not oneway but the current message is an empty partial       *    response.       * @param message      * @return      */
specifier|private
name|boolean
name|hasNoResponseContent
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|boolean
name|ow
init|=
name|isOneWay
argument_list|(
name|message
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|pr
init|=
name|MessageUtils
operator|.
name|isPartialResponse
argument_list|(
name|message
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|epr
init|=
name|MessageUtils
operator|.
name|isEmptyPartialResponse
argument_list|(
name|message
argument_list|)
decl_stmt|;
comment|//REVISIT may need to provide an option to choose other behavior?
comment|// old behavior not suppressing any responses  => ow&& !pr
comment|// suppress empty responses for oneway calls   => ow&& (!pr || epr)
comment|// suppress additionally empty responses for decoupled twoway calls =>
return|return
operator|(
name|ow
operator|&&
operator|(
operator|!
name|pr
operator|||
name|epr
operator|)
operator|)
operator|||
operator|(
operator|!
name|ow
operator|&&
name|epr
operator|)
return|;
block|}
specifier|private
name|HttpServletResponse
name|getHttpResponseFromMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|responseObj
init|=
name|message
operator|.
name|get
argument_list|(
name|HTTP_RESPONSE
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseObj
operator|instanceof
name|HttpServletResponse
condition|)
block|{
return|return
operator|(
name|HttpServletResponse
operator|)
name|responseObj
return|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|responseObj
condition|)
block|{
name|String
name|m
init|=
operator|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"UNEXPECTED_RESPONSE_TYPE_MSG"
argument_list|,
name|LOG
argument_list|,
name|responseObj
operator|.
name|getClass
argument_list|()
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|m
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|m
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|m
init|=
operator|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"NULL_RESPONSE_MSG"
argument_list|,
name|LOG
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|m
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|m
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isResponseRedirected
parameter_list|(
name|Message
name|outMessage
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|outMessage
operator|.
name|get
argument_list|(
name|REQUEST_REDIRECTED
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Backchannel conduit.      */
specifier|public
class|class
name|BackChannelConduit
extends|extends
name|AbstractDestination
operator|.
name|AbstractBackChannelConduit
block|{
specifier|protected
name|HttpServletResponse
name|response
decl_stmt|;
name|BackChannelConduit
parameter_list|(
name|HttpServletResponse
name|resp
parameter_list|)
block|{
name|response
operator|=
name|resp
expr_stmt|;
block|}
comment|/**          * Send an outbound message, assumed to contain all the name-value          * mappings of the corresponding input message (if any).           *           * @param message the message to be sent.          */
specifier|public
name|void
name|prepare
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|message
operator|.
name|put
argument_list|(
name|HTTP_RESPONSE
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|message
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|==
literal|null
condition|)
block|{
name|message
operator|.
name|setContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
operator|new
name|WrappedOutputStream
argument_list|(
name|message
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|(
name|Message
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|.
name|getExchange
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Message
name|m
init|=
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|InputStream
name|is
init|=
name|m
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|m
operator|.
name|removeContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
block|}
comment|/**      * Wrapper stream responsible for flushing headers and committing outgoing      * HTTP-level response.      */
specifier|private
class|class
name|WrappedOutputStream
extends|extends
name|AbstractWrappedOutputStream
block|{
specifier|protected
name|HttpServletResponse
name|response
decl_stmt|;
specifier|private
name|Message
name|outMessage
decl_stmt|;
name|WrappedOutputStream
parameter_list|(
name|Message
name|m
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|outMessage
operator|=
name|m
expr_stmt|;
name|response
operator|=
name|resp
expr_stmt|;
block|}
comment|/**          * Perform any actions required on stream flush (freeze headers,          * reset output stream ... etc.)          */
specifier|protected
name|void
name|onFirstWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|OutputStream
name|responseStream
init|=
name|flushHeaders
argument_list|(
name|outMessage
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|responseStream
condition|)
block|{
name|wrappedStream
operator|=
name|responseStream
expr_stmt|;
block|}
block|}
comment|/**          * Perform any actions required on stream closure (handle response etc.)          */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|written
operator|&&
name|wrappedStream
operator|==
literal|null
condition|)
block|{
name|OutputStream
name|responseStream
init|=
name|flushHeaders
argument_list|(
name|outMessage
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|responseStream
condition|)
block|{
name|wrappedStream
operator|=
name|responseStream
expr_stmt|;
block|}
block|}
if|if
condition|(
name|wrappedStream
operator|!=
literal|null
condition|)
block|{
name|wrappedStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
comment|/*             try {                 //make sure the input stream is also closed in this                  //case so that any resources it may have is cleaned up                 Message m = outMessage.getExchange().getInMessage();                 if (m != null) {                     InputStream ins = m.getContent(InputStream.class);                     if (ins != null) {                         ins.close();                     }                 }             } catch (IOException ex) {                 //ignore             }             */
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
comment|//ignore until we close
comment|// or we'll force chunking and cause all kinds of network packets
block|}
block|}
specifier|protected
name|boolean
name|contextMatchOnExact
parameter_list|()
block|{
return|return
literal|"exact"
operator|.
name|equals
argument_list|(
name|contextMatchStrategy
argument_list|)
return|;
block|}
specifier|public
name|void
name|finalizeConfig
parameter_list|()
block|{     }
specifier|public
name|String
name|getBeanName
parameter_list|()
block|{
name|String
name|beanName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|endpointInfo
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|beanName
operator|=
name|endpointInfo
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".http-destination"
expr_stmt|;
block|}
return|return
name|beanName
return|;
block|}
comment|/*      * Implement multiplex via the address URL to avoid the need for ws-a.      * Requires contextMatchStrategy of stem.      *       * @see org.apache.cxf.transport.AbstractMultiplexDestination#getAddressWithId(java.lang.String)      */
specifier|public
name|EndpointReferenceType
name|getAddressWithId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|EndpointReferenceType
name|ref
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isMultiplexWithAddress
argument_list|()
condition|)
block|{
name|String
name|address
init|=
name|EndpointReferenceUtils
operator|.
name|getAddress
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|ref
operator|=
name|EndpointReferenceUtils
operator|.
name|duplicate
argument_list|(
name|reference
argument_list|)
expr_stmt|;
if|if
condition|(
name|address
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|EndpointReferenceUtils
operator|.
name|setAddress
argument_list|(
name|ref
argument_list|,
name|address
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|EndpointReferenceUtils
operator|.
name|setAddress
argument_list|(
name|ref
argument_list|,
name|address
operator|+
literal|"/"
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ref
operator|=
name|super
operator|.
name|getAddressWithId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|ref
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.cxf.transport.AbstractMultiplexDestination#getId(java.util.Map)      */
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|)
block|{
name|String
name|id
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isMultiplexWithAddress
argument_list|()
condition|)
block|{
name|String
name|address
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PATH_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|address
condition|)
block|{
name|int
name|afterLastSlashIndex
init|=
name|address
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|afterLastSlashIndex
operator|>
literal|0
operator|&&
name|afterLastSlashIndex
operator|<
name|address
operator|.
name|length
argument_list|()
condition|)
block|{
name|id
operator|=
name|address
operator|.
name|substring
argument_list|(
name|afterLastSlashIndex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"MISSING_PATH_INFO"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
name|super
operator|.
name|getId
argument_list|(
name|context
argument_list|)
return|;
block|}
return|return
name|id
return|;
block|}
specifier|public
name|String
name|getContextMatchStrategy
parameter_list|()
block|{
return|return
name|contextMatchStrategy
return|;
block|}
specifier|public
name|void
name|setContextMatchStrategy
parameter_list|(
name|String
name|contextMatchStrategy
parameter_list|)
block|{
name|this
operator|.
name|contextMatchStrategy
operator|=
name|contextMatchStrategy
expr_stmt|;
block|}
specifier|public
name|boolean
name|isFixedParameterOrder
parameter_list|()
block|{
return|return
name|fixedParameterOrder
return|;
block|}
specifier|public
name|void
name|setFixedParameterOrder
parameter_list|(
name|boolean
name|fixedParameterOrder
parameter_list|)
block|{
name|this
operator|.
name|fixedParameterOrder
operator|=
name|fixedParameterOrder
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMultiplexWithAddress
parameter_list|()
block|{
return|return
name|multiplexWithAddress
return|;
block|}
specifier|public
name|void
name|setMultiplexWithAddress
parameter_list|(
name|boolean
name|multiplexWithAddress
parameter_list|)
block|{
name|this
operator|.
name|multiplexWithAddress
operator|=
name|multiplexWithAddress
expr_stmt|;
block|}
specifier|public
name|HTTPServerPolicy
name|getServer
parameter_list|()
block|{
return|return
name|server
return|;
block|}
specifier|public
name|void
name|setServer
parameter_list|(
name|HTTPServerPolicy
name|server
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
specifier|public
name|void
name|assertMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|PolicyDataEngine
name|pde
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyDataEngine
operator|.
name|class
argument_list|)
decl_stmt|;
name|pde
operator|.
name|assertMessage
argument_list|(
name|message
argument_list|,
name|server
argument_list|,
operator|new
name|ServerPolicyCalculator
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|canAssert
parameter_list|(
name|QName
name|type
parameter_list|)
block|{
return|return
operator|new
name|ServerPolicyCalculator
argument_list|()
operator|.
name|getDataClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|void
name|releaseRegistry
parameter_list|()
block|{
name|registry
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|registry
operator|!=
literal|null
condition|)
block|{
name|registry
operator|.
name|removeDestination
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|releaseRegistry
argument_list|()
expr_stmt|;
block|}
block|}
name|super
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

