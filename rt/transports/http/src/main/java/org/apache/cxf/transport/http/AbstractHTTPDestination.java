begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|HttpHeaderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|AbstractWrappedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|AbstractDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|AbstractMultiplexDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ConduitInitiator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|policy
operator|.
name|PolicyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|SSLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPServerPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|Assertor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_comment
comment|/**  * Common base for HTTP Destination implementations.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractHTTPDestination
extends|extends
name|AbstractMultiplexDestination
implements|implements
name|Configurable
implements|,
name|Assertor
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_REQUEST
init|=
literal|"HTTP.REQUEST"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_RESPONSE
init|=
literal|"HTTP.RESPONSE"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_CONTEXT
init|=
literal|"HTTP.CONTEXT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROTOCOL_HEADERS_CONTENT_TYPE
init|=
name|Message
operator|.
name|CONTENT_TYPE
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractHTTPDestination
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|final
name|Bus
name|bus
decl_stmt|;
specifier|protected
specifier|final
name|ConduitInitiator
name|conduitInitiator
decl_stmt|;
comment|// Configuration values
specifier|protected
name|HTTPServerPolicy
name|server
decl_stmt|;
specifier|protected
name|String
name|contextMatchStrategy
init|=
literal|"stem"
decl_stmt|;
specifier|protected
name|boolean
name|fixedParameterOrder
decl_stmt|;
specifier|protected
name|boolean
name|multiplexWithAddress
decl_stmt|;
comment|/**      * Constructor      *       * @param b the associated Bus      * @param ci the associated conduit initiator      * @param ei the endpoint info of the destination       * @param dp true for adding the default port if it is missing      * @throws IOException      */
specifier|public
name|AbstractHTTPDestination
parameter_list|(
name|Bus
name|b
parameter_list|,
name|ConduitInitiator
name|ci
parameter_list|,
name|EndpointInfo
name|ei
parameter_list|,
name|boolean
name|dp
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|b
argument_list|,
name|getTargetReference
argument_list|(
name|getAddressValue
argument_list|(
name|ei
argument_list|,
name|dp
argument_list|)
argument_list|,
name|b
argument_list|)
argument_list|,
name|ei
argument_list|)
expr_stmt|;
name|bus
operator|=
name|b
expr_stmt|;
name|conduitInitiator
operator|=
name|ci
expr_stmt|;
name|initConfig
argument_list|()
expr_stmt|;
block|}
comment|/**      * Cache HTTP headers in message.      *       * @param message the current message      */
specifier|protected
name|void
name|setHeaders
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|requestHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|copyRequestHeaders
argument_list|(
name|message
argument_list|,
name|requestHeaders
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|requestHeaders
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestHeaders
operator|.
name|containsKey
argument_list|(
literal|"Authorization"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|authorizationLines
init|=
name|requestHeaders
operator|.
name|get
argument_list|(
literal|"Authorization"
argument_list|)
decl_stmt|;
name|String
name|credentials
init|=
name|authorizationLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|authType
init|=
name|credentials
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
literal|"Basic"
operator|.
name|equals
argument_list|(
name|authType
argument_list|)
condition|)
block|{
name|String
name|authEncoded
init|=
name|credentials
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
try|try
block|{
name|String
name|authDecoded
init|=
operator|new
name|String
argument_list|(
name|Base64Utility
operator|.
name|decode
argument_list|(
name|authEncoded
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|authInfo
index|[]
init|=
name|authDecoded
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|username
init|=
operator|(
name|authInfo
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
name|authInfo
index|[
literal|0
index|]
else|:
literal|""
decl_stmt|;
comment|// Below line for systems that blank out password after authentication;
comment|// see CXF-1495 for more info
name|String
name|password
init|=
operator|(
name|authInfo
operator|.
name|length
operator|>
literal|1
operator|)
condition|?
name|authInfo
index|[
literal|1
index|]
else|:
literal|""
decl_stmt|;
name|AuthorizationPolicy
name|policy
init|=
operator|new
name|AuthorizationPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setUserName
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|AuthorizationPolicy
operator|.
name|class
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Base64Exception
name|ex
parameter_list|)
block|{
comment|//ignore, we'll leave things alone.  They can try decoding it themselves
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Request Headers: "
operator|+
name|requestHeaders
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|updateResponseHeaders
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|responseHeaders
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseHeaders
operator|==
literal|null
condition|)
block|{
name|responseHeaders
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|responseHeaders
argument_list|)
expr_stmt|;
block|}
name|setPolicies
argument_list|(
name|responseHeaders
argument_list|)
expr_stmt|;
block|}
comment|/**       * @param message the message under consideration      * @return true iff the message has been marked as oneway      */
specifier|protected
specifier|final
name|boolean
name|isOneWay
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Exchange
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
return|return
name|ex
operator|==
literal|null
condition|?
literal|false
else|:
name|ex
operator|.
name|isOneWay
argument_list|()
return|;
block|}
comment|/**      * @return the associated conduit initiator      */
specifier|protected
name|ConduitInitiator
name|getConduitInitiator
parameter_list|()
block|{
return|return
name|conduitInitiator
return|;
block|}
comment|/**      * Copy the request headers into the message.      *       * @param message the current message      * @param headers the current set of headers      */
specifier|protected
name|void
name|copyRequestHeaders
parameter_list|(
name|Message
name|message
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|)
block|{
name|HttpServletRequest
name|req
init|=
operator|(
name|HttpServletRequest
operator|)
name|message
operator|.
name|get
argument_list|(
name|HTTP_REQUEST
argument_list|)
decl_stmt|;
comment|//TODO how to deal with the fields
for|for
control|(
name|Enumeration
name|e
init|=
name|req
operator|.
name|getHeaderNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|fname
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|mappedName
init|=
name|HttpHeaderHelper
operator|.
name|getHeaderKey
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
decl_stmt|;
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|mappedName
argument_list|)
condition|)
block|{
name|values
operator|=
name|headers
operator|.
name|get
argument_list|(
name|mappedName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|mappedName
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Enumeration
name|e2
init|=
name|req
operator|.
name|getHeaders
argument_list|(
name|fname
argument_list|)
init|;
name|e2
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|val
init|=
operator|(
name|String
operator|)
name|e2
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Copy the response headers into the response.      *       * @param message the current message      * @param headers the current set of headers      */
specifier|protected
name|void
name|copyResponseHeaders
parameter_list|(
name|Message
name|message
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|String
name|ct
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|String
name|enc
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ct
operator|&&
literal|null
operator|!=
name|enc
operator|&&
name|ct
operator|.
name|indexOf
argument_list|(
literal|"charset="
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|ct
operator|=
name|ct
operator|+
literal|"; charset="
operator|+
name|enc
expr_stmt|;
block|}
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|headers
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|headers
condition|)
block|{
if|if
condition|(
operator|!
name|headers
operator|.
name|containsKey
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
condition|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|ct
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|iter
init|=
name|headers
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|header
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|headerList
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|headers
operator|.
name|get
argument_list|(
name|header
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|headerList
control|)
block|{
name|response
operator|.
name|addHeader
argument_list|(
name|header
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|ct
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setupMessage
parameter_list|(
name|Message
name|inMessage
parameter_list|,
specifier|final
name|ServletContext
name|context
parameter_list|,
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|IOException
block|{
name|inMessage
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|req
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|HTTP_REQUEST
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|HTTP_RESPONSE
argument_list|,
name|resp
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|HTTP_CONTEXT
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
name|req
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|contextPath
init|=
name|req
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|contextPath
operator|==
literal|null
condition|)
block|{
name|contextPath
operator|=
literal|""
expr_stmt|;
block|}
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PATH_INFO
argument_list|,
name|contextPath
operator|+
name|req
operator|.
name|getPathInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// work around a bug with Jetty which results in the character
comment|// encoding not being trimmed correctly.
name|String
name|enc
init|=
name|req
operator|.
name|getCharacterEncoding
argument_list|()
decl_stmt|;
if|if
condition|(
name|enc
operator|!=
literal|null
operator|&&
name|enc
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|enc
operator|=
name|enc
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|enc
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|normalizedEncoding
init|=
name|HttpHeaderHelper
operator|.
name|mapCharset
argument_list|(
name|enc
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalizedEncoding
operator|==
literal|null
condition|)
block|{
name|String
name|m
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"INVALID_ENCODING_MSG"
argument_list|,
name|LOG
argument_list|,
name|enc
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|m
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|m
argument_list|)
throw|;
block|}
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENCODING
argument_list|,
name|normalizedEncoding
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|QUERY_STRING
argument_list|,
name|req
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|req
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|,
name|req
operator|.
name|getHeader
argument_list|(
literal|"Accept"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|basePath
init|=
name|getBasePath
argument_list|(
name|contextPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|basePath
argument_list|)
condition|)
block|{
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|BASE_PATH
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
block|}
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|FIXED_PARAMETER_ORDER
argument_list|,
name|isFixedParameterOrder
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ASYNC_POST_RESPONSE_DISPATCH
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
operator|new
name|SecurityContext
argument_list|()
block|{
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
name|req
operator|.
name|getUserPrincipal
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
return|return
name|req
operator|.
name|isUserInRole
argument_list|(
name|role
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setHeaders
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
name|SSLUtils
operator|.
name|propogateSecureSession
argument_list|(
name|req
argument_list|,
name|inMessage
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getBasePath
parameter_list|(
name|String
name|contextPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|endpointInfo
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
operator|new
name|URL
argument_list|(
name|endpointInfo
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|EndpointInfo
name|getAddressValue
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|)
block|{
return|return
name|getAddressValue
argument_list|(
name|ei
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|EndpointInfo
name|getAddressValue
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|boolean
name|dp
parameter_list|)
block|{
if|if
condition|(
name|dp
condition|)
block|{
name|String
name|eiAddress
init|=
name|ei
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|eiAddress
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|ServerSocket
name|s
init|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ei
operator|.
name|setAddress
argument_list|(
literal|"http://localhost:"
operator|+
name|s
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|ei
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// problem allocating a random port, go to the default one
name|ei
operator|.
name|setAddress
argument_list|(
literal|"http://localhost"
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|addr
init|=
name|StringUtils
operator|.
name|addDefaultPortIfMissing
argument_list|(
name|ei
operator|.
name|getAddress
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|!=
literal|null
condition|)
block|{
name|ei
operator|.
name|setAddress
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ei
return|;
block|}
comment|/**      * @param inMessage the incoming message      * @return the inbuilt backchannel      */
specifier|protected
name|Conduit
name|getInbuiltBackChannel
parameter_list|(
name|Message
name|inMessage
parameter_list|)
block|{
name|HttpServletResponse
name|response
init|=
operator|(
name|HttpServletResponse
operator|)
name|inMessage
operator|.
name|get
argument_list|(
name|HTTP_RESPONSE
argument_list|)
decl_stmt|;
return|return
operator|new
name|BackChannelConduit
argument_list|(
name|response
argument_list|)
return|;
block|}
comment|/**      * Mark message as a partial message.      *       * @param partialResponse the partial response message      * @param the decoupled target      * @return true iff partial responses are supported      */
specifier|protected
name|boolean
name|markPartialResponse
parameter_list|(
name|Message
name|partialResponse
parameter_list|,
name|EndpointReferenceType
name|decoupledTarget
parameter_list|)
block|{
comment|// setup the outbound message to for 202 Accepted
name|partialResponse
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_ACCEPTED
argument_list|)
expr_stmt|;
name|partialResponse
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|EndpointReferenceType
operator|.
name|class
argument_list|,
name|decoupledTarget
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|initConfig
parameter_list|()
block|{
name|PolicyEngine
name|engine
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyEngine
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// for a decoupled endpoint there is no service info
if|if
condition|(
literal|null
operator|!=
name|engine
operator|&&
name|engine
operator|.
name|isEnabled
argument_list|()
operator|&&
literal|null
operator|!=
name|endpointInfo
operator|.
name|getService
argument_list|()
condition|)
block|{
name|server
operator|=
name|PolicyUtils
operator|.
name|getServer
argument_list|(
name|engine
argument_list|,
name|endpointInfo
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|server
condition|)
block|{
name|server
operator|=
name|endpointInfo
operator|.
name|getTraversedExtensor
argument_list|(
operator|new
name|HTTPServerPolicy
argument_list|()
argument_list|,
name|HTTPServerPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|createMutableList
parameter_list|(
name|String
name|val
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|val
block|}
argument_list|)
argument_list|)
return|;
block|}
name|void
name|setPolicies
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|)
block|{
name|HTTPServerPolicy
name|policy
init|=
name|server
decl_stmt|;
if|if
condition|(
name|policy
operator|.
name|isSetCacheControl
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Cache-Control"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getCacheControl
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetContentLocation
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Content-Location"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getContentLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetContentEncoding
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Content-Encoding"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getContentEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetContentType
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|HttpHeaderHelper
operator|.
name|CONTENT_TYPE
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getContentType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetServerType
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Server"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getServerType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetHonorKeepAlive
argument_list|()
operator|&&
operator|!
name|policy
operator|.
name|isHonorKeepAlive
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Connection"
argument_list|,
name|createMutableList
argument_list|(
literal|"close"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * TODO - hook up these policies<xs:attribute name="SuppressClientSendErrors" type="xs:boolean" use="optional" default="false"><xs:attribute name="SuppressClientReceiveErrors" type="xs:boolean" use="optional" default="false">     */
block|}
specifier|protected
name|OutputStream
name|flushHeaders
parameter_list|(
name|Message
name|outMessage
parameter_list|)
throws|throws
name|IOException
block|{
name|updateResponseHeaders
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
name|Object
name|responseObj
init|=
name|outMessage
operator|.
name|get
argument_list|(
name|HTTP_RESPONSE
argument_list|)
decl_stmt|;
name|OutputStream
name|responseStream
init|=
literal|null
decl_stmt|;
name|boolean
name|oneWay
init|=
name|isOneWay
argument_list|(
name|outMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseObj
operator|instanceof
name|HttpServletResponse
condition|)
block|{
name|HttpServletResponse
name|response
init|=
operator|(
name|HttpServletResponse
operator|)
name|responseObj
decl_stmt|;
name|Integer
name|i
init|=
operator|(
name|Integer
operator|)
name|outMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
condition|)
block|{
name|int
name|status
init|=
name|i
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|HttpURLConnection
operator|.
name|HTTP_INTERNAL_ERROR
operator|==
name|i
condition|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|pHeaders
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
operator|)
name|outMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|pHeaders
operator|&&
name|pHeaders
operator|.
name|containsKey
argument_list|(
name|PROTOCOL_HEADERS_CONTENT_TYPE
argument_list|)
condition|)
block|{
name|pHeaders
operator|.
name|remove
argument_list|(
name|PROTOCOL_HEADERS_CONTENT_TYPE
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
name|copyResponseHeaders
argument_list|(
name|outMessage
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|responseStream
operator|=
name|response
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
if|if
condition|(
name|oneWay
condition|)
block|{
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|responseObj
condition|)
block|{
name|String
name|m
init|=
operator|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"UNEXPECTED_RESPONSE_TYPE_MSG"
argument_list|,
name|LOG
argument_list|,
name|responseObj
operator|.
name|getClass
argument_list|()
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|m
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|m
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|m
init|=
operator|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"NULL_RESPONSE_MSG"
argument_list|,
name|LOG
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|m
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|m
argument_list|)
throw|;
block|}
if|if
condition|(
name|oneWay
condition|)
block|{
name|outMessage
operator|.
name|remove
argument_list|(
name|HTTP_RESPONSE
argument_list|)
expr_stmt|;
block|}
return|return
name|responseStream
return|;
block|}
comment|/**      * Backchannel conduit.      */
specifier|public
class|class
name|BackChannelConduit
extends|extends
name|AbstractDestination
operator|.
name|AbstractBackChannelConduit
block|{
specifier|protected
name|HttpServletResponse
name|response
decl_stmt|;
name|BackChannelConduit
parameter_list|(
name|HttpServletResponse
name|resp
parameter_list|)
block|{
name|response
operator|=
name|resp
expr_stmt|;
block|}
comment|/**          * Send an outbound message, assumed to contain all the name-value          * mappings of the corresponding input message (if any).           *           * @param message the message to be sent.          */
specifier|public
name|void
name|prepare
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|message
operator|.
name|put
argument_list|(
name|HTTP_RESPONSE
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
operator|new
name|WrappedOutputStream
argument_list|(
name|message
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Wrapper stream responsible for flushing headers and committing outgoing      * HTTP-level response.      */
specifier|private
class|class
name|WrappedOutputStream
extends|extends
name|AbstractWrappedOutputStream
block|{
specifier|protected
name|HttpServletResponse
name|response
decl_stmt|;
specifier|private
name|Message
name|outMessage
decl_stmt|;
name|WrappedOutputStream
parameter_list|(
name|Message
name|m
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|outMessage
operator|=
name|m
expr_stmt|;
name|response
operator|=
name|resp
expr_stmt|;
block|}
comment|/**          * Perform any actions required on stream flush (freeze headers,          * reset output stream ... etc.)          */
specifier|protected
name|void
name|onFirstWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|OutputStream
name|responseStream
init|=
name|flushHeaders
argument_list|(
name|outMessage
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|responseStream
condition|)
block|{
name|wrappedStream
operator|=
name|responseStream
expr_stmt|;
block|}
block|}
comment|/**          * Perform any actions required on stream closure (handle response etc.)          */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|wrappedStream
operator|==
literal|null
condition|)
block|{
name|OutputStream
name|responseStream
init|=
name|flushHeaders
argument_list|(
name|outMessage
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|responseStream
condition|)
block|{
name|wrappedStream
operator|=
name|responseStream
expr_stmt|;
block|}
block|}
name|wrappedStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
comment|//ignore until we close
comment|// or we'll force chunking and cause all kinds of network packets
block|}
block|}
specifier|protected
name|boolean
name|contextMatchOnExact
parameter_list|()
block|{
return|return
literal|"exact"
operator|.
name|equals
argument_list|(
name|contextMatchStrategy
argument_list|)
return|;
block|}
specifier|public
name|String
name|getBeanName
parameter_list|()
block|{
name|String
name|beanName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|endpointInfo
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|beanName
operator|=
name|endpointInfo
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".http-destination"
expr_stmt|;
block|}
return|return
name|beanName
return|;
block|}
comment|/*      * Implement multiplex via the address URL to avoid the need for ws-a.      * Requires contextMatchStrategy of stem.      *       * @see org.apache.cxf.transport.AbstractMultiplexDestination#getAddressWithId(java.lang.String)      */
specifier|public
name|EndpointReferenceType
name|getAddressWithId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|EndpointReferenceType
name|ref
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isMultiplexWithAddress
argument_list|()
condition|)
block|{
name|String
name|address
init|=
name|EndpointReferenceUtils
operator|.
name|getAddress
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|ref
operator|=
name|EndpointReferenceUtils
operator|.
name|duplicate
argument_list|(
name|reference
argument_list|)
expr_stmt|;
if|if
condition|(
name|address
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|EndpointReferenceUtils
operator|.
name|setAddress
argument_list|(
name|ref
argument_list|,
name|address
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|EndpointReferenceUtils
operator|.
name|setAddress
argument_list|(
name|ref
argument_list|,
name|address
operator|+
literal|"/"
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ref
operator|=
name|super
operator|.
name|getAddressWithId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|ref
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.cxf.transport.AbstractMultiplexDestination#getId(java.util.Map)      */
specifier|public
name|String
name|getId
parameter_list|(
name|Map
name|context
parameter_list|)
block|{
name|String
name|id
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isMultiplexWithAddress
argument_list|()
condition|)
block|{
name|String
name|address
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PATH_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|address
condition|)
block|{
name|int
name|afterLastSlashIndex
init|=
name|address
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|afterLastSlashIndex
operator|>
literal|0
operator|&&
name|afterLastSlashIndex
operator|<
name|address
operator|.
name|length
argument_list|()
condition|)
block|{
name|id
operator|=
name|address
operator|.
name|substring
argument_list|(
name|afterLastSlashIndex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"MISSING_PATH_INFO"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
name|super
operator|.
name|getId
argument_list|(
name|context
argument_list|)
return|;
block|}
return|return
name|id
return|;
block|}
specifier|public
name|String
name|getContextMatchStrategy
parameter_list|()
block|{
return|return
name|contextMatchStrategy
return|;
block|}
specifier|public
name|void
name|setContextMatchStrategy
parameter_list|(
name|String
name|contextMatchStrategy
parameter_list|)
block|{
name|this
operator|.
name|contextMatchStrategy
operator|=
name|contextMatchStrategy
expr_stmt|;
block|}
specifier|public
name|boolean
name|isFixedParameterOrder
parameter_list|()
block|{
return|return
name|fixedParameterOrder
return|;
block|}
specifier|public
name|void
name|setFixedParameterOrder
parameter_list|(
name|boolean
name|fixedParameterOrder
parameter_list|)
block|{
name|this
operator|.
name|fixedParameterOrder
operator|=
name|fixedParameterOrder
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMultiplexWithAddress
parameter_list|()
block|{
return|return
name|multiplexWithAddress
return|;
block|}
specifier|public
name|void
name|setMultiplexWithAddress
parameter_list|(
name|boolean
name|multiplexWithAddress
parameter_list|)
block|{
name|this
operator|.
name|multiplexWithAddress
operator|=
name|multiplexWithAddress
expr_stmt|;
block|}
specifier|public
name|HTTPServerPolicy
name|getServer
parameter_list|()
block|{
return|return
name|server
return|;
block|}
specifier|public
name|void
name|setServer
parameter_list|(
name|HTTPServerPolicy
name|server
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
specifier|public
name|void
name|assertMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|PolicyUtils
operator|.
name|assertServerPolicy
argument_list|(
name|message
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|canAssert
parameter_list|(
name|QName
name|type
parameter_list|)
block|{
return|return
name|PolicyUtils
operator|.
name|HTTPSERVERPOLICY_ASSERTION_QNAME
operator|.
name|equals
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
end_class

end_unit

