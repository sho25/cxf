begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * This abstract class is extended by developers who need HTTP Basic Auth  * functionality on the client side. It supplies userid and password  * combinations to an HTTPConduit.  *<p>  * The HTTPConduit will make a call to getPreemptiveUserPass before  * an HTTP request is made. The HTTPConduit will call on   * getUserPassForRealm upon getting a 401 HTTP Response with a  * "WWW-Authenticate: Basic realm=????" header.   *<p>  * A HTTPConduit keeps a reference to this HttpBasicAuthSupplier for the life  * of the HTTPConduit, unless changed out by dynamic configuration.  * Therefore, an implementation of this HttpBasicAuthSupplier may maintain  * state for subsequent calls.   *<p>  * For instance, an implemenation may not provide a UserPass preemptively for   * a particular URL and decide to get the realm information from   * a 401 response in which the HTTPConduit will call getUserPassForReam for  * that URL. Then this implementation may provide the UserPass for this  * particular URL preemptively for subsequent calls to getPreemptiveUserPass.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|HttpBasicAuthSupplier
extends|extends
name|HttpAuthSupplier
block|{
comment|/**      * The default constructor assigns the class name as the LogicalName.      *      */
specifier|protected
name|HttpBasicAuthSupplier
parameter_list|()
block|{     }
comment|/**      * This constructor assigns the LogicalName of this HttpBasicAuthSupplier.      *       * @param name The Logical Name.      */
specifier|protected
name|HttpBasicAuthSupplier
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAuthorizationForRealm
parameter_list|(
name|HTTPConduit
name|conduit
parameter_list|,
name|URL
name|currentURL
parameter_list|,
name|Message
name|message
parameter_list|,
name|String
name|realm
parameter_list|,
name|String
name|fullHeader
parameter_list|)
block|{
name|UserPass
name|up
init|=
name|getUserPassForRealm
argument_list|(
name|conduit
operator|.
name|getConduitName
argument_list|()
argument_list|,
name|currentURL
argument_list|,
name|message
argument_list|,
name|realm
argument_list|)
decl_stmt|;
if|if
condition|(
name|up
operator|!=
literal|null
condition|)
block|{
name|String
name|key
init|=
name|up
operator|.
name|getUserid
argument_list|()
operator|+
literal|":"
operator|+
name|up
operator|.
name|getPassword
argument_list|()
decl_stmt|;
return|return
literal|"Basic "
operator|+
name|Base64Utility
operator|.
name|encode
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPreemptiveAuthorization
parameter_list|(
name|HTTPConduit
name|conduit
parameter_list|,
name|URL
name|currentURL
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|UserPass
name|up
init|=
name|getPreemptiveUserPass
argument_list|(
name|conduit
operator|.
name|getConduitName
argument_list|()
argument_list|,
name|currentURL
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|up
operator|!=
literal|null
condition|)
block|{
name|String
name|key
init|=
name|up
operator|.
name|getUserid
argument_list|()
operator|+
literal|":"
operator|+
name|up
operator|.
name|getPassword
argument_list|()
decl_stmt|;
return|return
literal|"Basic "
operator|+
name|Base64Utility
operator|.
name|encode
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * This class is used to return the values of the       * userid and password used in the HTTP Authorization      * Header.       */
specifier|public
specifier|static
specifier|final
class|class
name|UserPass
block|{
specifier|private
specifier|final
name|String
name|userid
decl_stmt|;
specifier|private
specifier|final
name|String
name|password
decl_stmt|;
comment|/**          * This constructor forms the userid and password pair for           * the HTTP Authorization header.          *           * @param user The userid that will be returned from getUserid().          *             This argument must not contain a colon (":"). If          *             it does, it will throw an IllegalArgumentException.          *                       * @param pass The password that will be returned from getPassword().          */
name|UserPass
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|pass
parameter_list|)
block|{
if|if
condition|(
name|user
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The argument \"user\" cannot contain ':'."
argument_list|)
throw|;
block|}
name|userid
operator|=
name|user
expr_stmt|;
name|password
operator|=
name|pass
expr_stmt|;
block|}
comment|/**          * This method returns the userid.          */
specifier|public
name|String
name|getUserid
parameter_list|()
block|{
return|return
name|userid
return|;
block|}
comment|/**          * This method returns the password.          */
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
block|}
comment|/**      * This method is used by extensions of this class to create      * a UserPass to return.      * @param userid   The userid that will be returned from getUserid().      *                 This argument must not contain a colon (":"). If      *                 it does, it will throw an IllegalArgumentException.      * @param password The password that will be returned from getPassword().      * @return      */
specifier|protected
name|UserPass
name|createUserPass
parameter_list|(
specifier|final
name|String
name|userid
parameter_list|,
specifier|final
name|String
name|password
parameter_list|)
block|{
return|return
operator|new
name|UserPass
argument_list|(
name|userid
argument_list|,
name|password
argument_list|)
return|;
block|}
comment|/**      * The HTTPConduit makes a call to this method before connecting      * to the server behind a particular URL. If this implementation does not       * have a UserPass for this URL, it should return null.      *       * @param conduitName The HTTPConduit making the call.      * @param currentURL  The URL to which the request is to be made.      * @param message     The CXF Message.      *       * @return This method returns null if no UserPass is available.      */
specifier|public
specifier|abstract
name|UserPass
name|getPreemptiveUserPass
parameter_list|(
name|String
name|conduitName
parameter_list|,
name|URL
name|currentURL
parameter_list|,
name|Message
name|message
parameter_list|)
function_decl|;
comment|/**      * The HTTPConduit makes a call to this method if it      * receives a 401 response to a particular URL for      * a given message. The realm information is taken      * from the "WWW-Authenticate: Basic realm=?????"      * header. The current message may be retransmitted      * if this call returns a UserPass. The current message will      * fail with a 401 if null is returned. If no UserPass is available      * for this particular URL, realm, and message, then null      * should be returned.      *       * @param conduitName The name of the conduit making the call.      * @param currentURL  The current URL from which the reponse came.      * @param message     The CXF Message.      * @param realm       The realm extraced from the basic auth header.      * @return      */
specifier|public
specifier|abstract
name|UserPass
name|getUserPassForRealm
parameter_list|(
name|String
name|conduitName
parameter_list|,
name|URL
name|currentURL
parameter_list|,
name|Message
name|message
parameter_list|,
name|String
name|realm
parameter_list|)
function_decl|;
block|}
end_class

end_unit

