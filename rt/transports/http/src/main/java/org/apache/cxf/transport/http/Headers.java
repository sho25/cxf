begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|HttpHeaderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPClientPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPServerPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_class
specifier|public
class|class
name|Headers
block|{
comment|/**      *  This constant is the Message(Map) key for the HttpURLConnection that      *  is used to get the response.      */
specifier|public
specifier|static
specifier|final
name|String
name|KEY_HTTP_CONNECTION
init|=
literal|"http.connection"
decl_stmt|;
comment|/**      * Each header value is added as a separate HTTP header, example, given A header with 'a' and 'b'      * values, two A headers will be added as opposed to a single A header with the "a,b" value.      */
specifier|public
specifier|static
specifier|final
name|String
name|ADD_HEADERS_PROPERTY
init|=
literal|"org.apache.cxf.http.add-headers"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROTOCOL_HEADERS_CONTENT_TYPE
init|=
name|Message
operator|.
name|CONTENT_TYPE
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_HEADERS_SETCOOKIE
init|=
literal|"Set-Cookie"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_HEADERS_LINK
init|=
literal|"Link"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EMPTY_REQUEST_PROPERTY
init|=
literal|"org.apache.cxf.empty.request"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SET_EMPTY_REQUEST_CT_PROPERTY
init|=
literal|"set.content.type.for.empty.request"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TimeZone
name|TIME_ZONE_GMT
init|=
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"GMT"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|Headers
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|SENSITIVE_HEADERS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Proxy-Authorization"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|SENSITIVE_HEADER_MARKER
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"***"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALLOW_LOGGING_SENSITIVE_HEADERS
init|=
literal|"allow.logging.sensitive.headers"
decl_stmt|;
comment|/**      * Known HTTP headers whose values have to be represented as individual HTTP headers      */
specifier|private
specifier|static
specifier|final
name|String
name|USER_AGENT
init|=
name|initUserAgent
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Message
name|message
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
decl_stmt|;
specifier|public
name|Headers
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|headers
operator|=
name|getSetProtocolHeaders
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Headers
parameter_list|()
block|{
name|this
operator|.
name|headers
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
expr_stmt|;
name|this
operator|.
name|message
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getUserAgent
parameter_list|()
block|{
return|return
name|USER_AGENT
return|;
block|}
specifier|private
specifier|static
name|String
name|initUserAgent
parameter_list|()
block|{
name|String
name|name
init|=
name|Version
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"Apache CXF"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
literal|"Apache-CXF"
expr_stmt|;
block|}
name|String
name|version
init|=
name|Version
operator|.
name|getCurrentVersion
argument_list|()
decl_stmt|;
return|return
name|name
operator|+
literal|"/"
operator|+
name|version
return|;
block|}
comment|/**      * Returns a traceable string representation of the passed-in headers map.      * The value for any keys in the map that are in the<code>SENSITIVE_HEADERS</code>      * array will be filtered out of the returned string.      * Note that this method is expensive as it will copy the map (except for the      * filtered keys), so it should be used sparingly - i.e. only when debug is      * enabled.      */
specifier|static
name|String
name|toString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|headers
parameter_list|,
name|boolean
name|logSensitiveHeaders
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|filteredHeaders
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
decl_stmt|;
name|filteredHeaders
operator|.
name|putAll
argument_list|(
name|headers
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|logSensitiveHeaders
condition|)
block|{
for|for
control|(
name|String
name|filteredKey
range|:
name|SENSITIVE_HEADERS
control|)
block|{
name|filteredHeaders
operator|.
name|put
argument_list|(
name|filteredKey
argument_list|,
name|SENSITIVE_HEADER_MARKER
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filteredHeaders
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headerMap
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
comment|/**      * Write cookie header from given session cookies      *      * @param sessionCookies      */
specifier|public
name|void
name|writeSessionCookies
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Cookie
argument_list|>
name|sessionCookies
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cookies
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|headers
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|HttpHeaderHelper
operator|.
name|COOKIE
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|cookies
operator|=
name|headers
operator|.
name|remove
argument_list|(
name|s
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|cookies
operator|==
literal|null
condition|)
block|{
name|cookies
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cookies
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cookies
argument_list|)
expr_stmt|;
block|}
name|headers
operator|.
name|put
argument_list|(
name|HttpHeaderHelper
operator|.
name|COOKIE
argument_list|,
name|cookies
argument_list|)
expr_stmt|;
for|for
control|(
name|Cookie
name|c
range|:
name|sessionCookies
operator|.
name|values
argument_list|()
control|)
block|{
name|cookies
operator|.
name|add
argument_list|(
name|c
operator|.
name|requestCookieHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This call places HTTP Header strings into the headers that are relevant      * to the ClientPolicy that is set on this conduit by configuration.      *      * REVISIT: A cookie is set statically from configuration?      */
name|void
name|setFromClientPolicy
parameter_list|(
name|HTTPClientPolicy
name|policy
parameter_list|)
block|{
if|if
condition|(
name|policy
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetCacheControl
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Cache-Control"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getCacheControl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetHost
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Host"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetConnection
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Connection"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getConnection
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetAccept
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Accept"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getAccept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|headers
operator|.
name|containsKey
argument_list|(
literal|"Accept"
argument_list|)
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Accept"
argument_list|,
name|createMutableList
argument_list|(
literal|"*/*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetAcceptEncoding
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Accept-Encoding"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getAcceptEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetAcceptLanguage
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Accept-Language"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getAcceptLanguage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetContentType
argument_list|()
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|policy
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetCookie
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Cookie"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getCookie
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetBrowserType
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"User-Agent"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getBrowserType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetReferer
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Referer"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getReferer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|setFromServerPolicy
parameter_list|(
name|HTTPServerPolicy
name|policy
parameter_list|)
block|{
if|if
condition|(
name|policy
operator|.
name|isSetCacheControl
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Cache-Control"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getCacheControl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetContentLocation
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Content-Location"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getContentLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetContentEncoding
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Content-Encoding"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getContentEncoding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetContentType
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|HttpHeaderHelper
operator|.
name|CONTENT_TYPE
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getContentType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetServerType
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Server"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getServerType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|policy
operator|.
name|isSetHonorKeepAlive
argument_list|()
operator|&&
operator|!
name|policy
operator|.
name|isHonorKeepAlive
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Connection"
argument_list|,
name|createMutableList
argument_list|(
literal|"close"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|policy
operator|.
name|isSetKeepAliveParameters
argument_list|()
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Keep-Alive"
argument_list|,
name|createMutableList
argument_list|(
name|policy
operator|.
name|getKeepAliveParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * TODO - hook up these policies<xs:attribute name="SuppressClientSendErrors" type="xs:boolean" use="optional" default="false"><xs:attribute name="SuppressClientReceiveErrors" type="xs:boolean" use="optional" default="false">     */
block|}
specifier|public
name|void
name|removeAuthorizationHeaders
parameter_list|()
block|{
name|headers
operator|.
name|remove
argument_list|(
literal|"Authorization"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|remove
argument_list|(
literal|"Proxy-Authorization"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setAuthorization
parameter_list|(
name|String
name|authorization
parameter_list|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Authorization"
argument_list|,
name|createMutableList
argument_list|(
name|authorization
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setProxyAuthorization
parameter_list|(
name|String
name|authorization
parameter_list|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"Proxy-Authorization"
argument_list|,
name|createMutableList
argument_list|(
name|authorization
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * While extracting the Message.PROTOCOL_HEADERS property from the Message,      * this call ensures that the Message.PROTOCOL_HEADERS property is      * set on the Message. If it is not set, an empty map is placed there, and      * then returned.      *      * @param message The outbound message      * @return The PROTOCOL_HEADERS map      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getSetProtocolHeaders
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|headers
condition|)
block|{
name|headers
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headers
operator|instanceof
name|HashMap
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers2
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
decl_stmt|;
name|headers2
operator|.
name|putAll
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|headers
operator|=
name|headers2
expr_stmt|;
block|}
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|headers
return|;
block|}
specifier|public
name|void
name|readFromConnection
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|origHeaders
init|=
name|connection
operator|.
name|getHeaderFields
argument_list|()
decl_stmt|;
name|headers
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|origHeaders
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|key
init|=
name|HttpHeaderHelper
operator|.
name|getHeaderKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|old
init|=
name|headers
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nl
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|old
operator|.
name|size
argument_list|()
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|nl
operator|.
name|addAll
argument_list|(
name|old
argument_list|)
expr_stmt|;
name|nl
operator|.
name|addAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|nl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|headers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|createMutableList
parameter_list|(
name|String
name|val
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|val
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This procedure logs the PROTOCOL_HEADERS from the      * Message at the specified logging level.      *      * @param logger     The Logger to log to.      * @param level   The Logging Level.      * @param headers The Message protocol headers.      */
specifier|static
name|void
name|logProtocolHeaders
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|Level
name|level
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|headersMap
parameter_list|,
name|boolean
name|logSensitiveHeaders
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|headersMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|boolean
name|sensitive
init|=
operator|!
name|logSensitiveHeaders
operator|&&
name|SENSITIVE_HEADERS
operator|.
name|contains
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|headerList
init|=
name|sensitive
condition|?
name|SENSITIVE_HEADER_MARKER
else|:
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|headerList
control|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|level
argument_list|,
name|key
operator|+
literal|": "
operator|+
operator|(
name|value
operator|==
literal|null
condition|?
literal|"<null>"
else|:
name|value
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Set content type and protocol headers (Message.PROTOCOL_HEADERS) headers into the URL      * connection.      * Note, this does not mean they immediately get written to the output      * stream or the wire. They just just get set on the HTTP request.      *      * @param connection      * @throws IOException      */
specifier|public
name|void
name|setProtocolHeadersInConnection
parameter_list|(
name|HttpURLConnection
name|connection
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If no Content-Type is set for empty requests then HttpUrlConnection:
comment|// - sets a form Content-Type for empty POST
comment|// - replaces custom Accept value with */* if HTTP proxy is used
name|boolean
name|contentTypeSet
init|=
name|headers
operator|.
name|containsKey
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|contentTypeSet
condition|)
block|{
comment|// if CT is not set then assume it has to be set by default
name|boolean
name|dropContentType
init|=
literal|false
decl_stmt|;
name|boolean
name|getRequest
init|=
literal|"GET"
operator|.
name|equals
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|emptyRequest
init|=
name|getRequest
operator|||
name|PropertyUtils
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|EMPTY_REQUEST_PROPERTY
argument_list|)
argument_list|)
decl_stmt|;
comment|// If it is an empty request (without a request body) then check further if CT still needs be set
if|if
condition|(
name|emptyRequest
condition|)
block|{
name|Object
name|setCtForEmptyRequestProp
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SET_EMPTY_REQUEST_CT_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|setCtForEmptyRequestProp
operator|!=
literal|null
condition|)
block|{
comment|// If SET_EMPTY_REQUEST_CT_PROPERTY is set then do as a user prefers.
comment|// CT will be dropped if setting CT for empty requests was explicitly disabled
name|dropContentType
operator|=
name|PropertyUtils
operator|.
name|isFalse
argument_list|(
name|setCtForEmptyRequestProp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getRequest
condition|)
block|{
comment|// otherwise if it is GET then just drop it
name|dropContentType
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|dropContentType
condition|)
block|{
name|String
name|ct
init|=
name|emptyRequest
operator|&&
operator|!
name|contentTypeSet
condition|?
literal|"*/*"
else|:
name|determineContentType
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestProperty
argument_list|(
name|HttpHeaderHelper
operator|.
name|CONTENT_TYPE
argument_list|,
name|ct
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|connection
operator|.
name|setRequestProperty
argument_list|(
name|HttpHeaderHelper
operator|.
name|CONTENT_TYPE
argument_list|,
name|determineContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transferProtocolHeadersToURLConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|theHeaders
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|headers
argument_list|)
decl_stmt|;
name|logProtocolHeaders
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|theHeaders
argument_list|,
name|logSensitiveHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|determineContentType
parameter_list|()
block|{
name|String
name|ct
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|ctList
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|headers
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctList
operator|!=
literal|null
operator|&&
name|ctList
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|ctList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ct
operator|=
name|ctList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ct
operator|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
expr_stmt|;
block|}
name|String
name|enc
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ct
condition|)
block|{
if|if
condition|(
name|enc
operator|!=
literal|null
operator|&&
name|ct
operator|.
name|indexOf
argument_list|(
literal|"charset="
argument_list|)
operator|==
operator|-
literal|1
operator|&&
operator|!
name|ct
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"multipart/related"
argument_list|)
condition|)
block|{
name|ct
operator|=
name|ct
operator|+
literal|"; charset="
operator|+
name|enc
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|enc
operator|!=
literal|null
condition|)
block|{
name|ct
operator|=
literal|"text/xml; charset="
operator|+
name|enc
expr_stmt|;
block|}
else|else
block|{
name|ct
operator|=
literal|"text/xml"
expr_stmt|;
block|}
return|return
name|ct
return|;
block|}
comment|/**      * This procedure sets the URLConnection request properties      * from the PROTOCOL_HEADERS in the message.      */
specifier|private
name|void
name|transferProtocolHeadersToURLConnection
parameter_list|(
name|URLConnection
name|connection
parameter_list|)
block|{
name|boolean
name|addHeaders
init|=
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|ADD_HEADERS_PROPERTY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|header
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|HttpHeaderHelper
operator|.
name|CONTENT_TYPE
operator|.
name|equalsIgnoreCase
argument_list|(
name|header
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|headerList
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|addHeaders
operator|||
name|HttpHeaderHelper
operator|.
name|COOKIE
operator|.
name|equalsIgnoreCase
argument_list|(
name|header
argument_list|)
condition|)
block|{
name|headerList
operator|.
name|forEach
argument_list|(
name|s
lambda|->
name|connection
operator|.
name|addRequestProperty
argument_list|(
name|header
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|.
name|setRequestProperty
argument_list|(
name|header
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|headerList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// make sure we don't add more than one User-Agent header
if|if
condition|(
name|connection
operator|.
name|getRequestProperty
argument_list|(
literal|"User-Agent"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|connection
operator|.
name|addRequestProperty
argument_list|(
literal|"User-Agent"
argument_list|,
name|USER_AGENT
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Copy the request headers into the message.      *      * @param message the current message      * @param headers the current set of headers      */
specifier|protected
name|void
name|copyFromRequest
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
comment|//TODO how to deal with the fields
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|req
operator|.
name|getHeaderNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|fname
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|mappedName
init|=
name|HttpHeaderHelper
operator|.
name|getHeaderKey
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|headers
operator|.
name|get
argument_list|(
name|mappedName
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|mappedName
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e2
init|=
name|req
operator|.
name|getHeaders
argument_list|(
name|fname
argument_list|)
init|;
name|e2
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|val
init|=
name|e2
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"Accept"
operator|.
name|equals
argument_list|(
name|mappedName
argument_list|)
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//ensure we collapse Accept into first line
name|String
name|firstAccept
init|=
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|firstAccept
operator|=
name|firstAccept
operator|+
literal|", "
operator|+
name|val
expr_stmt|;
name|values
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|firstAccept
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|headers
operator|.
name|containsKey
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|req
operator|.
name|getContentType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|theHeaders
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|headers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Request Headers: "
operator|+
name|toString
argument_list|(
name|theHeaders
argument_list|,
name|logSensitiveHeaders
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|logSensitiveHeaders
parameter_list|()
block|{
comment|// Not allowed by default
return|return
name|PropertyUtils
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|getContextualProperty
argument_list|(
name|ALLOW_LOGGING_SENSITIVE_HEADERS
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|getContentTypeFromMessage
parameter_list|()
block|{
specifier|final
name|String
name|ct
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|enc
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|ENCODING
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ct
operator|&&
literal|null
operator|!=
name|enc
operator|&&
name|ct
operator|.
name|indexOf
argument_list|(
literal|"charset="
argument_list|)
operator|==
operator|-
literal|1
operator|&&
operator|!
name|ct
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"multipart/related"
argument_list|)
condition|)
block|{
return|return
name|ct
operator|+
literal|"; charset="
operator|+
name|enc
return|;
block|}
return|return
name|ct
return|;
block|}
comment|// Assumes that response body is not available only
comment|// if Content-Length is available and set to 0
specifier|private
name|boolean
name|isResponseBodyAvailable
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ctLen
init|=
name|headers
operator|.
name|get
argument_list|(
literal|"Content-Length"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctLen
operator|==
literal|null
operator|||
name|ctLen
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|ctLen
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|isSingleHeader
parameter_list|(
name|String
name|header
parameter_list|)
block|{
return|return
name|HTTP_HEADERS_SETCOOKIE
operator|.
name|equalsIgnoreCase
argument_list|(
name|header
argument_list|)
operator|||
name|HTTP_HEADERS_LINK
operator|.
name|equalsIgnoreCase
argument_list|(
name|header
argument_list|)
return|;
block|}
comment|/**      * Copy the response headers into the response.      *      * @param message the current message      * @param headers the current set of headers      */
specifier|protected
name|void
name|copyToResponse
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|String
name|contentType
init|=
name|getContentTypeFromMessage
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|headers
operator|.
name|containsKey
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
operator|&&
name|contentType
operator|!=
literal|null
operator|&&
name|isResponseBodyAvailable
argument_list|()
condition|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
name|boolean
name|addHeaders
init|=
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|ADD_HEADERS_PROPERTY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|header
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|headerList
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|addHeaders
operator|||
name|isSingleHeader
argument_list|(
name|header
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|headerList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|headerObject
init|=
name|headerList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerObject
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|addHeader
argument_list|(
name|header
argument_list|,
name|headerObjectToString
argument_list|(
name|headerObject
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|headerList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|headerObject
init|=
name|headerList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerObject
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|headerObjectToString
argument_list|(
name|headerObject
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|headerList
operator|.
name|size
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|setHeader
argument_list|(
name|header
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|headerObjectToString
parameter_list|(
name|Object
name|headerObject
parameter_list|)
block|{
if|if
condition|(
name|headerObject
operator|.
name|getClass
argument_list|()
operator|==
name|String
operator|.
name|class
condition|)
block|{
comment|// Most likely
return|return
name|headerObject
operator|.
name|toString
argument_list|()
return|;
block|}
name|String
name|headerString
decl_stmt|;
if|if
condition|(
name|headerObject
operator|instanceof
name|Date
condition|)
block|{
name|headerString
operator|=
name|toHttpDate
argument_list|(
operator|(
name|Date
operator|)
name|headerObject
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerObject
operator|instanceof
name|Locale
condition|)
block|{
name|headerString
operator|=
name|toHttpLanguage
argument_list|(
operator|(
name|Locale
operator|)
name|headerObject
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|headerString
operator|=
name|headerObject
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|headerString
return|;
block|}
name|void
name|removeContentType
parameter_list|()
block|{
name|headers
operator|.
name|remove
argument_list|(
name|PROTOCOL_HEADERS_CONTENT_TYPE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getAuthorization
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|authorizationLines
init|=
name|headers
operator|.
name|get
argument_list|(
literal|"Authorization"
argument_list|)
decl_stmt|;
if|if
condition|(
name|authorizationLines
operator|!=
literal|null
operator|&&
operator|!
name|authorizationLines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|authorizationLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|SimpleDateFormat
name|getHttpDateFormat
parameter_list|()
block|{
name|SimpleDateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, dd MMM yyyy HH:mm:ss zzz"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|dateFormat
operator|.
name|setTimeZone
argument_list|(
name|TIME_ZONE_GMT
argument_list|)
expr_stmt|;
return|return
name|dateFormat
return|;
block|}
specifier|public
specifier|static
name|String
name|toHttpDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|SimpleDateFormat
name|format
init|=
name|getHttpDateFormat
argument_list|()
decl_stmt|;
return|return
name|format
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|toHttpLanguage
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
return|return
name|locale
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|'-'
argument_list|)
return|;
block|}
block|}
end_class

end_unit

