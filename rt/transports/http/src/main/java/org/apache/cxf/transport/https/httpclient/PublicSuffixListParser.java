begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/*  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|httpclient
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Parses the list from<a href="http://publicsuffix.org/">publicsuffix.org</a>  * and configures a PublicSuffixFilter.  *  * Copied from httpclient  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PublicSuffixListParser
block|{
specifier|public
name|PublicSuffixListParser
parameter_list|()
block|{     }
comment|/**      * Parses the public suffix list format.      *<p>      * When creating the reader from the file, make sure to use the correct encoding      * (the original list is in UTF-8).      *      * @param reader the data reader. The caller is responsible for closing the reader.      * @throws java.io.IOException on error while reading from list      */
specifier|public
name|PublicSuffixList
name|parse
parameter_list|(
specifier|final
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
continue|continue;
comment|//entire lines can also be commented using //
block|}
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// A leading dot is optional
block|}
comment|// An exclamation mark (!) at the start of a rule marks an exception to a previous wildcard rule
specifier|final
name|boolean
name|isException
init|=
name|line
operator|.
name|startsWith
argument_list|(
literal|"!"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isException
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isException
condition|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rules
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|PublicSuffixList
argument_list|(
name|DomainType
operator|.
name|UNKNOWN
argument_list|,
name|rules
argument_list|,
name|exceptions
argument_list|)
return|;
block|}
comment|/**      * Parses the public suffix list format by domain type (currently supported ICANN and PRIVATE).      *<p>      * When creating the reader from the file, make sure to use the correct encoding      * (the original list is in UTF-8).      *      * @param reader the data reader. The caller is responsible for closing the reader.      * @throws java.io.IOException on error while reading from list      *      * @since 4.5      */
specifier|public
name|List
argument_list|<
name|PublicSuffixList
argument_list|>
name|parseByType
parameter_list|(
specifier|final
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|PublicSuffixList
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|DomainType
name|domainType
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rules
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|exceptions
init|=
literal|null
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|r
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
if|if
condition|(
name|domainType
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
literal|"===BEGIN ICANN DOMAINS==="
argument_list|)
condition|)
block|{
name|domainType
operator|=
name|DomainType
operator|.
name|ICANN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
literal|"===BEGIN PRIVATE DOMAINS==="
argument_list|)
condition|)
block|{
name|domainType
operator|=
name|DomainType
operator|.
name|PRIVATE
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
literal|"===END ICANN DOMAINS==="
argument_list|)
operator|||
name|line
operator|.
name|contains
argument_list|(
literal|"===END PRIVATE DOMAINS==="
argument_list|)
condition|)
block|{
if|if
condition|(
name|rules
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|PublicSuffixList
argument_list|(
name|domainType
argument_list|,
name|rules
argument_list|,
name|exceptions
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|domainType
operator|=
literal|null
expr_stmt|;
name|rules
operator|=
literal|null
expr_stmt|;
name|exceptions
operator|=
literal|null
expr_stmt|;
block|}
block|}
continue|continue;
comment|//entire lines can also be commented using //
block|}
if|if
condition|(
name|domainType
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// A leading dot is optional
block|}
comment|// An exclamation mark (!) at the start of a rule marks an exception to a previous wildcard rule
specifier|final
name|boolean
name|isException
init|=
name|line
operator|.
name|startsWith
argument_list|(
literal|"!"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isException
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isException
condition|)
block|{
if|if
condition|(
name|exceptions
operator|==
literal|null
condition|)
block|{
name|exceptions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|exceptions
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|rules
operator|==
literal|null
condition|)
block|{
name|rules
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|rules
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

