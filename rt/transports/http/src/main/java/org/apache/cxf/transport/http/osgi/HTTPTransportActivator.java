begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSClientParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|ProxyAuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|HTTPConduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|HTTPConduitConfigurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|ConnectionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPClientPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|ProxyServerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ManagedServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|HTTPTransportActivator
implements|implements
name|BundleActivator
implements|,
name|ManagedServiceFactory
implements|,
name|HTTPConduitConfigurer
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FACTORY_PID
init|=
literal|"org.apache.cxf.http.conduits"
decl_stmt|;
name|ServiceTracker
name|configAdminTracker
decl_stmt|;
name|ServiceRegistration
name|reg
decl_stmt|;
name|ServiceRegistration
name|reg2
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|props
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Matcher
argument_list|,
name|String
argument_list|>
name|matchers
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|Matcher
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|servProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|servProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
name|FACTORY_PID
argument_list|)
expr_stmt|;
name|reg2
operator|=
name|context
operator|.
name|registerService
argument_list|(
name|ManagedServiceFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|this
argument_list|,
name|servProps
argument_list|)
expr_stmt|;
name|servProps
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|servProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"org.apache.cxf.http.conduit-configurer"
argument_list|)
expr_stmt|;
name|reg
operator|=
name|context
operator|.
name|registerService
argument_list|(
name|HTTPConduitConfigurer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|this
argument_list|,
name|servProps
argument_list|)
expr_stmt|;
name|configAdminTracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|context
argument_list|,
name|ConfigurationAdmin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|configAdminTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|reg2
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|configAdminTracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|FACTORY_PID
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|updated
parameter_list|(
name|String
name|pid
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Dictionary
name|properties
parameter_list|)
throws|throws
name|ConfigurationException
block|{
if|if
condition|(
name|pid
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|url
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|pid
argument_list|,
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|Matcher
name|matcher
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|url
argument_list|)
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|matchers
init|)
block|{
name|matchers
operator|.
name|put
argument_list|(
name|matcher
argument_list|,
name|pid
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleted
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Dictionary
name|d
init|=
name|props
operator|.
name|remove
argument_list|(
name|pid
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|String
name|url
init|=
operator|(
name|String
operator|)
name|d
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|d
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|remove
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|matchers
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Matcher
argument_list|,
name|String
argument_list|>
name|ent
range|:
name|matchers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|pid
argument_list|)
condition|)
block|{
name|matchers
operator|.
name|remove
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|address
parameter_list|,
name|HTTPConduit
name|c
parameter_list|)
block|{
name|String
name|pid
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|matchers
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Matcher
argument_list|,
name|String
argument_list|>
name|ent
range|:
name|matchers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Matcher
name|m
init|=
name|ent
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|m
operator|.
name|reset
argument_list|(
name|address
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|pid
operator|=
name|ent
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|d
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|d
operator|=
name|props
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|apply
argument_list|(
name|d
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|address
operator|!=
literal|null
operator|&&
name|props
operator|.
name|get
argument_list|(
name|address
argument_list|)
operator|!=
name|d
condition|)
block|{
name|apply
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|address
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pid
operator|!=
literal|null
operator|&&
name|props
operator|.
name|get
argument_list|(
name|pid
argument_list|)
operator|!=
name|d
condition|)
block|{
name|apply
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|pid
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|apply
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|d
parameter_list|,
name|HTTPConduit
name|c
parameter_list|)
block|{
name|applyClientPolicies
argument_list|(
name|d
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|applyAuthorization
argument_list|(
name|d
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|applyProxyAuthorization
argument_list|(
name|d
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|applyTlsClientParameters
argument_list|(
name|d
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|applyTlsClientParameters
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|d
parameter_list|,
name|HTTPConduit
name|c
parameter_list|)
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|d
operator|.
name|keys
argument_list|()
decl_stmt|;
name|TLSClientParameters
name|p
init|=
name|c
operator|.
name|getTlsClientParameters
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|k
init|=
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"tlsClientParameters."
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|TLSClientParameters
argument_list|()
expr_stmt|;
name|c
operator|.
name|setTlsClientParameters
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|String
name|v
init|=
name|d
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|k
operator|=
name|k
operator|.
name|substring
argument_list|(
literal|"tlsClientParameters."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|v
argument_list|)
condition|)
block|{
comment|//
block|}
comment|//TODO - map properties into tls information
block|}
block|}
block|}
specifier|private
name|void
name|applyProxyAuthorization
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|d
parameter_list|,
name|HTTPConduit
name|c
parameter_list|)
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|d
operator|.
name|keys
argument_list|()
decl_stmt|;
name|ProxyAuthorizationPolicy
name|p
init|=
name|c
operator|.
name|getProxyAuthorization
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|k
init|=
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"proxyAuthorization."
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|ProxyAuthorizationPolicy
argument_list|()
expr_stmt|;
name|c
operator|.
name|setProxyAuthorization
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|String
name|v
init|=
name|d
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|k
operator|=
name|k
operator|.
name|substring
argument_list|(
literal|"proxyAuthorization."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"UserName"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setUserName
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Password"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setPassword
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Authorization"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setAuthorization
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"AuthorizationType"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setAuthorizationType
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|applyAuthorization
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|d
parameter_list|,
name|HTTPConduit
name|c
parameter_list|)
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|d
operator|.
name|keys
argument_list|()
decl_stmt|;
name|AuthorizationPolicy
name|p
init|=
name|c
operator|.
name|getAuthorization
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|k
init|=
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"authorization."
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|AuthorizationPolicy
argument_list|()
expr_stmt|;
name|c
operator|.
name|setAuthorization
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|String
name|v
init|=
name|d
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|k
operator|=
name|k
operator|.
name|substring
argument_list|(
literal|"authorization."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"UserName"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setUserName
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Password"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setPassword
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Authorization"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setAuthorization
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"AuthorizationType"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setAuthorizationType
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|applyClientPolicies
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|d
parameter_list|,
name|HTTPConduit
name|c
parameter_list|)
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|d
operator|.
name|keys
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|p
init|=
name|c
operator|.
name|getClient
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|k
init|=
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"client."
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|HTTPClientPolicy
argument_list|()
expr_stmt|;
name|c
operator|.
name|setClient
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|String
name|v
init|=
name|d
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|k
operator|=
name|k
operator|.
name|substring
argument_list|(
literal|"client."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"ConnectionTimeout"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setConnectionTimeout
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ReceiveTimeout"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setReceiveTimeout
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"AutoRedirect"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setAutoRedirect
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"MaxRetransmits"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setMaxRetransmits
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"AllowChunking"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setAllowChunking
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ChunkingThreshold"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setChunkingThreshold
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Connection"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setConnection
argument_list|(
name|ConnectionType
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"DecoupledEndpoint"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setDecoupledEndpoint
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ProxyServer"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setProxyServer
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ProxyServerPort"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setProxyServerPort
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ProxyServerType"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setProxyServerType
argument_list|(
name|ProxyServerType
operator|.
name|fromValue
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"NonProxyHosts"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setNonProxyHosts
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

