begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSClientParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSParameterJaxBUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|CertStoreType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|CertificateConstraintsType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|CombinatorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|DNConstraintsType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|FiltersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|KeyManagersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|KeyStoreType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|ProxyAuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|SecureRandomParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|TrustManagersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|HTTPConduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|HTTPConduitConfigurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|ConnectionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPClientPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|ProxyServerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ManagedServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_comment
comment|/**  * This class registers a HTTPConduitConfigurer that will pull information from the   * config:admin service to configure conduits.   With the Felix file based impl, the  * format for that would be in files named org.apache.cxf.http.conduits-XYZ.cfg  * that has a list of properties like:  *   * url: Regex url to match the configuration  * order: Integer order in which to apply the regex's when multiple regex's match.  * client.*  * tlsClientParameters.*  * proxyAuthorization.*  * authorization.*  *   * Where each of those is a prefix for the attributes that would be on the elements   * of the http:conduit configuration defined at:  *   * http://cxf.apache.org/schemas/configuration/http-conf.xsd  *   * For example:  * client.ReceiveTimeout: 1000  * authorization.Username: Foo  * tlsClientParameters.keyManagers.keyStore.file: mykeys.jks  * etc....  *   */
end_comment

begin_class
specifier|public
class|class
name|HTTPTransportActivator
implements|implements
name|BundleActivator
implements|,
name|ManagedServiceFactory
implements|,
name|HTTPConduitConfigurer
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FACTORY_PID
init|=
literal|"org.apache.cxf.http.conduits"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SECURE_HTTP_PREFIX
init|=
literal|"https"
decl_stmt|;
specifier|private
specifier|static
class|class
name|PidInfo
implements|implements
name|Comparable
argument_list|<
name|PidInfo
argument_list|>
block|{
specifier|final
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
decl_stmt|;
specifier|final
name|Matcher
name|matcher
decl_stmt|;
specifier|final
name|int
name|order
decl_stmt|;
specifier|public
name|PidInfo
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
parameter_list|,
name|Matcher
name|m
parameter_list|,
name|int
name|o
parameter_list|)
block|{
name|matcher
operator|=
name|m
expr_stmt|;
name|props
operator|=
name|p
expr_stmt|;
name|order
operator|=
name|o
expr_stmt|;
block|}
specifier|public
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getProps
parameter_list|()
block|{
return|return
name|props
return|;
block|}
specifier|public
name|Matcher
name|getMatcher
parameter_list|()
block|{
return|return
name|matcher
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|PidInfo
name|o
parameter_list|)
block|{
if|if
condition|(
name|order
operator|<
name|o
operator|.
name|order
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|order
operator|>
name|o
operator|.
name|order
condition|)
block|{
return|return
literal|1
return|;
block|}
comment|// priorities are equal
if|if
condition|(
name|matcher
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|o
operator|.
name|matcher
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|matcher
operator|.
name|pattern
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|matcher
operator|.
name|pattern
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
name|ServiceTracker
name|configAdminTracker
decl_stmt|;
name|ServiceRegistration
name|reg
decl_stmt|;
name|ServiceRegistration
name|reg2
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PidInfo
argument_list|>
name|props
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|PidInfo
argument_list|>
argument_list|(
literal|4
argument_list|,
literal|0.75f
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|CopyOnWriteArrayList
argument_list|<
name|PidInfo
argument_list|>
name|sorted
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|PidInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|servProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|servProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
name|FACTORY_PID
argument_list|)
expr_stmt|;
name|reg2
operator|=
name|context
operator|.
name|registerService
argument_list|(
name|ManagedServiceFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|this
argument_list|,
name|servProps
argument_list|)
expr_stmt|;
name|servProps
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|servProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"org.apache.cxf.http.conduit-configurer"
argument_list|)
expr_stmt|;
name|reg
operator|=
name|context
operator|.
name|registerService
argument_list|(
name|HTTPConduitConfigurer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|this
argument_list|,
name|servProps
argument_list|)
expr_stmt|;
name|configAdminTracker
operator|=
operator|new
name|ServiceTracker
argument_list|(
name|context
argument_list|,
name|ConfigurationAdmin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|configAdminTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|reg2
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|configAdminTracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|FACTORY_PID
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|updated
parameter_list|(
name|String
name|pid
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Dictionary
name|properties
parameter_list|)
throws|throws
name|ConfigurationException
block|{
if|if
condition|(
name|pid
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|url
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|url
operator|==
literal|null
condition|?
literal|null
else|:
name|Pattern
operator|.
name|compile
argument_list|(
name|url
argument_list|)
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|String
name|p
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"order"
argument_list|)
decl_stmt|;
name|int
name|order
init|=
literal|50
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|order
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|PidInfo
name|info
init|=
operator|new
name|PidInfo
argument_list|(
name|properties
argument_list|,
name|matcher
argument_list|,
name|order
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|pid
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|addToSortedInfos
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|addToSortedInfos
parameter_list|(
name|PidInfo
name|pi
parameter_list|)
block|{
name|int
name|size
init|=
name|sorted
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|size
condition|;
name|x
operator|++
control|)
block|{
name|PidInfo
name|p
init|=
name|sorted
operator|.
name|get
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|pi
operator|.
name|compareTo
argument_list|(
name|p
argument_list|)
operator|<
literal|0
condition|)
block|{
name|sorted
operator|.
name|add
argument_list|(
name|x
argument_list|,
name|pi
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|sorted
operator|.
name|add
argument_list|(
name|pi
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|removeFromSortedInfos
parameter_list|(
name|PidInfo
name|pi
parameter_list|)
block|{
name|sorted
operator|.
name|remove
argument_list|(
name|pi
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleted
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
name|PidInfo
name|info
init|=
name|props
operator|.
name|remove
argument_list|(
name|pid
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|removeFromSortedInfos
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|d
init|=
name|info
operator|.
name|getProps
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|String
name|url
init|=
name|d
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|d
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|remove
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|configure
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|address
parameter_list|,
name|HTTPConduit
name|c
parameter_list|)
block|{
name|PidInfo
name|byName
init|=
literal|null
decl_stmt|;
name|PidInfo
name|byAddress
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|byName
operator|=
name|props
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|byAddress
operator|=
name|props
operator|.
name|get
argument_list|(
name|address
argument_list|)
expr_stmt|;
if|if
condition|(
name|byAddress
operator|==
name|byName
condition|)
block|{
name|byAddress
operator|=
literal|null
expr_stmt|;
block|}
block|}
for|for
control|(
name|PidInfo
name|info
range|:
name|sorted
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getMatcher
argument_list|()
operator|!=
literal|null
operator|&&
name|info
operator|!=
name|byName
operator|&&
name|info
operator|!=
name|byAddress
condition|)
block|{
name|Matcher
name|m
init|=
name|info
operator|.
name|getMatcher
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|m
init|)
block|{
name|m
operator|.
name|reset
argument_list|(
name|address
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|apply
argument_list|(
name|info
operator|.
name|getProps
argument_list|()
argument_list|,
name|c
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|byAddress
operator|!=
literal|null
condition|)
block|{
name|apply
argument_list|(
name|byAddress
operator|.
name|getProps
argument_list|()
argument_list|,
name|c
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|byName
operator|!=
literal|null
condition|)
block|{
name|apply
argument_list|(
name|byName
operator|.
name|getProps
argument_list|()
argument_list|,
name|c
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|apply
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|d
parameter_list|,
name|HTTPConduit
name|c
parameter_list|,
name|String
name|address
parameter_list|)
block|{
name|applyClientPolicies
argument_list|(
name|d
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|applyAuthorization
argument_list|(
name|d
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|applyProxyAuthorization
argument_list|(
name|d
argument_list|,
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
operator|&&
name|address
operator|.
name|startsWith
argument_list|(
name|SECURE_HTTP_PREFIX
argument_list|)
condition|)
block|{
name|applyTlsClientParameters
argument_list|(
name|d
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|applyTlsClientParameters
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|d
parameter_list|,
name|HTTPConduit
name|c
parameter_list|)
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|d
operator|.
name|keys
argument_list|()
decl_stmt|;
name|TLSClientParameters
name|p
init|=
name|c
operator|.
name|getTlsClientParameters
argument_list|()
decl_stmt|;
name|SecureRandomParameters
name|srp
init|=
literal|null
decl_stmt|;
name|KeyManagersType
name|kmt
init|=
literal|null
decl_stmt|;
name|TrustManagersType
name|tmt
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|k
init|=
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"tlsClientParameters."
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|TLSClientParameters
argument_list|()
expr_stmt|;
name|c
operator|.
name|setTlsClientParameters
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|String
name|v
init|=
name|d
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|k
operator|=
name|k
operator|.
name|substring
argument_list|(
literal|"tlsClientParameters."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"secureSocketProtocol"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setSecureSocketProtocol
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sslCacheTimeout"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setSslCacheTimeout
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"jsseProvider"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setJsseProvider
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"disableCNCheck"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setDisableCNCheck
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"useHttpsURLConnectionDefaultHostnameVerifier"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setUseHttpsURLConnectionDefaultHostnameVerifier
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"useHttpsURLConnectionDefaultSslSocketFactory"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setUseHttpsURLConnectionDefaultSslSocketFactory
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"certConstraints."
argument_list|)
condition|)
block|{
name|k
operator|=
name|k
operator|.
name|substring
argument_list|(
literal|"certConstraints."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|CertificateConstraintsType
name|cct
init|=
name|p
operator|.
name|getCertConstraints
argument_list|()
decl_stmt|;
if|if
condition|(
name|cct
operator|==
literal|null
condition|)
block|{
name|cct
operator|=
operator|new
name|CertificateConstraintsType
argument_list|()
expr_stmt|;
name|p
operator|.
name|setCertConstraints
argument_list|(
name|cct
argument_list|)
expr_stmt|;
block|}
name|DNConstraintsType
name|dnct
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"SubjectDNConstraints."
argument_list|)
condition|)
block|{
name|dnct
operator|=
name|cct
operator|.
name|getSubjectDNConstraints
argument_list|()
expr_stmt|;
if|if
condition|(
name|dnct
operator|==
literal|null
condition|)
block|{
name|dnct
operator|=
operator|new
name|DNConstraintsType
argument_list|()
expr_stmt|;
name|cct
operator|.
name|setSubjectDNConstraints
argument_list|(
name|dnct
argument_list|)
expr_stmt|;
block|}
name|k
operator|=
name|k
operator|.
name|substring
argument_list|(
literal|"SubjectDNConstraints."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"IssuerDNConstraints."
argument_list|)
condition|)
block|{
name|dnct
operator|=
name|cct
operator|.
name|getIssuerDNConstraints
argument_list|()
expr_stmt|;
if|if
condition|(
name|dnct
operator|==
literal|null
condition|)
block|{
name|dnct
operator|=
operator|new
name|DNConstraintsType
argument_list|()
expr_stmt|;
name|cct
operator|.
name|setIssuerDNConstraints
argument_list|(
name|dnct
argument_list|)
expr_stmt|;
block|}
name|k
operator|=
name|k
operator|.
name|substring
argument_list|(
literal|"IssuerDNConstraints."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dnct
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"combinator"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|dnct
operator|.
name|setCombinator
argument_list|(
name|CombinatorType
operator|.
name|fromValue
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"RegularExpression"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|dnct
operator|.
name|getRegularExpression
argument_list|()
operator|.
name|add
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"secureRandomParameters."
argument_list|)
condition|)
block|{
name|k
operator|=
name|k
operator|.
name|substring
argument_list|(
literal|"secureRandomParameters."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|srp
operator|==
literal|null
condition|)
block|{
name|srp
operator|=
operator|new
name|SecureRandomParameters
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"algorithm"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|srp
operator|.
name|setAlgorithm
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"provider"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|srp
operator|.
name|setProvider
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"cipherSuitesFilter."
argument_list|)
condition|)
block|{
name|k
operator|=
name|k
operator|.
name|substring
argument_list|(
literal|"cipherSuitesFilter."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|v
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|FiltersType
name|ft
init|=
name|p
operator|.
name|getCipherSuitesFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|ft
operator|==
literal|null
condition|)
block|{
name|ft
operator|=
operator|new
name|FiltersType
argument_list|()
expr_stmt|;
name|p
operator|.
name|setCipherSuitesFilter
argument_list|(
name|ft
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|lst
init|=
literal|"include"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|?
name|ft
operator|.
name|getInclude
argument_list|()
else|:
name|ft
operator|.
name|getExclude
argument_list|()
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|lst
operator|.
name|add
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"cipherSuites"
argument_list|)
condition|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|v
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|p
operator|.
name|getCipherSuites
argument_list|()
operator|.
name|add
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"trustManagers."
argument_list|)
condition|)
block|{
name|tmt
operator|=
name|getTrustManagers
argument_list|(
name|tmt
argument_list|,
name|k
operator|.
name|substring
argument_list|(
literal|"trustManagers."
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"keyManagers."
argument_list|)
condition|)
block|{
name|kmt
operator|=
name|getKeyManagers
argument_list|(
name|kmt
argument_list|,
name|k
operator|.
name|substring
argument_list|(
literal|"keyManagers."
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
if|if
condition|(
name|srp
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setSecureRandom
argument_list|(
name|TLSParameterJaxBUtils
operator|.
name|getSecureRandom
argument_list|(
name|srp
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kmt
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setKeyManagers
argument_list|(
name|TLSParameterJaxBUtils
operator|.
name|getKeyManagers
argument_list|(
name|kmt
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmt
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setTrustManagers
argument_list|(
name|TLSParameterJaxBUtils
operator|.
name|getTrustManagers
argument_list|(
name|tmt
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|KeyManagersType
name|getKeyManagers
parameter_list|(
name|KeyManagersType
name|keyManagers
parameter_list|,
name|String
name|k
parameter_list|,
name|String
name|v
parameter_list|)
block|{
if|if
condition|(
name|keyManagers
operator|==
literal|null
condition|)
block|{
name|keyManagers
operator|=
operator|new
name|KeyManagersType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"factoryAlgorithm"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|keyManagers
operator|.
name|setFactoryAlgorithm
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"provider"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|keyManagers
operator|.
name|setProvider
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"keyPassword"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|keyManagers
operator|.
name|setKeyPassword
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"keyStore."
argument_list|)
condition|)
block|{
name|keyManagers
operator|.
name|setKeyStore
argument_list|(
name|getKeyStore
argument_list|(
name|keyManagers
operator|.
name|getKeyStore
argument_list|()
argument_list|,
name|k
operator|.
name|substring
argument_list|(
literal|"keyStore."
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|keyManagers
return|;
block|}
specifier|private
name|KeyStoreType
name|getKeyStore
parameter_list|(
name|KeyStoreType
name|ks
parameter_list|,
name|String
name|k
parameter_list|,
name|String
name|v
parameter_list|)
block|{
if|if
condition|(
name|ks
operator|==
literal|null
condition|)
block|{
name|ks
operator|=
operator|new
name|KeyStoreType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"type"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|ks
operator|.
name|setType
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"password"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|ks
operator|.
name|setPassword
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"provider"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|ks
operator|.
name|setProvider
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"url"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|ks
operator|.
name|setUrl
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|ks
operator|.
name|setFile
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"resource"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|ks
operator|.
name|setResource
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|ks
return|;
block|}
specifier|private
name|TrustManagersType
name|getTrustManagers
parameter_list|(
name|TrustManagersType
name|tmt
parameter_list|,
name|String
name|k
parameter_list|,
name|String
name|v
parameter_list|)
block|{
if|if
condition|(
name|tmt
operator|==
literal|null
condition|)
block|{
name|tmt
operator|=
operator|new
name|TrustManagersType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"provider"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|tmt
operator|.
name|setProvider
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"factoryAlgorithm"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|tmt
operator|.
name|setFactoryAlgorithm
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"keyStore."
argument_list|)
condition|)
block|{
name|tmt
operator|.
name|setKeyStore
argument_list|(
name|getKeyStore
argument_list|(
name|tmt
operator|.
name|getKeyStore
argument_list|()
argument_list|,
name|k
operator|.
name|substring
argument_list|(
literal|"keyStore."
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"certStore"
argument_list|)
condition|)
block|{
name|tmt
operator|.
name|setCertStore
argument_list|(
name|getCertStore
argument_list|(
name|tmt
operator|.
name|getCertStore
argument_list|()
argument_list|,
name|k
operator|.
name|substring
argument_list|(
literal|"certStore."
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tmt
return|;
block|}
specifier|private
name|CertStoreType
name|getCertStore
parameter_list|(
name|CertStoreType
name|cs
parameter_list|,
name|String
name|k
parameter_list|,
name|String
name|v
parameter_list|)
block|{
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
block|{
name|cs
operator|=
operator|new
name|CertStoreType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|cs
operator|.
name|setFile
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"url"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|cs
operator|.
name|setUrl
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"resource"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|cs
operator|.
name|setResource
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|cs
return|;
block|}
specifier|private
name|void
name|applyProxyAuthorization
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|d
parameter_list|,
name|HTTPConduit
name|c
parameter_list|)
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|d
operator|.
name|keys
argument_list|()
decl_stmt|;
name|ProxyAuthorizationPolicy
name|p
init|=
name|c
operator|.
name|getProxyAuthorization
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|k
init|=
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"proxyAuthorization."
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|ProxyAuthorizationPolicy
argument_list|()
expr_stmt|;
name|c
operator|.
name|setProxyAuthorization
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|String
name|v
init|=
name|d
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|k
operator|=
name|k
operator|.
name|substring
argument_list|(
literal|"proxyAuthorization."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"UserName"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setUserName
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Password"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setPassword
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Authorization"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setAuthorization
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"AuthorizationType"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setAuthorizationType
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|applyAuthorization
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|d
parameter_list|,
name|HTTPConduit
name|c
parameter_list|)
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|d
operator|.
name|keys
argument_list|()
decl_stmt|;
name|AuthorizationPolicy
name|p
init|=
name|c
operator|.
name|getAuthorization
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|k
init|=
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"authorization."
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|AuthorizationPolicy
argument_list|()
expr_stmt|;
name|c
operator|.
name|setAuthorization
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|String
name|v
init|=
name|d
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|k
operator|=
name|k
operator|.
name|substring
argument_list|(
literal|"authorization."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"UserName"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setUserName
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Password"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setPassword
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Authorization"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setAuthorization
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"AuthorizationType"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setAuthorizationType
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|applyClientPolicies
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|d
parameter_list|,
name|HTTPConduit
name|c
parameter_list|)
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|d
operator|.
name|keys
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|p
init|=
name|c
operator|.
name|getClient
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|k
init|=
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"client."
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|HTTPClientPolicy
argument_list|()
expr_stmt|;
name|c
operator|.
name|setClient
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|String
name|v
init|=
name|d
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|k
operator|=
name|k
operator|.
name|substring
argument_list|(
literal|"client."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"ConnectionTimeout"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setConnectionTimeout
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ReceiveTimeout"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setReceiveTimeout
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"AutoRedirect"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setAutoRedirect
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"MaxRetransmits"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setMaxRetransmits
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"AllowChunking"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setAllowChunking
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ChunkingThreshold"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setChunkingThreshold
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Connection"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setConnection
argument_list|(
name|ConnectionType
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"DecoupledEndpoint"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setDecoupledEndpoint
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ProxyServer"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setProxyServer
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ProxyServerPort"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setProxyServerPort
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ProxyServerType"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setProxyServerType
argument_list|(
name|ProxyServerType
operator|.
name|fromValue
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"NonProxyHosts"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|p
operator|.
name|setNonProxyHosts
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

