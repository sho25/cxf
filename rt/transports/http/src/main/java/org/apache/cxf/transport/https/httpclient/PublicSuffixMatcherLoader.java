begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/*  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|httpclient
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_comment
comment|/**  * {@link org.apache.http.conn.util.PublicSuffixMatcher} loader.  *  * Copied from httpclient.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PublicSuffixMatcherLoader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|PublicSuffixMatcherLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|PublicSuffixMatcher
name|defaultInstance
decl_stmt|;
specifier|private
name|PublicSuffixMatcherLoader
parameter_list|()
block|{
comment|//
block|}
specifier|private
specifier|static
name|PublicSuffixMatcher
name|load
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|PublicSuffixList
name|list
init|=
operator|new
name|PublicSuffixListParser
argument_list|()
operator|.
name|parse
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|PublicSuffixMatcher
argument_list|(
name|list
operator|.
name|getRules
argument_list|()
argument_list|,
name|list
operator|.
name|getExceptions
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PublicSuffixMatcher
name|load
parameter_list|(
specifier|final
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"URL is null"
argument_list|)
throw|;
block|}
try|try
init|(
name|InputStream
name|in
init|=
name|url
operator|.
name|openStream
argument_list|()
init|)
block|{
return|return
name|load
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|PublicSuffixMatcher
name|load
parameter_list|(
specifier|final
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"File is null"
argument_list|)
throw|;
block|}
try|try
init|(
name|InputStream
name|in
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|file
operator|.
name|toPath
argument_list|()
argument_list|)
init|)
block|{
return|return
name|load
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|PublicSuffixMatcher
name|getDefault
parameter_list|()
block|{
if|if
condition|(
name|defaultInstance
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|PublicSuffixMatcherLoader
operator|.
name|class
init|)
block|{
if|if
condition|(
name|defaultInstance
operator|==
literal|null
condition|)
block|{
specifier|final
name|URL
name|url
init|=
name|PublicSuffixMatcherLoader
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/mozilla/public-suffix-list.txt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|defaultInstance
operator|=
name|load
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// Should never happen
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Failure loading public suffix list from default resource"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|defaultInstance
operator|=
operator|new
name|PublicSuffixMatcher
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"com"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|defaultInstance
return|;
block|}
block|}
end_class

end_unit

