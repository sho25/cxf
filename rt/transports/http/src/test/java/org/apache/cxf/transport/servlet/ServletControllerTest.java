begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|AbstractHTTPDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|DestinationRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ServletControllerTest
extends|extends
name|Assert
block|{
specifier|private
name|HttpServletRequest
name|req
decl_stmt|;
specifier|private
name|HttpServletResponse
name|res
decl_stmt|;
specifier|private
name|DestinationRegistry
name|registry
decl_stmt|;
specifier|private
name|HttpServlet
name|serviceListGenerator
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|req
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|res
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|registry
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|DestinationRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
name|serviceListGenerator
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|HttpServlet
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setReq
parameter_list|(
name|String
name|pathInfo
parameter_list|,
name|String
name|requestUri
parameter_list|,
name|String
name|styleSheet
parameter_list|,
name|String
name|formatted
parameter_list|)
block|{
name|req
operator|.
name|getPathInfo
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|pathInfo
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|req
operator|.
name|getRequestURI
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|requestUri
argument_list|)
expr_stmt|;
name|req
operator|.
name|getParameter
argument_list|(
literal|"stylesheet"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|styleSheet
argument_list|)
expr_stmt|;
name|req
operator|.
name|getParameter
argument_list|(
literal|"formatted"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|formatted
argument_list|)
expr_stmt|;
name|req
operator|.
name|getRequestURL
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"http://localhost:8080"
operator|+
name|requestUri
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|getDestinationsPaths
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|registry
operator|.
name|getDestinationForPath
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|expectServiceListGeneratorCalled
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|serviceListGenerator
operator|.
name|service
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|expectServiceListGeneratorNotCalled
parameter_list|()
throws|throws
name|ServletException
throws|,
name|IOException
block|{     }
annotation|@
name|Test
specifier|public
name|void
name|testGenerateServiceListing
parameter_list|()
throws|throws
name|Exception
block|{
name|setReq
argument_list|(
literal|null
argument_list|,
literal|"/services"
argument_list|,
literal|null
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|expectServiceListGeneratorCalled
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|req
argument_list|,
name|registry
argument_list|,
name|serviceListGenerator
argument_list|)
expr_stmt|;
name|TestServletController
name|sc
init|=
operator|new
name|TestServletController
argument_list|(
name|registry
argument_list|,
name|serviceListGenerator
argument_list|)
decl_stmt|;
name|sc
operator|.
name|invoke
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sc
operator|.
name|invokeDestinationCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGenerateUnformattedServiceListing
parameter_list|()
throws|throws
name|Exception
block|{
name|req
operator|.
name|getPathInfo
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|req
operator|.
name|getRequestURI
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|"/services"
argument_list|)
expr_stmt|;
name|req
operator|.
name|getParameter
argument_list|(
literal|"stylesheet"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|req
operator|.
name|getParameter
argument_list|(
literal|"formatted"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
name|req
operator|.
name|getRequestURL
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"http://localhost:8080/services"
argument_list|)
argument_list|)
expr_stmt|;
name|registry
operator|.
name|getDestinationsPaths
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|registry
operator|.
name|getDestinationForPath
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expectServiceListGeneratorCalled
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|req
argument_list|,
name|registry
argument_list|,
name|serviceListGenerator
argument_list|)
expr_stmt|;
name|TestServletController
name|sc
init|=
operator|new
name|TestServletController
argument_list|(
name|registry
argument_list|,
name|serviceListGenerator
argument_list|)
decl_stmt|;
name|sc
operator|.
name|invoke
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sc
operator|.
name|invokeDestinationCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHideServiceListing
parameter_list|()
throws|throws
name|Exception
block|{
name|req
operator|.
name|getPathInfo
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|registry
operator|.
name|getDestinationForPath
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|AbstractHTTPDestination
name|dest
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|AbstractHTTPDestination
operator|.
name|class
argument_list|)
decl_stmt|;
name|registry
operator|.
name|checkRestfulRequest
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|dest
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|expectServiceListGeneratorNotCalled
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|req
argument_list|,
name|registry
argument_list|,
name|serviceListGenerator
argument_list|)
expr_stmt|;
name|TestServletController
name|sc
init|=
operator|new
name|TestServletController
argument_list|(
name|registry
argument_list|,
name|serviceListGenerator
argument_list|)
decl_stmt|;
name|sc
operator|.
name|setHideServiceList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sc
operator|.
name|invoke
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sc
operator|.
name|invokeDestinationCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDifferentServiceListPath
parameter_list|()
throws|throws
name|Exception
block|{
name|setReq
argument_list|(
literal|null
argument_list|,
literal|"/listing"
argument_list|,
literal|null
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|expectServiceListGeneratorCalled
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|req
argument_list|,
name|registry
argument_list|,
name|serviceListGenerator
argument_list|)
expr_stmt|;
name|TestServletController
name|sc
init|=
operator|new
name|TestServletController
argument_list|(
name|registry
argument_list|,
name|serviceListGenerator
argument_list|)
decl_stmt|;
name|sc
operator|.
name|setServiceListRelativePath
argument_list|(
literal|"/listing"
argument_list|)
expr_stmt|;
name|sc
operator|.
name|invoke
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sc
operator|.
name|invokeDestinationCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|testGetRequestUrl
parameter_list|(
name|String
name|requestUrl
parameter_list|,
name|String
name|pathInfo
parameter_list|)
block|{
name|req
operator|.
name|getRequestURL
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|requestUrl
argument_list|)
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|req
operator|.
name|getPathInfo
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|pathInfo
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|req
argument_list|)
expr_stmt|;
return|return
operator|new
name|ServletController
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getBaseURL
argument_list|(
name|req
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRequestURL
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|testGetRequestUrl
argument_list|(
literal|"http://localhost:8080/services/bar"
argument_list|,
literal|"/bar"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost:8080/services"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRequestURLSingleMatrixParam
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|testGetRequestUrl
argument_list|(
literal|"http://localhost:8080/services/bar;a=b"
argument_list|,
literal|"/bar"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost:8080/services"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRequestURLMultipleMatrixParam
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|testGetRequestUrl
argument_list|(
literal|"http://localhost:8080/services/bar;a=b;c=d;e=f"
argument_list|,
literal|"/bar"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost:8080/services"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRequestURLMultipleMatrixParam2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|testGetRequestUrl
argument_list|(
literal|"http://localhost:8080/services/bar;a=b;c=d;e=f"
argument_list|,
literal|"/bar;a=b;c=d"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost:8080/services"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRequestURLMultipleMatrixParam3
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|testGetRequestUrl
argument_list|(
literal|"http://localhost:8080/services/bar;a=b;c=d;e=f"
argument_list|,
literal|"/bar;a=b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost:8080/services"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRequestURLMultipleMatrixParam4
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|testGetRequestUrl
argument_list|(
literal|"http://localhost:8080/services/bar;a=b;c=d;e=f;"
argument_list|,
literal|"/bar;a=b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost:8080/services"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TestServletController
extends|extends
name|ServletController
block|{
specifier|private
name|boolean
name|invokeDestinationCalled
decl_stmt|;
specifier|public
name|TestServletController
parameter_list|(
name|DestinationRegistry
name|destinationRegistry
parameter_list|,
name|HttpServlet
name|serviceListGenerator
parameter_list|)
block|{
name|super
argument_list|(
name|destinationRegistry
argument_list|,
literal|null
argument_list|,
name|serviceListGenerator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|updateDests
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|invokeDestination
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|AbstractHTTPDestination
name|d
parameter_list|)
throws|throws
name|ServletException
block|{
name|invokeDestinationCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|invokeDestinationCalled
parameter_list|()
block|{
return|return
name|invokeDestinationCalled
return|;
block|}
block|}
block|}
end_class

end_unit

