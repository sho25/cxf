begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|DigestAuthSupplierTest
block|{
comment|/**      * Tests that parseHeader correctly parses parameters that contain ==      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testCXF2370
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|origNonce
init|=
literal|"MTI0ODg3OTc5NzE2OTplZGUyYTg0Yzk2NTFkY2YyNjc1Y2JjZjU2MTUzZmQyYw=="
decl_stmt|;
name|String
name|fullHeader
init|=
literal|"Digest realm=\"MyCompany realm.\", qop=\"auth\","
operator|+
literal|"nonce=\""
operator|+
name|origNonce
operator|+
literal|"\""
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HttpAuthHeader
argument_list|(
name|fullHeader
argument_list|)
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|origNonce
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"nonce"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"auth"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"qop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MyCompany realm."
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"realm"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncode
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|origNonce
init|=
literal|"MTI0ODg3OTc5NzE2OTplZGUyYTg0Yzk2NTFkY2YyNjc1Y2JjZjU2MTUzZmQyYw=="
decl_stmt|;
name|String
name|fullHeader
init|=
literal|"Digest realm=\"MyCompany realm.\", qop=\"auth\","
operator|+
literal|"nonce=\""
operator|+
name|origNonce
operator|+
literal|"\""
decl_stmt|;
comment|/**          * Initialize DigestAuthSupplier that always uses the same cnonce so we always          * get the same response          */
name|DigestAuthSupplier
name|authSupplier
init|=
operator|new
name|DigestAuthSupplier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|createCnonce
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
return|return
literal|"27db039b76362f3d55da10652baee38c"
return|;
block|}
block|}
decl_stmt|;
name|IMocksControl
name|control
init|=
name|EasyMock
operator|.
name|createControl
argument_list|()
decl_stmt|;
name|AuthorizationPolicy
name|authorizationPolicy
init|=
operator|new
name|AuthorizationPolicy
argument_list|()
decl_stmt|;
name|authorizationPolicy
operator|.
name|setUserName
argument_list|(
literal|"testUser"
argument_list|)
expr_stmt|;
name|authorizationPolicy
operator|.
name|setPassword
argument_list|(
literal|"testPassword"
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"http://myserver"
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|authToken
init|=
name|authSupplier
operator|.
name|getAuthorization
argument_list|(
name|authorizationPolicy
argument_list|,
name|uri
argument_list|,
name|message
argument_list|,
name|fullHeader
argument_list|)
decl_stmt|;
name|HttpAuthHeader
name|authHeader
init|=
operator|new
name|HttpAuthHeader
argument_list|(
name|authToken
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Digest"
argument_list|,
name|authHeader
operator|.
name|getAuthType
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|authHeader
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"response"
argument_list|,
literal|"28e616b6868f60aaf9b19bb5b172f076"
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"cnonce"
argument_list|,
literal|"27db039b76362f3d55da10652baee38c"
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"username"
argument_list|,
literal|"testUser"
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"nc"
argument_list|,
literal|"00000001"
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"nonce"
argument_list|,
literal|"MTI0ODg3OTc5NzE2OTplZGUyYTg0Yzk2NTFkY2YyNjc1Y2JjZjU2MTUzZmQyYw=="
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"realm"
argument_list|,
literal|"MyCompany realm."
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"qop"
argument_list|,
literal|"auth"
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"uri"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"algorithm"
argument_list|,
literal|"MD5"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedParams
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

