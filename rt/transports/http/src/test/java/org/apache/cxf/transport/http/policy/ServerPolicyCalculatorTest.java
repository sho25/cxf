begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|policy
operator|.
name|impl
operator|.
name|ServerPolicyCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPServerPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ServerPolicyCalculatorTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCompatibleServerPolicies
parameter_list|()
block|{
name|ServerPolicyCalculator
name|spc
init|=
operator|new
name|ServerPolicyCalculator
argument_list|()
decl_stmt|;
name|HTTPServerPolicy
name|p1
init|=
operator|new
name|HTTPServerPolicy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Policy is not compatible with itself."
argument_list|,
name|spc
operator|.
name|compatible
argument_list|(
name|p1
argument_list|,
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|HTTPServerPolicy
name|p2
init|=
operator|new
name|HTTPServerPolicy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Policies are not compatible."
argument_list|,
name|spc
operator|.
name|compatible
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setServerType
argument_list|(
literal|"server"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Policies are not compatible."
argument_list|,
name|spc
operator|.
name|compatible
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setServerType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setReceiveTimeout
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Policies are not compatible."
argument_list|,
name|spc
operator|.
name|compatible
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setSuppressClientSendErrors
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Policies are compatible."
argument_list|,
name|spc
operator|.
name|compatible
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setSuppressClientSendErrors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Policies are compatible."
argument_list|,
operator|!
name|spc
operator|.
name|compatible
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setSuppressClientSendErrors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Policies are compatible."
argument_list|,
name|spc
operator|.
name|compatible
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntersectServerPolicies
parameter_list|()
block|{
name|ServerPolicyCalculator
name|spc
init|=
operator|new
name|ServerPolicyCalculator
argument_list|()
decl_stmt|;
name|HTTPServerPolicy
name|p1
init|=
operator|new
name|HTTPServerPolicy
argument_list|()
decl_stmt|;
name|HTTPServerPolicy
name|p2
init|=
operator|new
name|HTTPServerPolicy
argument_list|()
decl_stmt|;
name|HTTPServerPolicy
name|p
init|=
literal|null
decl_stmt|;
name|p1
operator|.
name|setServerType
argument_list|(
literal|"server"
argument_list|)
expr_stmt|;
name|p
operator|=
name|spc
operator|.
name|intersect
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"server"
argument_list|,
name|p
operator|.
name|getServerType
argument_list|()
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setServerType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setReceiveTimeout
argument_list|(
literal|10000L
argument_list|)
expr_stmt|;
name|p
operator|=
name|spc
operator|.
name|intersect
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000L
argument_list|,
name|p
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setSuppressClientSendErrors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setSuppressClientSendErrors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|p
operator|=
name|spc
operator|.
name|intersect
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isSuppressClientSendErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualServerPolicies
parameter_list|()
block|{
name|ServerPolicyCalculator
name|spc
init|=
operator|new
name|ServerPolicyCalculator
argument_list|()
decl_stmt|;
name|HTTPServerPolicy
name|p1
init|=
operator|new
name|HTTPServerPolicy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|spc
operator|.
name|equals
argument_list|(
name|p1
argument_list|,
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|HTTPServerPolicy
name|p2
init|=
operator|new
name|HTTPServerPolicy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|spc
operator|.
name|equals
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setContentEncoding
argument_list|(
literal|"encoding"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|spc
operator|.
name|equals
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setContentEncoding
argument_list|(
literal|"encoding"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|spc
operator|.
name|equals
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setSuppressClientSendErrors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|spc
operator|.
name|equals
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

