begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadLocalRandom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|policy
operator|.
name|impl
operator|.
name|ClientPolicyCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPClientPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ClientPolicyCalculatorTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCompatibleClientPolicies
parameter_list|()
block|{
name|ClientPolicyCalculator
name|calc
init|=
operator|new
name|ClientPolicyCalculator
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|p1
init|=
operator|new
name|HTTPClientPolicy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Policy is not compatible with itself."
argument_list|,
name|calc
operator|.
name|compatible
argument_list|(
name|p1
argument_list|,
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|HTTPClientPolicy
name|p2
init|=
operator|new
name|HTTPClientPolicy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Policies are not compatible."
argument_list|,
name|calc
operator|.
name|compatible
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setBrowserType
argument_list|(
literal|"browser"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Policies are not compatible."
argument_list|,
name|calc
operator|.
name|compatible
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setBrowserType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setConnectionTimeout
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Policies are not compatible."
argument_list|,
name|calc
operator|.
name|compatible
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setAllowChunking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setAllowChunking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Policies are compatible."
argument_list|,
operator|!
name|calc
operator|.
name|compatible
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setAllowChunking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Policies are compatible."
argument_list|,
name|calc
operator|.
name|compatible
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntersectClientPolicies
parameter_list|()
block|{
name|ThreadLocalRandom
name|random
init|=
name|ThreadLocalRandom
operator|.
name|current
argument_list|()
decl_stmt|;
name|ClientPolicyCalculator
name|calc
init|=
operator|new
name|ClientPolicyCalculator
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|p1
init|=
operator|new
name|HTTPClientPolicy
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|p2
init|=
operator|new
name|HTTPClientPolicy
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|p
init|=
literal|null
decl_stmt|;
name|p1
operator|.
name|setBrowserType
argument_list|(
literal|"browser"
argument_list|)
expr_stmt|;
name|p
operator|=
name|calc
operator|.
name|intersect
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"browser"
argument_list|,
name|p
operator|.
name|getBrowserType
argument_list|()
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setBrowserType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|long
name|connectionRequestTimeout
init|=
name|random
operator|.
name|nextLong
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setConnectionRequestTimeout
argument_list|(
name|connectionRequestTimeout
argument_list|)
expr_stmt|;
name|p
operator|=
name|calc
operator|.
name|intersect
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|connectionRequestTimeout
argument_list|,
name|p
operator|.
name|getConnectionRequestTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|receiveTimeout
init|=
name|random
operator|.
name|nextLong
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setReceiveTimeout
argument_list|(
name|receiveTimeout
argument_list|)
expr_stmt|;
name|p
operator|=
name|calc
operator|.
name|intersect
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|receiveTimeout
argument_list|,
name|p
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|connectionTimeout
init|=
name|random
operator|.
name|nextLong
argument_list|(
literal|0
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setConnectionTimeout
argument_list|(
name|connectionTimeout
argument_list|)
expr_stmt|;
name|p
operator|=
name|calc
operator|.
name|intersect
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|connectionTimeout
argument_list|,
name|p
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setAllowChunking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setAllowChunking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|p
operator|=
name|calc
operator|.
name|intersect
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|p
operator|.
name|isAllowChunking
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualClientPolicies
parameter_list|()
block|{
name|ClientPolicyCalculator
name|calc
init|=
operator|new
name|ClientPolicyCalculator
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|p1
init|=
operator|new
name|HTTPClientPolicy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|calc
operator|.
name|equals
argument_list|(
name|p1
argument_list|,
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|HTTPClientPolicy
name|p2
init|=
operator|new
name|HTTPClientPolicy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|calc
operator|.
name|equals
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setDecoupledEndpoint
argument_list|(
literal|"http://localhost:8080/decoupled"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|calc
operator|.
name|equals
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setDecoupledEndpoint
argument_list|(
literal|"http://localhost:8080/decoupled"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|calc
operator|.
name|equals
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setReceiveTimeout
argument_list|(
literal|10000L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|calc
operator|.
name|equals
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLongTimeouts
parameter_list|()
block|{
name|ClientPolicyCalculator
name|calc
init|=
operator|new
name|ClientPolicyCalculator
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|p1
init|=
operator|new
name|HTTPClientPolicy
argument_list|()
decl_stmt|;
name|HTTPClientPolicy
name|p2
init|=
operator|new
name|HTTPClientPolicy
argument_list|()
decl_stmt|;
name|p2
operator|.
name|setReceiveTimeout
argument_list|(
literal|120000
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setConnectionTimeout
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|HTTPClientPolicy
name|p
init|=
name|calc
operator|.
name|intersect
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|p
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60000
argument_list|,
name|p
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|p1
operator|=
operator|new
name|HTTPClientPolicy
argument_list|()
expr_stmt|;
name|p2
operator|=
operator|new
name|HTTPClientPolicy
argument_list|()
expr_stmt|;
name|p1
operator|.
name|setReceiveTimeout
argument_list|(
literal|120000
argument_list|)
expr_stmt|;
name|p1
operator|.
name|setConnectionTimeout
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|p
operator|=
name|calc
operator|.
name|intersect
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|p
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60000
argument_list|,
name|p
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setReceiveTimeout
argument_list|(
literal|50000
argument_list|)
expr_stmt|;
name|p2
operator|.
name|setConnectionTimeout
argument_list|(
literal|20000
argument_list|)
expr_stmt|;
name|p
operator|=
name|calc
operator|.
name|intersect
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
comment|//p1 should have priority
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|p
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60000
argument_list|,
name|p
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
comment|//reverse intersect
name|p
operator|=
name|calc
operator|.
name|intersect
argument_list|(
name|p2
argument_list|,
name|p1
argument_list|)
expr_stmt|;
comment|//p2 should have priority
name|assertEquals
argument_list|(
literal|50000
argument_list|,
name|p
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20000
argument_list|,
name|p
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

