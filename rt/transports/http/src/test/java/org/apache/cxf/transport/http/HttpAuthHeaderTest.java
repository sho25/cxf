begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|HttpAuthHeaderTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testParse
parameter_list|()
block|{
name|HttpAuthHeader
name|authHeader
init|=
operator|new
name|HttpAuthHeader
argument_list|(
literal|"Digest nonce=\"TUzZmQyYw==\", username=\"testUser\""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Digest"
argument_list|,
name|authHeader
operator|.
name|getAuthType
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|authHeader
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"username"
argument_list|,
literal|"testUser"
argument_list|)
expr_stmt|;
name|expectedParams
operator|.
name|put
argument_list|(
literal|"nonce"
argument_list|,
literal|"TUzZmQyYw=="
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedParams
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

