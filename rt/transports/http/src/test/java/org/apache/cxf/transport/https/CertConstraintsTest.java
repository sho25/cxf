begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|CertificateConstraintsType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_class
specifier|public
class|class
name|CertConstraintsTest
extends|extends
name|org
operator|.
name|junit
operator|.
name|Assert
block|{
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testCertConstraints
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|X509Certificate
name|bethalCert
init|=
name|loadCertificate
argument_list|(
literal|"Bethal.jks"
argument_list|,
literal|"JKS"
argument_list|,
literal|"password"
argument_list|,
literal|"bethal"
argument_list|)
decl_stmt|;
specifier|final
name|X509Certificate
name|gordyCert
init|=
name|loadCertificate
argument_list|(
literal|"Gordy.jks"
argument_list|,
literal|"JKS"
argument_list|,
literal|"password"
argument_list|,
literal|"gordy"
argument_list|)
decl_stmt|;
name|CertConstraints
name|tmp
init|=
literal|null
decl_stmt|;
comment|//
comment|// bethal matches but gordy doesn't
comment|//
name|tmp
operator|=
name|loadCertConstraints
argument_list|(
literal|"subject-CN-bethal"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmp
operator|.
name|matches
argument_list|(
name|bethalCert
argument_list|)
operator|&&
operator|!
name|tmp
operator|.
name|matches
argument_list|(
name|gordyCert
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// gordy matches but bethal doesn't
comment|//
name|tmp
operator|=
name|loadCertConstraints
argument_list|(
literal|"subject-CN-gordy"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|tmp
operator|.
name|matches
argument_list|(
name|bethalCert
argument_list|)
operator|&&
name|tmp
operator|.
name|matches
argument_list|(
name|gordyCert
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// both are under the ApacheTest organization
comment|//
name|tmp
operator|=
name|loadCertConstraints
argument_list|(
literal|"subject-O-apache"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmp
operator|.
name|matches
argument_list|(
name|bethalCert
argument_list|)
operator|&&
name|tmp
operator|.
name|matches
argument_list|(
name|gordyCert
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// only bethal is both CN=Bethal and O=ApacheTest
comment|//
name|tmp
operator|=
name|loadCertConstraints
argument_list|(
literal|"subject-CN-bethal-O-apache"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmp
operator|.
name|matches
argument_list|(
name|bethalCert
argument_list|)
operator|&&
operator|!
name|tmp
operator|.
name|matches
argument_list|(
name|gordyCert
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// neither are O=BadApacheTest
comment|//
name|tmp
operator|=
name|loadCertConstraints
argument_list|(
literal|"subject-CN-bethal-O-badapache"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|tmp
operator|.
name|matches
argument_list|(
name|bethalCert
argument_list|)
operator|&&
operator|!
name|tmp
operator|.
name|matches
argument_list|(
name|gordyCert
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// both satisfy either CN=Bethal or O=ApacheTest
comment|//
name|tmp
operator|=
name|loadCertConstraints
argument_list|(
literal|"subject-CN-bethal-O-apache-ANY"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmp
operator|.
name|matches
argument_list|(
name|bethalCert
argument_list|)
operator|&&
name|tmp
operator|.
name|matches
argument_list|(
name|gordyCert
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// only Bethal has "Bethal" as an issuer
comment|//
name|tmp
operator|=
name|loadCertConstraints
argument_list|(
literal|"issuer-CN-bethal-O-apache"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tmp
operator|.
name|matches
argument_list|(
name|bethalCert
argument_list|)
operator|&&
operator|!
name|tmp
operator|.
name|matches
argument_list|(
name|gordyCert
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Private utilities
comment|//
specifier|private
specifier|static
name|CertConstraints
name|loadCertConstraints
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|CertificateConstraintsType
name|certsConstraintsType
init|=
name|loadCertificateConstraintsType
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
name|CertConstraintsJaxBUtils
operator|.
name|createCertConstraints
argument_list|(
name|certsConstraintsType
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|CertificateConstraintsType
name|loadCertificateConstraintsType
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|loadGeneratedType
argument_list|(
name|CertificateConstraintsType
operator|.
name|class
argument_list|,
literal|"certConstraints"
argument_list|,
literal|"resources/cert-constraints.xml"
argument_list|,
name|id
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|X509Certificate
name|loadCertificate
parameter_list|(
specifier|final
name|String
name|keystoreFilename
parameter_list|,
specifier|final
name|String
name|keystoreType
parameter_list|,
specifier|final
name|String
name|keystorePassword
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|KeyStore
name|store
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|keystoreType
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|CertConstraintsTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/cxf/transport/https/resources/"
operator|+
name|keystoreFilename
argument_list|)
init|)
block|{
name|store
operator|.
name|load
argument_list|(
name|is
argument_list|,
name|keystorePassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Enumeration
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|store
operator|.
name|aliases
argument_list|()
init|;
name|aliases
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|alias
init|=
name|aliases
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|alias
argument_list|)
condition|)
block|{
return|return
operator|(
name|X509Certificate
operator|)
name|store
operator|.
name|getCertificate
argument_list|(
name|alias
argument_list|)
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"error in test -- keystore "
operator|+
name|id
operator|+
literal|" has no trusted certs"
argument_list|)
throw|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|loadGeneratedType
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|,
specifier|final
name|String
name|elementName
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|doc
init|=
name|loadDocument
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
name|testData
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
specifier|final
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
name|data
init|=
name|testData
operator|.
name|getElementsByTagName
argument_list|(
literal|"datum"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
name|datum
init|=
operator|(
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
operator|)
name|data
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|datum
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
specifier|final
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
name|elts
init|=
name|datum
operator|.
name|getElementsByTagNameNS
argument_list|(
literal|"http://cxf.apache.org/configuration/security"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|elts
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|unmarshal
argument_list|(
name|cls
argument_list|,
operator|(
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
operator|)
name|elts
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Bad test!  No test data with id "
operator|+
name|id
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|loadDocument
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|inStream
init|=
name|CertConstraintsTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
init|)
block|{
return|return
name|StaxUtils
operator|.
name|read
argument_list|(
name|inStream
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|unmarshal
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|,
specifier|final
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
name|elt
parameter_list|)
throws|throws
name|JAXBException
block|{
specifier|final
name|JAXBContext
name|ctx
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|cls
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Unmarshaller
name|unmarshaller
init|=
name|ctx
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
specifier|final
name|JAXBElement
argument_list|<
name|T
argument_list|>
name|jaxbElement
init|=
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|elt
argument_list|,
name|cls
argument_list|)
decl_stmt|;
return|return
name|jaxbElement
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

