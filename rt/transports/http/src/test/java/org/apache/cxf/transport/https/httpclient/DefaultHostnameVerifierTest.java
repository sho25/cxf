begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/*  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|httpclient
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit tests for the DefaultHostnameVerifier  *  * Copied from httpclient  */
end_comment

begin_class
specifier|public
class|class
name|DefaultHostnameVerifierTest
block|{
specifier|private
name|DefaultHostnameVerifier
name|impl
decl_stmt|;
specifier|private
name|PublicSuffixMatcher
name|publicSuffixMatcher
decl_stmt|;
specifier|private
name|DefaultHostnameVerifier
name|implWithPublicSuffixCheck
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|impl
operator|=
operator|new
name|DefaultHostnameVerifier
argument_list|()
expr_stmt|;
name|publicSuffixMatcher
operator|=
operator|new
name|PublicSuffixMatcher
argument_list|(
name|DomainType
operator|.
name|ICANN
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"com"
argument_list|,
literal|"co.jp"
argument_list|,
literal|"gov.uk"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|implWithPublicSuffixCheck
operator|=
operator|new
name|DefaultHostnameVerifier
argument_list|(
name|publicSuffixMatcher
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerify
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CertificateFactory
name|cf
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
name|InputStream
name|in
decl_stmt|;
name|X509Certificate
name|x509
decl_stmt|;
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|CertificatesToPlayWith
operator|.
name|X509_FOO
argument_list|)
expr_stmt|;
name|x509
operator|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"a.foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"bar.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|CertificatesToPlayWith
operator|.
name|X509_HANAKO
argument_list|)
expr_stmt|;
name|x509
operator|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"\u82b1\u5b50.co.jp"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"a.\u82b1\u5b50.co.jp"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|CertificatesToPlayWith
operator|.
name|X509_FOO_BAR
argument_list|)
expr_stmt|;
name|x509
operator|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"a.foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"bar.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"a.bar.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|CertificatesToPlayWith
operator|.
name|X509_FOO_BAR_HANAKO
argument_list|)
expr_stmt|;
name|x509
operator|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"a.foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"bar.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"a.bar.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
comment|/*            Java isn't extracting international subjectAlts properly.  (Or            OpenSSL isn't storing them properly).         */
comment|// DEFAULT.verify("\u82b1\u5b50.co.jp", x509 );
comment|// impl.verify("\u82b1\u5b50.co.jp", x509 );
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"a.\u82b1\u5b50.co.jp"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|CertificatesToPlayWith
operator|.
name|X509_NO_CNS_FOO
argument_list|)
expr_stmt|;
name|x509
operator|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"a.foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|CertificatesToPlayWith
operator|.
name|X509_NO_CNS_FOO
argument_list|)
expr_stmt|;
name|x509
operator|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"a.foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|CertificatesToPlayWith
operator|.
name|X509_THREE_CNS_FOO_BAR_HANAKO
argument_list|)
expr_stmt|;
name|x509
operator|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"a.foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"bar.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"a.bar.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"\u82b1\u5b50.co.jp"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"a.\u82b1\u5b50.co.jp"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|CertificatesToPlayWith
operator|.
name|X509_WILD_FOO
argument_list|)
expr_stmt|;
name|x509
operator|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"www.foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"\u82b1\u5b50.foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"a.b.foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|CertificatesToPlayWith
operator|.
name|X509_WILD_CO_JP
argument_list|)
expr_stmt|;
name|x509
operator|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// Silly test because no-one would ever be able to lookup an IP address
comment|// using "*.co.jp".
name|impl
operator|.
name|verify
argument_list|(
literal|"*.co.jp"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"foo.co.jp"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"\u82b1\u5b50.co.jp"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|implWithPublicSuffixCheck
argument_list|,
literal|"foo.co.jp"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|implWithPublicSuffixCheck
argument_list|,
literal|"\u82b1\u5b50.co.jp"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|CertificatesToPlayWith
operator|.
name|X509_WILD_FOO_BAR_HANAKO
argument_list|)
expr_stmt|;
name|x509
operator|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|// try the foo.com variations
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"www.foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"\u82b1\u5b50.foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"a.b.foo.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
comment|// try the bar.com variations
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"bar.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"www.bar.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"\u82b1\u5b50.bar.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|exceptionPlease
argument_list|(
name|impl
argument_list|,
literal|"a.b.bar.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|CertificatesToPlayWith
operator|.
name|X509_MULTIPLE_VALUE_AVA
argument_list|)
expr_stmt|;
name|x509
operator|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"repository.infonotary.com"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubjectAlt
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CertificateFactory
name|cf
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X.509"
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|CertificatesToPlayWith
operator|.
name|X509_MULTIPLE_SUBJECT_ALT
argument_list|)
decl_stmt|;
specifier|final
name|X509Certificate
name|x509
init|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"CN=localhost, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=CH"
argument_list|,
name|x509
operator|.
name|getSubjectDN
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"localhost.localdomain"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|impl
operator|.
name|verify
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
try|try
block|{
name|impl
operator|.
name|verify
argument_list|(
literal|"localhost"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"SSLException should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SSLException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|impl
operator|.
name|verify
argument_list|(
literal|"local.host"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"SSLException should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SSLException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|impl
operator|.
name|verify
argument_list|(
literal|"127.0.0.2"
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"SSLException should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SSLException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|public
name|void
name|exceptionPlease
parameter_list|(
specifier|final
name|DefaultHostnameVerifier
name|hv
parameter_list|,
specifier|final
name|String
name|host
parameter_list|,
specifier|final
name|X509Certificate
name|x509
parameter_list|)
block|{
try|try
block|{
name|hv
operator|.
name|verify
argument_list|(
name|host
argument_list|,
name|x509
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"HostnameVerifier shouldn't allow ["
operator|+
name|host
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SSLException
name|e
parameter_list|)
block|{
comment|// whew!  we're okay!
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDomainRootMatching
parameter_list|()
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchDomainRoot
argument_list|(
literal|"a.b.c"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchDomainRoot
argument_list|(
literal|"a.b.c"
argument_list|,
literal|"a.b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchDomainRoot
argument_list|(
literal|"aa.b.c"
argument_list|,
literal|"a.b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchDomainRoot
argument_list|(
literal|"a.b.c"
argument_list|,
literal|"aa.b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchDomainRoot
argument_list|(
literal|"a.a.b.c"
argument_list|,
literal|"a.b.c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIdentityMatching
parameter_list|()
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentity
argument_list|(
literal|"a.b.c"
argument_list|,
literal|"*.b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentityStrict
argument_list|(
literal|"a.b.c"
argument_list|,
literal|"*.b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentity
argument_list|(
literal|"s.a.b.c"
argument_list|,
literal|"*.b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentityStrict
argument_list|(
literal|"s.a.b.c"
argument_list|,
literal|"*.b.c"
argument_list|)
argument_list|)
expr_stmt|;
comment|// subdomain not OK
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentity
argument_list|(
literal|"a.gov.uk"
argument_list|,
literal|"*.gov.uk"
argument_list|,
name|publicSuffixMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentityStrict
argument_list|(
literal|"a.gov.uk"
argument_list|,
literal|"*.gov.uk"
argument_list|,
name|publicSuffixMatcher
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bad 2TLD
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentity
argument_list|(
literal|"s.a.gov.uk"
argument_list|,
literal|"*.a.gov.uk"
argument_list|,
name|publicSuffixMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentityStrict
argument_list|(
literal|"s.a.gov.uk"
argument_list|,
literal|"*.a.gov.uk"
argument_list|,
name|publicSuffixMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentity
argument_list|(
literal|"s.a.gov.uk"
argument_list|,
literal|"*.gov.uk"
argument_list|,
name|publicSuffixMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentityStrict
argument_list|(
literal|"s.a.gov.uk"
argument_list|,
literal|"*.gov.uk"
argument_list|,
name|publicSuffixMatcher
argument_list|)
argument_list|)
expr_stmt|;
comment|// BBad 2TLD/no subdomain allowed
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentity
argument_list|(
literal|"a.gov.com"
argument_list|,
literal|"*.gov.com"
argument_list|,
name|publicSuffixMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentityStrict
argument_list|(
literal|"a.gov.com"
argument_list|,
literal|"*.gov.com"
argument_list|,
name|publicSuffixMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentity
argument_list|(
literal|"s.a.gov.com"
argument_list|,
literal|"*.gov.com"
argument_list|,
name|publicSuffixMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentityStrict
argument_list|(
literal|"s.a.gov.com"
argument_list|,
literal|"*.gov.com"
argument_list|,
name|publicSuffixMatcher
argument_list|)
argument_list|)
expr_stmt|;
comment|// no subdomain allowed
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentity
argument_list|(
literal|"a.gov.uk"
argument_list|,
literal|"a*.gov.uk"
argument_list|,
name|publicSuffixMatcher
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentityStrict
argument_list|(
literal|"a.gov.uk"
argument_list|,
literal|"a*.gov.uk"
argument_list|,
name|publicSuffixMatcher
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bad 2TLD
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentity
argument_list|(
literal|"s.a.gov.uk"
argument_list|,
literal|"a*.gov.uk"
argument_list|,
name|publicSuffixMatcher
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bad 2TLD
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentityStrict
argument_list|(
literal|"s.a.gov.uk"
argument_list|,
literal|"a*.gov.uk"
argument_list|,
name|publicSuffixMatcher
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bad 2TLD/no subdomain allowed
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentity
argument_list|(
literal|"a.b.c"
argument_list|,
literal|"*.b.*"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentityStrict
argument_list|(
literal|"a.b.c"
argument_list|,
literal|"*.b.*"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentity
argument_list|(
literal|"a.b.c"
argument_list|,
literal|"*.*.c"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentityStrict
argument_list|(
literal|"a.b.c"
argument_list|,
literal|"*.*.c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHttpClient1097
parameter_list|()
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentity
argument_list|(
literal|"a.b.c"
argument_list|,
literal|"a*.b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentityStrict
argument_list|(
literal|"a.b.c"
argument_list|,
literal|"a*.b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentity
argument_list|(
literal|"a.a.b.c"
argument_list|,
literal|"a*.b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentityStrict
argument_list|(
literal|"a.a.b.c"
argument_list|,
literal|"a*.b.c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHttpClient1255
parameter_list|()
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentity
argument_list|(
literal|"mail.a.b.c.com"
argument_list|,
literal|"m*.a.b.c.com"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|DefaultHostnameVerifier
operator|.
name|matchIdentityStrict
argument_list|(
literal|"mail.a.b.c.com"
argument_list|,
literal|"m*.a.b.c.com"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Check compressed IPv6 hostname matching
specifier|public
name|void
name|testHttpClient1316
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|host1
init|=
literal|"2001:0db8:aaaa:bbbb:cccc:0:0:0001"
decl_stmt|;
name|DefaultHostnameVerifier
operator|.
name|matchIPv6Address
argument_list|(
name|host1
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2001:0db8:aaaa:bbbb:cccc:0:0:0001"
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultHostnameVerifier
operator|.
name|matchIPv6Address
argument_list|(
name|host1
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2001:0db8:aaaa:bbbb:cccc::1"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|DefaultHostnameVerifier
operator|.
name|matchIPv6Address
argument_list|(
name|host1
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2001:0db8:aaaa:bbbb:cccc::10"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"SSLException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SSLException
name|expected
parameter_list|)
block|{
comment|//
block|}
specifier|final
name|String
name|host2
init|=
literal|"2001:0db8:aaaa:bbbb:cccc::1"
decl_stmt|;
name|DefaultHostnameVerifier
operator|.
name|matchIPv6Address
argument_list|(
name|host2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2001:0db8:aaaa:bbbb:cccc:0:0:0001"
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultHostnameVerifier
operator|.
name|matchIPv6Address
argument_list|(
name|host2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2001:0db8:aaaa:bbbb:cccc::1"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|DefaultHostnameVerifier
operator|.
name|matchIPv6Address
argument_list|(
name|host2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2001:0db8:aaaa:bbbb:cccc::10"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"SSLException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SSLException
name|expected
parameter_list|)
block|{
comment|//
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractCN
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|DefaultHostnameVerifier
operator|.
name|extractCN
argument_list|(
literal|"cn=blah, ou=blah, o=blah"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|DefaultHostnameVerifier
operator|.
name|extractCN
argument_list|(
literal|"cn=blah, cn=yada, cn=booh"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|DefaultHostnameVerifier
operator|.
name|extractCN
argument_list|(
literal|"c = pampa ,  cn  =    blah    , ou = blah , o = blah"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|DefaultHostnameVerifier
operator|.
name|extractCN
argument_list|(
literal|"cn=\"blah\", ou=blah, o=blah"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"blah  blah"
argument_list|,
name|DefaultHostnameVerifier
operator|.
name|extractCN
argument_list|(
literal|"cn=\"blah  blah\", ou=blah, o=blah"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"blah, blah"
argument_list|,
name|DefaultHostnameVerifier
operator|.
name|extractCN
argument_list|(
literal|"cn=\"blah, blah\", ou=blah, o=blah"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"blah, blah"
argument_list|,
name|DefaultHostnameVerifier
operator|.
name|extractCN
argument_list|(
literal|"cn=blah\\, blah, ou=blah, o=blah"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"blah"
argument_list|,
name|DefaultHostnameVerifier
operator|.
name|extractCN
argument_list|(
literal|"c = cn=uuh, cn=blah, ou=blah, o=blah"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|DefaultHostnameVerifier
operator|.
name|extractCN
argument_list|(
literal|"blah,blah"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"SSLException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SSLException
name|expected
parameter_list|)
block|{
comment|//
block|}
try|try
block|{
name|DefaultHostnameVerifier
operator|.
name|extractCN
argument_list|(
literal|"cn,o=blah"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"SSLException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SSLException
name|expected
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
end_class

end_unit

