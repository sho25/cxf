begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|servlet
operator|.
name|servicelist
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|servlet
operator|.
name|BaseUrlHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|BaseUrlHelperTest
block|{
specifier|private
name|String
name|testGetBaseURL
parameter_list|(
name|String
name|requestUrl
parameter_list|,
name|String
name|contextPath
parameter_list|,
name|String
name|servletPath
parameter_list|,
name|String
name|pathInfo
parameter_list|)
block|{
name|HttpServletRequest
name|req
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|req
operator|.
name|getRequestURL
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|requestUrl
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|getContextPath
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
name|req
operator|.
name|getServletPath
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|servletPath
argument_list|)
expr_stmt|;
name|req
operator|.
name|getPathInfo
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|pathInfo
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|String
name|basePath
init|=
name|contextPath
operator|+
name|servletPath
decl_stmt|;
if|if
condition|(
name|basePath
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|req
operator|.
name|getRequestURI
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|pathInfo
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|replay
argument_list|(
name|req
argument_list|)
expr_stmt|;
return|return
name|BaseUrlHelper
operator|.
name|getBaseURL
argument_list|(
name|req
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRequestURL
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|testGetBaseURL
argument_list|(
literal|"http://localhost:8080/services/bar"
argument_list|,
literal|""
argument_list|,
literal|"/services"
argument_list|,
literal|"/bar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://localhost:8080/services"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRequestURL2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|testGetBaseURL
argument_list|(
literal|"http://localhost:8080/services/bar"
argument_list|,
literal|"/services"
argument_list|,
literal|""
argument_list|,
literal|"/bar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://localhost:8080/services"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRequestURL3
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|testGetBaseURL
argument_list|(
literal|"http://localhost:8080/services/bar"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|"/services/bar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://localhost:8080"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRequestURLSingleMatrixParam
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|testGetBaseURL
argument_list|(
literal|"http://localhost:8080/services/bar;a=b"
argument_list|,
literal|""
argument_list|,
literal|"/services"
argument_list|,
literal|"/bar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://localhost:8080/services"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRequestURLMultipleMatrixParam
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|testGetBaseURL
argument_list|(
literal|"http://localhost:8080/services/bar;a=b;c=d;e=f"
argument_list|,
literal|""
argument_list|,
literal|"/services"
argument_list|,
literal|"/bar"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://localhost:8080/services"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRequestURLMultipleMatrixParam2
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|testGetBaseURL
argument_list|(
literal|"http://localhost:8080/services/bar;a=b;c=d;e=f"
argument_list|,
literal|""
argument_list|,
literal|"/services"
argument_list|,
literal|"/bar;a=b;c=d"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://localhost:8080/services"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRequestURLMultipleMatrixParam3
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|testGetBaseURL
argument_list|(
literal|"http://localhost:8080/services/bar;a=b;c=d;e=f"
argument_list|,
literal|""
argument_list|,
literal|"/services"
argument_list|,
literal|"/bar;a=b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://localhost:8080/services"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRequestURLMultipleMatrixParam4
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|testGetBaseURL
argument_list|(
literal|"http://localhost:8080/services/bar;a=b;c=d;e=f;"
argument_list|,
literal|""
argument_list|,
literal|"/services"
argument_list|,
literal|"/bar;a=b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"http://localhost:8080/services"
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

