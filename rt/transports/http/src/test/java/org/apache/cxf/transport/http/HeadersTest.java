begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|HeadersTest
extends|extends
name|Assert
block|{
specifier|private
name|IMocksControl
name|control
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setHeadersTest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|headerNames
init|=
block|{
literal|"Content-Type"
block|,
literal|"authorization"
block|,
literal|"soapAction"
block|}
decl_stmt|;
name|String
index|[]
name|headerValues
init|=
block|{
literal|"text/xml"
block|,
literal|"Basic Zm9vOmJhcg=="
block|,
literal|"foo"
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|inmap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|headerNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inmap
operator|.
name|put
argument_list|(
name|headerNames
index|[
name|i
index|]
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|headerValues
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HttpServletRequest
name|req
init|=
name|control
operator|.
name|createMock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|req
operator|.
name|getHeaderNames
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|enumeration
argument_list|(
name|inmap
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|headerNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|req
operator|.
name|getHeaders
argument_list|(
name|headerNames
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|enumeration
argument_list|(
name|inmap
operator|.
name|get
argument_list|(
name|headerNames
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|expect
argument_list|(
name|req
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|headerValues
index|[
literal|0
index|]
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_REQUEST
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|Headers
name|headers
init|=
operator|new
name|Headers
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|headers
operator|.
name|copyFromRequest
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|protocolHeaders
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"unexpected size"
argument_list|,
name|protocolHeaders
operator|.
name|size
argument_list|()
operator|==
name|headerNames
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected header"
argument_list|,
name|protocolHeaders
operator|.
name|get
argument_list|(
literal|"Content-Type"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|headerValues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected header"
argument_list|,
name|protocolHeaders
operator|.
name|get
argument_list|(
literal|"content-type"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|headerValues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected header"
argument_list|,
name|protocolHeaders
operator|.
name|get
argument_list|(
literal|"CONTENT-TYPE"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|headerValues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected header"
argument_list|,
name|protocolHeaders
operator|.
name|get
argument_list|(
literal|"content-TYPE"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|headerValues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected header"
argument_list|,
name|protocolHeaders
operator|.
name|get
argument_list|(
literal|"Authorization"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|headerValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected header"
argument_list|,
name|protocolHeaders
operator|.
name|get
argument_list|(
literal|"authorization"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|headerValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected header"
argument_list|,
name|protocolHeaders
operator|.
name|get
argument_list|(
literal|"AUTHORIZATION"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|headerValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected header"
argument_list|,
name|protocolHeaders
operator|.
name|get
argument_list|(
literal|"authoriZATION"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|headerValues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected header"
argument_list|,
name|protocolHeaders
operator|.
name|get
argument_list|(
literal|"SOAPAction"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|headerValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected header"
argument_list|,
name|protocolHeaders
operator|.
name|get
argument_list|(
literal|"soapaction"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|headerValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected header"
argument_list|,
name|protocolHeaders
operator|.
name|get
argument_list|(
literal|"SOAPACTION"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|headerValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected header"
argument_list|,
name|protocolHeaders
operator|.
name|get
argument_list|(
literal|"soapAction"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|headerValues
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

