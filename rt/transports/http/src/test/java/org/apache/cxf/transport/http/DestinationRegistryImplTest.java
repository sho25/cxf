begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|DestinationRegistryImplTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ADDRESS
init|=
literal|"http://bar/snafu"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|QNAME
init|=
operator|new
name|QName
argument_list|(
name|ADDRESS
argument_list|,
literal|"foobar"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|REGISTERED_PATHS
init|=
block|{
literal|"/soap"
block|,
literal|"/soap2"
block|,
literal|"/soappath"
block|,
literal|"/soap/test"
block|,
literal|"/test/tst"
block|,
literal|"/test2/"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|REQUEST_PATHS
init|=
block|{
literal|"/soap"
block|,
literal|"/soap/2"
block|,
literal|"/soap2"
block|,
literal|"/soap3"
block|,
literal|"/soap/test"
block|,
literal|"/soap/tst"
block|,
literal|"/soap/"
block|,
literal|"/test/tst/2"
block|,
literal|"/test/2"
block|,
literal|"/test2"
block|,
literal|"/test2/"
block|,
literal|"/test2/3"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|MATCHED_PATH_INDEXES
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|4
block|,
operator|-
literal|1
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|}
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|DestinationRegistry
name|registry
decl_stmt|;
specifier|private
name|MessageObserver
name|observer
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|registry
operator|=
operator|new
name|DestinationRegistryImpl
argument_list|()
expr_stmt|;
name|observer
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|MessageObserver
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|control
operator|=
literal|null
expr_stmt|;
name|registry
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAndGetDestinations
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpDestinations
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|registry
operator|.
name|getDestinationsPaths
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|REGISTERED_PATHS
operator|.
name|length
argument_list|,
name|paths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REGISTERED_PATHS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|paths
operator|.
name|contains
argument_list|(
name|REGISTERED_PATHS
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|AbstractHTTPDestination
name|path
init|=
name|registry
operator|.
name|getDestinationForPath
argument_list|(
name|REGISTERED_PATHS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckRestfulRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpDestinations
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REQUEST_PATHS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|mi
init|=
name|MATCHED_PATH_INDEXES
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|REGISTERED_PATHS
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|AbstractHTTPDestination
name|target
init|=
name|registry
operator|.
name|getDestinationForPath
argument_list|(
name|REGISTERED_PATHS
index|[
name|j
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|mi
operator|==
name|j
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|target
operator|.
name|getMessageObserver
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|observer
argument_list|)
expr_stmt|;
name|EndpointInfo
name|endpoint
init|=
operator|new
name|EndpointInfo
argument_list|()
decl_stmt|;
name|endpoint
operator|.
name|setAddress
argument_list|(
name|REGISTERED_PATHS
index|[
name|mi
index|]
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setName
argument_list|(
name|QNAME
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|target
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|target
operator|.
name|getMessageObserver
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|observer
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
block|}
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|AbstractHTTPDestination
name|destination
init|=
name|registry
operator|.
name|checkRestfulRequest
argument_list|(
name|REQUEST_PATHS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|mi
condition|)
block|{
name|EndpointInfo
name|endpoint
init|=
name|destination
operator|.
name|getEndpointInfo
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|endpoint
operator|.
name|getAddress
argument_list|()
argument_list|,
name|REGISTERED_PATHS
index|[
name|mi
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setUpDestinations
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|REGISTERED_PATHS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|AbstractHTTPDestination
name|destination
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AbstractHTTPDestination
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInfo
name|endpoint
init|=
operator|new
name|EndpointInfo
argument_list|()
decl_stmt|;
name|endpoint
operator|.
name|setAddress
argument_list|(
name|REGISTERED_PATHS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setName
argument_list|(
name|QNAME
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destination
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|registry
operator|.
name|addDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

