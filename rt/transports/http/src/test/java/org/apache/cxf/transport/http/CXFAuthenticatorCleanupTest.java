begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Authenticator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|PasswordAuthentication
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|CXFAuthenticatorCleanupTest
block|{
comment|/**      *      */
specifier|public
name|CXFAuthenticatorCleanupTest
parameter_list|()
block|{     }
annotation|@
name|Test
specifier|public
name|void
name|runCleanupTestStrongRef
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|traceLengths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//create a chain of CXFAuthenticators, strongly referenced to prevent cleanups
name|Authenticator
operator|.
name|setDefault
argument_list|(
operator|new
name|Authenticator
argument_list|()
block|{
specifier|protected
name|PasswordAuthentication
name|getPasswordAuthentication
parameter_list|()
block|{
name|traceLengths
operator|.
name|add
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getPasswordAuthentication
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|InetAddress
name|add
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
name|Authenticator
operator|.
name|requestPasswordAuthentication
argument_list|(
literal|"localhost"
argument_list|,
name|add
argument_list|,
literal|8080
argument_list|,
literal|"http"
argument_list|,
literal|"hello"
argument_list|,
literal|"http"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CXFAuthenticator
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|20
condition|;
name|x
operator|++
control|)
block|{
name|CXFAuthenticator
operator|.
name|addAuthenticator
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|CXFAuthenticator
operator|.
name|instance
argument_list|)
expr_stmt|;
name|CXFAuthenticator
operator|.
name|instance
operator|=
literal|null
expr_stmt|;
block|}
name|Authenticator
operator|.
name|requestPasswordAuthentication
argument_list|(
literal|"localhost"
argument_list|,
name|add
argument_list|,
literal|8080
argument_list|,
literal|"http"
argument_list|,
literal|"hello"
argument_list|,
literal|"http"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|9
init|;
name|x
operator|>
literal|0
condition|;
name|x
operator|-=
literal|2
control|)
block|{
name|list
operator|.
name|remove
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|10
condition|;
name|x
operator|++
control|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|Authenticator
operator|.
name|requestPasswordAuthentication
argument_list|(
literal|"localhost"
argument_list|,
name|add
argument_list|,
literal|8080
argument_list|,
literal|"http"
argument_list|,
literal|"hello"
argument_list|,
literal|"http"
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|10
condition|;
name|x
operator|++
control|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|Authenticator
operator|.
name|requestPasswordAuthentication
argument_list|(
literal|"localhost"
argument_list|,
name|add
argument_list|,
literal|8080
argument_list|,
literal|"http"
argument_list|,
literal|"hello"
argument_list|,
literal|"http"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|22
argument_list|,
name|traceLengths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//first trace would be just the raw authenticator above
name|int
name|raw
init|=
name|traceLengths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//second would be the trace with ALL the auths
name|int
name|all
init|=
name|traceLengths
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|//after remove of 5 and some gc's
name|int
name|some
init|=
name|traceLengths
operator|.
name|get
argument_list|(
literal|11
argument_list|)
decl_stmt|;
comment|//after clear and gc's
name|int
name|none
init|=
name|traceLengths
operator|.
name|get
argument_list|(
name|traceLengths
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|//System.out.println(traceLengths);
name|Assert
operator|.
name|assertTrue
argument_list|(
name|all
operator|>
operator|(
name|raw
operator|+
literal|20
operator|*
literal|3
operator|)
argument_list|)
expr_stmt|;
comment|//all should be A LOT above raw
name|Assert
operator|.
name|assertTrue
argument_list|(
name|all
operator|>
name|raw
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|all
operator|>
name|some
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|some
operator|>
name|none
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|raw
argument_list|,
name|none
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|runCleanupTestWeakRef
parameter_list|()
throws|throws
name|Exception
block|{
name|InetAddress
name|add
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|traceLengths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//create a chain of CXFAuthenticators, strongly referenced to prevent cleanups
name|Authenticator
operator|.
name|setDefault
argument_list|(
operator|new
name|Authenticator
argument_list|()
block|{
specifier|protected
name|PasswordAuthentication
name|getPasswordAuthentication
parameter_list|()
block|{
name|traceLengths
operator|.
name|add
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getPasswordAuthentication
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Authenticator
operator|.
name|requestPasswordAuthentication
argument_list|(
literal|"localhost"
argument_list|,
name|add
argument_list|,
literal|8080
argument_list|,
literal|"http"
argument_list|,
literal|"hello"
argument_list|,
literal|"http"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|20
condition|;
name|x
operator|++
control|)
block|{
name|CXFAuthenticator
operator|.
name|addAuthenticator
argument_list|()
expr_stmt|;
name|CXFAuthenticator
operator|.
name|instance
operator|=
literal|null
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
name|CXFAuthenticator
operator|.
name|addAuthenticator
argument_list|()
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|Authenticator
operator|.
name|requestPasswordAuthentication
argument_list|(
literal|"localhost"
argument_list|,
name|add
argument_list|,
literal|8080
argument_list|,
literal|"http"
argument_list|,
literal|"hello"
argument_list|,
literal|"http"
argument_list|)
expr_stmt|;
name|CXFAuthenticator
operator|.
name|instance
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|10
condition|;
name|x
operator|++
control|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|Authenticator
operator|.
name|requestPasswordAuthentication
argument_list|(
literal|"localhost"
argument_list|,
name|add
argument_list|,
literal|8080
argument_list|,
literal|"http"
argument_list|,
literal|"hello"
argument_list|,
literal|"http"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|traceLengths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//first trace would be just the raw authenticator above
name|int
name|raw
init|=
name|traceLengths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//second trace should still have an Authenticator added
name|int
name|one
init|=
name|traceLengths
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|//after clear and gc's
name|int
name|none
init|=
name|traceLengths
operator|.
name|get
argument_list|(
name|traceLengths
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|/*stacktrace for one should be different with raw          * but the stracktrace length in java 8 and java 9-plus          * isn't identical          * so previous assertion one< (raw + (20 * 2)          * isn't applicable for java 9-plus          */
name|Assert
operator|.
name|assertTrue
argument_list|(
name|one
operator|!=
name|raw
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|one
operator|>
name|raw
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|one
operator|>
name|none
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|raw
argument_list|,
name|none
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

