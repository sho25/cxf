begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|asyncclient
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PushbackInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HostnameVerifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509KeyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|SSLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSClientParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|HttpHeaderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CacheAndWriteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|Headers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|URLConnectionHTTPConduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|AliasedX509ExtendedKeyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|CertificateHostnameVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|HttpsURLConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPClientPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|UsernamePasswordCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|CredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|protocol
operator|.
name|ClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|params
operator|.
name|ConnRouteParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|BasicHttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|util
operator|.
name|HeapByteBufferAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|params
operator|.
name|CoreConnectionPNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|BasicHttpContext
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|AsyncHTTPConduit
extends|extends
name|URLConnectionHTTPConduit
block|{
specifier|public
specifier|static
specifier|final
name|String
name|USE_ASYNC
init|=
literal|"use.async.http.conduit"
decl_stmt|;
specifier|final
name|AsyncHTTPConduitFactory
name|factory
decl_stmt|;
specifier|volatile
name|int
name|lastTlsHash
init|=
operator|-
literal|1
decl_stmt|;
specifier|volatile
name|Object
name|sslState
decl_stmt|;
specifier|volatile
name|SSLContext
name|sslContext
decl_stmt|;
specifier|public
name|AsyncHTTPConduit
parameter_list|(
name|Bus
name|b
parameter_list|,
name|EndpointInfo
name|ei
parameter_list|,
name|EndpointReferenceType
name|t
parameter_list|,
name|AsyncHTTPConduitFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|b
argument_list|,
name|ei
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
block|}
specifier|protected
name|void
name|setupConnection
parameter_list|(
name|Message
name|message
parameter_list|,
name|URI
name|uri
parameter_list|,
name|HTTPClientPolicy
name|csPolicy
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|factory
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|USE_ASYNC
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|super
operator|.
name|setupConnection
argument_list|(
name|message
argument_list|,
name|uri
argument_list|,
name|csPolicy
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|s
init|=
name|uri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"http"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|&&
operator|!
literal|"https"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"unknown protocol: "
operator|+
name|s
argument_list|)
throw|;
block|}
name|Object
name|o
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|USE_ASYNC
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
switch|switch
condition|(
name|factory
operator|.
name|getUseAsyncPolicy
argument_list|()
condition|)
block|{
case|case
name|ALWAYS
case|:
name|o
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|NEVER
case|:
name|o
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|ASYNC_ONLY
case|:
default|default:
name|o
operator|=
operator|!
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|isSynchronous
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|USE_ASYNC
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|super
operator|.
name|setupConnection
argument_list|(
name|message
argument_list|,
name|uri
argument_list|,
name|csPolicy
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
comment|//hc needs to have the path be "/"
name|uri
operator|=
name|uri
operator|.
name|resolve
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|put
argument_list|(
name|USE_ASYNC
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"http.scheme"
argument_list|,
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|httpRequestMethod
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpRequestMethod
operator|==
literal|null
condition|)
block|{
name|httpRequestMethod
operator|=
literal|"POST"
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
name|httpRequestMethod
argument_list|)
expr_stmt|;
block|}
name|CXFHttpRequest
name|e
init|=
operator|new
name|CXFHttpRequest
argument_list|(
name|httpRequestMethod
argument_list|)
decl_stmt|;
name|BasicHttpEntity
name|entity
init|=
operator|new
name|BasicHttpEntity
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setChunked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setContentType
argument_list|(
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setURI
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|e
operator|.
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
comment|// Set socket timeout
name|e
operator|.
name|getParams
argument_list|()
operator|.
name|setParameter
argument_list|(
name|CoreConnectionPNames
operator|.
name|SO_TIMEOUT
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|int
operator|)
name|csPolicy
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Proxy
name|p
init|=
name|proxyFactory
operator|.
name|createProxy
argument_list|(
name|csPolicy
argument_list|,
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|InetSocketAddress
name|isa
init|=
operator|(
name|InetSocketAddress
operator|)
name|p
operator|.
name|address
argument_list|()
decl_stmt|;
name|HttpHost
name|proxy
init|=
operator|new
name|HttpHost
argument_list|(
name|isa
operator|.
name|getHostName
argument_list|()
argument_list|,
name|isa
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|ConnRouteParams
operator|.
name|setDefaultProxy
argument_list|(
name|e
operator|.
name|getParams
argument_list|()
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|put
argument_list|(
name|CXFHttpRequest
operator|.
name|class
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|OutputStream
name|createOutputStream
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|needToCacheRequest
parameter_list|,
name|boolean
name|isChunking
parameter_list|,
name|int
name|chunkThreshold
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|USE_ASYNC
argument_list|)
argument_list|)
condition|)
block|{
name|CXFHttpRequest
name|entity
init|=
name|message
operator|.
name|get
argument_list|(
name|CXFHttpRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|AsyncWrappedOutputStream
name|out
init|=
operator|new
name|AsyncWrappedOutputStream
argument_list|(
name|message
argument_list|,
name|needToCacheRequest
argument_list|,
name|isChunking
argument_list|,
name|chunkThreshold
argument_list|,
name|getConduitName
argument_list|()
argument_list|,
name|entity
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
name|entity
operator|.
name|setOutputStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
return|return
name|super
operator|.
name|createOutputStream
argument_list|(
name|message
argument_list|,
name|needToCacheRequest
argument_list|,
name|isChunking
argument_list|,
name|chunkThreshold
argument_list|)
return|;
block|}
specifier|public
class|class
name|AsyncWrappedOutputStream
extends|extends
name|WrappedOutputStream
block|{
specifier|final
name|HTTPClientPolicy
name|csPolicy
decl_stmt|;
name|CXFHttpRequest
name|entity
decl_stmt|;
name|BasicHttpEntity
name|basicEntity
decl_stmt|;
name|boolean
name|isAsync
decl_stmt|;
name|SharedInputBuffer
name|inbuf
decl_stmt|;
name|SharedOutputBuffer
name|outbuf
decl_stmt|;
comment|// Objects for the response
specifier|volatile
name|HttpResponse
name|httpResponse
decl_stmt|;
specifier|volatile
name|Exception
name|exception
decl_stmt|;
specifier|volatile
name|SSLSession
name|session
decl_stmt|;
specifier|private
name|Future
argument_list|<
name|Boolean
argument_list|>
name|connectionFuture
decl_stmt|;
specifier|private
name|Object
name|sessionLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|public
name|AsyncWrappedOutputStream
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|needToCacheRequest
parameter_list|,
name|boolean
name|isChunking
parameter_list|,
name|int
name|chunkThreshold
parameter_list|,
name|String
name|conduitName
parameter_list|,
name|URI
name|uri
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|needToCacheRequest
argument_list|,
name|isChunking
argument_list|,
name|chunkThreshold
argument_list|,
name|conduitName
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|csPolicy
operator|=
name|getClient
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|entity
operator|=
name|message
operator|.
name|get
argument_list|(
name|CXFHttpRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|basicEntity
operator|=
operator|(
name|BasicHttpEntity
operator|)
name|entity
operator|.
name|getEntity
argument_list|()
expr_stmt|;
name|HeapByteBufferAllocator
name|allocator
init|=
operator|new
name|HeapByteBufferAllocator
argument_list|()
decl_stmt|;
name|inbuf
operator|=
operator|new
name|SharedInputBuffer
argument_list|(
literal|16320
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
name|outbuf
operator|=
operator|new
name|SharedOutputBuffer
argument_list|(
literal|16320
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setProtocolHeaders
parameter_list|()
throws|throws
name|IOException
block|{
name|Headers
name|h
init|=
operator|new
name|Headers
argument_list|(
name|outMessage
argument_list|)
decl_stmt|;
name|basicEntity
operator|.
name|setContentType
argument_list|(
name|h
operator|.
name|determineContentType
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|addHeaders
init|=
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|outMessage
operator|.
name|getContextualProperty
argument_list|(
name|Headers
operator|.
name|ADD_HEADERS_PROPERTY
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|header
range|:
name|h
operator|.
name|headerMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|HttpHeaderHelper
operator|.
name|CONTENT_TYPE
operator|.
name|equalsIgnoreCase
argument_list|(
name|header
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|addHeaders
operator|||
name|HttpHeaderHelper
operator|.
name|COOKIE
operator|.
name|equalsIgnoreCase
argument_list|(
name|header
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|header
operator|.
name|getValue
argument_list|()
control|)
block|{
name|entity
operator|.
name|addHeader
argument_list|(
name|HttpHeaderHelper
operator|.
name|COOKIE
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
literal|"Content-Length"
operator|.
name|equalsIgnoreCase
argument_list|(
name|header
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|header
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|header
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|header
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
name|entity
operator|.
name|setHeader
argument_list|(
name|header
operator|.
name|getKey
argument_list|()
argument_list|,
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|entity
operator|.
name|containsHeader
argument_list|(
literal|"User-Agent"
argument_list|)
condition|)
block|{
name|entity
operator|.
name|setHeader
argument_list|(
literal|"User-Agent"
argument_list|,
name|Version
operator|.
name|getCompleteVersionString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|setFixedLengthStreamingMode
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|basicEntity
operator|.
name|setChunked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|basicEntity
operator|.
name|setContentLength
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|thresholdReached
parameter_list|()
throws|throws
name|IOException
block|{
name|basicEntity
operator|.
name|setChunked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleNoOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|connect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|outbuf
operator|.
name|writeCompleted
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|setupWrappedStream
parameter_list|()
throws|throws
name|IOException
block|{
name|connect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wrappedStream
operator|=
operator|new
name|OutputStream
argument_list|()
block|{
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|outbuf
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|outbuf
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|outbuf
operator|.
name|writeCompleted
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
comment|// If we need to cache for retransmission, store data in a
comment|// CacheAndWriteOutputStream. Otherwise write directly to the output stream.
if|if
condition|(
name|cachingForRetransmission
condition|)
block|{
name|cachedStream
operator|=
operator|new
name|CacheAndWriteOutputStream
argument_list|(
name|wrappedStream
argument_list|)
expr_stmt|;
name|wrappedStream
operator|=
name|cachedStream
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|connect
parameter_list|(
name|boolean
name|output
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|connectionFuture
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|CXFResponseCallback
name|responseCallback
init|=
operator|new
name|CXFResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|responseReceived
parameter_list|(
name|HttpResponse
name|response
parameter_list|)
block|{
name|setHttpResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|FutureCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
init|=
operator|new
name|FutureCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|completed
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{                 }
specifier|public
name|void
name|failed
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|setException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|inbuf
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|outbuf
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|cancelled
parameter_list|()
block|{
name|inbuf
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|outbuf
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|output
condition|)
block|{
name|entity
operator|.
name|removeHeaders
argument_list|(
literal|"Transfer-Encoding"
argument_list|)
expr_stmt|;
name|entity
operator|.
name|removeHeaders
argument_list|(
literal|"Content-Type"
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setEntity
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"https"
argument_list|)
operator|&&
name|tlsClientParameters
operator|==
literal|null
condition|)
block|{
name|tlsClientParameters
operator|=
operator|new
name|TLSClientParameters
argument_list|()
expr_stmt|;
block|}
name|BasicHttpContext
name|ctx
init|=
operator|new
name|BasicHttpContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|AsyncHTTPConduit
operator|.
name|this
operator|.
name|proxyAuthorizationPolicy
operator|!=
literal|null
operator|&&
name|AsyncHTTPConduit
operator|.
name|this
operator|.
name|proxyAuthorizationPolicy
operator|.
name|getUserName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setAttribute
argument_list|(
name|ClientContext
operator|.
name|CREDS_PROVIDER
argument_list|,
operator|new
name|CredentialsProvider
argument_list|()
block|{
specifier|public
name|void
name|setCredentials
parameter_list|(
name|AuthScope
name|authscope
parameter_list|,
name|Credentials
name|credentials
parameter_list|)
block|{                     }
specifier|public
name|Credentials
name|getCredentials
parameter_list|(
name|AuthScope
name|authscope
parameter_list|)
block|{
return|return
operator|new
name|UsernamePasswordCredentials
argument_list|(
name|AsyncHTTPConduit
operator|.
name|this
operator|.
name|proxyAuthorizationPolicy
operator|.
name|getUserName
argument_list|()
argument_list|,
name|AsyncHTTPConduit
operator|.
name|this
operator|.
name|proxyAuthorizationPolicy
operator|.
name|getPassword
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{                     }
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tlsClientParameters
operator|!=
literal|null
operator|&&
name|tlsClientParameters
operator|.
name|hashCode
argument_list|()
operator|==
name|lastTlsHash
operator|&&
name|sslState
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setAttribute
argument_list|(
name|ClientContext
operator|.
name|USER_TOKEN
argument_list|,
name|sslState
argument_list|)
expr_stmt|;
block|}
name|connectionFuture
operator|=
name|factory
operator|.
name|getRequester
argument_list|()
operator|.
name|execute
argument_list|(
name|AsyncHTTPConduit
operator|.
name|this
argument_list|,
name|url
argument_list|,
name|csPolicy
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|,
operator|new
name|CXFHttpAsyncRequestProducer
argument_list|(
name|entity
argument_list|,
name|outbuf
argument_list|)
argument_list|,
operator|new
name|CXFHttpAsyncResponseConsumer
argument_list|(
name|inbuf
argument_list|,
name|responseCallback
argument_list|)
argument_list|,
name|ctx
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|setHttpResponse
parameter_list|(
name|HttpResponse
name|r
parameter_list|)
block|{
name|httpResponse
operator|=
name|r
expr_stmt|;
if|if
condition|(
name|isAsync
condition|)
block|{
comment|//got a response, need to start the response processing now
try|try
block|{
name|handleResponseOnWorkqueue
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|isAsync
operator|=
literal|false
expr_stmt|;
comment|// don't trigger another start on next block. :-)
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|setException
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
if|if
condition|(
name|isAsync
condition|)
block|{
comment|//got a response, need to start the response processing now
try|try
block|{
name|handleResponseOnWorkqueue
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|isAsync
operator|=
literal|false
expr_stmt|;
comment|// don't trigger another start on next block. :-)
block|}
catch|catch
parameter_list|(
name|Exception
name|ex2
parameter_list|)
block|{
name|ex2
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|HttpResponse
name|getHttpResponse
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
name|httpResponse
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
comment|//already have an exception, skip waiting
try|try
block|{
name|wait
argument_list|(
name|csPolicy
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|httpResponse
operator|==
literal|null
condition|)
block|{
name|outbuf
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|inbuf
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|//outbuf = null;
comment|//inbuf = null;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exception
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|exception
throw|;
block|}
if|if
condition|(
name|exception
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|exception
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|exception
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|SocketTimeoutException
argument_list|(
literal|"Read Timeout"
argument_list|)
throw|;
block|}
block|}
return|return
name|httpResponse
return|;
block|}
specifier|protected
name|void
name|handleResponseAsync
parameter_list|()
throws|throws
name|IOException
block|{
name|isAsync
operator|=
literal|true
expr_stmt|;
block|}
specifier|protected
name|void
name|closeInputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
name|bytes
index|[]
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
while|while
condition|(
name|inbuf
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|//nothing
block|}
name|inbuf
operator|.
name|close
argument_list|()
expr_stmt|;
name|inbuf
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|InputStream
argument_list|()
block|{
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|inbuf
operator|.
name|read
argument_list|()
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|inbuf
operator|.
name|read
argument_list|(
name|b
argument_list|)
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|inbuf
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|inbuf
operator|.
name|available
argument_list|()
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|inbuf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|protected
name|boolean
name|usingProxy
parameter_list|()
block|{
comment|//FIXME - need to get the Proxy stuff from the connection
return|return
literal|false
return|;
block|}
specifier|protected
name|HttpsURLConnectionInfo
name|getHttpsURLConnectionInfo
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
literal|"http"
operator|.
name|equals
argument_list|(
name|outMessage
operator|.
name|get
argument_list|(
literal|"http.scheme"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|connect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|sessionLock
init|)
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|sessionLock
operator|.
name|wait
argument_list|(
name|csPolicy
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No SSLSession detected"
argument_list|)
throw|;
block|}
block|}
name|HostnameVerifier
name|verifier
decl_stmt|;
if|if
condition|(
name|tlsClientParameters
operator|.
name|isUseHttpsURLConnectionDefaultHostnameVerifier
argument_list|()
condition|)
block|{
name|verifier
operator|=
name|HttpsURLConnection
operator|.
name|getDefaultHostnameVerifier
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tlsClientParameters
operator|.
name|isDisableCNCheck
argument_list|()
condition|)
block|{
name|verifier
operator|=
name|CertificateHostnameVerifier
operator|.
name|ALLOW_ALL
expr_stmt|;
block|}
else|else
block|{
name|verifier
operator|=
name|CertificateHostnameVerifier
operator|.
name|DEFAULT
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|verifier
operator|.
name|verify
argument_list|(
name|url
operator|.
name|getHost
argument_list|()
argument_list|,
name|session
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not verify host "
operator|+
name|url
operator|.
name|getHost
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|method
init|=
operator|(
name|String
operator|)
name|outMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
decl_stmt|;
name|String
name|cipherSuite
init|=
literal|null
decl_stmt|;
name|Certificate
index|[]
name|localCerts
init|=
literal|null
decl_stmt|;
name|Principal
name|principal
init|=
literal|null
decl_stmt|;
name|Certificate
index|[]
name|serverCerts
init|=
literal|null
decl_stmt|;
name|Principal
name|peer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|cipherSuite
operator|=
name|session
operator|.
name|getCipherSuite
argument_list|()
expr_stmt|;
name|localCerts
operator|=
name|session
operator|.
name|getLocalCertificates
argument_list|()
expr_stmt|;
name|principal
operator|=
name|session
operator|.
name|getLocalPrincipal
argument_list|()
expr_stmt|;
name|serverCerts
operator|=
name|session
operator|.
name|getPeerCertificates
argument_list|()
expr_stmt|;
name|peer
operator|=
name|session
operator|.
name|getPeerPrincipal
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|HttpsURLConnectionInfo
argument_list|(
name|url
argument_list|,
name|method
argument_list|,
name|cipherSuite
argument_list|,
name|localCerts
argument_list|,
name|principal
argument_list|,
name|serverCerts
argument_list|,
name|peer
argument_list|)
return|;
block|}
specifier|protected
name|int
name|getResponseCode
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getHttpResponse
argument_list|()
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getResponseMessage
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getHttpResponse
argument_list|()
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getReasonPhrase
argument_list|()
return|;
block|}
specifier|private
name|String
name|readHeaders
parameter_list|(
name|Headers
name|h
parameter_list|)
throws|throws
name|IOException
block|{
name|Header
name|headers
index|[]
init|=
name|getHttpResponse
argument_list|()
operator|.
name|getAllHeaders
argument_list|()
decl_stmt|;
name|h
operator|.
name|headerMap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|ct
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Header
name|header
range|:
name|headers
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|s
init|=
name|h
operator|.
name|headerMap
argument_list|()
operator|.
name|get
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|h
operator|.
name|headerMap
argument_list|()
operator|.
name|put
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|add
argument_list|(
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"Content-Type"
operator|.
name|equals
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|ct
operator|=
name|header
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ct
return|;
block|}
specifier|protected
name|void
name|updateResponseHeaders
parameter_list|(
name|Message
name|inMessage
parameter_list|)
throws|throws
name|IOException
block|{
name|Headers
name|h
init|=
operator|new
name|Headers
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|readHeaders
argument_list|(
name|h
argument_list|)
argument_list|)
expr_stmt|;
name|cookies
operator|.
name|readFromHeaders
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|InputStream
name|getPartialResponse
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|int
name|responseCode
init|=
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|responseCode
operator|==
name|HttpURLConnection
operator|.
name|HTTP_ACCEPTED
operator|||
name|responseCode
operator|==
name|HttpURLConnection
operator|.
name|HTTP_OK
condition|)
block|{
name|Header
name|head
init|=
name|httpResponse
operator|.
name|getFirstHeader
argument_list|(
name|HttpHeaderHelper
operator|.
name|CONTENT_LENGTH
argument_list|)
decl_stmt|;
name|int
name|cli
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|head
operator|!=
literal|null
condition|)
block|{
name|cli
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|head
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|head
operator|=
name|httpResponse
operator|.
name|getFirstHeader
argument_list|(
name|HttpHeaderHelper
operator|.
name|TRANSFER_ENCODING
argument_list|)
expr_stmt|;
name|boolean
name|isChunked
init|=
name|head
operator|!=
literal|null
operator|&&
name|HttpHeaderHelper
operator|.
name|CHUNKED
operator|.
name|equalsIgnoreCase
argument_list|(
name|head
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|head
operator|=
name|httpResponse
operator|.
name|getFirstHeader
argument_list|(
name|HttpHeaderHelper
operator|.
name|CONNECTION
argument_list|)
expr_stmt|;
name|boolean
name|isEofTerminated
init|=
name|head
operator|!=
literal|null
operator|&&
name|HttpHeaderHelper
operator|.
name|CLOSE
operator|.
name|equalsIgnoreCase
argument_list|(
name|head
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cli
operator|>
literal|0
condition|)
block|{
name|in
operator|=
name|getInputStream
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isChunked
operator|||
name|isEofTerminated
condition|)
block|{
comment|// ensure chunked or EOF-terminated response is non-empty
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|PushbackInputStream
name|pin
init|=
operator|new
name|PushbackInputStream
argument_list|(
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|pin
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
operator|-
literal|1
condition|)
block|{
name|pin
operator|.
name|unread
argument_list|(
operator|(
name|byte
operator|)
name|c
argument_list|)
expr_stmt|;
name|in
operator|=
name|pin
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
return|return
name|in
return|;
block|}
specifier|protected
name|void
name|updateCookiesBeforeRetransmit
parameter_list|()
throws|throws
name|IOException
block|{
name|Headers
name|h
init|=
operator|new
name|Headers
argument_list|()
decl_stmt|;
name|readHeaders
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|cookies
operator|.
name|readFromHeaders
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|retransmitStream
parameter_list|()
throws|throws
name|IOException
block|{
name|cachingForRetransmission
operator|=
literal|false
expr_stmt|;
comment|//already cached
name|setupWrappedStream
argument_list|()
expr_stmt|;
name|cachedStream
operator|.
name|writeCacheTo
argument_list|(
name|wrappedStream
argument_list|)
expr_stmt|;
name|wrappedStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|wrappedStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|setupNewConnection
parameter_list|(
name|String
name|newURL
parameter_list|)
throws|throws
name|IOException
block|{
name|httpResponse
operator|=
literal|null
expr_stmt|;
name|isAsync
operator|=
literal|false
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
name|connectionFuture
operator|=
literal|null
expr_stmt|;
name|session
operator|=
literal|null
expr_stmt|;
comment|//reset the buffers
name|HeapByteBufferAllocator
name|allocator
init|=
operator|new
name|HeapByteBufferAllocator
argument_list|()
decl_stmt|;
name|inbuf
operator|=
operator|new
name|SharedInputBuffer
argument_list|(
literal|16320
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
name|outbuf
operator|=
operator|new
name|SharedOutputBuffer
argument_list|(
literal|16320
argument_list|,
name|allocator
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|url
operator|=
operator|new
name|URI
argument_list|(
name|newURL
argument_list|)
expr_stmt|;
name|setupConnection
argument_list|(
name|outMessage
argument_list|,
name|this
operator|.
name|url
argument_list|,
name|csPolicy
argument_list|)
expr_stmt|;
name|entity
operator|=
name|outMessage
operator|.
name|get
argument_list|(
name|CXFHttpRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|basicEntity
operator|=
operator|(
name|BasicHttpEntity
operator|)
name|entity
operator|.
name|getEntity
argument_list|()
expr_stmt|;
name|entity
operator|.
name|setOutputStream
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setSSLSession
parameter_list|(
name|SSLSession
name|sslsession
parameter_list|)
block|{
name|session
operator|=
name|sslsession
expr_stmt|;
synchronized|synchronized
init|(
name|sessionLock
init|)
block|{
name|sslState
operator|=
name|sslsession
operator|.
name|getLocalPrincipal
argument_list|()
expr_stmt|;
name|sessionLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|SSLContext
name|getSSLContext
parameter_list|()
throws|throws
name|GeneralSecurityException
block|{
name|TLSClientParameters
name|tlsClientParameters
init|=
name|getTlsClientParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|tlsClientParameters
operator|==
literal|null
condition|)
block|{
name|tlsClientParameters
operator|=
operator|new
name|TLSClientParameters
argument_list|()
expr_stmt|;
block|}
name|int
name|hash
init|=
name|tlsClientParameters
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|hash
operator|==
name|lastTlsHash
condition|)
block|{
return|return
name|sslContext
return|;
block|}
name|String
name|provider
init|=
name|tlsClientParameters
operator|.
name|getJsseProvider
argument_list|()
decl_stmt|;
name|String
name|protocol
init|=
name|tlsClientParameters
operator|.
name|getSecureSocketProtocol
argument_list|()
operator|!=
literal|null
condition|?
name|tlsClientParameters
operator|.
name|getSecureSocketProtocol
argument_list|()
else|:
literal|"TLS"
decl_stmt|;
name|SSLContext
name|ctx
init|=
name|provider
operator|==
literal|null
condition|?
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|protocol
argument_list|)
else|:
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|protocol
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|getClientSessionContext
argument_list|()
operator|.
name|setSessionTimeout
argument_list|(
name|tlsClientParameters
operator|.
name|getSslCacheTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|KeyManager
index|[]
name|keyManagers
init|=
name|tlsClientParameters
operator|.
name|getKeyManagers
argument_list|()
decl_stmt|;
if|if
condition|(
name|tlsClientParameters
operator|.
name|getCertAlias
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getKeyManagersWithCertAlias
argument_list|(
name|tlsClientParameters
argument_list|,
name|keyManagers
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|init
argument_list|(
name|keyManagers
argument_list|,
name|tlsClientParameters
operator|.
name|getTrustManagers
argument_list|()
argument_list|,
name|tlsClientParameters
operator|.
name|getSecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|sslContext
operator|=
name|ctx
expr_stmt|;
name|lastTlsHash
operator|=
name|hash
expr_stmt|;
name|sslState
operator|=
literal|null
expr_stmt|;
return|return
name|ctx
return|;
block|}
specifier|public
name|void
name|initializeSSLEngine
parameter_list|(
name|SSLContext
name|sslcontext
parameter_list|,
name|SSLEngine
name|sslengine
parameter_list|)
block|{
name|TLSClientParameters
name|tlsClientParameters
init|=
name|getTlsClientParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|tlsClientParameters
operator|==
literal|null
condition|)
block|{
name|tlsClientParameters
operator|=
operator|new
name|TLSClientParameters
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|cipherSuites
init|=
name|SSLUtils
operator|.
name|getCiphersuites
argument_list|(
name|tlsClientParameters
operator|.
name|getCipherSuites
argument_list|()
argument_list|,
name|SSLUtils
operator|.
name|getSupportedCipherSuites
argument_list|(
name|sslcontext
argument_list|)
argument_list|,
name|tlsClientParameters
operator|.
name|getCipherSuitesFilter
argument_list|()
argument_list|,
name|LOG
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|sslengine
operator|.
name|setEnabledCipherSuites
argument_list|(
name|cipherSuites
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|getKeyManagersWithCertAlias
parameter_list|(
name|TLSClientParameters
name|tlsClientParameters
parameter_list|,
name|KeyManager
index|[]
name|keyManagers
parameter_list|)
throws|throws
name|GeneralSecurityException
block|{
if|if
condition|(
name|tlsClientParameters
operator|.
name|getCertAlias
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|keyManagers
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|keyManagers
index|[
name|idx
index|]
operator|instanceof
name|X509KeyManager
condition|)
block|{
try|try
block|{
name|keyManagers
index|[
name|idx
index|]
operator|=
operator|new
name|AliasedX509ExtendedKeyManager
argument_list|(
name|tlsClientParameters
operator|.
name|getCertAlias
argument_list|()
argument_list|,
operator|(
name|X509KeyManager
operator|)
name|keyManagers
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|GeneralSecurityException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

