begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|asyncclient
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|asyncclient
operator|.
name|AsyncHTTPConduit
operator|.
name|AsyncWrappedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|RequestLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|RequestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|AbstractHttpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicRequestLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HTTP
import|;
end_import

begin_class
specifier|public
class|class
name|CXFHttpRequest
extends|extends
name|AbstractHttpMessage
implements|implements
name|HttpEntityEnclosingRequest
implements|,
name|Configurable
block|{
specifier|private
specifier|final
name|String
name|method
decl_stmt|;
specifier|private
name|URI
name|uri
decl_stmt|;
specifier|private
name|HttpEntity
name|entity
decl_stmt|;
specifier|private
name|AsyncWrappedOutputStream
name|out
decl_stmt|;
specifier|private
name|RequestConfig
name|config
decl_stmt|;
specifier|public
name|CXFHttpRequest
parameter_list|(
specifier|final
name|String
name|method
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
block|}
specifier|public
name|void
name|setOutputStream
parameter_list|(
name|AsyncWrappedOutputStream
name|o
parameter_list|)
block|{
name|out
operator|=
name|o
expr_stmt|;
block|}
specifier|public
name|AsyncWrappedOutputStream
name|getOutputStream
parameter_list|()
block|{
return|return
name|out
return|;
block|}
specifier|public
name|URI
name|getURI
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
specifier|public
name|void
name|setURI
parameter_list|(
specifier|final
name|URI
name|u
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|u
expr_stmt|;
block|}
specifier|public
name|String
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
annotation|@
name|Override
specifier|public
name|RequestLine
name|getRequestLine
parameter_list|()
block|{
return|return
operator|new
name|BasicRequestLine
argument_list|(
name|method
argument_list|,
name|uri
operator|!=
literal|null
condition|?
name|uri
operator|.
name|toASCIIString
argument_list|()
else|:
literal|"/"
argument_list|,
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProtocolVersion
name|getProtocolVersion
parameter_list|()
block|{
return|return
name|HttpVersion
operator|.
name|HTTP_1_1
return|;
block|}
specifier|public
name|HttpEntity
name|getEntity
parameter_list|()
block|{
return|return
name|this
operator|.
name|entity
return|;
block|}
specifier|public
name|void
name|setEntity
parameter_list|(
specifier|final
name|HttpEntity
name|entity
parameter_list|)
block|{
name|this
operator|.
name|entity
operator|=
name|entity
expr_stmt|;
block|}
specifier|public
name|boolean
name|expectContinue
parameter_list|()
block|{
name|Header
name|expect
init|=
name|getFirstHeader
argument_list|(
name|HTTP
operator|.
name|EXPECT_DIRECTIVE
argument_list|)
decl_stmt|;
return|return
name|expect
operator|!=
literal|null
operator|&&
name|HTTP
operator|.
name|EXPECT_CONTINUE
operator|.
name|equalsIgnoreCase
argument_list|(
name|expect
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RequestConfig
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
specifier|public
name|void
name|setConfig
parameter_list|(
name|RequestConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
block|}
end_class

end_unit

