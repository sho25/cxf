begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|asyncclient
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|asyncclient
operator|.
name|AsyncHTTPConduit
operator|.
name|AsyncWrappedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|ContentDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|IOControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|protocol
operator|.
name|HttpAsyncResponseConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_class
specifier|public
class|class
name|CXFHttpAsyncResponseConsumer
implements|implements
name|HttpAsyncResponseConsumer
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
specifier|final
name|SharedInputBuffer
name|buf
decl_stmt|;
specifier|private
specifier|final
name|AsyncWrappedOutputStream
name|outstream
decl_stmt|;
specifier|private
specifier|final
name|CXFResponseCallback
name|responseCallback
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|completed
decl_stmt|;
specifier|private
specifier|volatile
name|Exception
name|exception
decl_stmt|;
specifier|private
specifier|volatile
name|HttpResponse
name|response
decl_stmt|;
specifier|public
name|CXFHttpAsyncResponseConsumer
parameter_list|(
specifier|final
name|AsyncWrappedOutputStream
name|asyncWrappedOutputStream
parameter_list|,
specifier|final
name|SharedInputBuffer
name|buf
parameter_list|,
specifier|final
name|CXFResponseCallback
name|responseCallback
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|outstream
operator|=
name|asyncWrappedOutputStream
expr_stmt|;
name|this
operator|.
name|responseCallback
operator|=
name|responseCallback
expr_stmt|;
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|buf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|cancel
parameter_list|()
block|{
name|completed
operator|=
literal|true
expr_stmt|;
name|buf
operator|.
name|shutdown
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|responseReceived
parameter_list|(
specifier|final
name|HttpResponse
name|resp
parameter_list|)
throws|throws
name|IOException
throws|,
name|HttpException
block|{
name|response
operator|=
name|resp
expr_stmt|;
name|responseCallback
operator|.
name|responseReceived
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|consumeContent
parameter_list|(
specifier|final
name|ContentDecoder
name|dec
parameter_list|,
specifier|final
name|IOControl
name|ioc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Only consume content when the work was accepted by the work queue
if|if
condition|(
name|outstream
operator|.
name|retrySetHttpResponse
argument_list|(
name|response
argument_list|)
condition|)
block|{
name|buf
operator|.
name|consumeContent
argument_list|(
name|dec
argument_list|,
name|ioc
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|responseCompleted
parameter_list|(
specifier|final
name|HttpContext
name|context
parameter_list|)
block|{
name|completed
operator|=
literal|true
expr_stmt|;
name|buf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|failed
parameter_list|(
specifier|final
name|Exception
name|ex
parameter_list|)
block|{
name|completed
operator|=
literal|true
expr_stmt|;
name|exception
operator|=
name|ex
expr_stmt|;
name|buf
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Exception
name|getException
parameter_list|()
block|{
return|return
name|exception
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|getResult
parameter_list|()
block|{
return|return
name|exception
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|completed
return|;
block|}
block|}
end_class

end_unit

