begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|client
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|HTTPConduitFactory
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|EventLoopGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|NettyHttpConduitFactoryTest
block|{
name|Bus
name|bus
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|classUp
parameter_list|()
block|{
comment|// Get rid of any notion of a default bus set by other
comment|// rogue tests.
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|classDown
parameter_list|()
block|{
comment|// Clean up.
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|bus
operator|.
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|bus
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadingHttpConduitFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|bus
operator|=
name|BusFactory
operator|.
name|getDefaultBus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot get bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
comment|// Make sure we got the Transport Factory.
name|HTTPConduitFactory
name|factory
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|HTTPConduitFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot get HTTPConduitFactory"
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|NettyHttpConduitFactory
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdownEventLoopGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|bus
operator|=
name|BusFactory
operator|.
name|getDefaultBus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot get bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
comment|// Make sure we got the Transport Factory.
name|NettyHttpTransportFactory
name|factory
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|NettyHttpTransportFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Cannot get NettyHttpTransportFactory"
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|ServiceInfo
name|serviceInfo
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|serviceInfo
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"bla"
argument_list|,
literal|"Service"
argument_list|)
argument_list|)
expr_stmt|;
name|EndpointInfo
name|ei
init|=
operator|new
name|EndpointInfo
argument_list|(
name|serviceInfo
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|ei
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"bla"
argument_list|,
literal|"Port"
argument_list|)
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setAddress
argument_list|(
literal|"netty://foo"
argument_list|)
expr_stmt|;
comment|// The EventLoopGroup is put into bus when create a new netty http conduit
name|factory
operator|.
name|getConduit
argument_list|(
name|ei
argument_list|,
literal|null
argument_list|,
name|bus
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EventLoopGroup
name|eventLoopGroup
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|EventLoopGroup
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"We should find the EventLoopGroup here."
argument_list|,
name|eventLoopGroup
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The eventLoopGroup should be shutdown."
argument_list|,
name|eventLoopGroup
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

