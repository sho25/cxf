begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PushbackInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HostnameVerifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|HttpHeaderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CacheAndWriteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|Headers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|URLConnectionHTTPConduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|CertificateHostnameVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|HttpsURLConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPClientPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|bootstrap
operator|.
name|ClientBootstrap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBufferInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBufferOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ChannelBuffers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioClientSocketChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|SslHandler
import|;
end_import

begin_class
specifier|public
class|class
name|NettyHttpConduit
extends|extends
name|URLConnectionHTTPConduit
block|{
specifier|public
specifier|static
specifier|final
name|String
name|USE_ASYNC
init|=
literal|"use.async.http.conduit"
decl_stmt|;
specifier|final
name|NettyHttpConduitFactory
name|factory
decl_stmt|;
specifier|private
specifier|final
name|ClientBootstrap
name|bootstrap
decl_stmt|;
specifier|public
name|NettyHttpConduit
parameter_list|(
name|Bus
name|b
parameter_list|,
name|EndpointInfo
name|ei
parameter_list|,
name|EndpointReferenceType
name|t
parameter_list|,
name|NettyHttpConduitFactory
name|conduitFactory
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|b
argument_list|,
name|ei
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|factory
operator|=
name|conduitFactory
expr_stmt|;
name|bootstrap
operator|=
operator|new
name|ClientBootstrap
argument_list|(
operator|new
name|NioClientSocketChannelFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NettyHttpConduitFactory
name|getNettyHttpConduitFactory
parameter_list|()
block|{
return|return
name|factory
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// clean up the resource that ClientChannelFactory used
name|bootstrap
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|// Using Netty API directly
specifier|protected
name|void
name|setupConnection
parameter_list|(
name|Message
name|message
parameter_list|,
name|URI
name|uri
parameter_list|,
name|HTTPClientPolicy
name|csPolicy
parameter_list|)
throws|throws
name|IOException
block|{
comment|// need to do some clean up work on the URI address
name|String
name|uriString
init|=
name|uri
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|uriString
operator|.
name|startsWith
argument_list|(
literal|"netty://"
argument_list|)
condition|)
block|{
try|try
block|{
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|uriString
operator|.
name|substring
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"unsupport uri: "
operator|+
name|uriString
argument_list|)
throw|;
block|}
block|}
name|String
name|s
init|=
name|uri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"http"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|&&
operator|!
literal|"https"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"unknown protocol: "
operator|+
name|s
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
comment|//hc needs to have the path be "/"
name|uri
operator|=
name|uri
operator|.
name|resolve
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|put
argument_list|(
literal|"http.scheme"
argument_list|,
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|httpRequestMethod
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpRequestMethod
operator|==
literal|null
condition|)
block|{
name|httpRequestMethod
operator|=
literal|"POST"
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
name|httpRequestMethod
argument_list|)
expr_stmt|;
block|}
comment|// setup a new NettyHttpClientRequest
specifier|final
name|NettyHttpClientRequest
name|request
init|=
operator|new
name|NettyHttpClientRequest
argument_list|(
name|uri
argument_list|,
name|httpRequestMethod
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ctimeout
init|=
name|determineConnectionTimeout
argument_list|(
name|message
argument_list|,
name|csPolicy
argument_list|)
decl_stmt|;
specifier|final
name|int
name|rtimeout
init|=
name|determineReceiveTimeout
argument_list|(
name|message
argument_list|,
name|csPolicy
argument_list|)
decl_stmt|;
name|request
operator|.
name|setConnectionTimeout
argument_list|(
name|ctimeout
argument_list|)
expr_stmt|;
name|request
operator|.
name|setReceiveTimeout
argument_list|(
name|rtimeout
argument_list|)
expr_stmt|;
name|request
operator|.
name|getRequest
argument_list|()
operator|.
name|setChunked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|request
operator|.
name|getRequest
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
comment|// need to socket connection timeout
name|message
operator|.
name|put
argument_list|(
name|NettyHttpClientRequest
operator|.
name|class
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|bootstrap
operator|.
name|setPipelineFactory
argument_list|(
operator|new
name|NettyHttpClientPipelineFactory
argument_list|(
name|getTlsClientParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|OutputStream
name|createOutputStream
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|needToCacheRequest
parameter_list|,
name|boolean
name|isChunking
parameter_list|,
name|int
name|chunkThreshold
parameter_list|)
throws|throws
name|IOException
block|{
name|NettyHttpClientRequest
name|entity
init|=
name|message
operator|.
name|get
argument_list|(
name|NettyHttpClientRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NettyWrappedOutputStream
name|out
init|=
operator|new
name|NettyWrappedOutputStream
argument_list|(
name|message
argument_list|,
name|needToCacheRequest
argument_list|,
name|isChunking
argument_list|,
name|chunkThreshold
argument_list|,
name|getConduitName
argument_list|()
argument_list|,
name|entity
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
name|entity
operator|.
name|getRequest
argument_list|()
operator|.
name|setContent
argument_list|(
name|out
operator|.
name|getOutBuffer
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
specifier|public
class|class
name|NettyWrappedOutputStream
extends|extends
name|WrappedOutputStream
block|{
specifier|final
name|HTTPClientPolicy
name|csPolicy
decl_stmt|;
name|NettyHttpClientRequest
name|entity
decl_stmt|;
specifier|volatile
name|HttpResponse
name|httpResponse
decl_stmt|;
specifier|volatile
name|Throwable
name|exception
decl_stmt|;
specifier|volatile
name|Channel
name|channel
decl_stmt|;
specifier|volatile
name|SSLSession
name|session
decl_stmt|;
name|boolean
name|isAsync
decl_stmt|;
name|ChannelBuffer
name|outBuffer
decl_stmt|;
name|OutputStream
name|outputStream
decl_stmt|;
specifier|protected
name|NettyWrappedOutputStream
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|possibleRetransmit
parameter_list|,
name|boolean
name|isChunking
parameter_list|,
name|int
name|chunkThreshold
parameter_list|,
name|String
name|conduitName
parameter_list|,
name|URI
name|url
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|possibleRetransmit
argument_list|,
name|isChunking
argument_list|,
name|chunkThreshold
argument_list|,
name|conduitName
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|csPolicy
operator|=
name|getClient
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|entity
operator|=
name|message
operator|.
name|get
argument_list|(
name|NettyHttpClientRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|int
name|bufSize
init|=
name|csPolicy
operator|.
name|getChunkLength
argument_list|()
operator|>
literal|0
condition|?
name|csPolicy
operator|.
name|getChunkLength
argument_list|()
else|:
literal|16320
decl_stmt|;
name|outBuffer
operator|=
name|ChannelBuffers
operator|.
name|dynamicBuffer
argument_list|(
name|bufSize
argument_list|)
expr_stmt|;
name|outputStream
operator|=
operator|new
name|ChannelBufferOutputStream
argument_list|(
name|outBuffer
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ChannelBuffer
name|getOutBuffer
parameter_list|()
block|{
return|return
name|outBuffer
return|;
block|}
specifier|protected
specifier|synchronized
name|HttpResponse
name|getHttpResponse
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
name|httpResponse
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
comment|//already have an exception, skip waiting
try|try
block|{
name|wait
argument_list|(
name|entity
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|httpResponse
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exception
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|exception
throw|;
block|}
if|if
condition|(
name|exception
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|exception
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|exception
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|SocketTimeoutException
argument_list|(
literal|"Read Timeout"
argument_list|)
throw|;
block|}
block|}
return|return
name|httpResponse
return|;
block|}
specifier|protected
specifier|synchronized
name|Channel
name|getChannel
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
name|channel
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
comment|//already have an exception, skip waiting
try|try
block|{
comment|// connection timeout
name|wait
argument_list|(
name|entity
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|channel
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exception
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|exception
throw|;
block|}
if|if
condition|(
name|exception
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|exception
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|exception
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|SocketTimeoutException
argument_list|(
literal|"Connection Timeout"
argument_list|)
throw|;
block|}
block|}
return|return
name|channel
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setupWrappedStream
parameter_list|()
throws|throws
name|IOException
block|{
name|connect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wrappedStream
operator|=
operator|new
name|OutputStream
argument_list|()
block|{
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Setup the call back for sending the message
name|ChannelFutureListener
name|listener
init|=
operator|new
name|ChannelFutureListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|setException
argument_list|(
name|future
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|ChannelFuture
name|channelFuture
init|=
name|getChannel
argument_list|()
operator|.
name|write
argument_list|(
name|entity
argument_list|)
decl_stmt|;
name|channelFuture
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
comment|// If we need to cache for retransmission, store data in a
comment|// CacheAndWriteOutputStream. Otherwise write directly to the output stream.
if|if
condition|(
name|cachingForRetransmission
condition|)
block|{
name|cachedStream
operator|=
operator|new
name|CacheAndWriteOutputStream
argument_list|(
name|wrappedStream
argument_list|)
expr_stmt|;
name|wrappedStream
operator|=
name|cachedStream
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|connect
parameter_list|(
name|boolean
name|output
parameter_list|)
block|{
name|ChannelFuture
name|connFuture
init|=
name|bootstrap
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|url
operator|.
name|getHost
argument_list|()
argument_list|,
name|url
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Setup the call back on the NettyHttpClientRequest
name|ChannelFutureListener
name|listener
init|=
operator|new
name|ChannelFutureListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ChannelFuture
name|future
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|future
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|setChannel
argument_list|(
name|future
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
name|SslHandler
name|sslHandler
init|=
name|channel
operator|.
name|getPipeline
argument_list|()
operator|.
name|get
argument_list|(
name|SslHandler
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sslHandler
operator|!=
literal|null
condition|)
block|{
name|session
operator|=
name|sslHandler
operator|.
name|getEngine
argument_list|()
operator|.
name|getSession
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|setException
argument_list|(
operator|(
name|Exception
operator|)
name|future
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|connFuture
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|output
condition|)
block|{
name|entity
operator|.
name|getRequest
argument_list|()
operator|.
name|removeHeader
argument_list|(
literal|"Transfer-Encoding"
argument_list|)
expr_stmt|;
name|entity
operator|.
name|getRequest
argument_list|()
operator|.
name|removeHeader
argument_list|(
literal|"Content-Type"
argument_list|)
expr_stmt|;
name|entity
operator|.
name|getRequest
argument_list|()
operator|.
name|setContent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// setup the CxfResponseCallBack
name|CxfResponseCallBack
name|callBack
init|=
operator|new
name|CxfResponseCallBack
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|responseReceived
parameter_list|(
name|HttpResponse
name|response
parameter_list|)
block|{
name|setHttpResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|entity
operator|.
name|setCxfResponseCallback
argument_list|(
name|callBack
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|HttpsURLConnectionInfo
name|getHttpsURLConnectionInfo
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
literal|"http"
operator|.
name|equals
argument_list|(
name|outMessage
operator|.
name|get
argument_list|(
literal|"http.scheme"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|connect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|HostnameVerifier
name|verifier
decl_stmt|;
if|if
condition|(
name|tlsClientParameters
operator|.
name|isUseHttpsURLConnectionDefaultHostnameVerifier
argument_list|()
condition|)
block|{
name|verifier
operator|=
name|HttpsURLConnection
operator|.
name|getDefaultHostnameVerifier
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tlsClientParameters
operator|.
name|isDisableCNCheck
argument_list|()
condition|)
block|{
name|verifier
operator|=
name|CertificateHostnameVerifier
operator|.
name|ALLOW_ALL
expr_stmt|;
block|}
else|else
block|{
name|verifier
operator|=
name|CertificateHostnameVerifier
operator|.
name|DEFAULT
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|verifier
operator|.
name|verify
argument_list|(
name|url
operator|.
name|getHost
argument_list|()
argument_list|,
name|session
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not verify host "
operator|+
name|url
operator|.
name|getHost
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|method
init|=
operator|(
name|String
operator|)
name|outMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
decl_stmt|;
name|String
name|cipherSuite
init|=
literal|null
decl_stmt|;
name|Certificate
index|[]
name|localCerts
init|=
literal|null
decl_stmt|;
name|Principal
name|principal
init|=
literal|null
decl_stmt|;
name|Certificate
index|[]
name|serverCerts
init|=
literal|null
decl_stmt|;
name|Principal
name|peer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|cipherSuite
operator|=
name|session
operator|.
name|getCipherSuite
argument_list|()
expr_stmt|;
name|localCerts
operator|=
name|session
operator|.
name|getLocalCertificates
argument_list|()
expr_stmt|;
name|principal
operator|=
name|session
operator|.
name|getLocalPrincipal
argument_list|()
expr_stmt|;
name|serverCerts
operator|=
name|session
operator|.
name|getPeerCertificates
argument_list|()
expr_stmt|;
name|peer
operator|=
name|session
operator|.
name|getPeerPrincipal
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|HttpsURLConnectionInfo
argument_list|(
name|url
argument_list|,
name|method
argument_list|,
name|cipherSuite
argument_list|,
name|localCerts
argument_list|,
name|principal
argument_list|,
name|serverCerts
argument_list|,
name|peer
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setProtocolHeaders
parameter_list|()
throws|throws
name|IOException
block|{
name|Headers
name|h
init|=
operator|new
name|Headers
argument_list|(
name|outMessage
argument_list|)
decl_stmt|;
name|entity
operator|.
name|getRequest
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|h
operator|.
name|determineContentType
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|addHeaders
init|=
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|outMessage
operator|.
name|getContextualProperty
argument_list|(
name|Headers
operator|.
name|ADD_HEADERS_PROPERTY
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|header
range|:
name|h
operator|.
name|headerMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|HttpHeaderHelper
operator|.
name|CONTENT_TYPE
operator|.
name|equalsIgnoreCase
argument_list|(
name|header
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|addHeaders
operator|||
name|HttpHeaderHelper
operator|.
name|COOKIE
operator|.
name|equalsIgnoreCase
argument_list|(
name|header
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|header
operator|.
name|getValue
argument_list|()
control|)
block|{
name|entity
operator|.
name|getRequest
argument_list|()
operator|.
name|addHeader
argument_list|(
name|HttpHeaderHelper
operator|.
name|COOKIE
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
literal|"Content-Length"
operator|.
name|equalsIgnoreCase
argument_list|(
name|header
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|header
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|header
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|header
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
name|entity
operator|.
name|getRequest
argument_list|()
operator|.
name|setHeader
argument_list|(
name|header
operator|.
name|getKey
argument_list|()
argument_list|,
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|entity
operator|.
name|getRequest
argument_list|()
operator|.
name|containsHeader
argument_list|(
literal|"User-Agent"
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getRequest
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"User-Agent"
argument_list|,
name|Version
operator|.
name|getCompleteVersionString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setFixedLengthStreamingMode
parameter_list|(
name|int
name|i
parameter_list|)
block|{
comment|// Here we can set the Content-Length
name|entity
operator|.
name|getRequest
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"Content-Length"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|entity
operator|.
name|getRequest
argument_list|()
operator|.
name|setChunked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getResponseCode
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getHttpResponse
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|getCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getResponseMessage
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getHttpResponse
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|getReasonPhrase
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|updateResponseHeaders
parameter_list|(
name|Message
name|inMessage
parameter_list|)
throws|throws
name|IOException
block|{
name|Headers
name|h
init|=
operator|new
name|Headers
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|readHeaders
argument_list|(
name|h
argument_list|)
argument_list|)
expr_stmt|;
name|cookies
operator|.
name|readFromHeaders
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|readHeaders
parameter_list|(
name|Headers
name|h
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|headerNames
init|=
name|getHttpResponse
argument_list|()
operator|.
name|getHeaderNames
argument_list|()
decl_stmt|;
name|String
name|ct
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|headerNames
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|s
init|=
name|getHttpResponse
argument_list|()
operator|.
name|getHeaders
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|h
operator|.
name|headerMap
argument_list|()
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|Message
operator|.
name|CONTENT_TYPE
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|ct
operator|=
name|getHttpResponse
argument_list|()
operator|.
name|getHeader
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ct
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|handleResponseAsync
parameter_list|()
throws|throws
name|IOException
block|{
name|isAsync
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|closeInputStream
parameter_list|()
throws|throws
name|IOException
block|{
comment|//We just clear the buffer
name|getHttpResponse
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|usingProxy
parameter_list|()
block|{
comment|// TODO we need to support it
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ChannelBufferInputStream
argument_list|(
name|getHttpResponse
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|InputStream
name|getPartialResponse
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|int
name|responseCode
init|=
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|responseCode
operator|==
name|HttpURLConnection
operator|.
name|HTTP_ACCEPTED
operator|||
name|responseCode
operator|==
name|HttpURLConnection
operator|.
name|HTTP_OK
condition|)
block|{
name|String
name|head
init|=
name|httpResponse
operator|.
name|getHeader
argument_list|(
name|HttpHeaderHelper
operator|.
name|CONTENT_LENGTH
argument_list|)
decl_stmt|;
name|int
name|cli
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|head
operator|!=
literal|null
condition|)
block|{
name|cli
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|head
argument_list|)
expr_stmt|;
block|}
name|head
operator|=
name|httpResponse
operator|.
name|getHeader
argument_list|(
name|HttpHeaderHelper
operator|.
name|TRANSFER_ENCODING
argument_list|)
expr_stmt|;
name|boolean
name|isChunked
init|=
name|head
operator|!=
literal|null
operator|&&
name|HttpHeaderHelper
operator|.
name|CHUNKED
operator|.
name|equalsIgnoreCase
argument_list|(
name|head
argument_list|)
decl_stmt|;
name|head
operator|=
name|httpResponse
operator|.
name|getHeader
argument_list|(
name|HttpHeaderHelper
operator|.
name|CONNECTION
argument_list|)
expr_stmt|;
name|boolean
name|isEofTerminated
init|=
name|head
operator|!=
literal|null
operator|&&
name|HttpHeaderHelper
operator|.
name|CLOSE
operator|.
name|equalsIgnoreCase
argument_list|(
name|head
argument_list|)
decl_stmt|;
if|if
condition|(
name|cli
operator|>
literal|0
condition|)
block|{
name|in
operator|=
name|getInputStream
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isChunked
operator|||
name|isEofTerminated
condition|)
block|{
comment|// ensure chunked or EOF-terminated response is non-empty
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|PushbackInputStream
name|pin
init|=
operator|new
name|PushbackInputStream
argument_list|(
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|pin
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
operator|-
literal|1
condition|)
block|{
name|pin
operator|.
name|unread
argument_list|(
operator|(
name|byte
operator|)
name|c
argument_list|)
expr_stmt|;
name|in
operator|=
name|pin
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
return|return
name|in
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setupNewConnection
parameter_list|(
name|String
name|newURL
parameter_list|)
throws|throws
name|IOException
block|{
name|httpResponse
operator|=
literal|null
expr_stmt|;
name|isAsync
operator|=
literal|false
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
name|channel
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|url
operator|=
operator|new
name|URI
argument_list|(
name|newURL
argument_list|)
expr_stmt|;
name|setupConnection
argument_list|(
name|outMessage
argument_list|,
name|this
operator|.
name|url
argument_list|,
name|csPolicy
argument_list|)
expr_stmt|;
name|entity
operator|=
name|outMessage
operator|.
name|get
argument_list|(
name|NettyHttpClientRequest
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//reset the buffers
name|outBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|outputStream
operator|=
operator|new
name|ChannelBufferOutputStream
argument_list|(
name|outBuffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|retransmitStream
parameter_list|()
throws|throws
name|IOException
block|{
name|cachingForRetransmission
operator|=
literal|false
expr_stmt|;
comment|//already cached
name|setupWrappedStream
argument_list|()
expr_stmt|;
name|cachedStream
operator|.
name|writeCacheTo
argument_list|(
name|wrappedStream
argument_list|)
expr_stmt|;
name|wrappedStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|wrappedStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|updateCookiesBeforeRetransmit
parameter_list|()
throws|throws
name|IOException
block|{
name|Headers
name|h
init|=
operator|new
name|Headers
argument_list|()
decl_stmt|;
name|readHeaders
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|cookies
operator|.
name|readFromHeaders
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|thresholdReached
parameter_list|()
throws|throws
name|IOException
block|{
name|entity
operator|.
name|getRequest
argument_list|()
operator|.
name|setChunked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|setHttpResponse
parameter_list|(
name|HttpResponse
name|r
parameter_list|)
block|{
name|httpResponse
operator|=
name|r
expr_stmt|;
if|if
condition|(
name|isAsync
condition|)
block|{
comment|//got a response, need to start the response processing now
try|try
block|{
name|handleResponseOnWorkqueue
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|isAsync
operator|=
literal|false
expr_stmt|;
comment|// don't trigger another start on next block. :-)
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore, we'll try again on the next consume;
block|}
block|}
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|setException
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
if|if
condition|(
name|isAsync
condition|)
block|{
comment|//got a response, need to start the response processing now
try|try
block|{
name|handleResponseOnWorkqueue
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|isAsync
operator|=
literal|false
expr_stmt|;
comment|// don't trigger another start on next block. :-)
block|}
catch|catch
parameter_list|(
name|Exception
name|ex2
parameter_list|)
block|{
name|ex2
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|setChannel
parameter_list|(
name|Channel
name|ch
parameter_list|)
block|{
name|channel
operator|=
name|ch
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

