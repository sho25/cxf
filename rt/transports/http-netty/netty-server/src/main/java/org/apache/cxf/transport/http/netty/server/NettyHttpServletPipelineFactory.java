begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|server
operator|.
name|interceptor
operator|.
name|ChannelInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|server
operator|.
name|interceptor
operator|.
name|HttpSessionInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|server
operator|.
name|session
operator|.
name|DefaultHttpSessionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|server
operator|.
name|session
operator|.
name|HttpSessionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPipelineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|ChannelGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|DefaultChannelGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpChunkAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpContentCompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequestDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|execution
operator|.
name|ExecutionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|execution
operator|.
name|OrderedMemoryAwareThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|IdleStateHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|HashedWheelTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|netty
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_class
specifier|public
class|class
name|NettyHttpServletPipelineFactory
implements|implements
name|ChannelPipelineFactory
block|{
specifier|private
specifier|final
name|ChannelGroup
name|allChannels
init|=
operator|new
name|DefaultChannelGroup
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HttpSessionWatchdog
name|watchdog
decl_stmt|;
specifier|private
specifier|final
name|ChannelHandler
name|idleStateHandler
decl_stmt|;
specifier|private
specifier|final
name|Timer
name|timer
decl_stmt|;
comment|// TODO we may need to configure the thread pool from outside
specifier|private
specifier|final
name|ExecutionHandler
name|executionHandler
init|=
operator|new
name|ExecutionHandler
argument_list|(
operator|new
name|OrderedMemoryAwareThreadPoolExecutor
argument_list|(
literal|200
argument_list|,
literal|2048576
argument_list|,
literal|204857600
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NettyHttpContextHandler
argument_list|>
name|handlerMap
decl_stmt|;
specifier|public
name|NettyHttpServletPipelineFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|NettyHttpContextHandler
argument_list|>
name|handlerMap
parameter_list|)
block|{
name|this
operator|.
name|timer
operator|=
operator|new
name|HashedWheelTimer
argument_list|()
expr_stmt|;
name|this
operator|.
name|idleStateHandler
operator|=
operator|new
name|IdleStateHandler
argument_list|(
name|this
operator|.
name|timer
argument_list|,
literal|60
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|watchdog
operator|=
operator|new
name|HttpSessionWatchdog
argument_list|()
expr_stmt|;
name|this
operator|.
name|handlerMap
operator|=
name|handlerMap
expr_stmt|;
operator|new
name|Thread
argument_list|(
name|watchdog
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|NettyHttpContextHandler
argument_list|>
name|getHttpContextHandlerMap
parameter_list|()
block|{
return|return
name|handlerMap
return|;
block|}
specifier|public
name|ChannelGroup
name|getAllChannels
parameter_list|()
block|{
return|return
name|allChannels
return|;
block|}
specifier|public
name|NettyHttpContextHandler
name|getNettyHttpHandler
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
init|=
name|handlerMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keySet
control|)
block|{
comment|// Here just check the context path first
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|handlerMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|this
operator|.
name|watchdog
operator|.
name|stopWatching
argument_list|()
expr_stmt|;
name|this
operator|.
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|this
operator|.
name|allChannels
operator|.
name|close
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|ChannelPipeline
name|getPipeline
parameter_list|()
throws|throws
name|Exception
block|{
name|ChannelPipeline
name|pipeline
init|=
name|this
operator|.
name|getDefaulHttpChannelPipeline
argument_list|()
decl_stmt|;
comment|// need to add another executor handler for invocation the service
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"executionHandler"
argument_list|,
name|executionHandler
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"handler"
argument_list|,
name|this
operator|.
name|getServletHandler
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pipeline
return|;
block|}
specifier|protected
name|HttpSessionStore
name|getHttpSessionStore
parameter_list|()
block|{
return|return
operator|new
name|DefaultHttpSessionStore
argument_list|()
return|;
block|}
specifier|protected
name|NettyHttpServletHandler
name|getServletHandler
parameter_list|()
block|{
name|NettyHttpServletHandler
name|handler
init|=
operator|new
name|NettyHttpServletHandler
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|handler
operator|.
name|addInterceptor
argument_list|(
operator|new
name|ChannelInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|addInterceptor
argument_list|(
operator|new
name|HttpSessionInterceptor
argument_list|(
name|getHttpSessionStore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|handler
return|;
block|}
specifier|protected
name|ChannelPipeline
name|getDefaulHttpChannelPipeline
parameter_list|()
block|{
comment|// Create a default pipeline implementation.
name|ChannelPipeline
name|pipeline
init|=
name|Channels
operator|.
name|pipeline
argument_list|()
decl_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"decoder"
argument_list|,
operator|new
name|HttpRequestDecoder
argument_list|()
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"aggregator"
argument_list|,
operator|new
name|HttpChunkAggregator
argument_list|(
literal|1048576
argument_list|)
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"encoder"
argument_list|,
operator|new
name|HttpResponseEncoder
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the following line if you don't want automatic content
comment|// compression.
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"deflater"
argument_list|,
operator|new
name|HttpContentCompressor
argument_list|()
argument_list|)
expr_stmt|;
name|pipeline
operator|.
name|addLast
argument_list|(
literal|"idle"
argument_list|,
name|this
operator|.
name|idleStateHandler
argument_list|)
expr_stmt|;
return|return
name|pipeline
return|;
block|}
specifier|private
class|class
name|HttpSessionWatchdog
implements|implements
name|Runnable
block|{
specifier|private
name|boolean
name|shouldStopWatching
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|shouldStopWatching
condition|)
block|{
try|try
block|{
name|HttpSessionStore
name|store
init|=
name|getHttpSessionStore
argument_list|()
decl_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|destroyInactiveSessions
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
specifier|public
name|void
name|stopWatching
parameter_list|()
block|{
name|this
operator|.
name|shouldStopWatching
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

