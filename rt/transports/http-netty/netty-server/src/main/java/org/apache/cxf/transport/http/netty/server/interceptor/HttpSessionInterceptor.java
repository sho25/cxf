begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|server
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|server
operator|.
name|servlet
operator|.
name|HttpSessionThreadLocal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|server
operator|.
name|servlet
operator|.
name|NettyHttpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|server
operator|.
name|session
operator|.
name|HttpSessionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|server
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaderNames
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|cookie
operator|.
name|ClientCookieEncoder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|cookie
operator|.
name|Cookie
import|;
end_import

begin_class
specifier|public
class|class
name|HttpSessionInterceptor
implements|implements
name|NettyInterceptor
block|{
specifier|private
name|boolean
name|sessionRequestedByCookie
decl_stmt|;
specifier|public
name|HttpSessionInterceptor
parameter_list|(
name|HttpSessionStore
name|sessionStore
parameter_list|)
block|{
name|HttpSessionThreadLocal
operator|.
name|setSessionStore
argument_list|(
name|sessionStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onRequestReceived
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|request
parameter_list|)
block|{
name|HttpSessionThreadLocal
operator|.
name|unset
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|Cookie
argument_list|>
name|cookies
init|=
name|Utils
operator|.
name|getCookies
argument_list|(
name|NettyHttpSession
operator|.
name|SESSION_ID_KEY
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|cookies
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Cookie
name|cookie
range|:
name|cookies
control|)
block|{
name|String
name|jsessionId
init|=
name|cookie
operator|.
name|value
argument_list|()
decl_stmt|;
name|NettyHttpSession
name|s
init|=
name|HttpSessionThreadLocal
operator|.
name|getSessionStore
argument_list|()
operator|.
name|findSession
argument_list|(
name|jsessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|HttpSessionThreadLocal
operator|.
name|set
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|this
operator|.
name|sessionRequestedByCookie
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onRequestSuccessed
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpResponse
name|response
parameter_list|)
block|{
name|NettyHttpSession
name|s
init|=
name|HttpSessionThreadLocal
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|sessionRequestedByCookie
condition|)
block|{
comment|// setup the Cookie for session
name|response
operator|.
name|headers
argument_list|()
operator|.
name|set
argument_list|(
name|HttpHeaderNames
operator|.
name|SET_COOKIE
argument_list|,
name|ClientCookieEncoder
operator|.
name|STRICT
operator|.
name|encode
argument_list|(
name|NettyHttpSession
operator|.
name|SESSION_ID_KEY
argument_list|,
name|s
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onRequestFailed
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|this
operator|.
name|sessionRequestedByCookie
operator|=
literal|false
expr_stmt|;
name|HttpSessionThreadLocal
operator|.
name|unset
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

