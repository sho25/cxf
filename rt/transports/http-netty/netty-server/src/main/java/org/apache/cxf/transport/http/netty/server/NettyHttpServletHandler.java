begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|server
operator|.
name|interceptor
operator|.
name|NettyInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|server
operator|.
name|servlet
operator|.
name|NettyHttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|server
operator|.
name|servlet
operator|.
name|NettyServletResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|Unpooled
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFuture
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelFutureListener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInboundHandlerAdapter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|group
operator|.
name|ChannelGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|TooLongFrameException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultFullHttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|DefaultHttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|FullHttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpResponseStatus
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|IdleState
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|timeout
operator|.
name|IdleStateEvent
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|util
operator|.
name|CharsetUtil
import|;
end_import

begin_class
specifier|public
class|class
name|NettyHttpServletHandler
extends|extends
name|ChannelInboundHandlerAdapter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|NettyHttpServletHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ChannelGroup
name|allChannels
decl_stmt|;
specifier|private
specifier|final
name|NettyHttpServletPipelineFactory
name|pipelineFactory
decl_stmt|;
specifier|private
name|List
argument_list|<
name|NettyInterceptor
argument_list|>
name|interceptors
decl_stmt|;
specifier|public
name|NettyHttpServletHandler
parameter_list|(
name|NettyHttpServletPipelineFactory
name|pipelineFactory
parameter_list|)
block|{
name|this
operator|.
name|allChannels
operator|=
name|pipelineFactory
operator|.
name|getAllChannels
argument_list|()
expr_stmt|;
name|this
operator|.
name|pipelineFactory
operator|=
name|pipelineFactory
expr_stmt|;
block|}
specifier|public
name|NettyHttpServletHandler
name|addInterceptor
parameter_list|(
name|NettyInterceptor
name|interceptor
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|interceptors
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|interceptors
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|interceptors
operator|.
name|add
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelActive
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Opening new channel: {}"
argument_list|,
name|ctx
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
comment|// Agent map
name|allChannels
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|channel
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|userEventTriggered
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|evt
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|evt
operator|instanceof
name|IdleStateEvent
condition|)
block|{
name|IdleStateEvent
name|e
init|=
operator|(
name|IdleStateEvent
operator|)
name|evt
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|state
argument_list|()
operator|==
name|IdleState
operator|.
name|READER_IDLE
operator|||
name|e
operator|.
name|state
argument_list|()
operator|==
name|IdleState
operator|.
name|WRITER_IDLE
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Closing idle channel: {}"
argument_list|,
name|e
operator|.
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelRead
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpRequest
name|request
init|=
operator|(
name|HttpRequest
operator|)
name|msg
decl_stmt|;
if|if
condition|(
name|HttpHeaders
operator|.
name|is100ContinueExpected
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|ctx
operator|.
name|write
argument_list|(
operator|new
name|DefaultHttpResponse
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpResponseStatus
operator|.
name|CONTINUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// find the nettyHttpContextHandler by lookup the request url
name|NettyHttpContextHandler
name|nettyHttpContextHandler
init|=
name|pipelineFactory
operator|.
name|getNettyHttpHandler
argument_list|(
name|request
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nettyHttpContextHandler
operator|!=
literal|null
condition|)
block|{
name|handleHttpServletRequest
argument_list|(
name|ctx
argument_list|,
name|request
argument_list|,
name|nettyHttpContextHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"NO_NETTY_SERVLET_HANDLER_FOUND"
argument_list|,
name|LOG
argument_list|,
name|request
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|channelReadComplete
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
name|ctx
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|handleHttpServletRequest
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|NettyHttpContextHandler
name|nettyHttpContextHandler
parameter_list|)
throws|throws
name|Exception
block|{
name|interceptOnRequestReceived
argument_list|(
name|ctx
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|FullHttpResponse
name|response
init|=
operator|new
name|DefaultFullHttpResponse
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|HttpResponseStatus
operator|.
name|OK
argument_list|)
decl_stmt|;
name|NettyServletResponse
name|nettyServletResponse
init|=
name|buildHttpServletResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|NettyHttpServletRequest
name|nettyServletRequest
init|=
name|buildHttpServletRequest
argument_list|(
name|request
argument_list|,
name|nettyHttpContextHandler
operator|.
name|getContextPath
argument_list|()
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|nettyHttpContextHandler
operator|.
name|handle
argument_list|(
name|nettyServletRequest
operator|.
name|getRequestURI
argument_list|()
argument_list|,
name|nettyServletRequest
argument_list|,
name|nettyServletResponse
argument_list|)
expr_stmt|;
name|interceptOnRequestSuccessed
argument_list|(
name|ctx
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|nettyServletResponse
operator|.
name|getWriter
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|boolean
name|keepAlive
init|=
name|HttpHeaders
operator|.
name|isKeepAlive
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|keepAlive
condition|)
block|{
comment|// Add 'Content-Length' header only for a keep-alive connection.
name|response
operator|.
name|headers
argument_list|()
operator|.
name|set
argument_list|(
name|Names
operator|.
name|CONTENT_LENGTH
argument_list|,
name|response
operator|.
name|content
argument_list|()
operator|.
name|readableBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add keep alive header as per:
comment|// -
comment|// http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01.html#Connection
name|response
operator|.
name|headers
argument_list|()
operator|.
name|set
argument_list|(
name|Names
operator|.
name|CONNECTION
argument_list|,
name|HttpHeaders
operator|.
name|Values
operator|.
name|KEEP_ALIVE
argument_list|)
expr_stmt|;
block|}
comment|// write response...
name|ChannelFuture
name|future
init|=
name|ctx
operator|.
name|write
argument_list|(
name|response
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|keepAlive
condition|)
block|{
name|future
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|cause
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"UNEXPECTED_EXCEPCTION_IN_NETTY_SERVLET_HANDLER"
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|interceptOnRequestFailed
argument_list|(
name|ctx
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|Channel
name|ch
init|=
name|ctx
operator|.
name|channel
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|IllegalArgumentException
condition|)
block|{
name|ch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cause
operator|instanceof
name|TooLongFrameException
condition|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
name|HttpResponseStatus
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|ch
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|sendError
argument_list|(
name|ctx
argument_list|,
name|HttpResponseStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|sendError
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpResponseStatus
name|status
parameter_list|)
block|{
name|ByteBuf
name|content
init|=
name|Unpooled
operator|.
name|copiedBuffer
argument_list|(
literal|"Failure: "
operator|+
name|status
operator|.
name|toString
argument_list|()
operator|+
literal|"\r\n"
argument_list|,
name|CharsetUtil
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|FullHttpResponse
name|response
init|=
operator|new
name|DefaultFullHttpResponse
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|status
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|response
operator|.
name|headers
argument_list|()
operator|.
name|set
argument_list|(
name|Names
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/plain; charset=UTF-8"
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|write
argument_list|(
name|response
argument_list|)
operator|.
name|addListener
argument_list|(
name|ChannelFutureListener
operator|.
name|CLOSE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|interceptOnRequestReceived
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|interceptors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|NettyInterceptor
name|interceptor
range|:
name|this
operator|.
name|interceptors
control|)
block|{
name|interceptor
operator|.
name|onRequestReceived
argument_list|(
name|ctx
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|interceptOnRequestSuccessed
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|HttpResponse
name|response
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|interceptors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|NettyInterceptor
name|interceptor
range|:
name|this
operator|.
name|interceptors
control|)
block|{
name|interceptor
operator|.
name|onRequestSuccessed
argument_list|(
name|ctx
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|interceptOnRequestFailed
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|interceptors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|NettyInterceptor
name|interceptor
range|:
name|this
operator|.
name|interceptors
control|)
block|{
name|interceptor
operator|.
name|onRequestFailed
argument_list|(
name|ctx
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|NettyServletResponse
name|buildHttpServletResponse
parameter_list|(
name|HttpResponse
name|response
parameter_list|)
block|{
comment|// need to access the
return|return
operator|new
name|NettyServletResponse
argument_list|(
name|response
argument_list|)
return|;
block|}
specifier|protected
name|NettyHttpServletRequest
name|buildHttpServletRequest
parameter_list|(
name|HttpRequest
name|request
parameter_list|,
name|String
name|contextPath
parameter_list|,
name|ChannelHandlerContext
name|ctx
parameter_list|)
block|{
return|return
operator|new
name|NettyHttpServletRequest
argument_list|(
name|request
argument_list|,
name|contextPath
argument_list|,
name|ctx
argument_list|)
return|;
block|}
block|}
end_class

end_unit

