begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|netty
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|HttpUrlUtil
import|;
end_import

begin_class
specifier|public
class|class
name|NettyHttpHandler
block|{
specifier|private
name|String
name|urlName
decl_stmt|;
specifier|private
name|boolean
name|contextMatchExact
decl_stmt|;
specifier|private
name|NettyHttpDestination
name|nettyHttpDestination
decl_stmt|;
specifier|private
name|ServletContext
name|servletContext
decl_stmt|;
specifier|public
name|NettyHttpHandler
parameter_list|(
name|NettyHttpDestination
name|nhd
parameter_list|,
name|boolean
name|cmExact
parameter_list|)
block|{
name|contextMatchExact
operator|=
name|cmExact
expr_stmt|;
name|nettyHttpDestination
operator|=
name|nhd
expr_stmt|;
block|}
specifier|public
name|void
name|setServletContext
parameter_list|(
name|ServletContext
name|sc
parameter_list|)
block|{
name|servletContext
operator|=
name|sc
expr_stmt|;
if|if
condition|(
name|nettyHttpDestination
operator|!=
literal|null
condition|)
block|{
name|nettyHttpDestination
operator|.
name|setServletContext
argument_list|(
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|urlName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|urlName
return|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|String
name|target
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
if|if
condition|(
name|contextMatchExact
condition|)
block|{
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
name|urlName
argument_list|)
condition|)
block|{
name|nettyHttpDestination
operator|.
name|doService
argument_list|(
name|servletContext
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
name|urlName
argument_list|)
operator|||
name|HttpUrlUtil
operator|.
name|checkContextPath
argument_list|(
name|getName
argument_list|()
argument_list|,
name|target
argument_list|)
condition|)
block|{
name|nettyHttpDestination
operator|.
name|doService
argument_list|(
name|servletContext
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getContextPath
parameter_list|()
block|{
return|return
name|servletContext
operator|.
name|getContextPath
argument_list|()
return|;
block|}
block|}
end_class

end_unit

