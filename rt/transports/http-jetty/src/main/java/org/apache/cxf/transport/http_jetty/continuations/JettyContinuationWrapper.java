begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_jetty
operator|.
name|continuations
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|continuations
operator|.
name|Continuation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|continuations
operator|.
name|ContinuationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|continuations
operator|.
name|SuspendedInvocationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|RetryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|ajax
operator|.
name|ContinuationSupport
import|;
end_import

begin_class
specifier|public
class|class
name|JettyContinuationWrapper
implements|implements
name|Continuation
block|{
specifier|private
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|ajax
operator|.
name|Continuation
name|continuation
decl_stmt|;
specifier|private
name|Message
name|message
decl_stmt|;
specifier|public
name|JettyContinuationWrapper
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|continuation
operator|=
name|ContinuationSupport
operator|.
name|getContinuation
argument_list|(
name|request
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|message
operator|=
name|m
expr_stmt|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
block|{
name|Object
name|o
init|=
name|continuation
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|ContinuationInfo
condition|)
block|{
return|return
operator|(
operator|(
name|ContinuationInfo
operator|)
name|o
operator|)
operator|.
name|getUserObject
argument_list|()
return|;
block|}
return|return
name|o
return|;
block|}
specifier|public
name|boolean
name|isNew
parameter_list|()
block|{
return|return
name|continuation
operator|.
name|isNew
argument_list|()
operator|||
operator|(
operator|!
name|continuation
operator|.
name|isPending
argument_list|()
operator|&&
operator|!
name|continuation
operator|.
name|isResumed
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|isPending
parameter_list|()
block|{
return|return
name|continuation
operator|.
name|isPending
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isResumed
parameter_list|()
block|{
return|return
name|continuation
operator|.
name|isResumed
argument_list|()
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|continuation
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|resume
parameter_list|()
block|{
name|continuation
operator|.
name|resume
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setObject
parameter_list|(
name|Object
name|userObject
parameter_list|)
block|{
name|ContinuationInfo
name|ci
init|=
literal|null
decl_stmt|;
name|Message
name|m
init|=
name|message
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getExchange
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|m
operator|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
expr_stmt|;
block|}
name|Object
name|obj
init|=
name|continuation
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|ContinuationInfo
condition|)
block|{
name|ci
operator|=
operator|(
name|ContinuationInfo
operator|)
name|obj
expr_stmt|;
block|}
else|else
block|{
name|ci
operator|=
operator|new
name|ContinuationInfo
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setUserObject
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|!=
name|userObject
condition|)
block|{
name|ci
operator|.
name|setUserObject
argument_list|(
name|userObject
argument_list|)
expr_stmt|;
block|}
name|continuation
operator|.
name|setObject
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|suspend
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|Object
name|obj
init|=
name|continuation
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
name|continuation
operator|.
name|setObject
argument_list|(
operator|new
name|ContinuationInfo
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|continuation
operator|.
name|suspend
argument_list|(
name|timeout
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RetryRequest
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SuspendedInvocationException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|done
parameter_list|()
block|{
name|ContinuationInfo
name|ci
init|=
literal|null
decl_stmt|;
name|Object
name|obj
init|=
name|continuation
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|ContinuationInfo
condition|)
block|{
name|ci
operator|=
operator|(
name|ContinuationInfo
operator|)
name|obj
expr_stmt|;
name|continuation
operator|.
name|setObject
argument_list|(
name|ci
operator|.
name|getUserObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|continuation
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Message
name|getMessage
parameter_list|()
block|{
name|Message
name|m
init|=
name|message
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|m
operator|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
specifier|public
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|ajax
operator|.
name|Continuation
name|getContinuation
parameter_list|()
block|{
return|return
name|continuation
return|;
block|}
block|}
end_class

end_unit

