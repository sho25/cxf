begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_jetty
operator|.
name|continuations
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequestWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|continuations
operator|.
name|ContinuationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|AbstractHTTPDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|ContinuationProviderFactory
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|JettyContinuationProviderFactory
implements|implements
name|ContinuationProviderFactory
block|{
specifier|final
name|boolean
name|disableJettyContinuations
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"org.apache.cxf.transport.http_jetty.continuations.disable"
argument_list|)
decl_stmt|;
specifier|public
name|JettyContinuationProviderFactory
parameter_list|()
block|{     }
specifier|public
name|ContinuationProvider
name|createContinuationProvider
parameter_list|(
name|Message
name|inMessage
parameter_list|,
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
block|{
if|if
condition|(
operator|!
name|disableJettyContinuations
condition|)
block|{
name|ServletRequest
name|r2
init|=
name|req
decl_stmt|;
while|while
condition|(
name|r2
operator|instanceof
name|ServletRequestWrapper
condition|)
block|{
name|r2
operator|=
operator|(
operator|(
name|ServletRequestWrapper
operator|)
name|r2
operator|)
operator|.
name|getRequest
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r2
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"jetty"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|Method
name|m
init|=
name|r2
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"isAsyncSupported"
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|m
argument_list|)
operator|.
name|invoke
argument_list|(
name|r2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|Boolean
operator|)
name|o
operator|)
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
return|return
operator|new
name|JettyContinuationProvider
argument_list|(
name|req
argument_list|,
name|resp
argument_list|,
name|inMessage
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore - either not a proper Jetty request object or classloader issue
comment|//or similar.
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Message
name|retrieveFromContinuation
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
return|return
operator|(
name|Message
operator|)
name|req
operator|.
name|getAttribute
argument_list|(
name|AbstractHTTPDestination
operator|.
name|CXF_CONTINUATION_MESSAGE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

