begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_jetty
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSServerParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|spring
operator|.
name|TLSServerParametersConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|spring
operator|.
name|AbstractBeanDefinitionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|spring
operator|.
name|BusWiringType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_jetty
operator|.
name|JettyHTTPServerEngineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_jetty
operator|.
name|ThreadingParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http_jetty
operator|.
name|configuration
operator|.
name|TLSServerParametersIdentifiedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http_jetty
operator|.
name|configuration
operator|.
name|ThreadingParametersIdentifiedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http_jetty
operator|.
name|configuration
operator|.
name|ThreadingParametersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|support
operator|.
name|BeanDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|support
operator|.
name|ManagedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|ParserContext
import|;
end_import

begin_class
specifier|public
class|class
name|JettyHTTPServerEngineFactoryBeanDefinitionParser
extends|extends
name|AbstractBeanDefinitionParser
block|{
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_JETTY_NS
init|=
literal|"http://cxf.apache.org/transports/http-jetty/configuration"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|doParse
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|ctx
parameter_list|,
name|BeanDefinitionBuilder
name|bean
parameter_list|)
block|{
comment|//bean.setAbstract(true);
name|String
name|bus
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"bus"
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|ThreadingParametersIdentifiedType
argument_list|>
name|threadingParametersIdentifiedTypes
init|=
name|JAXBHelper
operator|.
name|parseListElement
argument_list|(
name|element
argument_list|,
name|bean
argument_list|,
operator|new
name|QName
argument_list|(
name|HTTP_JETTY_NS
argument_list|,
literal|"identifiedThreadingParameters"
argument_list|)
argument_list|,
name|ThreadingParametersIdentifiedType
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ThreadingParameters
argument_list|>
name|threadingParametersMap
init|=
name|toThreadingParameters
argument_list|(
name|threadingParametersIdentifiedTypes
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TLSServerParametersIdentifiedType
argument_list|>
name|tlsServerParameters
init|=
name|JAXBHelper
operator|.
name|parseListElement
argument_list|(
name|element
argument_list|,
name|bean
argument_list|,
operator|new
name|QName
argument_list|(
name|HTTP_JETTY_NS
argument_list|,
literal|"identifiedTLSServerParameters"
argument_list|)
argument_list|,
name|TLSServerParametersIdentifiedType
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TLSServerParameters
argument_list|>
name|tlsServerParametersMap
init|=
name|toTLSServerParamenters
argument_list|(
name|tlsServerParameters
argument_list|)
decl_stmt|;
name|bean
operator|.
name|addPropertyValue
argument_list|(
literal|"threadingParametersMap"
argument_list|,
name|threadingParametersMap
argument_list|)
expr_stmt|;
name|bean
operator|.
name|addPropertyValue
argument_list|(
literal|"tlsServerParametersMap"
argument_list|,
name|tlsServerParametersMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|bus
argument_list|)
condition|)
block|{
name|addBusWiringAttribute
argument_list|(
name|bean
argument_list|,
name|BusWiringType
operator|.
name|PROPERTY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bean
operator|.
name|addPropertyReference
argument_list|(
literal|"bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
block|}
comment|// parser the engine list
name|List
name|list
init|=
name|getRequiredElementsList
argument_list|(
name|element
argument_list|,
name|ctx
argument_list|,
operator|new
name|QName
argument_list|(
name|HTTP_JETTY_NS
argument_list|,
literal|"engine"
argument_list|)
argument_list|,
name|bean
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|bean
operator|.
name|addPropertyValue
argument_list|(
literal|"enginesList"
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not process configuration."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
name|getRequiredElementsList
parameter_list|(
name|Element
name|parent
parameter_list|,
name|ParserContext
name|ctx
parameter_list|,
name|QName
name|name
parameter_list|,
name|BeanDefinitionBuilder
name|bean
parameter_list|)
block|{
name|NodeList
name|nl
init|=
name|parent
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|ManagedList
name|list
init|=
operator|new
name|ManagedList
argument_list|(
name|nl
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|setSource
argument_list|(
name|ctx
operator|.
name|extractSource
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|nl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|name
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|n
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|n
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|ctx
operator|.
name|getDelegate
argument_list|()
operator|.
name|parsePropertySubElement
argument_list|(
operator|(
name|Element
operator|)
name|n
argument_list|,
name|bean
operator|.
name|getBeanDefinition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ThreadingParameters
argument_list|>
name|toThreadingParameters
parameter_list|(
name|List
argument_list|<
name|ThreadingParametersIdentifiedType
argument_list|>
name|list
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ThreadingParameters
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|ThreadingParameters
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ThreadingParametersIdentifiedType
name|t
range|:
name|list
control|)
block|{
name|ThreadingParameters
name|parameter
init|=
name|toThreadingParameters
argument_list|(
name|t
operator|.
name|getThreadingParameters
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|t
operator|.
name|getId
argument_list|()
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|private
name|ThreadingParameters
name|toThreadingParameters
parameter_list|(
name|ThreadingParametersType
name|paramtype
parameter_list|)
block|{
name|ThreadingParameters
name|params
init|=
operator|new
name|ThreadingParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setMaxThreads
argument_list|(
name|paramtype
operator|.
name|getMaxThreads
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|setMinThreads
argument_list|(
name|paramtype
operator|.
name|getMinThreads
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TLSServerParameters
argument_list|>
name|toTLSServerParamenters
parameter_list|(
name|List
argument_list|<
name|TLSServerParametersIdentifiedType
argument_list|>
name|list
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TLSServerParameters
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|TLSServerParameters
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TLSServerParametersIdentifiedType
name|t
range|:
name|list
control|)
block|{
try|try
block|{
name|TLSServerParameters
name|parameter
init|=
operator|new
name|TLSServerParametersConfig
argument_list|(
name|t
operator|.
name|getTlsServerParameters
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|t
operator|.
name|getId
argument_list|()
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not configure TLS for id "
operator|+
name|t
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|map
return|;
block|}
comment|/*      * We do not require an id from the configuration.      *       * (non-Javadoc)      * @see org.springframework.beans.factory.xml.AbstractBeanDefinitionParser#shouldGenerateId()      */
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldGenerateId
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Class
name|getBeanClass
parameter_list|(
name|Element
name|arg0
parameter_list|)
block|{
return|return
name|JettyHTTPServerEngineFactory
operator|.
name|class
return|;
block|}
block|}
end_class

end_unit

