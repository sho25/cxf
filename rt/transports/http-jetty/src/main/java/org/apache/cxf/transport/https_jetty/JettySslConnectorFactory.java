begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https_jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509KeyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|SSLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSServerParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|ClientAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_jetty
operator|.
name|JettyConnectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_jetty
operator|.
name|JettyHTTPServerEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|AliasedX509ExtendedKeyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|AbstractConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ssl
operator|.
name|SslSelectChannelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_comment
comment|/**  * This class wraps the JettyConnectorFactory and will create   * TLS enabled acceptors.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|JettySslConnectorFactory
implements|implements
name|JettyConnectorFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JettySslConnectorFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|TLSServerParameters
name|tlsServerParameters
decl_stmt|;
specifier|public
name|JettySslConnectorFactory
parameter_list|(
name|TLSServerParameters
name|params
parameter_list|)
block|{
name|tlsServerParameters
operator|=
name|params
expr_stmt|;
block|}
comment|/**      * Create a Listener.      *       * @param host the host to bind to.  IP address or hostname is allowed. null to bind to all hosts.      * @param port the listen port      */
specifier|public
name|AbstractConnector
name|createConnector
parameter_list|(
name|JettyHTTPServerEngine
name|engine
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
assert|assert
name|tlsServerParameters
operator|!=
literal|null
assert|;
name|SslContextFactory
name|sslcf
init|=
operator|new
name|CXFSslContextFactory
argument_list|()
decl_stmt|;
name|SslSelectChannelConnector
name|secureConnector
init|=
operator|new
name|SslSelectChannelConnector
argument_list|(
name|sslcf
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|secureConnector
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
name|secureConnector
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|.
name|getMaxIdleTime
argument_list|()
operator|>
literal|0
condition|)
block|{
name|secureConnector
operator|.
name|setMaxIdleTime
argument_list|(
name|engine
operator|.
name|getMaxIdleTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|secureConnector
operator|.
name|setReuseAddress
argument_list|(
name|engine
operator|.
name|isReuseAddress
argument_list|()
argument_list|)
expr_stmt|;
name|decorateCXFJettySslSocketConnector
argument_list|(
name|sslcf
argument_list|)
expr_stmt|;
return|return
name|secureConnector
return|;
block|}
specifier|private
class|class
name|CXFSslContextFactory
extends|extends
name|SslContextFactory
block|{
specifier|public
name|CXFSslContextFactory
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|setSslContext
argument_list|(
name|createSSLContext
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|checkKeyStore
parameter_list|()
block|{
comment|//we'll handle this later
block|}
block|}
specifier|protected
name|SSLContext
name|createSSLContext
parameter_list|(
name|SslContextFactory
name|scf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|proto
init|=
name|tlsServerParameters
operator|.
name|getSecureSocketProtocol
argument_list|()
operator|==
literal|null
condition|?
literal|"TLS"
else|:
name|tlsServerParameters
operator|.
name|getSecureSocketProtocol
argument_list|()
decl_stmt|;
name|SSLContext
name|context
init|=
name|tlsServerParameters
operator|.
name|getJsseProvider
argument_list|()
operator|==
literal|null
condition|?
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|proto
argument_list|)
else|:
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|proto
argument_list|,
name|tlsServerParameters
operator|.
name|getJsseProvider
argument_list|()
argument_list|)
decl_stmt|;
name|KeyManager
name|keyManagers
index|[]
init|=
name|tlsServerParameters
operator|.
name|getKeyManagers
argument_list|()
decl_stmt|;
if|if
condition|(
name|tlsServerParameters
operator|.
name|getCertAlias
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keyManagers
operator|=
name|getKeyManagersWithCertAlias
argument_list|(
name|keyManagers
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|init
argument_list|(
name|tlsServerParameters
operator|.
name|getKeyManagers
argument_list|()
argument_list|,
name|tlsServerParameters
operator|.
name|getTrustManagers
argument_list|()
argument_list|,
name|tlsServerParameters
operator|.
name|getSecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|cs
init|=
name|SSLUtils
operator|.
name|getCiphersuites
argument_list|(
name|tlsServerParameters
operator|.
name|getCipherSuites
argument_list|()
argument_list|,
name|SSLUtils
operator|.
name|getServerSupportedCipherSuites
argument_list|(
name|context
argument_list|)
argument_list|,
name|tlsServerParameters
operator|.
name|getCipherSuitesFilter
argument_list|()
argument_list|,
name|LOG
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|scf
operator|.
name|setExcludeCipherSuites
argument_list|(
name|cs
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
specifier|protected
name|KeyManager
index|[]
name|getKeyManagersWithCertAlias
parameter_list|(
name|KeyManager
name|keyManagers
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|tlsServerParameters
operator|.
name|getCertAlias
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|keyManagers
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|keyManagers
index|[
name|idx
index|]
operator|instanceof
name|X509KeyManager
condition|)
block|{
name|keyManagers
index|[
name|idx
index|]
operator|=
operator|new
name|AliasedX509ExtendedKeyManager
argument_list|(
name|tlsServerParameters
operator|.
name|getCertAlias
argument_list|()
argument_list|,
operator|(
name|X509KeyManager
operator|)
name|keyManagers
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|keyManagers
return|;
block|}
specifier|protected
name|void
name|setClientAuthentication
parameter_list|(
name|SslContextFactory
name|con
parameter_list|,
name|ClientAuthentication
name|clientAuth
parameter_list|)
block|{
name|con
operator|.
name|setWantClientAuth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|clientAuth
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|clientAuth
operator|.
name|isSetWant
argument_list|()
condition|)
block|{
name|con
operator|.
name|setWantClientAuth
argument_list|(
name|clientAuth
operator|.
name|isWant
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clientAuth
operator|.
name|isSetRequired
argument_list|()
condition|)
block|{
name|con
operator|.
name|setNeedClientAuth
argument_list|(
name|clientAuth
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This method sets the security properties for the CXF extension      * of the JettySslConnector.      */
specifier|private
name|void
name|decorateCXFJettySslSocketConnector
parameter_list|(
name|SslContextFactory
name|con
parameter_list|)
block|{
name|setClientAuthentication
argument_list|(
name|con
argument_list|,
name|tlsServerParameters
operator|.
name|getClientAuthentication
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|setCertAlias
argument_list|(
name|tlsServerParameters
operator|.
name|getCertAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

