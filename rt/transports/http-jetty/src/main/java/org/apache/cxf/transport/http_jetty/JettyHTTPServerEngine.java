begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|RequestDispatcher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SystemPropertyAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|SSLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSServerParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|ClientAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|HttpUriMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|AliasedX509ExtendedKeyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|security
operator|.
name|SecurityHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|AbstractConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|SessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ContextHandlerCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|HandlerCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|HashSessionIdManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|HashSessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|SessionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|component
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|ThreadPool
import|;
end_import

begin_comment
comment|/**  * This class is the Jetty HTTP Server Engine that is configured to  * work off of a designated port. The port will be enabled for   * "http" or "https" depending upon its successful configuration.  */
end_comment

begin_class
specifier|public
class|class
name|JettyHTTPServerEngine
implements|implements
name|ServerEngine
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JettyHTTPServerEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DO_NOT_CHECK_URL_PROP
init|=
literal|"org.apache.cxf.transports.http_jetty.DontCheckUrl"
decl_stmt|;
comment|/**      * This is the network port for which this engine is allocated.      */
specifier|private
name|int
name|port
decl_stmt|;
comment|/**      * This is the network address for which this engine is allocated.      */
specifier|private
name|String
name|host
decl_stmt|;
comment|/**      * This field holds the protocol for which this engine is       * enabled, i.e. "http" or "https".      */
specifier|private
name|String
name|protocol
init|=
literal|"http"
decl_stmt|;
specifier|private
name|Boolean
name|isSessionSupport
init|=
literal|false
decl_stmt|;
specifier|private
name|Boolean
name|isReuseAddress
init|=
literal|true
decl_stmt|;
specifier|private
name|Boolean
name|continuationsEnabled
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|maxIdleTime
init|=
literal|200000
decl_stmt|;
specifier|private
name|Boolean
name|sendServerVersion
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|servantCount
decl_stmt|;
specifier|private
name|Server
name|server
decl_stmt|;
specifier|private
name|Connector
name|connector
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Handler
argument_list|>
name|handlers
decl_stmt|;
specifier|private
name|ContextHandlerCollection
name|contexts
decl_stmt|;
specifier|private
name|Container
operator|.
name|Listener
name|mBeanContainer
decl_stmt|;
specifier|private
name|SessionManager
name|sessionManager
decl_stmt|;
specifier|private
name|ThreadPool
name|threadPool
decl_stmt|;
comment|/**      * This field holds the TLS ServerParameters that are programatically      * configured. The tlsServerParamers (due to JAXB) holds the struct      * placed by SpringConfig.      */
specifier|private
name|TLSServerParameters
name|tlsServerParameters
decl_stmt|;
comment|/**      * This field hold the threading parameters for this particular engine.      */
specifier|private
name|ThreadingParameters
name|threadingParameters
decl_stmt|;
comment|/**      * This boolean signfies that SpringConfig is over. finalizeConfig      * has been called.      */
specifier|private
name|boolean
name|configFinalized
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|registedPaths
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * This constructor is called by the JettyHTTPServerEngineFactory.      */
specifier|public
name|JettyHTTPServerEngine
parameter_list|(
name|Container
operator|.
name|Listener
name|mBeanContainer
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|mBeanContainer
operator|=
name|mBeanContainer
expr_stmt|;
block|}
specifier|public
name|JettyHTTPServerEngine
parameter_list|()
block|{              }
specifier|public
name|void
name|setThreadPool
parameter_list|(
name|ThreadPool
name|p
parameter_list|)
block|{
name|threadPool
operator|=
name|p
expr_stmt|;
block|}
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|p
parameter_list|)
block|{
name|port
operator|=
name|p
expr_stmt|;
block|}
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
specifier|public
name|void
name|setContinuationsEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|continuationsEnabled
operator|=
name|enabled
expr_stmt|;
block|}
specifier|public
name|boolean
name|getContinuationsEnabled
parameter_list|()
block|{
return|return
name|continuationsEnabled
return|;
block|}
comment|/**      * Returns the protocol "http" or "https" for which this engine      * was configured.      */
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
comment|/**      * Returns the port number for which this server engine was configured.      * @return      */
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**      * Returns the host for which this server engine was configured.      * @return      */
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
comment|/**      * This method will shut down the server engine and      * remove it from the factory's cache.       */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|registedPaths
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|shouldDestroyPort
argument_list|()
condition|)
block|{
if|if
condition|(
name|servantCount
operator|==
literal|0
condition|)
block|{
name|JettyHTTPServerEngineFactory
operator|.
name|destroyForPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"FAILED_TO_SHUTDOWN_ENGINE_MSG"
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|shouldDestroyPort
parameter_list|()
block|{
comment|//if we shutdown the port, on SOME OS's/JVM's, if a client
comment|//in the same jvm had been talking to it at some point and keep alives
comment|//are on, then the port is held open for about 60 seconds
comment|//afterwards and if we restart, connections will then
comment|//get sent into the old stuff where there are
comment|//no longer any servant registered.   They pretty much just hang.
comment|//this is most often seen in our unit/system tests that
comment|//test things in the same VM.
name|String
name|s
init|=
name|SystemPropertyAction
operator|.
name|getPropertyOrNull
argument_list|(
literal|"org.apache.cxf.transports.http_jetty.DontClosePort."
operator|+
name|port
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|SystemPropertyAction
operator|.
name|getPropertyOrNull
argument_list|(
literal|"org.apache.cxf.transports.http_jetty.DontClosePort"
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|Boolean
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|shouldCheckUrl
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|Object
name|prop
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|prop
operator|=
name|bus
operator|.
name|getProperty
argument_list|(
name|DO_NOT_CHECK_URL_PROP
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prop
operator|==
literal|null
condition|)
block|{
name|prop
operator|=
name|SystemPropertyAction
operator|.
name|getPropertyOrNull
argument_list|(
name|DO_NOT_CHECK_URL_PROP
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|PropertyUtils
operator|.
name|isTrue
argument_list|(
name|prop
argument_list|)
return|;
block|}
comment|/**      * get the jetty server instance      * @return      */
specifier|public
name|Server
name|getServer
parameter_list|()
block|{
return|return
name|server
return|;
block|}
comment|/**      * Set the jetty server instance       * @param s       */
specifier|public
name|void
name|setServer
parameter_list|(
name|Server
name|s
parameter_list|)
block|{
name|server
operator|=
name|s
expr_stmt|;
block|}
comment|/**      * set the jetty server's connector      * @param c      */
specifier|public
name|void
name|setConnector
parameter_list|(
name|Connector
name|c
parameter_list|)
block|{
name|connector
operator|=
name|c
expr_stmt|;
block|}
comment|/**      * set the jetty server's handlers      * @param h      */
specifier|public
name|void
name|setHandlers
parameter_list|(
name|List
argument_list|<
name|Handler
argument_list|>
name|h
parameter_list|)
block|{
name|handlers
operator|=
name|h
expr_stmt|;
block|}
specifier|public
name|void
name|setSessionSupport
parameter_list|(
name|boolean
name|support
parameter_list|)
block|{
name|isSessionSupport
operator|=
name|support
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSessionSupport
parameter_list|()
block|{
return|return
name|isSessionSupport
return|;
block|}
specifier|public
name|List
argument_list|<
name|Handler
argument_list|>
name|getHandlers
parameter_list|()
block|{
return|return
name|handlers
return|;
block|}
specifier|public
name|Connector
name|getConnector
parameter_list|()
block|{
return|return
name|connector
return|;
block|}
specifier|public
name|boolean
name|isReuseAddress
parameter_list|()
block|{
return|return
name|isReuseAddress
return|;
block|}
specifier|public
name|void
name|setReuseAddress
parameter_list|(
name|boolean
name|reuse
parameter_list|)
block|{
name|isReuseAddress
operator|=
name|reuse
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxIdleTime
parameter_list|()
block|{
return|return
name|maxIdleTime
return|;
block|}
specifier|public
name|void
name|setMaxIdleTime
parameter_list|(
name|int
name|maxIdle
parameter_list|)
block|{
name|maxIdleTime
operator|=
name|maxIdle
expr_stmt|;
block|}
specifier|protected
name|void
name|checkRegistedContext
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|String
name|path
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|registedPath
range|:
name|registedPaths
control|)
block|{
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|registedPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"ADD_HANDLER_CONTEXT_IS_USED_MSG"
argument_list|,
name|LOG
argument_list|,
name|url
argument_list|,
name|registedPath
argument_list|)
argument_list|)
throw|;
block|}
comment|// There are some context path conflicts which could cause the JettyHTTPServerEngine
comment|// doesn't route the message to the right JettyHTTPHandler
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|HttpUriMapper
operator|.
name|getContextName
argument_list|(
name|registedPath
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"ADD_HANDLER_CONTEXT_IS_USED_MSG"
argument_list|,
name|LOG
argument_list|,
name|url
argument_list|,
name|registedPath
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|registedPath
operator|.
name|equals
argument_list|(
name|HttpUriMapper
operator|.
name|getContextName
argument_list|(
name|path
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"ADD_HANDLER_CONTEXT_CONFILICT_MSG"
argument_list|,
name|LOG
argument_list|,
name|url
argument_list|,
name|registedPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|Server
name|createServer
parameter_list|()
block|{
name|Server
name|s
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|threadPool
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|Server
operator|.
name|getVersion
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"8"
argument_list|)
condition|)
block|{
name|s
operator|=
name|Server
operator|.
name|class
operator|.
name|getConstructor
argument_list|(
name|ThreadPool
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|=
operator|new
name|Server
argument_list|()
expr_stmt|;
name|Server
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setThreadPool"
argument_list|,
name|ThreadPool
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|s
argument_list|,
name|threadPool
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
operator|new
name|Server
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Server
operator|.
name|getVersion
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"8"
argument_list|)
condition|)
block|{
comment|//need an error handler that won't leak information about the exception
comment|//back to the client.
name|ErrorHandler
name|eh
init|=
operator|new
name|ErrorHandler
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|String
name|target
parameter_list|,
name|Request
name|baseRequest
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|msg
init|=
name|HttpStatus
operator|.
name|getMessage
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|RequestDispatcher
operator|.
name|ERROR_MESSAGE
argument_list|,
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|instanceof
name|Response
condition|)
block|{
operator|(
operator|(
name|Response
operator|)
name|response
operator|)
operator|.
name|setStatus
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|handle
argument_list|(
name|target
argument_list|,
name|baseRequest
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeErrorPage
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Writer
name|writer
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|message
parameter_list|,
name|boolean
name|showStacks
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|writeErrorPage
argument_list|(
name|request
argument_list|,
name|writer
argument_list|,
name|code
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|s
operator|.
name|addBean
argument_list|(
name|eh
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
comment|/**      * Register a servant.      *       * @param url the URL associated with the servant      * @param handler notified on incoming HTTP requests      */
specifier|public
specifier|synchronized
name|void
name|addServant
parameter_list|(
name|URL
name|url
parameter_list|,
name|JettyHTTPHandler
name|handler
parameter_list|)
block|{
if|if
condition|(
name|shouldCheckUrl
argument_list|(
name|handler
operator|.
name|getBus
argument_list|()
argument_list|)
condition|)
block|{
name|checkRegistedContext
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
name|SecurityHandler
name|securityHandler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|DefaultHandler
name|defaultHandler
init|=
literal|null
decl_stmt|;
comment|// create a new jetty server instance if there is no server there
name|server
operator|=
name|createServer
argument_list|()
expr_stmt|;
name|addServerMBean
argument_list|()
expr_stmt|;
if|if
condition|(
name|connector
operator|==
literal|null
condition|)
block|{
name|connector
operator|=
name|createConnector
argument_list|(
name|getHost
argument_list|()
argument_list|,
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|logConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
block|}
name|server
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|setupThreadPool
argument_list|()
expr_stmt|;
comment|/*              * The server may have no handler, it might have a collection handler,              * it might have a one-shot. We need to add one or more of ours.              *              */
name|int
name|numberOfHandlers
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|handlers
operator|!=
literal|null
condition|)
block|{
name|numberOfHandlers
operator|+=
name|handlers
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|Handler
name|existingHandler
init|=
name|server
operator|.
name|getHandler
argument_list|()
decl_stmt|;
name|HandlerCollection
name|handlerCollection
init|=
literal|null
decl_stmt|;
name|boolean
name|existingHandlerCollection
init|=
name|existingHandler
operator|instanceof
name|HandlerCollection
decl_stmt|;
if|if
condition|(
name|existingHandlerCollection
condition|)
block|{
name|handlerCollection
operator|=
operator|(
name|HandlerCollection
operator|)
name|existingHandler
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|existingHandlerCollection
operator|&&
operator|(
name|existingHandler
operator|!=
literal|null
operator|||
name|numberOfHandlers
operator|>
literal|1
operator|)
condition|)
block|{
name|handlerCollection
operator|=
operator|new
name|HandlerCollection
argument_list|()
expr_stmt|;
if|if
condition|(
name|existingHandler
operator|!=
literal|null
condition|)
block|{
name|handlerCollection
operator|.
name|addHandler
argument_list|(
name|existingHandler
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|setHandler
argument_list|(
name|handlerCollection
argument_list|)
expr_stmt|;
block|}
comment|/*              * At this point, the server's handler is a collection. It was either              * one to start, or it is now one containing only the single handler              * that was there to begin with.              */
if|if
condition|(
name|handlers
operator|!=
literal|null
operator|&&
name|handlers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Handler
name|h
range|:
name|handlers
control|)
block|{
comment|// Filtering out the jetty default handler
comment|// which should not be added at this point.
if|if
condition|(
name|h
operator|instanceof
name|DefaultHandler
condition|)
block|{
name|defaultHandler
operator|=
operator|(
name|DefaultHandler
operator|)
name|h
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|h
operator|instanceof
name|SecurityHandler
operator|)
operator|&&
operator|(
operator|(
name|SecurityHandler
operator|)
name|h
operator|)
operator|.
name|getHandler
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//if h is SecurityHandler(such as ConstraintSecurityHandler)
comment|//then it need be on top of JettyHTTPHandler
comment|//set JettyHTTPHandler as inner handler if
comment|//inner handler is null
operator|(
operator|(
name|SecurityHandler
operator|)
name|h
operator|)
operator|.
name|setHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|securityHandler
operator|=
operator|(
name|SecurityHandler
operator|)
name|h
expr_stmt|;
block|}
else|else
block|{
name|handlerCollection
operator|.
name|addHandler
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|contexts
operator|=
operator|new
name|ContextHandlerCollection
argument_list|()
expr_stmt|;
comment|/*              * handlerCollection may be null here if is only one handler to deal with.              * Which in turn implies that there can't be a 'defaultHander' to deal with.              */
if|if
condition|(
name|handlerCollection
operator|!=
literal|null
condition|)
block|{
name|handlerCollection
operator|.
name|addHandler
argument_list|(
name|contexts
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultHandler
operator|!=
literal|null
condition|)
block|{
name|handlerCollection
operator|.
name|addHandler
argument_list|(
name|defaultHandler
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|server
operator|.
name|setHandler
argument_list|(
name|contexts
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"START_UP_SERVER_FAILED_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getMessage
argument_list|()
block|,
name|port
block|}
argument_list|)
expr_stmt|;
comment|//problem starting server
try|try
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore - probably wasn't fully started anyway
block|}
name|server
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"START_UP_SERVER_FAILED_MSG"
argument_list|,
name|LOG
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|port
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|String
name|contextName
init|=
name|HttpUriMapper
operator|.
name|getContextName
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|ContextHandler
name|context
init|=
operator|new
name|ContextHandler
argument_list|()
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
name|contextName
argument_list|)
expr_stmt|;
comment|// bind the jetty http handler with the context handler
if|if
condition|(
name|isSessionSupport
condition|)
block|{
comment|// If we have sessions, we need two handlers.
if|if
condition|(
name|sessionManager
operator|==
literal|null
condition|)
block|{
name|sessionManager
operator|=
operator|new
name|HashSessionManager
argument_list|()
expr_stmt|;
name|HashSessionIdManager
name|idManager
init|=
operator|new
name|HashSessionIdManager
argument_list|()
decl_stmt|;
name|sessionManager
operator|.
name|setSessionIdManager
argument_list|(
name|idManager
argument_list|)
expr_stmt|;
block|}
name|SessionHandler
name|sessionHandler
init|=
operator|new
name|SessionHandler
argument_list|(
name|sessionManager
argument_list|)
decl_stmt|;
if|if
condition|(
name|securityHandler
operator|!=
literal|null
condition|)
block|{
comment|//use the securityHander which already wrap the jetty http handler
name|sessionHandler
operator|.
name|setHandler
argument_list|(
name|securityHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sessionHandler
operator|.
name|setHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|setHandler
argument_list|(
name|sessionHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise, just the one.
if|if
condition|(
name|securityHandler
operator|!=
literal|null
condition|)
block|{
comment|//use the securityHander which already wrap the jetty http handler
name|context
operator|.
name|setHandler
argument_list|(
name|securityHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|setHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
name|contexts
operator|.
name|addHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|ServletContext
name|sc
init|=
name|context
operator|.
name|getServletContext
argument_list|()
decl_stmt|;
name|handler
operator|.
name|setServletContext
argument_list|(
name|sc
argument_list|)
expr_stmt|;
specifier|final
name|String
name|smap
init|=
name|HttpUriMapper
operator|.
name|getResourceBase
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|handler
operator|.
name|setName
argument_list|(
name|smap
argument_list|)
expr_stmt|;
if|if
condition|(
name|contexts
operator|.
name|isStarted
argument_list|()
condition|)
block|{
try|try
block|{
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"ADD_HANDLER_FAILED_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ex
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|registedPaths
operator|.
name|add
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|servantCount
expr_stmt|;
block|}
specifier|private
name|void
name|addServerMBean
parameter_list|()
block|{
if|if
condition|(
name|mBeanContainer
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Object
name|o
init|=
name|getContainer
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"addEventListener"
argument_list|,
name|Container
operator|.
name|Listener
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|mBeanContainer
argument_list|)
expr_stmt|;
if|if
condition|(
name|Server
operator|.
name|getVersion
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"8"
argument_list|)
condition|)
block|{
return|return;
block|}
name|mBeanContainer
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"beanAdded"
argument_list|,
name|Container
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|mBeanContainer
argument_list|,
literal|null
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rex
parameter_list|)
block|{
throw|throw
name|rex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|r
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|r
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|removeServerMBean
parameter_list|()
block|{
try|try
block|{
name|mBeanContainer
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"beanRemoved"
argument_list|,
name|Container
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|mBeanContainer
argument_list|,
literal|null
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rex
parameter_list|)
block|{
throw|throw
name|rex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|r
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|r
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Connector
name|createConnector
parameter_list|(
name|String
name|hosto
parameter_list|,
name|int
name|porto
parameter_list|)
block|{
comment|// now we just use the SelectChannelConnector as the default connector
name|SslContextFactory
name|sslcf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tlsServerParameters
operator|!=
literal|null
condition|)
block|{
name|sslcf
operator|=
operator|new
name|SslContextFactory
argument_list|()
block|{
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|setSslContext
argument_list|(
name|createSSLContext
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|checkKeyStore
parameter_list|()
block|{
comment|//we'll handle this later
block|}
block|}
expr_stmt|;
name|decorateCXFJettySslSocketConnector
argument_list|(
name|sslcf
argument_list|)
expr_stmt|;
block|}
name|AbstractConnector
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|Server
operator|.
name|getVersion
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"8"
argument_list|)
condition|)
block|{
name|result
operator|=
name|createConnectorJetty9
argument_list|(
name|sslcf
argument_list|,
name|hosto
argument_list|,
name|porto
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|createConnectorJetty8
argument_list|(
name|sslcf
argument_list|,
name|hosto
argument_list|,
name|porto
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setPort"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
name|porto
argument_list|)
expr_stmt|;
if|if
condition|(
name|hosto
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setHost"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
name|hosto
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setReuseAddress"
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
name|isReuseAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rex
parameter_list|)
block|{
throw|throw
name|rex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
name|AbstractConnector
name|createConnectorJetty9
parameter_list|(
name|SslContextFactory
name|sslcf
parameter_list|,
name|String
name|hosto
parameter_list|,
name|int
name|porto
parameter_list|)
block|{
comment|//Jetty 9
name|AbstractConnector
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|configClass
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"org.eclipse.jetty.server.HttpConfiguration"
argument_list|,
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|httpConfig
init|=
name|configClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|httpConfig
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setSendServerVersion"
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|httpConfig
argument_list|,
name|getSendServerVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|httpFactory
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"org.eclipse.jetty.server.HttpConnectionFactory"
argument_list|,
name|Server
operator|.
name|class
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|configClass
argument_list|)
operator|.
name|newInstance
argument_list|(
name|httpConfig
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|connectionFactories
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|result
operator|=
operator|(
name|AbstractConnector
operator|)
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"org.eclipse.jetty.server.ServerConnector"
argument_list|,
name|Server
operator|.
name|class
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|Server
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|server
argument_list|)
expr_stmt|;
if|if
condition|(
name|tlsServerParameters
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|src
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"org.eclipse.jetty.server.SecureRequestCustomizer"
argument_list|,
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|httpConfig
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"addCustomizer"
argument_list|,
name|src
operator|.
name|getInterfaces
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|.
name|invoke
argument_list|(
name|httpConfig
argument_list|,
name|src
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|scf
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"org.eclipse.jetty.server.SslConnectionFactory"
argument_list|,
name|Server
operator|.
name|class
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|SslContextFactory
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|sslcf
argument_list|,
literal|"HTTP/1.1"
argument_list|)
decl_stmt|;
name|connectionFactories
operator|.
name|add
argument_list|(
name|scf
argument_list|)
expr_stmt|;
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setDefaultProtocol"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
literal|"SSL-HTTP/1.1"
argument_list|)
expr_stmt|;
block|}
name|connectionFactories
operator|.
name|add
argument_list|(
name|httpFactory
argument_list|)
expr_stmt|;
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setConnectionFactories"
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
name|connectionFactories
argument_list|)
expr_stmt|;
if|if
condition|(
name|getMaxIdleTime
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setIdleTimeout"
argument_list|,
name|Long
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
operator|new
name|Long
argument_list|(
name|getMaxIdleTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rex
parameter_list|)
block|{
throw|throw
name|rex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
name|AbstractConnector
name|createConnectorJetty8
parameter_list|(
name|SslContextFactory
name|sslcf
parameter_list|,
name|String
name|hosto
parameter_list|,
name|int
name|porto
parameter_list|)
block|{
comment|//Jetty 8
name|AbstractConnector
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sslcf
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|(
name|AbstractConnector
operator|)
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"org.eclipse.jetty.server.nio.SelectChannelConnector"
argument_list|,
name|Server
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|(
name|AbstractConnector
operator|)
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"org.eclipse.jetty.server.ssl.SslSelectChannelConnector"
argument_list|,
name|Server
operator|.
name|class
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|SslContextFactory
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|sslcf
argument_list|)
expr_stmt|;
block|}
name|Server
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setSendServerVersion"
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|server
argument_list|,
name|getSendServerVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getMaxIdleTime
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setMaxIdleTime"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
name|getMaxIdleTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rex
parameter_list|)
block|{
throw|throw
name|rex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|SSLContext
name|createSSLContext
parameter_list|(
name|SslContextFactory
name|scf
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|proto
init|=
name|tlsServerParameters
operator|.
name|getSecureSocketProtocol
argument_list|()
operator|==
literal|null
condition|?
literal|"TLS"
else|:
name|tlsServerParameters
operator|.
name|getSecureSocketProtocol
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"SSLv3"
operator|.
name|equals
argument_list|(
name|proto
argument_list|)
condition|)
block|{
name|scf
operator|.
name|addExcludeProtocols
argument_list|(
literal|"SSLv3"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"SSLv2Hello"
operator|.
name|equals
argument_list|(
name|proto
argument_list|)
condition|)
block|{
name|scf
operator|.
name|addExcludeProtocols
argument_list|(
literal|"SSLv2Hello"
argument_list|)
expr_stmt|;
block|}
name|SSLContext
name|context
init|=
name|tlsServerParameters
operator|.
name|getJsseProvider
argument_list|()
operator|==
literal|null
condition|?
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|proto
argument_list|)
else|:
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|proto
argument_list|,
name|tlsServerParameters
operator|.
name|getJsseProvider
argument_list|()
argument_list|)
decl_stmt|;
name|KeyManager
name|keyManagers
index|[]
init|=
name|tlsServerParameters
operator|.
name|getKeyManagers
argument_list|()
decl_stmt|;
if|if
condition|(
name|tlsServerParameters
operator|.
name|getCertAlias
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keyManagers
operator|=
name|getKeyManagersWithCertAlias
argument_list|(
name|keyManagers
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|init
argument_list|(
name|tlsServerParameters
operator|.
name|getKeyManagers
argument_list|()
argument_list|,
name|tlsServerParameters
operator|.
name|getTrustManagers
argument_list|()
argument_list|,
name|tlsServerParameters
operator|.
name|getSecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|cs
init|=
name|SSLUtils
operator|.
name|getCiphersuites
argument_list|(
name|tlsServerParameters
operator|.
name|getCipherSuites
argument_list|()
argument_list|,
name|SSLUtils
operator|.
name|getServerSupportedCipherSuites
argument_list|(
name|context
argument_list|)
argument_list|,
name|tlsServerParameters
operator|.
name|getCipherSuitesFilter
argument_list|()
argument_list|,
name|LOG
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|scf
operator|.
name|setExcludeCipherSuites
argument_list|(
name|cs
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
specifier|protected
name|KeyManager
index|[]
name|getKeyManagersWithCertAlias
parameter_list|(
name|KeyManager
name|keyManagers
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|tlsServerParameters
operator|.
name|getCertAlias
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|keyManagers
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|keyManagers
index|[
name|idx
index|]
operator|instanceof
name|X509KeyManager
condition|)
block|{
name|keyManagers
index|[
name|idx
index|]
operator|=
operator|new
name|AliasedX509ExtendedKeyManager
argument_list|(
name|tlsServerParameters
operator|.
name|getCertAlias
argument_list|()
argument_list|,
operator|(
name|X509KeyManager
operator|)
name|keyManagers
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|keyManagers
return|;
block|}
specifier|protected
name|void
name|setClientAuthentication
parameter_list|(
name|SslContextFactory
name|con
parameter_list|,
name|ClientAuthentication
name|clientAuth
parameter_list|)
block|{
name|con
operator|.
name|setWantClientAuth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|clientAuth
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|clientAuth
operator|.
name|isSetWant
argument_list|()
condition|)
block|{
name|con
operator|.
name|setWantClientAuth
argument_list|(
name|clientAuth
operator|.
name|isWant
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clientAuth
operator|.
name|isSetRequired
argument_list|()
condition|)
block|{
name|con
operator|.
name|setNeedClientAuth
argument_list|(
name|clientAuth
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This method sets the security properties for the CXF extension      * of the JettySslConnector.      */
specifier|private
name|void
name|decorateCXFJettySslSocketConnector
parameter_list|(
name|SslContextFactory
name|con
parameter_list|)
block|{
name|setClientAuthentication
argument_list|(
name|con
argument_list|,
name|tlsServerParameters
operator|.
name|getClientAuthentication
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|setCertAlias
argument_list|(
name|tlsServerParameters
operator|.
name|getCertAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Container
name|getContainer
parameter_list|(
name|Object
name|server
parameter_list|)
block|{
if|if
condition|(
name|server
operator|instanceof
name|Container
condition|)
block|{
return|return
operator|(
name|Container
operator|)
name|server
return|;
block|}
try|try
block|{
return|return
operator|(
name|Container
operator|)
name|server
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getContainer"
argument_list|)
operator|.
name|invoke
argument_list|(
name|server
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|t
parameter_list|)
block|{
throw|throw
name|t
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|logConnector
parameter_list|(
name|Connector
name|connector
parameter_list|)
block|{
try|try
block|{
name|String
name|h
init|=
operator|(
name|String
operator|)
name|connector
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getHost"
argument_list|)
operator|.
name|invoke
argument_list|(
name|connector
argument_list|)
decl_stmt|;
name|int
name|port
init|=
operator|(
name|Integer
operator|)
name|connector
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getPort"
argument_list|)
operator|.
name|invoke
argument_list|(
name|connector
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|finer
argument_list|(
literal|"connector.host: "
operator|+
name|h
operator|==
literal|null
condition|?
literal|"null"
else|:
literal|"\""
operator|+
name|h
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|finer
argument_list|(
literal|"connector.port: "
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
block|}
specifier|protected
name|void
name|setupThreadPool
parameter_list|()
block|{
if|if
condition|(
name|isSetThreadingParameters
argument_list|()
condition|)
block|{
name|ThreadPool
name|pl
init|=
name|getThreadPool
argument_list|()
decl_stmt|;
comment|//threads for the acceptors and selectors are taken from
comment|//the pool so we need to have room for those
name|AbstractConnector
name|aconn
init|=
operator|(
name|AbstractConnector
operator|)
name|connector
decl_stmt|;
name|int
name|acc
init|=
name|aconn
operator|.
name|getAcceptors
argument_list|()
operator|*
literal|2
decl_stmt|;
if|if
condition|(
name|getThreadingParameters
argument_list|()
operator|.
name|isSetMaxThreads
argument_list|()
operator|&&
name|getThreadingParameters
argument_list|()
operator|.
name|getMaxThreads
argument_list|()
operator|<=
name|acc
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"NOT_ENOUGH_THREADS"
argument_list|,
name|LOG
argument_list|,
name|port
argument_list|,
name|acc
operator|+
literal|1
argument_list|,
name|getThreadingParameters
argument_list|()
operator|.
name|getMaxThreads
argument_list|()
argument_list|,
name|acc
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|pl
operator|instanceof
name|QueuedThreadPool
operator|)
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"NOT_A_QUEUED_THREAD_POOL"
argument_list|,
name|LOG
argument_list|,
name|pl
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|getThreadingParameters
argument_list|()
operator|.
name|isThreadNamePrefixSet
argument_list|()
condition|)
block|{
operator|(
operator|(
name|QueuedThreadPool
operator|)
name|pl
operator|)
operator|.
name|setName
argument_list|(
name|getThreadingParameters
argument_list|()
operator|.
name|getThreadNamePrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getThreadingParameters
argument_list|()
operator|.
name|isSetMinThreads
argument_list|()
condition|)
block|{
operator|(
operator|(
name|QueuedThreadPool
operator|)
name|pl
operator|)
operator|.
name|setMinThreads
argument_list|(
name|getThreadingParameters
argument_list|()
operator|.
name|getMinThreads
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getThreadingParameters
argument_list|()
operator|.
name|isSetMaxThreads
argument_list|()
condition|)
block|{
operator|(
operator|(
name|QueuedThreadPool
operator|)
name|pl
operator|)
operator|.
name|setMaxThreads
argument_list|(
name|getThreadingParameters
argument_list|()
operator|.
name|getMaxThreads
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|ThreadPool
name|getThreadPool
parameter_list|()
block|{
name|ThreadPool
name|pool
init|=
operator|(
name|ThreadPool
operator|)
name|server
operator|.
name|getThreadPool
argument_list|()
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
name|pool
operator|=
operator|new
name|QueuedThreadPool
argument_list|()
expr_stmt|;
try|try
block|{
name|server
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setThreadPool"
argument_list|,
name|ThreadPool
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|server
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|t
parameter_list|)
block|{
throw|throw
name|t
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
return|return
name|pool
return|;
block|}
comment|/**      * Remove a previously registered servant.      *       * @param url the URL the servant was registered against.      */
specifier|public
specifier|synchronized
name|void
name|removeServant
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
specifier|final
name|String
name|contextName
init|=
name|HttpUriMapper
operator|.
name|getContextName
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|smap
init|=
name|HttpUriMapper
operator|.
name|getResourceBase
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
operator|&&
name|server
operator|.
name|isRunning
argument_list|()
condition|)
block|{
for|for
control|(
name|Handler
name|handler
range|:
name|contexts
operator|.
name|getChildHandlersByClass
argument_list|(
name|ContextHandler
operator|.
name|class
argument_list|)
control|)
block|{
name|ContextHandler
name|contextHandler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|handler
operator|instanceof
name|ContextHandler
condition|)
block|{
name|contextHandler
operator|=
operator|(
name|ContextHandler
operator|)
name|handler
expr_stmt|;
name|Handler
name|jh
init|=
name|contextHandler
operator|.
name|getHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|jh
operator|instanceof
name|JettyHTTPHandler
operator|&&
operator|(
name|contextName
operator|.
name|equals
argument_list|(
name|contextHandler
operator|.
name|getContextPath
argument_list|()
argument_list|)
operator|||
operator|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|contextName
argument_list|)
operator|&&
literal|"/"
operator|.
name|equals
argument_list|(
name|contextHandler
operator|.
name|getContextPath
argument_list|()
argument_list|)
operator|)
operator|)
operator|&&
operator|(
operator|(
name|JettyHTTPHandler
operator|)
name|jh
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|smap
argument_list|)
condition|)
block|{
try|try
block|{
name|contexts
operator|.
name|removeHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|handler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|handler
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"REMOVE_HANDLER_FAILED_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ex
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"CAN_NOT_FIND_HANDLER_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url
block|}
argument_list|)
expr_stmt|;
block|}
name|registedPaths
operator|.
name|remove
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
operator|--
name|servantCount
expr_stmt|;
block|}
comment|/**      * Get a registered servant.      *       * @param url the associated URL      * @return the HttpHandler if registered      */
specifier|public
specifier|synchronized
name|Handler
name|getServant
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|String
name|contextName
init|=
name|HttpUriMapper
operator|.
name|getContextName
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
comment|//final String smap = HttpUriMapper.getResourceBase(url.getPath());
name|Handler
name|ret
init|=
literal|null
decl_stmt|;
comment|// After a stop(), the server is null, and therefore this
comment|// operation should return null.
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Handler
name|handler
range|:
name|server
operator|.
name|getChildHandlersByClass
argument_list|(
name|ContextHandler
operator|.
name|class
argument_list|)
control|)
block|{
name|ContextHandler
name|contextHandler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|handler
operator|instanceof
name|ContextHandler
condition|)
block|{
name|contextHandler
operator|=
operator|(
name|ContextHandler
operator|)
name|handler
expr_stmt|;
if|if
condition|(
name|contextName
operator|.
name|equals
argument_list|(
name|contextHandler
operator|.
name|getContextPath
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|=
name|contextHandler
operator|.
name|getHandler
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Get a registered context handler.      *       * @param url the associated URL      * @return the HttpHandler if registered      */
specifier|public
specifier|synchronized
name|ContextHandler
name|getContextHandler
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|String
name|contextName
init|=
name|HttpUriMapper
operator|.
name|getContextName
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|ContextHandler
name|ret
init|=
literal|null
decl_stmt|;
comment|// After a stop(), the server is null, and therefore this
comment|// operation should return null.
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Handler
name|handler
range|:
name|server
operator|.
name|getChildHandlersByClass
argument_list|(
name|ContextHandler
operator|.
name|class
argument_list|)
control|)
block|{
name|ContextHandler
name|contextHandler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|handler
operator|instanceof
name|ContextHandler
condition|)
block|{
name|contextHandler
operator|=
operator|(
name|ContextHandler
operator|)
name|handler
expr_stmt|;
if|if
condition|(
name|contextName
operator|.
name|equals
argument_list|(
name|contextHandler
operator|.
name|getContextPath
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|=
name|contextHandler
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|isSsl
parameter_list|()
block|{
if|if
condition|(
name|connector
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
comment|//Jetty 8
return|return
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"org.eclipse.jetty.server.ssl.SslConnector"
argument_list|,
name|Server
operator|.
name|class
argument_list|)
operator|.
name|isInstance
argument_list|(
name|connector
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|//Jetty 9
comment|//return "https".equalsIgnoreCase(connector.getDefaultConnectionFactory().getProtocol());
try|try
block|{
name|Object
name|o
init|=
name|connector
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getDefaultConnectionFactory"
argument_list|)
operator|.
name|invoke
argument_list|(
name|connector
argument_list|)
decl_stmt|;
return|return
literal|"https"
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getProtocol"
argument_list|)
operator|.
name|invoke
argument_list|(
name|o
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|retrieveListenerFactory
parameter_list|()
block|{
if|if
condition|(
name|tlsServerParameters
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|connector
operator|!=
literal|null
operator|&&
operator|!
name|isSsl
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Connector "
operator|+
name|connector
operator|+
literal|" for JettyServerEngine Port "
operator|+
name|port
operator|+
literal|" does not support SSL connections."
argument_list|)
expr_stmt|;
return|return;
block|}
name|protocol
operator|=
literal|"https"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isSsl
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Connector "
operator|+
name|connector
operator|+
literal|" for JettyServerEngine Port "
operator|+
name|port
operator|+
literal|" does not support non-SSL connections."
argument_list|)
throw|;
block|}
name|protocol
operator|=
literal|"http"
expr_stmt|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Configured port "
operator|+
name|port
operator|+
literal|" for \""
operator|+
name|protocol
operator|+
literal|"\"."
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method is called after configure on this object.      */
annotation|@
name|PostConstruct
specifier|public
name|void
name|finalizeConfig
parameter_list|()
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|retrieveListenerFactory
argument_list|()
expr_stmt|;
name|checkConnectorPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|configFinalized
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|checkConnectorPort
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|int
name|cp
init|=
operator|(
name|Integer
operator|)
name|connector
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getPort"
argument_list|)
operator|.
name|invoke
argument_list|(
name|connector
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|connector
operator|&&
name|port
operator|!=
name|cp
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Connector port "
operator|+
name|cp
operator|+
literal|" does not match"
operator|+
literal|" with the server engine port "
operator|+
name|port
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|ioe
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore...
block|}
block|}
comment|/**      * This method is called by the ServerEngine Factory to destroy the       * listener.      *      */
specifier|protected
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|registedPaths
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|connector
operator|!=
literal|null
condition|)
block|{
name|connector
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|connector
operator|instanceof
name|Closeable
condition|)
block|{
operator|(
operator|(
name|Closeable
operator|)
name|connector
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|connector
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"close"
argument_list|)
operator|.
name|invoke
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|contexts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Handler
name|h
range|:
name|contexts
operator|.
name|getHandlers
argument_list|()
control|)
block|{
name|h
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|contexts
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|contexts
operator|=
literal|null
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|mBeanContainer
operator|!=
literal|null
operator|&&
operator|!
name|Server
operator|.
name|getVersion
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"8"
argument_list|)
condition|)
block|{
name|removeServerMBean
argument_list|()
expr_stmt|;
block|}
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This method is used to programmatically set the TLSServerParameters.      * This method may only be called by the factory.      * @throws IOException       */
specifier|public
name|void
name|setTlsServerParameters
parameter_list|(
name|TLSServerParameters
name|params
parameter_list|)
block|{
name|tlsServerParameters
operator|=
name|params
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|configFinalized
condition|)
block|{
name|this
operator|.
name|retrieveListenerFactory
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This method returns the programmatically set TLSServerParameters, not      * the TLSServerParametersType, which is the JAXB generated type used       * in SpringConfiguration.      * @return      */
specifier|public
name|TLSServerParameters
name|getTlsServerParameters
parameter_list|()
block|{
return|return
name|tlsServerParameters
return|;
block|}
comment|/**      * This method sets the threading parameters for this particular       * server engine.      * This method may only be called by the factory.      */
specifier|public
name|void
name|setThreadingParameters
parameter_list|(
name|ThreadingParameters
name|params
parameter_list|)
block|{
name|threadingParameters
operator|=
name|params
expr_stmt|;
block|}
comment|/**      * This method returns whether the threading parameters are set.      */
specifier|public
name|boolean
name|isSetThreadingParameters
parameter_list|()
block|{
return|return
name|threadingParameters
operator|!=
literal|null
return|;
block|}
comment|/**      * This method returns the threading parameters that have been set.      * This method may return null, if the threading parameters have not      * been set.      */
specifier|public
name|ThreadingParameters
name|getThreadingParameters
parameter_list|()
block|{
return|return
name|threadingParameters
return|;
block|}
specifier|public
name|void
name|setSendServerVersion
parameter_list|(
name|Boolean
name|sendServerVersion
parameter_list|)
block|{
name|this
operator|.
name|sendServerVersion
operator|=
name|sendServerVersion
expr_stmt|;
block|}
specifier|public
name|Boolean
name|getSendServerVersion
parameter_list|()
block|{
return|return
name|sendServerVersion
return|;
block|}
block|}
end_class

end_unit

