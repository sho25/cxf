begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSServerParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|HttpUriMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https_jetty
operator|.
name|JettySslConnectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|AbstractConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ContextHandlerCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|HandlerCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|nio
operator|.
name|SelectChannelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|HashSessionIdManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|HashSessionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|session
operator|.
name|SessionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ssl
operator|.
name|SslSocketConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|component
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|OldQueuedThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|ThreadPool
import|;
end_import

begin_comment
comment|/**  * This class is the Jetty HTTP Server Engine that is configured to  * work off of a designated port. The port will be enabled for   * "http" or "https" depending upon its successful configuration.  */
end_comment

begin_class
specifier|public
class|class
name|JettyHTTPServerEngine
implements|implements
name|ServerEngine
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JettyHTTPServerEngine
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The bus.      */
specifier|protected
name|Bus
name|bus
decl_stmt|;
comment|/**      * This is the Jetty HTTP Server Engine Factory. This factory caches some       * engines based on port numbers.      */
specifier|protected
name|JettyHTTPServerEngineFactory
name|factory
decl_stmt|;
comment|/**      * This is the network port for which this engine is allocated.      */
specifier|private
name|int
name|port
decl_stmt|;
comment|/**      * This is the network address for which this engine is allocated.      */
specifier|private
name|String
name|host
decl_stmt|;
comment|/**      * This field holds the protocol for which this engine is       * enabled, i.e. "http" or "https".      */
specifier|private
name|String
name|protocol
init|=
literal|"http"
decl_stmt|;
specifier|private
name|Boolean
name|isSessionSupport
init|=
literal|false
decl_stmt|;
specifier|private
name|Boolean
name|isReuseAddress
init|=
literal|true
decl_stmt|;
specifier|private
name|Boolean
name|continuationsEnabled
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|servantCount
decl_stmt|;
specifier|private
name|Server
name|server
decl_stmt|;
specifier|private
name|Connector
name|connector
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Handler
argument_list|>
name|handlers
decl_stmt|;
specifier|private
name|JettyConnectorFactory
name|connectorFactory
decl_stmt|;
specifier|private
name|ContextHandlerCollection
name|contexts
decl_stmt|;
comment|/**      * This field holds the TLS ServerParameters that are programatically      * configured. The tlsServerParamers (due to JAXB) holds the struct      * placed by SpringConfig.      */
specifier|private
name|TLSServerParameters
name|tlsServerParameters
decl_stmt|;
comment|/**      * This field hold the threading parameters for this particular engine.      */
specifier|private
name|ThreadingParameters
name|threadingParameters
decl_stmt|;
comment|/**      * This boolean signfies that SpringConfig is over. finalizeConfig      * has been called.      */
specifier|private
name|boolean
name|configFinalized
decl_stmt|;
comment|/**      * This constructor is called by the JettyHTTPServerEngineFactory.      */
specifier|public
name|JettyHTTPServerEngine
parameter_list|(
name|JettyHTTPServerEngineFactory
name|fac
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
name|this
operator|.
name|factory
operator|=
name|fac
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
specifier|public
name|JettyHTTPServerEngine
parameter_list|()
block|{              }
specifier|public
name|void
name|setJettyHTTPServerEngineFactory
parameter_list|(
name|JettyHTTPServerEngineFactory
name|fac
parameter_list|)
block|{
name|factory
operator|=
name|fac
expr_stmt|;
block|}
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|p
parameter_list|)
block|{
name|port
operator|=
name|p
expr_stmt|;
block|}
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
specifier|public
name|void
name|setContinuationsEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|continuationsEnabled
operator|=
name|enabled
expr_stmt|;
block|}
specifier|public
name|boolean
name|getContinuationsEnabled
parameter_list|()
block|{
return|return
name|continuationsEnabled
return|;
block|}
comment|/**      * The bus.      */
annotation|@
name|Resource
argument_list|(
name|name
operator|=
literal|"cxf"
argument_list|)
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
comment|/**      * Returns the protocol "http" or "https" for which this engine      * was configured.      */
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
comment|/**      * Returns the port number for which this server engine was configured.      * @return      */
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**      * Returns the host for which this server engine was configured.      * @return      */
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
comment|/**      * This method will shut down the server engine and      * remove it from the factory's cache.       */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|shouldDestroyPort
argument_list|()
condition|)
block|{
if|if
condition|(
name|factory
operator|!=
literal|null
operator|&&
name|servantCount
operator|==
literal|0
condition|)
block|{
name|factory
operator|.
name|destroyForPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"FAILED_TO_SHUTDOWN_ENGINE_MSG"
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|shouldDestroyPort
parameter_list|()
block|{
comment|//if we shutdown the port, on SOME OS's/JVM's, if a client
comment|//in the same jvm had been talking to it at some point and keep alives
comment|//are on, then the port is held open for about 60 seconds
comment|//afterwards and if we restart, connections will then
comment|//get sent into the old stuff where there are
comment|//no longer any servant registered.   They pretty much just hang.
comment|//this is most often seen in our unit/system tests that
comment|//test things in the same VM.
name|String
name|s
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"org.apache.cxf.transports.http_jetty.DontClosePort"
argument_list|)
decl_stmt|;
return|return
operator|!
name|Boolean
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/**      * get the jetty server instance      * @return      */
specifier|public
name|Server
name|getServer
parameter_list|()
block|{
return|return
name|server
return|;
block|}
comment|/**      * Set the jetty server instance       * @param s       */
specifier|public
name|void
name|setServer
parameter_list|(
name|Server
name|s
parameter_list|)
block|{
name|server
operator|=
name|s
expr_stmt|;
block|}
comment|/**      * set the jetty server's connector      * @param c      */
specifier|public
name|void
name|setConnector
parameter_list|(
name|Connector
name|c
parameter_list|)
block|{
name|connector
operator|=
name|c
expr_stmt|;
block|}
comment|/**      * set the jetty server's handlers      * @param h      */
specifier|public
name|void
name|setHandlers
parameter_list|(
name|List
argument_list|<
name|Handler
argument_list|>
name|h
parameter_list|)
block|{
name|handlers
operator|=
name|h
expr_stmt|;
block|}
specifier|public
name|void
name|setSessionSupport
parameter_list|(
name|boolean
name|support
parameter_list|)
block|{
name|isSessionSupport
operator|=
name|support
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSessionSupport
parameter_list|()
block|{
return|return
name|isSessionSupport
return|;
block|}
specifier|public
name|List
argument_list|<
name|Handler
argument_list|>
name|getHandlers
parameter_list|()
block|{
return|return
name|handlers
return|;
block|}
specifier|public
name|Connector
name|getConnector
parameter_list|()
block|{
return|return
name|connector
return|;
block|}
specifier|public
name|boolean
name|isReuseAddress
parameter_list|()
block|{
return|return
name|isReuseAddress
return|;
block|}
specifier|public
name|void
name|setReuseAddress
parameter_list|(
name|boolean
name|reuse
parameter_list|)
block|{
name|isReuseAddress
operator|=
name|reuse
expr_stmt|;
block|}
comment|/**      * Register a servant.      *       * @param url the URL associated with the servant      * @param handler notified on incoming HTTP requests      */
specifier|public
specifier|synchronized
name|void
name|addServant
parameter_list|(
name|URL
name|url
parameter_list|,
name|JettyHTTPHandler
name|handler
parameter_list|)
block|{
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|DefaultHandler
name|defaultHandler
init|=
literal|null
decl_stmt|;
comment|// create a new jetty server instance if there is no server there
name|server
operator|=
operator|new
name|Server
argument_list|()
expr_stmt|;
name|Container
operator|.
name|Listener
name|mBeanContainer
init|=
name|factory
operator|.
name|getMBeanContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|mBeanContainer
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|getContainer
argument_list|()
operator|.
name|addEventListener
argument_list|(
name|mBeanContainer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connector
operator|==
literal|null
condition|)
block|{
name|connector
operator|=
name|connectorFactory
operator|.
name|createConnector
argument_list|(
name|getHost
argument_list|()
argument_list|,
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|finer
argument_list|(
literal|"connector.host: "
operator|+
name|connector
operator|.
name|getHost
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
literal|"\""
operator|+
name|connector
operator|.
name|getHost
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|finer
argument_list|(
literal|"connector.port: "
operator|+
name|connector
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|server
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
comment|/*              * The server may have no handler, it might have a collection handler,              * it might have a one-shot. We need to add one or more of ours.              *              */
name|int
name|numberOfHandlers
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|handlers
operator|!=
literal|null
condition|)
block|{
name|numberOfHandlers
operator|+=
name|handlers
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|Handler
name|existingHandler
init|=
name|server
operator|.
name|getHandler
argument_list|()
decl_stmt|;
name|HandlerCollection
name|handlerCollection
init|=
literal|null
decl_stmt|;
name|boolean
name|existingHandlerCollection
init|=
name|existingHandler
operator|instanceof
name|HandlerCollection
decl_stmt|;
if|if
condition|(
name|existingHandlerCollection
condition|)
block|{
name|handlerCollection
operator|=
operator|(
name|HandlerCollection
operator|)
name|existingHandler
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|existingHandlerCollection
operator|&&
operator|(
name|existingHandler
operator|!=
literal|null
operator|||
name|numberOfHandlers
operator|>
literal|1
operator|)
condition|)
block|{
name|handlerCollection
operator|=
operator|new
name|HandlerCollection
argument_list|()
expr_stmt|;
if|if
condition|(
name|existingHandler
operator|!=
literal|null
condition|)
block|{
name|handlerCollection
operator|.
name|addHandler
argument_list|(
name|existingHandler
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|setHandler
argument_list|(
name|handlerCollection
argument_list|)
expr_stmt|;
block|}
comment|/*              * At this point, the server's handler is a collection. It was either              * one to start, or it is now one containing only the single handler              * that was there to begin with.              */
if|if
condition|(
name|handlers
operator|!=
literal|null
operator|&&
name|handlers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Handler
name|h
range|:
name|handlers
control|)
block|{
comment|// Filtering out the jetty default handler
comment|// which should not be added at this point.
if|if
condition|(
name|h
operator|instanceof
name|DefaultHandler
condition|)
block|{
name|defaultHandler
operator|=
operator|(
name|DefaultHandler
operator|)
name|h
expr_stmt|;
block|}
else|else
block|{
name|handlerCollection
operator|.
name|addHandler
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|contexts
operator|=
operator|new
name|ContextHandlerCollection
argument_list|()
expr_stmt|;
comment|/*              * handlerCollection may be null here if is only one handler to deal with.              * Which in turn implies that there can't be a 'defaultHander' to deal with.              */
if|if
condition|(
name|handlerCollection
operator|!=
literal|null
condition|)
block|{
name|handlerCollection
operator|.
name|addHandler
argument_list|(
name|contexts
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultHandler
operator|!=
literal|null
condition|)
block|{
name|handlerCollection
operator|.
name|addHandler
argument_list|(
name|defaultHandler
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|server
operator|.
name|setHandler
argument_list|(
name|contexts
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|setReuseAddress
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|setupThreadPool
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"START_UP_SERVER_FAILED_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|e
operator|.
name|getMessage
argument_list|()
block|,
name|port
block|}
argument_list|)
expr_stmt|;
comment|//problem starting server
try|try
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore - probably wasn't fully started anyway
block|}
name|server
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"START_UP_SERVER_FAILED_MSG"
argument_list|,
name|LOG
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|port
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|String
name|contextName
init|=
name|HttpUriMapper
operator|.
name|getContextName
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|ContextHandler
name|context
init|=
operator|new
name|ContextHandler
argument_list|()
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
name|contextName
argument_list|)
expr_stmt|;
comment|// bind the jetty http handler with the context handler
if|if
condition|(
name|isSessionSupport
condition|)
block|{
comment|// If we have sessions, we need two handlers.
name|HashSessionManager
name|sessionManager
init|=
operator|new
name|HashSessionManager
argument_list|()
decl_stmt|;
name|SessionHandler
name|sessionHandler
init|=
operator|new
name|SessionHandler
argument_list|(
name|sessionManager
argument_list|)
decl_stmt|;
name|HashSessionIdManager
name|idManager
init|=
operator|new
name|HashSessionIdManager
argument_list|()
decl_stmt|;
name|sessionManager
operator|.
name|setIdManager
argument_list|(
name|idManager
argument_list|)
expr_stmt|;
name|HandlerCollection
name|hc
init|=
operator|new
name|HandlerCollection
argument_list|()
decl_stmt|;
name|hc
operator|.
name|addHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|hc
operator|.
name|addHandler
argument_list|(
name|sessionHandler
argument_list|)
expr_stmt|;
name|context
operator|.
name|setHandler
argument_list|(
name|hc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// otherwise, just the one.
name|context
operator|.
name|setHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
name|contexts
operator|.
name|addHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|ServletContext
name|sc
init|=
name|context
operator|.
name|getServletContext
argument_list|()
decl_stmt|;
name|handler
operator|.
name|setServletContext
argument_list|(
name|sc
argument_list|)
expr_stmt|;
specifier|final
name|String
name|smap
init|=
name|HttpUriMapper
operator|.
name|getResourceBase
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|handler
operator|.
name|setName
argument_list|(
name|smap
argument_list|)
expr_stmt|;
if|if
condition|(
name|contexts
operator|.
name|isStarted
argument_list|()
condition|)
block|{
try|try
block|{
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"ADD_HANDLER_FAILED_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ex
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
operator|++
name|servantCount
expr_stmt|;
block|}
specifier|protected
name|void
name|setupThreadPool
parameter_list|()
block|{
name|AbstractConnector
name|aconn
init|=
operator|(
name|AbstractConnector
operator|)
name|connector
decl_stmt|;
if|if
condition|(
name|isSetThreadingParameters
argument_list|()
condition|)
block|{
name|ThreadPool
name|pool
init|=
name|aconn
operator|.
name|getThreadPool
argument_list|()
decl_stmt|;
if|if
condition|(
name|pool
operator|==
literal|null
condition|)
block|{
name|pool
operator|=
operator|new
name|QueuedThreadPool
argument_list|()
expr_stmt|;
name|aconn
operator|.
name|setThreadPool
argument_list|(
name|pool
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pool
operator|instanceof
name|OldQueuedThreadPool
condition|)
block|{
name|OldQueuedThreadPool
name|pl
init|=
operator|(
name|OldQueuedThreadPool
operator|)
name|pool
decl_stmt|;
if|if
condition|(
name|getThreadingParameters
argument_list|()
operator|.
name|isSetMinThreads
argument_list|()
condition|)
block|{
name|pl
operator|.
name|setMinThreads
argument_list|(
name|getThreadingParameters
argument_list|()
operator|.
name|getMinThreads
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getThreadingParameters
argument_list|()
operator|.
name|isSetMaxThreads
argument_list|()
condition|)
block|{
name|pl
operator|.
name|setMaxThreads
argument_list|(
name|getThreadingParameters
argument_list|()
operator|.
name|getMaxThreads
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|pool
operator|instanceof
name|QueuedThreadPool
condition|)
block|{
name|QueuedThreadPool
name|pl
init|=
operator|(
name|QueuedThreadPool
operator|)
name|pool
decl_stmt|;
if|if
condition|(
name|getThreadingParameters
argument_list|()
operator|.
name|isSetMinThreads
argument_list|()
condition|)
block|{
name|pl
operator|.
name|setMinThreads
argument_list|(
name|getThreadingParameters
argument_list|()
operator|.
name|getMinThreads
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getThreadingParameters
argument_list|()
operator|.
name|isSetMaxThreads
argument_list|()
condition|)
block|{
name|pl
operator|.
name|setMaxThreads
argument_list|(
name|getThreadingParameters
argument_list|()
operator|.
name|getMaxThreads
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|setReuseAddress
parameter_list|(
name|Connector
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|conn
operator|instanceof
name|AbstractConnector
condition|)
block|{
operator|(
operator|(
name|AbstractConnector
operator|)
name|conn
operator|)
operator|.
name|setReuseAddress
argument_list|(
name|isReuseAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"UNKNOWN_CONNECTOR_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|conn
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Remove a previously registered servant.      *       * @param url the URL the servant was registered against.      */
specifier|public
specifier|synchronized
name|void
name|removeServant
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
specifier|final
name|String
name|contextName
init|=
name|HttpUriMapper
operator|.
name|getContextName
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|smap
init|=
name|HttpUriMapper
operator|.
name|getResourceBase
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
operator|&&
name|server
operator|.
name|isRunning
argument_list|()
condition|)
block|{
for|for
control|(
name|Handler
name|handler
range|:
name|contexts
operator|.
name|getChildHandlersByClass
argument_list|(
name|ContextHandler
operator|.
name|class
argument_list|)
control|)
block|{
name|ContextHandler
name|contextHandler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|handler
operator|instanceof
name|ContextHandler
condition|)
block|{
name|contextHandler
operator|=
operator|(
name|ContextHandler
operator|)
name|handler
expr_stmt|;
name|Handler
name|jh
init|=
name|contextHandler
operator|.
name|getHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|jh
operator|instanceof
name|JettyHTTPHandler
operator|&&
name|contextName
operator|.
name|equals
argument_list|(
name|contextHandler
operator|.
name|getContextPath
argument_list|()
argument_list|)
operator|&&
operator|(
operator|(
name|JettyHTTPHandler
operator|)
name|jh
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|smap
argument_list|)
condition|)
block|{
try|try
block|{
name|contexts
operator|.
name|removeHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|handler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|handler
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"REMOVE_HANDLER_FAILED_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ex
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"CAN_NOT_FIND_HANDLER_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url
block|}
argument_list|)
expr_stmt|;
block|}
operator|--
name|servantCount
expr_stmt|;
block|}
comment|/**      * Get a registered servant.      *       * @param url the associated URL      * @return the HttpHandler if registered      */
specifier|public
specifier|synchronized
name|Handler
name|getServant
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|String
name|contextName
init|=
name|HttpUriMapper
operator|.
name|getContextName
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
comment|//final String smap = HttpUriMapper.getResourceBase(url.getPath());
name|Handler
name|ret
init|=
literal|null
decl_stmt|;
comment|// After a stop(), the server is null, and therefore this
comment|// operation should return null.
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Handler
name|handler
range|:
name|server
operator|.
name|getChildHandlersByClass
argument_list|(
name|ContextHandler
operator|.
name|class
argument_list|)
control|)
block|{
name|ContextHandler
name|contextHandler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|handler
operator|instanceof
name|ContextHandler
condition|)
block|{
name|contextHandler
operator|=
operator|(
name|ContextHandler
operator|)
name|handler
expr_stmt|;
if|if
condition|(
name|contextName
operator|.
name|equals
argument_list|(
name|contextHandler
operator|.
name|getContextPath
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|=
name|contextHandler
operator|.
name|getHandler
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Get a registered context handler.      *       * @param url the associated URL      * @return the HttpHandler if registered      */
specifier|public
specifier|synchronized
name|ContextHandler
name|getContextHandler
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|String
name|contextName
init|=
name|HttpUriMapper
operator|.
name|getContextName
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|ContextHandler
name|ret
init|=
literal|null
decl_stmt|;
comment|// After a stop(), the server is null, and therefore this
comment|// operation should return null.
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Handler
name|handler
range|:
name|server
operator|.
name|getChildHandlersByClass
argument_list|(
name|ContextHandler
operator|.
name|class
argument_list|)
control|)
block|{
name|ContextHandler
name|contextHandler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|handler
operator|instanceof
name|ContextHandler
condition|)
block|{
name|contextHandler
operator|=
operator|(
name|ContextHandler
operator|)
name|handler
expr_stmt|;
if|if
condition|(
name|contextName
operator|.
name|equals
argument_list|(
name|contextHandler
operator|.
name|getContextPath
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|=
name|contextHandler
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|void
name|retrieveListenerFactory
parameter_list|()
block|{
if|if
condition|(
name|tlsServerParameters
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|connector
operator|&&
operator|!
operator|(
name|connector
operator|instanceof
name|SslSocketConnector
operator|)
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Connector "
operator|+
name|connector
operator|+
literal|" for JettyServerEngine Port "
operator|+
name|port
operator|+
literal|" does not support SSL connections."
argument_list|)
expr_stmt|;
return|return;
block|}
name|connectorFactory
operator|=
name|getHTTPSConnectorFactory
argument_list|(
name|tlsServerParameters
argument_list|)
expr_stmt|;
name|protocol
operator|=
literal|"https"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|connector
operator|instanceof
name|SslSocketConnector
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Connector "
operator|+
name|connector
operator|+
literal|" for JettyServerEngine Port "
operator|+
name|port
operator|+
literal|" does not support non-SSL connections."
argument_list|)
throw|;
block|}
name|connectorFactory
operator|=
name|getHTTPConnectorFactory
argument_list|()
expr_stmt|;
name|protocol
operator|=
literal|"http"
expr_stmt|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Configured port "
operator|+
name|port
operator|+
literal|" for \""
operator|+
name|protocol
operator|+
literal|"\"."
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method creates a connector factory. If there are TLS parameters      * then it creates a TLS enabled one.      */
specifier|protected
name|JettyConnectorFactory
name|getHTTPConnectorFactory
parameter_list|()
block|{
return|return
operator|new
name|JettyConnectorFactory
argument_list|()
block|{
specifier|public
name|AbstractConnector
name|createConnector
parameter_list|(
name|int
name|porto
parameter_list|)
block|{
return|return
name|createConnector
argument_list|(
literal|null
argument_list|,
name|porto
argument_list|)
return|;
block|}
specifier|public
name|AbstractConnector
name|createConnector
parameter_list|(
name|String
name|hosto
parameter_list|,
name|int
name|porto
parameter_list|)
block|{
comment|// now we just use the SelectChannelConnector as the default connector
name|SelectChannelConnector
name|result
init|=
operator|new
name|SelectChannelConnector
argument_list|()
decl_stmt|;
comment|// Regardless the port has to equal the one
comment|// we are configured for.
assert|assert
name|porto
operator|==
name|port
assert|;
assert|assert
name|hosto
operator|==
name|host
assert|;
if|if
condition|(
name|hosto
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setHost
argument_list|(
name|hosto
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|setPort
argument_list|(
name|porto
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
return|;
block|}
comment|/**      * This method creates a connector factory enabled with the JSSE      */
specifier|protected
name|JettyConnectorFactory
name|getHTTPSConnectorFactory
parameter_list|(
name|TLSServerParameters
name|tlsParams
parameter_list|)
block|{
return|return
operator|new
name|JettySslConnectorFactory
argument_list|(
name|tlsParams
argument_list|)
return|;
block|}
comment|/**      * This method is called after configure on this object.      */
annotation|@
name|PostConstruct
specifier|public
name|void
name|finalizeConfig
parameter_list|()
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|retrieveEngineFactory
argument_list|()
expr_stmt|;
name|retrieveListenerFactory
argument_list|()
expr_stmt|;
name|checkConnectorPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|configFinalized
operator|=
literal|true
expr_stmt|;
block|}
specifier|protected
name|void
name|retrieveEngineFactory
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|bus
operator|&&
literal|null
operator|==
name|factory
condition|)
block|{
name|factory
operator|=
name|bus
operator|.
name|getExtension
argument_list|(
name|JettyHTTPServerEngineFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkConnectorPort
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|!=
name|connector
operator|&&
name|port
operator|!=
name|connector
operator|.
name|getPort
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error: Connector port "
operator|+
name|connector
operator|.
name|getPort
argument_list|()
operator|+
literal|" does not match"
operator|+
literal|" with the server engine port "
operator|+
name|port
argument_list|)
throw|;
block|}
block|}
comment|/**      * This method is called by the ServerEngine Factory to destroy the       * listener.      *      */
specifier|protected
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connector
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connector
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This method is used to programmatically set the TLSServerParameters.      * This method may only be called by the factory.      * @throws IOException       */
specifier|public
name|void
name|setTlsServerParameters
parameter_list|(
name|TLSServerParameters
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|tlsServerParameters
operator|=
name|params
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|configFinalized
condition|)
block|{
name|this
operator|.
name|retrieveListenerFactory
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This method returns the programmatically set TLSServerParameters, not      * the TLSServerParametersType, which is the JAXB generated type used       * in SpringConfiguration.      * @return      */
specifier|public
name|TLSServerParameters
name|getTlsServerParameters
parameter_list|()
block|{
return|return
name|tlsServerParameters
return|;
block|}
comment|/**      * This method sets the threading parameters for this particular       * server engine.      * This method may only be called by the factory.      */
specifier|public
name|void
name|setThreadingParameters
parameter_list|(
name|ThreadingParameters
name|params
parameter_list|)
block|{
name|threadingParameters
operator|=
name|params
expr_stmt|;
block|}
comment|/**      * This method returns whether the threading parameters are set.      */
specifier|public
name|boolean
name|isSetThreadingParameters
parameter_list|()
block|{
return|return
name|threadingParameters
operator|!=
literal|null
return|;
block|}
comment|/**      * This method returns the threading parameters that have been set.      * This method may return null, if the threading parameters have not      * been set.      */
specifier|public
name|ThreadingParameters
name|getThreadingParameters
parameter_list|()
block|{
return|return
name|threadingParameters
return|;
block|}
block|}
end_class

end_unit

