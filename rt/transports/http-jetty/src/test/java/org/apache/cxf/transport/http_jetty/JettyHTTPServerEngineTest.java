begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
operator|.
name|TLSServerParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|spring
operator|.
name|ConfigurerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|InstrumentationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|JettyHTTPServerEngineTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|PORT1
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
name|JettyHTTPServerEngineTest
operator|.
name|class
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PORT2
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
name|JettyHTTPServerEngineTest
operator|.
name|class
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PORT3
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
name|JettyHTTPServerEngineTest
operator|.
name|class
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PORT4
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
name|JettyHTTPServerEngineTest
operator|.
name|class
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|JettyHTTPServerEngineFactory
name|factory
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|bus
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
expr_stmt|;
name|Configurer
name|configurer
init|=
operator|new
name|ConfigurerImpl
argument_list|()
decl_stmt|;
name|bus
operator|.
name|getExtension
argument_list|(
name|Configurer
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|configurer
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|InstrumentationManager
name|iManager
init|=
name|control
operator|.
name|createMock
argument_list|(
name|InstrumentationManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|iManager
operator|.
name|getMBeanServer
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|bus
operator|.
name|getExtension
argument_list|(
name|InstrumentationManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|iManager
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|factory
operator|=
operator|new
name|JettyHTTPServerEngineFactory
argument_list|()
expr_stmt|;
name|factory
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check that names of threads serving requests for instances of JettyHTTPServerEngine      * can be set with user specified name.      */
annotation|@
name|Test
specifier|public
name|void
name|testSettingThreadNames
parameter_list|()
throws|throws
name|Exception
block|{
comment|// User specific thread name prefix 1
name|String
name|threadNamePrefix1
init|=
literal|"TestPrefix"
decl_stmt|;
name|JettyHTTPServerEngine
name|engine
init|=
name|factory
operator|.
name|createJettyHTTPServerEngine
argument_list|(
name|PORT1
argument_list|,
literal|"http"
argument_list|)
decl_stmt|;
name|ThreadingParameters
name|parameters
init|=
operator|new
name|ThreadingParameters
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|setThreadNamePrefix
argument_list|(
name|threadNamePrefix1
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setThreadingParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|engine
operator|.
name|finalizeConfig
argument_list|()
expr_stmt|;
name|JettyHTTPTestHandler
name|handler
init|=
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|engine
operator|.
name|addServant
argument_list|(
operator|new
name|URL
argument_list|(
literal|"https://localhost:"
operator|+
name|PORT1
operator|+
literal|"/test"
argument_list|)
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No threads whose name is started with "
operator|+
name|threadNamePrefix1
argument_list|,
name|checkForExistenceOfThreads
argument_list|(
name|threadNamePrefix1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Default thread name prefix
name|engine
operator|=
name|factory
operator|.
name|createJettyHTTPServerEngine
argument_list|(
name|PORT3
argument_list|,
literal|"http"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|finalizeConfig
argument_list|()
expr_stmt|;
name|handler
operator|=
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string3"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addServant
argument_list|(
operator|new
name|URL
argument_list|(
literal|"https://localhost:"
operator|+
name|PORT3
operator|+
literal|"/test"
argument_list|)
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|ThreadPool
name|threadPool
init|=
name|engine
operator|.
name|getServer
argument_list|()
operator|.
name|getThreadPool
argument_list|()
decl_stmt|;
name|QueuedThreadPool
name|qtp
init|=
operator|(
name|QueuedThreadPool
operator|)
name|threadPool
decl_stmt|;
name|String
name|prefixDefault
init|=
name|qtp
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No threads whose name is started with "
operator|+
name|prefixDefault
argument_list|,
name|checkForExistenceOfThreads
argument_list|(
name|prefixDefault
argument_list|)
argument_list|)
expr_stmt|;
comment|// User specific thread name prefix 2
name|String
name|threadNamePrefix2
init|=
literal|"AnotherPrefix"
decl_stmt|;
name|engine
operator|=
name|factory
operator|.
name|createJettyHTTPServerEngine
argument_list|(
name|PORT2
argument_list|,
literal|"http"
argument_list|)
expr_stmt|;
name|parameters
operator|=
operator|new
name|ThreadingParameters
argument_list|()
expr_stmt|;
name|parameters
operator|.
name|setThreadNamePrefix
argument_list|(
name|threadNamePrefix2
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setThreadingParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|engine
operator|.
name|finalizeConfig
argument_list|()
expr_stmt|;
name|handler
operator|=
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addServant
argument_list|(
operator|new
name|URL
argument_list|(
literal|"https://localhost:"
operator|+
name|PORT2
operator|+
literal|"/test"
argument_list|)
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No threads whose name is started with "
operator|+
name|threadNamePrefix2
argument_list|,
name|checkForExistenceOfThreads
argument_list|(
name|threadNamePrefix2
argument_list|)
argument_list|)
expr_stmt|;
name|JettyHTTPServerEngineFactory
operator|.
name|destroyForPort
argument_list|(
name|PORT1
argument_list|)
expr_stmt|;
name|JettyHTTPServerEngineFactory
operator|.
name|destroyForPort
argument_list|(
name|PORT2
argument_list|)
expr_stmt|;
name|JettyHTTPServerEngineFactory
operator|.
name|destroyForPort
argument_list|(
name|PORT3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|checkForExistenceOfThreads
parameter_list|(
name|String
name|prefixName
parameter_list|)
block|{
name|Map
argument_list|<
name|Thread
argument_list|,
name|StackTraceElement
index|[]
argument_list|>
name|threads
init|=
name|Thread
operator|.
name|getAllStackTraces
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Thread
argument_list|>
name|threadSet
init|=
name|threads
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threadSet
control|)
block|{
if|if
condition|(
name|thread
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefixName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEngineRetrieval
parameter_list|()
throws|throws
name|Exception
block|{
name|JettyHTTPServerEngine
name|engine
init|=
name|factory
operator|.
name|createJettyHTTPServerEngine
argument_list|(
name|PORT1
argument_list|,
literal|"http"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Engine references for the same port should point to the same instance"
argument_list|,
name|engine
operator|==
name|factory
operator|.
name|retrieveJettyHTTPServerEngine
argument_list|(
name|PORT1
argument_list|)
argument_list|)
expr_stmt|;
name|JettyHTTPServerEngineFactory
operator|.
name|destroyForPort
argument_list|(
name|PORT1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHttpAndHttps
parameter_list|()
throws|throws
name|Exception
block|{
name|JettyHTTPServerEngine
name|engine
init|=
name|factory
operator|.
name|createJettyHTTPServerEngine
argument_list|(
name|PORT1
argument_list|,
literal|"http"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Protocol must be http"
argument_list|,
literal|"http"
operator|.
name|equals
argument_list|(
name|engine
operator|.
name|getProtocol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|=
operator|new
name|JettyHTTPServerEngine
argument_list|()
expr_stmt|;
name|engine
operator|.
name|setPort
argument_list|(
name|PORT2
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setMaxIdleTime
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setTlsServerParameters
argument_list|(
operator|new
name|TLSServerParameters
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|finalizeConfig
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|JettyHTTPServerEngine
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|engine
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setEnginesList
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|engine
operator|=
name|factory
operator|.
name|createJettyHTTPServerEngine
argument_list|(
name|PORT2
argument_list|,
literal|"https"
argument_list|)
expr_stmt|;
name|JettyHTTPTestHandler
name|handler1
init|=
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// need to create a servant to create the connector
name|engine
operator|.
name|addServant
argument_list|(
operator|new
name|URL
argument_list|(
literal|"https://localhost:"
operator|+
name|PORT2
operator|+
literal|"/test"
argument_list|)
argument_list|,
name|handler1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Protocol must be https"
argument_list|,
literal|"https"
operator|.
name|equals
argument_list|(
name|engine
operator|.
name|getProtocol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get the wrong maxIdleTime."
argument_list|,
literal|30000
argument_list|,
name|getMaxIdle
argument_list|(
name|engine
operator|.
name|getConnector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setTLSServerParametersForPort
argument_list|(
name|PORT1
argument_list|,
operator|new
name|TLSServerParameters
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|=
name|factory
operator|.
name|createJettyHTTPServerEngine
argument_list|(
name|PORT1
argument_list|,
literal|"https"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Protocol must be https"
argument_list|,
literal|"https"
operator|.
name|equals
argument_list|(
name|engine
operator|.
name|getProtocol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setTLSServerParametersForPort
argument_list|(
name|PORT3
argument_list|,
operator|new
name|TLSServerParameters
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|=
name|factory
operator|.
name|createJettyHTTPServerEngine
argument_list|(
name|PORT3
argument_list|,
literal|"https"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Protocol must be https"
argument_list|,
literal|"https"
operator|.
name|equals
argument_list|(
name|engine
operator|.
name|getProtocol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|JettyHTTPServerEngineFactory
operator|.
name|destroyForPort
argument_list|(
name|PORT1
argument_list|)
expr_stmt|;
name|JettyHTTPServerEngineFactory
operator|.
name|destroyForPort
argument_list|(
name|PORT2
argument_list|)
expr_stmt|;
name|JettyHTTPServerEngineFactory
operator|.
name|destroyForPort
argument_list|(
name|PORT3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getMaxIdle
parameter_list|(
name|Connector
name|connector
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
operator|(
name|int
operator|)
name|connector
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getMaxIdleTime"
argument_list|)
operator|.
name|invoke
argument_list|(
name|connector
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nex
parameter_list|)
block|{
comment|//jetty 9
block|}
return|return
operator|(
operator|(
name|Long
operator|)
name|connector
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getIdleTimeout"
argument_list|)
operator|.
name|invoke
argument_list|(
name|connector
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testaddServants
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|urlStr
init|=
literal|"http://localhost:"
operator|+
name|PORT1
operator|+
literal|"/hello/test"
decl_stmt|;
name|String
name|urlStr2
init|=
literal|"http://localhost:"
operator|+
name|PORT1
operator|+
literal|"/hello233/test"
decl_stmt|;
name|JettyHTTPServerEngine
name|engine
init|=
name|factory
operator|.
name|createJettyHTTPServerEngine
argument_list|(
name|PORT1
argument_list|,
literal|"http"
argument_list|)
decl_stmt|;
name|engine
operator|.
name|setMaxIdleTime
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addServant
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
argument_list|,
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string1"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get the wrong maxIdleTime."
argument_list|,
literal|30000
argument_list|,
name|getMaxIdle
argument_list|(
name|engine
operator|.
name|getConnector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|response
init|=
literal|null
decl_stmt|;
name|response
operator|=
name|getResponse
argument_list|(
name|urlStr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The jetty http handler did not take effect"
argument_list|,
name|response
argument_list|,
literal|"string1"
argument_list|)
expr_stmt|;
try|try
block|{
name|engine
operator|.
name|addServant
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
argument_list|,
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"We don't support to publish the two service at the same context path"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Get a wrong exception message"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"hello/test"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|engine
operator|.
name|addServant
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr
operator|+
literal|"/test"
argument_list|)
argument_list|,
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"We don't support to publish the two service at the same context path"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Get a wrong exception message"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"hello/test/test"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|engine
operator|.
name|addServant
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT1
operator|+
literal|"/hello"
argument_list|)
argument_list|,
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"We don't support to publish the two service at the same context path"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Get a wrong exception message"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"hello"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// check if the system property change could work
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.apache.cxf.transports.http_jetty.DontCheckUrl"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addServant
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr
operator|+
literal|"/test"
argument_list|)
argument_list|,
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// clean up the System property setting
name|System
operator|.
name|clearProperty
argument_list|(
literal|"org.apache.cxf.transports.http_jetty.DontCheckUrl"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addServant
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr2
argument_list|)
argument_list|,
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|s
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.eclipse.jetty.server:type=server,*"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Could not find 1 Jetty Server: "
operator|+
name|s
argument_list|,
literal|1
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|removeServant
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|response
operator|=
name|getResponse
argument_list|(
name|urlStr2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The jetty http handler did not take effect"
argument_list|,
name|response
argument_list|,
literal|"string2"
argument_list|)
expr_stmt|;
comment|// set the get request
name|JettyHTTPServerEngineFactory
operator|.
name|destroyForPort
argument_list|(
name|PORT1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that multiple JettyHTTPServerEngine instances can be used simultaneously      * without having name collisions.      */
annotation|@
name|Test
specifier|public
name|void
name|testJmxSupport
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|urlStr
init|=
literal|"http://localhost:"
operator|+
name|PORT1
operator|+
literal|"/hello/test"
decl_stmt|;
name|String
name|urlStr2
init|=
literal|"http://localhost:"
operator|+
name|PORT2
operator|+
literal|"/hello/test"
decl_stmt|;
name|JettyHTTPServerEngine
name|engine
init|=
name|factory
operator|.
name|createJettyHTTPServerEngine
argument_list|(
name|PORT1
argument_list|,
literal|"http"
argument_list|)
decl_stmt|;
name|JettyHTTPServerEngine
name|engine2
init|=
name|factory
operator|.
name|createJettyHTTPServerEngine
argument_list|(
name|PORT2
argument_list|,
literal|"http"
argument_list|)
decl_stmt|;
name|JettyHTTPTestHandler
name|handler1
init|=
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JettyHTTPTestHandler
name|handler2
init|=
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|engine
operator|.
name|addServant
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
argument_list|,
name|handler1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|s
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.eclipse.jetty.server:type=server,*"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Could not find 1 Jetty Server: "
operator|+
name|s
argument_list|,
literal|1
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|engine2
operator|.
name|addServant
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr2
argument_list|)
argument_list|,
name|handler2
argument_list|)
expr_stmt|;
name|s
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.eclipse.jetty.server:type=server,*"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Could not find 2 Jetty Server: "
operator|+
name|s
argument_list|,
literal|2
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|removeServant
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
argument_list|)
expr_stmt|;
name|engine2
operator|.
name|removeServant
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr2
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|s
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.eclipse.jetty.server:type=server,*"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Could not find 2 Jetty Server: "
operator|+
name|s
argument_list|,
literal|1
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|engine2
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|s
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.eclipse.jetty.server:type=server,*"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Could not find 0 Jetty Server: "
operator|+
name|s
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JettyHTTPServerEngineFactory
operator|.
name|destroyForPort
argument_list|(
name|PORT1
argument_list|)
expr_stmt|;
name|JettyHTTPServerEngineFactory
operator|.
name|destroyForPort
argument_list|(
name|PORT2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetHandlers
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT2
operator|+
literal|"/hello/test"
argument_list|)
decl_stmt|;
name|JettyHTTPTestHandler
name|handler1
init|=
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JettyHTTPTestHandler
name|handler2
init|=
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JettyHTTPServerEngine
name|engine
init|=
operator|new
name|JettyHTTPServerEngine
argument_list|()
decl_stmt|;
name|engine
operator|.
name|setPort
argument_list|(
name|PORT2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Handler
argument_list|>
name|handlers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|handler1
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setHandlers
argument_list|(
name|handlers
argument_list|)
expr_stmt|;
name|engine
operator|.
name|finalizeConfig
argument_list|()
expr_stmt|;
name|engine
operator|.
name|addServant
argument_list|(
name|url
argument_list|,
name|handler2
argument_list|)
expr_stmt|;
name|String
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|getResponse
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the jetty http handler1 did not take effect"
argument_list|,
name|response
argument_list|,
literal|"string1string2"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Can't get the reponse from the server "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|stop
argument_list|()
expr_stmt|;
name|JettyHTTPServerEngineFactory
operator|.
name|destroyForPort
argument_list|(
name|PORT2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetContextHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|urlStr
init|=
literal|"http://localhost:"
operator|+
name|PORT1
operator|+
literal|"/hello/test"
decl_stmt|;
name|JettyHTTPServerEngine
name|engine
init|=
name|factory
operator|.
name|createJettyHTTPServerEngine
argument_list|(
name|PORT1
argument_list|,
literal|"http"
argument_list|)
decl_stmt|;
name|ContextHandler
name|contextHandler
init|=
name|engine
operator|.
name|getContextHandler
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
argument_list|)
decl_stmt|;
comment|// can't find the context handler here
name|assertNull
argument_list|(
name|contextHandler
argument_list|)
expr_stmt|;
name|JettyHTTPTestHandler
name|handler1
init|=
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JettyHTTPTestHandler
name|handler2
init|=
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|engine
operator|.
name|addServant
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
argument_list|,
name|handler1
argument_list|)
expr_stmt|;
comment|// Note: There appears to be an internal issue in Jetty that does not
comment|// unregister the MBean for handler1 during this setHandler operation.
comment|// This scenario may create a warning message in the logs
comment|//     (javax.management.InstanceAlreadyExistsException: org.apache.cxf.
comment|//         transport.http_jetty:type=jettyhttptesthandler,id=0)
comment|// when running subsequent tests.
name|contextHandler
operator|=
name|engine
operator|.
name|getContextHandler
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr
argument_list|)
argument_list|)
expr_stmt|;
name|contextHandler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|contextHandler
operator|.
name|setHandler
argument_list|(
name|handler2
argument_list|)
expr_stmt|;
name|contextHandler
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|getResponse
argument_list|(
name|urlStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Can't get the reponse from the server "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"the jetty http handler did not take effect"
argument_list|,
name|response
argument_list|,
literal|"string2"
argument_list|)
expr_stmt|;
name|JettyHTTPServerEngineFactory
operator|.
name|destroyForPort
argument_list|(
name|PORT1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJettyHTTPHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|urlStr1
init|=
literal|"http://localhost:"
operator|+
name|PORT3
operator|+
literal|"/hello/test1"
decl_stmt|;
name|String
name|urlStr2
init|=
literal|"http://localhost:"
operator|+
name|PORT3
operator|+
literal|"/hello/test2"
decl_stmt|;
name|JettyHTTPServerEngine
name|engine
init|=
name|factory
operator|.
name|createJettyHTTPServerEngine
argument_list|(
name|PORT3
argument_list|,
literal|"http"
argument_list|)
decl_stmt|;
name|ContextHandler
name|contextHandler
init|=
name|engine
operator|.
name|getContextHandler
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr1
argument_list|)
argument_list|)
decl_stmt|;
comment|// can't find the context handler here
name|assertNull
argument_list|(
name|contextHandler
argument_list|)
expr_stmt|;
name|JettyHTTPHandler
name|handler1
init|=
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|JettyHTTPHandler
name|handler2
init|=
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"test2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|engine
operator|.
name|addServant
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr1
argument_list|)
argument_list|,
name|handler1
argument_list|)
expr_stmt|;
name|contextHandler
operator|=
name|engine
operator|.
name|getContextHandler
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr1
argument_list|)
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addServant
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr2
argument_list|)
argument_list|,
name|handler2
argument_list|)
expr_stmt|;
name|contextHandler
operator|=
name|engine
operator|.
name|getContextHandler
argument_list|(
operator|new
name|URL
argument_list|(
name|urlStr2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|getResponse
argument_list|(
name|urlStr1
operator|+
literal|"/test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Can't get the reponse from the server "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"the jetty http handler did not take effect"
argument_list|,
name|response
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
try|try
block|{
name|response
operator|=
name|getResponse
argument_list|(
name|urlStr2
operator|+
literal|"/test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Can't get the reponse from the server "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"the jetty http handler did not take effect"
argument_list|,
name|response
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
name|JettyHTTPServerEngineFactory
operator|.
name|destroyForPort
argument_list|(
name|PORT3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetConnector
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT4
operator|+
literal|"/hello/test"
argument_list|)
decl_stmt|;
name|JettyHTTPTestHandler
name|handler1
init|=
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JettyHTTPTestHandler
name|handler2
init|=
operator|new
name|JettyHTTPTestHandler
argument_list|(
literal|"string2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JettyHTTPServerEngine
name|engine
init|=
operator|new
name|JettyHTTPServerEngine
argument_list|()
decl_stmt|;
name|engine
operator|.
name|setPort
argument_list|(
name|PORT4
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
operator|new
name|Server
argument_list|()
decl_stmt|;
name|ServerConnector
name|connector
init|=
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setPort
argument_list|(
name|PORT4
argument_list|)
expr_stmt|;
name|HttpConfiguration
name|httpConfig
init|=
operator|new
name|HttpConfiguration
argument_list|()
decl_stmt|;
name|httpConfig
operator|.
name|addCustomizer
argument_list|(
operator|new
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ForwardedRequestCustomizer
argument_list|()
argument_list|)
expr_stmt|;
name|HttpConnectionFactory
name|httpFactory
init|=
operator|new
name|HttpConnectionFactory
argument_list|(
name|httpConfig
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|ConnectionFactory
argument_list|>
name|connectionFactories
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|connectionFactories
operator|.
name|add
argument_list|(
name|httpFactory
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setConnectionFactories
argument_list|(
name|connectionFactories
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Handler
argument_list|>
name|handlers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|handler1
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setHandlers
argument_list|(
name|handlers
argument_list|)
expr_stmt|;
name|engine
operator|.
name|finalizeConfig
argument_list|()
expr_stmt|;
name|engine
operator|.
name|addServant
argument_list|(
name|url
argument_list|,
name|handler2
argument_list|)
expr_stmt|;
name|String
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|getResponse
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"the jetty http handler1 did not take effect"
argument_list|,
name|response
argument_list|,
literal|"string1string2"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Can't get the reponse from the server "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
name|engine
operator|.
name|stop
argument_list|()
expr_stmt|;
name|JettyHTTPServerEngineFactory
operator|.
name|destroyForPort
argument_list|(
name|PORT4
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getResponse
parameter_list|(
name|String
name|target
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|URLConnection
name|connection
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|connection
operator|instanceof
name|HttpURLConnection
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|InputStream
name|in
init|=
name|connection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
try|try
init|(
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|)
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

