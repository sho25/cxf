begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_jetty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|extension
operator|.
name|ExtensionManagerBus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|continuations
operator|.
name|SuspendedInvocationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointResolverRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|AbstractWrappedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|policy
operator|.
name|PolicyDataEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|transport
operator|.
name|TLSSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ConduitInitiator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ConduitInitiatorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|AbstractHTTPDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|ContinuationProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|DestinationRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|HTTPTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|auth
operator|.
name|DefaultBasicAuthSupplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|configuration
operator|.
name|HTTPServerPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|JettyHTTPDestinationTest
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|AUTH_HEADER
init|=
literal|"Authorization"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"copernicus"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PASSWD
init|=
literal|"epicycles"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|BASIC_AUTH
init|=
name|DefaultBasicAuthSupplier
operator|.
name|getBasicAuthHeader
argument_list|(
name|USER
argument_list|,
name|PASSWD
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NOWHERE
init|=
literal|"http://nada.nothing.nowhere.null/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PAYLOAD
init|=
literal|"message payload"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CHALLENGE_HEADER
init|=
literal|"WWW-Authenticate"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BASIC_CHALLENGE
init|=
literal|"Basic realm=terra"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DIGEST_CHALLENGE
init|=
literal|"Digest realm=luna"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_CHALLENGE
init|=
literal|"Custom realm=sol"
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|Bus
name|threadDefaultBus
decl_stmt|;
specifier|private
name|Conduit
name|decoupledBackChannel
decl_stmt|;
specifier|private
name|EndpointInfo
name|endpointInfo
decl_stmt|;
specifier|private
name|EndpointReferenceType
name|address
decl_stmt|;
specifier|private
name|JettyHTTPServerEngine
name|engine
decl_stmt|;
specifier|private
name|HTTPServerPolicy
name|policy
decl_stmt|;
specifier|private
name|JettyHTTPDestination
name|destination
decl_stmt|;
specifier|private
name|Request
name|request
decl_stmt|;
specifier|private
name|Response
name|response
decl_stmt|;
specifier|private
name|Message
name|inMessage
decl_stmt|;
specifier|private
name|Message
name|outMessage
decl_stmt|;
specifier|private
name|MessageObserver
name|observer
decl_stmt|;
specifier|private
name|ServletInputStream
name|is
decl_stmt|;
specifier|private
name|ServletOutputStream
name|os
decl_stmt|;
specifier|private
name|HTTPTransportFactory
name|transportFactory
decl_stmt|;
comment|/**      * This class replaces the engine in the Jetty Destination.      */
specifier|private
class|class
name|EasyMockJettyHTTPDestination
extends|extends
name|JettyHTTPDestination
block|{
name|EasyMockJettyHTTPDestination
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|DestinationRegistry
name|registry
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|,
name|JettyHTTPServerEngineFactory
name|serverEngineFactory
parameter_list|,
name|JettyHTTPServerEngine
name|easyMockEngine
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|bus
argument_list|,
name|registry
argument_list|,
name|endpointInfo
argument_list|,
name|serverEngineFactory
argument_list|)
expr_stmt|;
name|engine
operator|=
name|easyMockEngine
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|retrieveEngine
parameter_list|()
block|{
comment|// Leave engine alone.
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|bus
operator|=
literal|null
expr_stmt|;
name|transportFactory
operator|=
literal|null
expr_stmt|;
name|decoupledBackChannel
operator|=
literal|null
expr_stmt|;
name|address
operator|=
literal|null
expr_stmt|;
name|engine
operator|=
literal|null
expr_stmt|;
name|request
operator|=
literal|null
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
name|inMessage
operator|=
literal|null
expr_stmt|;
name|outMessage
operator|=
literal|null
expr_stmt|;
name|is
operator|=
literal|null
expr_stmt|;
name|os
operator|=
literal|null
expr_stmt|;
name|destination
operator|=
literal|null
expr_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAddress
parameter_list|()
throws|throws
name|Exception
block|{
name|destination
operator|=
name|setUpDestination
argument_list|()
expr_stmt|;
name|EndpointReferenceType
name|ref
init|=
name|destination
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"unexpected null address"
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected address"
argument_list|,
name|EndpointReferenceUtils
operator|.
name|getAddress
argument_list|(
name|ref
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|addDefaultPortIfMissing
argument_list|(
name|EndpointReferenceUtils
operator|.
name|getAddress
argument_list|(
name|address
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected service name local part"
argument_list|,
name|EndpointReferenceUtils
operator|.
name|getServiceName
argument_list|(
name|ref
argument_list|,
name|bus
argument_list|)
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|"Service"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected portName"
argument_list|,
name|EndpointReferenceUtils
operator|.
name|getPortName
argument_list|(
name|ref
argument_list|)
argument_list|,
literal|"Port"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomPortAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|bus
operator|=
name|BusFactory
operator|.
name|getDefaultBus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|transportFactory
operator|=
operator|new
name|HTTPTransportFactory
argument_list|()
expr_stmt|;
name|ServiceInfo
name|serviceInfo
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|serviceInfo
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"bla"
argument_list|,
literal|"Service"
argument_list|)
argument_list|)
expr_stmt|;
name|EndpointInfo
name|ei
init|=
operator|new
name|EndpointInfo
argument_list|(
name|serviceInfo
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|ei
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"bla"
argument_list|,
literal|"Port"
argument_list|)
argument_list|)
expr_stmt|;
name|Destination
name|d1
init|=
name|transportFactory
operator|.
name|getDestination
argument_list|(
name|ei
argument_list|,
name|bus
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|d1
operator|.
name|getAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"No random port has been allocated"
argument_list|,
name|url
operator|.
name|getPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuspendedException
parameter_list|()
throws|throws
name|Exception
block|{
name|destination
operator|=
name|setUpDestination
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setUpDoService
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|RuntimeException
name|ex
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|observer
operator|=
operator|new
name|MessageObserver
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
throw|throw
operator|new
name|SuspendedInvocationException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
expr_stmt|;
name|destination
operator|.
name|setMessageObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
try|try
block|{
name|destination
operator|.
name|doService
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Suspended invocation swallowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|runtimeEx
parameter_list|)
block|{
name|assertSame
argument_list|(
literal|"Original exception is not preserved"
argument_list|,
name|ex
argument_list|,
name|runtimeEx
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContinuationsIgnored
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpServletRequest
name|httpRequest
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceInfo
name|serviceInfo
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|serviceInfo
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"bla"
argument_list|,
literal|"Service"
argument_list|)
argument_list|)
expr_stmt|;
name|EndpointInfo
name|ei
init|=
operator|new
name|EndpointInfo
argument_list|(
name|serviceInfo
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|ei
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"bla"
argument_list|,
literal|"Port"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|JettyHTTPServerEngine
name|httpEngine
init|=
operator|new
name|JettyHTTPServerEngine
argument_list|()
decl_stmt|;
name|httpEngine
operator|.
name|setContinuationsEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JettyHTTPServerEngineFactory
name|factory
init|=
operator|new
name|JettyHTTPServerEngineFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JettyHTTPServerEngine
name|retrieveJettyHTTPServerEngine
parameter_list|(
name|int
name|port
parameter_list|)
block|{
return|return
name|httpEngine
return|;
block|}
block|}
decl_stmt|;
name|Bus
name|b2
init|=
operator|new
name|ExtensionManagerBus
argument_list|()
decl_stmt|;
name|transportFactory
operator|=
operator|new
name|HTTPTransportFactory
argument_list|()
expr_stmt|;
name|b2
operator|.
name|setExtension
argument_list|(
name|factory
argument_list|,
name|JettyHTTPServerEngineFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|TestJettyDestination
name|testDestination
init|=
operator|new
name|TestJettyDestination
argument_list|(
name|b2
argument_list|,
name|transportFactory
operator|.
name|getRegistry
argument_list|()
argument_list|,
name|ei
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|testDestination
operator|.
name|finalizeConfig
argument_list|()
expr_stmt|;
name|Message
name|mi
init|=
name|testDestination
operator|.
name|retrieveFromContinuation
argument_list|(
name|httpRequest
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Continuations must be ignored"
argument_list|,
name|mi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|bus
operator|=
name|BusFactory
operator|.
name|getDefaultBus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|transportFactory
operator|=
operator|new
name|HTTPTransportFactory
argument_list|()
expr_stmt|;
name|ServiceInfo
name|serviceInfo
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|serviceInfo
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"bla"
argument_list|,
literal|"Service"
argument_list|)
argument_list|)
expr_stmt|;
name|EndpointInfo
name|ei
init|=
operator|new
name|EndpointInfo
argument_list|(
name|serviceInfo
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|ei
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"bla"
argument_list|,
literal|"Port"
argument_list|)
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setAddress
argument_list|(
literal|"http://foo"
argument_list|)
expr_stmt|;
name|Destination
name|d1
init|=
name|transportFactory
operator|.
name|getDestination
argument_list|(
name|ei
argument_list|,
name|bus
argument_list|)
decl_stmt|;
name|Destination
name|d2
init|=
name|transportFactory
operator|.
name|getDestination
argument_list|(
name|ei
argument_list|,
name|bus
argument_list|)
decl_stmt|;
comment|// Second get should not generate a new destination. It should just retrieve the existing one
name|assertEquals
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
name|d2
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Destination
name|d3
init|=
name|transportFactory
operator|.
name|getDestination
argument_list|(
name|ei
argument_list|,
name|bus
argument_list|)
decl_stmt|;
comment|// Now a new destination should have been created
name|assertNotSame
argument_list|(
name|d1
argument_list|,
name|d3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveServant
parameter_list|()
throws|throws
name|Exception
block|{
name|destination
operator|=
name|setUpDestination
argument_list|()
expr_stmt|;
name|setUpRemoveServant
argument_list|()
expr_stmt|;
name|destination
operator|.
name|setMessageObserver
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoServiceRedirectURL
parameter_list|()
throws|throws
name|Exception
block|{
name|destination
operator|=
name|setUpDestination
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setUpDoService
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|destination
operator|.
name|doService
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoService
parameter_list|()
throws|throws
name|Exception
block|{
name|Bus
name|defaultBus
init|=
operator|new
name|ExtensionManagerBus
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
literal|"Default thread bus has not been set"
argument_list|,
name|defaultBus
argument_list|,
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
argument_list|)
expr_stmt|;
name|destination
operator|=
name|setUpDestination
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setUpDoService
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Default thread bus has been unexpectedly reset"
argument_list|,
name|defaultBus
argument_list|,
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
argument_list|)
expr_stmt|;
name|destination
operator|.
name|doService
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|verifyDoService
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
literal|"Default thread bus has not been reset"
argument_list|,
name|defaultBus
argument_list|,
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoServiceWithHttpGET
parameter_list|()
throws|throws
name|Exception
block|{
name|destination
operator|=
name|setUpDestination
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setUpDoService
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|"GET"
argument_list|,
literal|"?customerId=abc&cutomerAdd=def"
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|destination
operator|.
name|doService
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"unexpected null message"
argument_list|,
name|inMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected method"
argument_list|,
name|inMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected path"
argument_list|,
name|inMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PATH_INFO
argument_list|)
argument_list|,
literal|"/bar/foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected query"
argument_list|,
name|inMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|QUERY_STRING
argument_list|)
argument_list|,
literal|"?customerId=abc&cutomerAdd=def"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAnonBackChannel
parameter_list|()
throws|throws
name|Exception
block|{
name|destination
operator|=
name|setUpDestination
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setUpDoService
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|destination
operator|.
name|doService
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|setUpInMessage
argument_list|()
expr_stmt|;
name|Conduit
name|backChannel
init|=
name|destination
operator|.
name|getBackChannel
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expected back channel"
argument_list|,
name|backChannel
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected target"
argument_list|,
name|EndpointReferenceUtils
operator|.
name|ANONYMOUS_ADDRESS
argument_list|,
name|backChannel
operator|.
name|getTarget
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBackChannelSend
parameter_list|()
throws|throws
name|Exception
block|{
name|destination
operator|=
name|setUpDestination
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setUpDoService
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|destination
operator|.
name|doService
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|setUpInMessage
argument_list|()
expr_stmt|;
name|Conduit
name|backChannel
init|=
name|destination
operator|.
name|getBackChannel
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
name|outMessage
operator|=
name|setUpOutMessage
argument_list|()
expr_stmt|;
name|backChannel
operator|.
name|prepare
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
name|verifyBackChannelSend
argument_list|(
name|backChannel
argument_list|,
name|outMessage
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBackChannelSendFault
parameter_list|()
throws|throws
name|Exception
block|{
name|destination
operator|=
name|setUpDestination
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setUpDoService
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|destination
operator|.
name|doService
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|setUpInMessage
argument_list|()
expr_stmt|;
name|Conduit
name|backChannel
init|=
name|destination
operator|.
name|getBackChannel
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
name|outMessage
operator|=
name|setUpOutMessage
argument_list|()
expr_stmt|;
name|backChannel
operator|.
name|prepare
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
name|verifyBackChannelSend
argument_list|(
name|backChannel
argument_list|,
name|outMessage
argument_list|,
literal|500
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBackChannelSendOneway
parameter_list|()
throws|throws
name|Exception
block|{
name|destination
operator|=
name|setUpDestination
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setUpDoService
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|destination
operator|.
name|doService
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|setUpInMessage
argument_list|()
expr_stmt|;
name|Conduit
name|backChannel
init|=
name|destination
operator|.
name|getBackChannel
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
name|outMessage
operator|=
name|setUpOutMessage
argument_list|()
expr_stmt|;
name|backChannel
operator|.
name|prepare
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
name|verifyBackChannelSend
argument_list|(
name|backChannel
argument_list|,
name|outMessage
argument_list|,
literal|500
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBackChannelSendDecoupled
parameter_list|()
throws|throws
name|Exception
block|{
name|destination
operator|=
name|setUpDestination
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setUpDoService
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|202
argument_list|)
expr_stmt|;
name|destination
operator|.
name|doService
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|setUpInMessage
argument_list|()
expr_stmt|;
name|Message
name|partialResponse
init|=
name|setUpOutMessage
argument_list|()
decl_stmt|;
name|partialResponse
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PARTIAL_RESPONSE_MESSAGE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|Conduit
name|partialBackChannel
init|=
name|destination
operator|.
name|getBackChannel
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
name|partialBackChannel
operator|.
name|prepare
argument_list|(
name|partialResponse
argument_list|)
expr_stmt|;
name|verifyBackChannelSend
argument_list|(
name|partialBackChannel
argument_list|,
name|partialResponse
argument_list|,
literal|202
argument_list|)
expr_stmt|;
name|outMessage
operator|=
name|setUpOutMessage
argument_list|()
expr_stmt|;
name|Conduit
name|fullBackChannel
init|=
name|destination
operator|.
name|getBackChannel
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
name|fullBackChannel
operator|.
name|prepare
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerPolicyInServiceModel
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|=
operator|new
name|HTTPServerPolicy
argument_list|()
expr_stmt|;
name|address
operator|=
name|getEPR
argument_list|(
literal|"bar/foo"
argument_list|)
expr_stmt|;
name|bus
operator|=
name|BusFactory
operator|.
name|getDefaultBus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|transportFactory
operator|=
operator|new
name|HTTPTransportFactory
argument_list|()
expr_stmt|;
name|ServiceInfo
name|serviceInfo
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|serviceInfo
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"bla"
argument_list|,
literal|"Service"
argument_list|)
argument_list|)
expr_stmt|;
name|endpointInfo
operator|=
operator|new
name|EndpointInfo
argument_list|(
name|serviceInfo
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|endpointInfo
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"bla"
argument_list|,
literal|"Port"
argument_list|)
argument_list|)
expr_stmt|;
name|endpointInfo
operator|.
name|addExtensor
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|engine
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|JettyHTTPServerEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|()
expr_stmt|;
name|endpointInfo
operator|.
name|setAddress
argument_list|(
name|NOWHERE
operator|+
literal|"bar/foo"
argument_list|)
expr_stmt|;
name|JettyHTTPDestination
name|dest
init|=
operator|new
name|EasyMockJettyHTTPDestination
argument_list|(
name|bus
argument_list|,
name|transportFactory
operator|.
name|getRegistry
argument_list|()
argument_list|,
name|endpointInfo
argument_list|,
literal|null
argument_list|,
name|engine
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|policy
argument_list|,
name|dest
operator|.
name|getServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiplexGetAddressWithId
parameter_list|()
throws|throws
name|Exception
block|{
name|destination
operator|=
name|setUpDestination
argument_list|()
expr_stmt|;
specifier|final
name|String
name|id
init|=
literal|"ID2"
decl_stmt|;
name|EndpointReferenceType
name|refWithId
init|=
name|destination
operator|.
name|getAddressWithId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|refWithId
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|refWithId
operator|.
name|getReferenceParameters
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|refWithId
operator|.
name|getReferenceParameters
argument_list|()
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"it is an element"
argument_list|,
name|refWithId
operator|.
name|getReferenceParameters
argument_list|()
operator|.
name|getAny
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|JAXBElement
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|el
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|refWithId
operator|.
name|getReferenceParameters
argument_list|()
operator|.
name|getAny
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"match our id"
argument_list|,
name|el
operator|.
name|getValue
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiplexGetAddressWithIdForAddress
parameter_list|()
throws|throws
name|Exception
block|{
name|destination
operator|=
name|setUpDestination
argument_list|()
expr_stmt|;
name|destination
operator|.
name|setMultiplexWithAddress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|String
name|id
init|=
literal|"ID3"
decl_stmt|;
name|EndpointReferenceType
name|refWithId
init|=
name|destination
operator|.
name|getAddressWithId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|refWithId
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|refWithId
operator|.
name|getReferenceParameters
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"match our id"
argument_list|,
name|EndpointReferenceUtils
operator|.
name|getAddress
argument_list|(
name|refWithId
argument_list|)
operator|.
name|indexOf
argument_list|(
name|id
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiplexGetIdForAddress
parameter_list|()
throws|throws
name|Exception
block|{
name|destination
operator|=
name|setUpDestination
argument_list|()
expr_stmt|;
name|destination
operator|.
name|setMultiplexWithAddress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|String
name|id
init|=
literal|"ID3"
decl_stmt|;
name|EndpointReferenceType
name|refWithId
init|=
name|destination
operator|.
name|getAddressWithId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|String
name|pathInfo
init|=
name|EndpointReferenceUtils
operator|.
name|getAddress
argument_list|(
name|refWithId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"fails with no context"
argument_list|,
name|destination
operator|.
name|getId
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PATH_INFO
argument_list|,
name|pathInfo
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|destination
operator|.
name|getId
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"match our id"
argument_list|,
name|result
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiplexGetId
parameter_list|()
throws|throws
name|Exception
block|{
name|destination
operator|=
name|setUpDestination
argument_list|()
expr_stmt|;
specifier|final
name|String
name|id
init|=
literal|"ID3"
decl_stmt|;
name|EndpointReferenceType
name|refWithId
init|=
name|destination
operator|.
name|getAddressWithId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"fails with no context"
argument_list|,
name|destination
operator|.
name|getId
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|AddressingProperties
name|maps
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|AddressingProperties
operator|.
name|class
argument_list|)
decl_stmt|;
name|maps
operator|.
name|getToEndpointReference
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|refWithId
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|maps
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|JAXWSAConstants
operator|.
name|ADDRESSING_PROPERTIES_INBOUND
argument_list|,
name|maps
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|destination
operator|.
name|getId
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"match our id"
argument_list|,
name|result
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
specifier|private
name|JettyHTTPDestination
name|setUpDestination
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|setUpDestination
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
empty_stmt|;
specifier|private
name|JettyHTTPDestination
name|setUpDestination
parameter_list|(
name|boolean
name|contextMatchOnStem
parameter_list|,
name|boolean
name|mockedBus
parameter_list|)
throws|throws
name|Exception
block|{
name|policy
operator|=
operator|new
name|HTTPServerPolicy
argument_list|()
expr_stmt|;
name|address
operator|=
name|getEPR
argument_list|(
literal|"bar/foo"
argument_list|)
expr_stmt|;
name|transportFactory
operator|=
operator|new
name|HTTPTransportFactory
argument_list|()
expr_stmt|;
specifier|final
name|ConduitInitiator
name|ci
init|=
operator|new
name|ConduitInitiator
argument_list|()
block|{
specifier|public
name|Conduit
name|getConduit
parameter_list|(
name|EndpointInfo
name|targetInfo
parameter_list|,
name|Bus
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|decoupledBackChannel
return|;
block|}
specifier|public
name|Conduit
name|getConduit
parameter_list|(
name|EndpointInfo
name|localInfo
parameter_list|,
name|EndpointReferenceType
name|target
parameter_list|,
name|Bus
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|decoupledBackChannel
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTransportIds
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getUriPrefixes
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"http"
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|ConduitInitiatorManager
name|mgr
init|=
operator|new
name|ConduitInitiatorManager
argument_list|()
block|{
specifier|public
name|void
name|deregisterConduitInitiator
parameter_list|(
name|String
name|name
parameter_list|)
block|{             }
specifier|public
name|ConduitInitiator
name|getConduitInitiator
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|BusException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|ConduitInitiator
name|getConduitInitiatorForUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|ci
return|;
block|}
specifier|public
name|void
name|registerConduitInitiator
parameter_list|(
name|String
name|name
parameter_list|,
name|ConduitInitiator
name|factory
parameter_list|)
block|{             }
block|}
decl_stmt|;
if|if
condition|(
operator|!
name|mockedBus
condition|)
block|{
name|bus
operator|=
operator|new
name|ExtensionManagerBus
argument_list|()
expr_stmt|;
name|bus
operator|.
name|setExtension
argument_list|(
name|mgr
argument_list|,
name|ConduitInitiatorManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bus
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getExtension
argument_list|(
name|EndpointResolverRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getExtension
argument_list|(
name|ContinuationProviderFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyDataEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|bus
operator|.
name|hasExtensionByName
argument_list|(
literal|"org.apache.cxf.ws.policy.PolicyEngine"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getExtension
argument_list|(
name|ClassLoader
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bus
argument_list|)
expr_stmt|;
block|}
name|engine
operator|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|JettyHTTPServerEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|ServiceInfo
name|serviceInfo
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|serviceInfo
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"bla"
argument_list|,
literal|"Service"
argument_list|)
argument_list|)
expr_stmt|;
name|endpointInfo
operator|=
operator|new
name|EndpointInfo
argument_list|(
name|serviceInfo
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|endpointInfo
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"bla"
argument_list|,
literal|"Port"
argument_list|)
argument_list|)
expr_stmt|;
name|endpointInfo
operator|.
name|setAddress
argument_list|(
name|NOWHERE
operator|+
literal|"bar/foo"
argument_list|)
expr_stmt|;
name|endpointInfo
operator|.
name|addExtensor
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addServant
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
operator|new
name|URL
argument_list|(
name|NOWHERE
operator|+
literal|"bar/foo"
argument_list|)
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|JettyHTTPHandler
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|engine
operator|.
name|getContinuationsEnabled
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|engine
argument_list|)
expr_stmt|;
name|JettyHTTPDestination
name|dest
init|=
operator|new
name|EasyMockJettyHTTPDestination
argument_list|(
name|bus
argument_list|,
name|transportFactory
operator|.
name|getRegistry
argument_list|()
argument_list|,
name|endpointInfo
argument_list|,
literal|null
argument_list|,
name|engine
argument_list|)
decl_stmt|;
name|dest
operator|.
name|retrieveEngine
argument_list|()
expr_stmt|;
name|policy
operator|=
name|dest
operator|.
name|getServer
argument_list|()
expr_stmt|;
name|observer
operator|=
operator|new
name|MessageObserver
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|inMessage
operator|=
name|m
expr_stmt|;
name|threadDefaultBus
operator|=
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|dest
operator|.
name|setMessageObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
return|return
name|dest
return|;
block|}
specifier|private
name|void
name|setUpRemoveServant
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|reset
argument_list|(
name|engine
argument_list|)
expr_stmt|;
name|engine
operator|.
name|removeServant
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
operator|new
name|URL
argument_list|(
name|NOWHERE
operator|+
literal|"bar/foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|engine
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpDoService
parameter_list|(
name|boolean
name|setRedirectURL
parameter_list|)
throws|throws
name|Exception
block|{
name|setUpDoService
argument_list|(
name|setRedirectURL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpDoService
parameter_list|(
name|boolean
name|setRedirectURL
parameter_list|,
name|boolean
name|sendResponse
parameter_list|)
throws|throws
name|Exception
block|{
name|setUpDoService
argument_list|(
name|setRedirectURL
argument_list|,
name|sendResponse
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpDoService
parameter_list|(
name|boolean
name|setRedirectURL
parameter_list|,
name|boolean
name|sendResponse
parameter_list|,
name|int
name|status
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|method
init|=
literal|"POST"
decl_stmt|;
name|String
name|query
init|=
literal|"?name"
decl_stmt|;
name|setUpDoService
argument_list|(
name|setRedirectURL
argument_list|,
name|sendResponse
argument_list|,
literal|false
argument_list|,
name|method
argument_list|,
name|query
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpDoService
parameter_list|(
name|boolean
name|setRedirectURL
parameter_list|,
name|boolean
name|sendResponse
parameter_list|,
name|boolean
name|decoupled
parameter_list|,
name|int
name|status
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|method
init|=
literal|"POST"
decl_stmt|;
name|String
name|query
init|=
literal|"?name"
decl_stmt|;
name|setUpDoService
argument_list|(
name|setRedirectURL
argument_list|,
name|sendResponse
argument_list|,
name|decoupled
argument_list|,
name|method
argument_list|,
name|query
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpDoService
parameter_list|(
name|boolean
name|setRedirectURL
parameter_list|,
name|boolean
name|sendResponse
parameter_list|,
name|boolean
name|decoupled
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|method
init|=
literal|"POST"
decl_stmt|;
name|String
name|query
init|=
literal|"?name"
decl_stmt|;
name|setUpDoService
argument_list|(
name|setRedirectURL
argument_list|,
name|sendResponse
argument_list|,
name|decoupled
argument_list|,
name|method
argument_list|,
name|query
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpDoService
parameter_list|(
name|boolean
name|setRedirectURL
parameter_list|,
name|boolean
name|sendResponse
parameter_list|,
name|boolean
name|decoupled
parameter_list|,
name|String
name|method
parameter_list|,
name|String
name|query
parameter_list|,
name|int
name|status
parameter_list|)
throws|throws
name|Exception
block|{
name|is
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServletInputStream
operator|.
name|class
argument_list|)
expr_stmt|;
name|os
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServletOutputStream
operator|.
name|class
argument_list|)
expr_stmt|;
name|request
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Request
operator|.
name|class
argument_list|)
expr_stmt|;
name|response
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Response
operator|.
name|class
argument_list|)
expr_stmt|;
name|request
operator|.
name|getMethod
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|method
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
comment|//request.getConnection();
comment|//EasyMock.expectLastCall().andReturn(null).anyTimes();
name|request
operator|.
name|getUserPrincipal
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
if|if
condition|(
name|setRedirectURL
condition|)
block|{
name|policy
operator|.
name|setRedirectURL
argument_list|(
name|NOWHERE
operator|+
literal|"foo/bar"
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendRedirect
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|NOWHERE
operator|+
literal|"foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|request
operator|.
name|setHandled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//getQueryString for if statement
name|request
operator|.
name|getQueryString
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"GET"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
operator|&&
literal|"?wsdl"
operator|.
name|equals
argument_list|(
name|query
argument_list|)
condition|)
block|{
name|verifyGetWSDLQuery
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// test for the post
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getAttribute
argument_list|(
name|AbstractHTTPDestination
operator|.
name|CXF_CONTINUATION_MESSAGE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|//EasyMock.expect(request.getMethod()).andReturn(method);
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getContextPath
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"/bar"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getServletPath
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getRequestURL
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"http://localhost/foo"
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getCharacterEncoding
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
literal|"Accept"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"*/*"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"text/xml charset=utf8"
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"org.eclipse.jetty.ajax.Continuation"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getAttribute
argument_list|(
literal|"http.service.redirection"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|HttpFields
name|httpFields
init|=
operator|new
name|HttpFields
argument_list|()
decl_stmt|;
name|httpFields
operator|.
name|add
argument_list|(
literal|"content-type"
argument_list|,
literal|"text/xml"
argument_list|)
expr_stmt|;
name|httpFields
operator|.
name|add
argument_list|(
literal|"content-type"
argument_list|,
literal|"charset=utf8"
argument_list|)
expr_stmt|;
name|httpFields
operator|.
name|put
argument_list|(
name|JettyHTTPDestinationTest
operator|.
name|AUTH_HEADER
argument_list|,
name|JettyHTTPDestinationTest
operator|.
name|BASIC_AUTH
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getHeaderNames
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|httpFields
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|getHeaders
argument_list|(
literal|"content-type"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|httpFields
operator|.
name|getValues
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|getHeaders
argument_list|(
name|JettyHTTPDestinationTest
operator|.
name|AUTH_HEADER
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|httpFields
operator|.
name|getValues
argument_list|(
name|JettyHTTPDestinationTest
operator|.
name|AUTH_HEADER
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|request
operator|.
name|setHandled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
if|if
condition|(
name|sendResponse
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/xml charset=utf8"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|response
operator|.
name|addHeader
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|response
operator|.
name|setContentLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|response
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|response
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|status
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
block|}
name|request
operator|.
name|getAttribute
argument_list|(
literal|"javax.servlet.request.cipher_suite"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|"anythingwilldoreally"
argument_list|)
expr_stmt|;
name|request
operator|.
name|getAttribute
argument_list|(
literal|"javax.net.ssl.session"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|getAttribute
argument_list|(
literal|"javax.servlet.request.X509Certificate"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|decoupled
condition|)
block|{
name|setupDecoupledBackChannel
argument_list|()
expr_stmt|;
block|}
name|EasyMock
operator|.
name|replay
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupDecoupledBackChannel
parameter_list|()
throws|throws
name|IOException
block|{
name|decoupledBackChannel
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Conduit
operator|.
name|class
argument_list|)
expr_stmt|;
name|decoupledBackChannel
operator|.
name|setMessageObserver
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|MessageObserver
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|decoupledBackChannel
operator|.
name|prepare
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|decoupledBackChannel
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpInMessage
parameter_list|()
block|{
name|inMessage
operator|.
name|setExchange
argument_list|(
operator|new
name|ExchangeImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Message
name|setUpOutMessage
parameter_list|()
block|{
name|Message
name|outMsg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|outMsg
operator|.
name|putAll
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
name|outMsg
operator|.
name|setExchange
argument_list|(
operator|new
name|ExchangeImpl
argument_list|()
argument_list|)
expr_stmt|;
name|outMsg
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|outMsg
return|;
block|}
specifier|private
name|void
name|setUpResponseHeaders
parameter_list|(
name|Message
name|outMsg
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|responseHeaders
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|outMsg
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expected response headers"
argument_list|,
name|responseHeaders
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|challenges
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|challenges
operator|.
name|add
argument_list|(
name|BASIC_CHALLENGE
argument_list|)
expr_stmt|;
name|challenges
operator|.
name|add
argument_list|(
name|DIGEST_CHALLENGE
argument_list|)
expr_stmt|;
name|challenges
operator|.
name|add
argument_list|(
name|CUSTOM_CHALLENGE
argument_list|)
expr_stmt|;
name|responseHeaders
operator|.
name|put
argument_list|(
name|CHALLENGE_HEADER
argument_list|,
name|challenges
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyGetWSDLQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|reset
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|request
operator|.
name|getRequestURL
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"http://localhost/bar/foo"
argument_list|)
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|request
operator|.
name|getPathInfo
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|"/bar/foo"
argument_list|)
expr_stmt|;
name|request
operator|.
name|getCharacterEncoding
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|getQueryString
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|"wsdl"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/xml"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|response
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|os
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|request
operator|.
name|setHandled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bus
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyDoService
parameter_list|()
throws|throws
name|Exception
block|{
name|assertSame
argument_list|(
literal|"Default thread bus has not been set for request"
argument_list|,
name|bus
argument_list|,
name|threadDefaultBus
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"unexpected null message"
argument_list|,
name|inMessage
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"unexpected HTTP request"
argument_list|,
name|inMessage
operator|.
name|get
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_REQUEST
argument_list|)
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"unexpected HTTP response"
argument_list|,
name|inMessage
operator|.
name|get
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_RESPONSE
argument_list|)
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected method"
argument_list|,
name|inMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected path"
argument_list|,
name|inMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PATH_INFO
argument_list|)
argument_list|,
literal|"/bar/foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected query"
argument_list|,
name|inMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|QUERY_STRING
argument_list|)
argument_list|,
literal|"?name"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"unexpected query"
argument_list|,
name|inMessage
operator|.
name|get
argument_list|(
name|TLSSessionInfo
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyRequestHeaders
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyRequestHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|requestHeaders
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|inMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expected request headers"
argument_list|,
name|requestHeaders
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|requestHeaders
operator|.
name|get
argument_list|(
literal|"content-type"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expected field"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected values"
argument_list|,
literal|2
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected value"
argument_list|,
name|values
operator|.
name|contains
argument_list|(
literal|"text/xml"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected value"
argument_list|,
name|values
operator|.
name|contains
argument_list|(
literal|"charset=utf8"
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|=
name|requestHeaders
operator|.
name|get
argument_list|(
name|AUTH_HEADER
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"expected field"
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected values"
argument_list|,
literal|1
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected value"
argument_list|,
name|values
operator|.
name|contains
argument_list|(
name|BASIC_AUTH
argument_list|)
argument_list|)
expr_stmt|;
name|AuthorizationPolicy
name|authpolicy
init|=
name|inMessage
operator|.
name|get
argument_list|(
name|AuthorizationPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected some auth tokens"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected user"
argument_list|,
name|USER
argument_list|,
name|authpolicy
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected passwd"
argument_list|,
name|PASSWD
argument_list|,
name|authpolicy
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyResponseHeaders
parameter_list|(
name|Message
name|outMsg
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|responseHeaders
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|outMsg
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expected response headers"
argument_list|,
name|responseHeaders
argument_list|)
expr_stmt|;
comment|//REVISIT CHALLENGE_HEADER's mean
comment|/*assertEquals("expected addField",                      3,                      response.getAddFieldCallCount());         Enumeration e = response.getFieldValues(CHALLENGE_HEADER);         List<String> challenges = new ArrayList<>();         while (e.hasMoreElements()) {             challenges.add((String)e.nextElement());         }         assertTrue("expected challenge",                    challenges.contains(BASIC_CHALLENGE));         assertTrue("expected challenge",                    challenges.contains(DIGEST_CHALLENGE));         assertTrue("expected challenge",                    challenges.contains(CUSTOM_CHALLENGE));*/
block|}
specifier|private
name|void
name|verifyBackChannelSend
parameter_list|(
name|Conduit
name|backChannel
parameter_list|,
name|Message
name|outMsg
parameter_list|,
name|int
name|status
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyBackChannelSend
argument_list|(
name|backChannel
argument_list|,
name|outMsg
argument_list|,
name|status
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyBackChannelSend
parameter_list|(
name|Conduit
name|backChannel
parameter_list|,
name|Message
name|outMsg
parameter_list|,
name|int
name|status
parameter_list|,
name|boolean
name|oneway
parameter_list|)
throws|throws
name|Exception
block|{
name|outMsg
operator|.
name|getExchange
argument_list|()
operator|.
name|setOneWay
argument_list|(
name|oneway
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"unexpected back channel type"
argument_list|,
name|backChannel
operator|instanceof
name|JettyHTTPDestination
operator|.
name|BackChannelConduit
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"unexpected content formats"
argument_list|,
name|outMsg
operator|.
name|getContentFormats
argument_list|()
operator|.
name|contains
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|responseOS
init|=
name|outMsg
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expected output stream"
argument_list|,
name|responseOS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"unexpected output stream type"
argument_list|,
name|responseOS
operator|instanceof
name|AbstractWrappedOutputStream
argument_list|)
expr_stmt|;
name|outMsg
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|responseOS
operator|.
name|write
argument_list|(
name|PAYLOAD
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|setUpResponseHeaders
argument_list|(
name|outMsg
argument_list|)
expr_stmt|;
name|responseOS
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected status"
argument_list|,
name|status
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|/*if (status == 500) {             assertEquals("unexpected status message",                          "Internal Server Error",                          response.getReason());         }*/
name|verifyResponseHeaders
argument_list|(
name|outMsg
argument_list|)
expr_stmt|;
if|if
condition|(
name|oneway
condition|)
block|{
name|assertNull
argument_list|(
literal|"unexpected HTTP response"
argument_list|,
name|outMsg
operator|.
name|get
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_RESPONSE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
literal|"expected HTTP response"
argument_list|,
name|outMsg
operator|.
name|get
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_RESPONSE
argument_list|)
argument_list|)
expr_stmt|;
name|responseOS
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
name|EndpointReferenceType
name|getEPR
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|EndpointReferenceUtils
operator|.
name|getEndpointReference
argument_list|(
name|NOWHERE
operator|+
name|s
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|TestJettyDestination
extends|extends
name|JettyHTTPDestination
block|{
name|TestJettyDestination
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|DestinationRegistry
name|registry
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|,
name|JettyHTTPServerEngineFactory
name|serverEngineFactory
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|bus
argument_list|,
name|registry
argument_list|,
name|endpointInfo
argument_list|,
name|serverEngineFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Message
name|retrieveFromContinuation
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
return|return
name|super
operator|.
name|retrieveFromContinuation
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

