begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_undertow
package|;
end_package

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|io
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|server
operator|.
name|HttpServerExchange
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|servlet
operator|.
name|handlers
operator|.
name|ServletRequestContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|servlet
operator|.
name|spec
operator|.
name|HttpServletRequestImpl
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|servlet
operator|.
name|spec
operator|.
name|HttpServletResponseImpl
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|servlet
operator|.
name|spec
operator|.
name|ServletContextImpl
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|util
operator|.
name|Headers
import|;
end_import

begin_class
specifier|public
class|class
name|UndertowHTTPTestHandler
extends|extends
name|UndertowHTTPHandler
block|{
specifier|private
name|String
name|responseStr
decl_stmt|;
specifier|public
name|UndertowHTTPTestHandler
parameter_list|(
name|String
name|s
parameter_list|,
name|boolean
name|cmExact
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|cmExact
argument_list|)
expr_stmt|;
name|responseStr
operator|=
name|s
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleRequest
parameter_list|(
name|HttpServerExchange
name|undertowExchange
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|HttpServletResponseImpl
name|response
init|=
operator|new
name|HttpServletResponseImpl
argument_list|(
name|undertowExchange
argument_list|,
operator|(
name|ServletContextImpl
operator|)
name|servletContext
argument_list|)
decl_stmt|;
name|HttpServletRequestImpl
name|request
init|=
operator|new
name|HttpServletRequestImpl
argument_list|(
name|undertowExchange
argument_list|,
operator|(
name|ServletContextImpl
operator|)
name|servletContext
argument_list|)
decl_stmt|;
name|ServletRequestContext
name|servletRequestContext
init|=
operator|new
name|ServletRequestContext
argument_list|(
operator|(
operator|(
name|ServletContextImpl
operator|)
name|servletContext
operator|)
operator|.
name|getDeployment
argument_list|()
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|undertowExchange
operator|.
name|putAttachment
argument_list|(
name|ServletRequestContext
operator|.
name|ATTACHMENT_KEY
argument_list|,
name|servletRequestContext
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"HTTP_HANDLER"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"UNDERTOW_DESTINATION"
argument_list|,
name|undertowHTTPDestination
argument_list|)
expr_stmt|;
comment|// just return the response for testing
name|response
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|responseStr
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|undertowExchange
operator|.
name|isResponseChannelAvailable
argument_list|()
condition|)
block|{
name|undertowExchange
operator|.
name|setResponseCode
argument_list|(
literal|500
argument_list|)
expr_stmt|;
specifier|final
name|String
name|errorPage
init|=
literal|"<html><head><title>Error</title>"
operator|+
literal|"</head><body>Internal Error 500"
operator|+
name|t
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</body></html>"
decl_stmt|;
name|undertowExchange
operator|.
name|getResponseHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|Headers
operator|.
name|CONTENT_LENGTH
argument_list|,
literal|""
operator|+
name|errorPage
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|undertowExchange
operator|.
name|getResponseHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|Headers
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/html"
argument_list|)
expr_stmt|;
name|Sender
name|sender
init|=
name|undertowExchange
operator|.
name|getResponseSender
argument_list|()
decl_stmt|;
name|sender
operator|.
name|send
argument_list|(
name|errorPage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

