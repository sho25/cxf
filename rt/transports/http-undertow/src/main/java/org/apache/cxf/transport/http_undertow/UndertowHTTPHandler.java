begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_undertow
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|io
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|server
operator|.
name|HttpHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|server
operator|.
name|HttpServerExchange
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|server
operator|.
name|SSLSessionInfo
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|servlet
operator|.
name|handlers
operator|.
name|ServletRequestContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|servlet
operator|.
name|spec
operator|.
name|HttpServletRequestImpl
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|servlet
operator|.
name|spec
operator|.
name|HttpServletResponseImpl
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|servlet
operator|.
name|spec
operator|.
name|ServletContextImpl
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|util
operator|.
name|Headers
import|;
end_import

begin_class
specifier|public
class|class
name|UndertowHTTPHandler
implements|implements
name|HttpHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SSL_CIPHER_SUITE_ATTRIBUTE
init|=
literal|"javax.servlet.request.cipher_suite"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SSL_PEER_CERT_CHAIN_ATTRIBUTE
init|=
literal|"javax.servlet.request.X509Certificate"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|METHOD_TRACE
init|=
literal|"TRACE"
decl_stmt|;
specifier|protected
name|UndertowHTTPDestination
name|undertowHTTPDestination
decl_stmt|;
specifier|protected
name|ServletContext
name|servletContext
decl_stmt|;
specifier|private
name|boolean
name|contextMatchExact
decl_stmt|;
specifier|private
name|String
name|urlName
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|public
name|UndertowHTTPHandler
parameter_list|(
name|UndertowHTTPDestination
name|uhd
parameter_list|,
name|boolean
name|cmt
parameter_list|)
block|{
name|undertowHTTPDestination
operator|=
name|uhd
expr_stmt|;
name|this
operator|.
name|contextMatchExact
operator|=
name|cmt
expr_stmt|;
block|}
specifier|public
name|UndertowHTTPHandler
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
block|}
specifier|public
name|boolean
name|isContextMatchExact
parameter_list|()
block|{
return|return
name|this
operator|.
name|contextMatchExact
return|;
block|}
specifier|public
name|void
name|setServletContext
parameter_list|(
name|ServletContext
name|sc
parameter_list|)
block|{
name|servletContext
operator|=
name|sc
expr_stmt|;
if|if
condition|(
name|undertowHTTPDestination
operator|!=
literal|null
condition|)
block|{
name|undertowHTTPDestination
operator|.
name|setServletContext
argument_list|(
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ServletContext
name|getServletContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|servletContext
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|urlName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|urlName
return|;
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|undertowHTTPDestination
operator|!=
literal|null
condition|?
name|undertowHTTPDestination
operator|.
name|getBus
argument_list|()
else|:
name|bus
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleRequest
parameter_list|(
name|HttpServerExchange
name|undertowExchange
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
comment|// perform blocking operation on exchange
if|if
condition|(
name|undertowExchange
operator|.
name|isInIoThread
argument_list|()
condition|)
block|{
name|undertowExchange
operator|.
name|dispatch
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return;
block|}
name|HttpServletResponseImpl
name|response
init|=
operator|new
name|HttpServletResponseImpl
argument_list|(
name|undertowExchange
argument_list|,
operator|(
name|ServletContextImpl
operator|)
name|servletContext
argument_list|)
decl_stmt|;
name|HttpServletRequestImpl
name|request
init|=
operator|new
name|HttpServletRequestImpl
argument_list|(
name|undertowExchange
argument_list|,
operator|(
name|ServletContextImpl
operator|)
name|servletContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|equals
argument_list|(
name|METHOD_TRACE
argument_list|)
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_METHOD_NOT_ALLOWED
argument_list|)
expr_stmt|;
return|return;
block|}
name|ServletRequestContext
name|servletRequestContext
init|=
operator|new
name|ServletRequestContext
argument_list|(
operator|(
operator|(
name|ServletContextImpl
operator|)
name|servletContext
operator|)
operator|.
name|getDeployment
argument_list|()
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|undertowExchange
operator|.
name|putAttachment
argument_list|(
name|ServletRequestContext
operator|.
name|ATTACHMENT_KEY
argument_list|,
name|servletRequestContext
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"HTTP_HANDLER"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"UNDERTOW_DESTINATION"
argument_list|,
name|undertowHTTPDestination
argument_list|)
expr_stmt|;
name|SSLSessionInfo
name|ssl
init|=
name|undertowExchange
operator|.
name|getConnection
argument_list|()
operator|.
name|getSslSessionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|ssl
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|SSL_CIPHER_SUITE_ATTRIBUTE
argument_list|,
name|ssl
operator|.
name|getCipherSuite
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|SSL_PEER_CERT_CHAIN_ATTRIBUTE
argument_list|,
name|ssl
operator|.
name|getPeerCertificates
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// for some case won't have the peer certification
comment|// do nothing
block|}
block|}
name|undertowHTTPDestination
operator|.
name|doService
argument_list|(
name|servletContext
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|undertowExchange
operator|.
name|isResponseChannelAvailable
argument_list|()
condition|)
block|{
name|undertowExchange
operator|.
name|setStatusCode
argument_list|(
literal|500
argument_list|)
expr_stmt|;
specifier|final
name|String
name|errorPage
init|=
literal|"<html><head><title>Error</title>"
operator|+
literal|"</head><body>Internal Error 500"
operator|+
name|t
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</body></html>"
decl_stmt|;
name|undertowExchange
operator|.
name|getResponseHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|Headers
operator|.
name|CONTENT_LENGTH
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|errorPage
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|undertowExchange
operator|.
name|getResponseHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|Headers
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/html"
argument_list|)
expr_stmt|;
name|Sender
name|sender
init|=
name|undertowExchange
operator|.
name|getResponseSender
argument_list|()
decl_stmt|;
name|sender
operator|.
name|send
argument_list|(
name|errorPage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

