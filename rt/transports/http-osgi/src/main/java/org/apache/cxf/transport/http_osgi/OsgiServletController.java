begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|HttpHeaderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|AbstractHTTPDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|HTTPSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|https
operator|.
name|SSLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|servlet
operator|.
name|AbstractServletController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|QueryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|QueryHandlerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|http
operator|.
name|AddressType
import|;
end_import

begin_class
specifier|public
class|class
name|OsgiServletController
extends|extends
name|AbstractServletController
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|OsgiServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|lastBase
init|=
literal|""
decl_stmt|;
specifier|private
name|OsgiServlet
name|servlet
decl_stmt|;
specifier|public
name|OsgiServletController
parameter_list|(
name|OsgiServlet
name|servlet
parameter_list|)
block|{
name|super
argument_list|(
name|servlet
operator|.
name|getServletConfig
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|servlet
operator|=
name|servlet
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|updateDests
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|disableAddressUpdates
condition|)
block|{
return|return;
block|}
name|String
name|base
init|=
name|forcedBaseAddress
operator|==
literal|null
condition|?
name|getBaseURL
argument_list|(
name|request
argument_list|)
else|:
name|forcedBaseAddress
decl_stmt|;
comment|//if (base.equals(lastBase)) {
comment|//    return;
comment|//}
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|servlet
operator|.
name|getTransport
argument_list|()
operator|.
name|getDestinationsPaths
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|OsgiDestination
name|d2
init|=
name|servlet
operator|.
name|getTransport
argument_list|()
operator|.
name|getDestinationForPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|ad
init|=
name|d2
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|ad
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|||
name|ad
operator|.
name|equals
argument_list|(
name|lastBase
operator|+
name|path
argument_list|)
condition|)
block|{
name|d2
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|setAddress
argument_list|(
name|base
operator|+
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|d2
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getExtensor
argument_list|(
name|AddressType
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|d2
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getExtensor
argument_list|(
name|AddressType
operator|.
name|class
argument_list|)
operator|.
name|setLocation
argument_list|(
name|base
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|lastBase
operator|=
name|base
expr_stmt|;
block|}
specifier|public
name|void
name|invoke
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|ServletException
block|{
try|try
block|{
name|EndpointInfo
name|ei
init|=
operator|new
name|EndpointInfo
argument_list|()
decl_stmt|;
name|String
name|address
init|=
name|request
operator|.
name|getPathInfo
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|request
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
name|ei
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|OsgiDestination
name|d
init|=
operator|(
name|OsgiDestination
operator|)
name|servlet
operator|.
name|getTransport
argument_list|()
operator|.
name|getDestinationForPath
argument_list|(
name|ei
operator|.
name|getAddress
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|isHideServiceList
operator|&&
operator|(
name|request
operator|.
name|getRequestURI
argument_list|()
operator|.
name|endsWith
argument_list|(
name|serviceListRelativePath
argument_list|)
operator|||
name|request
operator|.
name|getRequestURI
argument_list|()
operator|.
name|endsWith
argument_list|(
name|serviceListRelativePath
operator|+
literal|"/"
argument_list|)
operator|)
operator|||
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|)
operator|||
literal|"/"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|)
condition|)
block|{
name|updateDests
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|generateServiceList
argument_list|(
name|request
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
name|checkRestfulRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
operator|||
name|d
operator|.
name|getMessageObserver
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Can't find the the request for "
operator|+
name|request
operator|.
name|getRequestURL
argument_list|()
operator|+
literal|"'s Observer "
argument_list|)
expr_stmt|;
name|generateNotFound
argument_list|(
name|request
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the request should be a restful service request
name|updateDests
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|invokeDestination
argument_list|(
name|request
argument_list|,
name|res
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|ei
operator|=
name|d
operator|.
name|getEndpointInfo
argument_list|()
expr_stmt|;
name|Bus
name|bus
init|=
name|d
operator|.
name|getBus
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|request
operator|.
name|getQueryString
argument_list|()
operator|&&
name|request
operator|.
name|getQueryString
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|bus
operator|.
name|getExtension
argument_list|(
name|QueryHandlerRegistry
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|ctxUri
init|=
name|request
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
name|String
name|baseUri
init|=
name|request
operator|.
name|getRequestURL
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"?"
operator|+
name|request
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
comment|// update the EndPoint Address with request url
if|if
condition|(
literal|"GET"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
name|updateDests
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|QueryHandler
name|qh
range|:
name|bus
operator|.
name|getExtension
argument_list|(
name|QueryHandlerRegistry
operator|.
name|class
argument_list|)
operator|.
name|getHandlers
argument_list|()
control|)
block|{
if|if
condition|(
name|qh
operator|.
name|isRecognizedQuery
argument_list|(
name|baseUri
argument_list|,
name|ctxUri
argument_list|,
name|ei
argument_list|)
condition|)
block|{
name|res
operator|.
name|setContentType
argument_list|(
name|qh
operator|.
name|getResponseContentType
argument_list|(
name|baseUri
argument_list|,
name|ctxUri
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
name|res
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|qh
operator|.
name|writeResponse
argument_list|(
name|baseUri
argument_list|,
name|ctxUri
argument_list|,
name|ei
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
name|qh
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" Exception caught writing response: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|invokeDestination
argument_list|(
name|request
argument_list|,
name|res
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|OsgiDestination
name|checkRestfulRequest
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|address
init|=
name|request
operator|.
name|getPathInfo
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|request
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|servlet
operator|.
name|getTransport
argument_list|()
operator|.
name|getDestinationsPaths
argument_list|()
control|)
block|{
if|if
condition|(
name|address
operator|.
name|startsWith
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|servlet
operator|.
name|getTransport
argument_list|()
operator|.
name|getDestinationForPath
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|generateServiceList
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html; charset=UTF-8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" "
operator|+
literal|"\"http://www.w3.org/TR/html4/loose.dtd\">"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<HTML><HEAD>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|serviceListStyleSheet
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<LINK type=\"text/css\" rel=\"stylesheet\" href=\""
operator|+
name|request
operator|.
name|getContextPath
argument_list|()
operator|+
literal|"/"
operator|+
name|serviceListStyleSheet
operator|+
literal|"\">"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<LINK type=\"text/css\" rel=\"stylesheet\" href=\""
operator|+
name|request
operator|.
name|getRequestURI
argument_list|()
operator|+
literal|"/?stylesheet=1\">"
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<meta http-equiv=content-type content=\"text/html; charset=UTF-8\">"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<title>CXF - Service list</title>"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"</head><body>"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|OsgiDestination
argument_list|>
name|destinations
init|=
name|servlet
operator|.
name|getTransport
argument_list|()
operator|.
name|getDestinations
argument_list|()
decl_stmt|;
if|if
condition|(
name|destinations
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writeSOAPEndpoints
argument_list|(
name|response
argument_list|,
name|destinations
argument_list|)
expr_stmt|;
name|writeRESTfulEndpoints
argument_list|(
name|response
argument_list|,
name|destinations
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<span class=\"heading\">No services have been found.</span>"
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"</body></html>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeSOAPEndpoints
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|Collection
argument_list|<
name|OsgiDestination
argument_list|>
name|destinations
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<span class=\"heading\">Available SOAP services:</span><br/>"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<table "
operator|+
operator|(
name|serviceListStyleSheet
operator|==
literal|null
condition|?
literal|"cellpadding=\"1\" cellspacing=\"1\" border=\"1\" width=\"100%\""
else|:
literal|""
operator|)
operator|+
literal|">"
argument_list|)
expr_stmt|;
for|for
control|(
name|OsgiDestination
name|sd
range|:
name|destinations
control|)
block|{
if|if
condition|(
literal|null
operator|!=
name|sd
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|&&
literal|null
operator|!=
name|sd
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getInterface
argument_list|()
condition|)
block|{
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<tr><td>"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<span class=\"porttypename\">"
operator|+
name|sd
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"</span>"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<ul>"
argument_list|)
expr_stmt|;
for|for
control|(
name|OperationInfo
name|oi
range|:
name|sd
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<li>"
operator|+
name|oi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"</li>"
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"</ul>"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"</td><td>"
argument_list|)
expr_stmt|;
name|String
name|address
init|=
name|sd
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<span class=\"field\">Endpoint address:</span> "
operator|+
literal|"<span class=\"value\">"
operator|+
name|address
operator|+
literal|"</span>"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<br/><span class=\"field\">WSDL :</span> "
operator|+
literal|"<a href=\""
operator|+
name|address
operator|+
literal|"?wsdl\">"
operator|+
name|sd
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"</a>"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<br/><span class=\"field\">Target namespace:</span> "
operator|+
literal|"<span class=\"value\">"
operator|+
name|sd
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getTargetNamespace
argument_list|()
operator|+
literal|"</span>"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"</table><br/><br/>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeRESTfulEndpoints
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|Collection
argument_list|<
name|OsgiDestination
argument_list|>
name|destinations
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|OsgiDestination
argument_list|>
name|restfulDests
init|=
operator|new
name|ArrayList
argument_list|<
name|OsgiDestination
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OsgiDestination
name|sd
range|:
name|destinations
control|)
block|{
comment|// use some more reasonable check - though this one seems to be the only option at the moment
if|if
condition|(
literal|null
operator|==
name|sd
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getInterface
argument_list|()
condition|)
block|{
name|restfulDests
operator|.
name|add
argument_list|(
name|sd
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|restfulDests
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<span class=\"heading\">Available RESTful services:</span><br/>"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<table "
operator|+
operator|(
name|serviceListStyleSheet
operator|==
literal|null
condition|?
literal|"cellpadding=\"1\" cellspacing=\"1\" border=\"1\" width=\"100%\""
else|:
literal|""
operator|)
operator|+
literal|">"
argument_list|)
expr_stmt|;
for|for
control|(
name|OsgiDestination
name|sd
range|:
name|destinations
control|)
block|{
if|if
condition|(
literal|null
operator|==
name|sd
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getInterface
argument_list|()
condition|)
block|{
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<tr><td>"
argument_list|)
expr_stmt|;
name|String
name|address
init|=
name|sd
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<span class=\"field\">Endpoint address:</span> "
operator|+
literal|"<span class=\"value\">"
operator|+
name|address
operator|+
literal|"</span>"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<br/><span class=\"field\">WADL :</span> "
operator|+
literal|"<a href=\""
operator|+
name|address
operator|+
literal|"?_wadl&_type=xml\">"
operator|+
name|address
operator|+
literal|"?_wadl&type=xml"
operator|+
literal|"</a>"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"</td></tr>"
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|generateNotFound
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|IOException
block|{
name|res
operator|.
name|setStatus
argument_list|(
literal|404
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|res
operator|.
name|getWriter
argument_list|()
operator|.
name|write
argument_list|(
literal|"<html><body>No service was found.</body></html>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|invokeDestination
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|OsgiDestination
name|d
parameter_list|)
throws|throws
name|ServletException
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Service http request on thread: "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|MessageImpl
name|inMessage
init|=
name|servlet
operator|.
name|createInMessage
argument_list|()
decl_stmt|;
name|inMessage
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_REQUEST
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_RESPONSE
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_CONTEXT
argument_list|,
name|servletConfig
operator|==
literal|null
condition|?
literal|null
else|:
name|servletConfig
operator|.
name|getServletContext
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_CONFIG
argument_list|,
name|servletConfig
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PATH_INFO
argument_list|,
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|QUERY_STRING
argument_list|,
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|request
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|,
name|request
operator|.
name|getHeader
argument_list|(
literal|"Accept"
argument_list|)
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|BASE_PATH
argument_list|,
name|d
operator|.
name|getAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
operator|new
name|SecurityContext
argument_list|()
block|{
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
name|request
operator|.
name|getUserPrincipal
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
return|return
name|request
operator|.
name|isUserInRole
argument_list|(
name|role
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// work around a bug with Jetty which results in the character
comment|// encoding not being trimmed correctly.
name|String
name|enc
init|=
name|request
operator|.
name|getCharacterEncoding
argument_list|()
decl_stmt|;
if|if
condition|(
name|enc
operator|!=
literal|null
operator|&&
name|enc
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|enc
operator|=
name|enc
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|enc
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|normalizedEncoding
init|=
name|HttpHeaderHelper
operator|.
name|mapCharset
argument_list|(
name|enc
argument_list|)
decl_stmt|;
if|if
condition|(
name|normalizedEncoding
operator|==
literal|null
condition|)
block|{
name|String
name|m
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"INVALID_ENCODING_MSG"
argument_list|,
name|LOG
argument_list|,
name|enc
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|m
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|m
argument_list|)
throw|;
block|}
name|inMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENCODING
argument_list|,
name|normalizedEncoding
argument_list|)
expr_stmt|;
name|SSLUtils
operator|.
name|propogateSecureSession
argument_list|(
name|request
argument_list|,
name|inMessage
argument_list|)
expr_stmt|;
name|ExchangeImpl
name|exchange
init|=
name|servlet
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setInMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setSession
argument_list|(
operator|new
name|HTTPSession
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|doMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

