begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_class
specifier|public
class|class
name|OsgiDestinationRegistry
implements|implements
name|OsgiDestinationRegistryIntf
block|{
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|OsgiDestination
argument_list|>
name|destinations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|OsgiDestination
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|OsgiDestinationRegistry
parameter_list|()
block|{     }
specifier|public
name|void
name|addDestination
parameter_list|(
name|String
name|path
parameter_list|,
name|OsgiDestination
name|destination
parameter_list|)
block|{
name|String
name|p
init|=
name|getTrimmedPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|destinations
operator|.
name|putIfAbsent
argument_list|(
name|p
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeDestination
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|destinations
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OsgiDestination
name|getDestinationForPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// to use the url context match
return|return
name|destinations
operator|.
name|get
argument_list|(
name|getTrimmedPath
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|OsgiDestination
argument_list|>
name|getDestinations
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|destinations
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getDestinationsPaths
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|destinations
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|String
name|getTrimmedPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|"/"
return|;
block|}
specifier|final
name|String
name|lh
init|=
literal|"http://localhost/"
decl_stmt|;
specifier|final
name|String
name|lhs
init|=
literal|"https://localhost/"
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|lh
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|lh
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|lhs
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|lhs
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
block|}
end_class

end_unit

