begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|AbstractHTTPDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|HTTPSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|QueryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transports
operator|.
name|http
operator|.
name|QueryHandlerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|http
operator|.
name|AddressType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|OsgiServletTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ADDRESS
init|=
literal|"http://bar/snafu"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ROOT
init|=
literal|"http://localhost:8080/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|QNAME
init|=
operator|new
name|QName
argument_list|(
name|ADDRESS
argument_list|,
literal|"foobar"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PATH
init|=
literal|"/SoapContext/SoapPort"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URI
init|=
literal|"/cxf"
operator|+
name|PATH
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SERVICES
init|=
literal|"/cxf/services"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUERY
init|=
literal|"wsdl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERB
init|=
literal|"POST"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT
init|=
literal|"text/html"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT_LIST
init|=
literal|"text/html; charset=UTF-8"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML
init|=
literal|"text/xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENCODING
init|=
literal|"UTF-8"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NO_SERVICE
init|=
literal|"<html><body>No service was found.</body></html>"
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|OsgiDestinationRegistryIntf
name|registry
decl_stmt|;
specifier|private
name|OsgiDestination
name|destination
decl_stmt|;
specifier|private
name|ServletConfig
name|config
decl_stmt|;
specifier|private
name|ServletContext
name|context
decl_stmt|;
specifier|private
name|HttpServletRequest
name|request
decl_stmt|;
specifier|private
name|HttpServletResponse
name|response
decl_stmt|;
specifier|private
name|MessageImpl
name|message
decl_stmt|;
specifier|private
name|MessageObserver
name|observer
decl_stmt|;
specifier|private
name|AddressType
name|extensor
decl_stmt|;
specifier|private
name|ExchangeImpl
name|exchange
decl_stmt|;
specifier|private
name|EndpointInfo
name|endpoint
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|paths
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|bus
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
expr_stmt|;
name|registry
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|OsgiDestinationRegistryIntf
operator|.
name|class
argument_list|)
expr_stmt|;
name|destination
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|OsgiDestination
operator|.
name|class
argument_list|)
expr_stmt|;
name|context
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|ServletContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|config
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|ServletConfig
operator|.
name|class
argument_list|)
expr_stmt|;
name|request
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|response
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|message
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|MessageImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|exchange
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|ExchangeImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|observer
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|MessageObserver
operator|.
name|class
argument_list|)
expr_stmt|;
name|extensor
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|AddressType
operator|.
name|class
argument_list|)
expr_stmt|;
name|endpoint
operator|=
operator|new
name|EndpointInfo
argument_list|()
expr_stmt|;
name|endpoint
operator|.
name|setAddress
argument_list|(
name|ADDRESS
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setName
argument_list|(
name|QNAME
argument_list|)
expr_stmt|;
name|ServiceInfo
name|service
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|service
operator|.
name|setInterface
argument_list|(
operator|new
name|InterfaceInfo
argument_list|(
name|service
argument_list|,
name|QNAME
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setService
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|paths
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|bus
operator|=
literal|null
expr_stmt|;
name|registry
operator|=
literal|null
expr_stmt|;
name|destination
operator|=
literal|null
expr_stmt|;
name|context
operator|=
literal|null
expr_stmt|;
name|config
operator|=
literal|null
expr_stmt|;
name|request
operator|=
literal|null
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
name|message
operator|=
literal|null
expr_stmt|;
name|exchange
operator|=
literal|null
expr_stmt|;
name|destination
operator|=
literal|null
expr_stmt|;
name|exchange
operator|=
literal|null
expr_stmt|;
name|observer
operator|=
literal|null
expr_stmt|;
name|extensor
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvokeNoDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpRequest
argument_list|(
name|URI
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setUpResponse
argument_list|(
literal|404
argument_list|,
name|TEXT
argument_list|,
name|NO_SERVICE
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|OsgiServlet
name|servlet
init|=
name|setUpServlet
argument_list|()
decl_stmt|;
name|servlet
operator|.
name|invoke
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvokeGetServices
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpRequest
argument_list|(
name|SERVICES
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setUpResponse
argument_list|(
literal|0
argument_list|,
name|TEXT_LIST
argument_list|,
literal|"<span class=\"field\">Endpoint address:</span> "
operator|+
literal|"<span class=\"value\">"
operator|+
name|ADDRESS
operator|+
literal|"</span>"
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|OsgiServlet
name|servlet
init|=
name|setUpServlet
argument_list|()
decl_stmt|;
name|servlet
operator|.
name|invoke
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvokeGetServicesNoService
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpRequest
argument_list|(
name|SERVICES
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|setUpResponse
argument_list|(
literal|0
argument_list|,
name|TEXT_LIST
argument_list|,
literal|"<span class=\"heading\">No services have been found.</span>"
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|OsgiServlet
name|servlet
init|=
name|setUpServlet
argument_list|()
decl_stmt|;
name|servlet
operator|.
name|invoke
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvokeWsdlQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpRequest
argument_list|(
name|URI
argument_list|,
name|PATH
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|setUpQuery
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|OsgiServlet
name|servlet
init|=
name|setUpServlet
argument_list|()
decl_stmt|;
name|servlet
operator|.
name|invoke
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvokeDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpRequest
argument_list|(
name|URI
argument_list|,
name|PATH
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|setUpMessage
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|OsgiServlet
name|servlet
init|=
name|setUpServlet
argument_list|()
decl_stmt|;
name|servlet
operator|.
name|invoke
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvokeRestful
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpRequest
argument_list|(
name|URI
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setUpRestful
argument_list|()
expr_stmt|;
name|setUpMessage
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|OsgiServlet
name|servlet
init|=
name|setUpServlet
argument_list|()
decl_stmt|;
name|servlet
operator|.
name|invoke
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setUpRequest
parameter_list|(
name|String
name|requestURI
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|destinationCount
parameter_list|)
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|requestURI
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|StringBuffer
name|url
init|=
operator|new
name|StringBuffer
argument_list|(
name|ROOT
operator|+
name|requestURI
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getRequestURL
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|url
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|QUERY
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destination
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destination
operator|.
name|getBus
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bus
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|path
operator|!=
literal|null
condition|?
name|path
else|:
name|ADDRESS
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|registry
operator|.
name|getDestinationForPath
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|destinationCount
operator|==
operator|-
literal|1
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|registry
operator|.
name|getDestinationsPaths
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|paths
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|destinationCount
operator|>=
literal|0
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|registry
operator|.
name|getDestinationsPaths
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OsgiDestination
argument_list|>
name|destinations
init|=
operator|new
name|ArrayList
argument_list|<
name|OsgiDestination
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|destinationCount
condition|;
name|i
operator|++
control|)
block|{
name|destinations
operator|.
name|add
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|expect
argument_list|(
name|registry
operator|.
name|getDestinations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destinations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setUpMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|ServletInputStream
name|sis
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServletInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sis
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|same
argument_list|(
name|sis
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|setUpProperty
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_REQUEST
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|setUpProperty
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_RESPONSE
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|setUpProperty
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_CONTEXT
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|setUpProperty
argument_list|(
name|AbstractHTTPDestination
operator|.
name|HTTP_CONFIG
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|VERB
argument_list|)
expr_stmt|;
name|setUpProperty
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
name|VERB
argument_list|)
expr_stmt|;
name|setUpProperty
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|,
name|URI
argument_list|)
expr_stmt|;
name|setUpProperty
argument_list|(
name|Message
operator|.
name|QUERY_STRING
argument_list|,
name|QUERY
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|XML
argument_list|)
expr_stmt|;
name|setUpProperty
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|XML
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getHeader
argument_list|(
literal|"Accept"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|XML
argument_list|)
expr_stmt|;
name|setUpProperty
argument_list|(
name|Message
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|,
name|XML
argument_list|)
expr_stmt|;
name|destination
operator|.
name|getAddress
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|EndpointReferenceUtils
operator|.
name|getEndpointReference
argument_list|(
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
name|setUpProperty
argument_list|(
name|Message
operator|.
name|BASE_PATH
argument_list|,
name|PATH
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|request
operator|.
name|getCharacterEncoding
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ENCODING
argument_list|)
expr_stmt|;
name|setUpProperty
argument_list|(
name|Message
operator|.
name|ENCODING
argument_list|,
name|ENCODING
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setSession
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|HTTPSession
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setUpProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|message
operator|.
name|put
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|name
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|same
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setUpResponse
parameter_list|(
name|int
name|status
parameter_list|,
name|String
name|responseType
parameter_list|,
name|String
modifier|...
name|responseMsgs
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|status
operator|!=
literal|0
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|responseType
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|responseType
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|responseMsgs
operator|!=
literal|null
condition|)
block|{
name|PrintWriter
name|writer
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PrintWriter
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|writer
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|msg
range|:
name|responseMsgs
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setUpQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryHandlerRegistry
name|qrh
init|=
name|control
operator|.
name|createMock
argument_list|(
name|QueryHandlerRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|QueryHandlerRegistry
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|qrh
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|QueryHandler
name|qh
init|=
name|control
operator|.
name|createMock
argument_list|(
name|QueryHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QueryHandler
argument_list|>
name|handlers
init|=
operator|new
name|ArrayList
argument_list|<
name|QueryHandler
argument_list|>
argument_list|()
decl_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|qh
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|qrh
operator|.
name|getHandlers
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|handlers
argument_list|)
expr_stmt|;
name|String
name|base
init|=
name|ROOT
operator|+
name|URI
operator|+
literal|"?"
operator|+
name|QUERY
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|qh
operator|.
name|isRecognizedQuery
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|base
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
name|PATH
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|same
argument_list|(
name|endpoint
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|qh
operator|.
name|getResponseContentType
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|base
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
name|PATH
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|XML
argument_list|)
expr_stmt|;
name|ServletOutputStream
name|sos
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServletOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sos
argument_list|)
expr_stmt|;
name|qh
operator|.
name|writeResponse
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|base
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
name|PATH
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|same
argument_list|(
name|endpoint
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|same
argument_list|(
name|sos
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|sos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setUpRestful
parameter_list|()
block|{
name|paths
operator|.
name|add
argument_list|(
name|ADDRESS
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|registry
operator|.
name|getDestinationForPath
argument_list|(
name|ADDRESS
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|registry
operator|.
name|getDestinationForPath
argument_list|(
name|ADDRESS
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destination
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destination
operator|.
name|getMessageObserver
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|observer
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|addExtensor
argument_list|(
name|extensor
argument_list|)
expr_stmt|;
name|extensor
operator|.
name|setLocation
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|ROOT
operator|+
literal|"/cxf/Soap"
operator|+
name|ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
block|}
specifier|private
name|OsgiServlet
name|setUpServlet
parameter_list|()
block|{
name|OsgiServlet
name|servlet
init|=
operator|new
name|OsgiServlet
argument_list|(
name|registry
argument_list|)
block|{
specifier|public
name|ServletContext
name|getServletContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
specifier|public
name|ServletConfig
name|getServletConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
specifier|protected
name|MessageImpl
name|createInMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
specifier|protected
name|ExchangeImpl
name|createExchange
parameter_list|()
block|{
return|return
name|exchange
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|servlet
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
return|return
name|servlet
return|;
block|}
block|}
end_class

end_unit

