begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http_osgi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|DestinationRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|OsgiDestinationTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ADDRESS
init|=
literal|"http://bar/snafu"
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|DestinationRegistry
name|registry
decl_stmt|;
specifier|private
name|EndpointInfo
name|endpoint
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|bus
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
expr_stmt|;
name|registry
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
name|endpoint
operator|=
operator|new
name|EndpointInfo
argument_list|()
expr_stmt|;
name|endpoint
operator|.
name|setAddress
argument_list|(
name|ADDRESS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|bus
operator|=
literal|null
expr_stmt|;
name|registry
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCtor
parameter_list|()
throws|throws
name|Exception
block|{
name|OsgiDestination
name|destination
init|=
operator|new
name|OsgiDestination
argument_list|(
name|bus
argument_list|,
name|endpoint
argument_list|,
name|registry
argument_list|,
literal|"snafu"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|destination
operator|.
name|getMessageObserver
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|destination
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|destination
operator|.
name|getAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ADDRESS
argument_list|,
name|destination
operator|.
name|getAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|registry
operator|.
name|removeDestination
argument_list|(
literal|"snafu"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|OsgiDestination
name|destination
init|=
operator|new
name|OsgiDestination
argument_list|(
name|bus
argument_list|,
name|endpoint
argument_list|,
name|registry
argument_list|,
literal|"snafu"
argument_list|)
decl_stmt|;
name|destination
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

