begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|udp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|buffer
operator|.
name|IoBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|future
operator|.
name|WriteFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IoSession
import|;
end_import

begin_class
class|class
name|IoSessionOutputStream
extends|extends
name|OutputStream
block|{
specifier|private
specifier|final
name|IoSession
name|session
decl_stmt|;
specifier|private
name|WriteFuture
name|lastWriteFuture
decl_stmt|;
name|IoSessionOutputStream
parameter_list|(
name|IoSession
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|close
argument_list|(
literal|true
argument_list|)
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkClosed
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|session
operator|.
name|isConnected
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The session has been closed."
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|write
parameter_list|(
name|IoBuffer
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|WriteFuture
name|future
init|=
name|session
operator|.
name|write
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|lastWriteFuture
operator|=
name|future
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|IoBuffer
operator|.
name|wrap
argument_list|(
name|b
operator|.
name|clone
argument_list|()
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|IoBuffer
name|buf
init|=
name|IoBuffer
operator|.
name|allocate
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|buf
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|b
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|lastWriteFuture
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|lastWriteFuture
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|lastWriteFuture
operator|.
name|isWritten
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The bytes could not be written to the session"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

