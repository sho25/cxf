begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|udp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|buffer
operator|.
name|IoBuffer
import|;
end_import

begin_class
specifier|public
class|class
name|IoSessionInputStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|volatile
name|IoBuffer
name|buf
decl_stmt|;
specifier|private
specifier|volatile
name|IOException
name|exception
decl_stmt|;
specifier|public
name|IoSessionInputStream
parameter_list|(
name|IoBuffer
name|b
parameter_list|)
block|{
name|buf
operator|=
name|IoBuffer
operator|.
name|allocate
argument_list|(
name|b
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
specifier|public
name|IoSessionInputStream
parameter_list|()
block|{
name|buf
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
if|if
condition|(
name|buf
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|buf
operator|.
name|remaining
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|waitForData
argument_list|()
expr_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
return|return
name|buf
operator|.
name|get
argument_list|()
operator|&
literal|0xff
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|waitForData
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|exception
operator|==
literal|null
operator|&&
name|buf
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|waitForData
argument_list|()
expr_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
if|if
condition|(
name|buf
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|readBytes
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|buf
operator|.
name|remaining
argument_list|()
condition|)
block|{
name|readBytes
operator|=
name|buf
operator|.
name|remaining
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|readBytes
operator|=
name|len
expr_stmt|;
block|}
name|buf
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|readBytes
argument_list|)
expr_stmt|;
return|return
name|readBytes
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|throwException
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|exception
operator|==
literal|null
condition|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|setBuffer
parameter_list|(
name|IoBuffer
name|b
parameter_list|)
block|{
name|buf
operator|=
name|IoBuffer
operator|.
name|allocate
argument_list|(
name|b
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|buf
operator|.
name|flip
argument_list|()
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

