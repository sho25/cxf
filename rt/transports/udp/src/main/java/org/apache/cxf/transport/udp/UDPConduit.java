begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|udp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|AbstractConduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|WorkQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|WorkQueueManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|buffer
operator|.
name|IoBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|future
operator|.
name|ConnectFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|service
operator|.
name|IoHandlerAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IoSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|transport
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioDatagramConnector
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|UDPConduit
extends|extends
name|AbstractConduit
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CXF_MESSAGE_ATTR
init|=
literal|"CXFMessage"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HOST_PORT
init|=
name|UDPConduit
operator|.
name|class
operator|+
literal|".host:port"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|UDPDestination
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bus
name|bus
decl_stmt|;
name|NioDatagramConnector
name|connector
init|=
operator|new
name|NioDatagramConnector
argument_list|()
decl_stmt|;
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Queue
argument_list|<
name|ConnectFuture
argument_list|>
argument_list|>
name|connections
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Queue
argument_list|<
name|ConnectFuture
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|UDPConduit
parameter_list|(
name|EndpointReferenceType
name|t
parameter_list|,
specifier|final
name|Bus
name|bus
parameter_list|)
block|{
name|super
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
name|connector
operator|.
name|setHandler
argument_list|(
operator|new
name|IoHandlerAdapter
argument_list|()
block|{
specifier|public
name|void
name|messageReceived
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|Object
name|buf
parameter_list|)
block|{
name|Message
name|message
init|=
operator|(
name|Message
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
name|CXF_MESSAGE_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
specifier|final
name|Message
name|inMessage
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|inMessage
operator|.
name|setExchange
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|setInMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
name|IoSessionInputStream
name|ins
init|=
operator|new
name|IoSessionInputStream
argument_list|()
decl_stmt|;
name|ins
operator|.
name|write
argument_list|(
operator|(
name|IoBuffer
operator|)
name|buf
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|ins
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|IoSessionInputStream
operator|.
name|class
argument_list|,
name|ins
argument_list|)
expr_stmt|;
name|WorkQueueManager
name|queuem
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|WorkQueueManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|WorkQueue
name|queue
init|=
name|queuem
operator|.
name|getNamedWorkQueue
argument_list|(
literal|"udp-conduit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|queue
operator|=
name|queuem
operator|.
name|getAutomaticWorkQueue
argument_list|()
expr_stmt|;
block|}
name|queue
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|incomingObserver
operator|.
name|onMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IoSessionInputStream
name|ins
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|.
name|get
argument_list|(
name|IoSessionInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|ins
operator|.
name|write
argument_list|(
operator|(
name|IoBuffer
operator|)
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|(
name|Message
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|isOneWay
argument_list|()
operator|||
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|==
name|msg
operator|||
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|getInFaultMessage
argument_list|()
operator|==
name|msg
condition|)
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|HOST_PORT
argument_list|)
decl_stmt|;
name|ConnectFuture
name|c
init|=
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|ConnectFuture
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
name|CXF_MESSAGE_ATTR
argument_list|)
expr_stmt|;
name|Queue
argument_list|<
name|ConnectFuture
argument_list|>
name|q
init|=
name|connections
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
block|{
name|connections
operator|.
name|putIfAbsent
argument_list|(
name|s
argument_list|,
operator|new
name|ArrayBlockingQueue
argument_list|<
name|ConnectFuture
argument_list|>
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
name|connections
operator|.
name|get
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|q
operator|.
name|offer
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|c
operator|.
name|getSession
argument_list|()
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|Queue
argument_list|<
name|ConnectFuture
argument_list|>
name|f
range|:
name|connections
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ConnectFuture
name|cf
range|:
name|f
control|)
block|{
name|cf
operator|.
name|getSession
argument_list|()
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|connections
operator|.
name|clear
argument_list|()
expr_stmt|;
name|connector
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|connector
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|prepare
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
name|address
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|address
argument_list|)
condition|)
block|{
name|address
operator|=
name|this
operator|.
name|getTarget
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|isa
init|=
literal|null
decl_stmt|;
name|String
name|hp
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
name|isa
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|hp
operator|=
literal|":"
operator|+
name|uri
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|isa
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|,
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|hp
operator|=
name|uri
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|uri
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
name|Queue
argument_list|<
name|ConnectFuture
argument_list|>
name|q
init|=
name|connections
operator|.
name|get
argument_list|(
name|hp
argument_list|)
decl_stmt|;
name|ConnectFuture
name|connFuture
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|connFuture
operator|=
name|q
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connFuture
operator|==
literal|null
condition|)
block|{
name|connFuture
operator|=
name|connector
operator|.
name|connect
argument_list|(
name|isa
argument_list|)
expr_stmt|;
name|connFuture
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|connFuture
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|CXF_MESSAGE_ATTR
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
operator|new
name|UDPConduitOutputStream
argument_list|(
name|connector
argument_list|,
name|connFuture
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|ConnectFuture
operator|.
name|class
argument_list|,
name|connFuture
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|HOST_PORT
argument_list|,
name|uri
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
class|class
name|UDPConduitOutputStream
extends|extends
name|OutputStream
block|{
specifier|final
name|ConnectFuture
name|future
decl_stmt|;
specifier|final
name|NioDatagramConnector
name|connector
decl_stmt|;
specifier|final
name|IoBuffer
name|buffer
init|=
name|IoBuffer
operator|.
name|allocate
argument_list|(
literal|64
operator|*
literal|1024
argument_list|)
decl_stmt|;
comment|//max size
specifier|final
name|Message
name|message
decl_stmt|;
name|boolean
name|closed
decl_stmt|;
specifier|public
name|UDPConduitOutputStream
parameter_list|(
name|NioDatagramConnector
name|connector
parameter_list|,
name|ConnectFuture
name|connFuture
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|this
operator|.
name|connector
operator|=
name|connector
expr_stmt|;
name|this
operator|.
name|future
operator|=
name|connFuture
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|m
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|buffer
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|buffer
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
name|closed
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|future
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|future
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|future
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|future
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|future
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|future
operator|.
name|getSession
argument_list|()
operator|.
name|write
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
name|future
operator|.
name|getSession
argument_list|()
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
block|}
end_class

end_unit

