begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|udp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|UDPTransportTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PORT
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
name|UDPTransportTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Server
name|server
decl_stmt|;
specifier|static
class|class
name|GreeterImpl
implements|implements
name|Greeter
block|{
specifier|private
name|String
name|myName
init|=
literal|"defaultGreeter"
decl_stmt|;
specifier|public
name|String
name|greetMe
parameter_list|(
name|String
name|me
parameter_list|)
block|{
return|return
literal|"Hello "
operator|+
name|me
return|;
block|}
specifier|public
name|String
name|sayHi
parameter_list|()
block|{
return|return
literal|"Bonjour from "
operator|+
name|myName
return|;
block|}
specifier|public
name|void
name|pingMe
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|JaxWsServerFactoryBean
name|factory
init|=
operator|new
name|JaxWsServerFactoryBean
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setAddress
argument_list|(
literal|"udp://:"
operator|+
name|PORT
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setServiceClass
argument_list|(
name|Greeter
operator|.
name|class
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setServiceBean
argument_list|(
operator|new
name|GreeterImpl
argument_list|()
argument_list|)
expr_stmt|;
comment|// factory.setFeatures(Collections.singletonList(new LoggingFeature()));
name|server
operator|=
name|factory
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleUDP
parameter_list|()
throws|throws
name|Exception
block|{
name|JaxWsProxyFactoryBean
name|fact
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
name|fact
operator|.
name|setAddress
argument_list|(
literal|"udp://localhost:"
operator|+
name|PORT
argument_list|)
expr_stmt|;
name|Greeter
name|g
init|=
name|fact
operator|.
name|create
argument_list|(
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|5
condition|;
name|x
operator|++
control|)
block|{
specifier|final
name|String
name|message
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|g
operator|.
name|greetMe
argument_list|(
name|message
argument_list|)
operator|.
name|endsWith
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|g
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBroadcastUDP
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Disable the test on Redhat Enterprise Linux which doesn't enable the UDP broadcast by default
if|if
condition|(
literal|"Linux"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
argument_list|)
operator|&&
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"os.version"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"el"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Skipping broadcast test for REL"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Enumeration
argument_list|<
name|NetworkInterface
argument_list|>
name|interfaces
init|=
name|NetworkInterface
operator|.
name|getNetworkInterfaces
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|interfaces
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|NetworkInterface
name|networkInterface
init|=
name|interfaces
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|networkInterface
operator|.
name|isUp
argument_list|()
operator|||
name|networkInterface
operator|.
name|isLoopback
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
comment|//no non-loopbacks, cannot do broadcasts
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Skipping broadcast test"
argument_list|)
expr_stmt|;
return|return;
block|}
name|JaxWsProxyFactoryBean
name|fact
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
name|fact
operator|.
name|setAddress
argument_list|(
literal|"udp://:"
operator|+
name|PORT
operator|+
literal|"/foo"
argument_list|)
expr_stmt|;
name|Greeter
name|g
init|=
name|fact
operator|.
name|create
argument_list|(
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|g
operator|.
name|greetMe
argument_list|(
literal|"World"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|g
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLargeRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|JaxWsProxyFactoryBean
name|fact
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
name|fact
operator|.
name|setAddress
argument_list|(
literal|"udp://localhost:"
operator|+
name|PORT
argument_list|)
expr_stmt|;
name|Greeter
name|g
init|=
name|fact
operator|.
name|create
argument_list|(
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|100000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|6500
condition|;
name|x
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"Hello "
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Hello "
operator|+
name|b
operator|.
name|toString
argument_list|()
argument_list|,
name|g
operator|.
name|greetMe
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|Closeable
operator|)
name|g
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|JaxWsProxyFactoryBean
name|fact
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
name|fact
operator|.
name|setAddress
argument_list|(
literal|"udp://localhost:"
operator|+
name|PORT
argument_list|)
expr_stmt|;
name|Greeter
name|g
init|=
name|fact
operator|.
name|create
argument_list|(
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
name|g
operator|.
name|pingMe
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

