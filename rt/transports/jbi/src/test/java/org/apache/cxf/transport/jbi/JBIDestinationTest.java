begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jbi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|DeliveryChannel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|MessageExchange
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|NormalizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JBIDestinationTest
extends|extends
name|AbstractJBITest
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|JBIDestinationTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"JBI destination test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOutputStreamSubstitutionDoesntCauseExceptionInDoClose
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Create enough of the object structure to get through the code.
name|NormalizedMessage
name|normalizedMessage
init|=
name|control
operator|.
name|createMock
argument_list|(
name|NormalizedMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|channel
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|DeliveryChannel
operator|.
name|class
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setOneWay
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|message
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|MessageExchange
name|messageExchange
init|=
name|control
operator|.
name|createMock
argument_list|(
name|MessageExchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|messageExchange
operator|.
name|createMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|normalizedMessage
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|MessageExchange
operator|.
name|class
argument_list|,
name|messageExchange
argument_list|)
expr_stmt|;
name|channel
operator|.
name|send
argument_list|(
name|messageExchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|JBIDestinationOutputStream
name|jbiOS
init|=
operator|new
name|JBIDestinationOutputStream
argument_list|(
name|message
argument_list|,
literal|null
argument_list|,
name|channel
argument_list|)
decl_stmt|;
comment|//Create array of more than what is in threshold in CachedOutputStream,
comment|//though the threshold in CachedOutputStream should be made protected
comment|//perhaps so it can be referenced here in case it ever changes.
name|int
name|targetLength
init|=
literal|64
operator|*
literal|1025
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<root>"
argument_list|)
expr_stmt|;
while|while
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|<
name|targetLength
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<dummy>some xml</dummy>"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</root>"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|testBytes
init|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|jbiOS
operator|.
name|write
argument_list|(
name|testBytes
argument_list|)
expr_stmt|;
name|jbiOS
operator|.
name|doClose
argument_list|()
expr_stmt|;
comment|//Verify send method was called.
name|EasyMock
operator|.
name|verify
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

