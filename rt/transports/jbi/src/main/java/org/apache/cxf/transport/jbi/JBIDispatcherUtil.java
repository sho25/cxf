begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jbi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|DeliveryChannel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|ExchangeStatus
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|MessageExchange
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|NormalizedMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ConduitInitiator
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JBIDispatcherUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JBIDispatcherUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|JBIDispatcherUtil
name|dispatchUtil
decl_stmt|;
specifier|private
specifier|final
name|DeliveryChannel
name|channel
decl_stmt|;
specifier|private
name|ConduitInitiator
name|conduitInitiator
decl_stmt|;
specifier|private
name|int
name|activeEndpoints
decl_stmt|;
specifier|private
name|boolean
name|running
decl_stmt|;
specifier|private
name|JBIDispatcherUtil
parameter_list|(
name|ConduitInitiator
name|ci
parameter_list|,
name|DeliveryChannel
name|dc
parameter_list|)
block|{
name|this
operator|.
name|conduitInitiator
operator|=
name|ci
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|dc
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|JBIDispatcherUtil
name|getInstance
parameter_list|(
name|ConduitInitiator
name|ci
parameter_list|,
name|DeliveryChannel
name|dc
parameter_list|)
block|{
if|if
condition|(
name|dispatchUtil
operator|==
literal|null
condition|)
block|{
name|dispatchUtil
operator|=
operator|new
name|JBIDispatcherUtil
argument_list|(
name|ci
argument_list|,
name|dc
argument_list|)
expr_stmt|;
block|}
return|return
name|dispatchUtil
return|;
block|}
specifier|public
specifier|static
name|void
name|clean
parameter_list|()
block|{
name|dispatchUtil
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|activateDispatch
parameter_list|()
block|{
name|activeEndpoints
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|running
operator|&&
name|channel
operator|!=
literal|null
condition|)
block|{
operator|new
name|Thread
argument_list|(
operator|new
name|JBIDispatcher
argument_list|()
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startDispatch
parameter_list|()
block|{              }
specifier|public
name|void
name|deactivateDispatch
parameter_list|()
block|{
name|activeEndpoints
operator|--
expr_stmt|;
block|}
specifier|protected
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
specifier|private
class|class
name|JBIDispatcher
implements|implements
name|Runnable
block|{
specifier|public
specifier|final
name|void
name|run
parameter_list|()
block|{
try|try
block|{
synchronized|synchronized
init|(
name|channel
init|)
block|{
name|running
operator|=
literal|true
expr_stmt|;
block|}
name|getLogger
argument_list|()
operator|.
name|fine
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"RECEIVE.THREAD.START"
argument_list|,
name|getLogger
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
do|do
block|{
name|MessageExchange
name|exchange
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|channel
init|)
block|{
try|try
block|{
name|exchange
operator|=
name|channel
operator|.
name|accept
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|exchange
operator|!=
literal|null
operator|&&
name|exchange
operator|.
name|getStatus
argument_list|()
operator|==
name|ExchangeStatus
operator|.
name|ACTIVE
condition|)
block|{
try|try
block|{
name|getLogger
argument_list|()
operator|.
name|fine
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"DISPATCH.TO.SU"
argument_list|,
name|getLogger
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dispatch
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//
block|}
block|}
block|}
do|while
condition|(
name|activeEndpoints
operator|>
literal|0
condition|)
do|;
synchronized|synchronized
init|(
name|channel
init|)
block|{
name|running
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"ERROR.DISPATCH.THREAD"
argument_list|,
name|getLogger
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|getLogger
argument_list|()
operator|.
name|fine
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"JBI.SERVER.TRANSPORT.MESSAGE.PROCESS.THREAD.EXIT"
argument_list|,
name|getLogger
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|dispatch
parameter_list|(
name|MessageExchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
name|QName
name|opName
init|=
name|exchange
operator|.
name|getOperation
argument_list|()
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|fine
argument_list|(
literal|"dispatch method: "
operator|+
name|opName
argument_list|)
expr_stmt|;
name|NormalizedMessage
name|nm
init|=
name|exchange
operator|.
name|getMessage
argument_list|(
literal|"in"
argument_list|)
decl_stmt|;
try|try
block|{
name|MessageImpl
name|inMessage
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|Set
name|normalizedMessageProps
init|=
name|nm
operator|.
name|getPropertyNames
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|name
range|:
name|normalizedMessageProps
control|)
block|{
name|inMessage
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|name
argument_list|,
name|nm
operator|.
name|getProperty
argument_list|(
operator|(
name|String
operator|)
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|inMessage
operator|.
name|put
argument_list|(
name|MessageExchange
operator|.
name|class
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
specifier|final
name|InputStream
name|in
init|=
name|JBIMessageHelper
operator|.
name|convertMessageToInputStream
argument_list|(
name|nm
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
name|inMessage
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|in
argument_list|)
expr_stmt|;
comment|//dispatch to correct destination in case of multiple endpoint
name|inMessage
operator|.
name|setDestination
argument_list|(
operator|(
operator|(
name|JBITransportFactory
operator|)
name|conduitInitiator
operator|)
operator|.
name|getDestination
argument_list|(
name|exchange
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|exchange
operator|.
name|getInterfaceName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|JBITransportFactory
operator|)
name|conduitInitiator
operator|)
operator|.
name|getDestination
argument_list|(
name|exchange
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|exchange
operator|.
name|getInterfaceName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getMessageObserver
argument_list|()
operator|.
name|onMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"ERROR.PREPARE.MESSAGE"
argument_list|,
name|getLogger
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

