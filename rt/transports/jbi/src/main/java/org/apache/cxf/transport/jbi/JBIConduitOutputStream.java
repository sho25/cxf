begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|jbi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Member
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|DeliveryChannel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|ExchangeStatus
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|InOut
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|MessageExchange
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|MessageExchangeFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|NormalizedMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_class
specifier|public
class|class
name|JBIConduitOutputStream
extends|extends
name|CachedOutputStream
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JBIConduitOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Message
name|message
decl_stmt|;
specifier|private
name|boolean
name|isOneWay
decl_stmt|;
specifier|private
name|DeliveryChannel
name|channel
decl_stmt|;
specifier|private
name|JBIConduit
name|conduit
decl_stmt|;
specifier|private
name|EndpointReferenceType
name|target
decl_stmt|;
specifier|public
name|JBIConduitOutputStream
parameter_list|(
name|Message
name|m
parameter_list|,
name|DeliveryChannel
name|channel
parameter_list|,
name|EndpointReferenceType
name|target
parameter_list|,
name|JBIConduit
name|conduit
parameter_list|)
block|{
name|message
operator|=
name|m
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|conduit
operator|=
name|conduit
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doFlush
parameter_list|()
throws|throws
name|IOException
block|{      }
annotation|@
name|Override
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
name|isOneWay
operator|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|isOneWay
argument_list|()
expr_stmt|;
name|commitOutputMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
name|target
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|commitOutputMessage
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|Member
name|member
init|=
operator|(
name|Member
operator|)
name|message
operator|.
name|get
argument_list|(
name|Method
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
name|member
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|bop
init|=
name|exchange
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"INVOKE.SERVICE"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
name|clz
argument_list|)
expr_stmt|;
name|WebService
name|ws
init|=
name|clz
operator|.
name|getAnnotation
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
decl_stmt|;
assert|assert
name|ws
operator|!=
literal|null
assert|;
name|QName
name|interfaceName
init|=
operator|new
name|QName
argument_list|(
name|ws
operator|.
name|targetNamespace
argument_list|()
argument_list|,
name|ws
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|QName
name|serviceName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
name|serviceName
operator|=
name|EndpointReferenceUtils
operator|.
name|getServiceName
argument_list|(
name|target
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serviceName
operator|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|MessageExchangeFactory
name|factory
init|=
name|channel
operator|.
name|createExchangeFactoryForService
argument_list|(
name|serviceName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"CREATE.MESSAGE.EXCHANGE"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
name|serviceName
argument_list|)
expr_stmt|;
name|MessageExchange
name|xchng
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isOneWay
condition|)
block|{
name|xchng
operator|=
name|factory
operator|.
name|createInOnlyExchange
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bop
operator|.
name|getOutput
argument_list|()
operator|==
literal|null
condition|)
block|{
name|xchng
operator|=
name|factory
operator|.
name|createRobustInOnlyExchange
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|xchng
operator|=
name|factory
operator|.
name|createInOutExchange
argument_list|()
expr_stmt|;
block|}
name|NormalizedMessage
name|inMsg
init|=
name|xchng
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"EXCHANGE.ENDPOINT"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
name|xchng
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|inMsg
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"setup message contents on "
operator|+
name|inMsg
argument_list|)
expr_stmt|;
name|inMsg
operator|.
name|setContent
argument_list|(
name|getMessageContent
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|xchng
operator|.
name|setService
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"service for exchange "
operator|+
name|serviceName
argument_list|)
expr_stmt|;
name|xchng
operator|.
name|setInterfaceName
argument_list|(
name|interfaceName
argument_list|)
expr_stmt|;
name|xchng
operator|.
name|setOperation
argument_list|(
name|bop
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//copy context
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|invocationContext
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|INVOCATION_CONTEXT
argument_list|)
decl_stmt|;
if|if
condition|(
name|invocationContext
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ent
range|:
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|invocationContext
operator|.
name|get
argument_list|(
literal|"RequestContext"
argument_list|)
operator|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// check if value is Serializable, and if value is Map
comment|// or collection,
comment|// just exclude it since the entry of it may not be
comment|// Serializable as well
if|if
condition|(
name|ent
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Serializable
operator|&&
operator|!
operator|(
name|ent
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
operator|)
operator|&&
operator|!
operator|(
name|ent
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Collection
operator|)
condition|)
block|{
name|inMsg
operator|.
name|setProperty
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|xchng
operator|.
name|setMessage
argument_list|(
name|inMsg
argument_list|,
literal|"in"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sending message"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isOneWay
condition|)
block|{
name|channel
operator|.
name|sendSync
argument_list|(
name|xchng
argument_list|)
expr_stmt|;
name|NormalizedMessage
name|outMsg
init|=
operator|(
operator|(
name|InOut
operator|)
name|xchng
operator|)
operator|.
name|getOutMessage
argument_list|()
decl_stmt|;
name|Source
name|content
init|=
literal|null
decl_stmt|;
name|Set
name|normalizedMessageProps
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|outMsg
operator|!=
literal|null
condition|)
block|{
name|content
operator|=
name|outMsg
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|normalizedMessageProps
operator|=
name|outMsg
operator|.
name|getPropertyNames
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|(
operator|(
name|InOut
operator|)
name|xchng
operator|)
operator|.
name|getFault
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
name|xchng
operator|.
name|getError
argument_list|()
throw|;
block|}
name|content
operator|=
operator|(
operator|(
name|InOut
operator|)
name|xchng
operator|)
operator|.
name|getFault
argument_list|()
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|normalizedMessageProps
operator|=
operator|(
operator|(
name|InOut
operator|)
name|xchng
operator|)
operator|.
name|getFault
argument_list|()
operator|.
name|getPropertyNames
argument_list|()
expr_stmt|;
block|}
name|Message
name|inMessage
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|setInMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
name|InputStream
name|ins
init|=
name|JBIMessageHelper
operator|.
name|convertMessageToInputStream
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|ins
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"UNABLE.RETRIEVE.MESSAGE"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|inMessage
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|ins
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|put
argument_list|(
name|MessageExchange
operator|.
name|class
argument_list|,
name|xchng
argument_list|)
expr_stmt|;
if|if
condition|(
name|normalizedMessageProps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|name
range|:
name|normalizedMessageProps
control|)
block|{
name|inMessage
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|name
argument_list|,
name|outMsg
operator|.
name|getProperty
argument_list|(
operator|(
name|String
operator|)
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|conduit
operator|.
name|getMessageObserver
argument_list|()
operator|.
name|onMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
name|xchng
operator|.
name|setStatus
argument_list|(
name|ExchangeStatus
operator|.
name|DONE
argument_list|)
expr_stmt|;
name|channel
operator|.
name|send
argument_list|(
name|xchng
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|channel
operator|.
name|send
argument_list|(
name|xchng
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"NO.MESSAGE"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Source
name|getMessageContent
parameter_list|(
name|Message
name|message2
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|StreamSource
argument_list|(
name|this
operator|.
name|getInputStream
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onWrite
parameter_list|()
throws|throws
name|IOException
block|{      }
block|}
end_class

end_unit

