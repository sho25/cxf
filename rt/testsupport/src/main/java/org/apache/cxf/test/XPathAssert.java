begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_comment
comment|/**  * XPath test assertions.  *   * @author<a href="mailto:dan@envoisolutions.com">Dan Diephouse</a>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|XPathAssert
block|{
specifier|private
name|XPathAssert
parameter_list|()
block|{     }
comment|/**      * Assert that the following XPath query selects one or more nodes.      *       * @param xpath      */
specifier|public
specifier|static
name|NodeList
name|assertValid
parameter_list|(
name|String
name|xpath
parameter_list|,
name|Node
name|node
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Node cannot be null."
argument_list|)
throw|;
block|}
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|createXPath
argument_list|(
name|namespaces
argument_list|)
operator|.
name|evaluate
argument_list|(
name|xpath
argument_list|,
name|node
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Failed to select any nodes for expression:\n"
operator|+
name|xpath
operator|+
literal|" from document:\n"
operator|+
name|writeNodeToString
argument_list|(
name|node
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|nodes
return|;
block|}
comment|/**      * Assert that the following XPath query selects one or more nodes.      *       * @param xpath      */
specifier|public
specifier|static
name|void
name|assertValidBoolean
parameter_list|(
name|String
name|xpath
parameter_list|,
name|Node
name|node
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Node cannot be null."
argument_list|)
throw|;
block|}
name|Boolean
name|b
init|=
operator|(
name|Boolean
operator|)
name|createXPath
argument_list|(
name|namespaces
argument_list|)
operator|.
name|evaluate
argument_list|(
name|xpath
argument_list|,
name|node
argument_list|,
name|XPathConstants
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Failed to select any nodes for expression:\n"
operator|+
name|xpath
operator|+
literal|" from document:\n"
operator|+
name|writeNodeToString
argument_list|(
name|node
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|b
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Boolean XPath assertion evaluated to false:\n"
operator|+
name|xpath
operator|+
literal|" from document:\n"
operator|+
name|writeNodeToString
argument_list|(
name|node
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|String
name|writeNodeToString
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|DOMUtils
operator|.
name|writeXml
argument_list|(
name|node
argument_list|,
name|bos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|bos
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Assert that the following XPath query selects no nodes.      *       * @param xpath      */
specifier|public
specifier|static
name|NodeList
name|assertInvalid
parameter_list|(
name|String
name|xpath
parameter_list|,
name|Node
name|node
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Node cannot be null."
argument_list|)
throw|;
block|}
name|NodeList
name|nodes
init|=
operator|(
name|NodeList
operator|)
name|createXPath
argument_list|(
name|namespaces
argument_list|)
operator|.
name|evaluate
argument_list|(
name|xpath
argument_list|,
name|node
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|value
init|=
name|writeNodeToString
argument_list|(
name|node
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Found multiple nodes for expression:\n"
operator|+
name|xpath
operator|+
literal|"\n"
operator|+
name|value
argument_list|)
throw|;
block|}
return|return
name|nodes
return|;
block|}
comment|/**      * Asser that the text of the xpath node retrieved is equal to the value      * specified.      *       * @param xpath      * @param value      * @param node      */
specifier|public
specifier|static
name|void
name|assertXPathEquals
parameter_list|(
name|String
name|xpath
parameter_list|,
name|String
name|value
parameter_list|,
name|Node
name|node
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|Exception
block|{
name|Node
name|result
init|=
operator|(
name|Node
operator|)
name|createXPath
argument_list|(
name|namespaces
argument_list|)
operator|.
name|evaluate
argument_list|(
name|xpath
argument_list|,
name|node
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"No nodes were found for expression: "
operator|+
name|xpath
operator|+
literal|" in document "
operator|+
name|writeNodeToString
argument_list|(
name|node
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|value2
init|=
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|value2
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|assertNoFault
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
literal|"s"
argument_list|,
literal|"http://schemas.xmlsoap.org/soap/envelope/"
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
literal|"s12"
argument_list|,
literal|"http://www.w3.org/2003/05/soap-envelope"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"/s:Envelope/s:Body/s:Fault"
argument_list|,
name|node
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"/s12:Envelope/s12:Body/s12:Fault"
argument_list|,
name|node
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|assertFault
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
literal|"s"
argument_list|,
literal|"http://schemas.xmlsoap.org/soap/envelope/"
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
literal|"s12"
argument_list|,
literal|"http://www.w3.org/2003/05/soap-envelope"
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/s:Envelope/s:Body/s:Fault"
argument_list|,
name|node
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/s12:Envelope/s12:Body/s12:Fault"
argument_list|,
name|node
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create the specified XPath expression with the namespaces added via      * addNamespace().      */
specifier|public
specifier|static
name|XPath
name|createXPath
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|Exception
block|{
name|XPath
name|xpath
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespaces
operator|!=
literal|null
condition|)
block|{
name|xpath
operator|.
name|setNamespaceContext
argument_list|(
operator|new
name|MapNamespaceContext
argument_list|(
name|namespaces
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|xpath
return|;
block|}
specifier|static
class|class
name|MapNamespaceContext
implements|implements
name|NamespaceContext
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
decl_stmt|;
specifier|public
name|MapNamespaceContext
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|namespaces
operator|=
name|namespaces
expr_stmt|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|namespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|namespaces
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
name|e
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Iterator
name|getPrefixes
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

