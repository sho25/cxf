begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|fortest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|uri
operator|.
name|cxf_apache_org
operator|.
name|jstest
operator|.
name|any
operator|.
name|AcceptAny
import|;
end_import

begin_import
import|import
name|uri
operator|.
name|cxf_apache_org
operator|.
name|jstest
operator|.
name|types
operator|.
name|any
operator|.
name|AcceptAny1
import|;
end_import

begin_import
import|import
name|uri
operator|.
name|cxf_apache_org
operator|.
name|jstest
operator|.
name|types
operator|.
name|any
operator|.
name|AcceptAnyN
import|;
end_import

begin_import
import|import
name|uri
operator|.
name|cxf_apache_org
operator|.
name|jstest
operator|.
name|types
operator|.
name|any
operator|.
name|AcceptAnyOptional
import|;
end_import

begin_import
import|import
name|uri
operator|.
name|cxf_apache_org
operator|.
name|jstest
operator|.
name|types
operator|.
name|any
operator|.
name|ReturnAny1
import|;
end_import

begin_import
import|import
name|uri
operator|.
name|cxf_apache_org
operator|.
name|jstest
operator|.
name|types
operator|.
name|any
operator|.
name|ReturnAnyN
import|;
end_import

begin_import
import|import
name|uri
operator|.
name|cxf_apache_org
operator|.
name|jstest
operator|.
name|types
operator|.
name|any
operator|.
name|ReturnAnyOptional
import|;
end_import

begin_import
import|import
name|uri
operator|.
name|cxf_apache_org
operator|.
name|jstest
operator|.
name|types
operator|.
name|any
operator|.
name|alts
operator|.
name|Alternative1
import|;
end_import

begin_import
import|import
name|uri
operator|.
name|cxf_apache_org
operator|.
name|jstest
operator|.
name|types
operator|.
name|any
operator|.
name|alts
operator|.
name|Alternative2
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_comment
comment|//@org.apache.cxf.feature.Features(features = "org.apache.cxf.feature.LoggingFeature")
end_comment

begin_class
specifier|public
class|class
name|AnyImpl
implements|implements
name|AcceptAny
block|{
specifier|private
name|Object
name|any1value
decl_stmt|;
specifier|private
name|Object
index|[]
name|anyNvalue
decl_stmt|;
specifier|private
name|Object
name|anyOptionalValue
decl_stmt|;
specifier|private
name|String
name|before
decl_stmt|;
specifier|private
name|String
name|after
decl_stmt|;
specifier|private
name|boolean
name|returnOptional
decl_stmt|;
specifier|private
name|CountDownLatch
name|onewayNotify
decl_stmt|;
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|any1value
operator|=
literal|null
expr_stmt|;
name|anyNvalue
operator|=
literal|null
expr_stmt|;
name|anyOptionalValue
operator|=
literal|null
expr_stmt|;
name|before
operator|=
literal|null
expr_stmt|;
name|after
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * *      *       * @return Returns the any1value.      */
specifier|public
name|Object
name|getAny1value
parameter_list|()
block|{
return|return
name|any1value
return|;
block|}
comment|/**      * *      *       * @return Returns the anyNvalue.      */
specifier|public
name|Object
index|[]
name|getAnyNvalue
parameter_list|()
block|{
return|return
name|anyNvalue
return|;
block|}
comment|/**      * *      *       * @return Returns the anyOptionalValue.      */
specifier|public
name|Object
name|getAnyOptionalValue
parameter_list|()
block|{
return|return
name|anyOptionalValue
return|;
block|}
comment|/**      * *      *       * @return Returns the before.      */
specifier|public
name|String
name|getBefore
parameter_list|()
block|{
return|return
name|before
return|;
block|}
comment|/**      * *      *       * @return Returns the after.      */
specifier|public
name|String
name|getAfter
parameter_list|()
block|{
return|return
name|after
return|;
block|}
comment|/** * @return Returns the returnOptional.      */
specifier|public
name|boolean
name|isReturnOptional
parameter_list|()
block|{
return|return
name|returnOptional
return|;
block|}
comment|/**      * @param returnOptional The returnOptional to set.      */
specifier|public
name|void
name|setReturnOptional
parameter_list|(
name|boolean
name|returnOptional
parameter_list|)
block|{
name|this
operator|.
name|returnOptional
operator|=
name|returnOptional
expr_stmt|;
block|}
specifier|public
name|void
name|acceptAny1
parameter_list|(
name|AcceptAny1
name|in
parameter_list|)
block|{
name|before
operator|=
name|in
operator|.
name|getBefore
argument_list|()
expr_stmt|;
name|after
operator|=
name|in
operator|.
name|getAfter
argument_list|()
expr_stmt|;
name|any1value
operator|=
name|in
operator|.
name|getAny
argument_list|()
expr_stmt|;
name|onewayNotify
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|acceptAnyN
parameter_list|(
name|AcceptAnyN
name|in
parameter_list|)
block|{
name|before
operator|=
name|in
operator|.
name|getBefore
argument_list|()
expr_stmt|;
name|after
operator|=
name|in
operator|.
name|getAfter
argument_list|()
expr_stmt|;
name|anyNvalue
operator|=
name|in
operator|.
name|getAny
argument_list|()
operator|.
name|toArray
argument_list|()
expr_stmt|;
name|onewayNotify
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|acceptAnyOptional
parameter_list|(
name|AcceptAnyOptional
name|in
parameter_list|)
block|{
name|before
operator|=
name|in
operator|.
name|getBefore
argument_list|()
expr_stmt|;
name|after
operator|=
name|in
operator|.
name|getAfter
argument_list|()
expr_stmt|;
name|anyOptionalValue
operator|=
name|in
operator|.
name|getAny
argument_list|()
expr_stmt|;
name|onewayNotify
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|AcceptAny1
name|returnAny1
parameter_list|(
name|ReturnAny1
name|in
parameter_list|)
block|{
name|AcceptAny1
name|r
init|=
operator|new
name|AcceptAny1
argument_list|()
decl_stmt|;
name|r
operator|.
name|setBefore
argument_list|(
literal|"1before"
argument_list|)
expr_stmt|;
name|Alternative1
name|a1
init|=
operator|new
name|Alternative1
argument_list|()
decl_stmt|;
name|a1
operator|.
name|setChalk
argument_list|(
literal|"dover"
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAny
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAfter
argument_list|(
literal|"1after"
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
specifier|public
name|AcceptAnyN
name|returnAnyN
parameter_list|(
name|ReturnAnyN
name|in
parameter_list|)
block|{
name|AcceptAnyN
name|r
init|=
operator|new
name|AcceptAnyN
argument_list|()
decl_stmt|;
name|r
operator|.
name|setBefore
argument_list|(
literal|"Nbefore"
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAfter
argument_list|(
literal|"Nafter"
argument_list|)
expr_stmt|;
name|Object
index|[]
name|objects
init|=
operator|new
name|Object
index|[
literal|4
index|]
decl_stmt|;
name|Alternative1
name|a1
init|=
operator|new
name|Alternative1
argument_list|()
decl_stmt|;
name|a1
operator|.
name|setChalk
argument_list|(
literal|"blackboard"
argument_list|)
expr_stmt|;
name|objects
index|[
literal|0
index|]
operator|=
name|a1
expr_stmt|;
name|objects
index|[
literal|1
index|]
operator|=
literal|null
expr_stmt|;
name|Alternative2
name|a2
init|=
operator|new
name|Alternative2
argument_list|()
decl_stmt|;
name|a2
operator|.
name|setCheese
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|objects
index|[
literal|2
index|]
operator|=
name|a2
expr_stmt|;
name|a1
operator|=
operator|new
name|Alternative1
argument_list|()
expr_stmt|;
name|a1
operator|.
name|setChalk
argument_list|(
literal|"sidewalk"
argument_list|)
expr_stmt|;
name|objects
index|[
literal|3
index|]
operator|=
name|a1
expr_stmt|;
name|r
operator|.
name|getAny
argument_list|()
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|objects
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
specifier|public
name|AcceptAnyOptional
name|returnAnyOptional
parameter_list|(
name|ReturnAnyOptional
name|in
parameter_list|)
block|{
name|AcceptAnyOptional
name|r
init|=
operator|new
name|AcceptAnyOptional
argument_list|()
decl_stmt|;
name|r
operator|.
name|setBefore
argument_list|(
literal|"opBefore"
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAfter
argument_list|(
literal|"opAfter"
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnOptional
condition|)
block|{
name|Alternative2
name|a2
init|=
operator|new
name|Alternative2
argument_list|()
decl_stmt|;
name|a2
operator|.
name|setCheese
argument_list|(
literal|24
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAny
argument_list|(
name|a2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|setAny
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
specifier|public
name|void
name|dummyAlts
parameter_list|(
name|uri
operator|.
name|cxf_apache_org
operator|.
name|jstest
operator|.
name|types
operator|.
name|any
operator|.
name|alts
operator|.
name|Alternative1
name|in
parameter_list|)
block|{
comment|// not used, just here to force some types into sight.
block|}
specifier|public
name|void
name|prepareToWaitForOneWay
parameter_list|()
block|{
name|onewayNotify
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|waitForOneWay
parameter_list|()
block|{
if|if
condition|(
name|onewayNotify
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|onewayNotify
operator|.
name|await
argument_list|()
expr_stmt|;
name|onewayNotify
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
end_class

end_unit

