begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|JavascriptTestUtilities
operator|.
name|JSRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|JavascriptTestUtilities
operator|.
name|Notifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|fortest
operator|.
name|AnyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|GenericApplicationContext
import|;
end_import

begin_import
import|import
name|uri
operator|.
name|cxf_apache_org
operator|.
name|jstest
operator|.
name|types
operator|.
name|any
operator|.
name|alts
operator|.
name|Alternative1
import|;
end_import

begin_comment
comment|/*  * We end up here with a part with isElement == true, a non-array element,   * but a complex type for an array of the element.  */
end_comment

begin_class
specifier|public
class|class
name|AnyTest
extends|extends
name|JavascriptRhinoTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AnyTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|AnyImpl
name|implementor
decl_stmt|;
specifier|public
name|AnyTest
parameter_list|()
throws|throws
name|Exception
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|additionalSpringConfiguration
parameter_list|(
name|GenericApplicationContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
specifier|protected
name|String
index|[]
name|getConfigLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"classpath:AnyBeans.xml"
block|}
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|setupRhino
argument_list|(
literal|"any-service-endpoint"
argument_list|,
literal|"/org/apache/cxf/javascript/AnyTests.js"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|implementor
operator|=
operator|(
name|AnyImpl
operator|)
name|rawImplementor
expr_stmt|;
name|implementor
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Void
name|acceptOneChalk
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"About to call accept1 with Chalk"
operator|+
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|testUtilities
operator|.
name|rhinoCall
argument_list|(
literal|"testAny1ToServerChalk"
argument_list|,
name|testUtilities
operator|.
name|javaToJS
argument_list|(
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"before chalk"
argument_list|,
name|implementor
operator|.
name|getBefore
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|someAlternative
init|=
name|implementor
operator|.
name|getAny1value
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|someAlternative
operator|instanceof
name|Alternative1
argument_list|)
expr_stmt|;
name|Alternative1
name|a1
init|=
operator|(
name|Alternative1
operator|)
name|someAlternative
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bismuth"
argument_list|,
name|a1
operator|.
name|getChalk
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"after chalk"
argument_list|,
name|implementor
operator|.
name|getAfter
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|callAcceptOneChalk
parameter_list|()
block|{
name|testUtilities
operator|.
name|runInsideContext
argument_list|(
name|Void
operator|.
name|class
argument_list|,
operator|new
name|JSRunnable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|acceptOneChalk
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Void
name|acceptOneRaw
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"About to call accept1 with Raw XML"
operator|+
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|testUtilities
operator|.
name|rhinoCall
argument_list|(
literal|"testAny1ToServerRaw"
argument_list|,
name|testUtilities
operator|.
name|javaToJS
argument_list|(
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"before chalk"
argument_list|,
name|implementor
operator|.
name|getBefore
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|something
init|=
name|implementor
operator|.
name|getAny1value
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|something
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|something
operator|instanceof
name|Element
argument_list|)
expr_stmt|;
name|Element
name|walrus
init|=
operator|(
name|Element
operator|)
name|something
decl_stmt|;
name|assertEquals
argument_list|(
literal|"walrus"
argument_list|,
name|walrus
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tusks"
argument_list|,
name|walrus
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"after chalk"
argument_list|,
name|implementor
operator|.
name|getAfter
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|callAcceptOneRaw
parameter_list|()
block|{
name|testUtilities
operator|.
name|runInsideContext
argument_list|(
name|Void
operator|.
name|class
argument_list|,
operator|new
name|JSRunnable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|acceptOneRaw
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Void
name|acceptNRaw
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"About to call acceptN with Raw XML"
operator|+
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|testUtilities
operator|.
name|rhinoCall
argument_list|(
literal|"testAnyNToServerRaw"
argument_list|,
name|testUtilities
operator|.
name|javaToJS
argument_list|(
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"before chalk"
argument_list|,
name|implementor
operator|.
name|getBefore
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
name|something
init|=
name|implementor
operator|.
name|getAnyNvalue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|something
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|something
index|[
literal|0
index|]
operator|instanceof
name|Element
argument_list|)
expr_stmt|;
name|Element
name|walrus
init|=
operator|(
name|Element
operator|)
name|something
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"walrus"
argument_list|,
name|walrus
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tusks"
argument_list|,
name|walrus
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|something
index|[
literal|1
index|]
operator|instanceof
name|Element
argument_list|)
expr_stmt|;
name|Element
name|penguin
init|=
operator|(
name|Element
operator|)
name|something
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"penguin"
argument_list|,
name|penguin
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"emperor"
argument_list|,
name|penguin
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"after chalk"
argument_list|,
name|implementor
operator|.
name|getAfter
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|callAcceptNRaw
parameter_list|()
block|{
name|testUtilities
operator|.
name|runInsideContext
argument_list|(
name|Void
operator|.
name|class
argument_list|,
operator|new
name|JSRunnable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|acceptNRaw
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Void
name|returnAny1
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|Notifier
name|notifier
init|=
name|testUtilities
operator|.
name|rhinoCallConvert
argument_list|(
literal|"testAny1ToClientChalk"
argument_list|,
name|Notifier
operator|.
name|class
argument_list|,
name|testUtilities
operator|.
name|javaToJS
argument_list|(
name|getAddress
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|notified
init|=
name|notifier
operator|.
name|waitForJavascript
argument_list|(
literal|1000
operator|*
literal|10
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|notified
argument_list|)
expr_stmt|;
name|Integer
name|errorStatus
init|=
name|testUtilities
operator|.
name|rhinoEvaluateConvert
argument_list|(
literal|"globalErrorStatus"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|errorStatus
argument_list|)
expr_stmt|;
name|String
name|errorText
init|=
name|testUtilities
operator|.
name|rhinoEvaluateConvert
argument_list|(
literal|"globalErrorStatusText"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|errorText
argument_list|)
expr_stmt|;
comment|//This method returns a String
name|String
name|chalk
init|=
operator|(
name|String
operator|)
name|testUtilities
operator|.
name|rhinoEvaluate
argument_list|(
literal|"globalResponseObject._any.object._chalk"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"dover"
argument_list|,
name|chalk
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|callReturnAny1
parameter_list|()
throws|throws
name|Exception
block|{
name|testUtilities
operator|.
name|runInsideContext
argument_list|(
name|Void
operator|.
name|class
argument_list|,
operator|new
name|JSRunnable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|returnAny1
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

