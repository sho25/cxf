begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ProtocolException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|input
operator|.
name|DOMBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|output
operator|.
name|XMLOutputter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|JavaScriptException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|ScriptableObject
import|;
end_import

begin_comment
comment|/**  * Implementation of XMLHttpRequest for Rhino. This might be given knowledge of  * CXF 'local' URLs if the author is feeling frisky.  */
end_comment

begin_class
specifier|public
class|class
name|JsXMLHttpRequest
extends|extends
name|ScriptableObject
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JsXMLHttpRequest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Charset
name|utf8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"utf-8"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|validMethods
decl_stmt|;
static|static
block|{
name|validMethods
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|validMethods
operator|.
name|add
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|validMethods
operator|.
name|add
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|validMethods
operator|.
name|add
argument_list|(
literal|"HEAD"
argument_list|)
expr_stmt|;
name|validMethods
operator|.
name|add
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|validMethods
operator|.
name|add
argument_list|(
literal|"OPTIONS"
argument_list|)
expr_stmt|;
name|validMethods
operator|.
name|add
argument_list|(
literal|"DELETE"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|invalidHeaders
init|=
block|{
literal|"Accept-Charset"
block|,
literal|"Accept-Encoding"
block|,
literal|"Connection"
block|,
literal|"Content-Length"
block|,
literal|"Content-Transfer-Encoding"
block|,
literal|"Date"
block|,
literal|"Expect"
block|,
literal|"Host"
block|,
literal|"Keep-Alive"
block|,
literal|"Referer"
block|,
literal|"TE"
block|,
literal|"Trailer"
block|,
literal|"Transfer-Encoding"
block|,
literal|"Upgrade"
block|,
literal|"Via"
block|}
decl_stmt|;
specifier|private
name|int
name|readyState
init|=
name|jsGet_UNSENT
argument_list|()
decl_stmt|;
specifier|private
name|Object
name|readyStateChangeListener
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestHeaders
decl_stmt|;
specifier|private
name|String
name|storedMethod
decl_stmt|;
specifier|private
name|String
name|storedUser
decl_stmt|;
specifier|private
name|String
name|storedPassword
decl_stmt|;
specifier|private
name|boolean
name|sendFlag
decl_stmt|;
specifier|private
name|URI
name|uri
decl_stmt|;
specifier|private
name|URL
name|url
decl_stmt|;
specifier|private
name|boolean
name|storedAsync
decl_stmt|;
specifier|private
name|URLConnection
name|connection
decl_stmt|;
specifier|private
name|HttpURLConnection
name|httpConnection
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|responseHeaders
decl_stmt|;
specifier|private
name|int
name|httpResponseCode
decl_stmt|;
specifier|private
name|String
name|httpResponseText
decl_stmt|;
specifier|private
name|String
name|responseText
decl_stmt|;
specifier|private
name|JsSimpleDomNode
name|responseXml
decl_stmt|;
specifier|private
name|boolean
name|errorFlag
decl_stmt|;
specifier|public
name|JsXMLHttpRequest
parameter_list|()
block|{
name|requestHeaders
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|storedMethod
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|register
parameter_list|(
name|ScriptableObject
name|scope
parameter_list|)
block|{
try|try
block|{
name|ScriptableObject
operator|.
name|defineClass
argument_list|(
name|scope
argument_list|,
name|JsXMLHttpRequest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
literal|"XMLHttpRequest"
return|;
block|}
specifier|private
name|void
name|notifyReadyStateChangeListener
parameter_list|()
block|{
if|if
condition|(
name|readyStateChangeListener
operator|instanceof
name|Function
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"notify "
operator|+
name|readyState
argument_list|)
expr_stmt|;
comment|// for now, call with no args.
name|Function
name|listenerFunction
init|=
operator|(
name|Function
operator|)
name|readyStateChangeListener
decl_stmt|;
name|listenerFunction
operator|.
name|call
argument_list|(
name|Context
operator|.
name|getCurrentContext
argument_list|()
argument_list|,
name|getParentScope
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doOpen
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|urlString
parameter_list|,
name|boolean
name|async
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|)
block|{
comment|// ignoring auth for now.
name|LOG
operator|.
name|fine
argument_list|(
literal|"doOpen "
operator|+
name|method
operator|+
literal|" "
operator|+
name|urlString
operator|+
literal|" "
operator|+
name|Boolean
operator|.
name|toString
argument_list|(
name|async
argument_list|)
argument_list|)
expr_stmt|;
name|storedAsync
operator|=
name|async
expr_stmt|;
name|responseText
operator|=
literal|null
expr_stmt|;
name|responseXml
operator|=
literal|null
expr_stmt|;
comment|// see 4
name|method
operator|=
name|method
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
comment|// 1 check method
if|if
condition|(
operator|!
name|validMethods
operator|.
name|contains
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Invalid method syntax error."
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"SYNTAX_ERR"
argument_list|)
expr_stmt|;
block|}
comment|// 2 security check (we don't have any)
comment|// 3 store method
name|storedMethod
operator|=
name|method
expr_stmt|;
comment|// 4 we already mapped it to upper case.
comment|// 5 make a URL, dropping any fragment.
name|uri
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|URI
name|tempUri
init|=
operator|new
name|URI
argument_list|(
name|urlString
argument_list|)
decl_stmt|;
if|if
condition|(
name|tempUri
operator|.
name|isOpaque
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Relative URL syntax error."
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"SYNTAX_ERR"
argument_list|)
expr_stmt|;
block|}
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|tempUri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|tempUri
operator|.
name|getUserInfo
argument_list|()
argument_list|,
name|tempUri
operator|.
name|getHost
argument_list|()
argument_list|,
name|tempUri
operator|.
name|getPort
argument_list|()
argument_list|,
name|tempUri
operator|.
name|getPath
argument_list|()
argument_list|,
name|tempUri
operator|.
name|getQuery
argument_list|()
argument_list|,
literal|null
comment|/*                                                                          * no                                                                          * fragment                                                                          */
argument_list|)
expr_stmt|;
name|url
operator|=
name|uri
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"URI syntax error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"SYNTAX_ERR"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"URI isn't URL"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"SYNTAX_ERR"
argument_list|)
expr_stmt|;
block|}
comment|// 6 deal with relative URLs. We don't have a base. This is a limitation
comment|// on browser compatibility.
if|if
condition|(
operator|!
name|uri
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|throwError
argument_list|(
literal|"SYNTAX_ERR"
argument_list|)
expr_stmt|;
block|}
comment|// 7 scheme check. Well, for now ...
if|if
condition|(
operator|!
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"http"
argument_list|)
operator|&&
operator|!
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"https"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Not http "
operator|+
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"NOT_SUPPORTED_ERR"
argument_list|)
expr_stmt|;
block|}
comment|// 8 user:password is OK for HTTP.
comment|// 9, 10 user/password parsing
if|if
condition|(
name|uri
operator|.
name|getUserInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|userAndPassword
init|=
name|uri
operator|.
name|getUserInfo
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|storedUser
operator|=
name|userAndPassword
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|userAndPassword
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|storedPassword
operator|=
name|userAndPassword
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
comment|// 11 cross-scripting check. We don't implement it.
comment|// 12 default async. Already done.
comment|// 13 check user for syntax. Not Our Job.
comment|// 14 encode the user. We think we can leave this for the Http code we
comment|// use below
comment|// 15, 16, 17, 18 more user/password glop.
comment|// 19: abort any pending activity.
comment|// TODO: abort
comment|// 20 cancel network activity.
comment|// TODO: cancel
comment|// 21 set state to OPENED and fire the listener.
name|readyState
operator|=
name|jsGet_OPENED
argument_list|()
expr_stmt|;
name|sendFlag
operator|=
literal|false
expr_stmt|;
name|notifyReadyStateChangeListener
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|doSetRequestHeader
parameter_list|(
name|String
name|header
parameter_list|,
name|String
name|value
parameter_list|)
block|{
comment|// 1 check state
if|if
condition|(
name|readyState
operator|!=
name|jsGet_OPENED
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"setRequestHeader invalid state "
operator|+
name|readyState
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"INVALID_STATE_ERR"
argument_list|)
expr_stmt|;
block|}
comment|// 2 check flag
if|if
condition|(
name|sendFlag
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"setRequestHeader send flag set."
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"INVALID_STATE_ERR"
argument_list|)
expr_stmt|;
block|}
comment|// 3 check field-name production.
comment|// 4 ignore null values.
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// 5 check value
comment|// 6 check for bad headers
for|for
control|(
name|String
name|invalid
range|:
name|invalidHeaders
control|)
block|{
if|if
condition|(
name|header
operator|.
name|equalsIgnoreCase
argument_list|(
name|invalid
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"setRequestHeader invalid header."
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"SECURITY_ERR"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 7 check for proxy
name|String
name|headerLower
init|=
name|header
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|headerLower
operator|.
name|startsWith
argument_list|(
literal|"proxy-"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"setRequestHeader proxy header."
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"SECURITY_ERR"
argument_list|)
expr_stmt|;
block|}
comment|// 8, 9, handle appends.
name|String
name|previous
init|=
name|requestHeaders
operator|.
name|get
argument_list|(
name|header
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|previous
operator|+
literal|", "
operator|+
name|value
expr_stmt|;
block|}
name|requestHeaders
operator|.
name|put
argument_list|(
name|header
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doSend
parameter_list|(
name|byte
index|[]
name|dataToSend
parameter_list|,
name|boolean
name|xml
parameter_list|)
block|{
comment|// avoid warnings on stuff we arent using yet.
if|if
condition|(
name|storedUser
operator|!=
literal|null
operator|||
name|storedPassword
operator|!=
literal|null
condition|)
block|{
comment|//
block|}
comment|// 1 check state
if|if
condition|(
name|readyState
operator|!=
name|jsGet_OPENED
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"send state != OPENED."
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"INVALID_STATE_ERR"
argument_list|)
expr_stmt|;
block|}
comment|// 2 check flag
if|if
condition|(
name|sendFlag
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"send sendFlag set."
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"INVALID_STATE_ERR"
argument_list|)
expr_stmt|;
block|}
comment|// 3
name|sendFlag
operator|=
name|storedAsync
expr_stmt|;
comment|// 4 preprocess data. Handled on the way in here, we're called with
comment|// UTF-8 bytes.
if|if
condition|(
name|xml
operator|&&
operator|!
name|requestHeaders
operator|.
name|containsKey
argument_list|(
literal|"Content-Type"
argument_list|)
condition|)
block|{
name|requestHeaders
operator|.
name|put
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/xml;charset=utf-8"
argument_list|)
expr_stmt|;
block|}
comment|// 5 talk to the server.
try|try
block|{
name|connection
operator|=
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"send connection failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"CONNECTION_FAILED"
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|setDoInput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setUseCaches
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Enable tunneling.
name|boolean
name|post
init|=
literal|false
decl_stmt|;
name|httpConnection
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|connection
operator|instanceof
name|HttpURLConnection
condition|)
block|{
name|httpConnection
operator|=
operator|(
name|HttpURLConnection
operator|)
name|connection
expr_stmt|;
try|try
block|{
name|httpConnection
operator|.
name|setRequestMethod
argument_list|(
name|storedMethod
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"POST"
operator|.
name|equalsIgnoreCase
argument_list|(
name|storedMethod
argument_list|)
condition|)
block|{
name|httpConnection
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|post
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headerEntry
range|:
name|requestHeaders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|httpConnection
operator|.
name|setRequestProperty
argument_list|(
name|headerEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|headerEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"send http protocol exception."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"HTTP_PROTOCOL_ERROR"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|post
condition|)
block|{
name|OutputStream
name|outputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|outputStream
operator|=
name|connection
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
comment|// implicitly connects?
if|if
condition|(
name|dataToSend
operator|!=
literal|null
condition|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|dataToSend
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|errorFlag
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"send output error."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"NETWORK_ERR"
argument_list|)
expr_stmt|;
try|try
block|{
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
comment|// 6
name|notifyReadyStateChangeListener
argument_list|()
expr_stmt|;
if|if
condition|(
name|storedAsync
condition|)
block|{
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Context
name|cx
init|=
name|Context
operator|.
name|enter
argument_list|()
decl_stmt|;
name|communicate
argument_list|(
name|cx
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Context
operator|.
name|exit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|communicate
argument_list|(
name|Context
operator|.
name|getCurrentContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|communicate
parameter_list|(
name|Context
name|cx
parameter_list|)
block|{
try|try
block|{
name|InputStream
name|is
init|=
name|connection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|httpResponseCode
operator|=
operator|-
literal|1
expr_stmt|;
comment|// this waits, I hope, for a response.
name|responseHeaders
operator|=
name|connection
operator|.
name|getHeaderFields
argument_list|()
expr_stmt|;
name|readyState
operator|=
name|jsGet_HEADERS_RECEIVED
argument_list|()
expr_stmt|;
name|notifyReadyStateChangeListener
argument_list|()
expr_stmt|;
if|if
condition|(
name|httpConnection
operator|!=
literal|null
condition|)
block|{
name|httpResponseCode
operator|=
name|httpConnection
operator|.
name|getResponseCode
argument_list|()
expr_stmt|;
name|httpResponseText
operator|=
name|httpConnection
operator|.
name|getResponseMessage
argument_list|()
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|read
decl_stmt|;
name|boolean
name|notified
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|notified
condition|)
block|{
name|readyState
operator|=
name|jsGet_LOADING
argument_list|()
expr_stmt|;
name|notifyReadyStateChangeListener
argument_list|()
expr_stmt|;
block|}
name|baos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// convert bytes to text.
name|String
name|contentEncoding
init|=
name|connection
operator|.
name|getContentEncoding
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentEncoding
operator|==
literal|null
operator|||
name|contentEncoding
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|contentEncoding
operator|=
literal|"utf-8"
expr_stmt|;
block|}
name|Charset
name|contentCharset
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|contentEncoding
argument_list|)
decl_stmt|;
name|byte
index|[]
name|contentBytes
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|CharBuffer
name|contentChars
init|=
name|contentCharset
operator|.
name|decode
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|contentBytes
argument_list|)
argument_list|)
decl_stmt|;
comment|// not the most efficient way.
name|responseText
operator|=
name|contentChars
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
name|responseText
argument_list|)
expr_stmt|;
comment|// For a one-way message or whatever, there may not be a content type.
comment|// throw away any encoding modifier.
name|String
name|contentType
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|connection
operator|.
name|getContentType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|contentType
operator|=
name|connection
operator|.
name|getContentType
argument_list|()
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
literal|"text/xml"
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
operator|||
literal|"application/xml"
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
operator|||
name|contentType
operator|.
name|endsWith
argument_list|(
literal|"+xml"
argument_list|)
condition|)
block|{
try|try
block|{
name|DocumentBuilderFactory
name|documentBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|documentBuilderFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|documentBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|contentBytes
argument_list|)
decl_stmt|;
name|InputSource
name|inputSource
init|=
operator|new
name|InputSource
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|inputSource
operator|.
name|setEncoding
argument_list|(
name|contentEncoding
argument_list|)
expr_stmt|;
name|Document
name|xmlDoc
init|=
name|builder
operator|.
name|parse
argument_list|(
name|inputSource
argument_list|)
decl_stmt|;
name|responseXml
operator|=
name|JsSimpleDomNode
operator|.
name|wrapNode
argument_list|(
name|getParentScope
argument_list|()
argument_list|,
name|xmlDoc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"ParserConfigurationError"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseXml
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Error parsing XML response"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|responseXml
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|readyState
operator|=
name|jsGet_DONE
argument_list|()
expr_stmt|;
name|notifyReadyStateChangeListener
argument_list|()
expr_stmt|;
if|if
condition|(
name|httpConnection
operator|!=
literal|null
condition|)
block|{
name|httpConnection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
name|errorFlag
operator|=
literal|true
expr_stmt|;
name|readyState
operator|=
name|jsGet_DONE
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|storedAsync
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"IO error reading response"
argument_list|,
name|ioException
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"NETWORK_ERR"
argument_list|)
expr_stmt|;
name|notifyReadyStateChangeListener
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|throwError
parameter_list|(
name|String
name|errorName
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Javascript throw: "
operator|+
name|errorName
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JavaScriptException
argument_list|(
name|Context
operator|.
name|javaToJS
argument_list|(
name|errorName
argument_list|,
name|getParentScope
argument_list|()
argument_list|)
argument_list|,
literal|"XMLHttpRequest"
argument_list|,
literal|0
argument_list|)
throw|;
block|}
specifier|private
name|byte
index|[]
name|utf8Bytes
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|ByteBuffer
name|bb
init|=
name|utf8
operator|.
name|encode
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
operator|new
name|byte
index|[
name|bb
operator|.
name|limit
argument_list|()
index|]
decl_stmt|;
name|bb
operator|.
name|get
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|val
return|;
block|}
specifier|private
name|byte
index|[]
name|domToUtf8
parameter_list|(
name|JsSimpleDomNode
name|xml
parameter_list|)
block|{
name|Node
name|node
init|=
name|xml
operator|.
name|getWrappedNode
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
operator|(
name|Document
operator|)
name|node
decl_stmt|;
comment|// assume that we're given the
comment|// entire document.
comment|// if that's an issue, we could code something more complex.
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|org
operator|.
name|jdom
operator|.
name|Document
name|jDocument
init|=
operator|new
name|DOMBuilder
argument_list|()
operator|.
name|build
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|org
operator|.
name|jdom
operator|.
name|output
operator|.
name|Format
name|format
init|=
name|org
operator|.
name|jdom
operator|.
name|output
operator|.
name|Format
operator|.
name|getRawFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|setEncoding
argument_list|(
literal|"utf-8"
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|XMLOutputter
argument_list|(
name|format
argument_list|)
operator|.
name|output
argument_list|(
name|jDocument
argument_list|,
name|baos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"impossible IO exception serializing XML"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|public
name|void
name|doAbort
parameter_list|()
block|{
comment|// this is messy.
block|}
specifier|public
name|String
name|doGetAllResponseHeaders
parameter_list|()
block|{
comment|// 1 check state.
if|if
condition|(
name|readyState
operator|==
name|jsGet_UNSENT
argument_list|()
operator|||
name|readyState
operator|==
name|jsGet_OPENED
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Invalid state"
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"INVALID_STATE_ERR"
argument_list|)
expr_stmt|;
block|}
comment|// 2 check error flag
if|if
condition|(
name|errorFlag
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"error flag set"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// 3 pile up the headers.
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headersEntry
range|:
name|responseHeaders
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|headersEntry
operator|.
name|getKey
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// why does the HTTP connection return a null key with the response code and text?
continue|continue;
block|}
name|builder
operator|.
name|append
argument_list|(
name|headersEntry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|value
range|:
name|headersEntry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setLength
argument_list|(
name|builder
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
comment|// trim extra comma/space
name|builder
operator|.
name|append
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|doGetResponseHeader
parameter_list|(
name|String
name|header
parameter_list|)
block|{
comment|// 1 check state.
if|if
condition|(
name|readyState
operator|==
name|jsGet_UNSENT
argument_list|()
operator|||
name|readyState
operator|==
name|jsGet_OPENED
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"invalid state"
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"INVALID_STATE_ERR"
argument_list|)
expr_stmt|;
block|}
comment|// 2 check header format, we don't do it.
comment|// 3 check error flag
if|if
condition|(
name|errorFlag
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"error flag"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|//4 -- oh, it's CASE-INSENSITIVE. Well, we do it the hard way.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headersEntry
range|:
name|responseHeaders
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|header
operator|.
name|equalsIgnoreCase
argument_list|(
name|headersEntry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|headersEntry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setLength
argument_list|(
name|builder
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
comment|// trim extra comma/space
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|doGetResponseText
parameter_list|()
block|{
comment|// 1 check state.
if|if
condition|(
name|readyState
operator|==
name|jsGet_UNSENT
argument_list|()
operator|||
name|readyState
operator|==
name|jsGet_OPENED
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"invalid state "
operator|+
name|readyState
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"INVALID_STATE_ERR"
argument_list|)
expr_stmt|;
block|}
comment|// 2 return what we have.
return|return
name|responseText
return|;
block|}
specifier|public
name|Object
name|doGetResponseXML
parameter_list|()
block|{
comment|// 1 check state.
if|if
condition|(
name|readyState
operator|==
name|jsGet_UNSENT
argument_list|()
operator|||
name|readyState
operator|==
name|jsGet_OPENED
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"invalid state"
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"INVALID_STATE_ERR"
argument_list|)
expr_stmt|;
block|}
return|return
name|responseXml
return|;
block|}
specifier|public
name|int
name|doGetStatus
parameter_list|()
block|{
if|if
condition|(
name|httpResponseCode
operator|==
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"invalid state"
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"INVALID_STATE_ERR"
argument_list|)
expr_stmt|;
block|}
return|return
name|httpResponseCode
return|;
block|}
specifier|public
name|String
name|doGetStatusText
parameter_list|()
block|{
if|if
condition|(
name|httpResponseText
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"invalid state"
argument_list|)
expr_stmt|;
name|throwError
argument_list|(
literal|"INVALID_STATE_ERR"
argument_list|)
expr_stmt|;
block|}
return|return
name|httpResponseText
return|;
block|}
comment|// CHECKSTYLE:OFF
specifier|public
name|Object
name|jsGet_onreadystatechange
parameter_list|()
block|{
return|return
name|readyStateChangeListener
return|;
block|}
specifier|public
name|void
name|jsSet_onreadystatechange
parameter_list|(
name|Object
name|listener
parameter_list|)
block|{
name|readyStateChangeListener
operator|=
name|listener
expr_stmt|;
block|}
specifier|public
name|int
name|jsGet_UNSENT
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|jsGet_OPENED
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
specifier|public
name|int
name|jsGet_HEADERS_RECEIVED
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
specifier|public
name|int
name|jsGet_LOADING
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
specifier|public
name|int
name|jsGet_DONE
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
specifier|public
name|int
name|jsGet_readyState
parameter_list|()
block|{
return|return
name|readyState
return|;
block|}
specifier|public
name|void
name|jsFunction_open
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|url
parameter_list|,
name|Object
name|asyncObj
parameter_list|,
name|Object
name|user
parameter_list|,
name|Object
name|password
parameter_list|)
block|{
name|Boolean
name|async
decl_stmt|;
if|if
condition|(
name|asyncObj
operator|==
name|Context
operator|.
name|getUndefinedValue
argument_list|()
condition|)
block|{
name|async
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
else|else
block|{
name|async
operator|=
operator|(
name|Boolean
operator|)
name|Context
operator|.
name|jsToJava
argument_list|(
name|asyncObj
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|user
operator|==
name|Context
operator|.
name|getUndefinedValue
argument_list|()
condition|)
block|{
name|user
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|user
operator|=
name|Context
operator|.
name|jsToJava
argument_list|(
name|user
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|password
operator|==
name|Context
operator|.
name|getUndefinedValue
argument_list|()
condition|)
block|{
name|password
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|password
operator|=
name|Context
operator|.
name|jsToJava
argument_list|(
name|password
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|doOpen
argument_list|(
name|method
argument_list|,
name|url
argument_list|,
name|async
argument_list|,
operator|(
name|String
operator|)
name|user
argument_list|,
operator|(
name|String
operator|)
name|password
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|jsFunction_setRequestHeader
parameter_list|(
name|String
name|header
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|doSetRequestHeader
argument_list|(
name|header
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|jsFunction_send
parameter_list|(
name|Object
name|arg
parameter_list|)
block|{
if|if
condition|(
name|arg
operator|==
name|Context
operator|.
name|getUndefinedValue
argument_list|()
condition|)
block|{
name|doSend
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|String
condition|)
block|{
name|doSend
argument_list|(
name|utf8Bytes
argument_list|(
operator|(
name|String
operator|)
name|arg
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arg
operator|instanceof
name|JsSimpleDomNode
condition|)
block|{
name|doSend
argument_list|(
name|domToUtf8
argument_list|(
operator|(
name|JsSimpleDomNode
operator|)
name|arg
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|throwError
argument_list|(
literal|"INVALID_ARG_TO_SEND"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|jsFunction_abort
parameter_list|()
block|{
name|doAbort
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|jsFunction_getAllResponseHeaders
parameter_list|()
block|{
return|return
name|doGetAllResponseHeaders
argument_list|()
return|;
block|}
specifier|public
name|String
name|jsFunction_getResponseHeader
parameter_list|(
name|String
name|header
parameter_list|)
block|{
return|return
name|doGetResponseHeader
argument_list|(
name|header
argument_list|)
return|;
block|}
specifier|public
name|String
name|jsGet_responseText
parameter_list|()
block|{
return|return
name|doGetResponseText
argument_list|()
return|;
block|}
specifier|public
name|Object
name|jsGet_responseXML
parameter_list|()
block|{
return|return
name|doGetResponseXML
argument_list|()
return|;
block|}
specifier|public
name|int
name|jsGet_status
parameter_list|()
block|{
return|return
name|doGetStatus
argument_list|()
return|;
block|}
specifier|public
name|String
name|jsGet_statusText
parameter_list|()
block|{
return|return
name|doGetStatusText
argument_list|()
return|;
block|}
block|}
end_class

end_unit

