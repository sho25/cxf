begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|test
operator|.
name|AbstractCXFSpringTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|GenericApplicationContext
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|QueryHandlerTest
extends|extends
name|AbstractCXFSpringTest
block|{
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"utf-8"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|QueryHandlerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Endpoint
name|hwEndpoint
decl_stmt|;
specifier|private
name|Endpoint
name|dlbEndpoint
decl_stmt|;
specifier|private
name|Endpoint
name|hwgEndpoint
decl_stmt|;
specifier|public
name|QueryHandlerTest
parameter_list|()
throws|throws
name|Exception
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc}*/
annotation|@
name|Override
specifier|protected
name|void
name|additionalSpringConfiguration
parameter_list|(
name|GenericApplicationContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
comment|// we don't need any.
block|}
comment|/** {@inheritDoc}*/
annotation|@
name|Override
specifier|protected
name|String
index|[]
name|getConfigLocations
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"classpath:HelloWorldDocLitBeans.xml"
block|,
literal|"classpath:DocLitBareClientTestBeans.xml"
block|,
literal|"classpath:HelloWorldGreeterBeans.xml"
block|}
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|ServerFactoryBean
name|serverFactoryBean
init|=
name|getBean
argument_list|(
name|ServerFactoryBean
operator|.
name|class
argument_list|,
literal|"hw-service-endpoint"
argument_list|)
decl_stmt|;
name|hwEndpoint
operator|=
name|serverFactoryBean
operator|.
name|getServer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
expr_stmt|;
name|serverFactoryBean
operator|=
name|getBean
argument_list|(
name|ServerFactoryBean
operator|.
name|class
argument_list|,
literal|"hwg-service-endpoint"
argument_list|)
expr_stmt|;
name|hwgEndpoint
operator|=
name|serverFactoryBean
operator|.
name|getServer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
expr_stmt|;
name|serverFactoryBean
operator|=
name|getBean
argument_list|(
name|ServerFactoryBean
operator|.
name|class
argument_list|,
literal|"dlb-service-endpoint"
argument_list|)
expr_stmt|;
name|dlbEndpoint
operator|=
name|serverFactoryBean
operator|.
name|getServer
argument_list|()
operator|.
name|getEndpoint
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|getStringFromURL
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|jsStream
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
return|return
name|readStringFromStream
argument_list|(
name|jsStream
argument_list|)
return|;
block|}
specifier|private
name|String
name|readStringFromStream
parameter_list|(
name|InputStream
name|jsStream
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStreamReader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|jsStream
argument_list|,
name|UTF8
argument_list|)
decl_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
name|isr
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|StringBuilder
name|js
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|tok
init|=
name|line
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|tok
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
name|String
name|token
init|=
name|tok
index|[
name|x
index|]
decl_stmt|;
name|js
operator|.
name|append
argument_list|(
literal|"  "
operator|+
name|token
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
return|return
name|js
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|hwQueryTest
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|endpointURL
init|=
operator|new
name|URL
argument_list|(
name|hwEndpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|+
literal|"?js"
argument_list|)
decl_stmt|;
name|String
name|js
init|=
name|getStringFromURL
argument_list|(
name|endpointURL
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
literal|0
argument_list|,
name|js
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dlbQueryTest
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|finest
argument_list|(
literal|"logged to avoid warning on LOG"
argument_list|)
expr_stmt|;
name|URL
name|endpointURL
init|=
operator|new
name|URL
argument_list|(
name|dlbEndpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|+
literal|"?js"
argument_list|)
decl_stmt|;
name|URLConnection
name|connection
init|=
name|endpointURL
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/javascript;charset=UTF-8"
argument_list|,
name|connection
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|jsStream
init|=
name|connection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|String
name|js
init|=
name|readStringFromStream
argument_list|(
name|jsStream
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
literal|""
argument_list|,
name|js
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|utilsTest
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|endpointURL
init|=
operator|new
name|URL
argument_list|(
name|dlbEndpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|+
literal|"?js&nojsutils"
argument_list|)
decl_stmt|;
name|URLConnection
name|connection
init|=
name|endpointURL
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"application/javascript;charset=UTF-8"
argument_list|,
name|connection
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|jsStream
init|=
name|connection
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|String
name|jsString
init|=
name|readStringFromStream
argument_list|(
name|jsStream
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|jsString
operator|.
name|contains
argument_list|(
literal|"function CxfApacheOrgUtil"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// this is in here since we need to use the query handler to perform the test.
annotation|@
name|org
operator|.
name|junit
operator|.
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|namespacePrefixTest
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|endpointURL
init|=
operator|new
name|URL
argument_list|(
name|hwgEndpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|+
literal|"?js"
argument_list|)
decl_stmt|;
name|String
name|js
init|=
name|getStringFromURL
argument_list|(
name|endpointURL
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|js
operator|.
name|contains
argument_list|(
literal|"hg_Greeter"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

