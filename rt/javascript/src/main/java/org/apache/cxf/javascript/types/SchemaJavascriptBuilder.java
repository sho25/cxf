begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|XmlSchemaTools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|JavascriptUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|NameManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|NamespacePrefixAccumulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|ParticleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|UnsupportedConstruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|XmlSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|SchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAny
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObjectTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_comment
comment|/**  * Generate Javascript for a schema, and provide information needed for the  * service builder. As of this pass, there is no support for non-sequence types  * or for attribute mappings.  *   * @author bimargulies  */
end_comment

begin_class
specifier|public
class|class
name|SchemaJavascriptBuilder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SchemaJavascriptBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|anyPrefixCounter
decl_stmt|;
specifier|private
name|SchemaCollection
name|xmlSchemaCollection
decl_stmt|;
specifier|private
name|NameManager
name|nameManager
decl_stmt|;
specifier|private
name|NamespacePrefixAccumulator
name|prefixAccumulator
decl_stmt|;
specifier|private
name|SchemaInfo
name|schemaInfo
decl_stmt|;
comment|// In general, I (bimargulies) hate fields that are temporary communications
comment|// between members of a class. However, given the style restrictions on the
comment|// number of parameters, it's the least of the evils.
specifier|private
name|StringBuilder
name|code
decl_stmt|;
specifier|private
name|StringBuilder
name|accessors
decl_stmt|;
specifier|private
name|JavascriptUtils
name|utils
decl_stmt|;
specifier|public
name|SchemaJavascriptBuilder
parameter_list|(
name|SchemaCollection
name|schemaCollection
parameter_list|,
name|NamespacePrefixAccumulator
name|prefixAccumulator
parameter_list|,
name|NameManager
name|nameManager
parameter_list|)
block|{
name|this
operator|.
name|xmlSchemaCollection
operator|=
name|schemaCollection
expr_stmt|;
name|this
operator|.
name|nameManager
operator|=
name|nameManager
expr_stmt|;
name|this
operator|.
name|prefixAccumulator
operator|=
name|prefixAccumulator
expr_stmt|;
block|}
specifier|public
name|String
name|generateCodeForSchema
parameter_list|(
name|SchemaInfo
name|schema
parameter_list|)
block|{
name|schemaInfo
operator|=
name|schema
expr_stmt|;
name|code
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"//\n"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"// Definitions for schema: "
operator|+
name|schema
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|schema
operator|.
name|getSystemId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|code
operator|.
name|append
argument_list|(
literal|"\n//  "
operator|+
name|schema
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|code
operator|.
name|append
argument_list|(
literal|"\n//\n"
argument_list|)
expr_stmt|;
name|XmlSchemaObjectTable
name|schemaTypes
init|=
name|schema
operator|.
name|getSchema
argument_list|()
operator|.
name|getSchemaTypes
argument_list|()
decl_stmt|;
name|Iterator
name|namesIterator
init|=
name|schemaTypes
operator|.
name|getNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|namesIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QName
name|name
init|=
operator|(
name|QName
operator|)
name|namesIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|XmlSchemaObject
name|xmlSchemaObject
init|=
operator|(
name|XmlSchemaObject
operator|)
name|schemaTypes
operator|.
name|getItem
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlSchemaObject
operator|instanceof
name|XmlSchemaComplexType
condition|)
block|{
try|try
block|{
name|XmlSchemaComplexType
name|complexType
init|=
operator|(
name|XmlSchemaComplexType
operator|)
name|xmlSchemaObject
decl_stmt|;
if|if
condition|(
operator|!
name|JavascriptUtils
operator|.
name|notVeryComplexType
argument_list|(
name|complexType
argument_list|)
operator|&&
name|complexType
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|complexTypeConstructorAndAccessors
argument_list|(
name|complexType
operator|.
name|getQName
argument_list|()
argument_list|,
name|complexType
argument_list|)
expr_stmt|;
name|complexTypeSerializerFunction
argument_list|(
name|complexType
operator|.
name|getQName
argument_list|()
argument_list|,
name|complexType
argument_list|)
expr_stmt|;
name|domDeserializerFunction
argument_list|(
name|complexType
operator|.
name|getQName
argument_list|()
argument_list|,
name|complexType
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedConstruct
name|usc
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
name|usc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
comment|// it could be empty, but the style checker
comment|// would complain.
block|}
block|}
elseif|else
if|if
condition|(
name|xmlSchemaObject
operator|instanceof
name|XmlSchemaSimpleType
condition|)
block|{
name|XmlSchemaSimpleType
name|simpleType
init|=
operator|(
name|XmlSchemaSimpleType
operator|)
name|xmlSchemaObject
decl_stmt|;
if|if
condition|(
name|XmlSchemaTools
operator|.
name|isEumeration
argument_list|(
name|simpleType
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|XmlSchemaTools
operator|.
name|enumeratorValues
argument_list|(
name|simpleType
argument_list|)
decl_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"//\n"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"// Simple type (enumeration) "
operator|+
name|simpleType
operator|.
name|getQName
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"//\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|code
operator|.
name|append
argument_list|(
literal|"// - "
operator|+
name|value
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// now add in global elements with anonymous types.
name|schemaTypes
operator|=
name|schema
operator|.
name|getSchema
argument_list|()
operator|.
name|getElements
argument_list|()
expr_stmt|;
name|namesIterator
operator|=
name|schemaTypes
operator|.
name|getNames
argument_list|()
expr_stmt|;
while|while
condition|(
name|namesIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QName
name|name
init|=
operator|(
name|QName
operator|)
name|namesIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|XmlSchemaObject
name|xmlSchemaObject
init|=
operator|(
name|XmlSchemaObject
operator|)
name|schemaTypes
operator|.
name|getItem
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlSchemaObject
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
comment|// the
comment|// alternative
comment|// is too wierd
comment|// to
comment|// contemplate.
try|try
block|{
name|XmlSchemaElement
name|element
init|=
operator|(
name|XmlSchemaElement
operator|)
name|xmlSchemaObject
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|getSchemaTypeName
argument_list|()
operator|==
literal|null
operator|&&
name|element
operator|.
name|getSchemaType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|"ELEMENT_MISSING_TYPE"
argument_list|,
name|LOG
argument_list|,
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|element
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|,
name|schema
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|XmlSchemaType
name|type
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|getSchemaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|element
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|schema
operator|.
name|getSchema
argument_list|()
operator|.
name|getTypeByName
argument_list|(
name|element
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|type
operator|instanceof
name|XmlSchemaComplexType
operator|)
condition|)
block|{
comment|// we never make classes for simple type.
continue|continue;
block|}
name|XmlSchemaComplexType
name|complexType
init|=
operator|(
name|XmlSchemaComplexType
operator|)
name|type
decl_stmt|;
comment|// for named types we don't bother to generate for the
comment|// element.
if|if
condition|(
operator|!
name|JavascriptUtils
operator|.
name|notVeryComplexType
argument_list|(
name|complexType
argument_list|)
operator|&&
name|complexType
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|complexTypeConstructorAndAccessors
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|complexType
argument_list|)
expr_stmt|;
name|complexTypeSerializerFunction
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|complexType
argument_list|)
expr_stmt|;
name|domDeserializerFunction
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|complexType
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedConstruct
name|usc
parameter_list|)
block|{
continue|continue;
comment|// it could be empty, but the style checker
comment|// would complain.
block|}
block|}
block|}
name|String
name|returnValue
init|=
name|code
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|finer
argument_list|(
name|returnValue
argument_list|)
expr_stmt|;
return|return
name|returnValue
return|;
block|}
comment|// In general, I (bimargulies) hate fields that are temporary communications
comment|// between members of a class. However, given the style restrictions on the
comment|// number
comment|// of parameters, it's the least of the evils.
specifier|public
name|void
name|complexTypeConstructorAndAccessors
parameter_list|(
name|QName
name|name
parameter_list|,
name|XmlSchemaComplexType
name|type
parameter_list|)
block|{
name|accessors
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|utils
operator|=
operator|new
name|JavascriptUtils
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|XmlSchemaSequence
name|sequence
init|=
name|XmlSchemaUtils
operator|.
name|getSequence
argument_list|(
name|type
argument_list|)
decl_stmt|;
specifier|final
name|String
name|elementPrefix
init|=
literal|"this._"
decl_stmt|;
name|String
name|typeObjectName
init|=
name|nameManager
operator|.
name|getJavascriptName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"//\n"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"// Constructor for XML Schema item "
operator|+
name|name
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"//\n"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"function "
operator|+
name|typeObjectName
operator|+
literal|" () {\n"
argument_list|)
expr_stmt|;
comment|// to assist in debugging we put a type property into every object.
name|utils
operator|.
name|appendLine
argument_list|(
literal|"this.typeMarker = '"
operator|+
name|typeObjectName
operator|+
literal|"';"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sequence
operator|.
name|getItems
argument_list|()
operator|.
name|getCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|XmlSchemaObject
name|thing
init|=
name|sequence
operator|.
name|getItems
argument_list|()
operator|.
name|getItem
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|constructOneElement
argument_list|(
name|type
argument_list|,
name|sequence
argument_list|,
name|elementPrefix
argument_list|,
name|typeObjectName
argument_list|,
name|thing
argument_list|)
expr_stmt|;
block|}
name|code
operator|.
name|append
argument_list|(
literal|"}\n\n"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
name|accessors
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|constructOneElement
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|,
name|XmlSchemaSequence
name|sequence
parameter_list|,
specifier|final
name|String
name|elementPrefix
parameter_list|,
name|String
name|typeObjectName
parameter_list|,
name|XmlSchemaObject
name|thing
parameter_list|)
block|{
name|ParticleInfo
name|itemInfo
init|=
name|ParticleInfo
operator|.
name|forLocalItem
argument_list|(
name|thing
argument_list|,
name|schemaInfo
operator|.
name|getSchema
argument_list|()
argument_list|,
name|xmlSchemaCollection
argument_list|,
name|prefixAccumulator
argument_list|,
name|type
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|accessorSuffix
init|=
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|itemInfo
operator|.
name|getJavascriptName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|accessorName
init|=
name|typeObjectName
operator|+
literal|"_get"
operator|+
name|accessorSuffix
decl_stmt|;
name|String
name|getFunctionProperty
init|=
name|typeObjectName
operator|+
literal|".prototype.get"
operator|+
name|accessorSuffix
decl_stmt|;
name|String
name|setFunctionProperty
init|=
name|typeObjectName
operator|+
literal|".prototype.set"
operator|+
name|accessorSuffix
decl_stmt|;
name|accessors
operator|.
name|append
argument_list|(
literal|"//\n"
argument_list|)
expr_stmt|;
name|accessors
operator|.
name|append
argument_list|(
literal|"// accessor is "
operator|+
name|getFunctionProperty
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|accessors
operator|.
name|append
argument_list|(
literal|"// element get for "
operator|+
name|itemInfo
operator|.
name|getJavascriptName
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|itemInfo
operator|.
name|isAny
argument_list|()
condition|)
block|{
name|accessors
operator|.
name|append
argument_list|(
literal|"// - xs:any\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|itemInfo
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|accessors
operator|.
name|append
argument_list|(
literal|"// - element type is "
operator|+
name|itemInfo
operator|.
name|getType
argument_list|()
operator|.
name|getQName
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|XmlSchemaUtils
operator|.
name|isParticleOptional
argument_list|(
name|itemInfo
operator|.
name|getParticle
argument_list|()
argument_list|)
condition|)
block|{
name|accessors
operator|.
name|append
argument_list|(
literal|"// - optional element\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|accessors
operator|.
name|append
argument_list|(
literal|"// - required element\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|XmlSchemaUtils
operator|.
name|isParticleArray
argument_list|(
name|itemInfo
operator|.
name|getParticle
argument_list|()
argument_list|)
condition|)
block|{
name|accessors
operator|.
name|append
argument_list|(
literal|"// - array\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|itemInfo
operator|.
name|isNillable
argument_list|()
condition|)
block|{
name|accessors
operator|.
name|append
argument_list|(
literal|"// - nillable\n"
argument_list|)
expr_stmt|;
block|}
name|accessors
operator|.
name|append
argument_list|(
literal|"//\n"
argument_list|)
expr_stmt|;
name|accessors
operator|.
name|append
argument_list|(
literal|"// element set for "
operator|+
name|itemInfo
operator|.
name|getJavascriptName
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|accessors
operator|.
name|append
argument_list|(
literal|"// setter function is is "
operator|+
name|setFunctionProperty
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|accessors
operator|.
name|append
argument_list|(
literal|"//\n"
argument_list|)
expr_stmt|;
name|accessors
operator|.
name|append
argument_list|(
literal|"function "
operator|+
name|accessorName
operator|+
literal|"() { return this._"
operator|+
name|itemInfo
operator|.
name|getJavascriptName
argument_list|()
operator|+
literal|";}\n\n"
argument_list|)
expr_stmt|;
name|accessors
operator|.
name|append
argument_list|(
name|getFunctionProperty
operator|+
literal|" = "
operator|+
name|accessorName
operator|+
literal|";\n\n"
argument_list|)
expr_stmt|;
name|accessorName
operator|=
name|typeObjectName
operator|+
literal|"_set"
operator|+
name|accessorSuffix
expr_stmt|;
name|accessors
operator|.
name|append
argument_list|(
literal|"function "
operator|+
name|accessorName
operator|+
literal|"(value) { this._"
operator|+
name|itemInfo
operator|.
name|getJavascriptName
argument_list|()
operator|+
literal|" = value;}\n\n"
argument_list|)
expr_stmt|;
name|accessors
operator|.
name|append
argument_list|(
name|setFunctionProperty
operator|+
literal|" = "
operator|+
name|accessorName
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|XmlSchemaUtils
operator|.
name|isParticleOptional
argument_list|(
name|itemInfo
operator|.
name|getParticle
argument_list|()
argument_list|)
operator|||
operator|(
name|itemInfo
operator|.
name|isNillable
argument_list|()
operator|&&
operator|!
name|XmlSchemaUtils
operator|.
name|isParticleArray
argument_list|(
name|itemInfo
operator|.
name|getParticle
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|utils
operator|.
name|appendLine
argument_list|(
literal|"this._"
operator|+
name|itemInfo
operator|.
name|getJavascriptName
argument_list|()
operator|+
literal|" = null;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|XmlSchemaUtils
operator|.
name|isParticleArray
argument_list|(
name|itemInfo
operator|.
name|getParticle
argument_list|()
argument_list|)
condition|)
block|{
name|utils
operator|.
name|appendLine
argument_list|(
literal|"this._"
operator|+
name|itemInfo
operator|.
name|getJavascriptName
argument_list|()
operator|+
literal|" = [];"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|itemInfo
operator|.
name|isAny
argument_list|()
operator|||
name|itemInfo
operator|.
name|getType
argument_list|()
operator|instanceof
name|XmlSchemaComplexType
condition|)
block|{
comment|// even for required complex elements, we leave them null.
comment|// otherwise, we could end up in a cycle or otherwise miserable. The
comment|// application code is responsible for this.
name|utils
operator|.
name|appendLine
argument_list|(
literal|"this._"
operator|+
name|itemInfo
operator|.
name|getJavascriptName
argument_list|()
operator|+
literal|" = null;"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|itemInfo
operator|.
name|getDefaultValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|itemInfo
operator|.
name|setDefaultValue
argument_list|(
name|utils
operator|.
name|getDefaultValueForSimpleType
argument_list|(
name|itemInfo
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|utils
operator|.
name|appendLine
argument_list|(
literal|"this._"
operator|+
name|itemInfo
operator|.
name|getJavascriptName
argument_list|()
operator|+
literal|" = "
operator|+
name|itemInfo
operator|.
name|getDefaultValue
argument_list|()
operator|+
literal|";"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Produce a serializer function for a type. These functions emit the      * surrounding element XML if the caller supplies an XML element name. It's      * not quite as simple as that, though. The element name may need namespace      * qualification, and this function will add more namespace prefixes as      * needed.      *       * @param type      * @return      */
specifier|public
name|void
name|complexTypeSerializerFunction
parameter_list|(
name|QName
name|name
parameter_list|,
name|XmlSchemaComplexType
name|type
parameter_list|)
block|{
name|StringBuilder
name|bodyCode
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|JavascriptUtils
name|bodyUtils
init|=
operator|new
name|JavascriptUtils
argument_list|(
name|bodyCode
argument_list|)
decl_stmt|;
name|bodyUtils
operator|.
name|setXmlStringAccumulator
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|complexTypeSerializerBody
argument_list|(
name|type
argument_list|,
literal|"this._"
argument_list|,
name|bodyUtils
argument_list|)
expr_stmt|;
name|utils
operator|=
operator|new
name|JavascriptUtils
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|String
name|functionName
init|=
name|nameManager
operator|.
name|getJavascriptName
argument_list|(
name|name
argument_list|)
operator|+
literal|"_"
operator|+
literal|"serialize"
decl_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"//\n"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"// Serialize "
operator|+
name|name
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"//\n"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"function "
operator|+
name|functionName
operator|+
literal|"(cxfjsutils, elementName, extraNamespaces) {\n"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|startXmlStringAccumulator
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|startIf
argument_list|(
literal|"elementName != null"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendString
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendExpression
argument_list|(
literal|"elementName"
argument_list|)
expr_stmt|;
comment|// now add any accumulated namespaces.
name|String
name|moreNamespaces
init|=
name|prefixAccumulator
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|moreNamespaces
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|utils
operator|.
name|appendString
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendString
argument_list|(
name|moreNamespaces
argument_list|)
expr_stmt|;
block|}
name|utils
operator|.
name|startIf
argument_list|(
literal|"extraNamespaces"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendExpression
argument_list|(
literal|"' ' + extraNamespaces"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|endBlock
argument_list|()
expr_stmt|;
name|utils
operator|.
name|appendString
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|endBlock
argument_list|()
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
name|bodyCode
argument_list|)
expr_stmt|;
name|utils
operator|.
name|startIf
argument_list|(
literal|"elementName != null"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendString
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendExpression
argument_list|(
literal|"elementName"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendString
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|endBlock
argument_list|()
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"return xml;"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"}\n\n"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
name|nameManager
operator|.
name|getJavascriptName
argument_list|(
name|name
argument_list|)
operator|+
literal|".prototype.serialize = "
operator|+
name|functionName
operator|+
literal|";\n\n"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Build the serialization code for a complex type. At the top level, this      * operates on single items, so it does not pay attention to minOccurs and      * maxOccurs. However, as it works through the sequence, it manages optional      * elements and arrays.      *       * @param type      * @param elementPrefix      * @param bodyNamespaceURIs      * @return      */
specifier|protected
name|void
name|complexTypeSerializerBody
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|,
name|String
name|elementPrefix
parameter_list|,
name|JavascriptUtils
name|bodyUtils
parameter_list|)
block|{
name|XmlSchemaSequence
name|sequence
init|=
name|XmlSchemaUtils
operator|.
name|getSequence
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sequence
operator|.
name|getItems
argument_list|()
operator|.
name|getCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|XmlSchemaObject
name|sequenceItem
init|=
operator|(
name|XmlSchemaObject
operator|)
name|sequence
operator|.
name|getItems
argument_list|()
operator|.
name|getItem
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ParticleInfo
name|itemInfo
init|=
name|ParticleInfo
operator|.
name|forLocalItem
argument_list|(
name|sequenceItem
argument_list|,
name|schemaInfo
operator|.
name|getSchema
argument_list|()
argument_list|,
name|xmlSchemaCollection
argument_list|,
name|prefixAccumulator
argument_list|,
name|type
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
comment|// If the item is 'any', it could be ANY of our top-level elements.
if|if
condition|(
name|itemInfo
operator|.
name|isAny
argument_list|()
condition|)
block|{
name|serializeAny
argument_list|(
name|itemInfo
argument_list|,
name|bodyUtils
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bodyUtils
operator|.
name|generateCodeToSerializeElement
argument_list|(
name|itemInfo
argument_list|,
literal|"this._"
argument_list|,
name|xmlSchemaCollection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|serializeAny
parameter_list|(
name|ParticleInfo
name|itemInfo
parameter_list|,
name|JavascriptUtils
name|bodyUtils
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|"cxfjsany"
operator|+
name|anyPrefixCounter
decl_stmt|;
name|anyPrefixCounter
operator|++
expr_stmt|;
name|bodyUtils
operator|.
name|generateCodeToSerializeAny
argument_list|(
name|itemInfo
argument_list|,
name|prefix
argument_list|,
name|xmlSchemaCollection
argument_list|)
expr_stmt|;
block|}
comment|/**      * Generate a JavaScript function that takes an element for a complex type      * and walks through its children using them to fill in the values for a      * JavaScript object.      *       * @param type schema type for the process      * @return the string contents of the JavaScript.      */
specifier|public
name|void
name|domDeserializerFunction
parameter_list|(
name|QName
name|name
parameter_list|,
name|XmlSchemaComplexType
name|type
parameter_list|)
block|{
name|utils
operator|=
operator|new
name|JavascriptUtils
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|XmlSchemaSequence
name|sequence
init|=
literal|null
decl_stmt|;
name|sequence
operator|=
name|XmlSchemaUtils
operator|.
name|getSequence
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|String
name|typeObjectName
init|=
name|nameManager
operator|.
name|getJavascriptName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"function "
operator|+
name|typeObjectName
operator|+
literal|"_deserialize (cxfjsutils, element) {\n"
argument_list|)
expr_stmt|;
comment|// create the object we are deserializing into.
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var newobject = new "
operator|+
name|typeObjectName
operator|+
literal|"();"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"cxfjsutils.trace('element: ' + cxfjsutils.traceElementName(element));"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var curElement = cxfjsutils.getFirstElementChild(element);"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var item;"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sequence
operator|.
name|getItems
argument_list|()
operator|.
name|getCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|utils
operator|.
name|appendLine
argument_list|(
literal|"cxfjsutils.trace('curElement: ' + cxfjsutils.traceElementName(curElement));"
argument_list|)
expr_stmt|;
name|XmlSchemaObject
name|thing
init|=
name|sequence
operator|.
name|getItems
argument_list|()
operator|.
name|getItem
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ParticleInfo
name|itemInfo
init|=
name|ParticleInfo
operator|.
name|forLocalItem
argument_list|(
name|thing
argument_list|,
name|schemaInfo
operator|.
name|getSchema
argument_list|()
argument_list|,
name|xmlSchemaCollection
argument_list|,
name|prefixAccumulator
argument_list|,
name|type
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|itemInfo
operator|.
name|isAny
argument_list|()
condition|)
block|{
name|ParticleInfo
name|nextItem
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|!=
name|sequence
operator|.
name|getItems
argument_list|()
operator|.
name|getCount
argument_list|()
operator|-
literal|1
condition|)
block|{
name|XmlSchemaObject
name|nextThing
init|=
name|sequence
operator|.
name|getItems
argument_list|()
operator|.
name|getItem
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|nextItem
operator|=
name|ParticleInfo
operator|.
name|forLocalItem
argument_list|(
name|nextThing
argument_list|,
name|schemaInfo
operator|.
name|getSchema
argument_list|()
argument_list|,
name|xmlSchemaCollection
argument_list|,
name|prefixAccumulator
argument_list|,
name|type
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
comment|// theoretically, you could have two anys with different
comment|// namespaces.
if|if
condition|(
name|nextItem
operator|.
name|isAny
argument_list|()
condition|)
block|{
name|unsupportedConstruct
argument_list|(
literal|"MULTIPLE_ANY"
argument_list|,
name|type
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|deserializeAny
argument_list|(
name|type
argument_list|,
name|itemInfo
argument_list|,
name|nextItem
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deserializeElement
argument_list|(
name|type
argument_list|,
name|thing
argument_list|)
expr_stmt|;
block|}
block|}
name|utils
operator|.
name|appendLine
argument_list|(
literal|"return newobject;"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"}\n\n"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|buildNamespaceList
parameter_list|(
name|String
name|anyNamespaceSpec
parameter_list|)
block|{
name|StringBuilder
name|nslist
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
index|[]
name|namespaces
init|=
name|anyNamespaceSpec
operator|.
name|split
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
name|nslist
operator|.
name|append
argument_list|(
literal|"[ "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|namespaces
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
name|String
name|ns
init|=
name|namespaces
index|[
name|x
index|]
decl_stmt|;
name|nslist
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"##targetNamespace"
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|nslist
operator|.
name|append
argument_list|(
name|schemaInfo
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"##local"
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|)
block|{
comment|// nothing, empty string
block|}
else|else
block|{
name|nslist
operator|.
name|append
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
name|nslist
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|<
name|namespaces
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|nslist
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|nslist
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|nslist
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|deserializeAny
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|,
name|ParticleInfo
name|itemInfo
parameter_list|,
name|ParticleInfo
name|nextItem
parameter_list|)
block|{
name|XmlSchemaAny
name|any
init|=
operator|(
name|XmlSchemaAny
operator|)
name|itemInfo
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|boolean
name|array
init|=
name|XmlSchemaUtils
operator|.
name|isParticleArray
argument_list|(
name|any
argument_list|)
decl_stmt|;
name|boolean
name|optional
init|=
name|XmlSchemaUtils
operator|.
name|isParticleOptional
argument_list|(
name|any
argument_list|)
decl_stmt|;
if|if
condition|(
name|array
condition|)
block|{
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var anyObject = [];"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var anyObject = null;"
argument_list|)
expr_stmt|;
block|}
name|String
name|anyNamespaceSpec
init|=
name|any
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
comment|// we aren't dealing with any-after-any.
name|XmlSchemaElement
name|nextElement
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nextItem
operator|!=
literal|null
condition|)
block|{
name|nextElement
operator|=
operator|(
name|XmlSchemaElement
operator|)
name|nextItem
operator|.
name|getParticle
argument_list|()
expr_stmt|;
block|}
name|String
name|matchType
decl_stmt|;
name|String
name|namespaceList
init|=
literal|"[]"
decl_stmt|;
if|if
condition|(
name|anyNamespaceSpec
operator|==
literal|null
operator|||
literal|"##any"
operator|.
name|equals
argument_list|(
name|anyNamespaceSpec
argument_list|)
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|anyNamespaceSpec
argument_list|)
condition|)
block|{
name|matchType
operator|=
literal|"org_apache_cxf_any_ns_matcher.ANY"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"##other"
operator|.
name|equals
argument_list|(
name|anyNamespaceSpec
argument_list|)
condition|)
block|{
name|matchType
operator|=
literal|"org_apache_cxf_any_ns_matcher.OTHER"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"##local"
operator|.
name|equals
argument_list|(
name|anyNamespaceSpec
argument_list|)
condition|)
block|{
name|matchType
operator|=
literal|"org_apache_cxf_any_ns_matcher.LOCAL"
expr_stmt|;
block|}
else|else
block|{
name|matchType
operator|=
literal|"org_apache_cxf_any_ns_matcher.LISTED"
expr_stmt|;
name|namespaceList
operator|=
name|buildNamespaceList
argument_list|(
name|anyNamespaceSpec
argument_list|)
expr_stmt|;
block|}
name|String
name|nextLocalPartConstant
init|=
literal|"null"
decl_stmt|;
if|if
condition|(
name|nextElement
operator|!=
literal|null
condition|)
block|{
name|nextLocalPartConstant
operator|=
literal|"'"
operator|+
name|nextElement
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"'"
expr_stmt|;
block|}
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var matcher = new org_apache_cxf_any_ns_matcher("
operator|+
name|matchType
operator|+
literal|", '"
operator|+
name|schemaInfo
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"'"
operator|+
literal|", "
operator|+
name|namespaceList
operator|+
literal|", "
operator|+
name|nextLocalPartConstant
operator|+
literal|");"
argument_list|)
expr_stmt|;
if|if
condition|(
name|array
condition|)
block|{
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var anyNeeded = "
operator|+
name|any
operator|.
name|getMinOccurs
argument_list|()
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var anyAllowed = "
operator|+
name|any
operator|.
name|getMaxOccurs
argument_list|()
operator|+
literal|";"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|optional
condition|)
block|{
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var anyNeeded = 0;"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var anyAllowed = 1;"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var anyNeeded = 1;"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var anyAllowed = 1;"
argument_list|)
expr_stmt|;
block|}
name|utils
operator|.
name|startWhile
argument_list|(
literal|"anyNeeded> 0 || anyAllowed> 0"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var anyURI;"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var anyLocalPart;"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var anyMatched = false;"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|startIf
argument_list|(
literal|"curElement"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"anyURI = cxfjsutils.getElementNamespaceURI(curElement);"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"anyLocalPart = cxfjsutils.getNodeLocalName(curElement);"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var anyQName = '{' + anyURI + '}' + anyLocalPart;"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"cxfjsutils.trace('any match: ' + anyQName);"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"anyMatched = matcher.match(anyURI, anyLocalPart)"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"cxfjsutils.trace(' --> ' + anyMatched);"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|endBlock
argument_list|()
expr_stmt|;
comment|// curElement != null
name|utils
operator|.
name|startIf
argument_list|(
literal|"anyMatched"
argument_list|)
expr_stmt|;
comment|// if match
name|utils
operator|.
name|appendLine
argument_list|(
literal|"anyDeserializer = "
operator|+
literal|"cxfjsutils.interfaceObject.globalElementDeserializers[anyQName];"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"cxfjsutils.trace(' deserializer: ' + anyDeserializer);"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|startIf
argument_list|(
literal|"anyDeserializer"
argument_list|)
expr_stmt|;
comment|// if complex/serializer function
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var anyValue = anyDeserializer(cxfjsutils, curElement);"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendElse
argument_list|()
expr_stmt|;
comment|// else complex/serializer function
comment|// TODO: for simple types we really need a dictionary of the simple type qnames.
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var anyValue = curElement.nodeValue;"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|endBlock
argument_list|()
expr_stmt|;
comment|// complex/serializer function
if|if
condition|(
name|array
condition|)
block|{
name|utils
operator|.
name|appendLine
argument_list|(
literal|"anyObject.push(anyValue);"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|utils
operator|.
name|appendLine
argument_list|(
literal|"anyObject = anyValue;"
argument_list|)
expr_stmt|;
block|}
name|utils
operator|.
name|appendLine
argument_list|(
literal|"anyNeeded--;"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"anyAllowed--;"
argument_list|)
expr_stmt|;
comment|// if we consumed the element, we advance.
name|utils
operator|.
name|appendLine
argument_list|(
literal|"curElement = cxfjsutils.getNextElementSibling(curElement);"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendElse
argument_list|()
expr_stmt|;
comment|// match
comment|// non-matching case
name|utils
operator|.
name|startIf
argument_list|(
literal|"anyNeeded> 0"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"throw 'not enough ws:any elements';"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|endBlock
argument_list|()
expr_stmt|;
comment|// non-match+required
name|utils
operator|.
name|endBlock
argument_list|()
expr_stmt|;
comment|// match/non-match.
name|utils
operator|.
name|endBlock
argument_list|()
expr_stmt|;
comment|// while
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var anyHolder = new org_apache_cxf_any_holder(anyURI, anyLocalPart, anyValue);"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"newobject.setAny(anyHolder);"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deserializeElement
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|,
name|XmlSchemaObject
name|thing
parameter_list|)
block|{
name|ParticleInfo
name|itemInfo
init|=
name|ParticleInfo
operator|.
name|forLocalItem
argument_list|(
name|thing
argument_list|,
name|schemaInfo
operator|.
name|getSchema
argument_list|()
argument_list|,
name|xmlSchemaCollection
argument_list|,
name|prefixAccumulator
argument_list|,
name|type
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
name|XmlSchemaType
name|itemType
init|=
name|itemInfo
operator|.
name|getType
argument_list|()
decl_stmt|;
name|boolean
name|simple
init|=
name|itemType
operator|instanceof
name|XmlSchemaSimpleType
operator|||
name|JavascriptUtils
operator|.
name|notVeryComplexType
argument_list|(
name|itemType
argument_list|)
decl_stmt|;
name|boolean
name|mtomCandidate
init|=
name|JavascriptUtils
operator|.
name|mtomCandidateType
argument_list|(
name|itemType
argument_list|)
decl_stmt|;
name|String
name|accessorName
init|=
literal|"set"
operator|+
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|itemInfo
operator|.
name|getJavascriptName
argument_list|()
argument_list|)
decl_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"cxfjsutils.trace('processing "
operator|+
name|itemInfo
operator|.
name|getJavascriptName
argument_list|()
operator|+
literal|"');"
argument_list|)
expr_stmt|;
name|XmlSchemaElement
name|element
init|=
operator|(
name|XmlSchemaElement
operator|)
name|itemInfo
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|String
name|elementNamespaceURI
init|=
name|element
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|boolean
name|elementNoNamespace
init|=
literal|""
operator|.
name|equals
argument_list|(
name|elementNamespaceURI
argument_list|)
decl_stmt|;
name|XmlSchema
name|elementSchema
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|elementNoNamespace
condition|)
block|{
name|elementSchema
operator|=
name|xmlSchemaCollection
operator|.
name|getSchemaByTargetNamespace
argument_list|(
name|elementNamespaceURI
argument_list|)
expr_stmt|;
block|}
name|boolean
name|qualified
init|=
operator|!
name|elementNoNamespace
operator|&&
name|XmlSchemaUtils
operator|.
name|isElementQualified
argument_list|(
name|element
argument_list|,
name|itemInfo
operator|.
name|isGlobal
argument_list|()
argument_list|,
name|schemaInfo
operator|.
name|getSchema
argument_list|()
argument_list|,
name|elementSchema
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qualified
condition|)
block|{
name|elementNamespaceURI
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|localName
init|=
name|element
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|String
name|valueTarget
init|=
literal|"item"
decl_stmt|;
if|if
condition|(
name|itemInfo
operator|.
name|isOptional
argument_list|()
operator|||
name|itemInfo
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|utils
operator|.
name|startIf
argument_list|(
literal|"curElement != null&& cxfjsutils.isNodeNamedNS(curElement, '"
operator|+
name|elementNamespaceURI
operator|+
literal|"', '"
operator|+
name|localName
operator|+
literal|"')"
argument_list|)
expr_stmt|;
if|if
condition|(
name|itemInfo
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|utils
operator|.
name|appendLine
argument_list|(
literal|"item = [];"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|startDo
argument_list|()
expr_stmt|;
name|valueTarget
operator|=
literal|"arrayItem"
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var arrayItem;"
argument_list|)
expr_stmt|;
block|}
block|}
name|utils
operator|.
name|appendLine
argument_list|(
literal|"var value = null;"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|startIf
argument_list|(
literal|"!cxfjsutils.isElementNil(curElement)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|itemInfo
operator|.
name|isAnyType
argument_list|()
condition|)
block|{
comment|// use our utility
name|utils
operator|.
name|appendLine
argument_list|(
name|valueTarget
operator|+
literal|" = org_apache_cxf_deserialize_anyType(cxfjsutils, curElement);"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|simple
condition|)
block|{
if|if
condition|(
name|mtomCandidate
condition|)
block|{
name|utils
operator|.
name|appendLine
argument_list|(
name|valueTarget
operator|+
literal|" = cxfjsutils.deserializeBase64orMom(curElement);"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|utils
operator|.
name|appendLine
argument_list|(
literal|"value = cxfjsutils.getNodeText(curElement);"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
name|valueTarget
operator|+
literal|" = "
operator|+
name|utils
operator|.
name|javascriptParseExpression
argument_list|(
name|itemType
argument_list|,
literal|"value"
argument_list|)
operator|+
literal|";"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|XmlSchemaComplexType
name|complexType
init|=
operator|(
name|XmlSchemaComplexType
operator|)
name|itemType
decl_stmt|;
name|QName
name|baseQName
init|=
name|complexType
operator|.
name|getQName
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseQName
operator|==
literal|null
condition|)
block|{
name|baseQName
operator|=
name|element
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
name|String
name|elTypeJsName
init|=
name|nameManager
operator|.
name|getJavascriptName
argument_list|(
name|baseQName
argument_list|)
decl_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
name|valueTarget
operator|+
literal|" = "
operator|+
name|elTypeJsName
operator|+
literal|"_deserialize(cxfjsutils, curElement);"
argument_list|)
expr_stmt|;
block|}
name|utils
operator|.
name|endBlock
argument_list|()
expr_stmt|;
comment|// the if for the nil.
if|if
condition|(
name|itemInfo
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|utils
operator|.
name|appendLine
argument_list|(
literal|"item.push(arrayItem);"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"curElement = cxfjsutils.getNextElementSibling(curElement);"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|endBlock
argument_list|()
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"  while(curElement != null&& cxfjsutils.isNodeNamedNS(curElement, '"
operator|+
name|elementNamespaceURI
operator|+
literal|"', '"
operator|+
name|localName
operator|+
literal|"'));"
argument_list|)
expr_stmt|;
block|}
name|utils
operator|.
name|appendLine
argument_list|(
literal|"newobject."
operator|+
name|accessorName
operator|+
literal|"(item);"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|itemInfo
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|utils
operator|.
name|startIf
argument_list|(
literal|"curElement != null"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|appendLine
argument_list|(
literal|"curElement = cxfjsutils.getNextElementSibling(curElement);"
argument_list|)
expr_stmt|;
name|utils
operator|.
name|endBlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|itemInfo
operator|.
name|isOptional
argument_list|()
operator|||
name|itemInfo
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|utils
operator|.
name|endBlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|unsupportedConstruct
parameter_list|(
name|String
name|messageKey
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
name|messageKey
argument_list|,
name|LOG
argument_list|,
name|args
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|UnsupportedConstruct
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

