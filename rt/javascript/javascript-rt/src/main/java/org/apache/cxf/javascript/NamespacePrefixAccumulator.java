begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAttribute
import|;
end_import

begin_class
specifier|public
class|class
name|NamespacePrefixAccumulator
block|{
specifier|private
name|StringBuilder
name|attributes
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|prefixes
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fallbackNamespacePrefixMap
decl_stmt|;
specifier|private
name|int
name|nsCounter
decl_stmt|;
specifier|private
name|SchemaCollection
name|schemaCollection
decl_stmt|;
specifier|public
name|NamespacePrefixAccumulator
parameter_list|(
name|SchemaCollection
name|schemaCollection
parameter_list|)
block|{
name|attributes
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|prefixes
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|fallbackNamespacePrefixMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|nsCounter
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|schemaCollection
operator|=
name|schemaCollection
expr_stmt|;
block|}
specifier|public
name|void
name|collect
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
literal|""
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|)
operator|&&
operator|!
name|prefixes
operator|.
name|contains
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|attributes
operator|.
name|append
argument_list|(
literal|"xmlns:"
operator|+
name|prefix
operator|+
literal|"='"
operator|+
name|uri
operator|+
literal|"' "
argument_list|)
expr_stmt|;
name|prefixes
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getAttributes
parameter_list|()
block|{
return|return
name|attributes
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getPrefix
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Prefix requested for default namespace."
argument_list|)
throw|;
block|}
name|String
name|schemaPrefix
init|=
name|schemaCollection
operator|.
name|getNamespaceContext
argument_list|()
operator|.
name|getPrefix
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
comment|// there could also be a namespace context on an individual schema info.
comment|// perhaps SchemaCollection should be enforcing some discipline there.
if|if
condition|(
name|schemaPrefix
operator|==
literal|null
operator|||
literal|"tns"
operator|.
name|equals
argument_list|(
name|schemaPrefix
argument_list|)
condition|)
block|{
name|schemaPrefix
operator|=
name|fallbackNamespacePrefixMap
operator|.
name|get
argument_list|(
name|namespaceURI
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaPrefix
operator|==
literal|null
condition|)
block|{
name|schemaPrefix
operator|=
literal|"jns"
operator|+
name|nsCounter
expr_stmt|;
name|nsCounter
operator|++
expr_stmt|;
name|fallbackNamespacePrefixMap
operator|.
name|put
argument_list|(
name|namespaceURI
argument_list|,
name|schemaPrefix
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|schemaPrefix
return|;
block|}
comment|/**      * This function obtains a name, perhaps namespace-qualified, for an element.      * @param elementQName the element.      * @param qualified whether to qualify.      * @return      */
specifier|public
name|String
name|xmlElementString
parameter_list|(
name|QName
name|elementQName
parameter_list|,
name|boolean
name|qualified
parameter_list|)
block|{
if|if
condition|(
name|qualified
condition|)
block|{
comment|// What if there were a prefix in the element's qname? This is not apparently
comment|// something that happens in this environment.
name|String
name|prefix
init|=
name|getPrefix
argument_list|(
name|elementQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|collect
argument_list|(
name|prefix
argument_list|,
name|elementQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|prefix
operator|+
literal|":"
operator|+
name|elementQName
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
return|return
name|elementQName
operator|.
name|getLocalPart
argument_list|()
return|;
comment|// use the non-qualified name.
block|}
comment|/**      * Obtain a suitable name for use in Javascript for an attribute. This function      * is purely a tribute to the awful modularity of XmlSchema.      * @param attribute      * @param qualified      * @return      */
specifier|public
name|String
name|xmlAttributeString
parameter_list|(
name|XmlSchemaAttribute
name|attribute
parameter_list|,
name|boolean
name|qualified
parameter_list|)
block|{
if|if
condition|(
name|qualified
condition|)
block|{
comment|// What if there were a prefix in the element's qname? This is not apparently
comment|// something that happens in this environment.
name|String
name|prefix
init|=
name|getPrefix
argument_list|(
name|attribute
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|collect
argument_list|(
name|prefix
argument_list|,
name|attribute
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|prefix
operator|+
literal|":"
operator|+
name|attribute
operator|.
name|getName
argument_list|()
return|;
block|}
return|return
name|attribute
operator|.
name|getName
argument_list|()
return|;
comment|// use the non-qualified name.
block|}
specifier|public
name|String
name|xmlElementString
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
comment|// used with part concrete names
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
name|String
name|prefix
init|=
name|getPrefix
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|collect
argument_list|(
name|prefix
argument_list|,
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|prefix
operator|+
literal|":"
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
block|}
end_class

end_unit

