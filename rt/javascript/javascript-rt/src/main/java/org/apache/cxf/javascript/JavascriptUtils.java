begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|XmlSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|source
operator|.
name|mime
operator|.
name|MimeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnnotated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAny
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnyAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexContentExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaContentModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaGroupRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaParticle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequenceMember
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleContentExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|constants
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * A set of functions that assist in JavaScript generation. This includes  * functions for appending strings of JavaScript to a buffer as well as some  * type utilities.  */
end_comment

begin_class
specifier|public
class|class
name|JavascriptUtils
block|{
specifier|private
specifier|static
specifier|final
name|XmlSchemaSequence
name|EMPTY_SEQUENCE
init|=
operator|new
name|XmlSchemaSequence
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmlSchemaChoice
name|EMPTY_CHOICE
init|=
operator|new
name|XmlSchemaChoice
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmlSchemaAll
name|EMPTY_ALL
init|=
operator|new
name|XmlSchemaAll
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JavascriptUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NL
init|=
literal|"\n"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|DEFAULT_VALUE_FOR_SIMPLE_TYPE
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|DEFAULT_VALUE_FOR_SIMPLE_TYPE
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|DEFAULT_VALUE_FOR_SIMPLE_TYPE
operator|.
name|put
argument_list|(
literal|"unsignedInt"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|DEFAULT_VALUE_FOR_SIMPLE_TYPE
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|DEFAULT_VALUE_FOR_SIMPLE_TYPE
operator|.
name|put
argument_list|(
literal|"unsignedLong"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|DEFAULT_VALUE_FOR_SIMPLE_TYPE
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
literal|"0.0"
argument_list|)
expr_stmt|;
name|DEFAULT_VALUE_FOR_SIMPLE_TYPE
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
literal|"0.0"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|NON_STRINGS_SIMPLE_TYPES
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"int"
argument_list|,
literal|"long"
argument_list|,
literal|"unsignedInt"
argument_list|,
literal|"unsignedLong"
argument_list|,
literal|"float"
argument_list|,
literal|"double"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|INT_TYPES
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"int"
argument_list|,
literal|"long"
argument_list|,
literal|"unsignedInt"
argument_list|,
literal|"unsignedLong"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|FLOAT_TYPES
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"float"
argument_list|,
literal|"double"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|anyTypePrefixCounter
decl_stmt|;
specifier|private
specifier|final
name|StringBuilder
name|code
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
name|String
argument_list|>
name|prefixStack
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|xmlStringAccumulatorVariable
decl_stmt|;
specifier|public
name|JavascriptUtils
parameter_list|(
name|StringBuilder
name|code
parameter_list|)
block|{
name|this
operator|.
name|code
operator|=
name|code
expr_stmt|;
name|prefixStack
operator|.
name|push
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getDefaultValueForSimpleType
parameter_list|(
name|XmlSchemaType
name|type
parameter_list|)
block|{
name|String
name|val
init|=
name|DEFAULT_VALUE_FOR_SIMPLE_TYPE
operator|.
name|get
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
comment|// ints and such return the appropriate 0.
return|return
literal|"''"
return|;
block|}
return|return
name|val
return|;
block|}
specifier|public
name|boolean
name|isStringSimpleType
parameter_list|(
name|QName
name|typeName
parameter_list|)
block|{
return|return
operator|!
operator|(
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
operator|.
name|equals
argument_list|(
name|typeName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|NON_STRINGS_SIMPLE_TYPES
operator|.
name|contains
argument_list|(
name|typeName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|public
name|void
name|setXmlStringAccumulator
parameter_list|(
name|String
name|variableName
parameter_list|)
block|{
name|xmlStringAccumulatorVariable
operator|=
name|variableName
expr_stmt|;
block|}
specifier|public
name|void
name|startXmlStringAccumulator
parameter_list|(
name|String
name|variableName
parameter_list|)
block|{
name|xmlStringAccumulatorVariable
operator|=
name|variableName
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
name|prefix
argument_list|()
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"var "
argument_list|)
operator|.
name|append
argument_list|(
name|variableName
argument_list|)
operator|.
name|append
argument_list|(
literal|" = '';"
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|protectSingleQuotes
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|,
literal|"\\'"
argument_list|)
return|;
block|}
specifier|public
name|String
name|escapeStringQuotes
parameter_list|(
name|String
name|data
parameter_list|)
block|{
return|return
name|data
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\\'"
argument_list|)
return|;
block|}
comment|/**      * emit javascript to append a value to the accumulator.      *      * @param value      */
specifier|public
name|void
name|appendString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|code
operator|.
name|append
argument_list|(
name|prefix
argument_list|()
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
name|xmlStringAccumulatorVariable
argument_list|)
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
operator|.
name|append
argument_list|(
name|xmlStringAccumulatorVariable
argument_list|)
operator|.
name|append
argument_list|(
literal|" + '"
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
name|escapeStringQuotes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"';"
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|appendExpression
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|code
operator|.
name|append
argument_list|(
name|prefix
argument_list|()
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
name|xmlStringAccumulatorVariable
argument_list|)
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
operator|.
name|append
argument_list|(
name|xmlStringAccumulatorVariable
argument_list|)
operator|.
name|append
argument_list|(
literal|" + "
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|prefix
parameter_list|()
block|{
return|return
name|prefixStack
operator|.
name|peek
argument_list|()
return|;
block|}
specifier|public
name|void
name|appendLine
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|code
operator|.
name|append
argument_list|(
name|prefix
argument_list|()
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startIf
parameter_list|(
name|String
name|test
parameter_list|)
block|{
name|code
operator|.
name|append
argument_list|(
name|prefix
argument_list|()
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"if ("
argument_list|)
operator|.
name|append
argument_list|(
name|test
argument_list|)
operator|.
name|append
argument_list|(
literal|") {"
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
name|prefixStack
operator|.
name|push
argument_list|(
name|prefix
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startBlock
parameter_list|()
block|{
name|code
operator|.
name|append
argument_list|(
name|prefix
argument_list|()
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
name|prefixStack
operator|.
name|push
argument_list|(
name|prefix
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|appendElse
parameter_list|()
block|{
name|prefixStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
name|prefix
argument_list|()
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"} else {"
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
name|prefixStack
operator|.
name|push
argument_list|(
name|prefix
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endBlock
parameter_list|()
block|{
name|prefixStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
name|prefix
argument_list|()
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startFor
parameter_list|(
name|String
name|start
parameter_list|,
name|String
name|test
parameter_list|,
name|String
name|increment
parameter_list|)
block|{
name|code
operator|.
name|append
argument_list|(
name|prefix
argument_list|()
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"for ("
argument_list|)
operator|.
name|append
argument_list|(
name|start
argument_list|)
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
operator|.
name|append
argument_list|(
name|test
argument_list|)
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
operator|.
name|append
argument_list|(
name|increment
argument_list|)
operator|.
name|append
argument_list|(
literal|") {"
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
name|prefixStack
operator|.
name|push
argument_list|(
name|prefix
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startForIn
parameter_list|(
name|String
name|var
parameter_list|,
name|String
name|collection
parameter_list|)
block|{
name|code
operator|.
name|append
argument_list|(
name|prefix
argument_list|()
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"for (var "
argument_list|)
operator|.
name|append
argument_list|(
name|var
argument_list|)
operator|.
name|append
argument_list|(
literal|" in "
argument_list|)
operator|.
name|append
argument_list|(
name|collection
argument_list|)
operator|.
name|append
argument_list|(
literal|") {"
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
name|prefixStack
operator|.
name|push
argument_list|(
name|prefix
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startWhile
parameter_list|(
name|String
name|test
parameter_list|)
block|{
name|code
operator|.
name|append
argument_list|(
name|prefix
argument_list|()
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"while ("
argument_list|)
operator|.
name|append
argument_list|(
name|test
argument_list|)
operator|.
name|append
argument_list|(
literal|") {"
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
name|prefixStack
operator|.
name|push
argument_list|(
name|prefix
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startDo
parameter_list|()
block|{
name|code
operator|.
name|append
argument_list|(
name|prefix
argument_list|()
argument_list|)
expr_stmt|;
name|code
operator|.
name|append
argument_list|(
literal|"do  {"
argument_list|)
operator|.
name|append
argument_list|(
name|NL
argument_list|)
expr_stmt|;
name|prefixStack
operator|.
name|push
argument_list|(
name|prefix
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
comment|// Given a js variable and a simple type object, correctly set the variables
comment|// simple type
specifier|public
name|String
name|javascriptParseExpression
parameter_list|(
name|XmlSchemaType
name|type
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|type
operator|instanceof
name|XmlSchemaSimpleType
operator|)
condition|)
block|{
return|return
name|value
return|;
block|}
name|String
name|name
init|=
name|type
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|INT_TYPES
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|"parseInt("
operator|+
name|value
operator|+
literal|")"
return|;
block|}
elseif|else
if|if
condition|(
name|FLOAT_TYPES
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|"parseFloat("
operator|+
name|value
operator|+
literal|")"
return|;
block|}
elseif|else
if|if
condition|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|"("
operator|+
name|value
operator|+
literal|" == 'true')"
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|javaScriptNameToken
parameter_list|(
name|String
name|token
parameter_list|)
block|{
return|return
name|token
return|;
block|}
comment|/**      * We really don't want to take the attitude that 'all base64Binary elements are candidates for MTOM'.      * So we look for clues.      * @param schemaObject      * @return      */
specifier|private
name|boolean
name|treatAsMtom
parameter_list|(
name|XmlSchemaObject
name|schemaObject
parameter_list|)
block|{
if|if
condition|(
name|schemaObject
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|metaInfoMap
init|=
name|schemaObject
operator|.
name|getMetaInfoMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|metaInfoMap
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|attribMap
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|metaInfoMap
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|MetaDataConstants
operator|.
name|EXTERNAL_ATTRIBUTES
argument_list|)
decl_stmt|;
name|Attr
name|ctAttr
init|=
operator|(
name|Attr
operator|)
name|attribMap
operator|.
name|get
argument_list|(
name|MimeAttribute
operator|.
name|MIME_QNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctAttr
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|schemaObject
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|XmlSchemaElement
name|element
init|=
operator|(
name|XmlSchemaElement
operator|)
name|schemaObject
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|getSchemaType
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|QName
name|typeName
init|=
name|element
operator|.
name|getSchemaType
argument_list|()
operator|.
name|getQName
argument_list|()
decl_stmt|;
comment|// We could do something much more complex in terms of evaluating whether the type
comment|// permits the contentType attribute. This, however, is enough to clue us in for what Aegis
comment|// does.
if|if
condition|(
operator|new
name|QName
argument_list|(
literal|"http://www.w3.org/2005/05/xmlmime"
argument_list|,
literal|"base64Binary"
argument_list|)
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * We don't want to generate Javascript overhead for complex types with simple content models,      * at least until or unless we decide to cope with attributes in a general way.      * @param type      * @return      */
specifier|public
specifier|static
name|boolean
name|notVeryComplexType
parameter_list|(
name|XmlSchemaType
name|type
parameter_list|)
block|{
return|return
name|type
operator|instanceof
name|XmlSchemaSimpleType
operator|||
operator|(
name|type
operator|instanceof
name|XmlSchemaComplexType
operator|&&
operator|(
operator|(
name|XmlSchemaComplexType
operator|)
name|type
operator|)
operator|.
name|getContentModel
argument_list|()
operator|instanceof
name|XmlSchemaSimpleContent
operator|)
return|;
block|}
comment|/**      * Return true for xsd:base64Binary or simple restrictions of it, as in the xmime stock type.      * @param type      * @return      */
specifier|public
specifier|static
name|boolean
name|mtomCandidateType
parameter_list|(
name|XmlSchemaType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Constants
operator|.
name|XSD_BASE64
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// there could be some disagreement whether the following is a good enough test.
comment|// what if 'base64binary' was extended in some crazy way? At runtime, either it has
comment|// an xop:Include or it doesn't.
if|if
condition|(
name|type
operator|instanceof
name|XmlSchemaComplexType
condition|)
block|{
name|XmlSchemaComplexType
name|complexType
init|=
operator|(
name|XmlSchemaComplexType
operator|)
name|type
decl_stmt|;
if|if
condition|(
name|complexType
operator|.
name|getContentModel
argument_list|()
operator|instanceof
name|XmlSchemaSimpleContent
condition|)
block|{
name|XmlSchemaSimpleContent
name|content
init|=
operator|(
name|XmlSchemaSimpleContent
operator|)
name|complexType
operator|.
name|getContentModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|.
name|getContent
argument_list|()
operator|instanceof
name|XmlSchemaSimpleContentExtension
condition|)
block|{
name|XmlSchemaSimpleContentExtension
name|extension
init|=
operator|(
name|XmlSchemaSimpleContentExtension
operator|)
name|content
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|XSD_BASE64
operator|.
name|equals
argument_list|(
name|extension
operator|.
name|getBaseTypeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Given an element, generate the serialization code.      *      * @param elementInfo description of the element we are serializing      * @param referencePrefix prefix to the Javascript variable. Nothing for      *                args, this._ for members.      * @param schemaCollection caller's schema collection.      */
specifier|public
name|void
name|generateCodeToSerializeElement
parameter_list|(
name|ParticleInfo
name|elementInfo
parameter_list|,
name|String
name|referencePrefix
parameter_list|,
name|SchemaCollection
name|schemaCollection
parameter_list|)
block|{
if|if
condition|(
name|elementInfo
operator|.
name|isGroup
argument_list|()
condition|)
block|{
for|for
control|(
name|ParticleInfo
name|childElement
range|:
name|elementInfo
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|generateCodeToSerializeElement
argument_list|(
name|childElement
argument_list|,
name|referencePrefix
argument_list|,
name|schemaCollection
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|XmlSchemaType
name|type
init|=
name|elementInfo
operator|.
name|getType
argument_list|()
decl_stmt|;
name|boolean
name|nillable
init|=
name|elementInfo
operator|.
name|isNillable
argument_list|()
decl_stmt|;
name|boolean
name|optional
init|=
name|elementInfo
operator|.
name|isOptional
argument_list|()
decl_stmt|;
name|boolean
name|array
init|=
name|elementInfo
operator|.
name|isArray
argument_list|()
decl_stmt|;
name|boolean
name|mtom
init|=
name|treatAsMtom
argument_list|(
name|elementInfo
operator|.
name|getParticle
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|jsVar
init|=
name|referencePrefix
operator|+
name|elementInfo
operator|.
name|getJavascriptName
argument_list|()
decl_stmt|;
name|appendLine
argument_list|(
literal|"// block for local variables"
argument_list|)
expr_stmt|;
name|startBlock
argument_list|()
expr_stmt|;
comment|// allow local variables.
comment|// first question: optional?
if|if
condition|(
name|optional
condition|)
block|{
name|startIf
argument_list|(
name|jsVar
operator|+
literal|" != null"
argument_list|)
expr_stmt|;
block|}
comment|// nillable and optional would be very strange together.
comment|// and nillable in the array case applies to the elements.
if|if
condition|(
name|nillable
operator|&&
operator|!
name|array
condition|)
block|{
name|startIf
argument_list|(
name|jsVar
operator|+
literal|" == null"
argument_list|)
expr_stmt|;
name|appendString
argument_list|(
literal|"<"
operator|+
name|elementInfo
operator|.
name|getXmlName
argument_list|()
operator|+
literal|" "
operator|+
name|XmlSchemaUtils
operator|.
name|XSI_NIL
operator|+
literal|"/>"
argument_list|)
expr_stmt|;
name|appendElse
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|array
condition|)
block|{
comment|// protected against null in arrays.
name|startIf
argument_list|(
name|jsVar
operator|+
literal|" != null"
argument_list|)
expr_stmt|;
name|startFor
argument_list|(
literal|"var ax = 0"
argument_list|,
literal|"ax< "
operator|+
name|jsVar
operator|+
literal|".length"
argument_list|,
literal|"ax ++"
argument_list|)
expr_stmt|;
name|jsVar
operator|=
name|jsVar
operator|+
literal|"[ax]"
expr_stmt|;
comment|// we need an extra level of 'nil' testing here. Or do we, depending
comment|// on the type structure?
comment|// Recode and fiddle appropriately.
name|startIf
argument_list|(
name|jsVar
operator|+
literal|" == null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|nillable
condition|)
block|{
name|appendString
argument_list|(
literal|"<"
operator|+
name|elementInfo
operator|.
name|getXmlName
argument_list|()
operator|+
literal|" "
operator|+
name|XmlSchemaUtils
operator|.
name|XSI_NIL
operator|+
literal|"/>"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appendString
argument_list|(
literal|"<"
operator|+
name|elementInfo
operator|.
name|getXmlName
argument_list|()
operator|+
literal|"/>"
argument_list|)
expr_stmt|;
block|}
name|appendElse
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|elementInfo
operator|.
name|isAnyType
argument_list|()
condition|)
block|{
name|serializeAnyTypeElement
argument_list|(
name|elementInfo
argument_list|,
name|jsVar
argument_list|)
expr_stmt|;
comment|// mtom can be turned on for the special complex type that is really a basic type with
comment|// a content-type attribute.
block|}
elseif|else
if|if
condition|(
operator|!
name|mtom
operator|&&
name|type
operator|instanceof
name|XmlSchemaComplexType
condition|)
block|{
comment|// it has a value
comment|// pass the extra null in the slot for the 'extra namespaces' needed
comment|// by 'any'.
name|appendExpression
argument_list|(
name|jsVar
operator|+
literal|".serialize(cxfjsutils, '"
operator|+
name|elementInfo
operator|.
name|getXmlName
argument_list|()
operator|+
literal|"', null)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// simple type
name|appendString
argument_list|(
literal|"<"
operator|+
name|elementInfo
operator|.
name|getXmlName
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|mtom
condition|)
block|{
name|appendExpression
argument_list|(
literal|"cxfjsutils.packageMtom("
operator|+
name|jsVar
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appendExpression
argument_list|(
literal|"cxfjsutils.escapeXmlEntities("
operator|+
name|jsVar
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|appendString
argument_list|(
literal|"</"
operator|+
name|elementInfo
operator|.
name|getXmlName
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|array
condition|)
block|{
name|endBlock
argument_list|()
expr_stmt|;
comment|// for the extra level of nil checking, which might be
comment|// wrong.
name|endBlock
argument_list|()
expr_stmt|;
comment|// for the for loop.
name|endBlock
argument_list|()
expr_stmt|;
comment|// the null protection.
block|}
if|if
condition|(
name|nillable
operator|&&
operator|!
name|array
condition|)
block|{
name|endBlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|optional
condition|)
block|{
name|endBlock
argument_list|()
expr_stmt|;
block|}
name|endBlock
argument_list|()
expr_stmt|;
comment|// local variables
block|}
specifier|private
name|void
name|serializeAnyTypeElement
parameter_list|(
name|ParticleInfo
name|elementInfo
parameter_list|,
name|String
name|jsVar
parameter_list|)
block|{
comment|// name a variable for convenience.
name|appendLine
argument_list|(
literal|"var anyHolder = "
operator|+
name|jsVar
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"var anySerializer;"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"var typeAttr = '';"
argument_list|)
expr_stmt|;
comment|// we look in the global array for a serializer.
name|startIf
argument_list|(
literal|"anyHolder != null"
argument_list|)
expr_stmt|;
name|startIf
argument_list|(
literal|"!anyHolder.raw"
argument_list|)
expr_stmt|;
comment|// no serializer for raw.
comment|// In anyType, the QName is for the type, not an element.
name|appendLine
argument_list|(
literal|"anySerializer = "
operator|+
literal|"cxfjsutils.interfaceObject.globalElementSerializers[anyHolder.qname];"
argument_list|)
expr_stmt|;
name|endBlock
argument_list|()
expr_stmt|;
name|startIf
argument_list|(
literal|"anyHolder.xsiType"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"var typePrefix = 'cxfjst"
operator|+
name|anyTypePrefixCounter
operator|+
literal|"';"
argument_list|)
expr_stmt|;
name|anyTypePrefixCounter
operator|++
expr_stmt|;
name|appendLine
argument_list|(
literal|"var typeAttr = 'xmlns:' + typePrefix + '=\\\''"
operator|+
literal|" + anyHolder.namespaceURI + '\\\'';"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"typeAttr = typeAttr + ' xsi:type=\\\'' + typePrefix + ':' "
operator|+
literal|"+ anyHolder.localName + '\\\'';"
argument_list|)
expr_stmt|;
name|endBlock
argument_list|()
expr_stmt|;
name|startIf
argument_list|(
literal|"anySerializer"
argument_list|)
expr_stmt|;
name|appendExpression
argument_list|(
name|jsVar
operator|+
literal|".serialize(cxfjsutils, '"
operator|+
name|elementInfo
operator|.
name|getXmlName
argument_list|()
operator|+
literal|"', typeAttr)"
argument_list|)
expr_stmt|;
name|appendElse
argument_list|()
expr_stmt|;
comment|// simple type or raw
name|appendExpression
argument_list|(
literal|"'<"
operator|+
name|elementInfo
operator|.
name|getXmlName
argument_list|()
operator|+
literal|" ' + typeAttr + "
operator|+
literal|"'>'"
argument_list|)
expr_stmt|;
name|startIf
argument_list|(
literal|"!anyHolder.raw"
argument_list|)
expr_stmt|;
name|appendExpression
argument_list|(
literal|"cxfjsutils.escapeXmlEntities("
operator|+
name|jsVar
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|appendElse
argument_list|()
expr_stmt|;
name|appendExpression
argument_list|(
literal|"anyHolder.xml"
argument_list|)
expr_stmt|;
name|endBlock
argument_list|()
expr_stmt|;
name|appendString
argument_list|(
literal|"</"
operator|+
name|elementInfo
operator|.
name|getXmlName
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|endBlock
argument_list|()
expr_stmt|;
name|appendElse
argument_list|()
expr_stmt|;
comment|// nil (from null holder)
name|appendString
argument_list|(
literal|"<"
operator|+
name|elementInfo
operator|.
name|getXmlName
argument_list|()
operator|+
literal|" "
operator|+
name|XmlSchemaUtils
operator|.
name|XSI_NIL
operator|+
literal|"/>"
argument_list|)
expr_stmt|;
name|endBlock
argument_list|()
expr_stmt|;
block|}
comment|/**      * Generate code to serialize an xs:any. There is too much duplicate code      * with the element serializer; fix that some day.      *      * @param itemInfo      * @param prefix      * @param schemaCollection      */
specifier|public
name|void
name|generateCodeToSerializeAny
parameter_list|(
name|ParticleInfo
name|itemInfo
parameter_list|,
name|String
name|prefix
parameter_list|,
name|SchemaCollection
name|schemaCollection
parameter_list|)
block|{
name|boolean
name|optional
init|=
name|XmlSchemaUtils
operator|.
name|isParticleOptional
argument_list|(
name|itemInfo
operator|.
name|getParticle
argument_list|()
argument_list|)
operator|||
operator|(
name|itemInfo
operator|.
name|isArray
argument_list|()
operator|&&
name|itemInfo
operator|.
name|getMinOccurs
argument_list|()
operator|==
literal|0
operator|)
decl_stmt|;
name|boolean
name|array
init|=
name|XmlSchemaUtils
operator|.
name|isParticleArray
argument_list|(
name|itemInfo
operator|.
name|getParticle
argument_list|()
argument_list|)
decl_stmt|;
name|appendLine
argument_list|(
literal|"var anyHolder = this._"
operator|+
name|itemInfo
operator|.
name|getJavascriptName
argument_list|()
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"var anySerializer = null;"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"var anyXmlTag = null;"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"var anyXmlNsDef = null;"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"var anyData = null;"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"var anyStartTag;"
argument_list|)
expr_stmt|;
name|startIf
argument_list|(
literal|"anyHolder != null&& !anyHolder.raw"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"anySerializer = "
operator|+
literal|"cxfjsutils.interfaceObject.globalElementSerializers[anyHolder.qname];"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"anyXmlTag = '"
operator|+
name|prefix
operator|+
literal|":' + anyHolder.localName;"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"anyXmlNsDef = 'xmlns:"
operator|+
name|prefix
operator|+
literal|"=\\'' + anyHolder.namespaceURI"
operator|+
literal|" + '\\'';"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"anyStartTag = '<' + anyXmlTag + ' ' + anyXmlNsDef + '>';"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"anyEndTag = '</' + anyXmlTag + '>';"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"anyEmptyTag = '<' + anyXmlTag + ' ' + anyXmlNsDef + '/>';"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"anyData = anyHolder.object;"
argument_list|)
expr_stmt|;
name|endBlock
argument_list|()
expr_stmt|;
name|startIf
argument_list|(
literal|"anyHolder != null&& anyHolder.raw"
argument_list|)
expr_stmt|;
name|appendExpression
argument_list|(
literal|"anyHolder.xml"
argument_list|)
expr_stmt|;
name|appendElse
argument_list|()
expr_stmt|;
comment|// first question: optional?
if|if
condition|(
name|optional
condition|)
block|{
name|startIf
argument_list|(
literal|"anyHolder != null&& anyData != null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startIf
argument_list|(
literal|"anyHolder == null || anyData == null"
argument_list|)
expr_stmt|;
name|appendLine
argument_list|(
literal|"throw 'null value for required any item';"
argument_list|)
expr_stmt|;
name|endBlock
argument_list|()
expr_stmt|;
block|}
name|String
name|varRef
init|=
literal|"anyData"
decl_stmt|;
if|if
condition|(
name|array
condition|)
block|{
name|startFor
argument_list|(
literal|"var ax = 0"
argument_list|,
literal|"ax< anyData.length"
argument_list|,
literal|"ax ++"
argument_list|)
expr_stmt|;
name|varRef
operator|=
literal|"anyData[ax]"
expr_stmt|;
comment|// we need an extra level of 'nil' testing here. Or do we, depending
comment|// on the type structure?
comment|// Recode and fiddle appropriately.
name|startIf
argument_list|(
name|varRef
operator|+
literal|" == null"
argument_list|)
expr_stmt|;
name|appendExpression
argument_list|(
literal|"anyEmptyTag"
argument_list|)
expr_stmt|;
name|appendElse
argument_list|()
expr_stmt|;
block|}
name|startIf
argument_list|(
literal|"anySerializer"
argument_list|)
expr_stmt|;
comment|// if no constructor, a simple type.
comment|// it has a value
name|appendExpression
argument_list|(
literal|"anySerializer.call("
operator|+
name|varRef
operator|+
literal|", cxfjsutils, anyXmlTag, anyXmlNsDef)"
argument_list|)
expr_stmt|;
name|appendElse
argument_list|()
expr_stmt|;
name|appendExpression
argument_list|(
literal|"anyStartTag"
argument_list|)
expr_stmt|;
name|appendExpression
argument_list|(
literal|"cxfjsutils.escapeXmlEntities("
operator|+
name|varRef
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|appendExpression
argument_list|(
literal|"anyEndTag"
argument_list|)
expr_stmt|;
name|endBlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|array
condition|)
block|{
name|endBlock
argument_list|()
expr_stmt|;
name|endBlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|optional
condition|)
block|{
name|endBlock
argument_list|()
expr_stmt|;
block|}
name|endBlock
argument_list|()
expr_stmt|;
comment|// for raw
block|}
comment|/**      * If the object is an attribute or an anyAttribute,      * return the 'Annotated'. If it's not one of those, or it's a group,      * throw. We're not ready for groups yet.      * @param object      */
specifier|public
specifier|static
name|XmlSchemaAnnotated
name|getObjectAnnotated
parameter_list|(
name|XmlSchemaObject
name|object
parameter_list|,
name|QName
name|contextName
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|XmlSchemaAnnotated
operator|)
condition|)
block|{
name|unsupportedConstruct
argument_list|(
literal|"NON_ANNOTATED_ATTRIBUTE"
argument_list|,
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|contextName
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|XmlSchemaAttribute
operator|)
operator|&&
operator|!
operator|(
name|object
operator|instanceof
name|XmlSchemaAnyAttribute
operator|)
condition|)
block|{
name|unsupportedConstruct
argument_list|(
literal|"EXOTIC_ATTRIBUTE"
argument_list|,
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|contextName
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|XmlSchemaAnnotated
operator|)
name|object
return|;
block|}
comment|/**      * If the object is an element or an any, return the particle. If it's not a particle, or it's a group,      * throw. We're not ready for groups yet.      * @param object      */
specifier|public
specifier|static
name|XmlSchemaParticle
name|getObjectParticle
parameter_list|(
name|XmlSchemaObject
name|object
parameter_list|,
name|QName
name|contextName
parameter_list|,
name|XmlSchema
name|currentSchema
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|XmlSchemaParticle
operator|)
condition|)
block|{
name|unsupportedConstruct
argument_list|(
literal|"NON_PARTICLE_CHILD"
argument_list|,
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|contextName
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|object
operator|instanceof
name|XmlSchemaGroupRef
condition|)
block|{
name|QName
name|groupName
init|=
operator|(
operator|(
name|XmlSchemaGroupRef
operator|)
name|object
operator|)
operator|.
name|getRefName
argument_list|()
decl_stmt|;
name|XmlSchemaGroup
name|group
init|=
name|currentSchema
operator|.
name|getGroupByName
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|unsupportedConstruct
argument_list|(
literal|"MISSING_GROUP"
argument_list|,
name|groupName
operator|.
name|toString
argument_list|()
argument_list|,
name|contextName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|XmlSchemaParticle
name|groupParticle
init|=
name|group
operator|.
name|getParticle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|groupParticle
operator|instanceof
name|XmlSchemaSequence
operator|)
condition|)
block|{
name|unsupportedConstruct
argument_list|(
literal|"GROUP_REF_UNSUPPORTED_TYPE"
argument_list|,
name|groupParticle
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|contextName
argument_list|,
name|groupParticle
argument_list|)
expr_stmt|;
block|}
return|return
name|groupParticle
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|XmlSchemaElement
operator|)
operator|&&
operator|!
operator|(
name|object
operator|instanceof
name|XmlSchemaAny
operator|)
operator|&&
operator|!
operator|(
name|object
operator|instanceof
name|XmlSchemaChoice
operator|)
operator|&&
operator|!
operator|(
name|object
operator|instanceof
name|XmlSchemaSequence
operator|)
condition|)
block|{
name|unsupportedConstruct
argument_list|(
literal|"GROUP_CHILD"
argument_list|,
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|contextName
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|XmlSchemaParticle
operator|)
name|object
return|;
block|}
specifier|public
specifier|static
name|XmlSchemaSequence
name|getSequence
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|)
block|{
name|XmlSchemaParticle
name|particle
init|=
name|type
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|XmlSchemaSequence
name|sequence
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|particle
operator|==
literal|null
condition|)
block|{
comment|// the code that uses this wants to iterate. An empty one is more useful than
comment|// a null pointer, and certainly an exception.
return|return
name|EMPTY_SEQUENCE
return|;
block|}
try|try
block|{
name|sequence
operator|=
operator|(
name|XmlSchemaSequence
operator|)
name|particle
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
name|unsupportedConstruct
argument_list|(
literal|"NON_SEQUENCE_PARTICLE"
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|sequence
return|;
block|}
specifier|public
specifier|static
name|XmlSchemaChoice
name|getChoice
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|)
block|{
name|XmlSchemaParticle
name|particle
init|=
name|type
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|XmlSchemaChoice
name|choice
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|particle
operator|==
literal|null
condition|)
block|{
comment|// the code that uses this wants to iterate. An empty one is more useful than
comment|// a null pointer, and certainly an exception.
return|return
name|EMPTY_CHOICE
return|;
block|}
try|try
block|{
name|choice
operator|=
operator|(
name|XmlSchemaChoice
operator|)
name|particle
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
name|unsupportedConstruct
argument_list|(
literal|"NON_CHOICE_PARTICLE"
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|choice
return|;
block|}
specifier|public
specifier|static
name|XmlSchemaAll
name|getAll
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|)
block|{
name|XmlSchemaParticle
name|particle
init|=
name|type
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|XmlSchemaAll
name|all
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|particle
operator|==
literal|null
condition|)
block|{
comment|// the code that uses this wants to iterate. An empty one is more useful than
comment|// a null pointer, and certainly an exception.
return|return
name|EMPTY_ALL
return|;
block|}
try|try
block|{
name|all
operator|=
operator|(
name|XmlSchemaAll
operator|)
name|particle
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
name|unsupportedConstruct
argument_list|(
literal|"NON_CHOICE_PARTICLE"
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|all
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|XmlSchemaObject
argument_list|>
name|getContentElements
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|,
name|SchemaCollection
name|collection
parameter_list|)
block|{
name|List
argument_list|<
name|XmlSchemaObject
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|QName
name|baseTypeName
init|=
name|XmlSchemaUtils
operator|.
name|getBaseType
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseTypeName
operator|!=
literal|null
condition|)
block|{
name|XmlSchemaComplexType
name|baseType
init|=
operator|(
name|XmlSchemaComplexType
operator|)
name|collection
operator|.
name|getTypeByQName
argument_list|(
name|baseTypeName
argument_list|)
decl_stmt|;
comment|// recurse onto the base type ...
name|results
operator|.
name|addAll
argument_list|(
name|getContentElements
argument_list|(
name|baseType
argument_list|,
name|collection
argument_list|)
argument_list|)
expr_stmt|;
comment|// and now process our sequence.
name|XmlSchemaSequence
name|extSequence
init|=
name|getContentSequence
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|extSequence
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XmlSchemaSequenceMember
name|item
range|:
name|extSequence
operator|.
name|getItems
argument_list|()
control|)
block|{
comment|/*                      * For now, leave the return type alone. Fix some day.                      */
name|results
operator|.
name|add
argument_list|(
operator|(
name|XmlSchemaObject
operator|)
name|item
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
comment|// no base type, the simple case.
name|XmlSchemaSequence
name|sequence
init|=
name|getSequence
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|XmlSchemaSequenceMember
name|item
range|:
name|sequence
operator|.
name|getItems
argument_list|()
control|)
block|{
name|results
operator|.
name|add
argument_list|(
operator|(
name|XmlSchemaObject
operator|)
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
specifier|public
specifier|static
name|XmlSchemaSequence
name|getContentSequence
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|)
block|{
name|XmlSchemaContentModel
name|model
init|=
name|type
operator|.
name|getContentModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|XmlSchemaContent
name|content
init|=
name|model
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|content
operator|instanceof
name|XmlSchemaComplexContentExtension
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|XmlSchemaComplexContentExtension
name|ext
init|=
operator|(
name|XmlSchemaComplexContentExtension
operator|)
name|content
decl_stmt|;
name|XmlSchemaParticle
name|particle
init|=
name|ext
operator|.
name|getParticle
argument_list|()
decl_stmt|;
if|if
condition|(
name|particle
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|XmlSchemaSequence
name|sequence
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sequence
operator|=
operator|(
name|XmlSchemaSequence
operator|)
name|particle
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
name|unsupportedConstruct
argument_list|(
literal|"NON_SEQUENCE_PARTICLE"
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|sequence
return|;
block|}
specifier|static
name|void
name|unsupportedConstruct
parameter_list|(
name|String
name|messageKey
parameter_list|,
name|String
name|what
parameter_list|,
name|QName
name|subjectName
parameter_list|,
name|XmlSchemaObject
name|subject
parameter_list|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
name|messageKey
argument_list|,
name|LOG
argument_list|,
name|what
argument_list|,
name|subjectName
operator|==
literal|null
condition|?
literal|"anonymous"
else|:
name|subjectName
argument_list|,
name|cleanedUpSchemaSource
argument_list|(
name|subject
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|UnsupportedConstruct
argument_list|(
name|message
argument_list|)
throw|;
block|}
specifier|static
name|void
name|unsupportedConstruct
parameter_list|(
name|String
name|messageKey
parameter_list|,
name|XmlSchemaType
name|subject
parameter_list|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
name|messageKey
argument_list|,
name|LOG
argument_list|,
name|subject
operator|.
name|getQName
argument_list|()
argument_list|,
name|cleanedUpSchemaSource
argument_list|(
name|subject
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|UnsupportedConstruct
argument_list|(
name|message
argument_list|)
throw|;
block|}
specifier|static
name|String
name|cleanedUpSchemaSource
parameter_list|(
name|XmlSchemaObject
name|subject
parameter_list|)
block|{
if|if
condition|(
name|subject
operator|==
literal|null
operator|||
name|subject
operator|.
name|getSourceURI
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|subject
operator|.
name|getSourceURI
argument_list|()
operator|+
literal|':'
operator|+
name|subject
operator|.
name|getLineNumber
argument_list|()
return|;
block|}
block|}
end_class

end_unit

