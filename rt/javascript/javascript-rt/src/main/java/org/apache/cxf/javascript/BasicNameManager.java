begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|SchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|utils
operator|.
name|NamespacePrefixList
import|;
end_import

begin_comment
comment|/**  * Generate JavaScript names for QNames.   * This might belong on the CXF bus.   */
end_comment

begin_class
specifier|public
class|class
name|BasicNameManager
implements|implements
name|NameManager
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsPrefixMap
decl_stmt|;
comment|/**      * For unit testing, we allow a very meaningless version.      * Real uses use the factory methods.      */
name|BasicNameManager
parameter_list|()
block|{     }
comment|/**      * Factory that just takes a service. Used in tools and unit tests.      * @param service      * @return      */
specifier|public
specifier|static
name|BasicNameManager
name|newNameManager
parameter_list|(
name|ServiceInfo
name|service
parameter_list|)
block|{
name|BasicNameManager
name|nameManager
init|=
operator|new
name|BasicNameManager
argument_list|()
decl_stmt|;
name|nameManager
operator|.
name|initialize
argument_list|(
name|service
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|nameManager
return|;
block|}
comment|/**      *       * @param service      * @param endpoint      * @return      */
specifier|public
specifier|static
name|BasicNameManager
name|newNameManager
parameter_list|(
name|ServiceInfo
name|service
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|BasicNameManager
name|nameManager
init|=
operator|new
name|BasicNameManager
argument_list|()
decl_stmt|;
name|nameManager
operator|.
name|initialize
argument_list|(
name|service
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|nameManager
return|;
block|}
specifier|private
name|void
name|initialize
parameter_list|(
name|ServiceInfo
name|service
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|nsPrefixMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|endpoint
operator|!=
literal|null
condition|)
block|{
name|JavascriptOptionsFeature
name|options
init|=
name|getOptions
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|getNamespacePrefixMap
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nsPrefixMap
operator|.
name|putAll
argument_list|(
name|options
operator|.
name|getNamespacePrefixMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|poorPrefixURIs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SchemaInfo
name|schemaInfo
range|:
name|service
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|NamespacePrefixList
name|schemaPrefixList
init|=
name|schemaInfo
operator|.
name|getSchema
argument_list|()
operator|.
name|getNamespaceContext
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|declaredPrefix
range|:
name|schemaPrefixList
operator|.
name|getDeclaredPrefixes
argument_list|()
control|)
block|{
name|String
name|uri
init|=
name|schemaPrefixList
operator|.
name|getNamespaceURI
argument_list|(
name|declaredPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nsPrefixMap
operator|.
name|containsKey
argument_list|(
name|uri
argument_list|)
condition|)
block|{
comment|// first schema to define a prefix wins.
if|if
condition|(
name|declaredPrefix
operator|.
name|startsWith
argument_list|(
literal|"ns"
argument_list|)
operator|||
literal|"tns"
operator|.
name|equals
argument_list|(
name|declaredPrefix
argument_list|)
condition|)
block|{
name|poorPrefixURIs
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nsPrefixMap
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|declaredPrefix
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|String
name|uri
range|:
name|poorPrefixURIs
control|)
block|{
name|defineFallbackPrefix
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|JavascriptOptionsFeature
name|getOptions
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Feature
name|feature
range|:
name|endpoint
operator|.
name|getActiveFeatures
argument_list|()
control|)
block|{
if|if
condition|(
name|feature
operator|instanceof
name|JavascriptOptionsFeature
condition|)
block|{
return|return
operator|(
name|JavascriptOptionsFeature
operator|)
name|feature
return|;
block|}
block|}
block|}
return|return
operator|new
name|JavascriptOptionsFeature
argument_list|()
return|;
comment|// save work and return a default set of options.
block|}
comment|/**      * Take a URI and turn it into a JavaScript name prefix.      * @param uri input URI.      * @return output prefix.      */
specifier|protected
name|String
name|transformURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|uri
operator|.
name|replaceAll
argument_list|(
literal|"http:/*"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"uri:"
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"[\\.:/-]"
argument_list|,
literal|"_"
argument_list|)
return|;
block|}
specifier|private
name|String
name|defineFallbackPrefix
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
comment|// this needs more work later. We are bound to annoy someone somehow in this area.
name|String
name|jsPrefix
init|=
name|transformURI
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|nsPrefixMap
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|jsPrefix
argument_list|)
expr_stmt|;
return|return
name|jsPrefix
return|;
block|}
comment|/** {@inheritDoc}*/
specifier|public
name|String
name|getJavascriptName
parameter_list|(
name|XmlSchemaComplexType
name|schemaType
parameter_list|)
block|{
name|QName
name|typeQName
init|=
name|schemaType
operator|.
name|getQName
argument_list|()
decl_stmt|;
return|return
name|getJavascriptName
argument_list|(
name|typeQName
argument_list|)
return|;
block|}
specifier|public
name|String
name|getJavascriptName
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
name|String
name|nsprefix
init|=
name|nsPrefixMap
operator|.
name|get
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
comment|// nsprefix will be null if there is no prefix.
if|if
condition|(
name|nsprefix
operator|==
literal|null
condition|)
block|{
name|nsprefix
operator|=
name|defineFallbackPrefix
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|nsprefix
operator|+
literal|"_"
operator|+
name|qname
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
block|}
end_class

end_unit

