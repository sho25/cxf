begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|XmlSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnnotated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnyAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaUse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|constants
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * All the information needed to create the JavaScript for an Xml Schema attribute  * or xs:anyAttribute.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|AttributeInfo
implements|implements
name|ItemInfo
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AttributeInfo
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|XmlSchemaAnnotated
name|annotated
decl_stmt|;
specifier|private
name|String
name|javascriptName
decl_stmt|;
specifier|private
name|String
name|xmlName
decl_stmt|;
specifier|private
name|XmlSchemaType
name|containingType
decl_stmt|;
specifier|private
name|XmlSchemaType
name|type
decl_stmt|;
specifier|private
name|boolean
name|any
decl_stmt|;
specifier|private
name|boolean
name|anyType
decl_stmt|;
specifier|private
name|String
name|defaultValue
decl_stmt|;
specifier|private
name|String
name|fixedValue
decl_stmt|;
specifier|private
name|boolean
name|global
decl_stmt|;
specifier|private
name|XmlSchemaUse
name|use
decl_stmt|;
specifier|private
name|AttributeInfo
parameter_list|()
block|{     }
comment|/**      * Create an elementInfo that stores information about a global, named,      * element.      *      * @param attribute the element      * @param currentSchema the schema it came from.      * @param schemaCollection the collection of all schemas.      * @param prefixAccumulator the accumulator that assigns prefixes.      * @return      */
specifier|public
specifier|static
name|AttributeInfo
name|forGlobalAttribute
parameter_list|(
name|XmlSchemaAttribute
name|attribute
parameter_list|,
name|XmlSchema
name|currentSchema
parameter_list|,
name|SchemaCollection
name|schemaCollection
parameter_list|,
name|NamespacePrefixAccumulator
name|prefixAccumulator
parameter_list|)
block|{
name|AttributeInfo
name|attributeInfo
init|=
operator|new
name|AttributeInfo
argument_list|()
decl_stmt|;
name|attributeInfo
operator|.
name|annotated
operator|=
name|attribute
expr_stmt|;
name|attributeInfo
operator|.
name|global
operator|=
literal|true
expr_stmt|;
name|factoryCommon
argument_list|(
name|attribute
argument_list|,
name|currentSchema
argument_list|,
name|schemaCollection
argument_list|,
name|prefixAccumulator
argument_list|,
name|attributeInfo
argument_list|)
expr_stmt|;
return|return
name|attributeInfo
return|;
block|}
comment|/**      * Fill in an AttributeInfo for an attribute or anyAttribute from a sequence.      *      * @param sequenceElement      * @param currentSchema      * @param schemaCollection      * @param prefixAccumulator      * @return      */
specifier|public
specifier|static
name|AttributeInfo
name|forLocalItem
parameter_list|(
name|XmlSchemaObject
name|sequenceObject
parameter_list|,
name|XmlSchema
name|currentSchema
parameter_list|,
name|SchemaCollection
name|schemaCollection
parameter_list|,
name|NamespacePrefixAccumulator
name|prefixAccumulator
parameter_list|,
name|QName
name|contextName
parameter_list|)
block|{
name|XmlSchemaAnnotated
name|annotated
init|=
name|XmlSchemaUtils
operator|.
name|getObjectAnnotated
argument_list|(
name|sequenceObject
argument_list|,
name|contextName
argument_list|)
decl_stmt|;
name|AttributeInfo
name|attributeInfo
init|=
operator|new
name|AttributeInfo
argument_list|()
decl_stmt|;
name|XmlSchemaAnnotated
name|realAnnotated
init|=
name|annotated
decl_stmt|;
if|if
condition|(
name|annotated
operator|instanceof
name|XmlSchemaAttribute
condition|)
block|{
name|XmlSchemaAttribute
name|attribute
init|=
operator|(
name|XmlSchemaAttribute
operator|)
name|annotated
decl_stmt|;
name|attributeInfo
operator|.
name|use
operator|=
name|attribute
operator|.
name|getUse
argument_list|()
expr_stmt|;
if|if
condition|(
name|attribute
operator|.
name|getRef
argument_list|()
operator|.
name|getTarget
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|realAnnotated
operator|=
name|attribute
operator|.
name|getRef
argument_list|()
operator|.
name|getTarget
argument_list|()
expr_stmt|;
name|attributeInfo
operator|.
name|global
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|annotated
operator|instanceof
name|XmlSchemaAnyAttribute
condition|)
block|{
name|attributeInfo
operator|.
name|any
operator|=
literal|true
expr_stmt|;
name|attributeInfo
operator|.
name|xmlName
operator|=
literal|null
expr_stmt|;
comment|// unknown until runtime.
name|attributeInfo
operator|.
name|javascriptName
operator|=
literal|"any"
expr_stmt|;
name|attributeInfo
operator|.
name|type
operator|=
literal|null
expr_stmt|;
comment|// runtime for any.
name|attributeInfo
operator|.
name|use
operator|=
name|XmlSchemaUse
operator|.
name|OPTIONAL
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedConstruct
argument_list|(
name|LOG
argument_list|,
literal|"UNSUPPORTED_ATTRIBUTE_ITEM"
argument_list|,
name|annotated
argument_list|,
name|contextName
argument_list|)
throw|;
block|}
name|factoryCommon
argument_list|(
name|realAnnotated
argument_list|,
name|currentSchema
argument_list|,
name|schemaCollection
argument_list|,
name|prefixAccumulator
argument_list|,
name|attributeInfo
argument_list|)
expr_stmt|;
name|attributeInfo
operator|.
name|annotated
operator|=
name|realAnnotated
expr_stmt|;
return|return
name|attributeInfo
return|;
block|}
specifier|private
specifier|static
name|void
name|factoryCommon
parameter_list|(
name|XmlSchemaAnnotated
name|annotated
parameter_list|,
name|XmlSchema
name|currentSchema
parameter_list|,
name|SchemaCollection
name|schemaCollection
parameter_list|,
name|NamespacePrefixAccumulator
name|prefixAccumulator
parameter_list|,
name|AttributeInfo
name|attributeInfo
parameter_list|)
block|{
if|if
condition|(
name|annotated
operator|instanceof
name|XmlSchemaAttribute
condition|)
block|{
name|XmlSchemaAttribute
name|attribute
init|=
operator|(
name|XmlSchemaAttribute
operator|)
name|annotated
decl_stmt|;
name|String
name|attributeNamespaceURI
init|=
name|attribute
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|boolean
name|attributeNoNamespace
init|=
literal|""
operator|.
name|equals
argument_list|(
name|attributeNamespaceURI
argument_list|)
decl_stmt|;
name|XmlSchema
name|attributeSchema
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|attributeNoNamespace
condition|)
block|{
name|attributeSchema
operator|=
name|schemaCollection
operator|.
name|getSchemaByTargetNamespace
argument_list|(
name|attributeNamespaceURI
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeSchema
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Missing schema "
operator|+
name|attributeNamespaceURI
argument_list|)
throw|;
block|}
block|}
name|boolean
name|qualified
init|=
operator|!
name|attributeNoNamespace
operator|&&
name|XmlSchemaUtils
operator|.
name|isAttributeQualified
argument_list|(
name|attribute
argument_list|,
literal|true
argument_list|,
name|currentSchema
argument_list|,
name|attributeSchema
argument_list|)
decl_stmt|;
name|attributeInfo
operator|.
name|xmlName
operator|=
name|prefixAccumulator
operator|.
name|xmlAttributeString
argument_list|(
name|attribute
argument_list|,
name|qualified
argument_list|)
expr_stmt|;
comment|// we are assuming here that we are not dealing, in close proximity,
comment|// with elements with identical local names and different
comment|// namespaces.
name|attributeInfo
operator|.
name|javascriptName
operator|=
name|attribute
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
expr_stmt|;
name|attributeInfo
operator|.
name|defaultValue
operator|=
name|attribute
operator|.
name|getDefaultValue
argument_list|()
expr_stmt|;
name|attributeInfo
operator|.
name|fixedValue
operator|=
name|attribute
operator|.
name|getFixedValue
argument_list|()
expr_stmt|;
name|attributeInfo
operator|.
name|use
operator|=
name|attribute
operator|.
name|getUse
argument_list|()
expr_stmt|;
name|factorySetupType
argument_list|(
name|attribute
argument_list|,
name|schemaCollection
argument_list|,
name|attributeInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// any
name|attributeInfo
operator|.
name|any
operator|=
literal|true
expr_stmt|;
name|attributeInfo
operator|.
name|xmlName
operator|=
literal|null
expr_stmt|;
comment|// unknown until runtime.
name|attributeInfo
operator|.
name|javascriptName
operator|=
literal|"any"
expr_stmt|;
name|attributeInfo
operator|.
name|type
operator|=
literal|null
expr_stmt|;
comment|// runtime for any.
name|attributeInfo
operator|.
name|use
operator|=
name|XmlSchemaUse
operator|.
name|OPTIONAL
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|factorySetupType
parameter_list|(
name|XmlSchemaAttribute
name|element
parameter_list|,
name|SchemaCollection
name|schemaCollection
parameter_list|,
name|AttributeInfo
name|attributeInfo
parameter_list|)
block|{
name|attributeInfo
operator|.
name|type
operator|=
name|element
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
if|if
condition|(
name|attributeInfo
operator|.
name|type
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|element
operator|.
name|getSchemaTypeName
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|XSD_ANYTYPE
argument_list|)
condition|)
block|{
name|attributeInfo
operator|.
name|anyType
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|attributeInfo
operator|.
name|type
operator|=
name|schemaCollection
operator|.
name|getTypeByQName
argument_list|(
name|element
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|attributeInfo
operator|.
name|type
operator|==
literal|null
operator|&&
operator|!
name|element
operator|.
name|getSchemaTypeName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|URI_2001_SCHEMA_XSD
argument_list|)
condition|)
block|{
name|XmlSchemaUtils
operator|.
name|unsupportedConstruct
argument_list|(
literal|"MISSING_TYPE"
argument_list|,
name|element
operator|.
name|getSchemaTypeName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|attributeInfo
operator|.
name|type
operator|.
name|getQName
argument_list|()
operator|!=
literal|null
operator|&&
name|Constants
operator|.
name|XSD_ANYTYPE
operator|.
name|equals
argument_list|(
name|attributeInfo
operator|.
name|type
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
block|{
name|attributeInfo
operator|.
name|anyType
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      * Return the object for the Attribute or the anyAttribute.      * @return      */
specifier|public
name|XmlSchemaAnnotated
name|getAnnotated
parameter_list|()
block|{
return|return
name|annotated
return|;
block|}
specifier|public
name|String
name|getJavascriptName
parameter_list|()
block|{
return|return
name|javascriptName
return|;
block|}
specifier|public
name|void
name|setJavascriptName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|javascriptName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getXmlName
parameter_list|()
block|{
return|return
name|xmlName
return|;
block|}
specifier|public
name|void
name|setXmlName
parameter_list|(
name|String
name|elementXmlName
parameter_list|)
block|{
name|this
operator|.
name|xmlName
operator|=
name|elementXmlName
expr_stmt|;
block|}
specifier|public
name|XmlSchemaType
name|getContainingType
parameter_list|()
block|{
return|return
name|containingType
return|;
block|}
specifier|public
name|void
name|setContainingType
parameter_list|(
name|XmlSchemaType
name|containingType
parameter_list|)
block|{
name|this
operator|.
name|containingType
operator|=
name|containingType
expr_stmt|;
block|}
specifier|public
name|XmlSchemaType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|XmlSchemaType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAny
parameter_list|()
block|{
return|return
name|any
return|;
block|}
specifier|public
name|boolean
name|isAnyType
parameter_list|()
block|{
return|return
name|anyType
return|;
block|}
comment|/**      * *      *      * @return Returns the defaultValue.      */
specifier|public
name|String
name|getDefaultValue
parameter_list|()
block|{
if|if
condition|(
name|defaultValue
operator|==
literal|null
operator|&&
name|fixedValue
operator|!=
literal|null
condition|)
block|{
return|return
name|fixedValue
return|;
block|}
return|return
name|defaultValue
return|;
block|}
comment|/**      * True if this describes a global, named, attribute.      *      * @return      */
specifier|public
name|boolean
name|isGlobal
parameter_list|()
block|{
return|return
name|global
return|;
block|}
specifier|public
name|String
name|getFixedValue
parameter_list|()
block|{
return|return
name|fixedValue
return|;
block|}
specifier|public
name|void
name|setFixedValue
parameter_list|(
name|String
name|fixedValue
parameter_list|)
block|{
name|this
operator|.
name|fixedValue
operator|=
name|fixedValue
expr_stmt|;
block|}
specifier|public
name|boolean
name|isArray
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isNillable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isOptional
parameter_list|()
block|{
return|return
operator|!
name|use
operator|.
name|equals
argument_list|(
name|XmlSchemaUse
operator|.
name|REQUIRED
argument_list|)
return|;
block|}
specifier|public
name|void
name|setDefaultValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|defaultValue
operator|=
name|value
expr_stmt|;
block|}
block|}
end_class

end_unit

