begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|ContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|Scriptable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|ScriptableObject
import|;
end_import

begin_comment
comment|/**  * A Rhino wrapper around org.w3c.dom.Node. Not comprehensive, but enough to test CXF JavaScript.  */
end_comment

begin_class
specifier|public
class|class
name|JsSimpleDomNode
extends|extends
name|ScriptableObject
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|299162863985870752L
decl_stmt|;
specifier|private
name|Node
name|wrappedNode
decl_stmt|;
specifier|private
name|boolean
name|childrenWrapped
decl_stmt|;
specifier|private
name|boolean
name|attributesWrapped
decl_stmt|;
specifier|private
name|JsSimpleDomNode
name|previousSibling
decl_stmt|;
specifier|private
name|JsSimpleDomNode
name|nextSibling
decl_stmt|;
specifier|private
name|List
argument_list|<
name|JsSimpleDomNode
argument_list|>
name|children
decl_stmt|;
specifier|private
name|JsNamedNodeMap
name|attributes
decl_stmt|;
comment|/**      * Only exists to make Rhino happy. Should never be used.      */
specifier|public
name|JsSimpleDomNode
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|register
parameter_list|(
name|ScriptableObject
name|scope
parameter_list|)
block|{
try|try
block|{
name|ScriptableObject
operator|.
name|defineClass
argument_list|(
name|scope
argument_list|,
name|JsSimpleDomNode
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
literal|"Node"
return|;
block|}
specifier|public
name|Node
name|getWrappedNode
parameter_list|()
block|{
return|return
name|wrappedNode
return|;
block|}
comment|// CHECKSTYLE:OFF
specifier|public
name|String
name|jsGet_localName
parameter_list|()
block|{
return|return
name|wrappedNode
operator|.
name|getLocalName
argument_list|()
return|;
block|}
specifier|public
name|String
name|jsGet_namespaceURI
parameter_list|()
block|{
return|return
name|wrappedNode
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
specifier|public
name|Object
name|jsGet_firstChild
parameter_list|()
block|{
name|establishChildren
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Object
name|jsGet_nextSibling
parameter_list|()
block|{
return|return
name|nextSibling
return|;
block|}
specifier|public
name|Object
name|jsGet_previousSibling
parameter_list|()
block|{
return|return
name|previousSibling
return|;
block|}
specifier|public
name|Object
name|jsGet_parentNode
parameter_list|()
block|{
comment|// risk errors in object equality ...
return|return
name|wrapNode
argument_list|(
name|this
argument_list|,
name|wrappedNode
operator|.
name|getParentNode
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|jsGet_nodeType
parameter_list|()
block|{
return|return
name|wrappedNode
operator|.
name|getNodeType
argument_list|()
return|;
block|}
specifier|public
name|String
name|jsGet_nodeValue
parameter_list|()
block|{
return|return
name|wrappedNode
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
specifier|public
name|String
name|jsGet_nodeName
parameter_list|()
block|{
return|return
name|wrappedNode
operator|.
name|getNodeName
argument_list|()
return|;
block|}
comment|// in a more complete version of this, we'd use a different object type to wrap documents.
specifier|public
name|Object
name|jsGet_documentElement
parameter_list|()
block|{
if|if
condition|(
literal|9
comment|/* Document */
operator|!=
name|wrappedNode
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|establishChildren
argument_list|()
expr_stmt|;
return|return
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
comment|// it is, after all, just a convenience feature.
block|}
specifier|public
name|Object
index|[]
name|jsGet_childNodes
parameter_list|()
block|{
name|establishChildren
argument_list|()
expr_stmt|;
return|return
name|children
operator|.
name|toArray
argument_list|()
return|;
block|}
specifier|public
name|Object
name|jsGet_attributes
parameter_list|()
block|{
name|establishAttributes
argument_list|()
expr_stmt|;
return|return
name|attributes
return|;
block|}
specifier|public
name|String
name|jsFunction_getAttributeNS
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
name|NamedNodeMap
name|attributes
init|=
name|wrappedNode
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|Node
name|attrNode
init|=
name|attributes
operator|.
name|getNamedItemNS
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrNode
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Attr
name|attribute
init|=
operator|(
name|Attr
operator|)
name|attrNode
decl_stmt|;
return|return
name|attribute
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|String
name|jsFunction_getAttribute
parameter_list|(
name|String
name|localName
parameter_list|)
block|{
name|NamedNodeMap
name|attributes
init|=
name|wrappedNode
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|Node
name|attrNode
init|=
name|attributes
operator|.
name|getNamedItem
argument_list|(
name|localName
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrNode
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Attr
name|attribute
init|=
operator|(
name|Attr
operator|)
name|attrNode
decl_stmt|;
return|return
name|attribute
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|// CHECKSTYLE:ON
specifier|public
specifier|static
name|JsSimpleDomNode
name|wrapNode
parameter_list|(
name|Scriptable
name|scope
parameter_list|,
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Context
name|cx
init|=
name|ContextFactory
operator|.
name|getGlobal
argument_list|()
operator|.
name|enterContext
argument_list|()
decl_stmt|;
try|try
block|{
name|JsSimpleDomNode
name|newObject
init|=
operator|(
name|JsSimpleDomNode
operator|)
name|cx
operator|.
name|newObject
argument_list|(
name|scope
argument_list|,
literal|"Node"
argument_list|)
decl_stmt|;
name|newObject
operator|.
name|initialize
argument_list|(
name|node
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|newObject
return|;
block|}
finally|finally
block|{
name|Context
operator|.
name|exit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|JsSimpleDomNode
name|newObject
parameter_list|(
name|Node
name|node
parameter_list|,
name|JsSimpleDomNode
name|prev
parameter_list|)
block|{
name|Context
name|cx
init|=
name|ContextFactory
operator|.
name|getGlobal
argument_list|()
operator|.
name|enterContext
argument_list|()
decl_stmt|;
try|try
block|{
name|JsSimpleDomNode
name|newObject
init|=
operator|(
name|JsSimpleDomNode
operator|)
name|cx
operator|.
name|newObject
argument_list|(
name|getParentScope
argument_list|()
argument_list|,
literal|"Node"
argument_list|)
decl_stmt|;
name|newObject
operator|.
name|initialize
argument_list|(
name|node
argument_list|,
name|prev
argument_list|)
expr_stmt|;
return|return
name|newObject
return|;
block|}
finally|finally
block|{
name|Context
operator|.
name|exit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|establishChildren
parameter_list|()
block|{
if|if
condition|(
operator|!
name|childrenWrapped
condition|)
block|{
if|if
condition|(
name|wrappedNode
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
name|children
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|Node
name|node
init|=
name|wrappedNode
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|JsSimpleDomNode
name|prev
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|x
operator|>
literal|0
condition|)
block|{
name|prev
operator|=
name|children
operator|.
name|get
argument_list|(
name|x
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|children
operator|.
name|add
argument_list|(
name|x
argument_list|,
name|newObject
argument_list|(
name|node
argument_list|,
name|prev
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|>
literal|0
condition|)
block|{
name|children
operator|.
name|get
argument_list|(
name|x
operator|-
literal|1
argument_list|)
operator|.
name|setNext
argument_list|(
name|children
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|x
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|children
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|childrenWrapped
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|establishAttributes
parameter_list|()
block|{
if|if
condition|(
operator|!
name|attributesWrapped
condition|)
block|{
name|NamedNodeMap
name|nodeAttributes
init|=
name|wrappedNode
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|attributes
operator|=
name|JsNamedNodeMap
operator|.
name|wrapMap
argument_list|(
name|getParentScope
argument_list|()
argument_list|,
name|nodeAttributes
argument_list|)
expr_stmt|;
name|attributesWrapped
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// rhino won't let us use a constructor.
name|void
name|initialize
parameter_list|(
name|Node
name|node
parameter_list|,
name|JsSimpleDomNode
name|prev
parameter_list|)
block|{
name|wrappedNode
operator|=
name|node
expr_stmt|;
name|childrenWrapped
operator|=
literal|false
expr_stmt|;
name|previousSibling
operator|=
name|prev
expr_stmt|;
block|}
name|void
name|setNext
parameter_list|(
name|JsSimpleDomNode
name|next
parameter_list|)
block|{
name|nextSibling
operator|=
name|next
expr_stmt|;
block|}
block|}
end_class

end_unit

