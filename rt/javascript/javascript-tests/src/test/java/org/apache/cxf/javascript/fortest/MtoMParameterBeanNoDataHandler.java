begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|fortest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlMimeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlType
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|XmlType
argument_list|(
name|namespace
operator|=
literal|"uri:org.apache.cxf.javascript.testns"
argument_list|)
specifier|public
class|class
name|MtoMParameterBeanNoDataHandler
block|{
specifier|private
name|String
name|ordinary
decl_stmt|;
specifier|private
name|String
name|notXml10
decl_stmt|;
specifier|public
name|String
name|getOrdinary
parameter_list|()
block|{
return|return
name|ordinary
return|;
block|}
specifier|public
name|void
name|setOrdinary
parameter_list|(
name|String
name|ordinary
parameter_list|)
block|{
name|this
operator|.
name|ordinary
operator|=
name|ordinary
expr_stmt|;
block|}
annotation|@
name|XmlMimeType
argument_list|(
literal|"text/plain;charset=utf-8"
argument_list|)
specifier|public
name|byte
index|[]
name|getNotXml10
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
return|return
name|notXml10
operator|.
name|getBytes
argument_list|(
literal|"utf-8"
argument_list|)
return|;
block|}
specifier|public
name|void
name|setNotXml10
parameter_list|(
name|byte
index|[]
name|notXml10
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|notXml10
operator|=
operator|new
name|String
argument_list|(
name|notXml10
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setNotXml10
parameter_list|(
name|String
name|notXml10
parameter_list|)
block|{
name|this
operator|.
name|notXml10
operator|=
name|notXml10
expr_stmt|;
block|}
block|}
end_class

end_unit

