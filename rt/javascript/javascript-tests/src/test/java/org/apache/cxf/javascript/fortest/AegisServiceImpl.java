begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|fortest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|fortest
operator|.
name|aegis
operator|.
name|BeanWithAnyTypeArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|fortest
operator|.
name|aegis
operator|.
name|Mammal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|javascript
operator|.
name|fortest
operator|.
name|aegis
operator|.
name|Vegetable
import|;
end_import

begin_comment
comment|/**  * Service used to test out JavaScript talking to Aegis.  */
end_comment

begin_class
specifier|public
class|class
name|AegisServiceImpl
implements|implements
name|AegisService
block|{
specifier|private
name|String
name|acceptedString
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|Document
argument_list|>
name|acceptedCollection
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|acceptedStrings
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|Object
argument_list|>
name|acceptedObjects
decl_stmt|;
specifier|private
name|CountDownLatch
name|oneWayLatch
decl_stmt|;
specifier|public
name|Collection
argument_list|<
name|Object
argument_list|>
name|getAcceptedObjects
parameter_list|()
block|{
return|return
name|acceptedObjects
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|acceptedString
operator|=
literal|null
expr_stmt|;
name|acceptedCollection
operator|=
literal|null
expr_stmt|;
block|}
comment|/** {@inheritDoc}*/
specifier|public
name|void
name|acceptAny
parameter_list|(
name|String
name|before
parameter_list|,
name|Collection
argument_list|<
name|Document
argument_list|>
name|anything
parameter_list|)
block|{
name|acceptedString
operator|=
name|before
expr_stmt|;
name|acceptedCollection
operator|=
name|anything
expr_stmt|;
if|if
condition|(
name|oneWayLatch
operator|!=
literal|null
condition|)
block|{
name|oneWayLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @return Returns the acceptedCollection.      */
specifier|public
name|Collection
argument_list|<
name|Document
argument_list|>
name|getAcceptedCollection
parameter_list|()
block|{
return|return
name|acceptedCollection
return|;
block|}
comment|/**      * @return Returns the acceptedString.      */
specifier|public
name|String
name|getAcceptedString
parameter_list|()
block|{
return|return
name|acceptedString
return|;
block|}
specifier|public
name|void
name|acceptStrings
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|someStrings
parameter_list|)
block|{
name|acceptedStrings
operator|=
name|someStrings
expr_stmt|;
block|}
comment|/**      * @return Returns the acceptedStrings.      */
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getAcceptedStrings
parameter_list|()
block|{
return|return
name|acceptedStrings
return|;
block|}
specifier|public
name|void
name|acceptObjects
parameter_list|(
name|Collection
argument_list|<
name|Object
argument_list|>
name|anything
parameter_list|)
block|{
name|acceptedObjects
operator|=
name|anything
expr_stmt|;
if|if
condition|(
name|oneWayLatch
operator|!=
literal|null
condition|)
block|{
name|oneWayLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|BeanWithAnyTypeArray
name|returnBeanWithAnyTypeArray
parameter_list|()
block|{
name|BeanWithAnyTypeArray
name|bwata
init|=
operator|new
name|BeanWithAnyTypeArray
argument_list|()
decl_stmt|;
name|bwata
operator|.
name|setString
argument_list|(
literal|"lima"
argument_list|)
expr_stmt|;
name|Object
index|[]
name|obs
init|=
operator|new
name|Object
index|[
literal|3
index|]
decl_stmt|;
name|obs
index|[
literal|0
index|]
operator|=
operator|new
name|Mammal
argument_list|()
expr_stmt|;
name|obs
index|[
literal|1
index|]
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|obs
index|[
literal|2
index|]
operator|=
operator|new
name|Vegetable
argument_list|()
expr_stmt|;
comment|// this is NOT in the WSDL.
name|bwata
operator|.
name|setObjects
argument_list|(
name|obs
argument_list|)
expr_stmt|;
return|return
name|bwata
return|;
block|}
specifier|public
name|void
name|prepareToWaitForOneWay
parameter_list|()
block|{
name|oneWayLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|waitForOneWay
parameter_list|()
block|{
if|if
condition|(
name|oneWayLatch
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|oneWayLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//
block|}
name|oneWayLatch
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

