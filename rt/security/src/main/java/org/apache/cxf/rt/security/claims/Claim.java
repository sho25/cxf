begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_comment
comment|/**  * This represents a Claim.  */
end_comment

begin_class
specifier|public
class|class
name|Claim
implements|implements
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|5730726672368086795L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|Claim
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|claimType
decl_stmt|;
specifier|private
name|boolean
name|optional
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|Claim
parameter_list|()
block|{     }
comment|/**      * Create a clone of the provided claim.      *      * @param claim Claim to be cloned. Value cannot be null.      */
specifier|public
name|Claim
parameter_list|(
name|Claim
name|claim
parameter_list|)
block|{
if|if
condition|(
name|claim
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Claim cannot be null"
argument_list|)
throw|;
block|}
name|claimType
operator|=
name|claim
operator|.
name|getClaimType
argument_list|()
expr_stmt|;
name|optional
operator|=
name|claim
operator|.
name|isOptional
argument_list|()
expr_stmt|;
name|values
operator|.
name|addAll
argument_list|(
name|claim
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getClaimType
parameter_list|()
block|{
return|return
name|claimType
return|;
block|}
specifier|public
name|void
name|setClaimType
parameter_list|(
name|String
name|claimType
parameter_list|)
block|{
name|this
operator|.
name|claimType
operator|=
name|claimType
expr_stmt|;
block|}
specifier|public
name|void
name|setClaimType
parameter_list|(
name|URI
name|claimType
parameter_list|)
block|{
name|this
operator|.
name|claimType
operator|=
name|claimType
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOptional
parameter_list|()
block|{
return|return
name|optional
return|;
block|}
specifier|public
name|void
name|setOptional
parameter_list|(
name|boolean
name|optional
parameter_list|)
block|{
name|this
operator|.
name|optional
operator|=
name|optional
expr_stmt|;
block|}
specifier|public
name|void
name|setValues
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
block|{
name|this
operator|.
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|values
operator|.
name|addAll
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addValue
parameter_list|(
name|Object
name|s
parameter_list|)
block|{
name|this
operator|.
name|values
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|String
name|localname
init|=
literal|"ClaimType"
decl_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|localname
operator|=
literal|"ClaimValue"
expr_stmt|;
block|}
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
name|localname
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|null
argument_list|,
literal|"Uri"
argument_list|,
name|claimType
argument_list|)
expr_stmt|;
if|if
condition|(
name|optional
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|null
argument_list|,
literal|"Optional"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
literal|"Value"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Only a ClaimValue String can be serialized"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Claim
name|clone
parameter_list|()
block|{
comment|//NOPMD
try|try
block|{
name|super
operator|.
name|clone
argument_list|()
expr_stmt|;
comment|// Checkstyle requires this call
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Claim
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|claimType
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|claimType
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
name|optional
condition|?
literal|1231
else|:
literal|1237
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|values
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|values
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Claim
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Claim
name|other
init|=
operator|(
name|Claim
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|claimType
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|claimType
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|claimType
operator|.
name|equals
argument_list|(
name|other
operator|.
name|claimType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|optional
operator|!=
name|other
operator|.
name|optional
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|values
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|values
operator|.
name|equals
argument_list|(
name|other
operator|.
name|values
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Claim [values="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", claimType="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|claimType
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", optional="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|optional
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

