begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|xacml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|xacml
operator|.
name|pdp
operator|.
name|api
operator|.
name|PolicyDecisionPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|OpenSAMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|XACMLObjectBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|ctx
operator|.
name|AttributeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|ctx
operator|.
name|DecisionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|ctx
operator|.
name|DecisionType
operator|.
name|DECISION
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|ctx
operator|.
name|RequestType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|ctx
operator|.
name|ResponseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|ctx
operator|.
name|ResultType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|ctx
operator|.
name|StatusCodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|ctx
operator|.
name|StatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|ctx
operator|.
name|SubjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xml
operator|.
name|XMLObjectBuilderFactory
import|;
end_import

begin_comment
comment|/**  * A test implementation of AbstractXACMLAuthorizingInterceptor. It just mocks up a Response  * object based on the role of the Subject. If the role is "manager" then it permits the  * request, otherwise it denies it.  */
end_comment

begin_class
specifier|public
class|class
name|DummyPDP
implements|implements
name|PolicyDecisionPoint
block|{
specifier|public
name|Source
name|evaluate
parameter_list|(
name|Source
name|requestSource
parameter_list|)
block|{
name|RequestType
name|request
init|=
name|requestSourceToRequestType
argument_list|(
name|requestSource
argument_list|)
decl_stmt|;
name|String
name|role
init|=
name|getSubjectRole
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|DECISION
name|decision
init|=
literal|"manager"
operator|.
name|equals
argument_list|(
name|role
argument_list|)
condition|?
name|DecisionType
operator|.
name|DECISION
operator|.
name|Permit
else|:
name|DecisionType
operator|.
name|DECISION
operator|.
name|Deny
decl_stmt|;
name|ResponseType
name|response
init|=
name|createResponse
argument_list|(
name|decision
argument_list|)
decl_stmt|;
return|return
name|responseType2Source
argument_list|(
name|response
argument_list|)
return|;
block|}
specifier|private
name|RequestType
name|requestSourceToRequestType
parameter_list|(
name|Source
name|requestSource
parameter_list|)
block|{
try|try
block|{
name|Transformer
name|trans
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|DOMResult
name|res
init|=
operator|new
name|DOMResult
argument_list|()
decl_stmt|;
name|trans
operator|.
name|transform
argument_list|(
name|requestSource
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|Node
name|nd
init|=
name|res
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|nd
operator|instanceof
name|Document
condition|)
block|{
name|nd
operator|=
operator|(
operator|(
name|Document
operator|)
name|nd
operator|)
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|RequestType
operator|)
name|OpenSAMLUtil
operator|.
name|fromDom
argument_list|(
operator|(
name|Element
operator|)
name|nd
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error converting pdp response to ResponseType"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Source
name|responseType2Source
parameter_list|(
name|ResponseType
name|response
parameter_list|)
block|{
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|responseElement
decl_stmt|;
try|try
block|{
name|responseElement
operator|=
name|OpenSAMLUtil
operator|.
name|toDom
argument_list|(
name|response
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error converting PDP RequestType to Dom"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|DOMSource
argument_list|(
name|responseElement
argument_list|)
return|;
block|}
specifier|private
name|ResponseType
name|createResponse
parameter_list|(
name|DECISION
name|decision
parameter_list|)
block|{
name|XMLObjectBuilderFactory
name|builderFactory
init|=
name|Configuration
operator|.
name|getBuilderFactory
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|XACMLObjectBuilder
argument_list|<
name|ResponseType
argument_list|>
name|responseTypeBuilder
init|=
operator|(
name|XACMLObjectBuilder
argument_list|<
name|ResponseType
argument_list|>
operator|)
name|builderFactory
operator|.
name|getBuilder
argument_list|(
name|ResponseType
operator|.
name|DEFAULT_ELEMENT_NAME
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|XACMLObjectBuilder
argument_list|<
name|ResultType
argument_list|>
name|resultTypeBuilder
init|=
operator|(
name|XACMLObjectBuilder
argument_list|<
name|ResultType
argument_list|>
operator|)
name|builderFactory
operator|.
name|getBuilder
argument_list|(
name|ResultType
operator|.
name|DEFAULT_ELEMENT_NAME
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|XACMLObjectBuilder
argument_list|<
name|DecisionType
argument_list|>
name|decisionTypeBuilder
init|=
operator|(
name|XACMLObjectBuilder
argument_list|<
name|DecisionType
argument_list|>
operator|)
name|builderFactory
operator|.
name|getBuilder
argument_list|(
name|DecisionType
operator|.
name|DEFAULT_ELEMENT_NAME
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|XACMLObjectBuilder
argument_list|<
name|StatusType
argument_list|>
name|statusTypeBuilder
init|=
operator|(
name|XACMLObjectBuilder
argument_list|<
name|StatusType
argument_list|>
operator|)
name|builderFactory
operator|.
name|getBuilder
argument_list|(
name|StatusType
operator|.
name|DEFAULT_ELEMENT_NAME
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|XACMLObjectBuilder
argument_list|<
name|StatusCodeType
argument_list|>
name|statusCodeTypeBuilder
init|=
operator|(
name|XACMLObjectBuilder
argument_list|<
name|StatusCodeType
argument_list|>
operator|)
name|builderFactory
operator|.
name|getBuilder
argument_list|(
name|StatusCodeType
operator|.
name|DEFAULT_ELEMENT_NAME
argument_list|)
decl_stmt|;
name|ResultType
name|result
init|=
name|resultTypeBuilder
operator|.
name|buildObject
argument_list|()
decl_stmt|;
name|DecisionType
name|decisionType
init|=
name|decisionTypeBuilder
operator|.
name|buildObject
argument_list|()
decl_stmt|;
name|decisionType
operator|.
name|setDecision
argument_list|(
name|decision
argument_list|)
expr_stmt|;
name|result
operator|.
name|setDecision
argument_list|(
name|decisionType
argument_list|)
expr_stmt|;
name|StatusType
name|status
init|=
name|statusTypeBuilder
operator|.
name|buildObject
argument_list|()
decl_stmt|;
name|StatusCodeType
name|statusCode
init|=
name|statusCodeTypeBuilder
operator|.
name|buildObject
argument_list|()
decl_stmt|;
name|statusCode
operator|.
name|setValue
argument_list|(
literal|"urn:oasis:names:tc:xacml:1.0:status:ok"
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatusCode
argument_list|(
name|statusCode
argument_list|)
expr_stmt|;
name|result
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|ResponseType
name|response
init|=
name|responseTypeBuilder
operator|.
name|buildObject
argument_list|()
decl_stmt|;
name|response
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
specifier|private
name|String
name|getSubjectRole
parameter_list|(
name|RequestType
name|request
parameter_list|)
block|{
name|List
argument_list|<
name|SubjectType
argument_list|>
name|subjects
init|=
name|request
operator|.
name|getSubjects
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjects
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SubjectType
name|subject
range|:
name|subjects
control|)
block|{
name|List
argument_list|<
name|AttributeType
argument_list|>
name|attributes
init|=
name|subject
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|attributes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AttributeType
name|attribute
range|:
name|attributes
control|)
block|{
if|if
condition|(
name|XACMLConstants
operator|.
name|SUBJECT_ROLE
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|getAttributeID
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|attribute
operator|.
name|getAttributeValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

