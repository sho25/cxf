begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|xacml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|xacml
operator|.
name|pdp
operator|.
name|api
operator|.
name|PolicyDecisionPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|LoginSecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_comment
comment|/**  * Some unit tests to test the AbstractXACMLAuthorizingInterceptor.  */
end_comment

begin_class
specifier|public
class|class
name|XACMLAuthorizingInterceptorTest
extends|extends
name|org
operator|.
name|junit
operator|.
name|Assert
block|{
static|static
block|{
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|OpenSAMLUtil
operator|.
name|initSamlEngine
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testPermit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Mock up a Security Context
name|SecurityContext
name|sc
init|=
name|createSecurityContext
argument_list|(
literal|"alice"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|String
name|operation
init|=
literal|"{http://www.example.org/contract/DoubleIt}DoubleIt"
decl_stmt|;
name|MessageImpl
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_OPERATION
argument_list|,
name|QName
operator|.
name|valueOf
argument_list|(
name|operation
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|service
init|=
literal|"{http://www.example.org/contract/DoubleIt}DoubleItService"
decl_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_SERVICE
argument_list|,
name|QName
operator|.
name|valueOf
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|resourceURI
init|=
literal|"https://localhost:8080/doubleit"
decl_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|,
name|resourceURI
argument_list|)
expr_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
name|sc
argument_list|)
expr_stmt|;
name|PolicyDecisionPoint
name|pdp
init|=
operator|new
name|DummyPDP
argument_list|()
decl_stmt|;
name|XACMLAuthorizingInterceptor
name|authorizingInterceptor
init|=
operator|new
name|XACMLAuthorizingInterceptor
argument_list|(
name|pdp
argument_list|)
decl_stmt|;
name|authorizingInterceptor
operator|.
name|handleMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testDeny
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Mock up a Security Context
name|SecurityContext
name|sc
init|=
name|createSecurityContext
argument_list|(
literal|"alice"
argument_list|,
literal|"boss"
argument_list|)
decl_stmt|;
name|String
name|operation
init|=
literal|"{http://www.example.org/contract/DoubleIt}DoubleIt"
decl_stmt|;
name|MessageImpl
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_OPERATION
argument_list|,
name|QName
operator|.
name|valueOf
argument_list|(
name|operation
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|service
init|=
literal|"{http://www.example.org/contract/DoubleIt}DoubleItService"
decl_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_SERVICE
argument_list|,
name|QName
operator|.
name|valueOf
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|resourceURI
init|=
literal|"https://localhost:8080/doubleit"
decl_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|,
name|resourceURI
argument_list|)
expr_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
name|sc
argument_list|)
expr_stmt|;
name|PolicyDecisionPoint
name|pdp
init|=
operator|new
name|DummyPDP
argument_list|()
decl_stmt|;
name|XACMLAuthorizingInterceptor
name|authorizingInterceptor
init|=
operator|new
name|XACMLAuthorizingInterceptor
argument_list|(
name|pdp
argument_list|)
decl_stmt|;
try|try
block|{
name|authorizingInterceptor
operator|.
name|handleMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on deny"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Failure expected
block|}
block|}
specifier|private
name|SecurityContext
name|createSecurityContext
parameter_list|(
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|String
name|role
parameter_list|)
block|{
return|return
operator|new
name|LoginSecurityContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
operator|new
name|Principal
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|user
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Subject
name|getSubject
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Principal
argument_list|>
name|getUserRoles
parameter_list|()
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
operator|new
name|Principal
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|role
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|principals
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

