begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TypeCode
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaStructHandler
extends|extends
name|CorbaObjectHandler
block|{
name|List
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|members
init|=
operator|new
name|ArrayList
argument_list|<
name|CorbaObjectHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|CorbaStructHandler
parameter_list|(
name|QName
name|structName
parameter_list|,
name|QName
name|structIdlType
parameter_list|,
name|TypeCode
name|structTC
parameter_list|,
name|Object
name|structType
parameter_list|)
block|{
name|super
argument_list|(
name|structName
argument_list|,
name|structIdlType
argument_list|,
name|structTC
argument_list|,
name|structType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addMember
parameter_list|(
name|CorbaObjectHandler
name|member
parameter_list|)
block|{
name|members
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|getMembers
parameter_list|()
block|{
return|return
name|members
return|;
block|}
specifier|public
name|CorbaObjectHandler
name|getMember
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|members
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|CorbaObjectHandler
name|getMemberByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|CorbaObjectHandler
name|member
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|iterator
init|=
name|members
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CorbaObjectHandler
name|current
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|member
operator|=
name|current
expr_stmt|;
break|break;
block|}
block|}
return|return
name|member
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|members
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|members
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

