begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLEventFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|CorbaObjectReferenceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|CorbaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|EprMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|CorbaObjectReferenceEventProducer
extends|extends
name|AbstractStartEndEventProducer
block|{
specifier|static
specifier|final
name|String
name|WSDLI_NAMESPACE_URI
init|=
literal|"http://www.w3.org/2006/01/wsdl-instance"
decl_stmt|;
specifier|static
specifier|final
name|String
name|XSI_NAMESPACE_URI
init|=
literal|"http://www.w3.org/2001/XMLSchema-instance"
decl_stmt|;
specifier|static
specifier|final
name|QName
name|WSA_ADDRESS
init|=
operator|new
name|QName
argument_list|(
name|CorbaObjectReferenceHelper
operator|.
name|ADDRESSING_NAMESPACE_URI
argument_list|,
literal|"Address"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|List
argument_list|<
name|Attribute
argument_list|>
name|IS_NIL_OBJ_REF_ATTRS
decl_stmt|;
static|static
block|{
name|XMLEventFactory
name|factory
init|=
name|XMLEventFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|IS_NIL_OBJ_REF_ATTRS
operator|=
operator|new
name|ArrayList
argument_list|<
name|Attribute
argument_list|>
argument_list|()
expr_stmt|;
name|IS_NIL_OBJ_REF_ATTRS
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|XSI_NAMESPACE_URI
argument_list|,
literal|"nil"
argument_list|,
literal|"xsi"
argument_list|)
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|INFER_FROM_TYPE_ID
init|=
literal|"InferFromTypeId"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|CorbaObjectReferenceEventProducer
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Attribute
argument_list|>
name|refAttrs
decl_stmt|;
specifier|public
name|CorbaObjectReferenceEventProducer
parameter_list|(
name|CorbaObjectHandler
name|h
parameter_list|,
name|ServiceInfo
name|service
parameter_list|,
name|ORB
name|orbRef
parameter_list|)
block|{
name|CorbaObjectReferenceHandler
name|handler
init|=
operator|(
name|CorbaObjectReferenceHandler
operator|)
name|h
decl_stmt|;
name|name
operator|=
name|CorbaUtils
operator|.
name|processQName
argument_list|(
name|handler
operator|.
name|getName
argument_list|()
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|orb
operator|=
name|orbRef
expr_stmt|;
name|serviceInfo
operator|=
name|service
expr_stmt|;
name|refAttrs
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|handler
operator|.
name|getReference
argument_list|()
operator|==
literal|null
condition|)
block|{
name|refAttrs
operator|=
name|IS_NIL_OBJ_REF_ATTRS
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|CorbaTypeEventProducer
argument_list|>
name|objRefProducers
init|=
operator|new
name|ArrayList
argument_list|<
name|CorbaTypeEventProducer
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|address
init|=
name|orb
operator|.
name|object_to_string
argument_list|(
name|handler
operator|.
name|getReference
argument_list|()
argument_list|)
decl_stmt|;
name|objRefProducers
operator|.
name|add
argument_list|(
operator|new
name|CorbaAddressEventProducer
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
name|Definition
name|wsdlDef
init|=
operator|(
name|Definition
operator|)
name|serviceInfo
operator|.
name|getProperty
argument_list|(
name|WSDLServiceBuilder
operator|.
name|WSDL_DEFINITION
argument_list|)
decl_stmt|;
comment|// Get the TypeImpl of the object reference so that we can determine the binding
comment|// needed for this object reference
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Object
name|objType
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Object
operator|)
name|handler
operator|.
name|getType
argument_list|()
decl_stmt|;
name|QName
name|bindingName
init|=
name|objType
operator|.
name|getBinding
argument_list|()
decl_stmt|;
if|if
condition|(
name|bindingName
operator|!=
literal|null
condition|)
block|{
name|EprMetaData
name|eprInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|INFER_FROM_TYPE_ID
operator|.
name|equalsIgnoreCase
argument_list|(
name|bindingName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|typeId
init|=
name|CorbaObjectReferenceHelper
operator|.
name|extractTypeIdFromIOR
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|typeId
argument_list|)
condition|)
block|{
name|eprInfo
operator|=
name|getEprMetadataForTypeId
argument_list|(
name|wsdlDef
argument_list|,
name|typeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"For binding with value \""
operator|+
name|INFER_FROM_TYPE_ID
operator|+
literal|"\" the type_id of the object reference IOR must be set to its most"
operator|+
literal|" derived type. It is currently null indicating CORBA:Object."
operator|+
literal|" Address Url="
operator|+
name|address
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|eprInfo
operator|=
name|getEprMetadataForBindingName
argument_list|(
name|wsdlDef
argument_list|,
name|bindingName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|eprInfo
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Epr metadata "
operator|+
name|eprInfo
argument_list|)
expr_stmt|;
comment|// Create the meta data producer and add its child producers.
name|String
name|wsdlLoc
init|=
name|CorbaObjectReferenceHelper
operator|.
name|getWSDLLocation
argument_list|(
name|eprInfo
operator|.
name|getCandidateWsdlDef
argument_list|()
argument_list|)
decl_stmt|;
name|CorbaServiceNameEventProducer
name|nameProducer
init|=
operator|new
name|CorbaServiceNameEventProducer
argument_list|(
name|eprInfo
operator|.
name|getServiceQName
argument_list|()
argument_list|,
name|eprInfo
operator|.
name|getPortName
argument_list|()
argument_list|)
decl_stmt|;
name|QName
name|interfaceName
init|=
name|eprInfo
operator|.
name|getBinding
argument_list|()
operator|.
name|getPortType
argument_list|()
operator|.
name|getQName
argument_list|()
decl_stmt|;
name|CorbaInterfaceNameEventProducer
name|interfaceProducer
init|=
operator|new
name|CorbaInterfaceNameEventProducer
argument_list|(
name|interfaceName
argument_list|)
decl_stmt|;
name|CorbaMetaDataEventProducer
name|metaProducer
init|=
operator|new
name|CorbaMetaDataEventProducer
argument_list|(
name|wsdlLoc
argument_list|,
name|nameProducer
argument_list|,
name|interfaceProducer
argument_list|)
decl_stmt|;
name|objRefProducers
operator|.
name|add
argument_list|(
name|metaProducer
argument_list|)
expr_stmt|;
block|}
block|}
name|producers
operator|=
name|objRefProducers
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
specifier|private
name|EprMetaData
name|getEprMetadataForBindingName
parameter_list|(
name|Definition
name|wsdlDef
parameter_list|,
name|QName
name|bindingName
parameter_list|)
block|{
name|EprMetaData
name|info
init|=
name|getObjectReferenceBinding
argument_list|(
name|wsdlDef
argument_list|,
name|bindingName
argument_list|)
decl_stmt|;
name|CorbaObjectReferenceHelper
operator|.
name|populateEprInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|private
name|EprMetaData
name|getEprMetadataForTypeId
parameter_list|(
name|Definition
name|wsdlDef
parameter_list|,
name|String
name|typeId
parameter_list|)
block|{
name|EprMetaData
name|info
init|=
name|CorbaObjectReferenceHelper
operator|.
name|getBindingForTypeId
argument_list|(
name|typeId
argument_list|,
name|wsdlDef
argument_list|)
decl_stmt|;
name|CorbaObjectReferenceHelper
operator|.
name|populateEprInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|public
name|List
argument_list|<
name|Attribute
argument_list|>
name|getAttributes
parameter_list|()
block|{
if|if
condition|(
name|currentEventProducer
operator|!=
literal|null
condition|)
block|{
return|return
name|currentEventProducer
operator|.
name|getAttributes
argument_list|()
return|;
block|}
return|return
name|refAttrs
return|;
block|}
specifier|protected
name|EprMetaData
name|getObjectReferenceBinding
parameter_list|(
name|Definition
name|wsdlDef
parameter_list|,
name|QName
name|bindingName
parameter_list|)
block|{
name|EprMetaData
name|info
init|=
operator|new
name|EprMetaData
argument_list|()
decl_stmt|;
name|Binding
name|wsdlBinding
init|=
name|wsdlDef
operator|.
name|getBinding
argument_list|(
name|bindingName
argument_list|)
decl_stmt|;
comment|// If the binding name does not have a namespace associated with it, then we'll need to
comment|// get the list of all bindings and compare their local parts against our name.
if|if
condition|(
name|wsdlBinding
operator|==
literal|null
operator|&&
name|bindingName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
operator|!
name|bindingName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|Map
name|bindings
init|=
name|wsdlDef
operator|.
name|getBindings
argument_list|()
decl_stmt|;
name|Collection
name|bindingsCollection
init|=
name|bindings
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|bindingsCollection
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Binding
name|b
init|=
operator|(
name|Binding
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|bindingName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|wsdlBinding
operator|=
name|b
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|wsdlBinding
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setBinding
argument_list|(
name|wsdlBinding
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCandidateWsdlDef
argument_list|(
name|wsdlDef
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
comment|// An event producer to handle the production of the Address XML data.
class|class
name|CorbaAddressEventProducer
implements|implements
name|CorbaTypeEventProducer
block|{
name|int
name|state
decl_stmt|;
name|int
index|[]
name|states
init|=
block|{
name|XMLStreamReader
operator|.
name|START_ELEMENT
block|,
name|XMLStreamReader
operator|.
name|CHARACTERS
block|,
name|XMLStreamReader
operator|.
name|END_ELEMENT
block|}
decl_stmt|;
specifier|final
name|String
name|address
decl_stmt|;
specifier|public
name|CorbaAddressEventProducer
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|address
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
name|WSA_ADDRESS
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|address
return|;
block|}
specifier|public
name|int
name|next
parameter_list|()
block|{
return|return
name|states
index|[
name|state
operator|++
index|]
return|;
block|}
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
name|WSA_ADDRESS
return|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|state
operator|<
name|states
operator|.
name|length
return|;
block|}
specifier|public
name|List
argument_list|<
name|Attribute
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|Namespace
argument_list|>
name|getNamespaces
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// An event producer to handle the production of the Metadata XML data.  This producer will rely
comment|// on two additional producers to handle the production of sub-events.
class|class
name|CorbaMetaDataEventProducer
extends|extends
name|AbstractStartEndEventProducer
block|{
name|CorbaServiceNameEventProducer
name|svcProducer
decl_stmt|;
name|CorbaInterfaceNameEventProducer
name|intfProducer
decl_stmt|;
name|List
argument_list|<
name|Attribute
argument_list|>
name|metaAttrs
decl_stmt|;
specifier|public
name|CorbaMetaDataEventProducer
parameter_list|(
name|CorbaServiceNameEventProducer
name|svc
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|svc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CorbaMetaDataEventProducer
parameter_list|(
name|String
name|location
parameter_list|,
name|CorbaServiceNameEventProducer
name|svc
parameter_list|,
name|CorbaInterfaceNameEventProducer
name|intf
parameter_list|)
block|{
name|name
operator|=
operator|new
name|QName
argument_list|(
name|CorbaObjectReferenceHelper
operator|.
name|ADDRESSING_NAMESPACE_URI
argument_list|,
literal|"Metadata"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CorbaTypeEventProducer
argument_list|>
name|metaDataProducers
init|=
operator|new
name|ArrayList
argument_list|<
name|CorbaTypeEventProducer
argument_list|>
argument_list|()
decl_stmt|;
name|metaDataProducers
operator|.
name|add
argument_list|(
name|svc
argument_list|)
expr_stmt|;
if|if
condition|(
name|intf
operator|!=
literal|null
condition|)
block|{
name|metaDataProducers
operator|.
name|add
argument_list|(
name|intf
argument_list|)
expr_stmt|;
block|}
name|producers
operator|=
name|metaDataProducers
operator|.
name|iterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|XMLEventFactory
name|factory
init|=
name|XMLEventFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|metaAttrs
operator|=
operator|new
name|ArrayList
argument_list|<
name|Attribute
argument_list|>
argument_list|()
expr_stmt|;
name|metaAttrs
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|WSDLI_NAMESPACE_URI
argument_list|,
literal|"wsdlLocation"
argument_list|,
literal|"objrefns1"
argument_list|)
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Attribute
argument_list|>
name|getAttributes
parameter_list|()
block|{
if|if
condition|(
name|currentEventProducer
operator|!=
literal|null
condition|)
block|{
return|return
name|currentEventProducer
operator|.
name|getAttributes
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|metaAttrs
return|;
block|}
block|}
block|}
comment|// An event producer to handle the production of the ServiceName XML data.
class|class
name|CorbaServiceNameEventProducer
implements|implements
name|CorbaTypeEventProducer
block|{
name|int
name|state
decl_stmt|;
name|int
index|[]
name|states
init|=
block|{
name|XMLStreamReader
operator|.
name|START_ELEMENT
block|,
name|XMLStreamReader
operator|.
name|CHARACTERS
block|,
name|XMLStreamReader
operator|.
name|END_ELEMENT
block|}
decl_stmt|;
name|QName
name|serviceName
decl_stmt|;
name|QName
name|name
decl_stmt|;
name|List
argument_list|<
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|List
argument_list|<
name|Namespace
argument_list|>
name|namespaces
decl_stmt|;
specifier|public
name|CorbaServiceNameEventProducer
parameter_list|(
name|QName
name|svc
parameter_list|,
name|String
name|ep
parameter_list|)
block|{
name|serviceName
operator|=
name|svc
expr_stmt|;
name|name
operator|=
operator|new
name|QName
argument_list|(
name|CorbaObjectReferenceHelper
operator|.
name|ADDRESSING_WSDL_NAMESPACE_URI
argument_list|,
literal|"ServiceName"
argument_list|)
expr_stmt|;
name|XMLEventFactory
name|factory
init|=
name|XMLEventFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|attributes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Attribute
argument_list|>
argument_list|()
expr_stmt|;
name|attributes
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
literal|"EndpointName"
argument_list|,
name|ep
argument_list|)
argument_list|)
expr_stmt|;
name|namespaces
operator|=
operator|new
name|ArrayList
argument_list|<
name|Namespace
argument_list|>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createNamespace
argument_list|(
literal|"objrefns2"
argument_list|,
name|svc
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
name|name
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|namespaces
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrefix
argument_list|()
operator|+
literal|":"
operator|+
name|serviceName
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
specifier|public
name|int
name|next
parameter_list|()
block|{
return|return
name|states
index|[
name|state
operator|++
index|]
return|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|state
operator|<
name|states
operator|.
name|length
return|;
block|}
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|List
argument_list|<
name|Attribute
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|attributes
return|;
block|}
specifier|public
name|List
argument_list|<
name|Namespace
argument_list|>
name|getNamespaces
parameter_list|()
block|{
return|return
name|namespaces
return|;
block|}
block|}
comment|// An event producer to handle the production of the InterfaceName XML data.
class|class
name|CorbaInterfaceNameEventProducer
implements|implements
name|CorbaTypeEventProducer
block|{
name|int
name|state
decl_stmt|;
name|int
index|[]
name|states
init|=
block|{
name|XMLStreamReader
operator|.
name|START_ELEMENT
block|,
name|XMLStreamReader
operator|.
name|CHARACTERS
block|,
name|XMLStreamReader
operator|.
name|END_ELEMENT
block|}
decl_stmt|;
name|QName
name|interfaceName
decl_stmt|;
name|QName
name|name
decl_stmt|;
name|List
argument_list|<
name|Namespace
argument_list|>
name|namespaces
decl_stmt|;
specifier|public
name|CorbaInterfaceNameEventProducer
parameter_list|(
name|QName
name|intf
parameter_list|)
block|{
name|interfaceName
operator|=
name|intf
expr_stmt|;
name|name
operator|=
operator|new
name|QName
argument_list|(
name|CorbaObjectReferenceHelper
operator|.
name|ADDRESSING_WSDL_NAMESPACE_URI
argument_list|,
literal|"InterfaceName"
argument_list|)
expr_stmt|;
name|XMLEventFactory
name|factory
init|=
name|XMLEventFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|namespaces
operator|=
operator|new
name|ArrayList
argument_list|<
name|Namespace
argument_list|>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createNamespace
argument_list|(
literal|"objrefns2"
argument_list|,
name|intf
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
name|name
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|namespaces
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPrefix
argument_list|()
operator|+
literal|":"
operator|+
name|interfaceName
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
specifier|public
name|int
name|next
parameter_list|()
block|{
return|return
name|states
index|[
name|state
operator|++
index|]
return|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|state
operator|<
name|states
operator|.
name|length
return|;
block|}
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|List
argument_list|<
name|Attribute
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|Namespace
argument_list|>
name|getNamespaces
parameter_list|()
block|{
return|return
name|namespaces
return|;
block|}
block|}
block|}
end_class

end_unit

