begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_class
specifier|public
class|class
name|ParameterEventProducer
implements|implements
name|CorbaTypeEventProducer
block|{
specifier|protected
name|CorbaTypeEventProducer
name|currentEventProducer
decl_stmt|;
specifier|protected
name|Iterator
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|iterator
decl_stmt|;
specifier|private
name|ServiceInfo
name|serviceInfo
decl_stmt|;
specifier|private
name|ORB
name|orb
decl_stmt|;
specifier|public
name|ParameterEventProducer
parameter_list|(
name|HandlerIterator
name|paramIterator
parameter_list|,
name|ServiceInfo
name|service
parameter_list|,
name|ORB
name|orbRef
parameter_list|)
block|{
name|iterator
operator|=
name|paramIterator
expr_stmt|;
name|serviceInfo
operator|=
name|service
expr_stmt|;
name|orb
operator|=
name|orbRef
expr_stmt|;
block|}
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
name|currentEventProducer
operator|!=
literal|null
condition|?
name|currentEventProducer
operator|.
name|getLocalName
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
name|currentEventProducer
operator|!=
literal|null
condition|?
name|currentEventProducer
operator|.
name|getName
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|currentEventProducer
operator|!=
literal|null
condition|?
name|currentEventProducer
operator|.
name|getText
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|(
name|currentEventProducer
operator|!=
literal|null
operator|&&
name|currentEventProducer
operator|.
name|hasNext
argument_list|()
operator|)
operator|||
operator|(
name|iterator
operator|!=
literal|null
operator|&&
name|iterator
operator|.
name|hasNext
argument_list|()
operator|)
return|;
block|}
specifier|public
name|int
name|next
parameter_list|()
block|{
name|int
name|event
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|currentEventProducer
operator|!=
literal|null
operator|&&
name|currentEventProducer
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|event
operator|=
name|currentEventProducer
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|iterator
operator|!=
literal|null
operator|&&
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CorbaObjectHandler
name|obj
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|currentEventProducer
operator|=
name|CorbaHandlerUtils
operator|.
name|getTypeEventProducer
argument_list|(
name|obj
argument_list|,
name|serviceInfo
argument_list|,
name|orb
argument_list|)
expr_stmt|;
name|event
operator|=
name|currentEventProducer
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"hasNext reported in error as there is no next event"
argument_list|)
throw|;
block|}
return|return
name|event
return|;
block|}
specifier|public
name|List
argument_list|<
name|Attribute
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|Namespace
argument_list|>
name|getNamespaces
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

