begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaBindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|interceptors
operator|.
name|SystemExceptionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|AddressType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Any
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|SystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CosNaming
operator|.
name|NameComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CosNaming
operator|.
name|NamingContextExt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CosNaming
operator|.
name|NamingContextExtHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|PortableServer
operator|.
name|POA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|PortableServer
operator|.
name|POAManager
import|;
end_import

begin_class
specifier|public
class|class
name|OrbConfig
block|{
specifier|protected
name|String
name|orbClass
decl_stmt|;
specifier|protected
name|String
name|orbSingletonClass
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|orbArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|OrbConfig
parameter_list|()
block|{
comment|//nothing
block|}
specifier|public
name|void
name|setOrbClass
parameter_list|(
name|String
name|cls
parameter_list|)
block|{
name|orbClass
operator|=
name|cls
expr_stmt|;
block|}
specifier|public
name|String
name|getOrbClass
parameter_list|()
block|{
return|return
name|orbClass
return|;
block|}
specifier|public
name|void
name|setOrbSingletonClass
parameter_list|(
name|String
name|cls
parameter_list|)
block|{
name|orbSingletonClass
operator|=
name|cls
expr_stmt|;
block|}
specifier|public
name|String
name|getOrbSingletonClass
parameter_list|()
block|{
return|return
name|orbSingletonClass
return|;
block|}
specifier|public
name|void
name|setOrbArgs
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|orbArgs
operator|=
name|args
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOrbArgs
parameter_list|()
block|{
return|return
name|orbArgs
return|;
block|}
specifier|public
name|void
name|addPOAPolicies
parameter_list|(
name|ORB
name|orb
parameter_list|,
name|String
name|poaName
parameter_list|,
name|POA
name|parentPOA
parameter_list|,
name|POAManager
name|poaManager
parameter_list|,
name|List
argument_list|<
name|Policy
argument_list|>
name|policies
parameter_list|)
block|{
comment|//nothing
block|}
specifier|public
name|Any
name|createSystemExceptionAny
parameter_list|(
name|ORB
name|orb
parameter_list|,
name|SystemException
name|sysEx
parameter_list|)
block|{
name|Any
name|exAny
init|=
name|orb
operator|.
name|create_any
argument_list|()
decl_stmt|;
name|SystemExceptionHelper
operator|.
name|insert
argument_list|(
name|exAny
argument_list|,
name|sysEx
argument_list|)
expr_stmt|;
return|return
name|exAny
return|;
block|}
specifier|public
name|void
name|exportObjectReference
parameter_list|(
name|ORB
name|orb
parameter_list|,
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|ref
parameter_list|,
name|String
name|url
parameter_list|,
name|AddressType
name|address
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
if|if
condition|(
operator|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"ior:"
argument_list|)
operator|)
operator|||
operator|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"IOR:"
argument_list|)
operator|)
condition|)
block|{
comment|// make use of Thread cache of last exported IOR
name|String
name|ior
init|=
name|CorbaUtils
operator|.
name|exportObjectReference
argument_list|(
name|ref
argument_list|,
name|orb
argument_list|)
decl_stmt|;
name|address
operator|.
name|setLocation
argument_list|(
name|ior
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|exportObjectReferenceToFile
argument_list|(
name|orb
argument_list|,
name|ref
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"relfile:"
argument_list|)
condition|)
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|url
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|exportObjectReferenceToFile
argument_list|(
name|orb
argument_list|,
name|ref
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"corbaloc:"
argument_list|)
condition|)
block|{
name|exportObjectReferenceToCorbaloc
argument_list|(
name|orb
argument_list|,
name|ref
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"corbaname:"
argument_list|)
condition|)
block|{
name|exportObjectReferenceToNamingService
argument_list|(
name|orb
argument_list|,
name|ref
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|ior
init|=
name|orb
operator|.
name|object_to_string
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|address
operator|.
name|setLocation
argument_list|(
name|ior
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"endpoint.ior"
argument_list|)
decl_stmt|;
name|exportObjectReferenceToFile
argument_list|(
name|orb
argument_list|,
name|ref
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|exportObjectReferenceToNamingService
parameter_list|(
name|ORB
name|orb
parameter_list|,
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|ref
parameter_list|,
name|String
name|location
parameter_list|)
block|{
name|int
name|idx
init|=
name|location
operator|.
name|indexOf
argument_list|(
literal|"#"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|location
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|//Register in NameService
try|try
block|{
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|nsObj
init|=
name|orb
operator|.
name|resolve_initial_references
argument_list|(
literal|"NameService"
argument_list|)
decl_stmt|;
name|NamingContextExt
name|rootContext
init|=
name|NamingContextExtHelper
operator|.
name|narrow
argument_list|(
name|nsObj
argument_list|)
decl_stmt|;
name|NameComponent
index|[]
name|nc
init|=
name|rootContext
operator|.
name|to_name
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|rootContext
operator|.
name|rebind
argument_list|(
name|nc
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|exportObjectReferenceToCorbaloc
parameter_list|(
name|ORB
name|orb
parameter_list|,
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|object
parameter_list|,
name|String
name|location
parameter_list|)
block|{
name|int
name|keyIndex
init|=
name|location
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|location
operator|.
name|substring
argument_list|(
name|keyIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|bootMgrHelperClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.yoko.orb.OB.BootManagerHelper"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|bootMgrClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.yoko.orb.OB.BootManager"
argument_list|)
decl_stmt|;
name|Method
name|narrowMethod
init|=
name|bootMgrHelperClass
operator|.
name|getMethod
argument_list|(
literal|"narrow"
argument_list|,
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|Object
name|bootMgr
init|=
name|narrowMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|orb
operator|.
name|resolve_initial_references
argument_list|(
literal|"BootManager"
argument_list|)
argument_list|)
decl_stmt|;
name|Method
name|addBindingMethod
init|=
name|bootMgrClass
operator|.
name|getMethod
argument_list|(
literal|"add_binding"
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|addBindingMethod
operator|.
name|invoke
argument_list|(
name|bootMgr
argument_list|,
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
comment|//Not supported by the orb. skip it.
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
name|ex
parameter_list|)
block|{
comment|//Not supported by the orb. skip it.
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|exportObjectReferenceToFile
parameter_list|(
name|ORB
name|orb
parameter_list|,
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|obj
parameter_list|,
name|URI
name|iorFile
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|ref
init|=
name|orb
operator|.
name|object_to_string
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|File
name|f
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iorFile
operator|.
name|isOpaque
argument_list|()
condition|)
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|iorFile
operator|.
name|getSchemeSpecificPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|iorFile
argument_list|)
expr_stmt|;
block|}
name|FileOutputStream
name|file
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

