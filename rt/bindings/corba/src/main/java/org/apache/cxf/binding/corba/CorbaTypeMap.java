begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|NamedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TypeCode
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaTypeMap
block|{
specifier|private
name|String
name|targetNamespace
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CorbaType
argument_list|>
name|typeMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|TypeCode
argument_list|>
name|typeCodeMap
decl_stmt|;
specifier|public
name|CorbaTypeMap
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|targetNamespace
operator|=
name|namespace
expr_stmt|;
name|typeMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CorbaType
argument_list|>
argument_list|()
expr_stmt|;
name|typeCodeMap
operator|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|TypeCode
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addType
parameter_list|(
name|String
name|name
parameter_list|,
name|CorbaType
name|type
parameter_list|)
block|{
name|typeMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CorbaType
name|getType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
assert|assert
name|name
operator|!=
literal|null
assert|;
return|return
name|typeMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|String
name|getTargetNamespace
parameter_list|()
block|{
return|return
name|targetNamespace
return|;
block|}
specifier|public
name|void
name|addTypeCode
parameter_list|(
name|QName
name|name
parameter_list|,
name|TypeCode
name|tc
parameter_list|)
block|{
name|typeCodeMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|tc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TypeCode
name|getTypeCode
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
return|return
name|typeCodeMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|// This is used by the Any type when trying to re-construct the type stored inside a
comment|// CORBA Any.
specifier|public
name|QName
name|getIdlType
parameter_list|(
name|TypeCode
name|tc
parameter_list|)
block|{
name|String
name|repId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repId
operator|=
name|tc
operator|.
name|id
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TypeCodePackage
operator|.
name|BadKind
name|ex
parameter_list|)
block|{
comment|// No id has been set.
return|return
literal|null
return|;
block|}
if|if
condition|(
name|repId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CorbaType
argument_list|>
argument_list|>
name|mapSet
init|=
name|typeMap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CorbaType
argument_list|>
argument_list|>
name|i
init|=
name|mapSet
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CorbaType
argument_list|>
name|entry
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|NamedType
condition|)
block|{
name|NamedType
name|n
init|=
operator|(
name|NamedType
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|getRepositoryID
argument_list|()
operator|.
name|equals
argument_list|(
name|repId
argument_list|)
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|getTargetNamespace
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

