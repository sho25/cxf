begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaBindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaStreamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|runtime
operator|.
name|CorbaFaultStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaObjectHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|RaisesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceModelUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Any
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ServerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|SystemException
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaStreamFaultOutInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|CorbaStreamFaultOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ORB
name|orb
decl_stmt|;
specifier|public
name|CorbaStreamFaultOutInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|MARSHAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
name|CorbaMessage
name|message
init|=
operator|(
name|CorbaMessage
operator|)
name|msg
decl_stmt|;
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|CorbaDestination
name|destination
decl_stmt|;
name|Fault
name|faultEx
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getDestination
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|destination
operator|=
operator|(
name|CorbaDestination
operator|)
name|message
operator|.
name|getDestination
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|destination
operator|=
operator|(
name|CorbaDestination
operator|)
name|exchange
operator|.
name|getDestination
argument_list|()
expr_stmt|;
block|}
name|orb
operator|=
operator|(
name|ORB
operator|)
name|message
operator|.
name|get
argument_list|(
name|CorbaConstants
operator|.
name|ORB
argument_list|)
expr_stmt|;
if|if
condition|(
name|orb
operator|==
literal|null
condition|)
block|{
name|orb
operator|=
operator|(
name|ORB
operator|)
name|exchange
operator|.
name|get
argument_list|(
name|ORB
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|DataWriter
argument_list|<
name|XMLStreamWriter
argument_list|>
name|writer
init|=
name|getDataWriter
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Throwable
name|ex
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// JCGS. If the cause is not available I can only continue if the exception
comment|//       is a Fault instance and contains a detail object.
if|if
condition|(
name|ex
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|ex
operator|instanceof
name|Fault
operator|)
operator|&&
operator|(
operator|(
operator|(
name|Fault
operator|)
name|ex
operator|)
operator|.
name|getDetail
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|faultEx
operator|=
operator|(
name|Fault
operator|)
name|ex
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|ex
operator|=
name|ex
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|InvocationTargetException
condition|)
block|{
name|ex
operator|=
name|ex
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|SystemException
condition|)
block|{
name|setSystemException
argument_list|(
name|message
argument_list|,
name|ex
argument_list|,
name|destination
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|exClassName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|faultEx
operator|==
literal|null
condition|)
block|{
comment|//REVISIT, we should not have to depend on WebFault annotation
comment|//Try changing the fault name to the proper mangled java exception classname.
name|WebFault
name|fault
init|=
name|ex
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|WebFault
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fault
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|exClassName
operator|=
name|fault
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//JCGS: exClassName to be set to the exception name
name|Element
name|faultElement
init|=
operator|(
name|Element
operator|)
name|faultEx
operator|.
name|getDetail
argument_list|()
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|exClassName
operator|=
name|faultElement
operator|.
name|getLocalName
argument_list|()
expr_stmt|;
block|}
comment|// Get information about the operation being invoked from the WSDL
comment|// definition.
comment|// We need this to marshal data correctly
name|BindingInfo
name|bInfo
init|=
name|destination
operator|.
name|getBindingInfo
argument_list|()
decl_stmt|;
name|String
name|opName
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Iterator
name|iter
init|=
name|bInfo
operator|.
name|getOperations
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|bopInfo
init|=
literal|null
decl_stmt|;
name|OperationType
name|opType
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|bopInfo
operator|=
operator|(
name|BindingOperationInfo
operator|)
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|bopInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|opName
argument_list|)
condition|)
block|{
name|opType
operator|=
name|bopInfo
operator|.
name|getExtensor
argument_list|(
name|OperationType
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|opType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"Unable to find binding operation for "
operator|+
name|opName
argument_list|)
throw|;
block|}
name|OperationInfo
name|opInfo
init|=
name|bopInfo
operator|.
name|getOperationInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|faultEx
operator|!=
literal|null
condition|)
block|{
name|MessagePartInfo
name|partInfo
init|=
name|getFaultMessagePartInfo
argument_list|(
name|opInfo
argument_list|,
operator|new
name|QName
argument_list|(
literal|""
argument_list|,
name|exClassName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|partInfo
operator|!=
literal|null
condition|)
block|{
name|exClassName
operator|=
name|partInfo
operator|.
name|getTypeQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
expr_stmt|;
block|}
block|}
name|RaisesType
name|exType
init|=
name|getRaisesType
argument_list|(
name|opType
argument_list|,
name|exClassName
argument_list|,
name|ex
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|exType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|faultEx
operator|!=
literal|null
condition|)
block|{
name|setUserExceptionFromFaultDetail
argument_list|(
name|message
argument_list|,
name|faultEx
operator|.
name|getDetail
argument_list|()
argument_list|,
name|exType
argument_list|,
name|opInfo
argument_list|,
name|writer
argument_list|,
name|exchange
operator|.
name|get
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setUserException
argument_list|(
name|message
argument_list|,
name|ex
argument_list|,
name|exType
argument_list|,
name|opInfo
argument_list|,
name|writer
argument_list|,
name|exchange
operator|.
name|get
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
name|exp
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|RaisesType
name|getRaisesType
parameter_list|(
name|OperationType
name|opType
parameter_list|,
name|String
name|exClassName
parameter_list|,
name|Throwable
name|ex
parameter_list|)
block|{
name|RaisesType
name|result
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|RaisesType
argument_list|>
name|exList
init|=
name|opType
operator|.
name|getRaises
argument_list|()
decl_stmt|;
name|result
operator|=
name|findRaisesType
argument_list|(
name|exList
argument_list|,
name|exClassName
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
comment|//REVISIT, need to find a better way to match the corba binding exception name with the wsdl one
comment|//if doc-literal, the part element name should be used, but for RPC, the message part name
try|try
block|{
name|Method
name|faultMethod
init|=
name|ex
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getFaultInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|faultMethod
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|faultClass
init|=
name|faultMethod
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|XmlType
name|exType
init|=
name|faultClass
operator|.
name|getAnnotation
argument_list|(
name|XmlType
operator|.
name|class
argument_list|)
decl_stmt|;
name|exClassName
operator|=
name|exType
operator|.
name|name
argument_list|()
expr_stmt|;
name|result
operator|=
name|findRaisesType
argument_list|(
name|exList
argument_list|,
name|exClassName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
comment|//Ignore it
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|RaisesType
name|findRaisesType
parameter_list|(
name|List
argument_list|<
name|RaisesType
argument_list|>
name|exList
parameter_list|,
name|String
name|exClassName
parameter_list|)
block|{
name|RaisesType
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RaisesType
argument_list|>
name|i
init|=
name|exList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RaisesType
name|raises
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|raises
operator|.
name|getException
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|exClassName
argument_list|)
condition|)
block|{
name|result
operator|=
name|raises
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|void
name|setSystemException
parameter_list|(
name|CorbaMessage
name|message
parameter_list|,
name|Throwable
name|ex
parameter_list|,
name|CorbaDestination
name|dest
parameter_list|)
block|{
name|SystemException
name|sysEx
init|=
operator|(
name|SystemException
operator|)
name|ex
decl_stmt|;
name|message
operator|.
name|setSystemException
argument_list|(
name|sysEx
argument_list|)
expr_stmt|;
name|ServerRequest
name|request
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|ServerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Any
name|exAny
init|=
name|dest
operator|.
name|getOrbConfig
argument_list|()
operator|.
name|createSystemExceptionAny
argument_list|(
name|orb
argument_list|,
name|sysEx
argument_list|)
decl_stmt|;
name|request
operator|.
name|set_exception
argument_list|(
name|exAny
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUserException
parameter_list|(
name|CorbaMessage
name|message
parameter_list|,
name|Throwable
name|ex
parameter_list|,
name|RaisesType
name|exType
parameter_list|,
name|OperationInfo
name|opInfo
parameter_list|,
name|DataWriter
argument_list|<
name|XMLStreamWriter
argument_list|>
name|writer
parameter_list|,
name|ServiceInfo
name|service
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|exIdlType
init|=
name|exType
operator|.
name|getException
argument_list|()
decl_stmt|;
name|QName
name|elName
init|=
operator|new
name|QName
argument_list|(
literal|""
argument_list|,
name|exIdlType
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|faultPart
init|=
name|getFaultMessagePartInfo
argument_list|(
name|opInfo
argument_list|,
name|elName
argument_list|)
decl_stmt|;
if|if
condition|(
name|faultPart
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"Coulnd't find the message fault part : "
operator|+
name|elName
argument_list|)
throw|;
block|}
name|Method
name|faultMethod
init|=
name|ex
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getFaultInfo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|faultMethod
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Object
name|fault
init|=
name|faultMethod
operator|.
name|invoke
argument_list|(
name|ex
argument_list|)
decl_stmt|;
comment|// This creates a default instance of the class representing the exception schema type if
comment|// one has not been created on the servant side which throws the UserException.
if|if
condition|(
name|fault
operator|==
literal|null
condition|)
block|{
name|Class
name|faultClass
init|=
name|faultMethod
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|fault
operator|=
name|faultClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
name|CorbaFaultStreamWriter
name|faultWriter
init|=
operator|new
name|CorbaFaultStreamWriter
argument_list|(
name|orb
argument_list|,
name|exType
argument_list|,
name|message
operator|.
name|getCorbaTypeMap
argument_list|()
argument_list|,
name|service
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|fault
argument_list|,
name|faultPart
argument_list|,
name|faultWriter
argument_list|)
expr_stmt|;
name|CorbaObjectHandler
index|[]
name|objs
init|=
name|faultWriter
operator|.
name|getCorbaObjects
argument_list|()
decl_stmt|;
name|CorbaStreamable
name|streamable
init|=
name|message
operator|.
name|createStreamableObject
argument_list|(
name|objs
index|[
literal|0
index|]
argument_list|,
name|elName
argument_list|)
decl_stmt|;
name|message
operator|.
name|setStreamableException
argument_list|(
name|streamable
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUserExceptionFromFaultDetail
parameter_list|(
name|CorbaMessage
name|message
parameter_list|,
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
name|faultDetail
parameter_list|,
name|RaisesType
name|exType
parameter_list|,
name|OperationInfo
name|opInfo
parameter_list|,
name|DataWriter
argument_list|<
name|XMLStreamWriter
argument_list|>
name|writer
parameter_list|,
name|ServiceInfo
name|service
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|exIdlType
init|=
name|exType
operator|.
name|getException
argument_list|()
decl_stmt|;
name|QName
name|elName
init|=
operator|new
name|QName
argument_list|(
literal|""
argument_list|,
name|exIdlType
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|faultPart
init|=
name|getFaultMessagePartInfo
argument_list|(
name|opInfo
argument_list|,
name|elName
argument_list|)
decl_stmt|;
comment|// faultDetailt.getFirstChild() skips the "detail" element
name|Object
name|fault
init|=
name|extractPartsInfoFromDetail
argument_list|(
operator|(
name|Element
operator|)
name|faultDetail
operator|.
name|getFirstChild
argument_list|()
argument_list|,
name|exType
argument_list|)
decl_stmt|;
name|CorbaFaultStreamWriter
name|faultWriter
init|=
operator|new
name|CorbaFaultStreamWriter
argument_list|(
name|orb
argument_list|,
name|exType
argument_list|,
name|message
operator|.
name|getCorbaTypeMap
argument_list|()
argument_list|,
name|service
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|fault
argument_list|,
name|faultPart
argument_list|,
name|faultWriter
argument_list|)
expr_stmt|;
name|CorbaObjectHandler
index|[]
name|objs
init|=
name|faultWriter
operator|.
name|getCorbaObjects
argument_list|()
decl_stmt|;
name|CorbaStreamable
name|streamable
init|=
name|message
operator|.
name|createStreamableObject
argument_list|(
name|objs
index|[
literal|0
index|]
argument_list|,
name|elName
argument_list|)
decl_stmt|;
name|message
operator|.
name|setStreamableException
argument_list|(
name|streamable
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Object
name|extractPartsInfoFromDetail
parameter_list|(
name|Element
name|faultDetail
parameter_list|,
name|RaisesType
name|exType
parameter_list|)
block|{
name|Document
name|faultDoc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|faultElement
init|=
name|faultDoc
operator|.
name|createElement
argument_list|(
name|exType
operator|.
name|getException
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|faultDoc
operator|.
name|appendChild
argument_list|(
name|faultElement
argument_list|)
expr_stmt|;
name|Node
name|node
init|=
name|faultDetail
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|Node
name|importedFaultData
init|=
name|faultDoc
operator|.
name|importNode
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|faultElement
operator|.
name|appendChild
argument_list|(
name|importedFaultData
argument_list|)
expr_stmt|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Exception DOM: "
operator|+
name|XMLUtils
operator|.
name|toString
argument_list|(
name|faultElement
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|faultDoc
return|;
block|}
specifier|protected
name|DataWriter
argument_list|<
name|XMLStreamWriter
argument_list|>
name|getDataWriter
parameter_list|(
name|CorbaMessage
name|message
parameter_list|)
block|{
name|Service
name|serviceModel
init|=
name|ServiceModelUtil
operator|.
name|getService
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
decl_stmt|;
name|DataWriter
argument_list|<
name|XMLStreamWriter
argument_list|>
name|dataWriter
init|=
name|serviceModel
operator|.
name|getDataBinding
argument_list|()
operator|.
name|createWriter
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataWriter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"Couldn't create data writer for outgoing fault message"
argument_list|)
throw|;
block|}
return|return
name|dataWriter
return|;
block|}
specifier|protected
name|MessagePartInfo
name|getFaultMessagePartInfo
parameter_list|(
name|OperationInfo
name|opInfo
parameter_list|,
name|QName
name|faultName
parameter_list|)
block|{
name|Iterator
argument_list|<
name|FaultInfo
argument_list|>
name|faults
init|=
name|opInfo
operator|.
name|getFaults
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|faults
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FaultInfo
name|fault
init|=
name|faults
operator|.
name|next
argument_list|()
decl_stmt|;
name|MessagePartInfo
name|partInfo
init|=
name|fault
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|partInfo
operator|.
name|isElement
argument_list|()
operator|&&
name|partInfo
operator|.
name|getElementQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|faultName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|partInfo
return|;
block|}
elseif|else
if|if
condition|(
name|partInfo
operator|.
name|getTypeQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|faultName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|partInfo
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

