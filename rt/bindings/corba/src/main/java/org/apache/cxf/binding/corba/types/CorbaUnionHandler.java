begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CaseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Enum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Unionbranch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TCKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TypeCode
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaUnionHandler
extends|extends
name|CorbaObjectHandler
block|{
specifier|private
name|CorbaObjectHandler
name|discriminator
decl_stmt|;
specifier|private
name|CorbaObjectHandler
name|value
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|cases
init|=
operator|new
name|ArrayList
argument_list|<
name|CorbaObjectHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|defaultIndex
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|CorbaUnionHandler
parameter_list|(
name|QName
name|unionName
parameter_list|,
name|QName
name|unionIdlType
parameter_list|,
name|TypeCode
name|unionTC
parameter_list|,
name|Object
name|unionType
parameter_list|)
block|{
name|super
argument_list|(
name|unionName
argument_list|,
name|unionIdlType
argument_list|,
name|unionTC
argument_list|,
name|unionType
argument_list|)
expr_stmt|;
comment|// Build a list of labels.  This will be used to generate a discriminator value for the
comment|// default case (since we are not provided with one from the Stax stream of the Celtix object)
name|Union
name|union
init|=
operator|(
name|Union
operator|)
name|unionType
decl_stmt|;
name|List
argument_list|<
name|Unionbranch
argument_list|>
name|branches
init|=
name|union
operator|.
name|getUnionbranch
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Unionbranch
argument_list|>
name|branchesIter
init|=
name|branches
operator|.
name|iterator
argument_list|()
init|;
name|branchesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Unionbranch
name|branch
init|=
name|branchesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CaseType
argument_list|>
name|branchCases
init|=
name|branch
operator|.
name|getCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|branchCases
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|defaultIndex
operator|=
name|index
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|CaseType
argument_list|>
name|casesIter
init|=
name|branchCases
operator|.
name|iterator
argument_list|()
init|;
name|casesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CaseType
name|ct
init|=
name|casesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|ct
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|index
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|CorbaObjectHandler
name|getDiscriminator
parameter_list|()
block|{
return|return
name|discriminator
return|;
block|}
specifier|public
name|String
name|getDisciminatorValueData
parameter_list|()
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
comment|// The discriminator is handled by either the enum handler or the primitive handler.
if|if
condition|(
name|discriminator
operator|.
name|getTypeCodeKind
argument_list|()
operator|.
name|value
argument_list|()
operator|==
name|TCKind
operator|.
name|_tk_enum
condition|)
block|{
name|CorbaEnumHandler
name|enumHandler
init|=
operator|(
name|CorbaEnumHandler
operator|)
name|discriminator
decl_stmt|;
name|result
operator|=
name|enumHandler
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|CorbaPrimitiveHandler
name|primitiveHandler
init|=
operator|(
name|CorbaPrimitiveHandler
operator|)
name|discriminator
decl_stmt|;
name|result
operator|=
name|primitiveHandler
operator|.
name|getDataFromValue
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|setDiscriminator
parameter_list|(
name|CorbaObjectHandler
name|disc
parameter_list|)
block|{
name|discriminator
operator|=
name|disc
expr_stmt|;
block|}
specifier|public
name|void
name|setDiscriminatorValueFromData
parameter_list|(
name|String
name|data
parameter_list|)
block|{
comment|// The discriminator is handled by either the enum handler or the primitive handler.
if|if
condition|(
name|discriminator
operator|.
name|getTypeCodeKind
argument_list|()
operator|.
name|value
argument_list|()
operator|==
name|TCKind
operator|.
name|_tk_enum
condition|)
block|{
name|CorbaEnumHandler
name|enumHandler
init|=
operator|(
name|CorbaEnumHandler
operator|)
name|discriminator
decl_stmt|;
name|enumHandler
operator|.
name|setValue
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CorbaPrimitiveHandler
name|primitiveHandler
init|=
operator|(
name|CorbaPrimitiveHandler
operator|)
name|discriminator
decl_stmt|;
name|primitiveHandler
operator|.
name|setValueFromData
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|getCases
parameter_list|()
block|{
return|return
name|cases
return|;
block|}
specifier|public
name|CorbaObjectHandler
name|getBranchByName
parameter_list|(
name|String
name|caseName
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|caseIter
init|=
name|cases
operator|.
name|iterator
argument_list|()
init|;
name|caseIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CorbaObjectHandler
name|obj
init|=
name|caseIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|caseName
argument_list|)
condition|)
block|{
return|return
name|obj
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|addCase
parameter_list|(
name|CorbaObjectHandler
name|unionCase
parameter_list|)
block|{
name|cases
operator|.
name|add
argument_list|(
name|unionCase
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CorbaObjectHandler
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|String
name|caseName
parameter_list|,
name|CorbaObjectHandler
name|val
parameter_list|)
block|{
name|value
operator|=
name|val
expr_stmt|;
block|}
specifier|public
name|int
name|getDefaultIndex
parameter_list|()
block|{
return|return
name|defaultIndex
return|;
block|}
specifier|public
name|String
name|createDefaultDiscriminatorLabel
parameter_list|()
block|{
name|String
name|label
init|=
literal|null
decl_stmt|;
comment|// According to the CORBA specification, an enumeration discriminator can be one of the
comment|// following types:
comment|//   - *integer* (short, long, ulong, either signed or unsigned)
comment|//   - boolean
comment|//   - character
comment|//   - enumeration
comment|// So when we need to create a default discriminator to accomodate for the lack of a
comment|// discriminator from, these are the four cases we must check for.
if|if
condition|(
name|discriminator
operator|.
name|getTypeCodeKind
argument_list|()
operator|.
name|value
argument_list|()
operator|==
name|TCKind
operator|.
name|_tk_boolean
condition|)
block|{
comment|// We can only have a default case with a boolean discriminator if we have
comment|// only one case, either TRUE or FALSE.  Therefore, we only need to check
comment|// against the first label, if there is one.
if|if
condition|(
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|label
operator|=
literal|"false"
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|boolValue
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|labels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|label
operator|=
name|String
operator|.
name|valueOf
argument_list|(
operator|!
name|boolValue
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|discriminator
operator|.
name|getTypeCodeKind
argument_list|()
operator|.
name|value
argument_list|()
operator|==
name|TCKind
operator|.
name|_tk_char
condition|)
block|{
if|if
condition|(
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|label
operator|=
name|String
operator|.
name|valueOf
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|char
name|charValue
init|=
name|labels
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|labels
operator|.
name|contains
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|charValue
argument_list|)
argument_list|)
condition|)
block|{
name|charValue
operator|++
expr_stmt|;
block|}
name|label
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|charValue
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|discriminator
operator|.
name|getTypeCodeKind
argument_list|()
operator|.
name|value
argument_list|()
operator|==
name|TCKind
operator|.
name|_tk_enum
condition|)
block|{
comment|// Get the list of possible enumerations in the enumerator and compare these to the
comment|// labels we obtained from the Union definition.  In order for the union/enum
comment|// combination to be syntactically correct, there must be one enumeration not included
comment|// as a case for the default case to be valid.
name|Enum
name|enumType
init|=
operator|(
name|Enum
operator|)
name|discriminator
operator|.
name|getType
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Enumerator
argument_list|>
name|enumerators
init|=
name|enumType
operator|.
name|getEnumerator
argument_list|()
decl_stmt|;
if|if
condition|(
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Any value will do since we only have a default case.
name|label
operator|=
name|enumerators
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|enumLabel
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enumerator
argument_list|>
name|enumIter
init|=
name|enumerators
operator|.
name|iterator
argument_list|()
init|;
name|enumIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|enumLabel
operator|=
name|enumIter
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|labels
operator|.
name|contains
argument_list|(
name|enumLabel
argument_list|)
condition|)
block|{
name|label
operator|=
name|enumLabel
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|discriminator
operator|.
name|getTypeCodeKind
argument_list|()
operator|.
name|value
argument_list|()
operator|==
name|TCKind
operator|.
name|_tk_short
operator|)
operator|||
operator|(
name|discriminator
operator|.
name|getTypeCodeKind
argument_list|()
operator|.
name|value
argument_list|()
operator|==
name|TCKind
operator|.
name|_tk_ushort
operator|)
condition|)
block|{
if|if
condition|(
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|label
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|Short
operator|.
name|MAX_VALUE
init|;
name|i
operator|>=
name|Short
operator|.
name|MIN_VALUE
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
operator|!
name|labels
operator|.
name|contains
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|label
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|discriminator
operator|.
name|getTypeCodeKind
argument_list|()
operator|.
name|value
argument_list|()
operator|==
name|TCKind
operator|.
name|_tk_long
operator|)
operator|||
operator|(
name|discriminator
operator|.
name|getTypeCodeKind
argument_list|()
operator|.
name|value
argument_list|()
operator|==
name|TCKind
operator|.
name|_tk_ulong
operator|)
condition|)
block|{
if|if
condition|(
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|label
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|Integer
operator|.
name|MAX_VALUE
init|;
name|i
operator|>=
name|Integer
operator|.
name|MIN_VALUE
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
operator|!
name|labels
operator|.
name|contains
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|label
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|label
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|discriminator
operator|!=
literal|null
condition|)
block|{
name|discriminator
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|value
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

