begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|CorbaObjectReferenceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|CorbaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaObjectReferenceListener
extends|extends
name|AbstractCorbaTypeListener
block|{
specifier|private
specifier|final
name|CorbaObjectReferenceHandler
name|value
decl_stmt|;
specifier|private
specifier|final
name|ORB
name|orb
decl_stmt|;
specifier|public
name|CorbaObjectReferenceListener
parameter_list|(
name|CorbaObjectHandler
name|handler
parameter_list|,
name|ORB
name|orbRef
parameter_list|)
block|{
name|super
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|orb
operator|=
name|orbRef
expr_stmt|;
name|value
operator|=
operator|(
name|CorbaObjectReferenceHandler
operator|)
name|handler
expr_stmt|;
name|value
operator|.
name|setReference
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|processCharacters
parameter_list|(
name|String
name|text
parameter_list|)
block|{
comment|//REVISIT, just checking the address for now.
if|if
condition|(
name|currentElement
operator|!=
literal|null
operator|&&
literal|"Address"
operator|.
name|equals
argument_list|(
name|currentElement
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|ref
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|equals
argument_list|(
name|CorbaObjectReferenceHelper
operator|.
name|ADDRESSING_NAMESPACE_URI
operator|+
literal|"/anonymous"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Anonymous endpoint reference types not supported"
argument_list|)
throw|;
block|}
try|try
block|{
name|ref
operator|=
name|CorbaUtils
operator|.
name|importObjectReference
argument_list|(
name|orb
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|BAD_PARAM
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to resolve CORBA object with address "
operator|+
name|text
argument_list|)
throw|;
block|}
name|value
operator|.
name|setReference
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

