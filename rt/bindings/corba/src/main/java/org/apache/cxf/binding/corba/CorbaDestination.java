begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|runtime
operator|.
name|CorbaDSIServant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|CorbaBindingHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|CorbaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|OrbConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|AddressType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AttributedURIType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CosNaming
operator|.
name|NameComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CosNaming
operator|.
name|NamingContextExt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CosNaming
operator|.
name|NamingContextExtHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|PortableServer
operator|.
name|POA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|PortableServer
operator|.
name|POAHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|PortableServer
operator|.
name|POAManager
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaDestination
implements|implements
name|Destination
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|CorbaDestination
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AddressType
name|address
decl_stmt|;
specifier|private
name|EndpointReferenceType
name|reference
decl_stmt|;
specifier|private
name|ORB
name|orb
decl_stmt|;
specifier|private
name|BindingInfo
name|binding
decl_stmt|;
specifier|private
name|EndpointInfo
name|endpointInfo
decl_stmt|;
specifier|private
name|OrbConfig
name|orbConfig
decl_stmt|;
specifier|private
name|MessageObserver
name|incomingObserver
decl_stmt|;
specifier|private
name|CorbaTypeMap
name|typeMap
decl_stmt|;
specifier|private
name|byte
index|[]
name|objectId
decl_stmt|;
specifier|private
name|POA
name|bindingPOA
decl_stmt|;
specifier|private
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|obj
decl_stmt|;
specifier|public
name|CorbaDestination
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|OrbConfig
name|config
parameter_list|)
block|{
name|this
argument_list|(
name|ei
argument_list|,
name|config
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CorbaDestination
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|OrbConfig
name|config
parameter_list|,
name|CorbaTypeMap
name|tm
parameter_list|)
block|{
name|address
operator|=
name|ei
operator|.
name|getExtensor
argument_list|(
name|AddressType
operator|.
name|class
argument_list|)
expr_stmt|;
name|binding
operator|=
name|ei
operator|.
name|getBinding
argument_list|()
expr_stmt|;
name|reference
operator|=
operator|new
name|EndpointReferenceType
argument_list|()
expr_stmt|;
name|AttributedURIType
name|addr
init|=
operator|new
name|AttributedURIType
argument_list|()
decl_stmt|;
name|addr
operator|.
name|setValue
argument_list|(
name|address
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setAddress
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|endpointInfo
operator|=
name|ei
expr_stmt|;
name|orbConfig
operator|=
name|config
expr_stmt|;
if|if
condition|(
name|tm
operator|!=
literal|null
condition|)
block|{
name|typeMap
operator|=
name|tm
expr_stmt|;
block|}
else|else
block|{
name|typeMap
operator|=
name|TypeMapCache
operator|.
name|get
argument_list|(
name|binding
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|OrbConfig
name|getOrbConfig
parameter_list|()
block|{
return|return
name|orbConfig
return|;
block|}
specifier|public
name|EndpointReferenceType
name|getAddress
parameter_list|()
block|{
return|return
name|reference
return|;
block|}
specifier|public
name|Conduit
name|getBackChannel
parameter_list|(
name|Message
name|inMessage
parameter_list|,
name|Message
name|partialResponse
parameter_list|,
name|EndpointReferenceType
name|ref
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CorbaServerConduit
argument_list|(
name|endpointInfo
argument_list|,
name|reference
argument_list|,
name|obj
argument_list|,
name|orb
argument_list|,
name|orbConfig
argument_list|,
name|typeMap
argument_list|)
return|;
block|}
specifier|public
name|BindingInfo
name|getBindingInfo
parameter_list|()
block|{
return|return
name|binding
return|;
block|}
specifier|public
name|EndpointInfo
name|getEndPointInfo
parameter_list|()
block|{
return|return
name|endpointInfo
return|;
block|}
specifier|public
name|CorbaTypeMap
name|getCorbaTypeMap
parameter_list|()
block|{
return|return
name|typeMap
return|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|orb
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// Indicate that we are done with the ORB.  We'll ask for it to be destroyed but it
comment|// someone else is using it, it really won't be (just its use count decremented)
name|CorbaBindingHelper
operator|.
name|destroyORB
argument_list|(
name|getDestinationAddress
argument_list|()
argument_list|,
name|orb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|orb
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|ORB
name|getOrb
parameter_list|()
block|{
return|return
name|orb
return|;
block|}
specifier|protected
name|AddressType
name|getAddressType
parameter_list|()
block|{
return|return
name|address
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|setMessageObserver
parameter_list|(
name|MessageObserver
name|observer
parameter_list|)
block|{
if|if
condition|(
name|observer
operator|!=
name|incomingObserver
condition|)
block|{
name|MessageObserver
name|old
init|=
name|incomingObserver
decl_stmt|;
name|incomingObserver
operator|=
name|observer
expr_stmt|;
if|if
condition|(
name|observer
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
name|activate
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|deactivate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|activate
parameter_list|()
block|{
name|String
name|location
init|=
name|getDestinationAddress
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Service address retrieved: "
operator|+
name|location
argument_list|)
expr_stmt|;
name|orb
operator|=
name|CorbaBindingHelper
operator|.
name|getAddressSpecificORB
argument_list|(
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|orb
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"Creating ORB with address "
operator|+
name|location
argument_list|)
expr_stmt|;
name|orb
operator|=
name|CorbaBindingHelper
operator|.
name|createAddressSpecificORB
argument_list|(
name|location
argument_list|,
name|orbConfig
argument_list|)
expr_stmt|;
block|}
comment|// Need to indicate that this ORB can't be destroyed while we are using it
name|CorbaBindingHelper
operator|.
name|keepORBAlive
argument_list|(
name|location
argument_list|)
expr_stmt|;
try|try
block|{
name|POA
name|rootPOA
init|=
name|POAHelper
operator|.
name|narrow
argument_list|(
name|orb
operator|.
name|resolve_initial_references
argument_list|(
literal|"RootPOA"
argument_list|)
argument_list|)
decl_stmt|;
name|POAManager
name|poaManager
init|=
name|rootPOA
operator|.
name|the_POAManager
argument_list|()
decl_stmt|;
try|try
block|{
name|bindingPOA
operator|=
name|rootPOA
operator|.
name|find_POA
argument_list|(
literal|"BindingPOA"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|PortableServer
operator|.
name|POAPackage
operator|.
name|AdapterNonExistent
name|ex
parameter_list|)
block|{
comment|// An AdapterNonExistent exception will be thrown if the POA does not exist.  If
comment|// this is the case, then we'll create one.
name|Policy
index|[]
name|policies
init|=
operator|new
name|Policy
index|[
name|orbConfig
operator|.
name|isPersistentPoa
argument_list|()
condition|?
literal|3
else|:
literal|2
index|]
decl_stmt|;
name|policies
index|[
literal|0
index|]
operator|=
name|rootPOA
operator|.
name|create_id_uniqueness_policy
argument_list|(
name|org
operator|.
name|omg
operator|.
name|PortableServer
operator|.
name|IdUniquenessPolicyValue
operator|.
name|UNIQUE_ID
argument_list|)
expr_stmt|;
name|policies
index|[
literal|1
index|]
operator|=
name|rootPOA
operator|.
name|create_implicit_activation_policy
argument_list|(
name|org
operator|.
name|omg
operator|.
name|PortableServer
operator|.
name|ImplicitActivationPolicyValue
operator|.
name|NO_IMPLICIT_ACTIVATION
argument_list|)
expr_stmt|;
if|if
condition|(
name|orbConfig
operator|.
name|isPersistentPoa
argument_list|()
condition|)
block|{
name|policies
index|[
literal|2
index|]
operator|=
name|rootPOA
operator|.
name|create_lifespan_policy
argument_list|(
name|org
operator|.
name|omg
operator|.
name|PortableServer
operator|.
name|LifespanPolicyValue
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
name|bindingPOA
operator|=
name|rootPOA
operator|.
name|create_POA
argument_list|(
literal|"BindingPOA"
argument_list|,
name|poaManager
argument_list|,
name|policies
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bindingPOA
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"Unable to create CXF CORBA Binding POA"
argument_list|)
throw|;
block|}
name|CorbaDSIServant
name|servant
init|=
operator|new
name|CorbaDSIServant
argument_list|()
decl_stmt|;
name|servant
operator|.
name|init
argument_list|(
name|orb
argument_list|,
name|bindingPOA
argument_list|,
name|this
argument_list|,
name|incomingObserver
argument_list|,
name|typeMap
argument_list|)
expr_stmt|;
name|objectId
operator|=
name|bindingPOA
operator|.
name|activate_object
argument_list|(
name|servant
argument_list|)
expr_stmt|;
name|obj
operator|=
name|bindingPOA
operator|.
name|id_to_reference
argument_list|(
name|objectId
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"relfile:"
argument_list|)
condition|)
block|{
name|URI
name|iorFile
init|=
operator|new
name|URI
argument_list|(
name|location
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|CorbaUtils
operator|.
name|exportObjectReferenceToFile
argument_list|(
name|obj
argument_list|,
name|orb
argument_list|,
name|iorFile
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|CorbaUtils
operator|.
name|exportObjectReferenceToFile
argument_list|(
name|obj
argument_list|,
name|orb
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"corbaloc"
argument_list|)
condition|)
block|{
comment|// Try add the key to the boot manager.  This is required for a corbaloc
name|addKeyToBootManager
argument_list|(
name|location
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"corbaname"
argument_list|)
condition|)
block|{
name|addKeyToNameservice
argument_list|(
name|location
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|ior
init|=
name|orb
operator|.
name|object_to_string
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|address
operator|.
name|setLocation
argument_list|(
name|ior
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
literal|"endpoint.ior"
argument_list|)
decl_stmt|;
name|CorbaUtils
operator|.
name|exportObjectReferenceToFile
argument_list|(
name|obj
argument_list|,
name|orb
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
name|populateEpr
argument_list|(
name|orb
operator|.
name|object_to_string
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Object Reference: "
operator|+
name|orb
operator|.
name|object_to_string
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Provide other export mechanisms?
name|poaManager
operator|.
name|activate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"Unable to activate CORBA servant"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|addKeyToNameservice
parameter_list|(
name|String
name|location
parameter_list|,
name|Object
name|ref
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|idx
init|=
name|location
operator|.
name|indexOf
argument_list|(
literal|"#"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|location
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|//Register in NameService
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|nsObj
init|=
name|orb
operator|.
name|resolve_initial_references
argument_list|(
literal|"NameService"
argument_list|)
decl_stmt|;
name|NamingContextExt
name|rootContext
init|=
name|NamingContextExtHelper
operator|.
name|narrow
argument_list|(
name|nsObj
argument_list|)
decl_stmt|;
name|NameComponent
index|[]
name|nc
init|=
name|rootContext
operator|.
name|to_name
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|rootContext
operator|.
name|rebind
argument_list|(
name|nc
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|populateEpr
parameter_list|(
name|String
name|ior
parameter_list|)
block|{
name|AttributedURIType
name|addr
init|=
operator|new
name|AttributedURIType
argument_list|()
decl_stmt|;
name|addr
operator|.
name|setValue
argument_list|(
name|ior
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setAddress
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getDestinationAddress
parameter_list|()
block|{
comment|// We should check the endpoint first for an address.  This allows object references
comment|// to use the address that is associated with their endpoint instead of the single
comment|// address for a particular port type that is listed in the wsdl.  Otherwise, for all
comment|// object references we want to create, we would need to add the address to the wsdl
comment|// file before running the application.
name|String
name|location
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|endpointInfo
operator|!=
literal|null
condition|)
block|{
name|location
operator|=
name|endpointInfo
operator|.
name|getAddress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
name|location
operator|=
name|address
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
return|return
name|location
return|;
block|}
specifier|public
name|MessageObserver
name|getMessageObserver
parameter_list|()
block|{
return|return
name|incomingObserver
return|;
block|}
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
if|if
condition|(
name|orb
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|bindingPOA
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"Corba Port deactivation failed because the poa is null"
argument_list|)
throw|;
block|}
try|try
block|{
name|bindingPOA
operator|.
name|deactivate_object
argument_list|(
name|objectId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"Unable to deactivate CORBA servant"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|addKeyToBootManager
parameter_list|(
name|String
name|location
parameter_list|,
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|value
parameter_list|)
block|{
name|int
name|keyIndex
init|=
name|location
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|location
operator|.
name|substring
argument_list|(
name|keyIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|bootMgrHelperClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.yoko.orb.OB.BootManagerHelper"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|bootMgrClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.yoko.orb.OB.BootManager"
argument_list|)
decl_stmt|;
name|Method
name|narrowMethod
init|=
name|bootMgrHelperClass
operator|.
name|getMethod
argument_list|(
literal|"narrow"
argument_list|,
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|Object
name|bootMgr
init|=
name|narrowMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|orb
operator|.
name|resolve_initial_references
argument_list|(
literal|"BootManager"
argument_list|)
argument_list|)
decl_stmt|;
name|Method
name|addBindingMethod
init|=
name|bootMgrClass
operator|.
name|getMethod
argument_list|(
literal|"add_binding"
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|addBindingMethod
operator|.
name|invoke
argument_list|(
name|bootMgr
argument_list|,
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added key "
operator|+
name|key
operator|+
literal|" to bootmanager"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
comment|//Not supported by the orb. skip it.
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
name|ex
parameter_list|)
block|{
comment|//Not supported by the orb. skip it.
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

