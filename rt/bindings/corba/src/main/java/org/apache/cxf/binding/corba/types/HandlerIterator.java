begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaStreamable
import|;
end_import

begin_class
specifier|public
class|class
name|HandlerIterator
implements|implements
name|Iterator
argument_list|<
name|CorbaObjectHandler
argument_list|>
block|{
specifier|final
name|CorbaStreamable
index|[]
name|params
decl_stmt|;
name|int
name|count
decl_stmt|;
name|CorbaObjectHandler
name|next
decl_stmt|;
name|boolean
name|isServer
decl_stmt|;
specifier|public
name|HandlerIterator
parameter_list|(
name|CorbaMessage
name|msg
parameter_list|,
name|boolean
name|server
parameter_list|)
block|{
name|params
operator|=
name|msg
operator|.
name|getStreamableArguments
argument_list|()
expr_stmt|;
name|isServer
operator|=
name|server
expr_stmt|;
if|if
condition|(
operator|!
name|isServer
operator|&&
name|msg
operator|.
name|getStreamableReturn
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|next
operator|=
name|msg
operator|.
name|getStreamableReturn
argument_list|()
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
while|while
condition|(
name|next
operator|==
literal|null
operator|&&
name|count
operator|<
name|params
operator|.
name|length
condition|)
block|{
name|int
name|mode
init|=
name|params
index|[
name|count
index|]
operator|.
name|getMode
argument_list|()
decl_stmt|;
name|int
name|value
init|=
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ARG_OUT
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|isServer
condition|)
block|{
name|value
operator|=
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ARG_IN
operator|.
name|value
expr_stmt|;
block|}
if|if
condition|(
name|mode
operator|==
name|value
operator|||
name|mode
operator|==
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ARG_INOUT
operator|.
name|value
condition|)
block|{
name|next
operator|=
name|params
index|[
name|count
index|]
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isServer
operator|&&
name|mode
operator|==
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ARG_INOUT
operator|.
name|value
operator|&&
name|next
operator|instanceof
name|CorbaPrimitiveHandler
condition|)
block|{
name|CorbaPrimitiveHandler
name|prim
init|=
operator|(
name|CorbaPrimitiveHandler
operator|)
name|next
decl_stmt|;
name|prim
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
return|return
name|next
operator|!=
literal|null
return|;
block|}
specifier|public
name|CorbaObjectHandler
name|next
parameter_list|()
block|{
name|CorbaObjectHandler
name|current
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|current
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{     }
block|}
end_class

end_unit

