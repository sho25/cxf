begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaTypeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|runtime
operator|.
name|CorbaStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|ContextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|ArgType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|ModeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|ParamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaStreamOutInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
name|orb
decl_stmt|;
specifier|private
name|CorbaTypeMap
name|typeMap
decl_stmt|;
specifier|private
name|ServiceInfo
name|service
decl_stmt|;
specifier|public
name|CorbaStreamOutInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_STREAM
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
name|CorbaMessage
name|message
init|=
operator|(
name|CorbaMessage
operator|)
name|msg
decl_stmt|;
name|orb
operator|=
operator|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
operator|)
name|message
operator|.
name|get
argument_list|(
name|CorbaConstants
operator|.
name|ORB
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|service
operator|=
name|exchange
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getService
argument_list|()
expr_stmt|;
name|typeMap
operator|=
name|message
operator|.
name|getCorbaTypeMap
argument_list|()
expr_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|exchange
operator|.
name|getBindingOperationInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|ContextUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|handleOutBoundMessage
argument_list|(
name|message
argument_list|,
name|boi
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleInBoundMessage
argument_list|(
name|message
argument_list|,
name|boi
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|CorbaStreamOutEndingInterceptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleOutBoundMessage
parameter_list|(
name|CorbaMessage
name|message
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
name|boolean
name|wrap
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|boi
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
name|wrap
operator|=
literal|true
expr_stmt|;
block|}
name|OperationType
name|opType
init|=
name|boi
operator|.
name|getExtensor
argument_list|(
name|OperationType
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ParamType
argument_list|>
name|paramTypes
init|=
name|opType
operator|.
name|getParam
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ArgType
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|ArgType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ParamType
argument_list|>
name|iter
init|=
name|paramTypes
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ParamType
name|param
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|param
operator|.
name|getMode
argument_list|()
operator|.
name|equals
argument_list|(
name|ModeType
operator|.
name|OUT
argument_list|)
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
block|}
name|CorbaStreamWriter
name|writer
init|=
operator|new
name|CorbaStreamWriter
argument_list|(
name|orb
argument_list|,
name|params
argument_list|,
name|typeMap
argument_list|,
name|service
argument_list|,
name|wrap
argument_list|)
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|handleInBoundMessage
parameter_list|(
name|CorbaMessage
name|message
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
name|boolean
name|wrap
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|boi
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
name|wrap
operator|=
literal|true
expr_stmt|;
block|}
name|OperationType
name|opType
init|=
name|boi
operator|.
name|getExtensor
argument_list|(
name|OperationType
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArgType
name|returnParam
init|=
name|opType
operator|.
name|getReturn
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ParamType
argument_list|>
name|paramTypes
init|=
name|opType
operator|.
name|getParam
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ArgType
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|ArgType
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|returnParam
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|returnParam
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|ParamType
argument_list|>
name|iter
init|=
name|paramTypes
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ParamType
name|param
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|param
operator|.
name|getMode
argument_list|()
operator|.
name|equals
argument_list|(
name|ModeType
operator|.
name|IN
argument_list|)
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
block|}
name|CorbaStreamWriter
name|writer
init|=
operator|new
name|CorbaStreamWriter
argument_list|(
name|orb
argument_list|,
name|params
argument_list|,
name|typeMap
argument_list|,
name|service
argument_list|,
name|wrap
argument_list|)
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

