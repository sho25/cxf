begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaTypeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonarray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaArrayListener
extends|extends
name|AbstractCorbaTypeListener
block|{
specifier|private
specifier|final
name|CorbaArrayHandler
name|value
decl_stmt|;
specifier|private
specifier|final
name|QName
name|arrayElementType
decl_stmt|;
specifier|private
specifier|final
name|ORB
name|orb
decl_stmt|;
specifier|private
specifier|final
name|CorbaTypeMap
name|typeMap
decl_stmt|;
specifier|private
name|QName
name|currentElName
decl_stmt|;
specifier|private
name|CorbaTypeListener
name|currentTypeListener
decl_stmt|;
specifier|private
name|ServiceInfo
name|serviceInfo
decl_stmt|;
specifier|public
name|CorbaArrayListener
parameter_list|(
name|CorbaObjectHandler
name|handler
parameter_list|,
name|CorbaTypeMap
name|map
parameter_list|,
name|ORB
name|orbRef
parameter_list|,
name|ServiceInfo
name|sInfo
parameter_list|)
block|{
name|super
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|value
operator|=
operator|(
name|CorbaArrayHandler
operator|)
name|handler
expr_stmt|;
name|orb
operator|=
name|orbRef
expr_stmt|;
name|typeMap
operator|=
name|map
expr_stmt|;
name|serviceInfo
operator|=
name|sInfo
expr_stmt|;
name|Object
name|arrayType
init|=
name|handler
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|arrayType
operator|instanceof
name|Anonarray
condition|)
block|{
name|Anonarray
name|anonType
init|=
operator|(
name|Anonarray
operator|)
name|arrayType
decl_stmt|;
name|arrayElementType
operator|=
name|anonType
operator|.
name|getElemtype
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Array
name|type
init|=
operator|(
name|Array
operator|)
name|arrayType
decl_stmt|;
name|arrayElementType
operator|=
name|type
operator|.
name|getElemtype
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processStartElement
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
if|if
condition|(
name|currentTypeListener
operator|==
literal|null
condition|)
block|{
name|currentElName
operator|=
name|name
expr_stmt|;
name|currentTypeListener
operator|=
name|CorbaHandlerUtils
operator|.
name|getTypeListener
argument_list|(
name|name
argument_list|,
name|arrayElementType
argument_list|,
name|typeMap
argument_list|,
name|orb
argument_list|,
name|serviceInfo
argument_list|)
expr_stmt|;
name|value
operator|.
name|addElement
argument_list|(
name|currentTypeListener
operator|.
name|getCorbaObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentTypeListener
operator|.
name|processStartElement
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processEndElement
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
if|if
condition|(
name|currentTypeListener
operator|!=
literal|null
condition|)
block|{
name|currentTypeListener
operator|.
name|processEndElement
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentElName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|currentTypeListener
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|processCharacters
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|currentTypeListener
operator|.
name|processCharacters
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|processWriteAttribute
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|currentTypeListener
operator|!=
literal|null
condition|)
block|{
name|currentTypeListener
operator|.
name|processWriteAttribute
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processWriteNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespaceURI
parameter_list|)
block|{
if|if
condition|(
name|currentTypeListener
operator|!=
literal|null
condition|)
block|{
name|currentTypeListener
operator|.
name|processWriteNamespace
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

