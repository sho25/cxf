begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaBindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaStreamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|runtime
operator|.
name|CorbaStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaHandlerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaTypeEventProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|ClientFaultConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceModelUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|SystemException
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaStreamFaultInInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|CorbaStreamFaultInInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|CorbaStreamFaultInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|UNMARSHAL
argument_list|)
expr_stmt|;
name|addAfter
argument_list|(
name|ClientFaultConverter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
name|CorbaMessage
name|message
init|=
operator|(
name|CorbaMessage
operator|)
name|msg
decl_stmt|;
try|try
block|{
name|SystemException
name|sysEx
init|=
name|message
operator|.
name|getSystemException
argument_list|()
decl_stmt|;
if|if
condition|(
name|sysEx
operator|!=
literal|null
condition|)
block|{
comment|// TODO: Do we need anything else to handle system exceptions here...i.e. do
comment|// we want to add a wrapper around this so that we can add some more information?
name|message
operator|.
name|setContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
name|sysEx
argument_list|)
expr_stmt|;
return|return;
block|}
name|CorbaStreamable
name|exStreamable
init|=
name|message
operator|.
name|getStreamableException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exStreamable
operator|!=
literal|null
condition|)
block|{
name|DataReader
argument_list|<
name|XMLStreamReader
argument_list|>
name|reader
init|=
name|getDataReader
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|bopInfo
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|OperationInfo
name|opInfo
init|=
name|bopInfo
operator|.
name|getOperationInfo
argument_list|()
decl_stmt|;
name|ServiceInfo
name|service
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
name|orb
init|=
operator|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
operator|)
name|message
operator|.
name|get
argument_list|(
name|CorbaConstants
operator|.
name|ORB
argument_list|)
decl_stmt|;
if|if
condition|(
name|orb
operator|==
literal|null
condition|)
block|{
name|orb
operator|=
operator|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|QName
name|elName
init|=
operator|new
name|QName
argument_list|(
literal|""
argument_list|,
name|exStreamable
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|FaultInfo
name|fault
init|=
name|getFaultInfo
argument_list|(
name|opInfo
argument_list|,
name|elName
argument_list|)
decl_stmt|;
name|CorbaTypeEventProducer
name|faultEventProducer
init|=
name|CorbaHandlerUtils
operator|.
name|getTypeEventProducer
argument_list|(
name|exStreamable
operator|.
name|getObject
argument_list|()
argument_list|,
name|service
argument_list|,
name|orb
argument_list|)
decl_stmt|;
name|CorbaStreamReader
name|streamReader
init|=
operator|new
name|CorbaStreamReader
argument_list|(
name|faultEventProducer
argument_list|)
decl_stmt|;
name|Object
name|e
init|=
name|reader
operator|.
name|read
argument_list|(
name|fault
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|streamReader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|e
operator|instanceof
name|Exception
operator|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|exClass
init|=
name|fault
operator|.
name|getProperty
argument_list|(
name|Class
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|Class
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|exClass
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|beanClass
init|=
name|e
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
init|=
name|exClass
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|,
name|beanClass
block|}
argument_list|)
decl_stmt|;
name|String
name|repId
init|=
operator|(
name|message
operator|.
name|getStreamableException
argument_list|()
operator|.
name|_type
argument_list|()
operator|.
name|id
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|message
operator|.
name|getStreamableException
argument_list|()
operator|.
name|_type
argument_list|()
operator|.
name|id
argument_list|()
else|:
literal|""
decl_stmt|;
name|e
operator|=
name|constructor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|repId
block|,
name|e
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Get the Fault
name|Fault
name|faultEx
init|=
operator|(
name|Fault
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|Document
condition|)
block|{
name|createFaultDetail
argument_list|(
operator|(
name|Document
operator|)
name|e
argument_list|,
name|fault
argument_list|,
name|faultEx
argument_list|)
expr_stmt|;
block|}
name|e
operator|=
name|faultEx
expr_stmt|;
block|}
block|}
name|message
operator|.
name|setContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
operator|(
name|Exception
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CORBA unmarshalFault exception"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CORBA unmarshalFault exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|createFaultDetail
parameter_list|(
name|Document
name|faultData
parameter_list|,
name|FaultInfo
name|faultInfo
parameter_list|,
name|Fault
name|faultEx
parameter_list|)
block|{
name|MessagePartInfo
name|partInfo
init|=
name|faultInfo
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QName
name|partInfoName
init|=
name|partInfo
operator|.
name|getElementQName
argument_list|()
decl_stmt|;
name|Document
name|faultDoc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|faultElement
init|=
name|faultDoc
operator|.
name|createElement
argument_list|(
literal|"detail"
argument_list|)
decl_stmt|;
name|faultDoc
operator|.
name|appendChild
argument_list|(
name|faultElement
argument_list|)
expr_stmt|;
name|Element
name|partElement
init|=
name|faultDoc
operator|.
name|createElementNS
argument_list|(
name|partInfoName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|partInfoName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|Element
name|faultDataElement
init|=
operator|(
name|Element
operator|)
name|faultData
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|faultDataElement
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|Node
name|importedFaultData
init|=
name|faultDoc
operator|.
name|importNode
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|partElement
operator|.
name|appendChild
argument_list|(
name|importedFaultData
argument_list|)
expr_stmt|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|faultElement
operator|.
name|appendChild
argument_list|(
name|partElement
argument_list|)
expr_stmt|;
name|faultEx
operator|.
name|setDetail
argument_list|(
name|faultElement
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|FaultInfo
name|getFaultInfo
parameter_list|(
name|OperationInfo
name|opInfo
parameter_list|,
name|QName
name|faultName
parameter_list|)
block|{
name|Iterator
argument_list|<
name|FaultInfo
argument_list|>
name|faults
init|=
name|opInfo
operator|.
name|getFaults
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|faults
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FaultInfo
name|fault
init|=
name|faults
operator|.
name|next
argument_list|()
decl_stmt|;
name|MessagePartInfo
name|partInfo
init|=
name|fault
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|partInfo
operator|.
name|isElement
argument_list|()
operator|&&
name|partInfo
operator|.
name|getElementQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|faultName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|fault
return|;
block|}
elseif|else
if|if
condition|(
name|partInfo
operator|.
name|getTypeQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|faultName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|fault
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|DataReader
argument_list|<
name|XMLStreamReader
argument_list|>
name|getDataReader
parameter_list|(
name|CorbaMessage
name|message
parameter_list|)
block|{
name|Service
name|serviceModel
init|=
name|ServiceModelUtil
operator|.
name|getService
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
decl_stmt|;
name|DataReader
argument_list|<
name|XMLStreamReader
argument_list|>
name|dataReader
init|=
name|serviceModel
operator|.
name|getDataBinding
argument_list|()
operator|.
name|createReader
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataReader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"Couldn't create data reader for incoming fault message"
argument_list|)
throw|;
block|}
return|return
name|dataReader
return|;
block|}
block|}
end_class

end_unit

