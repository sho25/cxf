begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaBindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaAnyHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaArrayHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaEnumHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaFixedHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaObjectHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaObjectReferenceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaOctetSequenceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaPrimitiveHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaSequenceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaStructHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaUnionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CaseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Enum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Unionbranch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Any
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|NO_IMPLEMENT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TCKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TypeCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|InputStream
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaObjectReader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|CorbaObjectReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|InputStream
name|stream
decl_stmt|;
specifier|public
name|CorbaObjectReader
parameter_list|(
name|InputStream
name|inStream
parameter_list|)
block|{
name|stream
operator|=
name|inStream
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|CorbaObjectHandler
name|obj
parameter_list|)
throws|throws
name|CorbaBindingException
block|{
switch|switch
condition|(
name|obj
operator|.
name|getTypeCode
argument_list|()
operator|.
name|kind
argument_list|()
operator|.
name|value
argument_list|()
condition|)
block|{
case|case
name|TCKind
operator|.
name|_tk_boolean
case|:
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|this
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_char
case|:
name|Character
name|charValue
init|=
name|this
operator|.
name|readChar
argument_list|()
decl_stmt|;
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|charValue
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_wchar
case|:
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|this
operator|.
name|readWChar
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_octet
case|:
name|Byte
name|octetValue
init|=
name|this
operator|.
name|readOctet
argument_list|()
decl_stmt|;
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|octetValue
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_short
case|:
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|this
operator|.
name|readShort
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_ushort
case|:
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|this
operator|.
name|readUShort
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_long
case|:
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|this
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_ulong
case|:
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|this
operator|.
name|readULong
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_longlong
case|:
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|this
operator|.
name|readLongLong
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_ulonglong
case|:
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|this
operator|.
name|readULongLong
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_float
case|:
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|this
operator|.
name|readFloat
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_double
case|:
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|this
operator|.
name|readDouble
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_string
case|:
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|this
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_wstring
case|:
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|this
operator|.
name|readWString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_any
case|:
operator|(
operator|(
name|CorbaAnyHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|this
operator|.
name|readAny
argument_list|()
argument_list|)
expr_stmt|;
break|break;
comment|// Now for the complex types
case|case
name|TCKind
operator|.
name|_tk_array
case|:
name|this
operator|.
name|readArray
argument_list|(
operator|(
name|CorbaArrayHandler
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_sequence
case|:
name|this
operator|.
name|readSequence
argument_list|(
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_struct
case|:
name|this
operator|.
name|readStruct
argument_list|(
operator|(
name|CorbaStructHandler
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_enum
case|:
name|this
operator|.
name|readEnum
argument_list|(
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_except
case|:
name|this
operator|.
name|readException
argument_list|(
operator|(
name|CorbaExceptionHandler
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_fixed
case|:
name|this
operator|.
name|readFixed
argument_list|(
operator|(
name|CorbaFixedHandler
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_union
case|:
name|this
operator|.
name|readUnion
argument_list|(
operator|(
name|CorbaUnionHandler
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
case|case
name|TCKind
operator|.
name|_tk_objref
case|:
name|this
operator|.
name|readObjectReference
argument_list|(
operator|(
name|CorbaObjectReferenceHandler
operator|)
name|obj
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// TODO: Provide Implementation. Do we throw an exception.
block|}
block|}
comment|// -- primitive types --
specifier|public
name|Boolean
name|readBoolean
parameter_list|()
throws|throws
name|CorbaBindingException
block|{
try|try
block|{
return|return
name|stream
operator|.
name|read_boolean
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CorbaObjectReader: could not read boolean"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CorbaObjectReader: readBoolean MARSHAL exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Character
name|readChar
parameter_list|()
throws|throws
name|CorbaBindingException
block|{
try|try
block|{
return|return
name|Character
operator|.
name|valueOf
argument_list|(
name|stream
operator|.
name|read_char
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CorbaObjectReader: could not read character"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CorbaObjectReader: readChar MARSHAL exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Character
name|readWChar
parameter_list|()
throws|throws
name|CorbaBindingException
block|{
try|try
block|{
return|return
name|Character
operator|.
name|valueOf
argument_list|(
name|stream
operator|.
name|read_wchar
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CorbaObjectReader: could not read wide character"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CorbaObjectReader: readWChar MARSHAL exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Byte
name|readOctet
parameter_list|()
throws|throws
name|CorbaBindingException
block|{
try|try
block|{
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|stream
operator|.
name|read_octet
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CorbaObjectReader: could not read octet"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CorbaObjectReader: readOctet MARSHAL exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Short
name|readShort
parameter_list|()
throws|throws
name|CorbaBindingException
block|{
try|try
block|{
return|return
name|Short
operator|.
name|valueOf
argument_list|(
name|stream
operator|.
name|read_short
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CorbaObjectReader: could not read short"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CorbaObjectReader: readShort MARSHAL exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Integer
name|readUShort
parameter_list|()
throws|throws
name|CorbaBindingException
block|{
try|try
block|{
name|int
name|result
init|=
name|stream
operator|.
name|read_ushort
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
name|result
operator|=
operator|(
name|result
operator|-
name|Short
operator|.
name|MIN_VALUE
operator|)
operator|-
name|Short
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CorbaObjectReader: could not read unsigned short"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CorbaObjectReader: readUShort MARSHAL exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Integer
name|readLong
parameter_list|()
throws|throws
name|CorbaBindingException
block|{
name|Integer
name|result
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|stream
operator|.
name|read_long
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CorbaObjectReader: could not read long"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CorbaObjectReader: readLong MARSHAL exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|long
name|readULong
parameter_list|()
throws|throws
name|CorbaBindingException
block|{
try|try
block|{
name|long
name|l
init|=
name|stream
operator|.
name|read_ulong
argument_list|()
decl_stmt|;
name|l
operator|&=
literal|0xffffffffL
expr_stmt|;
return|return
name|l
return|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CorbaObjectReader: could not read unsigned long"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CorbaObjectReader: readULong MARSHAL exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Long
name|readLongLong
parameter_list|()
throws|throws
name|CorbaBindingException
block|{
try|try
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|stream
operator|.
name|read_longlong
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CorbaObjectReader: could not read long long"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CorbaObjectReader: readLongLong MARSHAL exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|BigInteger
name|convertLongToULong
parameter_list|(
name|long
name|l
parameter_list|)
block|{
if|if
condition|(
name|l
operator|<
literal|0
condition|)
block|{
name|long
name|l2
init|=
name|l
operator|&
literal|0x7FFFFFFFFFFFFFL
decl_stmt|;
name|BigInteger
name|i
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|l2
argument_list|)
decl_stmt|;
name|BigInteger
name|i2
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|i2
operator|=
name|i2
operator|.
name|setBit
argument_list|(
literal|63
argument_list|)
expr_stmt|;
name|i
operator|=
name|i
operator|.
name|or
argument_list|(
name|i2
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
return|return
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|l
argument_list|)
return|;
block|}
specifier|public
name|BigInteger
name|readULongLong
parameter_list|()
throws|throws
name|CorbaBindingException
block|{
try|try
block|{
return|return
name|convertLongToULong
argument_list|(
name|stream
operator|.
name|read_ulonglong
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CorbaObjectReader: could not read unsigned long long"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CorbaObjectReader: readULongLong MARSHAL exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Float
name|readFloat
parameter_list|()
throws|throws
name|CorbaBindingException
block|{
try|try
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|stream
operator|.
name|read_float
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CorbaObjectReader: could not read float"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CorbaObjectReader: readFloat MARSHAL exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Double
name|readDouble
parameter_list|()
throws|throws
name|CorbaBindingException
block|{
try|try
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|stream
operator|.
name|read_double
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CorbaObjectReader: could not read double"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CorbaObjectReader: readDouble MARSHAL exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|readString
parameter_list|()
throws|throws
name|CorbaBindingException
block|{
try|try
block|{
return|return
name|stream
operator|.
name|read_string
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CorbaObjectReader: could not read string"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CorbaObjectReader: readString MARSHAL exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|readWString
parameter_list|()
throws|throws
name|CorbaBindingException
block|{
try|try
block|{
return|return
name|stream
operator|.
name|read_wstring
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CorbaObjectReader: could not read wide string"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CorbaObjectReader: readWString MARSHAL exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Any
name|readAny
parameter_list|()
throws|throws
name|CorbaBindingException
block|{
try|try
block|{
return|return
name|stream
operator|.
name|read_any
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CorbaObjectReader: could not read any"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"CorbaObjectReader: readAny MARSHAL exception"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|// -- complex types --
specifier|public
name|void
name|readEnum
parameter_list|(
name|CorbaObjectHandler
name|obj
parameter_list|)
throws|throws
name|CorbaBindingException
block|{
name|int
name|enumIndex
init|=
name|stream
operator|.
name|read_long
argument_list|()
decl_stmt|;
name|Enum
name|enumType
init|=
operator|(
name|Enum
operator|)
name|obj
operator|.
name|getType
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Enumerator
argument_list|>
name|enumerators
init|=
name|enumType
operator|.
name|getEnumerator
argument_list|()
decl_stmt|;
name|CorbaEnumHandler
name|enumObj
init|=
operator|(
name|CorbaEnumHandler
operator|)
name|obj
decl_stmt|;
name|enumObj
operator|.
name|setValue
argument_list|(
name|enumerators
operator|.
name|get
argument_list|(
name|enumIndex
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|readStruct
parameter_list|(
name|CorbaStructHandler
name|structObj
parameter_list|)
throws|throws
name|CorbaBindingException
block|{
name|List
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|structMembers
init|=
name|structObj
operator|.
name|getMembers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|structMembers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|this
operator|.
name|read
argument_list|(
name|structMembers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|readException
parameter_list|(
name|CorbaExceptionHandler
name|exceptObj
parameter_list|)
throws|throws
name|CorbaBindingException
block|{
name|List
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|exceptElements
init|=
name|exceptObj
operator|.
name|getMembers
argument_list|()
decl_stmt|;
name|String
name|exceptId
init|=
name|stream
operator|.
name|read_string
argument_list|()
decl_stmt|;
name|exceptObj
operator|.
name|setId
argument_list|(
name|exceptId
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exceptElements
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|this
operator|.
name|read
argument_list|(
name|exceptElements
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|readFixed
parameter_list|(
name|CorbaFixedHandler
name|fixedHandler
parameter_list|)
throws|throws
name|CorbaBindingException
block|{
name|long
name|scale
init|=
name|fixedHandler
operator|.
name|getScale
argument_list|()
decl_stmt|;
try|try
block|{
name|java
operator|.
name|math
operator|.
name|BigDecimal
name|fixedValue
init|=
name|stream
operator|.
name|read_fixed
argument_list|()
operator|.
name|movePointLeft
argument_list|(
operator|(
name|int
operator|)
name|scale
argument_list|)
decl_stmt|;
name|fixedHandler
operator|.
name|setValue
argument_list|(
name|fixedValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NO_IMPLEMENT
name|ex
parameter_list|)
block|{
comment|//the read_fixed method is a "late addition" and not all orbs implement it.
comment|//Some of them have a "read_fixed(TypeCode)" method, we'll try that
name|Method
name|m
init|=
literal|null
decl_stmt|;
try|try
block|{
name|m
operator|=
name|stream
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"read_fixed"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|TypeCode
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|BigDecimal
name|fixedValue
init|=
operator|(
name|BigDecimal
operator|)
name|m
operator|.
name|invoke
argument_list|(
name|stream
argument_list|,
operator|new
name|Object
index|[]
block|{
name|fixedHandler
operator|.
name|getTypeCode
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|fixedHandler
operator|.
name|setValue
argument_list|(
name|fixedValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|readEnumDiscriminator
parameter_list|(
name|CorbaUnionHandler
name|unionHandler
parameter_list|,
name|CorbaEnumHandler
name|disc
parameter_list|)
throws|throws
name|CorbaBindingException
block|{
name|int
name|enumIndex
init|=
name|stream
operator|.
name|read_long
argument_list|()
decl_stmt|;
name|Enum
name|enumType
init|=
operator|(
name|Enum
operator|)
name|disc
operator|.
name|getType
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Enumerator
argument_list|>
name|enumerators
init|=
name|enumType
operator|.
name|getEnumerator
argument_list|()
decl_stmt|;
if|if
condition|(
name|enumIndex
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|enumIndex
operator|=
name|unionHandler
operator|.
name|getDefaultIndex
argument_list|()
expr_stmt|;
block|}
name|disc
operator|.
name|setValue
argument_list|(
name|enumerators
operator|.
name|get
argument_list|(
name|enumIndex
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|readUnion
parameter_list|(
name|CorbaUnionHandler
name|unionHandler
parameter_list|)
throws|throws
name|CorbaBindingException
block|{
name|Union
name|unionType
init|=
operator|(
name|Union
operator|)
name|unionHandler
operator|.
name|getType
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Unionbranch
argument_list|>
name|branches
init|=
name|unionType
operator|.
name|getUnionbranch
argument_list|()
decl_stmt|;
name|CorbaObjectHandler
name|discriminator
init|=
name|unionHandler
operator|.
name|getDiscriminator
argument_list|()
decl_stmt|;
if|if
condition|(
name|branches
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|discLabel
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|discriminator
operator|.
name|getTypeCodeKind
argument_list|()
operator|.
name|value
argument_list|()
operator|==
name|TCKind
operator|.
name|_tk_enum
condition|)
block|{
name|CorbaEnumHandler
name|disc
init|=
operator|(
name|CorbaEnumHandler
operator|)
name|discriminator
decl_stmt|;
name|readEnumDiscriminator
argument_list|(
name|unionHandler
argument_list|,
name|disc
argument_list|)
expr_stmt|;
name|discLabel
operator|=
name|disc
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|read
argument_list|(
name|discriminator
argument_list|)
expr_stmt|;
name|discLabel
operator|=
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|discriminator
operator|)
operator|.
name|getDataFromValue
argument_list|()
expr_stmt|;
block|}
comment|// Now find the label in the union to get the right case
name|Unionbranch
name|defaultBranch
init|=
literal|null
decl_stmt|;
name|boolean
name|caseFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Unionbranch
argument_list|>
name|branchIter
init|=
name|branches
operator|.
name|iterator
argument_list|()
init|;
name|branchIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Unionbranch
name|branch
init|=
name|branchIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|branch
operator|.
name|isSetDefault
argument_list|()
operator|&&
name|branch
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|defaultBranch
operator|=
name|branch
expr_stmt|;
block|}
name|List
argument_list|<
name|CaseType
argument_list|>
name|cases
init|=
name|branch
operator|.
name|getCase
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CaseType
argument_list|>
name|caseIter
init|=
name|cases
operator|.
name|iterator
argument_list|()
init|;
name|caseIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CaseType
name|c
init|=
name|caseIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getLabel
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|discLabel
argument_list|)
condition|)
block|{
name|CorbaObjectHandler
name|branchObj
init|=
name|unionHandler
operator|.
name|getBranchByName
argument_list|(
name|branch
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|read
argument_list|(
name|branchObj
argument_list|)
expr_stmt|;
name|unionHandler
operator|.
name|setValue
argument_list|(
name|branch
operator|.
name|getName
argument_list|()
argument_list|,
name|branchObj
argument_list|)
expr_stmt|;
name|caseFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|caseFound
condition|)
block|{
break|break;
block|}
block|}
comment|// If we never find a case that matches the value of the discriminiator, then we must have
comment|// found the default case.
if|if
condition|(
operator|!
name|caseFound
operator|&&
name|defaultBranch
operator|!=
literal|null
condition|)
block|{
name|CorbaObjectHandler
name|branchObj
init|=
name|unionHandler
operator|.
name|getBranchByName
argument_list|(
name|defaultBranch
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|read
argument_list|(
name|branchObj
argument_list|)
expr_stmt|;
name|unionHandler
operator|.
name|setValue
argument_list|(
name|defaultBranch
operator|.
name|getName
argument_list|()
argument_list|,
name|branchObj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//CHECKSTYLE:OFF  -  processing the typecodes in a switch makes this method fairly long/complex
specifier|public
name|void
name|readArray
parameter_list|(
name|CorbaArrayHandler
name|arrayObj
parameter_list|)
throws|throws
name|CorbaBindingException
block|{
name|List
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|arrayElements
init|=
name|arrayObj
operator|.
name|getElements
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
literal|null
decl_stmt|;
name|int
name|arraySize
init|=
name|arrayElements
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|arraySize
operator|>
literal|0
condition|)
block|{
switch|switch
condition|(
name|arrayElements
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTypeCodeKind
argument_list|()
operator|.
name|value
argument_list|()
condition|)
block|{
case|case
name|TCKind
operator|.
name|_tk_boolean
case|:
block|{
name|boolean
index|[]
name|values
init|=
operator|new
name|boolean
index|[
name|arraySize
index|]
decl_stmt|;
name|stream
operator|.
name|read_boolean_array
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|arraySize
argument_list|)
expr_stmt|;
name|val
operator|=
name|values
expr_stmt|;
break|break;
block|}
case|case
name|TCKind
operator|.
name|_tk_char
case|:
block|{
name|char
index|[]
name|values
init|=
operator|new
name|char
index|[
name|arraySize
index|]
decl_stmt|;
name|stream
operator|.
name|read_char_array
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|arraySize
argument_list|)
expr_stmt|;
name|val
operator|=
name|values
expr_stmt|;
break|break;
block|}
case|case
name|TCKind
operator|.
name|_tk_wchar
case|:
block|{
name|char
index|[]
name|values
init|=
operator|new
name|char
index|[
name|arraySize
index|]
decl_stmt|;
name|stream
operator|.
name|read_wchar_array
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|arraySize
argument_list|)
expr_stmt|;
name|val
operator|=
name|values
expr_stmt|;
break|break;
block|}
case|case
name|TCKind
operator|.
name|_tk_octet
case|:
block|{
name|byte
index|[]
name|values
init|=
operator|new
name|byte
index|[
name|arraySize
index|]
decl_stmt|;
name|stream
operator|.
name|read_octet_array
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|arraySize
argument_list|)
expr_stmt|;
name|val
operator|=
name|values
expr_stmt|;
break|break;
block|}
case|case
name|TCKind
operator|.
name|_tk_short
case|:
block|{
name|short
index|[]
name|values
init|=
operator|new
name|short
index|[
name|arraySize
index|]
decl_stmt|;
name|stream
operator|.
name|read_short_array
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|arraySize
argument_list|)
expr_stmt|;
name|val
operator|=
name|values
expr_stmt|;
break|break;
block|}
case|case
name|TCKind
operator|.
name|_tk_ushort
case|:
block|{
name|short
index|[]
name|values
init|=
operator|new
name|short
index|[
name|arraySize
index|]
decl_stmt|;
name|stream
operator|.
name|read_ushort_array
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|arraySize
argument_list|)
expr_stmt|;
name|val
operator|=
name|values
expr_stmt|;
break|break;
block|}
case|case
name|TCKind
operator|.
name|_tk_long
case|:
block|{
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[
name|arraySize
index|]
decl_stmt|;
name|stream
operator|.
name|read_long_array
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|arraySize
argument_list|)
expr_stmt|;
name|val
operator|=
name|values
expr_stmt|;
break|break;
block|}
case|case
name|TCKind
operator|.
name|_tk_ulong
case|:
block|{
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[
name|arraySize
index|]
decl_stmt|;
name|stream
operator|.
name|read_ulong_array
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|arraySize
argument_list|)
expr_stmt|;
name|long
index|[]
name|v2
init|=
operator|new
name|long
index|[
name|arraySize
index|]
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|arraySize
condition|;
name|x
operator|++
control|)
block|{
name|v2
index|[
name|x
index|]
operator|=
name|values
index|[
name|x
index|]
expr_stmt|;
name|v2
index|[
name|x
index|]
operator|&=
literal|0xFFFFFFFFL
expr_stmt|;
block|}
name|val
operator|=
name|v2
expr_stmt|;
break|break;
block|}
case|case
name|TCKind
operator|.
name|_tk_longlong
case|:
block|{
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|arraySize
index|]
decl_stmt|;
name|stream
operator|.
name|read_longlong_array
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|arraySize
argument_list|)
expr_stmt|;
name|val
operator|=
name|values
expr_stmt|;
break|break;
block|}
case|case
name|TCKind
operator|.
name|_tk_ulonglong
case|:
block|{
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|arraySize
index|]
decl_stmt|;
name|stream
operator|.
name|read_ulonglong_array
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|arraySize
argument_list|)
expr_stmt|;
name|BigInteger
index|[]
name|v2
init|=
operator|new
name|BigInteger
index|[
name|arraySize
index|]
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|arraySize
condition|;
name|x
operator|++
control|)
block|{
name|v2
index|[
name|x
index|]
operator|=
name|convertLongToULong
argument_list|(
name|values
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
name|val
operator|=
name|v2
expr_stmt|;
break|break;
block|}
case|case
name|TCKind
operator|.
name|_tk_float
case|:
block|{
name|float
index|[]
name|values
init|=
operator|new
name|float
index|[
name|arraySize
index|]
decl_stmt|;
name|stream
operator|.
name|read_float_array
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|arraySize
argument_list|)
expr_stmt|;
name|val
operator|=
name|values
expr_stmt|;
break|break;
block|}
case|case
name|TCKind
operator|.
name|_tk_double
case|:
block|{
name|double
index|[]
name|values
init|=
operator|new
name|double
index|[
name|arraySize
index|]
decl_stmt|;
name|stream
operator|.
name|read_double_array
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|arraySize
argument_list|)
expr_stmt|;
name|val
operator|=
name|values
expr_stmt|;
break|break;
block|}
default|default:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arrayElements
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|this
operator|.
name|read
argument_list|(
name|arrayElements
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|int
name|sz
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|val
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|CorbaPrimitiveHandler
operator|)
name|arrayElements
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|setValue
argument_list|(
name|Array
operator|.
name|get
argument_list|(
name|val
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//CHECKSTYLE:ON
specifier|public
name|void
name|readSequence
parameter_list|(
name|CorbaObjectHandler
name|obj
parameter_list|)
throws|throws
name|CorbaBindingException
block|{
if|if
condition|(
name|obj
operator|instanceof
name|CorbaOctetSequenceHandler
condition|)
block|{
name|int
name|length
init|=
name|stream
operator|.
name|read_ulong
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|stream
operator|.
name|read_octet_array
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CorbaOctetSequenceHandler
operator|)
name|obj
operator|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CorbaSequenceHandler
name|sequenceObj
init|=
operator|(
name|CorbaSequenceHandler
operator|)
name|obj
decl_stmt|;
name|List
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|seqElements
init|=
name|sequenceObj
operator|.
name|getElements
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|stream
operator|.
name|read_ulong
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|elements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|length
argument_list|)
decl_stmt|;
comment|// Simply checking the bound won't handle our recursive types.  We need to check for the
comment|// existance of template, which will be present for all unbounded sequences and for bound
comment|// sequences with recursive type elements.  Use the template element to construct each
comment|// object that is in the input stream.
if|if
condition|(
name|sequenceObj
operator|.
name|getTemplateElement
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sequenceObj
operator|.
name|clear
argument_list|()
expr_stmt|;
name|CorbaObjectHandler
name|template
init|=
name|sequenceObj
operator|.
name|getTemplateElement
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|CorbaObjectHandler
name|seqElement
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|seqElements
operator|.
name|size
argument_list|()
condition|)
block|{
name|seqElement
operator|=
name|seqElements
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|seqElement
operator|=
name|initializeCorbaObjectHandler
argument_list|(
name|template
argument_list|)
expr_stmt|;
block|}
name|read
argument_list|(
name|seqElement
argument_list|)
expr_stmt|;
name|elements
operator|.
name|add
argument_list|(
name|seqElement
argument_list|)
expr_stmt|;
block|}
name|sequenceObj
operator|.
name|setElements
argument_list|(
name|elements
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We have a bounded sequence and the object should already be pre-built
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|read
argument_list|(
name|seqElements
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sequenceObj
operator|.
name|setElements
argument_list|(
name|seqElements
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|readObjectReference
parameter_list|(
name|CorbaObjectReferenceHandler
name|objRefObj
parameter_list|)
throws|throws
name|CorbaBindingException
block|{
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|objRef
init|=
name|stream
operator|.
name|read_Object
argument_list|()
decl_stmt|;
name|objRefObj
operator|.
name|setReference
argument_list|(
name|objRef
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CorbaObjectHandler
name|initializeCorbaObjectHandler
parameter_list|(
name|CorbaObjectHandler
name|template
parameter_list|)
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|templateConstructor
init|=
name|template
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredConstructors
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Object
index|[]
name|params
init|=
operator|new
name|Object
index|[
literal|4
index|]
decl_stmt|;
comment|// Check to see if the template type is a recursive type.  If so, it means that it is part
comment|// of a sequence and needs to have the name "item" in order
if|if
condition|(
name|template
operator|.
name|isRecursive
argument_list|()
condition|)
block|{
comment|// Revisit: Is this always the case?
name|params
index|[
literal|0
index|]
operator|=
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
index|[
literal|0
index|]
operator|=
name|template
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|params
index|[
literal|1
index|]
operator|=
name|template
operator|.
name|getIdlType
argument_list|()
expr_stmt|;
name|params
index|[
literal|2
index|]
operator|=
name|template
operator|.
name|getTypeCode
argument_list|()
expr_stmt|;
name|params
index|[
literal|3
index|]
operator|=
name|template
operator|.
name|getType
argument_list|()
expr_stmt|;
name|CorbaObjectHandler
name|handler
init|=
literal|null
decl_stmt|;
try|try
block|{
name|handler
operator|=
operator|(
name|CorbaObjectHandler
operator|)
name|templateConstructor
operator|.
name|newInstance
argument_list|(
name|params
argument_list|)
expr_stmt|;
comment|// To construct an any, we also need to set a typemap.  This should be available through
comment|// the template object.
if|if
condition|(
name|template
operator|instanceof
name|CorbaAnyHandler
condition|)
block|{
operator|(
operator|(
name|CorbaAnyHandler
operator|)
name|handler
operator|)
operator|.
name|setTypeMap
argument_list|(
operator|(
operator|(
name|CorbaAnyHandler
operator|)
name|template
operator|)
operator|.
name|getTypeMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CorbaBindingException
argument_list|(
literal|"Unable to instantiate sequence element"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
name|template
operator|instanceof
name|CorbaSequenceHandler
condition|)
block|{
name|CorbaSequenceHandler
name|templateSeq
init|=
operator|(
name|CorbaSequenceHandler
operator|)
name|template
decl_stmt|;
operator|(
operator|(
name|CorbaSequenceHandler
operator|)
name|handler
operator|)
operator|.
name|setTemplateElement
argument_list|(
name|templateSeq
operator|.
name|getTemplateElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|template
operator|instanceof
name|CorbaStructHandler
condition|)
block|{
name|CorbaStructHandler
name|templateStruct
init|=
operator|(
name|CorbaStructHandler
operator|)
name|template
decl_stmt|;
name|CorbaStructHandler
name|struct
init|=
operator|(
name|CorbaStructHandler
operator|)
name|handler
decl_stmt|;
name|struct
operator|.
name|setRecursive
argument_list|(
name|template
operator|.
name|isRecursive
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|members
init|=
name|templateStruct
operator|.
name|getMembers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|members
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CorbaObjectHandler
name|member
init|=
name|initializeCorbaObjectHandler
argument_list|(
name|members
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|struct
operator|.
name|addMember
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|template
operator|instanceof
name|CorbaArrayHandler
condition|)
block|{
name|CorbaArrayHandler
name|templateArray
init|=
operator|(
name|CorbaArrayHandler
operator|)
name|template
decl_stmt|;
name|CorbaArrayHandler
name|array
init|=
operator|(
name|CorbaArrayHandler
operator|)
name|handler
decl_stmt|;
name|List
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|elements
init|=
name|templateArray
operator|.
name|getElements
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CorbaObjectHandler
name|element
init|=
name|initializeCorbaObjectHandler
argument_list|(
name|elements
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|array
operator|.
name|addElement
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|template
operator|instanceof
name|CorbaUnionHandler
condition|)
block|{
name|CorbaUnionHandler
name|templateUnion
init|=
operator|(
name|CorbaUnionHandler
operator|)
name|template
decl_stmt|;
name|CorbaUnionHandler
name|union
init|=
operator|(
name|CorbaUnionHandler
operator|)
name|handler
decl_stmt|;
name|union
operator|.
name|setRecursive
argument_list|(
name|template
operator|.
name|isRecursive
argument_list|()
argument_list|)
expr_stmt|;
name|union
operator|.
name|setDiscriminator
argument_list|(
name|initializeCorbaObjectHandler
argument_list|(
name|templateUnion
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|cases
init|=
name|templateUnion
operator|.
name|getCases
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cases
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|union
operator|.
name|addCase
argument_list|(
name|initializeCorbaObjectHandler
argument_list|(
name|cases
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|handler
return|;
block|}
block|}
end_class

end_unit

