begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaTypeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|CorbaAnyHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|W3CConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Any
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaAnyListener
extends|extends
name|AbstractCorbaTypeListener
block|{
specifier|private
specifier|final
name|CorbaTypeMap
name|typeMap
decl_stmt|;
specifier|private
specifier|final
name|ORB
name|orb
decl_stmt|;
specifier|private
name|ServiceInfo
name|serviceInfo
decl_stmt|;
specifier|private
name|CorbaTypeListener
name|currentTypeListener
decl_stmt|;
specifier|private
name|QName
name|containedType
decl_stmt|;
specifier|public
name|CorbaAnyListener
parameter_list|(
name|CorbaObjectHandler
name|h
parameter_list|,
name|CorbaTypeMap
name|map
parameter_list|,
name|ORB
name|orbRef
parameter_list|,
name|ServiceInfo
name|info
parameter_list|)
block|{
name|super
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|orb
operator|=
name|orbRef
expr_stmt|;
name|typeMap
operator|=
name|map
expr_stmt|;
name|serviceInfo
operator|=
name|info
expr_stmt|;
block|}
specifier|public
name|void
name|processStartElement
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
if|if
condition|(
name|currentTypeListener
operator|==
literal|null
condition|)
block|{
name|currentElement
operator|=
name|name
expr_stmt|;
name|QName
name|idlType
init|=
name|convertSchemaToIdlType
argument_list|(
name|containedType
argument_list|)
decl_stmt|;
name|currentTypeListener
operator|=
name|CorbaHandlerUtils
operator|.
name|getTypeListener
argument_list|(
name|name
argument_list|,
name|idlType
argument_list|,
name|typeMap
argument_list|,
name|orb
argument_list|,
name|serviceInfo
argument_list|)
expr_stmt|;
name|currentTypeListener
operator|.
name|setNamespaceContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|CorbaAnyHandler
name|anyHandler
init|=
operator|(
name|CorbaAnyHandler
operator|)
name|handler
decl_stmt|;
comment|// We need an any during the write.  Since we don't have the orb in the writer, create
comment|// the any here and use it later.
name|anyHandler
operator|.
name|setValue
argument_list|(
name|orb
operator|.
name|create_any
argument_list|()
argument_list|)
expr_stmt|;
name|anyHandler
operator|.
name|setAnyContainedType
argument_list|(
name|currentTypeListener
operator|.
name|getCorbaObject
argument_list|()
argument_list|)
expr_stmt|;
name|currentTypeListener
operator|.
name|processStartElement
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentTypeListener
operator|.
name|processStartElement
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processEndElement
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
if|if
condition|(
name|currentTypeListener
operator|!=
literal|null
condition|)
block|{
name|currentTypeListener
operator|.
name|processEndElement
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|CorbaAnyHandler
name|anyHandler
init|=
operator|(
name|CorbaAnyHandler
operator|)
name|handler
decl_stmt|;
name|anyHandler
operator|.
name|setAnyContainedType
argument_list|(
name|currentTypeListener
operator|.
name|getCorbaObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processCharacters
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|currentTypeListener
operator|==
literal|null
condition|)
block|{
comment|// This is the case with a primitive type.  Since there aren't any requests to
comment|// startElement and endElement, we need to do everything in here.
name|QName
name|idlType
init|=
name|convertSchemaToIdlType
argument_list|(
name|containedType
argument_list|)
decl_stmt|;
name|CorbaTypeListener
name|primitiveListener
init|=
name|CorbaHandlerUtils
operator|.
name|getTypeListener
argument_list|(
name|idlType
argument_list|,
name|idlType
argument_list|,
name|typeMap
argument_list|,
name|orb
argument_list|,
name|serviceInfo
argument_list|)
decl_stmt|;
name|primitiveListener
operator|.
name|setNamespaceContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|primitiveListener
operator|.
name|processCharacters
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|CorbaObjectHandler
name|obj
init|=
name|primitiveListener
operator|.
name|getCorbaObject
argument_list|()
decl_stmt|;
name|Any
name|a
init|=
name|orb
operator|.
name|create_any
argument_list|()
decl_stmt|;
name|CorbaAnyHandler
name|anyHandler
init|=
operator|(
name|CorbaAnyHandler
operator|)
name|handler
decl_stmt|;
name|anyHandler
operator|.
name|setValue
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|anyHandler
operator|.
name|setAnyContainedType
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentTypeListener
operator|.
name|processCharacters
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processWriteAttribute
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
literal|"type"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|&&
name|W3CConstants
operator|.
name|NU_SCHEMA_XSI
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
name|int
name|index
init|=
name|value
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|pfx
init|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|String
name|ns
init|=
name|ctx
operator|.
name|getNamespaceURI
argument_list|(
name|pfx
argument_list|)
decl_stmt|;
name|containedType
operator|=
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|value
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|,
name|pfx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|containedType
operator|=
operator|new
name|QName
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|QName
name|convertSchemaToIdlType
parameter_list|(
name|QName
name|schemaType
parameter_list|)
block|{
name|QName
name|idlType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|CorbaAnyHelper
operator|.
name|isPrimitiveSchemaType
argument_list|(
name|schemaType
argument_list|)
condition|)
block|{
name|idlType
operator|=
name|CorbaAnyHelper
operator|.
name|convertPrimitiveSchemaToIdlType
argument_list|(
name|schemaType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The localpart of the schema QName should match the localpart of the type in the CORBA
comment|// typemap.
name|idlType
operator|=
operator|new
name|QName
argument_list|(
name|typeMap
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|schemaType
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|idlType
return|;
block|}
block|}
end_class

end_unit

