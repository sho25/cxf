begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLEventReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLEventWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceModelUtil
import|;
end_import

begin_comment
comment|/**  * Holder for utility methods relating to contexts.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ContextUtils
block|{
specifier|private
name|ContextUtils
parameter_list|()
block|{
comment|//utility class
block|}
specifier|public
specifier|static
name|boolean
name|isRequestor
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|message
operator|.
name|containsKey
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Determine if message is outbound.      *      * @param message the current Message      * @return true iff the message direction is outbound      */
specifier|public
specifier|static
name|boolean
name|isOutbound
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
return|return
name|exchange
operator|!=
literal|null
operator|&&
name|message
operator|==
name|exchange
operator|.
name|getOutMessage
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|DataWriter
argument_list|<
name|XMLEventWriter
argument_list|>
name|getDataWriter
parameter_list|(
name|CorbaMessage
name|message
parameter_list|)
block|{
name|Service
name|service
init|=
name|ServiceModelUtil
operator|.
name|getService
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
decl_stmt|;
name|DataWriter
argument_list|<
name|XMLEventWriter
argument_list|>
name|dataWriter
init|=
name|service
operator|.
name|getDataBinding
argument_list|()
operator|.
name|createWriter
argument_list|(
name|XMLEventWriter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataWriter
operator|==
literal|null
condition|)
block|{
comment|//throw a fault
comment|//throw new Fault(new org.apache.cxf.common.i18n.Message("NO_DATAWRITER", BUNDLE, service
comment|//    .getName()));
block|}
return|return
name|dataWriter
return|;
block|}
specifier|public
specifier|static
name|DataReader
argument_list|<
name|XMLEventReader
argument_list|>
name|getDataReader
parameter_list|(
name|CorbaMessage
name|message
parameter_list|)
block|{
name|Service
name|service
init|=
name|ServiceModelUtil
operator|.
name|getService
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
decl_stmt|;
name|DataReader
argument_list|<
name|XMLEventReader
argument_list|>
name|dataReader
init|=
name|service
operator|.
name|getDataBinding
argument_list|()
operator|.
name|createReader
argument_list|(
name|XMLEventReader
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataReader
operator|==
literal|null
condition|)
block|{
comment|//throw a fault
comment|//throw new Fault(new org.apache.cxf.common.i18n.Message("NO_DATAREADER", BUNDLE, service
comment|//    .getName()));
block|}
return|return
name|dataReader
return|;
block|}
block|}
end_class

end_unit

