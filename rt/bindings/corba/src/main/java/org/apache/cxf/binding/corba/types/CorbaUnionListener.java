begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|CorbaTypeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CaseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Unionbranch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TCKind
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaUnionListener
extends|extends
name|AbstractCorbaTypeListener
block|{
specifier|private
name|CorbaTypeMap
name|typeMap
decl_stmt|;
specifier|private
name|ServiceInfo
name|serviceInfo
decl_stmt|;
specifier|private
name|ORB
name|orb
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Unionbranch
argument_list|>
name|branches
decl_stmt|;
specifier|private
name|CorbaTypeListener
name|currentTypeListener
decl_stmt|;
specifier|private
name|Union
name|unionType
decl_stmt|;
specifier|public
name|CorbaUnionListener
parameter_list|(
name|CorbaObjectHandler
name|handler
parameter_list|,
name|CorbaTypeMap
name|tm
parameter_list|,
name|ORB
name|oorb
parameter_list|,
name|ServiceInfo
name|sInfo
parameter_list|)
block|{
name|super
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|typeMap
operator|=
name|tm
expr_stmt|;
name|serviceInfo
operator|=
name|sInfo
expr_stmt|;
name|orb
operator|=
name|oorb
expr_stmt|;
name|unionType
operator|=
operator|(
name|Union
operator|)
name|handler
operator|.
name|getType
argument_list|()
expr_stmt|;
name|branches
operator|=
name|unionType
operator|.
name|getUnionbranch
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|processStartElement
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
if|if
condition|(
name|currentTypeListener
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Unionbranch
name|branch
range|:
name|branches
control|)
block|{
name|CorbaObjectHandler
name|content
decl_stmt|;
name|QName
name|unionName
init|=
literal|null
decl_stmt|;
name|String
name|branchName
init|=
name|branch
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|branch
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|unionName
operator|=
name|name
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|branches
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|unionName
operator|=
name|handler
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|unionName
operator|!=
literal|null
condition|)
block|{
name|CorbaObjectHandler
name|discObj
init|=
name|CorbaHandlerUtils
operator|.
name|createTypeHandler
argument_list|(
name|orb
argument_list|,
operator|new
name|QName
argument_list|(
literal|"discriminator"
argument_list|)
argument_list|,
name|unionType
operator|.
name|getDiscriminator
argument_list|()
argument_list|,
name|typeMap
argument_list|)
decl_stmt|;
operator|(
operator|(
name|CorbaUnionHandler
operator|)
name|handler
operator|)
operator|.
name|setDiscriminator
argument_list|(
name|discObj
argument_list|)
expr_stmt|;
name|String
name|descriminatorValue
init|=
name|determineDescriminatorValue
argument_list|(
name|branch
argument_list|)
decl_stmt|;
operator|(
operator|(
name|CorbaUnionHandler
operator|)
name|handler
operator|)
operator|.
name|setDiscriminatorValueFromData
argument_list|(
name|descriminatorValue
argument_list|)
expr_stmt|;
name|currentTypeListener
operator|=
name|CorbaHandlerUtils
operator|.
name|getTypeListener
argument_list|(
name|unionName
argument_list|,
name|branch
operator|.
name|getIdltype
argument_list|()
argument_list|,
name|typeMap
argument_list|,
name|orb
argument_list|,
name|serviceInfo
argument_list|)
expr_stmt|;
name|currentTypeListener
operator|.
name|setNamespaceContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|content
operator|=
name|currentTypeListener
operator|.
name|getCorbaObject
argument_list|()
expr_stmt|;
operator|(
operator|(
name|CorbaUnionHandler
operator|)
name|handler
operator|)
operator|.
name|setValue
argument_list|(
name|branchName
argument_list|,
name|content
argument_list|)
expr_stmt|;
if|if
condition|(
name|unionType
operator|.
name|isSetNillable
argument_list|()
operator|&&
name|unionType
operator|.
name|isNillable
argument_list|()
condition|)
block|{
name|currentTypeListener
operator|.
name|processStartElement
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QName
name|emptyBranchContentQName
init|=
operator|new
name|QName
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|branchName
argument_list|)
decl_stmt|;
name|content
operator|=
name|CorbaHandlerUtils
operator|.
name|initializeObjectHandler
argument_list|(
name|orb
argument_list|,
name|emptyBranchContentQName
argument_list|,
name|branch
operator|.
name|getIdltype
argument_list|()
argument_list|,
name|typeMap
argument_list|,
name|serviceInfo
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|CorbaUnionHandler
operator|)
name|handler
operator|)
operator|.
name|addCase
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|currentTypeListener
operator|.
name|processStartElement
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processCharacters
parameter_list|(
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|currentTypeListener
operator|!=
literal|null
condition|)
block|{
name|currentTypeListener
operator|.
name|processCharacters
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Nillable primitive cases, you do not get the start element
name|CorbaPrimitiveHandler
name|discObj
init|=
operator|new
name|CorbaPrimitiveHandler
argument_list|(
operator|new
name|QName
argument_list|(
literal|"discriminator"
argument_list|)
argument_list|,
name|unionType
operator|.
name|getDiscriminator
argument_list|()
argument_list|,
name|orb
operator|.
name|get_primitive_tc
argument_list|(
name|TCKind
operator|.
name|from_int
argument_list|(
name|TCKind
operator|.
name|_tk_boolean
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|discObj
operator|.
name|setValue
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CorbaUnionHandler
operator|)
name|handler
operator|)
operator|.
name|setDiscriminator
argument_list|(
name|discObj
argument_list|)
expr_stmt|;
name|CorbaTypeListener
name|typeListener
init|=
name|CorbaHandlerUtils
operator|.
name|getTypeListener
argument_list|(
name|handler
operator|.
name|getName
argument_list|()
argument_list|,
name|branches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIdltype
argument_list|()
argument_list|,
name|typeMap
argument_list|,
name|orb
argument_list|,
name|serviceInfo
argument_list|)
decl_stmt|;
name|typeListener
operator|.
name|setNamespaceContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CorbaUnionHandler
operator|)
name|handler
operator|)
operator|.
name|setValue
argument_list|(
literal|"value"
argument_list|,
name|typeListener
operator|.
name|getCorbaObject
argument_list|()
argument_list|)
expr_stmt|;
name|typeListener
operator|.
name|processCharacters
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processEndElement
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
if|if
condition|(
name|currentTypeListener
operator|!=
literal|null
condition|)
block|{
name|currentTypeListener
operator|.
name|processEndElement
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|determineDescriminatorValue
parameter_list|(
name|Unionbranch
name|branch
parameter_list|)
block|{
name|String
name|descriminatorValue
decl_stmt|;
comment|// Determine the value of the discriminator.
name|List
argument_list|<
name|CaseType
argument_list|>
name|branchCases
init|=
name|branch
operator|.
name|getCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|branchCases
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|CaseType
name|caseLabel
init|=
name|branchCases
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|descriminatorValue
operator|=
name|caseLabel
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// This represents the default case.
name|descriminatorValue
operator|=
operator|(
operator|(
name|CorbaUnionHandler
operator|)
name|handler
operator|)
operator|.
name|createDefaultDiscriminatorLabel
argument_list|()
expr_stmt|;
block|}
return|return
name|descriminatorValue
return|;
block|}
specifier|public
name|void
name|processWriteAttribute
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
literal|"nil"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|CorbaPrimitiveHandler
name|discObj
init|=
operator|new
name|CorbaPrimitiveHandler
argument_list|(
operator|new
name|QName
argument_list|(
literal|"discriminator"
argument_list|)
argument_list|,
name|unionType
operator|.
name|getDiscriminator
argument_list|()
argument_list|,
name|orb
operator|.
name|get_primitive_tc
argument_list|(
name|TCKind
operator|.
name|from_int
argument_list|(
name|TCKind
operator|.
name|_tk_boolean
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|discObj
operator|.
name|setValue
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CorbaUnionHandler
operator|)
name|handler
operator|)
operator|.
name|setDiscriminator
argument_list|(
name|discObj
argument_list|)
expr_stmt|;
name|Unionbranch
name|branch
init|=
name|branches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QName
name|emptyBranchContentQName
init|=
operator|new
name|QName
argument_list|(
name|handler
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|branch
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|CorbaObjectHandler
name|content
init|=
name|CorbaHandlerUtils
operator|.
name|initializeObjectHandler
argument_list|(
name|orb
argument_list|,
name|emptyBranchContentQName
argument_list|,
name|branch
operator|.
name|getIdltype
argument_list|()
argument_list|,
name|typeMap
argument_list|,
name|serviceInfo
argument_list|)
decl_stmt|;
operator|(
operator|(
name|CorbaUnionHandler
operator|)
name|handler
operator|)
operator|.
name|addCase
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentTypeListener
operator|!=
literal|null
condition|)
block|{
name|currentTypeListener
operator|.
name|processWriteAttribute
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processWriteNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespaceURI
parameter_list|)
block|{
if|if
condition|(
name|currentTypeListener
operator|!=
literal|null
condition|)
block|{
name|currentTypeListener
operator|.
name|processWriteNamespace
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

