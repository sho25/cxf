begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLEventFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaUnionEventProducer
extends|extends
name|AbstractStartEndEventProducer
block|{
specifier|static
specifier|final
name|List
argument_list|<
name|Attribute
argument_list|>
name|IS_NIL_ATTRIBUTE_LIST
init|=
operator|new
name|ArrayList
argument_list|<
name|Attribute
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|XMLEventFactory
name|factory
init|=
name|XMLEventFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|IS_NIL_ATTRIBUTE_LIST
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://www.w3.org/2001/XMLSchema-instance"
argument_list|,
literal|"nil"
argument_list|)
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|boolean
name|isNil
decl_stmt|;
specifier|public
name|CorbaUnionEventProducer
parameter_list|(
name|CorbaObjectHandler
name|h
parameter_list|,
name|ServiceInfo
name|sInfo
parameter_list|,
name|ORB
name|o
parameter_list|)
block|{
name|CorbaUnionHandler
name|handler
init|=
operator|(
name|CorbaUnionHandler
operator|)
name|h
decl_stmt|;
name|serviceInfo
operator|=
name|sInfo
expr_stmt|;
name|orb
operator|=
name|o
expr_stmt|;
name|name
operator|=
name|handler
operator|.
name|getName
argument_list|()
expr_stmt|;
name|isNil
operator|=
name|checkIsNil
argument_list|(
name|handler
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isNil
condition|)
block|{
name|CorbaObjectHandler
name|contents
init|=
name|handler
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|contents
operator|!=
literal|null
condition|)
block|{
name|Union
name|unionType
init|=
operator|(
name|Union
operator|)
name|handler
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|unionType
operator|.
name|isSetNillable
argument_list|()
operator|&&
name|unionType
operator|.
name|isNillable
argument_list|()
condition|)
block|{
name|CorbaTypeEventProducer
name|contentEventProducer
init|=
name|CorbaHandlerUtils
operator|.
name|getTypeEventProducer
argument_list|(
name|contents
argument_list|,
name|serviceInfo
argument_list|,
name|orb
argument_list|)
decl_stmt|;
name|currentEventProducer
operator|=
operator|new
name|SkipStartEndEventProducer
argument_list|(
name|contentEventProducer
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|CorbaObjectHandler
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|CorbaObjectHandler
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|list
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|handler
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
name|handler
operator|.
name|getIdlType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"_f"
argument_list|)
condition|)
block|{
name|state
operator|=
name|states
operator|.
name|length
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|checkIsNil
parameter_list|(
name|CorbaUnionHandler
name|handler
parameter_list|)
block|{
name|boolean
name|isItNil
init|=
literal|false
decl_stmt|;
name|Union
name|unionType
init|=
operator|(
name|Union
operator|)
name|handler
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|unionType
operator|.
name|isSetNillable
argument_list|()
operator|&&
name|unionType
operator|.
name|isNillable
argument_list|()
condition|)
block|{
name|CorbaPrimitiveHandler
name|descHandler
init|=
operator|(
name|CorbaPrimitiveHandler
operator|)
name|handler
operator|.
name|getDiscriminator
argument_list|()
decl_stmt|;
name|Boolean
name|descValue
init|=
operator|(
name|Boolean
operator|)
name|descHandler
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|Boolean
operator|)
name|descValue
operator|)
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|isItNil
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|isItNil
return|;
block|}
specifier|public
name|List
argument_list|<
name|Attribute
argument_list|>
name|getAttributes
parameter_list|()
block|{
name|List
argument_list|<
name|Attribute
argument_list|>
name|attributes
init|=
name|IS_NIL_ATTRIBUTE_LIST
decl_stmt|;
if|if
condition|(
operator|!
name|isNil
condition|)
block|{
name|attributes
operator|=
name|super
operator|.
name|getAttributes
argument_list|()
expr_stmt|;
block|}
return|return
name|attributes
return|;
block|}
block|}
end_class

end_unit

