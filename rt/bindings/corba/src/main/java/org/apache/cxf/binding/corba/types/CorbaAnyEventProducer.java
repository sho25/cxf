begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLEventFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|runtime
operator|.
name|CorbaObjectReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|CorbaAnyHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|CorbaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|W3CConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Any
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TCKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TypeCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|InputStream
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaAnyEventProducer
extends|extends
name|AbstractStartEndEventProducer
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ANY_TYPE_PREFIX
init|=
literal|"anytypens"
decl_stmt|;
specifier|private
name|CorbaAnyHandler
name|handler
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Namespace
argument_list|>
name|namespaces
decl_stmt|;
specifier|private
name|CorbaObjectHandler
name|containedType
decl_stmt|;
specifier|public
name|CorbaAnyEventProducer
parameter_list|(
name|CorbaObjectHandler
name|h
parameter_list|,
name|ServiceInfo
name|info
parameter_list|,
name|ORB
name|orbRef
parameter_list|)
block|{
name|handler
operator|=
operator|(
name|CorbaAnyHandler
operator|)
name|h
expr_stmt|;
name|name
operator|=
name|handler
operator|.
name|getName
argument_list|()
expr_stmt|;
name|orb
operator|=
name|orbRef
expr_stmt|;
name|serviceInfo
operator|=
name|info
expr_stmt|;
name|containedType
operator|=
name|getAnyContainedType
argument_list|(
name|handler
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|setAnyContainedType
argument_list|(
name|containedType
argument_list|)
expr_stmt|;
if|if
condition|(
name|containedType
operator|!=
literal|null
condition|)
block|{
name|QName
name|containedSchemaType
init|=
name|convertIdlToSchemaType
argument_list|(
name|containedType
argument_list|)
decl_stmt|;
name|XMLEventFactory
name|factory
init|=
name|XMLEventFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|attributes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Attribute
argument_list|>
argument_list|()
expr_stmt|;
name|attributes
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
operator|new
name|QName
argument_list|(
name|W3CConstants
operator|.
name|NU_SCHEMA_XSI
argument_list|,
literal|"type"
argument_list|)
argument_list|,
name|ANY_TYPE_PREFIX
operator|+
literal|":"
operator|+
name|containedSchemaType
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|namespaces
operator|=
operator|new
name|ArrayList
argument_list|<
name|Namespace
argument_list|>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createNamespace
argument_list|(
name|ANY_TYPE_PREFIX
argument_list|,
name|containedSchemaType
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CorbaTypeEventProducer
name|containedProducer
init|=
name|CorbaHandlerUtils
operator|.
name|getTypeEventProducer
argument_list|(
name|containedType
argument_list|,
name|serviceInfo
argument_list|,
name|orb
argument_list|)
decl_stmt|;
if|if
condition|(
name|containedProducer
operator|instanceof
name|AbstractStartEndEventProducer
condition|)
block|{
name|iterator
operator|=
operator|(
operator|(
name|AbstractStartEndEventProducer
operator|)
name|containedProducer
operator|)
operator|.
name|getNestedTypes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|CorbaTypeEventProducer
argument_list|>
name|prods
init|=
operator|new
name|ArrayList
argument_list|<
name|CorbaTypeEventProducer
argument_list|>
argument_list|()
decl_stmt|;
name|CorbaSimpleAnyContainedTypeEventProducer
name|simpleProducer
init|=
operator|new
name|CorbaSimpleAnyContainedTypeEventProducer
argument_list|(
name|containedProducer
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|prods
operator|.
name|add
argument_list|(
name|simpleProducer
argument_list|)
expr_stmt|;
name|producers
operator|=
name|prods
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Attribute
argument_list|>
name|getAttributes
parameter_list|()
block|{
comment|// We should only add attributes if we are asked for the any types attributes.  This will be
comment|// the case when the current event producer is null.  Otherwise, we are handling the
comment|// contained type and we CAN'T have the anys attributes used (It causes big problems)
if|if
condition|(
name|currentEventProducer
operator|==
literal|null
condition|)
block|{
return|return
name|attributes
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Namespace
argument_list|>
name|getNamespaces
parameter_list|()
block|{
return|return
name|namespaces
return|;
block|}
specifier|private
name|CorbaObjectHandler
name|getAnyContainedType
parameter_list|(
name|Any
name|a
parameter_list|)
block|{
name|CorbaObjectHandler
name|result
init|=
literal|null
decl_stmt|;
name|TypeCode
name|tc
init|=
name|a
operator|.
name|type
argument_list|()
decl_stmt|;
name|QName
name|containedName
init|=
operator|new
name|QName
argument_list|(
literal|"AnyContainedType"
argument_list|)
decl_stmt|;
name|QName
name|idlType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|CorbaUtils
operator|.
name|isPrimitiveTypeCode
argument_list|(
name|tc
argument_list|)
condition|)
block|{
name|idlType
operator|=
name|CorbaAnyHelper
operator|.
name|getPrimitiveIdlTypeFromTypeCode
argument_list|(
name|tc
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|CorbaPrimitiveHandler
argument_list|(
name|containedName
argument_list|,
name|idlType
argument_list|,
name|tc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tc
operator|.
name|kind
argument_list|()
operator|.
name|value
argument_list|()
operator|==
name|TCKind
operator|.
name|_tk_any
condition|)
block|{
name|idlType
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_ANY
expr_stmt|;
name|result
operator|=
operator|new
name|CorbaAnyHandler
argument_list|(
name|containedName
argument_list|,
name|idlType
argument_list|,
name|tc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CorbaAnyHandler
operator|)
name|result
operator|)
operator|.
name|setTypeMap
argument_list|(
name|handler
operator|.
name|getTypeMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|idlType
operator|=
name|handler
operator|.
name|getTypeMap
argument_list|()
operator|.
name|getIdlType
argument_list|(
name|tc
argument_list|)
expr_stmt|;
name|result
operator|=
name|CorbaHandlerUtils
operator|.
name|initializeObjectHandler
argument_list|(
name|orb
argument_list|,
name|containedName
argument_list|,
name|idlType
argument_list|,
name|handler
operator|.
name|getTypeMap
argument_list|()
argument_list|,
name|serviceInfo
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|is
init|=
name|a
operator|.
name|create_input_stream
argument_list|()
decl_stmt|;
name|CorbaObjectReader
name|reader
init|=
operator|new
name|CorbaObjectReader
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|reader
operator|.
name|read
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|QName
name|convertIdlToSchemaType
parameter_list|(
name|CorbaObjectHandler
name|obj
parameter_list|)
block|{
name|QName
name|idlType
init|=
name|obj
operator|.
name|getIdlType
argument_list|()
decl_stmt|;
name|QName
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|CorbaAnyHelper
operator|.
name|isPrimitiveIdlType
argument_list|(
name|idlType
argument_list|)
condition|)
block|{
name|result
operator|=
name|CorbaAnyHelper
operator|.
name|convertPrimitiveIdlToSchemaType
argument_list|(
name|obj
operator|.
name|getIdlType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CorbaType
name|impl
init|=
name|obj
operator|.
name|getType
argument_list|()
decl_stmt|;
name|result
operator|=
name|impl
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
class|class
name|CorbaSimpleAnyContainedTypeEventProducer
implements|implements
name|CorbaTypeEventProducer
block|{
name|int
name|state
decl_stmt|;
name|int
index|[]
name|states
init|=
block|{
name|XMLStreamReader
operator|.
name|CHARACTERS
block|}
decl_stmt|;
name|String
name|value
decl_stmt|;
name|CorbaSimpleAnyContainedTypeEventProducer
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|value
operator|=
name|text
expr_stmt|;
name|state
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|int
name|next
parameter_list|()
block|{
return|return
name|states
index|[
name|state
operator|++
index|]
return|;
block|}
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|state
operator|<
name|states
operator|.
name|length
return|;
block|}
specifier|public
name|List
argument_list|<
name|Attribute
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|Namespace
argument_list|>
name|getNamespaces
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

