begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaPrimitiveHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|CorbaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|OrbConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|RaisesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|TypeMappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ContextList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ExceptionList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|NVList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|NamedValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TCKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TypeCode
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaConduitTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
name|IMocksControl
name|control
decl_stmt|;
specifier|private
specifier|static
name|ORB
name|orb
decl_stmt|;
specifier|private
specifier|static
name|Bus
name|bus
decl_stmt|;
specifier|protected
name|EndpointInfo
name|endpointInfo
decl_stmt|;
specifier|protected
name|EndpointReferenceType
name|target
decl_stmt|;
specifier|protected
name|MessageObserver
name|observer
decl_stmt|;
name|Message
name|inMessage
decl_stmt|;
name|CorbaBindingFactory
name|factory
decl_stmt|;
name|OrbConfig
name|orbConfig
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|bus
operator|=
name|BusFactory
operator|.
name|getDefaultBus
argument_list|()
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|Properties
name|props
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"yoko.orb.id"
argument_list|,
literal|"CXF-CORBA-Server-Binding"
argument_list|)
expr_stmt|;
name|orb
operator|=
name|ORB
operator|.
name|init
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|orbConfig
operator|=
operator|new
name|OrbConfig
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|orb
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|orb
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Do nothing.  Throw an Exception?
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCorbaConduit
parameter_list|()
throws|throws
name|Exception
block|{
name|CorbaConduit
name|conduit
init|=
name|setupCorbaConduit
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"conduit should not be null"
argument_list|,
name|conduit
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepare
parameter_list|()
throws|throws
name|Exception
block|{
name|setupServiceInfo
argument_list|(
literal|"http://cxf.apache.org/bindings/corba/simple"
argument_list|,
literal|"/wsdl_corbabinding/simpleIdl.wsdl"
argument_list|,
literal|"SimpleCORBAService"
argument_list|,
literal|"SimpleCORBAPort"
argument_list|)
expr_stmt|;
name|CorbaDestination
name|destination
init|=
operator|new
name|CorbaDestination
argument_list|(
name|endpointInfo
argument_list|,
name|orbConfig
argument_list|)
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM"
argument_list|)
condition|)
block|{
comment|//IBM requires it to activate to resolve it, but cannot
comment|//activate on sun without more config
name|destination
operator|.
name|activate
argument_list|()
expr_stmt|;
block|}
name|CorbaConduit
name|conduit
init|=
operator|new
name|CorbaConduit
argument_list|(
name|endpointInfo
argument_list|,
name|destination
operator|.
name|getAddress
argument_list|()
argument_list|,
name|orbConfig
argument_list|)
decl_stmt|;
name|CorbaMessage
name|message
init|=
operator|new
name|CorbaMessage
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|conduit
operator|.
name|prepare
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|OutputStream
name|os
init|=
name|message
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"OutputStream should not be null"
argument_list|,
name|os
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|ORB
name|orb2
init|=
operator|(
name|ORB
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"orb"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Orb should not be null"
argument_list|,
name|orb2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|message
operator|.
name|get
argument_list|(
literal|"endpoint"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"EndpointReferenceType should not be null"
argument_list|,
name|obj
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTargetReference
parameter_list|()
throws|throws
name|Exception
block|{
name|setupServiceInfo
argument_list|(
literal|"http://cxf.apache.org/bindings/corba/simple"
argument_list|,
literal|"/wsdl_corbabinding/simpleIdl.wsdl"
argument_list|,
literal|"SimpleCORBAService"
argument_list|,
literal|"SimpleCORBAPort"
argument_list|)
expr_stmt|;
name|CorbaDestination
name|destination
init|=
operator|new
name|CorbaDestination
argument_list|(
name|endpointInfo
argument_list|,
name|orbConfig
argument_list|)
decl_stmt|;
name|CorbaConduit
name|conduit
init|=
operator|new
name|CorbaConduit
argument_list|(
name|endpointInfo
argument_list|,
name|destination
operator|.
name|getAddress
argument_list|()
argument_list|,
name|orbConfig
argument_list|)
decl_stmt|;
name|EndpointReferenceType
name|t
init|=
literal|null
decl_stmt|;
name|EndpointReferenceType
name|ref
init|=
name|conduit
operator|.
name|getTargetReference
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"ref should not be null"
argument_list|,
name|ref
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAddress
parameter_list|()
throws|throws
name|Exception
block|{
name|setupServiceInfo
argument_list|(
literal|"http://cxf.apache.org/bindings/corba/simple"
argument_list|,
literal|"/wsdl_corbabinding/simpleIdl.wsdl"
argument_list|,
literal|"SimpleCORBAService"
argument_list|,
literal|"SimpleCORBAPort"
argument_list|)
expr_stmt|;
name|CorbaDestination
name|destination
init|=
operator|new
name|CorbaDestination
argument_list|(
name|endpointInfo
argument_list|,
name|orbConfig
argument_list|)
decl_stmt|;
name|endpointInfo
operator|.
name|setAddress
argument_list|(
literal|"corbaloc::localhost:40000/Simple"
argument_list|)
expr_stmt|;
name|CorbaConduit
name|conduit
init|=
operator|new
name|CorbaConduit
argument_list|(
name|endpointInfo
argument_list|,
name|destination
operator|.
name|getAddress
argument_list|()
argument_list|,
name|orbConfig
argument_list|)
decl_stmt|;
name|String
name|address
init|=
name|conduit
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"address should not be null"
argument_list|,
name|address
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|address
argument_list|,
literal|"corbaloc::localhost:40000/Simple"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClose
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m
init|=
name|CorbaConduit
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"buildRequest"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|CorbaMessage
operator|.
name|class
block|,
name|OperationType
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|CorbaConduit
name|conduit
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|CorbaConduit
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
name|m
argument_list|)
operator|.
name|createMock
argument_list|()
decl_stmt|;
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|obj
init|=
name|control
operator|.
name|createMock
argument_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|CorbaMessage
name|msg
init|=
name|control
operator|.
name|createMock
argument_list|(
name|CorbaMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|get
argument_list|(
name|CorbaConstants
operator|.
name|CORBA_ENDPOINT_OBJECT
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|Exchange
name|exg
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exg
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|bopInfo
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exg
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bopInfo
argument_list|)
expr_stmt|;
name|OperationType
name|opType
init|=
name|control
operator|.
name|createMock
argument_list|(
name|OperationType
operator|.
name|class
argument_list|)
decl_stmt|;
name|bopInfo
operator|.
name|getExtensor
argument_list|(
name|OperationType
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|opType
argument_list|)
expr_stmt|;
name|conduit
operator|.
name|buildRequest
argument_list|(
name|msg
argument_list|,
name|opType
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|OutputStream
name|os
init|=
name|control
operator|.
name|createMock
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|conduit
operator|.
name|close
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTarget
parameter_list|()
throws|throws
name|Exception
block|{
name|CorbaConduit
name|conduit
init|=
name|setupCorbaConduit
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|EndpointReferenceType
name|endpoint
init|=
name|conduit
operator|.
name|getTarget
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"EndpointReferenceType should not be null"
argument_list|,
name|endpoint
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetOperationExceptions
parameter_list|()
block|{
name|CorbaConduit
name|conduit
init|=
name|control
operator|.
name|createMock
argument_list|(
name|CorbaConduit
operator|.
name|class
argument_list|)
decl_stmt|;
name|OperationType
name|opType
init|=
name|control
operator|.
name|createMock
argument_list|(
name|OperationType
operator|.
name|class
argument_list|)
decl_stmt|;
name|CorbaTypeMap
name|typeMap
init|=
name|control
operator|.
name|createMock
argument_list|(
name|CorbaTypeMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RaisesType
argument_list|>
name|exlist
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|control
operator|.
name|createMock
argument_list|(
name|ArrayList
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|opType
operator|.
name|getRaises
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|exlist
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exlist
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|RaisesType
name|rType
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RaisesType
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exlist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rType
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|conduit
operator|.
name|getOperationExceptions
argument_list|(
name|opType
argument_list|,
name|typeMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exlist
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|CorbaConduit
name|conduit
init|=
name|setupCorbaConduit
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|CorbaMessage
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|CorbaMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|ServiceInfo
name|service
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CorbaTypeMap
argument_list|>
name|list
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|control
operator|.
name|createMock
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|CorbaTypeMap
name|typeMap
init|=
name|control
operator|.
name|createMock
argument_list|(
name|CorbaTypeMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|service
operator|.
name|getExtensors
argument_list|(
name|CorbaTypeMap
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|OperationType
name|opType
init|=
name|control
operator|.
name|createMock
argument_list|(
name|OperationType
operator|.
name|class
argument_list|)
decl_stmt|;
name|conduit
operator|.
name|getArguments
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|conduit
operator|.
name|getReturn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|conduit
operator|.
name|getExceptionList
argument_list|(
name|conduit
operator|.
name|getOperationExceptions
argument_list|(
name|opType
argument_list|,
name|typeMap
argument_list|)
argument_list|,
name|message
argument_list|,
name|opType
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|conduit
operator|.
name|getRequest
argument_list|(
name|message
argument_list|,
literal|"Hello"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildArguments
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|CorbaMessage
name|message
init|=
operator|new
name|CorbaMessage
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|CorbaStreamable
index|[]
name|arguments
init|=
operator|new
name|CorbaStreamable
index|[
literal|1
index|]
decl_stmt|;
name|QName
name|objName
init|=
operator|new
name|QName
argument_list|(
literal|"object"
argument_list|)
decl_stmt|;
name|QName
name|objIdlType
init|=
operator|new
name|QName
argument_list|(
name|CorbaConstants
operator|.
name|NU_WSDL_CORBA
argument_list|,
literal|"short"
argument_list|,
name|CorbaConstants
operator|.
name|NP_WSDL_CORBA
argument_list|)
decl_stmt|;
name|TypeCode
name|objTypeCode
init|=
name|orb
operator|.
name|get_primitive_tc
argument_list|(
name|TCKind
operator|.
name|tk_short
argument_list|)
decl_stmt|;
name|CorbaPrimitiveHandler
name|obj1
init|=
operator|new
name|CorbaPrimitiveHandler
argument_list|(
name|objName
argument_list|,
name|objIdlType
argument_list|,
name|objTypeCode
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CorbaStreamable
name|arg
init|=
name|message
operator|.
name|createStreamableObject
argument_list|(
name|obj1
argument_list|,
name|objName
argument_list|)
decl_stmt|;
name|arguments
index|[
literal|0
index|]
operator|=
name|arg
expr_stmt|;
name|arguments
index|[
literal|0
index|]
operator|.
name|setMode
argument_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ARG_OUT
operator|.
name|value
argument_list|)
expr_stmt|;
name|CorbaConduit
name|conduit
init|=
name|setupCorbaConduit
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|NVList
name|list
init|=
name|conduit
operator|.
name|getArguments
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"list should not be null"
argument_list|,
name|list
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|message
operator|.
name|setStreamableArguments
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|NVList
name|listArgs
init|=
name|conduit
operator|.
name|getArguments
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"listArgs should not be null"
argument_list|,
name|listArgs
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"listArgs Item should not be null"
argument_list|,
name|listArgs
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Name should be equal"
argument_list|,
name|listArgs
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
literal|"object"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"flags should be 2"
argument_list|,
name|listArgs
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|flags
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Any Value should not be null"
argument_list|,
name|listArgs
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|CorbaMessage
name|message
init|=
operator|new
name|CorbaMessage
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|QName
name|objName
init|=
operator|new
name|QName
argument_list|(
literal|"returnName"
argument_list|)
decl_stmt|;
name|QName
name|objIdlType
init|=
operator|new
name|QName
argument_list|(
name|CorbaConstants
operator|.
name|NU_WSDL_CORBA
argument_list|,
literal|"short"
argument_list|,
name|CorbaConstants
operator|.
name|NP_WSDL_CORBA
argument_list|)
decl_stmt|;
name|TypeCode
name|objTypeCode
init|=
name|orb
operator|.
name|get_primitive_tc
argument_list|(
name|TCKind
operator|.
name|tk_short
argument_list|)
decl_stmt|;
name|CorbaPrimitiveHandler
name|obj1
init|=
operator|new
name|CorbaPrimitiveHandler
argument_list|(
name|objName
argument_list|,
name|objIdlType
argument_list|,
name|objTypeCode
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CorbaStreamable
name|arg
init|=
name|message
operator|.
name|createStreamableObject
argument_list|(
name|obj1
argument_list|,
name|objName
argument_list|)
decl_stmt|;
name|CorbaConduit
name|conduit
init|=
name|setupCorbaConduit
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|NamedValue
name|ret
init|=
name|conduit
operator|.
name|getReturn
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Return should not be null"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name should be equal"
argument_list|,
name|ret
operator|.
name|name
argument_list|()
argument_list|,
literal|"return"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setStreamableReturn
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|NamedValue
name|ret2
init|=
name|conduit
operator|.
name|getReturn
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Return2 should not be null"
argument_list|,
name|ret2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name should be equal"
argument_list|,
name|ret2
operator|.
name|name
argument_list|()
argument_list|,
literal|"returnName"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildExceptionListEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|CorbaConduit
name|conduit
init|=
name|setupCorbaConduit
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Message
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|CorbaMessage
name|message
init|=
operator|new
name|CorbaMessage
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|OperationType
name|opType
init|=
operator|new
name|OperationType
argument_list|()
decl_stmt|;
name|opType
operator|.
name|setName
argument_list|(
literal|"review_data"
argument_list|)
expr_stmt|;
name|ExceptionList
name|exList
init|=
name|conduit
operator|.
name|getExceptionList
argument_list|(
name|conduit
operator|.
name|getOperationExceptions
argument_list|(
name|opType
argument_list|,
literal|null
argument_list|)
argument_list|,
name|message
argument_list|,
name|opType
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ExcepitonList is not null"
argument_list|,
name|exList
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The list should be empty"
argument_list|,
name|exList
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildExceptionListWithExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|CorbaConduit
name|conduit
init|=
name|setupCorbaConduit
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Message
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|CorbaMessage
name|message
init|=
operator|new
name|CorbaMessage
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|TestUtils
name|testUtils
init|=
operator|new
name|TestUtils
argument_list|()
decl_stmt|;
name|CorbaDestination
name|destination
init|=
name|testUtils
operator|.
name|getExceptionTypesTestDestination
argument_list|()
decl_stmt|;
name|EndpointInfo
name|endpointInfo2
init|=
name|destination
operator|.
name|getEndPointInfo
argument_list|()
decl_stmt|;
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.apache.org/idl/except"
argument_list|,
literal|"review_data"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|bInfo
init|=
name|destination
operator|.
name|getBindingInfo
argument_list|()
operator|.
name|getOperation
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|OperationType
name|opType
init|=
name|bInfo
operator|.
name|getExtensor
argument_list|(
name|OperationType
operator|.
name|class
argument_list|)
decl_stmt|;
name|CorbaTypeMap
name|typeMap
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|TypeMappingType
argument_list|>
name|corbaTypes
init|=
name|endpointInfo2
operator|.
name|getService
argument_list|()
operator|.
name|getDescription
argument_list|()
operator|.
name|getExtensors
argument_list|(
name|TypeMappingType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|corbaTypes
operator|!=
literal|null
condition|)
block|{
name|typeMap
operator|=
name|CorbaUtils
operator|.
name|createCorbaTypeMap
argument_list|(
name|corbaTypes
argument_list|)
expr_stmt|;
block|}
name|ExceptionList
name|exList
init|=
name|conduit
operator|.
name|getExceptionList
argument_list|(
name|conduit
operator|.
name|getOperationExceptions
argument_list|(
name|opType
argument_list|,
name|typeMap
argument_list|)
argument_list|,
name|message
argument_list|,
name|opType
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ExceptionList is not null"
argument_list|,
name|exList
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"TypeCode is not null"
argument_list|,
name|exList
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID should be equal"
argument_list|,
name|exList
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|id
argument_list|()
argument_list|,
literal|"IDL:BadRecord:1.0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID should be equal"
argument_list|,
name|exList
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
literal|"BadRecord"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID should be equal"
argument_list|,
name|exList
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|member_count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ID should be equal"
argument_list|,
name|exList
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|member_name
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"reason"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Member type is not null"
argument_list|,
name|exList
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|member_type
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvoke
parameter_list|()
throws|throws
name|Exception
block|{
name|CorbaConduit
name|conduit
init|=
name|setupCorbaConduit
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|//CorbaMessage message = new CorbaMessage(msg);
name|CorbaMessage
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|CorbaMessage
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/*String opName = "GreetMe";         NVList nvlist = (NVList)orb.create_list(0);                  Request request = conduit.getRequest(message, "GreetMe", nvlist, null, null);         request.invoke();         */
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|obj
init|=
name|control
operator|.
name|createMock
argument_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|CorbaConstants
operator|.
name|CORBA_ENDPOINT_OBJECT
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|obj
argument_list|)
expr_stmt|;
comment|//msg.put(CorbaConstants.CORBA_ENDPOINT_OBJECT, obj);
name|Request
name|r
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Request
operator|.
name|class
argument_list|)
decl_stmt|;
name|NVList
name|nvList
init|=
name|orb
operator|.
name|create_list
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NamedValue
name|ret
init|=
name|control
operator|.
name|createMock
argument_list|(
name|NamedValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExceptionList
name|exList
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ExceptionList
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|obj
operator|.
name|_create_request
argument_list|(
operator|(
name|Context
operator|)
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
literal|"greetMe"
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|NVList
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|NamedValue
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|ExceptionList
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|ContextList
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|r
operator|.
name|invoke
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Request
name|request
init|=
name|conduit
operator|.
name|getRequest
argument_list|(
name|message
argument_list|,
literal|"greetMe"
argument_list|,
name|nvList
argument_list|,
name|ret
argument_list|,
name|exList
argument_list|)
decl_stmt|;
name|request
operator|.
name|invoke
argument_list|()
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
comment|/* try {                 ContextList ctxList = orb.create_context_list();                 Context ctx = orb.get_default_context();                 org.omg.CORBA.Object targetObj = (org.omg.CORBA.Object)message                     .get(CorbaConstants.CORBA_ENDPOINT_OBJECT);                 Request request = targetObj._create_request(ctx, opName, list, ret, exList, ctxList);                 request.invoke();              } catch (java.lang.Exception ex) {                 ex.printStackTrace();             }*/
block|}
specifier|protected
name|CorbaConduit
name|setupCorbaConduit
parameter_list|(
name|boolean
name|send
parameter_list|)
block|{
name|target
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|EndpointReferenceType
operator|.
name|class
argument_list|)
expr_stmt|;
name|endpointInfo
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|CorbaConduit
name|corbaConduit
init|=
operator|new
name|CorbaConduit
argument_list|(
name|endpointInfo
argument_list|,
name|target
argument_list|,
name|orbConfig
argument_list|)
decl_stmt|;
if|if
condition|(
name|send
condition|)
block|{
comment|// setMessageObserver
name|observer
operator|=
operator|new
name|MessageObserver
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|inMessage
operator|=
name|m
expr_stmt|;
block|}
block|}
expr_stmt|;
name|corbaConduit
operator|.
name|setMessageObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
return|return
name|corbaConduit
return|;
block|}
specifier|protected
name|void
name|setupServiceInfo
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|wsdl
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|String
name|portName
parameter_list|)
block|{
name|URL
name|wsdlUrl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|wsdl
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdlUrl
argument_list|)
expr_stmt|;
name|WSDLServiceFactory
name|f
init|=
operator|new
name|WSDLServiceFactory
argument_list|(
name|bus
argument_list|,
name|wsdlUrl
argument_list|,
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|serviceName
argument_list|)
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|f
operator|.
name|create
argument_list|()
decl_stmt|;
name|endpointInfo
operator|=
name|service
operator|.
name|getEndpointInfo
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|portName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

