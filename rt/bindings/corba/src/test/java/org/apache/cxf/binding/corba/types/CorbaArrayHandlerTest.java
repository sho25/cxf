begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TCKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TypeCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaArrayHandlerTest
extends|extends
name|Assert
block|{
specifier|private
name|ORB
name|orb
decl_stmt|;
specifier|private
name|CorbaArrayHandler
name|obj
decl_stmt|;
specifier|private
name|QName
name|objName
decl_stmt|;
specifier|private
name|QName
name|objIdlType
decl_stmt|;
specifier|private
name|TypeCode
name|objTypeCode
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|java
operator|.
name|util
operator|.
name|Properties
name|props
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"yoko.orb.id"
argument_list|,
literal|"CXF-CORBA-Server-Binding"
argument_list|)
expr_stmt|;
name|orb
operator|=
name|ORB
operator|.
name|init
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|obj
operator|=
literal|null
expr_stmt|;
name|objName
operator|=
literal|null
expr_stmt|;
name|objIdlType
operator|=
literal|null
expr_stmt|;
name|objTypeCode
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|orb
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|orb
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Do nothing.  Throw an Exception?
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArrayHandler
parameter_list|()
block|{
name|objName
operator|=
operator|new
name|QName
argument_list|(
literal|"object"
argument_list|)
expr_stmt|;
name|objIdlType
operator|=
operator|new
name|QName
argument_list|(
name|CorbaConstants
operator|.
name|NU_WSDL_CORBA
argument_list|,
literal|"arrayType"
argument_list|,
name|CorbaConstants
operator|.
name|NP_WSDL_CORBA
argument_list|)
expr_stmt|;
name|objTypeCode
operator|=
name|orb
operator|.
name|create_array_tc
argument_list|(
literal|5
argument_list|,
name|orb
operator|.
name|get_primitive_tc
argument_list|(
name|TCKind
operator|.
name|tk_long
argument_list|)
argument_list|)
expr_stmt|;
name|Array
name|arrayType
init|=
operator|new
name|Array
argument_list|()
decl_stmt|;
name|arrayType
operator|.
name|setName
argument_list|(
literal|"arrayType"
argument_list|)
expr_stmt|;
name|arrayType
operator|.
name|setElemtype
argument_list|(
name|CorbaConstants
operator|.
name|NT_CORBA_LONG
argument_list|)
expr_stmt|;
name|arrayType
operator|.
name|setBound
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|arrayType
operator|.
name|setRepositoryID
argument_list|(
literal|"IDL:ArrayType:1.0"
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|CorbaArrayHandler
argument_list|(
name|objName
argument_list|,
name|objIdlType
argument_list|,
name|objTypeCode
argument_list|,
name|arrayType
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|int
name|arrayData
index|[]
init|=
block|{
literal|2
block|,
literal|4
block|,
literal|6
block|,
literal|8
block|,
literal|10
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arrayData
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|QName
name|elName
init|=
operator|new
name|QName
argument_list|(
literal|"item"
argument_list|)
decl_stmt|;
name|QName
name|elIdlType
init|=
name|CorbaConstants
operator|.
name|NT_CORBA_LONG
decl_stmt|;
name|TypeCode
name|elTC
init|=
name|orb
operator|.
name|get_primitive_tc
argument_list|(
name|TCKind
operator|.
name|tk_long
argument_list|)
decl_stmt|;
name|CorbaPrimitiveHandler
name|el
init|=
operator|new
name|CorbaPrimitiveHandler
argument_list|(
name|elName
argument_list|,
name|elIdlType
argument_list|,
name|elTC
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|el
operator|.
name|setValue
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|arrayData
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|.
name|addElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
name|QName
name|nameResult
init|=
name|obj
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|nameResult
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|objName
operator|.
name|equals
argument_list|(
name|nameResult
argument_list|)
argument_list|)
expr_stmt|;
name|QName
name|idlTypeResult
init|=
name|obj
operator|.
name|getIdlType
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|idlTypeResult
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|idlTypeResult
operator|.
name|equals
argument_list|(
name|objIdlType
argument_list|)
argument_list|)
expr_stmt|;
name|TypeCode
name|tcResult
init|=
name|obj
operator|.
name|getTypeCode
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|tcResult
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tcResult
operator|.
name|kind
argument_list|()
operator|.
name|value
argument_list|()
operator|==
name|objTypeCode
operator|.
name|kind
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|objDefResult
init|=
name|obj
operator|.
name|getType
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|objDefResult
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|objDefResult
operator|instanceof
name|Array
argument_list|)
expr_stmt|;
name|int
name|countResult
init|=
name|obj
operator|.
name|getNumberOfElements
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|countResult
condition|;
operator|++
name|i
control|)
block|{
name|CorbaObjectHandler
name|elResult
init|=
name|obj
operator|.
name|getElement
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|elResult
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

