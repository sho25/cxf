begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|runtime
operator|.
name|CorbaStreamableImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaPrimitiveHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|utils
operator|.
name|OrbConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Any
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|NVList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ServerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TCKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TypeCode
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaServerConduitTest
extends|extends
name|Assert
block|{
specifier|protected
name|EndpointInfo
name|endpointInfo
decl_stmt|;
specifier|protected
name|EndpointReferenceType
name|target
decl_stmt|;
specifier|protected
name|MessageObserver
name|observer
decl_stmt|;
name|IMocksControl
name|control
decl_stmt|;
name|ORB
name|orb
decl_stmt|;
name|Bus
name|bus
decl_stmt|;
name|Message
name|inMessage
decl_stmt|;
name|CorbaBindingFactory
name|factory
decl_stmt|;
name|TestUtils
name|testUtils
decl_stmt|;
name|OrbConfig
name|orbConfig
decl_stmt|;
name|CorbaTypeMap
name|corbaTypeMap
decl_stmt|;
specifier|private
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|targetObject
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|bus
operator|=
name|BusFactory
operator|.
name|getDefaultBus
argument_list|()
expr_stmt|;
name|java
operator|.
name|util
operator|.
name|Properties
name|props
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"yoko.orb.id"
argument_list|,
literal|"CXF-CORBA-Server-Binding"
argument_list|)
expr_stmt|;
name|orb
operator|=
name|ORB
operator|.
name|init
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|orbConfig
operator|=
operator|new
name|OrbConfig
argument_list|()
expr_stmt|;
name|targetObject
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|orb
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|orb
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Do nothing.  Throw an Exception?
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCorbaServerConduit
parameter_list|()
throws|throws
name|Exception
block|{
name|CorbaServerConduit
name|conduit
init|=
name|setupCorbaServerConduit
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"conduit should not be null"
argument_list|,
name|conduit
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepare
parameter_list|()
throws|throws
name|Exception
block|{
name|setupServiceInfo
argument_list|(
literal|"http://cxf.apache.org/bindings/corba/simple"
argument_list|,
literal|"/wsdl_corbabinding/simpleIdl.wsdl"
argument_list|,
literal|"SimpleCORBAService"
argument_list|,
literal|"SimpleCORBAPort"
argument_list|)
expr_stmt|;
name|CorbaDestination
name|destination
init|=
operator|new
name|CorbaDestination
argument_list|(
name|endpointInfo
argument_list|,
name|orbConfig
argument_list|)
decl_stmt|;
name|CorbaServerConduit
name|conduit
init|=
operator|new
name|CorbaServerConduit
argument_list|(
name|endpointInfo
argument_list|,
name|destination
operator|.
name|getAddress
argument_list|()
argument_list|,
name|targetObject
argument_list|,
literal|null
argument_list|,
name|orbConfig
argument_list|,
name|corbaTypeMap
argument_list|)
decl_stmt|;
name|CorbaMessage
name|message
init|=
operator|new
name|CorbaMessage
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|conduit
operator|.
name|prepare
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|OutputStream
name|os
init|=
name|message
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"OutputStream should not be null"
argument_list|,
name|os
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|ORB
name|orb2
init|=
operator|(
name|ORB
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"orb"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Orb should not be null"
argument_list|,
name|orb2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|message
operator|.
name|get
argument_list|(
literal|"endpoint"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"EndpointReferenceType should not be null"
argument_list|,
name|obj
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"passed in targetObject is used"
argument_list|,
name|targetObject
operator|.
name|equals
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|CorbaConstants
operator|.
name|CORBA_ENDPOINT_OBJECT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|destination
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTargetReference
parameter_list|()
throws|throws
name|Exception
block|{
name|setupServiceInfo
argument_list|(
literal|"http://cxf.apache.org/bindings/corba/simple"
argument_list|,
literal|"/wsdl_corbabinding/simpleIdl.wsdl"
argument_list|,
literal|"SimpleCORBAService"
argument_list|,
literal|"SimpleCORBAPort"
argument_list|)
expr_stmt|;
name|CorbaDestination
name|destination
init|=
operator|new
name|CorbaDestination
argument_list|(
name|endpointInfo
argument_list|,
name|orbConfig
argument_list|)
decl_stmt|;
name|CorbaServerConduit
name|conduit
init|=
operator|new
name|CorbaServerConduit
argument_list|(
name|endpointInfo
argument_list|,
name|destination
operator|.
name|getAddress
argument_list|()
argument_list|,
name|targetObject
argument_list|,
literal|null
argument_list|,
name|orbConfig
argument_list|,
name|corbaTypeMap
argument_list|)
decl_stmt|;
name|EndpointReferenceType
name|t
init|=
literal|null
decl_stmt|;
name|EndpointReferenceType
name|ref
init|=
name|conduit
operator|.
name|getTargetReference
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"ref should not be null"
argument_list|,
name|ref
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|destination
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAddress
parameter_list|()
throws|throws
name|Exception
block|{
name|setupServiceInfo
argument_list|(
literal|"http://cxf.apache.org/bindings/corba/simple"
argument_list|,
literal|"/wsdl_corbabinding/simpleIdl.wsdl"
argument_list|,
literal|"SimpleCORBAService"
argument_list|,
literal|"SimpleCORBAPort"
argument_list|)
expr_stmt|;
name|CorbaDestination
name|destination
init|=
operator|new
name|CorbaDestination
argument_list|(
name|endpointInfo
argument_list|,
name|orbConfig
argument_list|)
decl_stmt|;
name|endpointInfo
operator|.
name|setAddress
argument_list|(
literal|"corbaloc::localhost:40000/Simple"
argument_list|)
expr_stmt|;
name|CorbaServerConduit
name|conduit
init|=
operator|new
name|CorbaServerConduit
argument_list|(
name|endpointInfo
argument_list|,
name|destination
operator|.
name|getAddress
argument_list|()
argument_list|,
name|targetObject
argument_list|,
literal|null
argument_list|,
name|orbConfig
argument_list|,
name|corbaTypeMap
argument_list|)
decl_stmt|;
name|String
name|address
init|=
name|conduit
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"address should not be null"
argument_list|,
name|address
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|address
argument_list|,
literal|"corbaloc::localhost:40000/Simple"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClose
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m
init|=
name|CorbaServerConduit
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"buildRequestResult"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|CorbaMessage
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|CorbaServerConduit
name|conduit
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|CorbaServerConduit
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
name|m
argument_list|)
operator|.
name|createMock
argument_list|()
decl_stmt|;
name|CorbaMessage
name|msg
init|=
name|control
operator|.
name|createMock
argument_list|(
name|CorbaMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|conduit
operator|.
name|buildRequestResult
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|OutputStream
name|stream
init|=
name|control
operator|.
name|createMock
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|conduit
operator|.
name|close
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildRequestResult
parameter_list|()
block|{
name|NVList
name|list
init|=
name|orb
operator|.
name|create_list
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CorbaServerConduit
name|conduit
init|=
name|setupCorbaServerConduit
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|CorbaMessage
name|msg
init|=
name|control
operator|.
name|createMock
argument_list|(
name|CorbaMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServerRequest
name|request
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
name|ServerRequest
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|isOneWay
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CorbaMessage
name|inMsg
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|CorbaMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getInMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|inMsg
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|inMsg
operator|.
name|getList
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getStreamableException
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getStreamableArguments
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getStreamableReturn
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|conduit
operator|.
name|buildRequestResult
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildRequestResultException
parameter_list|()
block|{
name|NVList
name|list
init|=
name|orb
operator|.
name|create_list
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CorbaServerConduit
name|conduit
init|=
name|setupCorbaServerConduit
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|CorbaMessage
name|msg
init|=
name|control
operator|.
name|createMock
argument_list|(
name|CorbaMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServerRequest
name|request
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
name|ServerRequest
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|isOneWay
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CorbaMessage
name|inMsg
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|CorbaMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getInMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|inMsg
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|inMsg
operator|.
name|getList
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|QName
name|objName
init|=
operator|new
name|QName
argument_list|(
literal|"object"
argument_list|)
decl_stmt|;
name|QName
name|objIdlType
init|=
operator|new
name|QName
argument_list|(
name|CorbaConstants
operator|.
name|NU_WSDL_CORBA
argument_list|,
literal|"short"
argument_list|,
name|CorbaConstants
operator|.
name|NP_WSDL_CORBA
argument_list|)
decl_stmt|;
name|TypeCode
name|objTypeCode
init|=
name|orb
operator|.
name|get_primitive_tc
argument_list|(
name|TCKind
operator|.
name|tk_short
argument_list|)
decl_stmt|;
name|CorbaPrimitiveHandler
name|obj
init|=
operator|new
name|CorbaPrimitiveHandler
argument_list|(
name|objName
argument_list|,
name|objIdlType
argument_list|,
name|objTypeCode
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CorbaStreamable
name|exception
init|=
operator|new
name|CorbaStreamableImpl
argument_list|(
name|obj
argument_list|,
name|objName
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getStreamableException
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getStreamableException
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|conduit
operator|.
name|buildRequestResult
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildRequestResultArgumentReturn
parameter_list|()
block|{
name|CorbaStreamable
index|[]
name|arguments
init|=
operator|new
name|CorbaStreamable
index|[
literal|1
index|]
decl_stmt|;
name|QName
name|objName
init|=
operator|new
name|QName
argument_list|(
literal|"object"
argument_list|)
decl_stmt|;
name|QName
name|objIdlType
init|=
operator|new
name|QName
argument_list|(
name|CorbaConstants
operator|.
name|NU_WSDL_CORBA
argument_list|,
literal|"short"
argument_list|,
name|CorbaConstants
operator|.
name|NP_WSDL_CORBA
argument_list|)
decl_stmt|;
name|TypeCode
name|objTypeCode
init|=
name|orb
operator|.
name|get_primitive_tc
argument_list|(
name|TCKind
operator|.
name|tk_short
argument_list|)
decl_stmt|;
name|CorbaPrimitiveHandler
name|obj
init|=
operator|new
name|CorbaPrimitiveHandler
argument_list|(
name|objName
argument_list|,
name|objIdlType
argument_list|,
name|objTypeCode
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CorbaStreamable
name|arg
init|=
operator|new
name|CorbaStreamableImpl
argument_list|(
name|obj
argument_list|,
name|objName
argument_list|)
decl_stmt|;
name|arguments
index|[
literal|0
index|]
operator|=
name|arg
expr_stmt|;
name|arguments
index|[
literal|0
index|]
operator|.
name|setMode
argument_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ARG_OUT
operator|.
name|value
argument_list|)
expr_stmt|;
name|NVList
name|nvlist
init|=
name|orb
operator|.
name|create_list
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Any
name|value
init|=
name|orb
operator|.
name|create_any
argument_list|()
decl_stmt|;
name|value
operator|.
name|insert_Streamable
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|nvlist
operator|.
name|add_value
argument_list|(
name|arguments
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|,
name|arguments
index|[
literal|0
index|]
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|CorbaServerConduit
name|conduit
init|=
name|setupCorbaServerConduit
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|CorbaMessage
name|msg
init|=
name|control
operator|.
name|createMock
argument_list|(
name|CorbaMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServerRequest
name|request
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
name|ServerRequest
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|isOneWay
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|CorbaMessage
name|corbaMessage
init|=
operator|new
name|CorbaMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|corbaMessage
operator|.
name|setList
argument_list|(
name|nvlist
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getInMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|corbaMessage
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getStreamableException
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getStreamableArguments
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getStreamableReturn
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|conduit
operator|.
name|buildRequestResult
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testGetTarget
parameter_list|()
block|{
name|CorbaServerConduit
name|conduit
init|=
name|setupCorbaServerConduit
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|EndpointReferenceType
name|endpoint
init|=
name|conduit
operator|.
name|getTarget
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"EndpointReferenceType should not be null"
argument_list|,
name|endpoint
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|CorbaServerConduit
name|setupCorbaServerConduit
parameter_list|(
name|boolean
name|send
parameter_list|)
block|{
name|target
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|EndpointReferenceType
operator|.
name|class
argument_list|)
expr_stmt|;
name|endpointInfo
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|CorbaServerConduit
name|corbaServerConduit
init|=
operator|new
name|CorbaServerConduit
argument_list|(
name|endpointInfo
argument_list|,
name|target
argument_list|,
name|targetObject
argument_list|,
literal|null
argument_list|,
name|orbConfig
argument_list|,
name|corbaTypeMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|send
condition|)
block|{
comment|// setMessageObserver
name|observer
operator|=
operator|new
name|MessageObserver
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|inMessage
operator|=
name|m
expr_stmt|;
block|}
block|}
expr_stmt|;
name|corbaServerConduit
operator|.
name|setMessageObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
return|return
name|corbaServerConduit
return|;
block|}
specifier|protected
name|void
name|setupServiceInfo
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|wsdl
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|String
name|portName
parameter_list|)
block|{
name|URL
name|wsdlUrl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|wsdl
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|wsdlUrl
argument_list|)
expr_stmt|;
name|WSDLServiceFactory
name|f
init|=
operator|new
name|WSDLServiceFactory
argument_list|(
name|bus
argument_list|,
name|wsdlUrl
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|serviceName
argument_list|)
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|f
operator|.
name|create
argument_list|()
decl_stmt|;
name|endpointInfo
operator|=
name|service
operator|.
name|getEndpointInfo
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|portName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

