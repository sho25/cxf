begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|types
operator|.
name|CorbaPrimitiveHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Any
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|NVList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TCKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TypeCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaMessageTest
block|{
specifier|private
specifier|static
name|ORB
name|orb
decl_stmt|;
specifier|private
name|Message
name|message
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|java
operator|.
name|util
operator|.
name|Properties
name|props
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"yoko.orb.id"
argument_list|,
literal|"CXF-CORBA-Server-Binding"
argument_list|)
expr_stmt|;
name|orb
operator|=
name|ORB
operator|.
name|init
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|IMocksControl
name|control
init|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
decl_stmt|;
name|message
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCorbaMessageAttributes
parameter_list|()
block|{
name|CorbaMessage
name|msg
init|=
operator|new
name|CorbaMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|QName
name|param1Name
init|=
operator|new
name|QName
argument_list|(
literal|"param1"
argument_list|)
decl_stmt|;
name|QName
name|param1IdlType
init|=
operator|new
name|QName
argument_list|(
name|CorbaConstants
operator|.
name|NU_WSDL_CORBA
argument_list|,
literal|"long"
argument_list|,
name|CorbaConstants
operator|.
name|NP_WSDL_CORBA
argument_list|)
decl_stmt|;
name|TypeCode
name|param1TypeCode
init|=
name|orb
operator|.
name|get_primitive_tc
argument_list|(
name|TCKind
operator|.
name|tk_long
argument_list|)
decl_stmt|;
name|CorbaPrimitiveHandler
name|param1
init|=
operator|new
name|CorbaPrimitiveHandler
argument_list|(
name|param1Name
argument_list|,
name|param1IdlType
argument_list|,
name|param1TypeCode
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CorbaStreamable
name|p1
init|=
name|msg
operator|.
name|createStreamableObject
argument_list|(
name|param1
argument_list|,
name|param1Name
argument_list|)
decl_stmt|;
name|QName
name|param2Name
init|=
operator|new
name|QName
argument_list|(
literal|"param2"
argument_list|)
decl_stmt|;
name|QName
name|param2IdlType
init|=
operator|new
name|QName
argument_list|(
name|CorbaConstants
operator|.
name|NU_WSDL_CORBA
argument_list|,
literal|"string"
argument_list|,
name|CorbaConstants
operator|.
name|NP_WSDL_CORBA
argument_list|)
decl_stmt|;
name|TypeCode
name|param2TypeCode
init|=
name|orb
operator|.
name|get_primitive_tc
argument_list|(
name|TCKind
operator|.
name|tk_string
argument_list|)
decl_stmt|;
name|CorbaPrimitiveHandler
name|param2
init|=
operator|new
name|CorbaPrimitiveHandler
argument_list|(
name|param2Name
argument_list|,
name|param2IdlType
argument_list|,
name|param2TypeCode
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CorbaStreamable
name|p2
init|=
name|msg
operator|.
name|createStreamableObject
argument_list|(
name|param2
argument_list|,
name|param2Name
argument_list|)
decl_stmt|;
name|msg
operator|.
name|addStreamableArgument
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|addStreamableArgument
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|CorbaStreamable
index|[]
name|arguments
init|=
name|msg
operator|.
name|getStreamableArguments
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|arguments
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|QName
name|param3Name
init|=
operator|new
name|QName
argument_list|(
literal|"param3"
argument_list|)
decl_stmt|;
name|QName
name|param3IdlType
init|=
operator|new
name|QName
argument_list|(
name|CorbaConstants
operator|.
name|NU_WSDL_CORBA
argument_list|,
literal|"short"
argument_list|,
name|CorbaConstants
operator|.
name|NP_WSDL_CORBA
argument_list|)
decl_stmt|;
name|TypeCode
name|param3TypeCode
init|=
name|orb
operator|.
name|get_primitive_tc
argument_list|(
name|TCKind
operator|.
name|tk_short
argument_list|)
decl_stmt|;
name|CorbaPrimitiveHandler
name|param3
init|=
operator|new
name|CorbaPrimitiveHandler
argument_list|(
name|param3Name
argument_list|,
name|param3IdlType
argument_list|,
name|param3TypeCode
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CorbaStreamable
name|p3
init|=
name|msg
operator|.
name|createStreamableObject
argument_list|(
name|param3
argument_list|,
name|param3Name
argument_list|)
decl_stmt|;
name|QName
name|param4Name
init|=
operator|new
name|QName
argument_list|(
literal|"param4"
argument_list|)
decl_stmt|;
name|QName
name|param4IdlType
init|=
operator|new
name|QName
argument_list|(
name|CorbaConstants
operator|.
name|NU_WSDL_CORBA
argument_list|,
literal|"float"
argument_list|,
name|CorbaConstants
operator|.
name|NP_WSDL_CORBA
argument_list|)
decl_stmt|;
name|TypeCode
name|param4TypeCode
init|=
name|orb
operator|.
name|get_primitive_tc
argument_list|(
name|TCKind
operator|.
name|tk_float
argument_list|)
decl_stmt|;
name|CorbaPrimitiveHandler
name|param4
init|=
operator|new
name|CorbaPrimitiveHandler
argument_list|(
name|param4Name
argument_list|,
name|param4IdlType
argument_list|,
name|param4TypeCode
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CorbaStreamable
name|p4
init|=
name|msg
operator|.
name|createStreamableObject
argument_list|(
name|param4
argument_list|,
name|param4Name
argument_list|)
decl_stmt|;
name|CorbaStreamable
index|[]
name|args
init|=
operator|new
name|CorbaStreamable
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
name|p3
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|p4
expr_stmt|;
name|msg
operator|.
name|setStreamableArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|arguments
operator|=
name|msg
operator|.
name|getStreamableArguments
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|arguments
operator|.
name|length
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|arguments
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|arguments
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|arguments
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|arguments
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|NVList
name|list
init|=
name|orb
operator|.
name|create_list
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Any
name|value
init|=
name|orb
operator|.
name|create_any
argument_list|()
decl_stmt|;
name|value
operator|.
name|insert_Streamable
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|list
operator|.
name|add_value
argument_list|(
name|p1
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|,
name|p1
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|insert_Streamable
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|list
operator|.
name|add_value
argument_list|(
name|p2
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|,
name|p2
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setList
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|NVList
name|resultList
init|=
name|msg
operator|.
name|getList
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultList
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QName
name|returnName
init|=
operator|new
name|QName
argument_list|(
literal|"param2"
argument_list|)
decl_stmt|;
name|QName
name|returnIdlType
init|=
operator|new
name|QName
argument_list|(
name|CorbaConstants
operator|.
name|NU_WSDL_CORBA
argument_list|,
literal|"boolean"
argument_list|,
name|CorbaConstants
operator|.
name|NP_WSDL_CORBA
argument_list|)
decl_stmt|;
name|TypeCode
name|returnTypeCode
init|=
name|orb
operator|.
name|get_primitive_tc
argument_list|(
name|TCKind
operator|.
name|tk_boolean
argument_list|)
decl_stmt|;
name|CorbaPrimitiveHandler
name|returnValue
init|=
operator|new
name|CorbaPrimitiveHandler
argument_list|(
name|returnName
argument_list|,
name|returnIdlType
argument_list|,
name|returnTypeCode
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CorbaStreamable
name|ret
init|=
name|msg
operator|.
name|createStreamableObject
argument_list|(
name|returnValue
argument_list|,
name|returnName
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setStreamableReturn
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|CorbaStreamable
name|retVal
init|=
name|msg
operator|.
name|getStreamableReturn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|retVal
argument_list|)
expr_stmt|;
comment|// NEED TO DO TEST FOR EXCEPTIONS
comment|/*Exception ex = new CorbaBindingException("TestException");         msg.s.setException(ex);         Exception msgEx = msg.getException();         assertNotNull(msgEx);         assertEquals(msgEx.getMessage(), ex.getMessage());*/
block|}
block|}
end_class

end_unit

