begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|tcp
operator|.
name|frames
operator|.
name|SoapTcpFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|tcp
operator|.
name|frames
operator|.
name|SoapTcpFrameHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|tcp
operator|.
name|frames
operator|.
name|SoapTcpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|buffer
operator|.
name|IoBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IoSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolDecoderAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolDecoderOutput
import|;
end_import

begin_class
specifier|public
class|class
name|SoapTcpMessageDecoder
extends|extends
name|ProtocolDecoderAdapter
block|{
comment|//CumulativeProtocolDecoder {
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|decode
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|IoBuffer
name|buffer
parameter_list|,
name|ProtocolDecoderOutput
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|tempBuffer
init|=
operator|(
name|byte
index|[]
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"tempBuffer"
argument_list|)
decl_stmt|;
name|Integer
name|bufferPosition
init|=
operator|(
name|Integer
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"bufferPosition"
argument_list|)
decl_stmt|;
name|Integer
name|bufferDataLength
init|=
operator|(
name|Integer
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"bufferDataLength"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tempBuffer
operator|==
literal|null
condition|)
block|{
name|tempBuffer
operator|=
operator|new
name|byte
index|[
name|SoapTcpOutputStream
operator|.
name|CHUNK_SIZE
index|]
expr_stmt|;
name|bufferDataLength
operator|=
name|buffer
operator|.
name|limit
argument_list|()
expr_stmt|;
for|for
control|(
name|bufferPosition
operator|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
init|;
name|bufferPosition
operator|<
name|bufferDataLength
condition|;
name|bufferPosition
operator|++
control|)
block|{
name|tempBuffer
index|[
name|bufferPosition
index|]
operator|=
name|buffer
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|session
operator|.
name|setAttribute
argument_list|(
literal|"tempBuffer"
argument_list|,
name|tempBuffer
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"bufferPosition"
argument_list|,
name|bufferPosition
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"bufferDataLength"
argument_list|,
name|bufferDataLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bufferDataLength
operator|+=
name|buffer
operator|.
name|limit
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|bufferPosition
operator|<
name|bufferDataLength
condition|;
name|bufferPosition
operator|++
control|)
block|{
name|tempBuffer
index|[
name|bufferPosition
index|]
operator|=
name|buffer
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
name|SoapTcpSessionState
name|sessionState
init|=
operator|(
name|SoapTcpSessionState
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"sessionState"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionState
operator|!=
literal|null
operator|&&
name|sessionState
operator|.
name|getStateId
argument_list|()
operator|==
name|SoapTcpSessionState
operator|.
name|SOAP_TCP_SESSION_STATE_NEW
condition|)
block|{
if|if
condition|(
name|bufferPosition
operator|==
literal|16
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|IoBuffer
operator|.
name|wrap
argument_list|(
name|tempBuffer
argument_list|,
literal|0
argument_list|,
name|bufferPosition
argument_list|)
argument_list|)
expr_stmt|;
name|bufferPosition
operator|=
literal|0
expr_stmt|;
name|bufferDataLength
operator|=
literal|0
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"bufferPosition"
argument_list|,
name|bufferPosition
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"bufferDataLength"
argument_list|,
name|bufferDataLength
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
return|return;
block|}
block|}
name|InputStream
name|inStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|tempBuffer
argument_list|,
literal|0
argument_list|,
name|bufferDataLength
argument_list|)
decl_stmt|;
try|try
block|{
name|SoapTcpFrame
name|frame
init|=
name|SoapTcpUtils
operator|.
name|readMessageFrame
argument_list|(
name|inStream
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SoapTcpChannel
argument_list|>
name|channels
init|=
operator|(
name|List
argument_list|<
name|SoapTcpChannel
argument_list|>
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"channels"
argument_list|)
decl_stmt|;
for|for
control|(
name|SoapTcpChannel
name|channel
range|:
name|channels
control|)
block|{
if|if
condition|(
name|channel
operator|.
name|getChannelId
argument_list|()
operator|==
name|frame
operator|.
name|getChannelId
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|frame
operator|.
name|getHeader
argument_list|()
operator|.
name|getFrameType
argument_list|()
condition|)
block|{
case|case
name|SoapTcpFrameHeader
operator|.
name|SINGLE_FRAME_MESSAGE
case|:
case|case
name|SoapTcpFrameHeader
operator|.
name|ERROR_MESSAGE
case|:
case|case
name|SoapTcpFrameHeader
operator|.
name|NULL_MESSAGE
case|:
name|SoapTcpMessage
name|singleFrameMessage
init|=
name|SoapTcpMessage
operator|.
name|createSoapTcpMessage
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|singleFrameMessage
argument_list|)
expr_stmt|;
name|bufferPosition
operator|=
literal|0
expr_stmt|;
name|bufferDataLength
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|SoapTcpFrameHeader
operator|.
name|MESSAGE_START_CHUNK
case|:
case|case
name|SoapTcpFrameHeader
operator|.
name|MESSAGE_CHUNK
case|:
name|channel
operator|.
name|addFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|bufferPosition
operator|=
literal|0
expr_stmt|;
name|bufferDataLength
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|SoapTcpFrameHeader
operator|.
name|MESSAGE_END_CHUNK
case|:
name|List
argument_list|<
name|SoapTcpFrame
argument_list|>
name|frames
init|=
name|channel
operator|.
name|getFrames
argument_list|()
decl_stmt|;
name|SoapTcpMessage
name|multiFrameMessage
init|=
name|SoapTcpMessage
operator|.
name|createSoapTcpMessage
argument_list|(
name|frames
argument_list|)
decl_stmt|;
name|multiFrameMessage
operator|.
name|getFrames
argument_list|()
operator|.
name|add
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|multiFrameMessage
argument_list|)
expr_stmt|;
name|bufferPosition
operator|=
literal|0
expr_stmt|;
name|bufferDataLength
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
return|return;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|//
block|}
finally|finally
block|{
name|session
operator|.
name|setAttribute
argument_list|(
literal|"bufferPosition"
argument_list|,
name|bufferPosition
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"bufferDataLength"
argument_list|,
name|bufferDataLength
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

