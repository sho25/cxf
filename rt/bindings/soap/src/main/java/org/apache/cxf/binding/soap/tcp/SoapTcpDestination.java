begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|tcp
operator|.
name|frames
operator|.
name|SoapTcpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|AbstractDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|buffer
operator|.
name|IoBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|service
operator|.
name|IoAcceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|service
operator|.
name|IoHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IdleStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IoSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolCodecFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|logging
operator|.
name|LoggingFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|transport
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketAcceptor
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|SoapTcpDestination
extends|extends
name|AbstractDestination
implements|implements
name|IoHandler
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MAGIC_IDENTIFIER
init|=
literal|"vnd.sun.ws.tcp"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SoapTcpDestination
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|SoapTcpDestination
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|,
name|EndpointInfo
name|ei
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|ref
argument_list|,
name|ei
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SoapTcpDestination
parameter_list|(
name|Bus
name|b
parameter_list|,
name|EndpointReferenceType
name|ref
parameter_list|,
name|EndpointInfo
name|ei
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|b
argument_list|,
name|ref
argument_list|,
name|ei
argument_list|)
expr_stmt|;
name|String
name|address
init|=
name|ref
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|address
operator|.
name|contains
argument_list|(
literal|"soap.tcp://"
argument_list|)
condition|)
block|{
comment|//String endPointAddress = address;
name|int
name|beginIndex
init|=
name|address
operator|.
name|indexOf
argument_list|(
literal|"://"
argument_list|)
decl_stmt|;
name|int
name|endIndex
init|=
name|address
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|,
name|beginIndex
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|//String hostName = address.substring(beginIndex + 3, endIndex);
name|beginIndex
operator|=
name|endIndex
expr_stmt|;
name|endIndex
operator|=
name|address
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|,
name|beginIndex
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|address
operator|.
name|substring
argument_list|(
name|beginIndex
operator|+
literal|1
argument_list|,
name|endIndex
argument_list|)
argument_list|)
decl_stmt|;
comment|//System.out.println("hostName: " + hostName);
comment|//System.out.println("port: " + port);
name|IoAcceptor
name|acceptor
init|=
operator|new
name|NioSocketAcceptor
argument_list|()
decl_stmt|;
name|acceptor
operator|.
name|getFilterChain
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"logger"
argument_list|,
operator|new
name|LoggingFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|//acceptor.getFilterChain().addLast("LowLevelProtocol", new SoapTcpIoFilter());
name|acceptor
operator|.
name|getFilterChain
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"HighLevelProtocol"
argument_list|,
operator|new
name|ProtocolCodecFilter
argument_list|(
operator|new
name|SoapTcpCodecFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|acceptor
operator|.
name|setDefaultLocalAddress
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|acceptor
operator|.
name|setHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|acceptor
operator|.
name|bind
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"server is listenig at port "
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Conduit
name|getInbuiltBackChannel
parameter_list|(
name|Message
name|inMessage
parameter_list|)
block|{
return|return
name|inMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|getConduit
argument_list|(
name|inMessage
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
specifier|public
name|void
name|exceptionCaught
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|Throwable
name|cause
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|void
name|messageReceived
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|Object
name|message
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|message
operator|instanceof
name|SoapTcpMessage
condition|)
block|{
name|BackendTcpConduit
name|conduit
init|=
operator|(
name|BackendTcpConduit
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"conduit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|conduit
operator|==
literal|null
condition|)
block|{
name|conduit
operator|=
operator|new
name|BackendTcpConduit
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"conduit"
argument_list|,
name|conduit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|SoapTcpMessage
operator|)
name|message
operator|)
operator|.
name|getChannelId
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ChannelService
operator|.
name|service
argument_list|(
name|session
argument_list|,
operator|(
name|SoapTcpMessage
operator|)
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Message
name|msg
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setConduit
argument_list|(
name|conduit
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setDestination
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
operator|(
operator|(
name|SoapTcpMessage
operator|)
name|message
operator|)
operator|.
name|getContentAsStream
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setContent
argument_list|(
name|SoapTcpChannel
operator|.
name|class
argument_list|,
name|getChannel
argument_list|(
name|session
argument_list|,
operator|(
name|SoapTcpMessage
operator|)
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setContent
argument_list|(
name|IoSession
operator|.
name|class
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|incomingObserver
operator|.
name|onMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|IoBuffer
condition|)
block|{
name|SoapTcpSessionState
name|sessionState
init|=
operator|(
name|SoapTcpSessionState
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"sessionState"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionState
operator|!=
literal|null
operator|&&
name|sessionState
operator|.
name|getStateId
argument_list|()
operator|==
name|SoapTcpSessionState
operator|.
name|SOAP_TCP_SESSION_STATE_NEW
condition|)
block|{
name|IoBuffer
name|buffer
init|=
operator|(
name|IoBuffer
operator|)
name|message
decl_stmt|;
name|InputStream
name|inStream
init|=
name|buffer
operator|.
name|asInputStream
argument_list|()
decl_stmt|;
name|byte
name|magicIdBuffer
index|[]
init|=
operator|new
name|byte
index|[
name|MAGIC_IDENTIFIER
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
name|inStream
operator|.
name|read
argument_list|(
name|magicIdBuffer
argument_list|)
expr_stmt|;
name|String
name|magicId
init|=
operator|new
name|String
argument_list|(
name|magicIdBuffer
argument_list|,
literal|"US-ASCII"
argument_list|)
decl_stmt|;
if|if
condition|(
name|magicId
operator|.
name|equals
argument_list|(
name|MAGIC_IDENTIFIER
argument_list|)
condition|)
block|{
name|int
name|version
index|[]
init|=
operator|new
name|int
index|[
literal|4
index|]
decl_stmt|;
name|DataCodingUtils
operator|.
name|readInts4
argument_list|(
name|inStream
argument_list|,
name|version
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
index|[
literal|0
index|]
operator|==
name|SoapTcpProtocolConsts
operator|.
name|PROTOCOL_VERSION_MAJOR
operator|&&
name|version
index|[
literal|1
index|]
operator|==
name|SoapTcpProtocolConsts
operator|.
name|PROTOCOL_VERSION_MINOR
operator|&&
name|version
index|[
literal|2
index|]
operator|==
name|SoapTcpProtocolConsts
operator|.
name|CONNECTION_MANAGEMENT_VERSION_MAJOR
operator|&&
name|version
index|[
literal|3
index|]
operator|==
name|SoapTcpProtocolConsts
operator|.
name|CONNECTION_MANAGEMENT_VERSION_MINOR
condition|)
block|{
name|sessionState
operator|.
name|setStateId
argument_list|(
name|SoapTcpSessionState
operator|.
name|SOAP_TCP_SESSION_STATE_AFTER_HANDSHAKE
argument_list|)
expr_stmt|;
name|IoBuffer
name|response
init|=
name|IoBuffer
operator|.
name|allocate
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|response
operator|.
name|asOutputStream
argument_list|()
decl_stmt|;
name|DataCodingUtils
operator|.
name|writeInts4
argument_list|(
name|out
argument_list|,
name|SoapTcpProtocolConsts
operator|.
name|PROTOCOL_VERSION_MAJOR
argument_list|,
name|SoapTcpProtocolConsts
operator|.
name|PROTOCOL_VERSION_MINOR
argument_list|,
name|SoapTcpProtocolConsts
operator|.
name|CONNECTION_MANAGEMENT_VERSION_MAJOR
argument_list|,
name|SoapTcpProtocolConsts
operator|.
name|CONNECTION_MANAGEMENT_VERSION_MINOR
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|response
operator|.
name|flip
argument_list|()
expr_stmt|;
name|session
operator|.
name|write
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|messageSent
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|Object
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"messageSent"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sessionClosed
parameter_list|(
name|IoSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"sessionClosed"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sessionCreated
parameter_list|(
name|IoSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"sessionCreated"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sessionIdle
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|IdleStatus
name|status
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"sessionIdle"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sessionOpened
parameter_list|(
name|IoSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"sessionOpened"
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"sessionState"
argument_list|,
operator|new
name|SoapTcpSessionState
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SoapTcpChannel
argument_list|>
name|channels
init|=
operator|new
name|ArrayList
argument_list|<
name|SoapTcpChannel
argument_list|>
argument_list|()
decl_stmt|;
name|SoapTcpChannel
name|channel0
init|=
operator|new
name|SoapTcpChannel
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|channels
operator|.
name|add
argument_list|(
name|channel0
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
literal|"channels"
argument_list|,
name|channels
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|SoapTcpChannel
name|getChannel
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|SoapTcpMessage
name|message
parameter_list|)
block|{
name|List
argument_list|<
name|SoapTcpChannel
argument_list|>
name|channels
init|=
operator|(
name|List
argument_list|<
name|SoapTcpChannel
argument_list|>
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
literal|"channels"
argument_list|)
decl_stmt|;
if|if
condition|(
name|channels
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SoapTcpChannel
name|channel
range|:
name|channels
control|)
block|{
if|if
condition|(
name|channel
operator|.
name|getChannelId
argument_list|()
operator|==
name|message
operator|.
name|getChannelId
argument_list|()
condition|)
block|{
return|return
name|channel
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

