begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|tcp
operator|.
name|frames
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|tcp
operator|.
name|DataCodingUtils
import|;
end_import

begin_class
specifier|public
class|class
name|SoapTcpFrameHeader
block|{
comment|//Message Frame Types
specifier|public
specifier|static
specifier|final
name|int
name|SINGLE_FRAME_MESSAGE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MESSAGE_START_CHUNK
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MESSAGE_CHUNK
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MESSAGE_END_CHUNK
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ERROR_MESSAGE
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NULL_MESSAGE
init|=
literal|5
decl_stmt|;
specifier|private
name|int
name|channelId
decl_stmt|;
specifier|private
name|int
name|frameType
decl_stmt|;
specifier|private
name|SoapTcpFrameContentDescription
name|contentDescription
decl_stmt|;
specifier|public
name|SoapTcpFrameHeader
parameter_list|(
specifier|final
name|int
name|frameType
parameter_list|,
specifier|final
name|SoapTcpFrameContentDescription
name|contentDescription
parameter_list|)
block|{
name|this
operator|.
name|frameType
operator|=
name|frameType
expr_stmt|;
name|this
operator|.
name|contentDescription
operator|=
name|contentDescription
expr_stmt|;
block|}
specifier|public
name|SoapTcpFrameHeader
parameter_list|()
block|{
name|this
operator|.
name|frameType
operator|=
name|NULL_MESSAGE
expr_stmt|;
name|this
operator|.
name|contentDescription
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getChannelId
parameter_list|()
block|{
return|return
name|channelId
return|;
block|}
specifier|public
name|void
name|setChannelId
parameter_list|(
name|int
name|channelId
parameter_list|)
block|{
name|this
operator|.
name|channelId
operator|=
name|channelId
expr_stmt|;
block|}
specifier|public
name|int
name|getFrameType
parameter_list|()
block|{
return|return
name|frameType
return|;
block|}
specifier|public
name|void
name|setFrameType
parameter_list|(
name|int
name|frameType
parameter_list|)
block|{
name|this
operator|.
name|frameType
operator|=
name|frameType
expr_stmt|;
block|}
specifier|public
name|SoapTcpFrameContentDescription
name|getContentDescription
parameter_list|()
block|{
return|return
name|contentDescription
return|;
block|}
specifier|public
name|void
name|setContentDescription
parameter_list|(
name|SoapTcpFrameContentDescription
name|contentDescription
parameter_list|)
block|{
name|this
operator|.
name|contentDescription
operator|=
name|contentDescription
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|DataCodingUtils
operator|.
name|writeInts4
argument_list|(
name|output
argument_list|,
name|channelId
argument_list|,
name|frameType
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|frameType
operator|==
name|SoapTcpFrameHeader
operator|.
name|SINGLE_FRAME_MESSAGE
operator|||
name|frameType
operator|==
name|SoapTcpFrameHeader
operator|.
name|MESSAGE_START_CHUNK
operator|)
operator|&&
name|contentDescription
operator|!=
literal|null
condition|)
block|{
name|contentDescription
operator|.
name|write
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

