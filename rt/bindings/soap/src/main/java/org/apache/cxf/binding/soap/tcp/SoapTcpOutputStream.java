begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|tcp
operator|.
name|frames
operator|.
name|SoapTcpFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|tcp
operator|.
name|frames
operator|.
name|SoapTcpFrameContentDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|tcp
operator|.
name|frames
operator|.
name|SoapTcpFrameHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|AbstractThresholdOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_comment
comment|/**  * SoapTCPOutPutStream is OutputStream for sending message in SOAP/TCP protocol.  * It sends single message in one or more SOAP/TCP frames.  */
end_comment

begin_class
specifier|public
class|class
name|SoapTcpOutputStream
extends|extends
name|AbstractThresholdOutputStream
block|{
specifier|public
specifier|static
specifier|final
name|int
name|CHUNK_SIZE
init|=
literal|4096
decl_stmt|;
specifier|private
name|int
name|channelId
decl_stmt|;
specifier|private
name|OutputStream
name|outStream
decl_stmt|;
specifier|private
name|InputStream
name|inStream
decl_stmt|;
specifier|private
name|boolean
name|messageSent
decl_stmt|;
specifier|private
name|Message
name|outMessage
decl_stmt|;
specifier|private
name|int
name|chunkSize
decl_stmt|;
specifier|private
name|MessageObserver
name|incomingObserver
decl_stmt|;
specifier|public
name|SoapTcpOutputStream
parameter_list|(
specifier|final
name|InputStream
name|inStream
parameter_list|,
specifier|final
name|OutputStream
name|outStream
parameter_list|,
specifier|final
name|Message
name|message
parameter_list|,
specifier|final
name|String
name|targetWsURI
parameter_list|,
specifier|final
name|MessageObserver
name|incomingObserver
parameter_list|)
block|{
name|this
argument_list|(
name|inStream
argument_list|,
name|outStream
argument_list|,
name|message
argument_list|,
name|targetWsURI
argument_list|,
name|incomingObserver
argument_list|,
name|CHUNK_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SoapTcpOutputStream
parameter_list|(
specifier|final
name|InputStream
name|inStream
parameter_list|,
specifier|final
name|OutputStream
name|outStream
parameter_list|,
specifier|final
name|Message
name|message
parameter_list|,
specifier|final
name|String
name|targetWsURI
parameter_list|,
specifier|final
name|MessageObserver
name|incomingObserver
parameter_list|,
specifier|final
name|int
name|chunkSize
parameter_list|)
block|{
name|super
argument_list|(
name|chunkSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageSent
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|inStream
operator|=
name|inStream
expr_stmt|;
name|this
operator|.
name|outStream
operator|=
name|outStream
expr_stmt|;
name|this
operator|.
name|outMessage
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|wrappedStream
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|chunkSize
operator|=
name|chunkSize
expr_stmt|;
name|this
operator|.
name|incomingObserver
operator|=
name|incomingObserver
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|mimeTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|SoapMessage
name|m
init|=
operator|(
name|SoapMessage
operator|)
name|message
decl_stmt|;
comment|//mimeTypes.add("application/vnd.sun.stateful.fastinfoset");
name|mimeTypes
operator|.
name|add
argument_list|(
name|m
operator|.
name|getVersion
argument_list|()
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
comment|//mimeTypes.add("multipart/related");
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|supportedParams
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|supportedParams
operator|.
name|add
argument_list|(
literal|"charset"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getVersion
argument_list|()
operator|==
name|Soap11
operator|.
name|getInstance
argument_list|()
condition|)
block|{
name|supportedParams
operator|.
name|add
argument_list|(
literal|"SOAPAction"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|supportedParams
operator|.
name|add
argument_list|(
literal|"action"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|channelId
operator|=
name|openChannel
argument_list|(
name|targetWsURI
argument_list|,
name|mimeTypes
argument_list|,
name|supportedParams
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|openChannel
parameter_list|(
specifier|final
name|String
name|targetWsURI
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|supportedMimeTypes
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|supportedParams
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|openChannelMsg
init|=
literal|"<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\">"
operator|+
literal|"<s:Body><openChannel xmlns=\"http://servicechannel.tcp.transport.ws.xml.sun.com/\""
operator|+
literal|" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""
operator|+
literal|" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">"
decl_stmt|;
name|openChannelMsg
operator|+=
literal|"<targetWSURI xmlns=\"\">"
operator|+
name|targetWsURI
operator|+
literal|"</targetWSURI>"
expr_stmt|;
for|for
control|(
name|String
name|mimeType
range|:
name|supportedMimeTypes
control|)
block|{
name|openChannelMsg
operator|+=
literal|"<negotiatedMimeTypes xmlns=\"\">"
operator|+
name|mimeType
operator|+
literal|"</negotiatedMimeTypes>"
expr_stmt|;
block|}
for|for
control|(
name|String
name|param
range|:
name|supportedParams
control|)
block|{
name|openChannelMsg
operator|+=
literal|"<negotiatedParams xmlns=\"\">"
operator|+
name|param
operator|+
literal|"</negotiatedParams>"
expr_stmt|;
block|}
name|openChannelMsg
operator|+=
literal|"</openChannel></s:Body></s:Envelope>"
expr_stmt|;
name|SoapTcpFrameContentDescription
name|contentDesc
init|=
operator|new
name|SoapTcpFrameContentDescription
argument_list|()
decl_stmt|;
name|contentDesc
operator|.
name|setContentId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
name|contentDesc
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
specifier|final
name|SoapTcpFrameHeader
name|header
init|=
operator|new
name|SoapTcpFrameHeader
argument_list|(
name|SoapTcpFrameHeader
operator|.
name|SINGLE_FRAME_MESSAGE
argument_list|,
name|contentDesc
argument_list|)
decl_stmt|;
specifier|final
name|SoapTcpFrame
name|frame
init|=
operator|new
name|SoapTcpFrame
argument_list|()
decl_stmt|;
name|frame
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setChannelId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|frame
operator|.
name|setPayload
argument_list|(
name|openChannelMsg
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|SoapTcpUtils
operator|.
name|writeMessageFrame
argument_list|(
name|outStream
argument_list|,
name|frame
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
specifier|final
name|SoapTcpFrame
name|response
init|=
name|SoapTcpUtils
operator|.
name|readMessageFrame
argument_list|(
name|inStream
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SoapTcpUtils
operator|.
name|checkSingleFrameResponse
argument_list|(
name|response
argument_list|,
literal|"openChannelResponse"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't open new channel."
argument_list|)
throw|;
block|}
comment|//SoapTcpUtils.printSoapTcpFrame(System.out, response);
return|return
name|getChannelIdFromResponse
argument_list|(
name|response
argument_list|)
return|;
block|}
specifier|private
name|int
name|getChannelIdFromResponse
parameter_list|(
specifier|final
name|SoapTcpFrame
name|frame
parameter_list|)
block|{
return|return
name|ChannelIdParser
operator|.
name|getChannelId
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|frame
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|thresholdNotReached
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Send single message if didn't send any message yet or end message if already send message
if|if
condition|(
name|messageSent
condition|)
block|{
name|SoapTcpFrameHeader
name|header
init|=
operator|new
name|SoapTcpFrameHeader
argument_list|(
name|SoapTcpFrameHeader
operator|.
name|MESSAGE_END_CHUNK
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|header
operator|.
name|setChannelId
argument_list|(
name|channelId
argument_list|)
expr_stmt|;
name|SoapTcpFrame
name|frame
init|=
operator|new
name|SoapTcpFrame
argument_list|()
decl_stmt|;
name|frame
operator|.
name|setChannelId
argument_list|(
name|channelId
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setPayload
argument_list|(
name|this
operator|.
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|SoapTcpUtils
operator|.
name|writeMessageFrame
argument_list|(
name|outStream
argument_list|,
name|frame
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|SoapTcpFrameContentDescription
name|contentDesc
init|=
operator|new
name|SoapTcpFrameContentDescription
argument_list|()
decl_stmt|;
name|contentDesc
operator|.
name|setContentId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
name|contentDesc
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
specifier|final
name|SoapTcpFrameHeader
name|header
init|=
operator|new
name|SoapTcpFrameHeader
argument_list|(
name|SoapTcpFrameHeader
operator|.
name|SINGLE_FRAME_MESSAGE
argument_list|,
name|contentDesc
argument_list|)
decl_stmt|;
name|header
operator|.
name|setChannelId
argument_list|(
name|channelId
argument_list|)
expr_stmt|;
specifier|final
name|SoapTcpFrame
name|frame
init|=
operator|new
name|SoapTcpFrame
argument_list|()
decl_stmt|;
name|frame
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setChannelId
argument_list|(
name|channelId
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setPayload
argument_list|(
name|this
operator|.
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|SoapTcpUtils
operator|.
name|writeMessageFrame
argument_list|(
name|outStream
argument_list|,
name|frame
argument_list|)
expr_stmt|;
name|messageSent
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|thresholdReached
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Send start-chunk message if didn't send any message yet or message chunk if already send message
if|if
condition|(
name|messageSent
condition|)
block|{
name|SoapTcpFrameHeader
name|header
init|=
operator|new
name|SoapTcpFrameHeader
argument_list|(
name|SoapTcpFrameHeader
operator|.
name|MESSAGE_CHUNK
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|header
operator|.
name|setChannelId
argument_list|(
name|channelId
argument_list|)
expr_stmt|;
name|SoapTcpFrame
name|frame
init|=
operator|new
name|SoapTcpFrame
argument_list|()
decl_stmt|;
name|frame
operator|.
name|setChannelId
argument_list|(
name|channelId
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setPayload
argument_list|(
name|this
operator|.
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|SoapTcpUtils
operator|.
name|writeMessageFrame
argument_list|(
name|outStream
argument_list|,
name|frame
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SoapTcpFrameContentDescription
name|contentDesc
init|=
operator|new
name|SoapTcpFrameContentDescription
argument_list|()
decl_stmt|;
name|contentDesc
operator|.
name|setContentId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
name|contentDesc
operator|.
name|setParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|SoapTcpFrameHeader
name|header
init|=
operator|new
name|SoapTcpFrameHeader
argument_list|(
name|SoapTcpFrameHeader
operator|.
name|MESSAGE_START_CHUNK
argument_list|,
name|contentDesc
argument_list|)
decl_stmt|;
name|header
operator|.
name|setChannelId
argument_list|(
name|channelId
argument_list|)
expr_stmt|;
name|SoapTcpFrame
name|frame
init|=
operator|new
name|SoapTcpFrame
argument_list|()
decl_stmt|;
name|frame
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setChannelId
argument_list|(
name|channelId
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setPayload
argument_list|(
name|this
operator|.
name|buffer
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|SoapTcpUtils
operator|.
name|writeMessageFrame
argument_list|(
name|outStream
argument_list|,
name|frame
argument_list|)
expr_stmt|;
name|messageSent
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|messageSent
condition|)
block|{
name|InputStream
name|inputStream
init|=
name|getResponse
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
name|outMessage
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|Message
name|inMessage
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|inMessage
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|inputStream
argument_list|)
expr_stmt|;
name|incomingObserver
operator|.
name|onMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onFirstWrite
parameter_list|()
throws|throws
name|IOException
block|{              }
specifier|private
name|InputStream
name|getResponse
parameter_list|()
block|{
name|SoapTcpFrame
name|responseMessage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|responseMessage
operator|=
name|SoapTcpUtils
operator|.
name|readMessageFrame
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e2
parameter_list|)
block|{
name|e2
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|responseMessage
operator|!=
literal|null
condition|)
block|{
name|int
name|frameType
init|=
name|responseMessage
operator|.
name|getHeader
argument_list|()
operator|.
name|getFrameType
argument_list|()
decl_stmt|;
if|if
condition|(
name|frameType
operator|==
name|SoapTcpFrameHeader
operator|.
name|SINGLE_FRAME_MESSAGE
operator|||
name|frameType
operator|==
name|SoapTcpFrameHeader
operator|.
name|ERROR_MESSAGE
operator|||
name|frameType
operator|==
name|SoapTcpFrameHeader
operator|.
name|NULL_MESSAGE
condition|)
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|responseMessage
operator|.
name|getPayload
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|frameType
operator|==
name|SoapTcpFrameHeader
operator|.
name|MESSAGE_START_CHUNK
condition|)
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|4
operator|*
name|chunkSize
argument_list|)
decl_stmt|;
try|try
block|{
name|baos
operator|.
name|write
argument_list|(
name|responseMessage
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|frameType
operator|!=
name|SoapTcpFrameHeader
operator|.
name|MESSAGE_END_CHUNK
condition|)
block|{
try|try
block|{
name|SoapTcpFrame
name|frame
init|=
name|SoapTcpUtils
operator|.
name|readMessageFrame
argument_list|(
name|inStream
argument_list|)
decl_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|frame
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

