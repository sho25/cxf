begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap12
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBindingConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
import|;
end_import

begin_class
specifier|public
class|class
name|SoapActionInInterceptor
extends|extends
name|AbstractSoapInterceptor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SoapActionInInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALLOW_NON_MATCHING_TO_DEFAULT
init|=
literal|"allowNonMatchingToDefaultSoapAction"
decl_stmt|;
specifier|public
name|SoapActionInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|READ
argument_list|)
expr_stmt|;
name|addAfter
argument_list|(
name|ReadHeadersInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addAfter
argument_list|(
name|EndpointSelectionInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getSoapAction
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|m
operator|instanceof
name|SoapMessage
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SoapMessage
name|message
init|=
operator|(
name|SoapMessage
operator|)
name|m
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getVersion
argument_list|()
operator|instanceof
name|Soap11
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sa
init|=
name|headers
operator|.
name|get
argument_list|(
name|SoapBindingConstants
operator|.
name|SOAP_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|sa
operator|!=
literal|null
operator|&&
name|sa
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|action
init|=
name|sa
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|action
operator|=
name|action
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|action
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|action
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|message
operator|.
name|getVersion
argument_list|()
operator|instanceof
name|Soap12
condition|)
block|{
name|String
name|ct
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ct
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|start
init|=
name|ct
operator|.
name|indexOf
argument_list|(
literal|"action="
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|end
decl_stmt|;
if|if
condition|(
name|ct
operator|.
name|charAt
argument_list|(
name|start
operator|+
literal|7
argument_list|)
operator|==
literal|'\"'
condition|)
block|{
name|start
operator|+=
literal|8
expr_stmt|;
name|end
operator|=
name|ct
operator|.
name|indexOf
argument_list|(
literal|'\"'
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|start
operator|+=
literal|7
expr_stmt|;
name|end
operator|=
name|ct
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|,
name|start
argument_list|)
expr_stmt|;
if|if
condition|(
name|end
operator|==
operator|-
literal|1
condition|)
block|{
name|end
operator|=
name|ct
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ct
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
throws|throws
name|Fault
block|{
if|if
condition|(
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|action
init|=
name|getSoapAction
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|getAndSetOperation
argument_list|(
name|message
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|SoapBindingConstants
operator|.
name|SOAP_ACTION
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|getAndSetOperation
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|String
name|action
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|action
argument_list|)
condition|)
block|{
return|return;
block|}
name|Exchange
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|Endpoint
name|ep
init|=
name|ex
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ep
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|BindingOperationInfo
name|bindingOp
init|=
literal|null
decl_stmt|;
name|Collection
argument_list|<
name|BindingOperationInfo
argument_list|>
name|bops
init|=
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|getOperations
argument_list|()
decl_stmt|;
if|if
condition|(
name|bops
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|bops
control|)
block|{
if|if
condition|(
name|isActionMatch
argument_list|(
name|message
argument_list|,
name|boi
argument_list|,
name|action
argument_list|)
condition|)
block|{
if|if
condition|(
name|bindingOp
operator|!=
literal|null
condition|)
block|{
comment|//more than one op with the same action, will need to parse normally
return|return;
block|}
name|bindingOp
operator|=
name|boi
expr_stmt|;
block|}
name|Object
name|o
init|=
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAM_ACTION_QNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAW_ACTION_QNAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
name|action
operator|.
name|equals
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|bindingOp
operator|!=
literal|null
operator|&&
name|bindingOp
operator|!=
name|boi
condition|)
block|{
comment|//more than one op with the same action, will need to parse normally
return|return;
block|}
name|bindingOp
operator|=
name|boi
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bindingOp
operator|==
literal|null
condition|)
block|{
comment|//we didn't match the an operation, we'll try again later to make
comment|//sure the incoming message did end up matching an operation.
comment|//This could occur in some cases like WS-RM and WS-SecConv that will
comment|//intercept the message with a new endpoint/operation
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SoapActionInAttemptTwoInterceptor
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ex
operator|.
name|put
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|bindingOp
argument_list|)
expr_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|OperationInfo
operator|.
name|class
argument_list|,
name|bindingOp
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|SoapActionInAttemptTwoInterceptor
extends|extends
name|AbstractSoapInterceptor
block|{
specifier|public
name|SoapActionInAttemptTwoInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_LOGICAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|BindingOperationInfo
name|boi
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getBindingOperationInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|boi
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|action
init|=
name|getSoapAction
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|action
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isActionMatch
argument_list|(
name|message
argument_list|,
name|boi
argument_list|,
name|action
argument_list|)
condition|)
block|{
return|return;
block|}
name|Object
name|o
init|=
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAM_ACTION_QNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAW_ACTION_QNAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
name|action
operator|.
name|equals
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|Fault
argument_list|(
literal|"SOAP_ACTION_MISMATCH"
argument_list|,
name|LOG
argument_list|,
literal|null
argument_list|,
name|action
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isActionMatch
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|SoapOperationInfo
name|soi
init|=
name|boi
operator|.
name|getExtensor
argument_list|(
name|SoapOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|allowNoMatchingToDefault
init|=
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|ALLOW_NON_MATCHING_TO_DEFAULT
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|soi
operator|!=
literal|null
operator|)
operator|&&
name|action
operator|.
name|equals
argument_list|(
name|soi
operator|.
name|getAction
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
operator|(
name|soi
operator|!=
literal|null
operator|)
operator|&&
name|allowNoMatchingToDefault
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|soi
operator|.
name|getAction
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
end_class

end_unit

