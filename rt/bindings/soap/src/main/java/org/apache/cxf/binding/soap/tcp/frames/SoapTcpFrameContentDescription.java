begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|tcp
operator|.
name|frames
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|tcp
operator|.
name|DataCodingUtils
import|;
end_import

begin_class
specifier|public
class|class
name|SoapTcpFrameContentDescription
block|{
specifier|private
name|int
name|contentId
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
specifier|public
name|int
name|getContentId
parameter_list|()
block|{
return|return
name|contentId
return|;
block|}
specifier|public
name|void
name|setContentId
parameter_list|(
specifier|final
name|int
name|contentId
parameter_list|)
block|{
name|this
operator|.
name|contentId
operator|=
name|contentId
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
specifier|public
name|void
name|setParameters
parameter_list|(
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|OutputStream
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|DataCodingUtils
operator|.
name|writeInts4
argument_list|(
name|output
argument_list|,
name|contentId
argument_list|,
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|keys
init|=
name|parameters
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Integer
name|paramId
init|=
name|keys
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|String
name|paramValue
init|=
name|parameters
operator|.
name|get
argument_list|(
name|paramId
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|paramValueBytes
init|=
name|paramValue
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|DataCodingUtils
operator|.
name|writeInts4
argument_list|(
name|output
argument_list|,
name|paramId
operator|.
name|intValue
argument_list|()
argument_list|,
name|paramValueBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|output
operator|.
name|write
argument_list|(
name|paramValueBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

