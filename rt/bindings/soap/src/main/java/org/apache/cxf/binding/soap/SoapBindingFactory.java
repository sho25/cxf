begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingInput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingOutput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Import
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|WSDLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensionRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|mime
operator|.
name|MIMEContent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|mime
operator|.
name|MIMEMultipartRelated
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|mime
operator|.
name|MIMEPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|AbstractSoapInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|CheckFaultInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|EndpointSelectionInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|MustUnderstandInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|RPCInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|RPCOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|ReadHeadersInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|Soap11FaultInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|Soap11FaultOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|Soap12FaultInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|Soap12FaultOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|SoapActionInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|SoapHeaderInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|SoapHeaderOutFilterInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|SoapOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|SoapPreProtocolOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|StartBodyInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|jms
operator|.
name|interceptor
operator|.
name|SoapJMSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|jms
operator|.
name|interceptor
operator|.
name|SoapJMSInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapBindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapBodyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapHeaderInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|SoapBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|SoapBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|SoapHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|SoapOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|injection
operator|.
name|NoJSR250Annotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractOutDatabindingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AttachmentInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AttachmentOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|StaxInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|StaxOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingFaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ChainInitiationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MultipleEndpointObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|ContextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|WSAddressingFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|binding
operator|.
name|AbstractWSDLBindingFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|interceptors
operator|.
name|BareOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|interceptors
operator|.
name|DocLiteralInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|interceptors
operator|.
name|WrappedOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
operator|.
name|cast
import|;
end_import

begin_class
annotation|@
name|NoJSR250Annotations
argument_list|(
name|unlessNull
operator|=
block|{
literal|"bus"
block|}
argument_list|)
specifier|public
class|class
name|SoapBindingFactory
extends|extends
name|AbstractWSDLBindingFactory
block|{
specifier|public
specifier|static
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|DEFAULT_NAMESPACES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"http://schemas.xmlsoap.org/soap/"
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/soap/"
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/soap12/"
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/soap/http"
argument_list|,
literal|"http://www.w3.org/2003/05/soap/bindings/HTTP/"
argument_list|,
literal|"http://www.w3.org/2010/soapjms/"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SOAP_11_BINDING
init|=
literal|"http://schemas.xmlsoap.org/wsdl/soap/"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SOAP_12_BINDING
init|=
literal|"http://schemas.xmlsoap.org/wsdl/soap12/"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HEADER
init|=
literal|"messagepart.isheader"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OUT_OF_BAND_HEADER
init|=
literal|"messagepart.is_out_of_band_header"
decl_stmt|;
specifier|public
name|SoapBindingFactory
parameter_list|()
block|{     }
specifier|public
name|SoapBindingFactory
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|super
argument_list|(
name|b
argument_list|,
name|DEFAULT_NAMESPACES
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BindingInfo
name|createBindingInfo
parameter_list|(
name|ServiceInfo
name|si
parameter_list|,
name|String
name|bindingid
parameter_list|,
name|Object
name|conf
parameter_list|)
block|{
name|SoapBindingConfiguration
name|config
decl_stmt|;
if|if
condition|(
name|conf
operator|instanceof
name|SoapBindingConfiguration
condition|)
block|{
name|config
operator|=
operator|(
name|SoapBindingConfiguration
operator|)
name|conf
expr_stmt|;
block|}
else|else
block|{
name|config
operator|=
operator|new
name|SoapBindingConfiguration
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|WSDLConstants
operator|.
name|NS_SOAP12
operator|.
name|equals
argument_list|(
name|bindingid
argument_list|)
operator|||
name|WSDLConstants
operator|.
name|NS_SOAP12_HTTP_BINDING
operator|.
name|equals
argument_list|(
name|bindingid
argument_list|)
condition|)
block|{
name|config
operator|.
name|setVersion
argument_list|(
name|Soap12
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setTransportURI
argument_list|(
name|WSDLConstants
operator|.
name|NS_SOAP_HTTP_TRANSPORT
argument_list|)
expr_stmt|;
block|}
name|SoapBindingInfo
name|info
init|=
operator|new
name|SoapBindingInfo
argument_list|(
name|si
argument_list|,
name|bindingid
argument_list|,
name|config
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|setName
argument_list|(
name|config
operator|.
name|getBindingName
argument_list|(
name|si
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setStyle
argument_list|(
name|config
operator|.
name|getStyle
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setTransportURI
argument_list|(
name|config
operator|.
name|getTransportURI
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|isMtomEnabled
argument_list|()
condition|)
block|{
name|info
operator|.
name|setProperty
argument_list|(
name|Message
operator|.
name|MTOM_ENABLED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|OperationInfo
name|op
range|:
name|si
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|SoapOperationInfo
name|sop
init|=
operator|new
name|SoapOperationInfo
argument_list|()
decl_stmt|;
name|sop
operator|.
name|setAction
argument_list|(
name|config
operator|.
name|getSoapAction
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
name|sop
operator|.
name|setStyle
argument_list|(
name|config
operator|.
name|getStyle
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|bop
init|=
name|info
operator|.
name|buildOperation
argument_list|(
name|op
operator|.
name|getName
argument_list|()
argument_list|,
name|op
operator|.
name|getInputName
argument_list|()
argument_list|,
name|op
operator|.
name|getOutputName
argument_list|()
argument_list|)
decl_stmt|;
name|bop
operator|.
name|addExtensor
argument_list|(
name|sop
argument_list|)
expr_stmt|;
name|info
operator|.
name|addOperation
argument_list|(
name|bop
argument_list|)
expr_stmt|;
name|BindingMessageInfo
name|bInput
init|=
name|bop
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|bInput
operator|!=
literal|null
condition|)
block|{
name|MessageInfo
name|input
init|=
literal|null
decl_stmt|;
name|BindingMessageInfo
name|unwrappedMsg
init|=
name|bInput
decl_stmt|;
if|if
condition|(
name|bop
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
name|input
operator|=
name|bop
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getUnwrappedOperation
argument_list|()
operator|.
name|getInput
argument_list|()
expr_stmt|;
name|unwrappedMsg
operator|=
name|bop
operator|.
name|getUnwrappedOperation
argument_list|()
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|input
operator|=
name|bop
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
name|setupHeaders
argument_list|(
name|bop
argument_list|,
name|bInput
argument_list|,
name|unwrappedMsg
argument_list|,
name|input
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
name|BindingMessageInfo
name|bOutput
init|=
name|bop
operator|.
name|getOutput
argument_list|()
decl_stmt|;
if|if
condition|(
name|bOutput
operator|!=
literal|null
condition|)
block|{
name|MessageInfo
name|output
init|=
literal|null
decl_stmt|;
name|BindingMessageInfo
name|unwrappedMsg
init|=
name|bOutput
decl_stmt|;
if|if
condition|(
name|bop
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
name|output
operator|=
name|bop
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getUnwrappedOperation
argument_list|()
operator|.
name|getOutput
argument_list|()
expr_stmt|;
name|unwrappedMsg
operator|=
name|bop
operator|.
name|getUnwrappedOperation
argument_list|()
operator|.
name|getOutput
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|output
operator|=
name|bop
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
expr_stmt|;
block|}
name|setupHeaders
argument_list|(
name|bop
argument_list|,
name|bOutput
argument_list|,
name|unwrappedMsg
argument_list|,
name|output
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|createSoapBinding
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSDLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
specifier|private
name|void
name|createSoapBinding
parameter_list|(
specifier|final
name|SoapBindingInfo
name|bi
parameter_list|)
throws|throws
name|WSDLException
block|{
name|boolean
name|isSoap12
init|=
name|bi
operator|.
name|getSoapVersion
argument_list|()
operator|instanceof
name|Soap12
decl_stmt|;
name|Bus
name|bs
init|=
name|getBus
argument_list|()
decl_stmt|;
name|WSDLManager
name|m
init|=
name|bs
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExtensionRegistry
name|extensionRegistry
init|=
name|m
operator|.
name|getExtensionRegistry
argument_list|()
decl_stmt|;
name|SoapBinding
name|soapBinding
init|=
name|SOAPBindingUtil
operator|.
name|createSoapBinding
argument_list|(
name|extensionRegistry
argument_list|,
name|isSoap12
argument_list|)
decl_stmt|;
name|soapBinding
operator|.
name|setStyle
argument_list|(
name|bi
operator|.
name|getStyle
argument_list|()
argument_list|)
expr_stmt|;
name|soapBinding
operator|.
name|setTransportURI
argument_list|(
name|bi
operator|.
name|getTransportURI
argument_list|()
argument_list|)
expr_stmt|;
name|bi
operator|.
name|addExtensor
argument_list|(
name|soapBinding
argument_list|)
expr_stmt|;
for|for
control|(
name|BindingOperationInfo
name|b
range|:
name|bi
operator|.
name|getOperations
argument_list|()
control|)
block|{
for|for
control|(
name|BindingFaultInfo
name|faultInfo
range|:
name|b
operator|.
name|getFaults
argument_list|()
control|)
block|{
name|SoapFault
name|soapFault
init|=
name|SOAPBindingUtil
operator|.
name|createSoapFault
argument_list|(
name|extensionRegistry
argument_list|,
name|isSoap12
argument_list|)
decl_stmt|;
name|soapFault
operator|.
name|setUse
argument_list|(
literal|"literal"
argument_list|)
expr_stmt|;
name|soapFault
operator|.
name|setName
argument_list|(
name|faultInfo
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getFaultName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|faultInfo
operator|.
name|addExtensor
argument_list|(
name|soapFault
argument_list|)
expr_stmt|;
block|}
name|SoapOperationInfo
name|soi
init|=
name|b
operator|.
name|getExtensor
argument_list|(
name|SoapOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|SoapOperation
name|soapOperation
init|=
name|SOAPBindingUtil
operator|.
name|createSoapOperation
argument_list|(
name|extensionRegistry
argument_list|,
name|isSoap12
argument_list|)
decl_stmt|;
name|soapOperation
operator|.
name|setSoapActionURI
argument_list|(
name|soi
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|soapOperation
operator|.
name|setStyle
argument_list|(
name|soi
operator|.
name|getStyle
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isRpc
init|=
literal|"rpc"
operator|.
name|equals
argument_list|(
name|soapOperation
operator|.
name|getStyle
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|addExtensor
argument_list|(
name|soapOperation
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|bodyParts
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|SoapHeaderInfo
argument_list|>
name|headerInfos
init|=
name|b
operator|.
name|getInput
argument_list|()
operator|.
name|getExtensors
argument_list|(
name|SoapHeaderInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerInfos
operator|!=
literal|null
operator|&&
name|headerInfos
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|bodyParts
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|b
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|bodyParts
operator|.
name|add
argument_list|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SoapHeaderInfo
name|headerInfo
range|:
name|headerInfos
control|)
block|{
name|SoapHeader
name|soapHeader
init|=
name|SOAPBindingUtil
operator|.
name|createSoapHeader
argument_list|(
name|extensionRegistry
argument_list|,
name|BindingInput
operator|.
name|class
argument_list|,
name|isSoap12
argument_list|)
decl_stmt|;
name|soapHeader
operator|.
name|setMessage
argument_list|(
name|b
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|soapHeader
operator|.
name|setPart
argument_list|(
name|headerInfo
operator|.
name|getPart
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|soapHeader
operator|.
name|setUse
argument_list|(
literal|"literal"
argument_list|)
expr_stmt|;
name|bodyParts
operator|.
name|remove
argument_list|(
name|headerInfo
operator|.
name|getPart
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|headerInfo
operator|.
name|getPart
argument_list|()
operator|.
name|setProperty
argument_list|(
name|HEADER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|b
operator|.
name|getInput
argument_list|()
operator|.
name|addExtensor
argument_list|(
name|soapHeader
argument_list|)
expr_stmt|;
block|}
block|}
name|SoapBody
name|body
init|=
name|SOAPBindingUtil
operator|.
name|createSoapBody
argument_list|(
name|extensionRegistry
argument_list|,
name|BindingInput
operator|.
name|class
argument_list|,
name|isSoap12
argument_list|)
decl_stmt|;
name|body
operator|.
name|setUse
argument_list|(
literal|"literal"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRpc
condition|)
block|{
name|body
operator|.
name|setNamespaceURI
argument_list|(
name|b
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bodyParts
operator|!=
literal|null
condition|)
block|{
name|body
operator|.
name|setParts
argument_list|(
name|bodyParts
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|getInput
argument_list|()
operator|.
name|addExtensor
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|bodyParts
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|SoapHeaderInfo
argument_list|>
name|headerInfos
init|=
name|b
operator|.
name|getOutput
argument_list|()
operator|.
name|getExtensors
argument_list|(
name|SoapHeaderInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerInfos
operator|!=
literal|null
operator|&&
name|headerInfos
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|bodyParts
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|b
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|bodyParts
operator|.
name|add
argument_list|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SoapHeaderInfo
name|headerInfo
range|:
name|headerInfos
control|)
block|{
name|SoapHeader
name|soapHeader
init|=
name|SOAPBindingUtil
operator|.
name|createSoapHeader
argument_list|(
name|extensionRegistry
argument_list|,
name|BindingOutput
operator|.
name|class
argument_list|,
name|isSoap12
argument_list|)
decl_stmt|;
name|soapHeader
operator|.
name|setMessage
argument_list|(
name|b
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|soapHeader
operator|.
name|setPart
argument_list|(
name|headerInfo
operator|.
name|getPart
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|soapHeader
operator|.
name|setUse
argument_list|(
literal|"literal"
argument_list|)
expr_stmt|;
name|bodyParts
operator|.
name|remove
argument_list|(
name|headerInfo
operator|.
name|getPart
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|getOutput
argument_list|()
operator|.
name|addExtensor
argument_list|(
name|soapHeader
argument_list|)
expr_stmt|;
block|}
block|}
name|SoapBody
name|body
init|=
name|SOAPBindingUtil
operator|.
name|createSoapBody
argument_list|(
name|extensionRegistry
argument_list|,
name|BindingOutput
operator|.
name|class
argument_list|,
name|isSoap12
argument_list|)
decl_stmt|;
name|body
operator|.
name|setUse
argument_list|(
literal|"literal"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRpc
condition|)
block|{
name|body
operator|.
name|setNamespaceURI
argument_list|(
name|b
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bodyParts
operator|!=
literal|null
condition|)
block|{
name|body
operator|.
name|setParts
argument_list|(
name|bodyParts
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|getOutput
argument_list|()
operator|.
name|addExtensor
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setupHeaders
parameter_list|(
name|BindingOperationInfo
name|op
parameter_list|,
name|BindingMessageInfo
name|bMsg
parameter_list|,
name|BindingMessageInfo
name|unwrappedBMsg
parameter_list|,
name|MessageInfo
name|msg
parameter_list|,
name|SoapBindingConfiguration
name|config
parameter_list|)
block|{
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|MessagePartInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|msg
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
name|config
operator|.
name|isHeader
argument_list|(
name|op
argument_list|,
name|part
argument_list|)
condition|)
block|{
name|SoapHeaderInfo
name|headerInfo
init|=
operator|new
name|SoapHeaderInfo
argument_list|()
decl_stmt|;
name|headerInfo
operator|.
name|setPart
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|headerInfo
operator|.
name|setUse
argument_list|(
name|config
operator|.
name|getUse
argument_list|()
argument_list|)
expr_stmt|;
name|bMsg
operator|.
name|addExtensor
argument_list|(
name|headerInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
name|unwrappedBMsg
operator|.
name|setMessageParts
argument_list|(
name|parts
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Binding
name|createBinding
parameter_list|(
name|BindingInfo
name|binding
parameter_list|)
block|{
comment|// TODO what about the mix style/use?
comment|// The default style should be doc-lit wrapped.
name|String
name|parameterStyle
init|=
name|SoapBindingConstants
operator|.
name|PARAMETER_STYLE_WRAPPED
decl_stmt|;
name|String
name|bindingStyle
init|=
name|SoapBindingConstants
operator|.
name|BINDING_STYLE_DOC
decl_stmt|;
name|boolean
name|hasWrapped
init|=
literal|false
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBinding
name|sb
init|=
literal|null
decl_stmt|;
name|SoapVersion
name|version
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|binding
operator|instanceof
name|SoapBindingInfo
condition|)
block|{
name|SoapBindingInfo
name|sbi
init|=
operator|(
name|SoapBindingInfo
operator|)
name|binding
decl_stmt|;
name|version
operator|=
name|sbi
operator|.
name|getSoapVersion
argument_list|()
expr_stmt|;
name|sb
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBinding
argument_list|(
name|binding
argument_list|,
name|version
argument_list|)
expr_stmt|;
comment|// Service wide style
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|sbi
operator|.
name|getStyle
argument_list|()
argument_list|)
condition|)
block|{
name|bindingStyle
operator|=
name|sbi
operator|.
name|getStyle
argument_list|()
expr_stmt|;
block|}
name|boolean
name|hasRPC
init|=
literal|false
decl_stmt|;
name|boolean
name|hasDoc
init|=
literal|false
decl_stmt|;
comment|// Operation wide style, what to do with the mixed style/use?
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|sbi
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|String
name|st
init|=
name|sbi
operator|.
name|getStyle
argument_list|(
name|boi
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|!=
literal|null
condition|)
block|{
name|bindingStyle
operator|=
name|st
expr_stmt|;
if|if
condition|(
name|SoapBindingConstants
operator|.
name|BINDING_STYLE_RPC
operator|.
name|equalsIgnoreCase
argument_list|(
name|st
argument_list|)
condition|)
block|{
name|hasRPC
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|hasDoc
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|boi
operator|.
name|getUnwrappedOperation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|parameterStyle
operator|=
name|SoapBindingConstants
operator|.
name|PARAMETER_STYLE_BARE
expr_stmt|;
block|}
else|else
block|{
name|hasWrapped
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|binding
operator|.
name|getService
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"soap.force.doclit.bare"
argument_list|)
argument_list|)
condition|)
block|{
name|hasDoc
operator|=
literal|true
expr_stmt|;
name|hasRPC
operator|=
literal|false
expr_stmt|;
name|parameterStyle
operator|=
name|SoapBindingConstants
operator|.
name|PARAMETER_STYLE_BARE
expr_stmt|;
name|bindingStyle
operator|=
name|SoapBindingConstants
operator|.
name|BINDING_STYLE_DOC
expr_stmt|;
block|}
if|if
condition|(
name|hasRPC
operator|&&
name|hasDoc
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"WSI-BP prohibits RPC and Document style "
operator|+
literal|"operations in same service."
argument_list|)
throw|;
block|}
comment|//jms
if|if
condition|(
name|sbi
operator|.
name|getTransportURI
argument_list|()
operator|.
name|equals
argument_list|(
name|SoapJMSConstants
operator|.
name|SOAP_JMS_SPECIFICIATION_TRANSPORTID
argument_list|)
condition|)
block|{
name|sb
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SoapJMSInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not initialize SoapBinding, BindingInfo is not SoapBindingInfo"
argument_list|)
throw|;
block|}
name|sb
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|StaxOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SoapOutInterceptor
argument_list|(
name|getBus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AttachmentInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|StaxInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SoapActionInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AttachmentOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|StaxOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|SoapHeaderOutFilterInterceptor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
if|if
condition|(
name|SoapBindingConstants
operator|.
name|BINDING_STYLE_RPC
operator|.
name|equalsIgnoreCase
argument_list|(
name|bindingStyle
argument_list|)
condition|)
block|{
name|sb
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RPCInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RPCOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SoapBindingConstants
operator|.
name|BINDING_STYLE_DOC
operator|.
name|equalsIgnoreCase
argument_list|(
name|bindingStyle
argument_list|)
operator|&&
name|SoapBindingConstants
operator|.
name|PARAMETER_STYLE_BARE
operator|.
name|equalsIgnoreCase
argument_list|(
name|parameterStyle
argument_list|)
condition|)
block|{
comment|//sb.getInInterceptors().add(new BareInInterceptor());
name|sb
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DocLiteralInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasWrapped
condition|)
block|{
name|sb
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WrappedOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BareOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//sb.getInInterceptors().add(new WrappedInInterceptor());
name|sb
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DocLiteralInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WrappedOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|BareOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SoapHeaderInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ReadHeadersInterceptor
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|StartBodyInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|CheckFaultInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MustUnderstandInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SoapPreProtocolOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SoapOutInterceptor
argument_list|(
name|getBus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SoapOutInterceptor
argument_list|(
name|getBus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|SoapHeaderOutFilterInterceptor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|.
name|getVersion
argument_list|()
operator|==
literal|1.1
condition|)
block|{
name|sb
operator|.
name|getInFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Soap11FaultInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Soap11FaultOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|.
name|getVersion
argument_list|()
operator|==
literal|1.2
condition|)
block|{
name|sb
operator|.
name|getInFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Soap12FaultInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Soap12FaultOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|binding
operator|.
name|getService
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|EndpointInfo
name|ei
range|:
name|binding
operator|.
name|getService
argument_list|()
operator|.
name|getEndpoints
argument_list|()
control|)
block|{
if|if
condition|(
name|ei
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
operator|&&
name|ei
operator|.
name|getAddress
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"soap.udp"
argument_list|)
condition|)
block|{
name|setupUDP
argument_list|(
name|sb
argument_list|,
name|ei
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|sb
return|;
block|}
specifier|protected
name|void
name|setupUDP
parameter_list|(
name|InterceptorProvider
name|p
parameter_list|,
name|EndpointInfo
name|ei
parameter_list|)
block|{
comment|//soap UDP requires ws-addressing turned on
name|WSAddressingFeature
name|add
init|=
operator|new
name|WSAddressingFeature
argument_list|()
decl_stmt|;
name|add
operator|.
name|setAddressingRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|add
operator|.
name|initialize
argument_list|(
name|p
argument_list|,
name|bus
argument_list|)
expr_stmt|;
comment|// UDP has a strict size limit on messages (<64K) so we'll try to shrink the
comment|// message a little by putting the WSA namespace into the
comment|// the soap:env which allows it to not be written on every header
comment|// element as well as disable the output stream optimizations (doesn't really
comment|// matter on such small messages anyway) to make sure we pickup those
comment|// namespaces that are declared there.
name|p
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AbstractSoapInterceptor
argument_list|(
name|Phase
operator|.
name|POST_LOGICAL
argument_list|)
block|{
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|AddressingProperties
name|p
init|=
name|ContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|ns
init|=
name|p
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsMap
init|=
name|message
operator|.
name|getEnvelopeNs
argument_list|()
decl_stmt|;
if|if
condition|(
name|nsMap
operator|==
literal|null
condition|)
block|{
name|nsMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nsMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|nsMap
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|put
argument_list|(
literal|"soap.env.ns.map"
argument_list|,
name|nsMap
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nsMap
operator|.
name|containsValue
argument_list|(
name|ns
argument_list|)
operator|&&
operator|!
name|nsMap
operator|.
name|containsKey
argument_list|(
literal|"wsa"
argument_list|)
condition|)
block|{
name|nsMap
operator|.
name|put
argument_list|(
literal|"wsa"
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|put
argument_list|(
name|AbstractOutDatabindingInterceptor
operator|.
name|DISABLE_OUTPUTSTREAM_OPTIMIZATION
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// don't send the optional ReplyTo headers if we don't need to either
name|ei
operator|.
name|setProperty
argument_list|(
literal|"ws-addressing.write.optional.replyto"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addMessageFromBinding
parameter_list|(
name|ExtensibilityElement
name|ext
parameter_list|,
name|BindingOperationInfo
name|bop
parameter_list|,
name|boolean
name|isInput
parameter_list|)
block|{
name|SoapHeader
name|header
init|=
name|SOAPBindingUtil
operator|.
name|getSoapHeader
argument_list|(
name|ext
argument_list|)
decl_stmt|;
name|ServiceInfo
name|serviceInfo
init|=
name|bop
operator|.
name|getBinding
argument_list|()
operator|.
name|getService
argument_list|()
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
operator|&&
name|serviceInfo
operator|.
name|getMessage
argument_list|(
name|header
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Definition
name|def
init|=
operator|(
name|Definition
operator|)
name|serviceInfo
operator|.
name|getProperty
argument_list|(
name|WSDLServiceBuilder
operator|.
name|WSDL_DEFINITION
argument_list|)
decl_stmt|;
name|SchemaCollection
name|schemas
init|=
name|serviceInfo
operator|.
name|getXmlSchemaCollection
argument_list|()
decl_stmt|;
if|if
condition|(
name|def
operator|!=
literal|null
operator|&&
name|schemas
operator|!=
literal|null
condition|)
block|{
name|QName
name|qn
init|=
name|header
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|javax
operator|.
name|wsdl
operator|.
name|Message
name|msg
init|=
name|findMessage
argument_list|(
name|qn
argument_list|,
name|def
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|addOutOfBandParts
argument_list|(
name|bop
argument_list|,
name|msg
argument_list|,
name|schemas
argument_list|,
name|isInput
argument_list|,
name|header
operator|.
name|getPart
argument_list|()
argument_list|)
expr_stmt|;
name|serviceInfo
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Problem with WSDL: soap:header element"
operator|+
literal|" for operation "
operator|+
name|bop
operator|.
name|getName
argument_list|()
operator|+
literal|" is referring to an undefined wsdl:message element: "
operator|+
name|qn
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|javax
operator|.
name|wsdl
operator|.
name|Message
name|findMessage
parameter_list|(
name|QName
name|qn
parameter_list|,
name|Definition
name|def
parameter_list|)
block|{
name|javax
operator|.
name|wsdl
operator|.
name|Message
name|msg
init|=
name|def
operator|.
name|getMessage
argument_list|(
name|qn
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
name|msg
operator|=
name|findMessage
argument_list|(
name|qn
argument_list|,
name|def
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Definition
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|msg
return|;
block|}
specifier|private
name|javax
operator|.
name|wsdl
operator|.
name|Message
name|findMessage
parameter_list|(
name|QName
name|qn
parameter_list|,
name|Definition
name|def
parameter_list|,
name|List
argument_list|<
name|Definition
argument_list|>
name|done
parameter_list|)
block|{
name|javax
operator|.
name|wsdl
operator|.
name|Message
name|msg
init|=
name|def
operator|.
name|getMessage
argument_list|(
name|qn
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|done
operator|.
name|contains
argument_list|(
name|def
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|done
operator|.
name|add
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|List
argument_list|<
name|Import
argument_list|>
argument_list|>
name|ilist
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|def
operator|.
name|getImports
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Import
argument_list|>
name|list
range|:
name|ilist
control|)
block|{
for|for
control|(
name|Import
name|i
range|:
name|list
control|)
block|{
if|if
condition|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|i
operator|.
name|getDefinition
argument_list|()
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|i
operator|.
name|getDefinition
argument_list|()
operator|.
name|getMessage
argument_list|(
name|qn
argument_list|)
return|;
block|}
block|}
block|}
for|for
control|(
name|List
argument_list|<
name|Import
argument_list|>
name|list
range|:
name|ilist
control|)
block|{
for|for
control|(
name|Import
name|i
range|:
name|list
control|)
block|{
name|msg
operator|=
name|findMessage
argument_list|(
name|qn
argument_list|,
name|i
operator|.
name|getDefinition
argument_list|()
argument_list|,
name|done
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
return|return
name|msg
return|;
block|}
block|}
block|}
block|}
return|return
name|msg
return|;
block|}
specifier|private
name|void
name|addOutOfBandParts
parameter_list|(
specifier|final
name|BindingOperationInfo
name|bop
parameter_list|,
specifier|final
name|javax
operator|.
name|wsdl
operator|.
name|Message
name|msg
parameter_list|,
specifier|final
name|SchemaCollection
name|schemas
parameter_list|,
name|boolean
name|isInput
parameter_list|,
specifier|final
name|String
name|partName
parameter_list|)
block|{
name|MessageInfo
name|minfo
init|=
literal|null
decl_stmt|;
name|MessageInfo
operator|.
name|Type
name|type
decl_stmt|;
name|int
name|nextId
init|=
literal|0
decl_stmt|;
name|minfo
operator|=
name|bop
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
expr_stmt|;
if|if
condition|(
name|minfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|minfo
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
name|part
operator|.
name|getIndex
argument_list|()
operator|>=
name|nextId
condition|)
block|{
name|nextId
operator|=
name|part
operator|.
name|getIndex
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
name|minfo
operator|=
name|bop
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
expr_stmt|;
if|if
condition|(
name|minfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|minfo
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
name|part
operator|.
name|getIndex
argument_list|()
operator|>=
name|nextId
condition|)
block|{
name|nextId
operator|=
name|part
operator|.
name|getIndex
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isInput
condition|)
block|{
name|type
operator|=
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
expr_stmt|;
name|minfo
operator|=
name|bop
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|MessageInfo
operator|.
name|Type
operator|.
name|OUTPUT
expr_stmt|;
name|minfo
operator|=
name|bop
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|minfo
operator|==
literal|null
condition|)
block|{
name|minfo
operator|=
operator|new
name|MessageInfo
argument_list|(
literal|null
argument_list|,
name|type
argument_list|,
name|msg
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buildMessage
argument_list|(
name|minfo
argument_list|,
name|msg
argument_list|,
name|schemas
argument_list|,
name|nextId
argument_list|,
name|partName
argument_list|)
expr_stmt|;
comment|// for wrapped style
name|OperationInfo
name|unwrapped
init|=
name|bop
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getUnwrappedOperation
argument_list|()
decl_stmt|;
if|if
condition|(
name|unwrapped
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|nextId
operator|=
literal|0
expr_stmt|;
name|minfo
operator|=
name|unwrapped
operator|.
name|getInput
argument_list|()
expr_stmt|;
if|if
condition|(
name|minfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|minfo
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
name|part
operator|.
name|getIndex
argument_list|()
operator|>=
name|nextId
condition|)
block|{
name|nextId
operator|=
name|part
operator|.
name|getIndex
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
name|minfo
operator|=
name|unwrapped
operator|.
name|getOutput
argument_list|()
expr_stmt|;
if|if
condition|(
name|minfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|minfo
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
name|part
operator|.
name|getIndex
argument_list|()
operator|>=
name|nextId
condition|)
block|{
name|nextId
operator|=
name|part
operator|.
name|getIndex
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isInput
condition|)
block|{
name|minfo
operator|=
name|unwrapped
operator|.
name|getInput
argument_list|()
expr_stmt|;
name|type
operator|=
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
expr_stmt|;
block|}
else|else
block|{
name|minfo
operator|=
name|unwrapped
operator|.
name|getOutput
argument_list|()
expr_stmt|;
name|type
operator|=
name|MessageInfo
operator|.
name|Type
operator|.
name|OUTPUT
expr_stmt|;
block|}
if|if
condition|(
name|minfo
operator|==
literal|null
condition|)
block|{
name|minfo
operator|=
operator|new
name|MessageInfo
argument_list|(
name|unwrapped
argument_list|,
name|type
argument_list|,
name|msg
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buildMessage
argument_list|(
name|minfo
argument_list|,
name|msg
argument_list|,
name|schemas
argument_list|,
name|nextId
argument_list|,
name|partName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|buildMessage
parameter_list|(
name|MessageInfo
name|minfo
parameter_list|,
name|javax
operator|.
name|wsdl
operator|.
name|Message
name|msg
parameter_list|,
name|SchemaCollection
name|schemas
parameter_list|,
name|int
name|nextId
parameter_list|,
name|String
name|partNameFilter
parameter_list|)
block|{
for|for
control|(
name|Part
name|part
range|:
name|cast
argument_list|(
name|msg
operator|.
name|getParts
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|Part
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|partNameFilter
argument_list|)
operator|||
name|part
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|partNameFilter
argument_list|)
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Problem with WSDL: part element in message "
operator|+
name|msg
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|" does not specify a name."
argument_list|)
throw|;
block|}
name|QName
name|pqname
init|=
operator|new
name|QName
argument_list|(
name|minfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|part
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|pi
init|=
name|minfo
operator|.
name|getMessagePart
argument_list|(
name|pqname
argument_list|)
decl_stmt|;
if|if
condition|(
name|pi
operator|!=
literal|null
operator|&&
name|pi
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|msg
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|pi
operator|=
name|minfo
operator|.
name|addOutOfBandMessagePart
argument_list|(
name|pqname
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|minfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|msg
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
block|{
name|pi
operator|.
name|setMessageContainer
argument_list|(
operator|new
name|MessageInfo
argument_list|(
name|minfo
operator|.
name|getOperation
argument_list|()
argument_list|,
literal|null
argument_list|,
name|msg
operator|.
name|getQName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|part
operator|.
name|getTypeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pi
operator|.
name|setTypeQName
argument_list|(
name|part
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|pi
operator|.
name|setElement
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pi
operator|.
name|setXmlSchema
argument_list|(
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|part
operator|.
name|getTypeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pi
operator|.
name|setElementQName
argument_list|(
name|part
operator|.
name|getElementName
argument_list|()
argument_list|)
expr_stmt|;
name|pi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pi
operator|.
name|setXmlSchema
argument_list|(
name|schemas
operator|.
name|getElementByQName
argument_list|(
name|part
operator|.
name|getElementName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pi
operator|.
name|setProperty
argument_list|(
name|OUT_OF_BAND_HEADER
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|pi
operator|.
name|setProperty
argument_list|(
name|HEADER
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|pi
operator|.
name|setIndex
argument_list|(
name|nextId
argument_list|)
expr_stmt|;
name|nextId
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|BindingInfo
name|createBindingInfo
parameter_list|(
name|ServiceInfo
name|service
parameter_list|,
name|javax
operator|.
name|wsdl
operator|.
name|Binding
name|binding
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
name|SoapBindingInfo
name|bi
init|=
operator|new
name|SoapBindingInfo
argument_list|(
name|service
argument_list|,
name|ns
argument_list|)
decl_stmt|;
comment|// Copy all the extensors
name|initializeBindingInfo
argument_list|(
name|service
argument_list|,
name|binding
argument_list|,
name|bi
argument_list|)
expr_stmt|;
name|SoapBinding
name|wSoapBinding
init|=
name|SOAPBindingUtil
operator|.
name|getSoapBinding
argument_list|(
name|bi
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|bi
operator|.
name|setTransportURI
argument_list|(
name|wSoapBinding
operator|.
name|getTransportURI
argument_list|()
argument_list|)
expr_stmt|;
name|bi
operator|.
name|setStyle
argument_list|(
name|wSoapBinding
operator|.
name|getStyle
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|bi
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|initializeBindingOperation
argument_list|(
name|bi
argument_list|,
name|boi
argument_list|)
expr_stmt|;
block|}
return|return
name|bi
return|;
block|}
specifier|private
name|void
name|initializeBindingOperation
parameter_list|(
name|SoapBindingInfo
name|bi
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
name|SoapOperationInfo
name|soi
init|=
operator|new
name|SoapOperationInfo
argument_list|()
decl_stmt|;
name|SoapOperation
name|soapOp
init|=
name|SOAPBindingUtil
operator|.
name|getSoapOperation
argument_list|(
name|boi
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|soapOp
operator|!=
literal|null
condition|)
block|{
name|String
name|action
init|=
name|soapOp
operator|.
name|getSoapActionURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
name|action
operator|=
literal|""
expr_stmt|;
block|}
name|soi
operator|.
name|setAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|soi
operator|.
name|setStyle
argument_list|(
name|soapOp
operator|.
name|getStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boi
operator|.
name|addExtensor
argument_list|(
name|soi
argument_list|)
expr_stmt|;
if|if
condition|(
name|boi
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|initializeMessage
argument_list|(
name|bi
argument_list|,
name|boi
argument_list|,
name|boi
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|boi
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|initializeMessage
argument_list|(
name|bi
argument_list|,
name|boi
argument_list|,
name|boi
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initializeMessage
parameter_list|(
name|SoapBindingInfo
name|bi
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|BindingMessageInfo
name|bmsg
parameter_list|)
block|{
name|MessageInfo
name|msg
init|=
name|bmsg
operator|.
name|getMessageInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|messageParts
init|=
operator|new
name|ArrayList
argument_list|<
name|MessagePartInfo
argument_list|>
argument_list|()
decl_stmt|;
name|messageParts
operator|.
name|addAll
argument_list|(
name|msg
operator|.
name|getMessageParts
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SoapHeader
argument_list|>
name|headers
init|=
name|SOAPBindingUtil
operator|.
name|getSoapHeaders
argument_list|(
name|bmsg
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SoapHeader
name|header
range|:
name|headers
control|)
block|{
name|SoapHeaderInfo
name|headerInfo
init|=
operator|new
name|SoapHeaderInfo
argument_list|()
decl_stmt|;
name|headerInfo
operator|.
name|setUse
argument_list|(
name|header
operator|.
name|getUse
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|header
operator|.
name|getPart
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Problem with WSDL: soap:header element in operation "
operator|+
name|boi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|" does not specify a part."
argument_list|)
throw|;
block|}
name|MessagePartInfo
name|part
init|=
name|msg
operator|.
name|getMessagePart
argument_list|(
operator|new
name|QName
argument_list|(
name|msg
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|header
operator|.
name|getPart
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
operator|&&
name|header
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|header
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|part
operator|=
literal|null
expr_stmt|;
comment|//out of band, let's find it
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|msg
operator|.
name|getOutOfBandParts
argument_list|()
control|)
block|{
if|if
condition|(
name|mpi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|header
operator|.
name|getPart
argument_list|()
argument_list|)
operator|&&
name|mpi
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|header
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|part
operator|=
name|mpi
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|headerInfo
operator|.
name|setPart
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|messageParts
operator|.
name|remove
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|bmsg
operator|.
name|addExtensor
argument_list|(
name|headerInfo
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Exclude the header parts from the message part list.
name|bmsg
operator|.
name|setMessageParts
argument_list|(
name|messageParts
argument_list|)
expr_stmt|;
block|}
name|SoapBodyInfo
name|bodyInfo
init|=
operator|new
name|SoapBodyInfo
argument_list|()
decl_stmt|;
name|SoapBody
name|soapBody
init|=
name|SOAPBindingUtil
operator|.
name|getSoapBody
argument_list|(
name|bmsg
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|parts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|soapBody
operator|==
literal|null
condition|)
block|{
name|MIMEMultipartRelated
name|mmr
init|=
name|bmsg
operator|.
name|getExtensor
argument_list|(
name|MIMEMultipartRelated
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mmr
operator|!=
literal|null
condition|)
block|{
name|parts
operator|=
name|mmr
operator|.
name|getMIMEParts
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|bmsg
operator|.
name|addExtensor
argument_list|(
name|soapBody
argument_list|)
expr_stmt|;
name|bodyInfo
operator|.
name|setUse
argument_list|(
name|soapBody
operator|.
name|getUse
argument_list|()
argument_list|)
expr_stmt|;
name|parts
operator|=
name|soapBody
operator|.
name|getParts
argument_list|()
expr_stmt|;
block|}
comment|// Initialize the body parts.
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|attParts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parts
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|bodyParts
init|=
operator|new
name|ArrayList
argument_list|<
name|MessagePartInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|itr
init|=
name|parts
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|part
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|part
operator|instanceof
name|MIMEPart
condition|)
block|{
name|MIMEPart
name|mpart
init|=
operator|(
name|MIMEPart
operator|)
name|part
decl_stmt|;
name|attParts
operator|=
name|handleMimePart
argument_list|(
name|mpart
argument_list|,
name|attParts
argument_list|,
name|msg
argument_list|,
name|bmsg
argument_list|,
name|bodyParts
argument_list|,
name|messageParts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addSoapBodyPart
argument_list|(
name|msg
argument_list|,
name|bodyParts
argument_list|,
operator|(
name|String
operator|)
name|part
argument_list|)
expr_stmt|;
block|}
block|}
name|bodyInfo
operator|.
name|setParts
argument_list|(
name|bodyParts
argument_list|)
expr_stmt|;
name|bodyInfo
operator|.
name|setAttachments
argument_list|(
name|attParts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bodyInfo
operator|.
name|setParts
argument_list|(
name|messageParts
argument_list|)
expr_stmt|;
block|}
name|bmsg
operator|.
name|addExtensor
argument_list|(
name|bodyInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|handleMimePart
parameter_list|(
name|MIMEPart
name|mpart
parameter_list|,
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|attParts
parameter_list|,
name|MessageInfo
name|msg
parameter_list|,
name|BindingMessageInfo
name|bmsg
parameter_list|,
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|bodyParts
parameter_list|,
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|messageParts
parameter_list|)
block|{
if|if
condition|(
name|mpart
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"MIMEPart should at least contain one element!"
argument_list|)
throw|;
block|}
name|String
name|partName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|content
range|:
name|mpart
operator|.
name|getExtensibilityElements
argument_list|()
control|)
block|{
if|if
condition|(
name|content
operator|instanceof
name|MIMEContent
condition|)
block|{
name|MIMEContent
name|mc
init|=
operator|(
name|MIMEContent
operator|)
name|content
decl_stmt|;
name|partName
operator|=
name|mc
operator|.
name|getPart
argument_list|()
expr_stmt|;
if|if
condition|(
name|attParts
operator|==
literal|null
condition|)
block|{
name|attParts
operator|=
operator|new
name|LinkedList
argument_list|<
name|MessagePartInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|partName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Problem with WSDL: mime content element in operation "
operator|+
name|bmsg
operator|.
name|getBindingOperation
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|" does not specify a part."
argument_list|)
throw|;
block|}
name|MessagePartInfo
name|mpi
init|=
name|msg
operator|.
name|getMessagePart
argument_list|(
operator|new
name|QName
argument_list|(
name|msg
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|partName
argument_list|)
argument_list|)
decl_stmt|;
name|mpi
operator|.
name|setProperty
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|mc
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|attParts
operator|.
name|add
argument_list|(
name|mpi
argument_list|)
expr_stmt|;
comment|// Attachments shouldn't be part of the body message
name|bmsg
operator|.
name|getMessageParts
argument_list|()
operator|.
name|remove
argument_list|(
name|mpi
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SOAPBindingUtil
operator|.
name|isSOAPBody
argument_list|(
name|content
argument_list|)
condition|)
block|{
name|SoapBody
name|sb
init|=
name|SOAPBindingUtil
operator|.
name|getSoapBody
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|getParts
argument_list|()
operator|!=
literal|null
operator|&&
name|sb
operator|.
name|getParts
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|partName
operator|=
operator|(
name|String
operator|)
name|sb
operator|.
name|getParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// We can have a list of empty part names here.
if|if
condition|(
name|partName
operator|!=
literal|null
condition|)
block|{
name|addSoapBodyPart
argument_list|(
name|msg
argument_list|,
name|bodyParts
argument_list|,
name|partName
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|SOAPBindingUtil
operator|.
name|isSOAPHeader
argument_list|(
name|content
argument_list|)
condition|)
block|{
name|SoapHeader
name|header
init|=
name|SOAPBindingUtil
operator|.
name|getSoapHeader
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|SoapHeaderInfo
name|headerInfo
init|=
operator|new
name|SoapHeaderInfo
argument_list|()
decl_stmt|;
name|headerInfo
operator|.
name|setUse
argument_list|(
name|header
operator|.
name|getUse
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|header
operator|.
name|getPart
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Problem with WSDL: soap:header element in operation "
operator|+
name|bmsg
operator|.
name|getBindingOperation
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|" does not specify a part."
argument_list|)
throw|;
block|}
name|MessagePartInfo
name|mpi
init|=
name|msg
operator|.
name|getMessagePart
argument_list|(
operator|new
name|QName
argument_list|(
name|msg
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|header
operator|.
name|getPart
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mpi
operator|!=
literal|null
operator|&&
name|header
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|mpi
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|header
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|mpi
operator|=
literal|null
expr_stmt|;
comment|//out of band, let's find it
for|for
control|(
name|MessagePartInfo
name|mpi2
range|:
name|msg
operator|.
name|getOutOfBandParts
argument_list|()
control|)
block|{
if|if
condition|(
name|mpi2
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|header
operator|.
name|getPart
argument_list|()
argument_list|)
operator|&&
name|mpi2
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|header
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|mpi
operator|=
name|mpi2
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|mpi
operator|!=
literal|null
condition|)
block|{
name|headerInfo
operator|.
name|setPart
argument_list|(
name|mpi
argument_list|)
expr_stmt|;
name|messageParts
operator|.
name|remove
argument_list|(
name|mpi
argument_list|)
expr_stmt|;
name|bmsg
operator|.
name|getMessageParts
argument_list|()
operator|.
name|remove
argument_list|(
name|mpi
argument_list|)
expr_stmt|;
name|bmsg
operator|.
name|addExtensor
argument_list|(
name|headerInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|attParts
return|;
block|}
specifier|private
name|void
name|addSoapBodyPart
parameter_list|(
name|MessageInfo
name|msg
parameter_list|,
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|bodyParts
parameter_list|,
name|String
name|partName
parameter_list|)
block|{
name|MessagePartInfo
name|mpi
init|=
name|msg
operator|.
name|getMessagePart
argument_list|(
operator|new
name|QName
argument_list|(
name|msg
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|partName
argument_list|)
argument_list|)
decl_stmt|;
name|bodyParts
operator|.
name|add
argument_list|(
name|mpi
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|addListener
parameter_list|(
name|Destination
name|d
parameter_list|,
name|Endpoint
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|d
init|)
block|{
name|MessageObserver
name|mo
init|=
name|d
operator|.
name|getMessageObserver
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
operator|&&
name|d
operator|.
name|getAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
operator|&&
name|d
operator|.
name|getAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
name|d
operator|.
name|getAddress
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"soap.udp"
argument_list|)
condition|)
block|{
comment|//soap.udp REQUIRES usage of WS-Addressing... we need to turn this on
name|setupUDP
argument_list|(
name|e
argument_list|,
name|e
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mo
operator|==
literal|null
condition|)
block|{
name|super
operator|.
name|addListener
argument_list|(
name|d
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|mo
operator|instanceof
name|ChainInitiationObserver
condition|)
block|{
name|ChainInitiationObserver
name|cio
init|=
operator|(
name|ChainInitiationObserver
operator|)
name|mo
decl_stmt|;
name|Binding
name|b
init|=
name|e
operator|.
name|getBinding
argument_list|()
decl_stmt|;
name|Binding
name|b2
init|=
name|cio
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getBinding
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|==
name|b2
condition|)
block|{
comment|//re-registering the same endpoint?
return|return;
block|}
name|Object
name|o
init|=
name|cio
operator|.
name|getEndpoint
argument_list|()
operator|.
name|get
argument_list|(
literal|"allow-multiplex-endpoint"
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|o
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|Boolean
operator|.
name|FALSE
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBinding
operator|&&
name|b2
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBinding
operator|&&
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBinding
operator|)
name|b
operator|)
operator|.
name|getSoapVersion
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBinding
operator|)
name|b2
operator|)
operator|.
name|getSoapVersion
argument_list|()
argument_list|)
operator|&&
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Soap "
operator|+
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBinding
operator|)
name|b
operator|)
operator|.
name|getSoapVersion
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|+
literal|" endpoint already registered on address "
operator|+
name|e
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|)
throw|;
block|}
name|MultipleEndpointObserver
name|newMO
init|=
operator|new
name|MultipleEndpointObserver
argument_list|(
name|getBus
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Message
name|createMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
operator|new
name|SoapMessage
argument_list|(
name|message
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|newMO
operator|.
name|getBindingInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AttachmentInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|newMO
operator|.
name|getBindingInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|StaxInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
comment|// This will not work if one of the endpoints disables message
comment|// processing. But, if you've disabled message processing, you
comment|// probably aren't going to use this feature.
name|newMO
operator|.
name|getBindingInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ReadHeadersInterceptor
argument_list|(
name|getBus
argument_list|()
argument_list|,
operator|(
name|SoapVersion
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|newMO
operator|.
name|getBindingInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|StartBodyInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|newMO
operator|.
name|getBindingInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|CheckFaultInterceptor
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add in a default selection interceptor
name|newMO
operator|.
name|getRoutingInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|EndpointSelectionInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|newMO
operator|.
name|getEndpoints
argument_list|()
operator|.
name|add
argument_list|(
name|cio
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|mo
operator|=
name|newMO
expr_stmt|;
block|}
if|if
condition|(
name|mo
operator|instanceof
name|MultipleEndpointObserver
condition|)
block|{
name|MultipleEndpointObserver
name|meo
init|=
operator|(
name|MultipleEndpointObserver
operator|)
name|mo
decl_stmt|;
name|meo
operator|.
name|getEndpoints
argument_list|()
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|d
operator|.
name|setMessageObserver
argument_list|(
name|mo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

