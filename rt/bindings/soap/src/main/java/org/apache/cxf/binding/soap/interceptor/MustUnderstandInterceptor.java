begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|HeaderUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|OneWayProcessorInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_class
specifier|public
class|class
name|MustUnderstandInterceptor
extends|extends
name|AbstractSoapInterceptor
block|{
specifier|public
specifier|static
specifier|final
name|String
name|UNKNOWNS
init|=
literal|"MustUnderstand.UNKNOWNS"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|MustUnderstandInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|LOG
operator|.
name|getResourceBundle
argument_list|()
decl_stmt|;
specifier|private
name|MustUnderstandEndingInterceptor
name|ending
init|=
operator|new
name|MustUnderstandEndingInterceptor
argument_list|()
decl_stmt|;
specifier|public
name|MustUnderstandInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_PROTOCOL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MustUnderstandInterceptor
parameter_list|(
name|String
name|phase
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|soapMessage
parameter_list|)
block|{
name|Set
argument_list|<
name|QName
argument_list|>
name|paramHeaders
init|=
name|HeaderUtil
operator|.
name|getHeaderQNameInOperationParam
argument_list|(
name|soapMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|soapMessage
operator|.
name|getHeaders
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|paramHeaders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|SoapVersion
name|soapVersion
init|=
name|soapMessage
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Header
argument_list|>
name|mustUnderstandHeaders
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|URI
argument_list|>
name|serviceRoles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|QName
argument_list|>
name|notUnderstandHeaders
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Header
argument_list|>
name|ultimateReceiverHeaders
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|QName
argument_list|>
name|mustUnderstandQNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|initServiceSideInfo
argument_list|(
name|mustUnderstandQNames
argument_list|,
name|soapMessage
argument_list|,
name|serviceRoles
argument_list|,
name|paramHeaders
argument_list|)
expr_stmt|;
name|buildMustUnderstandHeaders
argument_list|(
name|mustUnderstandHeaders
argument_list|,
name|soapMessage
argument_list|,
name|serviceRoles
argument_list|,
name|ultimateReceiverHeaders
argument_list|)
expr_stmt|;
name|checkUnderstand
argument_list|(
name|mustUnderstandHeaders
argument_list|,
name|mustUnderstandQNames
argument_list|,
name|notUnderstandHeaders
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|notUnderstandHeaders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|isRequestor
argument_list|(
name|soapMessage
argument_list|)
condition|)
block|{
name|soapMessage
operator|.
name|put
argument_list|(
name|MustUnderstandInterceptor
operator|.
name|UNKNOWNS
argument_list|,
name|notUnderstandHeaders
argument_list|)
expr_stmt|;
name|soapMessage
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
name|ending
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SoapFault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"MUST_UNDERSTAND"
argument_list|,
name|BUNDLE
argument_list|,
name|notUnderstandHeaders
argument_list|)
argument_list|,
name|soapVersion
operator|.
name|getMustUnderstand
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|ultimateReceiverHeaders
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|isRequestor
argument_list|(
name|soapMessage
argument_list|)
condition|)
block|{
name|checkUltimateReceiverHeaders
argument_list|(
name|ultimateReceiverHeaders
argument_list|,
name|mustUnderstandQNames
argument_list|,
name|soapMessage
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleFault
parameter_list|(
name|SoapMessage
name|msg
parameter_list|)
block|{
name|Set
argument_list|<
name|QName
argument_list|>
name|unknowns
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Set
argument_list|<
name|?
argument_list|>
operator|)
name|msg
operator|.
name|get
argument_list|(
name|MustUnderstandInterceptor
operator|.
name|UNKNOWNS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|getBindingOperationInfo
argument_list|()
operator|==
literal|null
operator|&&
name|unknowns
operator|!=
literal|null
operator|&&
operator|!
name|unknowns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//per jaxws spec, if there are must understands that we didn't understand, but couldn't map
comment|//to an operation either, we need to throw the mustunderstand fault, not the one related to
comment|//an unknown operation
name|msg
operator|.
name|setContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
operator|new
name|SoapFault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"MUST_UNDERSTAND"
argument_list|,
name|BUNDLE
argument_list|,
name|unknowns
argument_list|)
argument_list|,
name|msg
operator|.
name|getVersion
argument_list|()
operator|.
name|getMustUnderstand
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkUltimateReceiverHeaders
parameter_list|(
name|Set
argument_list|<
name|Header
argument_list|>
name|ultimateReceiverHeaders
parameter_list|,
name|Set
argument_list|<
name|QName
argument_list|>
name|mustUnderstandQNames
parameter_list|,
name|SoapMessage
name|soapMessage
parameter_list|)
block|{
name|soapMessage
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|UltimateReceiverMustUnderstandInterceptor
argument_list|(
name|mustUnderstandQNames
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|soapMessage
operator|.
name|getContextualProperty
argument_list|(
literal|"endpoint-processes-headers"
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Object
argument_list|>
name|o2
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Collection
condition|)
block|{
name|o2
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|o2
operator|=
name|Collections
operator|.
name|singleton
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|obj
range|:
name|o2
control|)
block|{
name|QName
name|qn
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|QName
condition|)
block|{
name|qn
operator|=
operator|(
name|QName
operator|)
name|obj
expr_stmt|;
block|}
else|else
block|{
name|qn
operator|=
name|QName
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Header
argument_list|>
name|hit
init|=
name|ultimateReceiverHeaders
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|hit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Header
name|h
init|=
name|hit
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|qn
operator|.
name|equals
argument_list|(
name|h
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|hit
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|ultimateReceiverHeaders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|QName
argument_list|>
name|notFound
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Header
name|h
range|:
name|ultimateReceiverHeaders
control|)
block|{
if|if
condition|(
operator|!
name|mustUnderstandQNames
operator|.
name|contains
argument_list|(
name|h
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|notFound
operator|.
name|add
argument_list|(
name|h
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|notFound
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Defer throwing soap fault exception in SOAPHeaderInterceptor once the isOneway can
comment|// be detected
name|soapMessage
operator|.
name|put
argument_list|(
name|MustUnderstandInterceptor
operator|.
name|UNKNOWNS
argument_list|,
name|notFound
argument_list|)
expr_stmt|;
name|soapMessage
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
name|ending
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|initServiceSideInfo
parameter_list|(
name|Set
argument_list|<
name|QName
argument_list|>
name|mustUnderstandQNames
parameter_list|,
name|SoapMessage
name|soapMessage
parameter_list|,
name|Set
argument_list|<
name|URI
argument_list|>
name|serviceRoles
parameter_list|,
name|Set
argument_list|<
name|QName
argument_list|>
name|paramHeaders
parameter_list|)
block|{
if|if
condition|(
name|paramHeaders
operator|!=
literal|null
condition|)
block|{
name|mustUnderstandQNames
operator|.
name|addAll
argument_list|(
name|paramHeaders
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Interceptor
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
argument_list|>
name|interceptorInstance
range|:
name|soapMessage
operator|.
name|getInterceptorChain
argument_list|()
control|)
block|{
if|if
condition|(
name|interceptorInstance
operator|instanceof
name|SoapInterceptor
condition|)
block|{
name|SoapInterceptor
name|si
init|=
operator|(
name|SoapInterceptor
operator|)
name|interceptorInstance
decl_stmt|;
name|Set
argument_list|<
name|URI
argument_list|>
name|roles
init|=
name|si
operator|.
name|getRoles
argument_list|()
decl_stmt|;
if|if
condition|(
name|roles
operator|!=
literal|null
condition|)
block|{
name|serviceRoles
operator|.
name|addAll
argument_list|(
name|roles
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|QName
argument_list|>
name|understoodHeaders
init|=
name|si
operator|.
name|getUnderstoodHeaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|understoodHeaders
operator|!=
literal|null
condition|)
block|{
name|mustUnderstandQNames
operator|.
name|addAll
argument_list|(
name|understoodHeaders
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|buildMustUnderstandHeaders
parameter_list|(
name|Set
argument_list|<
name|Header
argument_list|>
name|mustUnderstandHeaders
parameter_list|,
name|SoapMessage
name|soapMessage
parameter_list|,
name|Set
argument_list|<
name|URI
argument_list|>
name|serviceRoles
parameter_list|,
name|Set
argument_list|<
name|Header
argument_list|>
name|ultimateReceiverHeaders
parameter_list|)
block|{
for|for
control|(
name|Header
name|header
range|:
name|soapMessage
operator|.
name|getHeaders
argument_list|()
control|)
block|{
if|if
condition|(
name|header
operator|instanceof
name|SoapHeader
operator|&&
operator|(
operator|(
name|SoapHeader
operator|)
name|header
operator|)
operator|.
name|isMustUnderstand
argument_list|()
condition|)
block|{
name|String
name|role
init|=
operator|(
operator|(
name|SoapHeader
operator|)
name|header
operator|)
operator|.
name|getActor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|role
argument_list|)
condition|)
block|{
name|role
operator|=
name|role
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|role
operator|.
name|equals
argument_list|(
name|soapMessage
operator|.
name|getVersion
argument_list|()
operator|.
name|getNextRole
argument_list|()
argument_list|)
condition|)
block|{
name|mustUnderstandHeaders
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|role
operator|.
name|equals
argument_list|(
name|soapMessage
operator|.
name|getVersion
argument_list|()
operator|.
name|getUltimateReceiverRole
argument_list|()
argument_list|)
condition|)
block|{
name|ultimateReceiverHeaders
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|URI
name|roleFromBinding
range|:
name|serviceRoles
control|)
block|{
if|if
condition|(
name|role
operator|.
name|equals
argument_list|(
name|roleFromBinding
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|mustUnderstandHeaders
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|// if role omitted, the soap node is ultimate receiver,
comment|// needs to understand
name|ultimateReceiverHeaders
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|checkUnderstand
parameter_list|(
name|Set
argument_list|<
name|Header
argument_list|>
name|mustUnderstandHeaders
parameter_list|,
name|Set
argument_list|<
name|QName
argument_list|>
name|mustUnderstandQNames
parameter_list|,
name|Set
argument_list|<
name|QName
argument_list|>
name|notUnderstandHeaders
parameter_list|)
block|{
for|for
control|(
name|Header
name|header
range|:
name|mustUnderstandHeaders
control|)
block|{
name|QName
name|qname
init|=
name|header
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mustUnderstandQNames
operator|.
name|contains
argument_list|(
name|qname
argument_list|)
condition|)
block|{
name|notUnderstandHeaders
operator|.
name|add
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      *      */
specifier|private
specifier|static
class|class
name|UltimateReceiverMustUnderstandInterceptor
extends|extends
name|AbstractSoapInterceptor
block|{
name|Set
argument_list|<
name|QName
argument_list|>
name|knownHeaders
decl_stmt|;
name|UltimateReceiverMustUnderstandInterceptor
parameter_list|(
name|Set
argument_list|<
name|QName
argument_list|>
name|knownHeaders
parameter_list|)
block|{
name|super
argument_list|(
name|Phase
operator|.
name|INVOKE
argument_list|)
expr_stmt|;
name|this
operator|.
name|knownHeaders
operator|=
name|knownHeaders
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|soapMessage
parameter_list|)
throws|throws
name|Fault
block|{
name|SoapVersion
name|soapVersion
init|=
name|soapMessage
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|QName
argument_list|>
name|notFound
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Header
argument_list|>
name|heads
init|=
name|soapMessage
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
for|for
control|(
name|Header
name|header
range|:
name|heads
control|)
block|{
if|if
condition|(
name|header
operator|instanceof
name|SoapHeader
operator|&&
operator|(
operator|(
name|SoapHeader
operator|)
name|header
operator|)
operator|.
name|isMustUnderstand
argument_list|()
operator|&&
name|header
operator|.
name|getDirection
argument_list|()
operator|==
name|Header
operator|.
name|Direction
operator|.
name|DIRECTION_IN
operator|&&
operator|!
name|knownHeaders
operator|.
name|contains
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
operator|(
operator|(
name|SoapHeader
operator|)
name|header
operator|)
operator|.
name|getActor
argument_list|()
argument_list|)
operator|||
name|soapVersion
operator|.
name|getUltimateReceiverRole
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|SoapHeader
operator|)
name|header
operator|)
operator|.
name|getActor
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|notFound
operator|.
name|add
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|notFound
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|soapMessage
operator|.
name|remove
argument_list|(
name|UNKNOWNS
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SoapFault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"MUST_UNDERSTAND"
argument_list|,
name|BUNDLE
argument_list|,
name|notFound
argument_list|)
argument_list|,
name|soapVersion
operator|.
name|getMustUnderstand
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|MustUnderstandEndingInterceptor
extends|extends
name|AbstractSoapInterceptor
block|{
specifier|public
name|MustUnderstandEndingInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_LOGICAL
argument_list|)
expr_stmt|;
name|addAfter
argument_list|(
name|OneWayProcessorInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MustUnderstandEndingInterceptor
parameter_list|(
name|String
name|phase
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
throws|throws
name|Fault
block|{
comment|// throws soapFault after the response code 202 is set in OneWayProcessorInterceptor
if|if
condition|(
name|message
operator|.
name|get
argument_list|(
name|MustUnderstandInterceptor
operator|.
name|UNKNOWNS
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|//we may not have known the Operation in the main interceptor and thus may not
comment|//have been able to get the parameter based headers.   We now know the
comment|//operation and thus can remove those.
name|Set
argument_list|<
name|QName
argument_list|>
name|unknowns
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Set
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|MustUnderstandInterceptor
operator|.
name|UNKNOWNS
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|QName
argument_list|>
name|paramHeaders
init|=
name|HeaderUtil
operator|.
name|getHeaderQNameInOperationParam
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|unknowns
operator|.
name|removeAll
argument_list|(
name|paramHeaders
argument_list|)
expr_stmt|;
name|message
operator|.
name|remove
argument_list|(
name|MustUnderstandInterceptor
operator|.
name|UNKNOWNS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|unknowns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SoapFault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"MUST_UNDERSTAND"
argument_list|,
name|BUNDLE
argument_list|,
name|unknowns
argument_list|)
argument_list|,
name|message
operator|.
name|getVersion
argument_list|()
operator|.
name|getMustUnderstand
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

