begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * DataCodingUtils is a utility class for reading and writing integers in SOAP over TCP protocol.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DataCodingUtils
block|{
specifier|private
name|DataCodingUtils
parameter_list|()
block|{      }
comment|/**      * Method for reading INTEGER4 values from InputStream      *       * @param inputStream a source stream      * @param array a buffer for read data      * @param count a number of integers to be read      * @throws IOException      */
specifier|public
specifier|static
name|void
name|readInts4
parameter_list|(
specifier|final
name|InputStream
name|inputStream
parameter_list|,
specifier|final
name|int
index|[]
name|array
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|value
init|=
literal|0
decl_stmt|;
name|int
name|octet
init|=
literal|0
decl_stmt|;
name|int
name|readInts
init|=
literal|0
decl_stmt|;
name|int
name|shVal
init|=
literal|0
decl_stmt|;
name|int
name|neeble
init|=
literal|0
decl_stmt|;
name|int
name|neebleNum
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|readInts
operator|<
name|count
condition|;
name|neebleNum
operator|++
control|)
block|{
if|if
condition|(
name|neebleNum
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|octet
operator|=
name|inputStream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|octet
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|neeble
operator|=
name|octet
operator|>>
literal|4
expr_stmt|;
block|}
else|else
block|{
name|neeble
operator|=
name|octet
operator|&
literal|0xF
expr_stmt|;
block|}
name|value
operator||=
operator|(
name|neeble
operator|&
literal|7
operator|)
operator|<<
name|shVal
expr_stmt|;
if|if
condition|(
operator|(
name|neeble
operator|&
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
name|array
index|[
name|readInts
operator|++
index|]
operator|=
name|value
expr_stmt|;
name|shVal
operator|=
literal|0
expr_stmt|;
name|value
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|shVal
operator|+=
literal|3
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Method for reading single INTEGER8 value      *       * @param inputStream a source stream      * @return read integer      * @throws IOException      */
specifier|public
specifier|static
name|int
name|readInt8
parameter_list|(
specifier|final
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|value
init|=
literal|0
decl_stmt|;
name|int
name|shVal
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|octet
init|=
literal|0x80
init|;
operator|(
name|octet
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|;
name|shVal
operator|+=
literal|7
control|)
block|{
name|octet
operator|=
name|inputStream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|octet
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|value
operator||=
operator|(
name|octet
operator|&
literal|0x7F
operator|)
operator|<<
name|shVal
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
comment|/**      * Method for writing single INTEGER4 value into OutputStream      *       * @param outputStream a target stream      * @param intValue value that will be written      * @throws IOException      */
specifier|public
specifier|static
name|void
name|writeInt8
parameter_list|(
specifier|final
name|OutputStream
name|outputStream
parameter_list|,
specifier|final
name|int
name|intValue
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|octet
decl_stmt|;
name|int
name|value
init|=
name|intValue
decl_stmt|;
do|do
block|{
name|octet
operator|=
name|value
operator|&
literal|0x7F
expr_stmt|;
name|value
operator|>>>=
literal|7
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|0
condition|)
block|{
name|octet
operator||=
literal|0x80
expr_stmt|;
block|}
name|outputStream
operator|.
name|write
argument_list|(
name|octet
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|value
operator|!=
literal|0
condition|)
do|;
block|}
comment|/**      * Method for writing variable number of integer values as INTEGER4 values      *       * @param outputStream a target stream      * @param values a variable length list of integer values that will be written      * @throws IOException      */
specifier|public
specifier|static
name|void
name|writeInts4
parameter_list|(
specifier|final
name|OutputStream
name|outputStream
parameter_list|,
specifier|final
name|int
modifier|...
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|writeInts4
argument_list|(
name|outputStream
argument_list|,
name|values
argument_list|,
literal|0
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * Method for writing integers as INTEGER4 values      *       * @param outputStream a target stream      * @param array values that will be written      * @param offset an offset in array from method starts writing      * @param count a number of integers to be written      * @throws IOException      */
specifier|public
specifier|static
name|void
name|writeInts4
parameter_list|(
specifier|final
name|OutputStream
name|outputStream
parameter_list|,
specifier|final
name|int
index|[]
name|array
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|shiftValue
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|value
init|=
name|array
index|[
name|offset
operator|+
name|i
index|]
decl_stmt|;
name|shiftValue
operator|=
name|writeInt4
argument_list|(
name|outputStream
argument_list|,
name|value
argument_list|,
name|shiftValue
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|writeInt4
argument_list|(
name|outputStream
argument_list|,
name|array
index|[
name|offset
operator|+
name|count
operator|-
literal|1
index|]
argument_list|,
name|shiftValue
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|int
name|writeInt4
parameter_list|(
specifier|final
name|OutputStream
name|outputStream
parameter_list|,
specifier|final
name|int
name|intValue
parameter_list|,
specifier|final
name|int
name|highValue
parameter_list|,
specifier|final
name|boolean
name|flush
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nibbleL
decl_stmt|;
name|int
name|nibbleH
decl_stmt|;
name|int
name|value
init|=
name|intValue
decl_stmt|;
name|int
name|hValue
init|=
name|highValue
decl_stmt|;
if|if
condition|(
name|hValue
operator|>
literal|0
condition|)
block|{
name|hValue
operator|&=
literal|0x70
expr_stmt|;
comment|// clear highest bit
name|nibbleL
operator|=
name|value
operator|&
literal|7
expr_stmt|;
name|value
operator|>>>=
literal|3
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|0
condition|)
block|{
name|nibbleL
operator||=
literal|8
expr_stmt|;
block|}
name|outputStream
operator|.
name|write
argument_list|(
name|hValue
operator||
name|nibbleL
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
block|}
do|do
block|{
comment|// shift nibbleH to high byte's bits
name|nibbleH
operator|=
operator|(
name|value
operator|&
literal|7
operator|)
operator|<<
literal|4
expr_stmt|;
name|value
operator|>>>=
literal|3
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|0
condition|)
block|{
name|nibbleH
operator||=
literal|0x80
expr_stmt|;
name|nibbleL
operator|=
name|value
operator|&
literal|7
expr_stmt|;
name|value
operator|>>>=
literal|3
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|0
condition|)
block|{
name|nibbleL
operator||=
literal|8
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|flush
condition|)
block|{
return|return
name|nibbleH
operator||
literal|0x80
return|;
block|}
name|nibbleL
operator|=
literal|0
expr_stmt|;
block|}
name|outputStream
operator|.
name|write
argument_list|(
name|nibbleH
operator||
name|nibbleL
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|value
operator|!=
literal|0
condition|)
do|;
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

