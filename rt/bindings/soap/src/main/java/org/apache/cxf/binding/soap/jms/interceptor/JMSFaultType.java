begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|jms
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAnyAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAnyElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_class
specifier|public
class|class
name|JMSFaultType
block|{
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"FaultCode"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
specifier|protected
name|QName
name|faultCode
decl_stmt|;
annotation|@
name|XmlAnyElement
argument_list|(
name|lax
operator|=
literal|true
argument_list|)
specifier|protected
name|List
argument_list|<
name|Object
argument_list|>
name|any
decl_stmt|;
annotation|@
name|XmlAnyAttribute
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|String
argument_list|>
name|otherAttributes
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Gets the value of the faultCode property.      *       * @return possible object is {@link QName }      */
specifier|public
name|QName
name|getFaultCode
parameter_list|()
block|{
return|return
name|faultCode
return|;
block|}
comment|/**      * Sets the value of the faultCode property.      *       * @param value allowed object is {@link QName }      */
specifier|public
name|void
name|setFaultCode
parameter_list|(
name|QName
name|value
parameter_list|)
block|{
name|this
operator|.
name|faultCode
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSetFaultCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|faultCode
operator|!=
literal|null
return|;
block|}
comment|/**      * Gets the value of the any property.      *<p>      * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification      * you make to the returned list will be present inside the JAXB object. This is why there is not a      *<CODE>set</CODE> method for the any property.      *<p>      * For example, to add a new item, do as follows:      *       *<pre>      * getAny().add(newItem);      *</pre>      *<p>      * Objects of the following type(s) are allowed in the list {@link Object } {@link Element }      */
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getAny
parameter_list|()
block|{
if|if
condition|(
name|any
operator|==
literal|null
condition|)
block|{
name|any
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|any
return|;
block|}
specifier|public
name|boolean
name|isSetAny
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|any
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|this
operator|.
name|any
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|unsetAny
parameter_list|()
block|{
name|this
operator|.
name|any
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Gets a map that contains attributes that aren't bound to any typed property on this class.      *<p>      * the map is keyed by the name of the attribute and the value is the string value of the attribute. the      * map returned by this method is live, and you can add new attribute by updating the map directly.      * Because of this design, there's no setter.      *       * @return always non-null      */
specifier|public
name|Map
argument_list|<
name|QName
argument_list|,
name|String
argument_list|>
name|getOtherAttributes
parameter_list|()
block|{
return|return
name|otherAttributes
return|;
block|}
block|}
end_class

end_unit

