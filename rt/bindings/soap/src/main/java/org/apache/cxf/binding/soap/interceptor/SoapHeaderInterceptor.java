begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapHeaderInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractInDatabindingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|BareInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|DocLiteralInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamReader
import|;
end_import

begin_comment
comment|/**  * Perform databinding of the SOAP headers.  */
end_comment

begin_class
specifier|public
class|class
name|SoapHeaderInterceptor
extends|extends
name|AbstractInDatabindingInterceptor
block|{
specifier|public
name|SoapHeaderInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|UNMARSHAL
argument_list|)
expr_stmt|;
name|addAfter
argument_list|(
name|BareInInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addAfter
argument_list|(
name|RPCInInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addAfter
argument_list|(
name|DocLiteralInInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|m
parameter_list|)
throws|throws
name|Fault
block|{
name|SoapMessage
name|message
init|=
operator|(
name|SoapMessage
operator|)
name|m
decl_stmt|;
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|MessageContentsList
name|parameters
init|=
name|MessageContentsList
operator|.
name|getContentsList
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|parameters
condition|)
block|{
name|parameters
operator|=
operator|new
name|MessageContentsList
argument_list|()
expr_stmt|;
block|}
name|BindingOperationInfo
name|bop
init|=
name|exchange
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|bop
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|bop
operator|.
name|isUnwrapped
argument_list|()
condition|)
block|{
name|bop
operator|=
name|bop
operator|.
name|getWrappedOperation
argument_list|()
expr_stmt|;
block|}
name|boolean
name|client
init|=
name|isRequestor
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|BindingMessageInfo
name|bmi
init|=
name|client
condition|?
name|bop
operator|.
name|getOutput
argument_list|()
else|:
name|bop
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|bmi
operator|==
literal|null
condition|)
block|{
comment|// one way operation.
return|return;
block|}
name|List
argument_list|<
name|SoapHeaderInfo
argument_list|>
name|headers
init|=
name|bmi
operator|.
name|getExtensors
argument_list|(
name|SoapHeaderInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|headers
operator|==
literal|null
operator|||
name|headers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|boolean
name|supportsNode
init|=
name|this
operator|.
name|supportsDataReader
argument_list|(
name|message
argument_list|,
name|Node
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|SoapHeaderInfo
name|header
range|:
name|headers
control|)
block|{
name|MessagePartInfo
name|mpi
init|=
name|header
operator|.
name|getPart
argument_list|()
decl_stmt|;
if|if
condition|(
name|mpi
operator|.
name|getTypeClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Header
name|param
init|=
name|findHeader
argument_list|(
name|message
argument_list|,
name|mpi
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|remove
argument_list|(
name|param
argument_list|)
expr_stmt|;
if|if
condition|(
name|param
operator|.
name|getDataBinding
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Node
name|source
init|=
operator|(
name|Node
operator|)
name|param
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|supportsNode
condition|)
block|{
name|object
operator|=
name|getNodeDataReader
argument_list|(
name|message
argument_list|)
operator|.
name|read
argument_list|(
name|mpi
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|W3CDOMStreamReader
name|reader
init|=
operator|new
name|W3CDOMStreamReader
argument_list|(
operator|(
name|Element
operator|)
name|source
argument_list|)
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|nextTag
argument_list|()
expr_stmt|;
comment|//advance into the first tag
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
name|object
operator|=
name|getDataReader
argument_list|(
name|message
argument_list|,
name|XMLStreamReader
operator|.
name|class
argument_list|)
operator|.
name|read
argument_list|(
name|mpi
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|object
operator|=
name|param
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
block|}
name|parameters
operator|.
name|put
argument_list|(
name|mpi
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parameters
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|message
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Header
name|findHeader
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|MessagePartInfo
name|mpi
parameter_list|)
block|{
return|return
name|message
operator|.
name|getHeader
argument_list|(
name|mpi
operator|.
name|getConcreteName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

