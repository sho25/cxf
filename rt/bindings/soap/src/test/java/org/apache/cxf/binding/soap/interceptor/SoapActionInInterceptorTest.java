begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
operator|.
name|AttachmentDeserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap12
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|SoapActionInInterceptorTest
extends|extends
name|Assert
block|{
specifier|private
name|IMocksControl
name|control
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSoapActionForSOAP11
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|"text/xml"
argument_list|,
name|Soap11
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|"urn:cxf"
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|action
init|=
name|SoapActionInInterceptor
operator|.
name|getSoapAction
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"urn:cxf"
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSoapActionForSOAP11None
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|"text/xml"
argument_list|,
name|Soap11
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|action
init|=
name|SoapActionInInterceptor
operator|.
name|getSoapAction
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSoapActionForSOAP12
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|"application/soap+xml; action=\"urn:cxf\""
argument_list|,
name|Soap12
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|action
init|=
name|SoapActionInInterceptor
operator|.
name|getSoapAction
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"urn:cxf"
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSoapActionForSOAP12None
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|"application/soap+xml"
argument_list|,
name|Soap12
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|action
init|=
name|SoapActionInInterceptor
operator|.
name|getSoapAction
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSoapActionForSOAP11SwA
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|"multipart/related"
argument_list|,
name|Soap11
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|"urn:cxf"
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|action
init|=
name|SoapActionInInterceptor
operator|.
name|getSoapAction
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"urn:cxf"
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|// note this combination of SOAP12 with SwA is not normative, but some systems may use it.
comment|// here the optional start-info is used to encode action as in start-info="application/soap+xml; action=\"urn:cxf\""
specifier|public
name|void
name|testGetSoapActionForSOAP12SwAWithStartInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|"multipart/related; start-info=\"application/soap+xml; action=\\\"urn:cxf\\\""
argument_list|,
name|Soap12
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|action
init|=
name|SoapActionInInterceptor
operator|.
name|getSoapAction
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"urn:cxf"
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|// note this combination of SOAP12 with SwA is not normative, but some systems use it.
comment|// here the action property is set as in action="urn:cxf", although this usage is invalid because the action
comment|// property is not part of the multipart/related media type.
specifier|public
name|void
name|testGetSoapActionForSOAP12SwAWithAction
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|"multipart/related; start-info=\"application/soap+xml\"; action=\"urn:cxf\""
argument_list|,
name|Soap12
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|action
init|=
name|SoapActionInInterceptor
operator|.
name|getSoapAction
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"urn:cxf"
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|// note this combination of SOAP12 with SwA is not normative, but some systems may use it.
comment|// here the action property is only set at the part header as in action="urn:cxf"
specifier|public
name|void
name|testGetSoapActionForSOAP12SwAWithActionInPartHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|"multipart/related"
argument_list|,
name|Soap12
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|"urn:cxf"
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|action
init|=
name|SoapActionInInterceptor
operator|.
name|getSoapAction
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"urn:cxf"
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|// note this combination of SOAP12 with SwA is not normative, but some systems may use it.
specifier|public
name|void
name|testGetSoapActionForSOAP12SwANone
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|"multipart/related"
argument_list|,
name|Soap12
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|action
init|=
name|SoapActionInInterceptor
operator|.
name|getSoapAction
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSoapActionForSOAP11MTOM
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|"multipart/related; type=\"application/xop+xml\"; start-info=\"text/xml\""
argument_list|,
name|Soap11
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|"urn:cxf"
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|action
init|=
name|SoapActionInInterceptor
operator|.
name|getSoapAction
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"urn:cxf"
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|// some systems use this form, although this is not spec-conformant as
comment|// the action property is not part of the multipart/related media type.
comment|// here the action propety is set as in start-info="application/soap+xml"; action="urn:cxf"
specifier|public
name|void
name|testGetSoapActionForSOAP12MTOMWithAction
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|"multipart/related; type=\"application/xop+xml\""
operator|+
literal|"; start-info=\"application/soap+xml\"; action=\"urn:cxf\""
argument_list|,
name|Soap11
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|"urn:cxf"
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|action
init|=
name|SoapActionInInterceptor
operator|.
name|getSoapAction
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"urn:cxf"
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|private
name|SoapMessage
name|setUpMessage
parameter_list|(
name|String
name|contentType
parameter_list|,
name|SoapVersion
name|version
parameter_list|,
name|String
name|prop
parameter_list|)
block|{
name|SoapMessage
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SoapMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partHeaders
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|instanceof
name|Soap11
operator|&&
name|prop
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"SOAPAction"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|instanceof
name|Soap12
operator|&&
name|prop
operator|!=
literal|null
condition|)
block|{
name|partHeaders
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"application/soap+xml; action=\""
operator|+
name|prop
operator|+
literal|"\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|version
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|contentType
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|headers
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|AttachmentDeserializer
operator|.
name|ATTACHMENT_PART_HEADERS
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|partHeaders
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
return|return
name|message
return|;
block|}
block|}
end_class

end_unit

