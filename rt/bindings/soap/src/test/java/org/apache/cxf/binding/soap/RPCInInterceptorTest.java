begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|RPCInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|RPCInInterceptorTest
extends|extends
name|TestBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TNS
init|=
literal|"http://apache.org/hello_world_rpclit"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPNAME
init|=
literal|"sendReceiveData"
decl_stmt|;
specifier|private
name|IMocksControl
name|control
init|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|ServiceInfo
name|si
init|=
name|getMockedServiceModel
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl_soap/hello_world_rpc_lit.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|BindingInfo
name|bi
init|=
name|si
operator|.
name|getBinding
argument_list|(
operator|new
name|QName
argument_list|(
name|TNS
argument_list|,
literal|"Greeter_SOAPBinding_RPCLit"
argument_list|)
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|bi
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|TNS
argument_list|,
name|OPNAME
argument_list|)
argument_list|)
decl_stmt|;
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
literal|0
argument_list|)
operator|.
name|setTypeClass
argument_list|(
name|MyComplexStruct
operator|.
name|class
argument_list|)
expr_stmt|;
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
literal|0
argument_list|)
operator|.
name|setIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
literal|0
argument_list|)
operator|.
name|setTypeClass
argument_list|(
name|MyComplexStruct
operator|.
name|class
argument_list|)
expr_stmt|;
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
literal|0
argument_list|)
operator|.
name|setIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|soapMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|boi
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Service
name|service
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|JAXBDataBinding
name|dataBinding
init|=
operator|new
name|JAXBDataBinding
argument_list|(
name|MyComplexStruct
operator|.
name|class
argument_list|)
decl_stmt|;
name|service
operator|.
name|getDataBinding
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|dataBinding
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|service
operator|.
name|getServiceInfos
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|si
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|list
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|service
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|soapMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Service
operator|.
name|class
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|soapMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Message
operator|.
name|SCHEMA_VALIDATION_ENABLED
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterceptorRPCLitOutbound
parameter_list|()
throws|throws
name|Exception
block|{
name|RPCInInterceptor
name|interceptor
init|=
operator|new
name|RPCInInterceptor
argument_list|()
decl_stmt|;
name|soapMessage
operator|.
name|setContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|,
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createXMLStreamReader
argument_list|(
name|getTestStream
argument_list|(
name|getClass
argument_list|()
argument_list|,
literal|"/rpc-resp.xml"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|soapMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|handleMessage
argument_list|(
name|soapMessage
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|parameters
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|soapMessage
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|MyComplexStruct
argument_list|)
expr_stmt|;
name|MyComplexStruct
name|s
init|=
operator|(
name|MyComplexStruct
operator|)
name|obj
decl_stmt|;
name|assertEquals
argument_list|(
literal|"elem1"
argument_list|,
name|s
operator|.
name|getElem1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"elem2"
argument_list|,
name|s
operator|.
name|getElem2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|45
argument_list|,
name|s
operator|.
name|getElem3
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterceptorRPCLitInbound
parameter_list|()
throws|throws
name|Exception
block|{
name|RPCInInterceptor
name|interceptor
init|=
operator|new
name|RPCInInterceptor
argument_list|()
decl_stmt|;
name|soapMessage
operator|.
name|setContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|,
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createXMLStreamReader
argument_list|(
name|getTestStream
argument_list|(
name|getClass
argument_list|()
argument_list|,
literal|"/rpc-req.xml"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|handleMessage
argument_list|(
name|soapMessage
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|parameters
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|soapMessage
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|MyComplexStruct
argument_list|)
expr_stmt|;
name|MyComplexStruct
name|s
init|=
operator|(
name|MyComplexStruct
operator|)
name|obj
decl_stmt|;
name|assertEquals
argument_list|(
literal|"elem1"
argument_list|,
name|s
operator|.
name|getElem1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"elem2"
argument_list|,
name|s
operator|.
name|getElem2
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|45
argument_list|,
name|s
operator|.
name|getElem3
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

