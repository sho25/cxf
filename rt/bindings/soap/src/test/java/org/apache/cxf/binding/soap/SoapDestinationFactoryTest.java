begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|soap
operator|.
name|SOAPAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapBindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|DestinationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|DestinationFactoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SoapDestinationFactoryTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|wsdlSoapNs
init|=
literal|"http://schemas.xmlsoap.org/wsdl/soap/"
decl_stmt|;
name|String
name|transportURI
init|=
literal|"http://foo/transport"
decl_stmt|;
comment|// String location = "http://localhost/service";
name|ServiceInfo
name|si
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|EndpointInfo
name|ei
init|=
operator|new
name|EndpointInfo
argument_list|(
name|si
argument_list|,
name|wsdlSoapNs
argument_list|)
decl_stmt|;
comment|// this code used to call "new SOAPAddressImpl()", but the test
comment|// is currently not testing anything, and needlessly ties the
comment|// code to a specific implementation of wsdl4j. When the SOAPAddress
comment|// is really needed, it should be mocked.
name|SOAPAddress
name|add
init|=
literal|null
decl_stmt|;
comment|// add.setLocationURI(location);
name|ei
operator|.
name|addExtensor
argument_list|(
name|add
argument_list|)
expr_stmt|;
name|SoapBindingInfo
name|bi
init|=
operator|new
name|SoapBindingInfo
argument_list|(
name|si
argument_list|,
literal|""
argument_list|,
name|Soap11
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|bi
operator|.
name|setTransportURI
argument_list|(
name|transportURI
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setBinding
argument_list|(
name|bi
argument_list|)
expr_stmt|;
name|IMocksControl
name|control
init|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
decl_stmt|;
name|DestinationFactoryManager
name|dfm
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationFactoryManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|DestinationFactory
name|fooDF
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|Destination
name|dest
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|dfm
operator|.
name|getDestinationFactory
argument_list|(
name|transportURI
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|fooDF
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|fooDF
operator|.
name|getDestination
argument_list|(
name|ei
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
comment|// SoapDestinationFactory sdf = new SoapDestinationFactory(dfm);
comment|// Destination dest2 = sdf.getDestination(ei);
comment|// assertNotNull(dest2);
comment|// TODO: doesn't pass because I don't know how to use easymock :-(
comment|// assertEquals(dest, dest2);
block|}
block|}
end_class

end_unit

