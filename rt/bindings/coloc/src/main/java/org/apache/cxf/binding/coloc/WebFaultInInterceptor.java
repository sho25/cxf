begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|coloc
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|UnwrappedOperationInfo
import|;
end_import

begin_class
specifier|public
class|class
name|WebFaultInInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|WebFaultInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_LOGICAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|Exception
name|ex
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|500
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|Fault
condition|)
block|{
name|Fault
name|f
init|=
operator|(
name|Fault
operator|)
name|ex
decl_stmt|;
name|ex
operator|=
operator|(
name|Exception
operator|)
name|f
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ex
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|QName
name|faultName
init|=
name|this
operator|.
name|getFaultName
argument_list|(
name|ex
argument_list|)
decl_stmt|;
if|if
condition|(
name|faultName
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|BindingOperationInfo
name|boi
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
name|getFaultMessagePart
argument_list|(
name|faultName
argument_list|,
name|boi
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|QName
name|getFaultName
parameter_list|(
name|Exception
name|webFault
parameter_list|)
block|{
name|QName
name|faultName
init|=
literal|null
decl_stmt|;
name|WebFault
name|wf
init|=
name|webFault
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|WebFault
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|wf
operator|!=
literal|null
condition|)
block|{
name|faultName
operator|=
operator|new
name|QName
argument_list|(
name|wf
operator|.
name|targetNamespace
argument_list|()
argument_list|,
name|wf
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|faultName
return|;
block|}
specifier|private
name|MessagePartInfo
name|getFaultMessagePart
parameter_list|(
name|QName
name|qname
parameter_list|,
name|OperationInfo
name|op
parameter_list|)
block|{
if|if
condition|(
name|op
operator|.
name|isUnwrapped
argument_list|()
operator|&&
operator|(
name|op
operator|instanceof
name|UnwrappedOperationInfo
operator|)
condition|)
block|{
name|op
operator|=
operator|(
operator|(
name|UnwrappedOperationInfo
operator|)
name|op
operator|)
operator|.
name|getWrappedOperation
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|FaultInfo
name|faultInfo
range|:
name|op
operator|.
name|getFaults
argument_list|()
control|)
block|{
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|faultInfo
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|String
name|ns
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mpi
operator|.
name|isElement
argument_list|()
condition|)
block|{
name|ns
operator|=
name|mpi
operator|.
name|getElementQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ns
operator|=
name|mpi
operator|.
name|getTypeQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|qname
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|mpi
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|&&
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|)
block|{
return|return
name|mpi
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

