begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|coloc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|managers
operator|.
name|PhaseManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|ColocOutInterceptorTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|COLOCATED
init|=
name|Message
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".COLOCATED"
decl_stmt|;
specifier|private
name|IMocksControl
name|control
init|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
decl_stmt|;
specifier|private
name|ColocOutInterceptor
name|colocOut
decl_stmt|;
specifier|private
name|Message
name|msg
decl_stmt|;
specifier|private
name|Exchange
name|ex
decl_stmt|;
specifier|public
name|ColocOutInterceptorTest
parameter_list|()
block|{
name|control
operator|.
name|makeThreadSafe
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|colocOut
operator|=
operator|new
name|ColocOutInterceptor
argument_list|()
expr_stmt|;
name|msg
operator|=
operator|new
name|MessageImpl
argument_list|()
expr_stmt|;
name|ex
operator|=
operator|new
name|ExchangeImpl
argument_list|()
expr_stmt|;
name|msg
operator|.
name|setExchange
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|colocOut
operator|.
name|setBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColocOutPhase
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|Phase
operator|.
name|POST_LOGICAL
argument_list|,
name|colocOut
operator|.
name|getPhase
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColocOutInvalidBus
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|colocOut
operator|.
name|handleMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown a fault"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|f
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Bus not created or not set as default bus."
argument_list|,
name|f
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColocOutInvalidServiceRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|setupBus
argument_list|()
expr_stmt|;
try|try
block|{
name|colocOut
operator|.
name|handleMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown a fault"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|f
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Server Registry not registered with bus."
argument_list|,
name|f
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColocOutInvalidEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|Bus
name|bus
init|=
name|setupBus
argument_list|()
decl_stmt|;
name|ServerRegistry
name|sr
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServerRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|ServerRegistry
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sr
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|colocOut
operator|.
name|handleMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown a fault"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|f
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Consumer Endpoint not found in exchange."
argument_list|,
name|f
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColocOutInvalidOperation
parameter_list|()
throws|throws
name|Exception
block|{
name|Bus
name|bus
init|=
name|setupBus
argument_list|()
decl_stmt|;
name|ServerRegistry
name|sr
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServerRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|ServerRegistry
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sr
argument_list|)
expr_stmt|;
name|Endpoint
name|ep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|ep
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|colocOut
operator|.
name|handleMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown a fault"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|f
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Operation not found in exchange."
argument_list|,
name|f
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColocOutIsColocated
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyIsColocatedWithNullList
argument_list|()
expr_stmt|;
name|verifyIsColocatedWithEmptyList
argument_list|()
expr_stmt|;
name|verifyIsColocatedWithDifferentService
argument_list|()
expr_stmt|;
name|verifyIsColocatedWithDifferentEndpoint
argument_list|()
expr_stmt|;
name|verifyIsColocatedWithDifferentOperation
argument_list|()
expr_stmt|;
name|verifyIsColocatedWithSameOperation
argument_list|()
expr_stmt|;
name|verifyIsColocatedWithCompatibleOperation
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColocOutIsColocatedPropertySet
parameter_list|()
throws|throws
name|Exception
block|{
name|colocOut
operator|=
operator|new
name|TestColocOutInterceptor1
argument_list|()
expr_stmt|;
name|Bus
name|bus
init|=
name|setupBus
argument_list|()
decl_stmt|;
name|ServerRegistry
name|sr
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServerRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|ServerRegistry
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sr
argument_list|)
expr_stmt|;
comment|//Funtion Param
name|Server
name|s1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Server
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|Endpoint
name|sep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|sep
argument_list|)
expr_stmt|;
name|QName
name|op
init|=
operator|new
name|QName
argument_list|(
literal|"E"
argument_list|,
literal|"F"
argument_list|)
decl_stmt|;
name|QName
name|intf
init|=
operator|new
name|QName
argument_list|(
literal|"G"
argument_list|,
literal|"H"
argument_list|)
decl_stmt|;
name|BindingInfo
name|sbi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceInfo
name|ssi
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|InterfaceInfo
name|sii
init|=
operator|new
name|InterfaceInfo
argument_list|(
name|ssi
argument_list|,
name|intf
argument_list|)
decl_stmt|;
name|sii
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|OperationInfo
name|soi
init|=
name|sii
operator|.
name|getOperation
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|ServiceInfo
name|rsi
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|InterfaceInfo
name|rii
init|=
operator|new
name|InterfaceInfo
argument_list|(
name|rsi
argument_list|,
name|intf
argument_list|)
decl_stmt|;
name|rii
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|OperationInfo
name|roi
init|=
name|rii
operator|.
name|getOperation
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|sboi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|rboi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|sboi
argument_list|)
expr_stmt|;
comment|//Local var
name|Service
name|ses
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInfo
name|sei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Endpoint
name|rep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Service
name|res
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingInfo
name|rbi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInfo
name|rei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sr
operator|.
name|getServers
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sep
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ses
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sep
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sei
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|s1
operator|.
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rep
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rep
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rei
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ses
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|res
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rei
operator|.
name|getBinding
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rbi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sboi
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|op
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sboi
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|soi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rboi
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|op
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rboi
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|roi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rbi
operator|.
name|getOperation
argument_list|(
name|op
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rboi
argument_list|)
expr_stmt|;
name|InterceptorChain
name|chain
init|=
name|control
operator|.
name|createMock
argument_list|(
name|InterceptorChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setInterceptorChain
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sboi
operator|.
name|getBinding
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sbi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sbi
operator|.
name|getInterface
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sii
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|colocOut
operator|.
name|handleMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"COLOCATED property should be set"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|msg
operator|.
name|get
argument_list|(
name|COLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Message.WSDL_OPERATION property should be set"
argument_list|,
name|op
argument_list|,
name|msg
operator|.
name|get
argument_list|(
name|Message
operator|.
name|WSDL_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Message.WSDL_INTERFACE property should be set"
argument_list|,
name|intf
argument_list|,
name|msg
operator|.
name|get
argument_list|(
name|Message
operator|.
name|WSDL_INTERFACE
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvokeInboundChain
parameter_list|()
block|{
comment|//Reset Exchange on msg
name|msg
operator|.
name|setExchange
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Bus
name|bus
init|=
name|setupBus
argument_list|()
decl_stmt|;
name|colocOut
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|PhaseManager
name|pm
init|=
operator|new
name|PhaseManagerImpl
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|PhaseManager
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|pm
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Endpoint
name|ep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Binding
name|bd
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Binding
operator|.
name|class
argument_list|)
decl_stmt|;
name|Service
name|srv
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|ex
operator|.
name|setInMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|Bus
operator|.
name|class
argument_list|,
name|bus
argument_list|)
expr_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|ep
argument_list|)
expr_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|Service
operator|.
name|class
argument_list|,
name|srv
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ep
operator|.
name|getBinding
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bd
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bd
operator|.
name|createMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ep
operator|.
name|getInInterceptors
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ep
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|srv
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|srv
operator|.
name|getInInterceptors
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getInInterceptors
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|colocOut
operator|.
name|invokeInboundChain
argument_list|(
name|ex
argument_list|,
name|ep
argument_list|)
expr_stmt|;
name|Message
name|inMsg
init|=
name|ex
operator|.
name|getInMessage
argument_list|()
decl_stmt|;
name|assertNotSame
argument_list|(
name|msg
argument_list|,
name|inMsg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Requestor role should be set to true."
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|inMsg
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Inbound Message should be set to true."
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|inMsg
operator|.
name|get
argument_list|(
name|Message
operator|.
name|INBOUND_MESSAGE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Inbound Message should have interceptor chain set."
argument_list|,
name|inMsg
operator|.
name|getInterceptorChain
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Client Invoke state should be FINISHED"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|ex
operator|.
name|get
argument_list|(
name|ClientImpl
operator|.
name|FINISHED
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyIsColocatedWithNullList
parameter_list|()
block|{
name|Server
name|val
init|=
name|colocOut
operator|.
name|isColocated
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Is not a colocated call"
argument_list|,
literal|null
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyIsColocatedWithEmptyList
parameter_list|()
block|{
name|List
argument_list|<
name|Server
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//Local var
name|Endpoint
name|sep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Service
name|ses
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInfo
name|sei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sep
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ses
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sep
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sei
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Server
name|val
init|=
name|colocOut
operator|.
name|isColocated
argument_list|(
name|list
argument_list|,
name|sep
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Is not a colocated call"
argument_list|,
literal|null
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyIsColocatedWithDifferentService
parameter_list|()
block|{
comment|//Funtion Param
name|Server
name|s1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Server
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|Endpoint
name|sep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Local var
name|Service
name|ses
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|Endpoint
name|rep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Service
name|res
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sep
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ses
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|s1
operator|.
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rep
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ses
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"A"
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|res
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Server
name|val
init|=
name|colocOut
operator|.
name|isColocated
argument_list|(
name|list
argument_list|,
name|sep
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Is not a colocated call"
argument_list|,
literal|null
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyIsColocatedWithDifferentEndpoint
parameter_list|()
block|{
comment|//Funtion Param
name|Server
name|s1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Server
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|Endpoint
name|sep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|sboi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Local var
name|Service
name|ses
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInfo
name|sei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Endpoint
name|rep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Service
name|res
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInfo
name|rei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sep
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ses
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sep
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sei
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|s1
operator|.
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rep
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rep
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rei
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ses
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|res
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"C"
argument_list|,
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Server
name|val
init|=
name|colocOut
operator|.
name|isColocated
argument_list|(
name|list
argument_list|,
name|sep
argument_list|,
name|sboi
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Is not a colocated call"
argument_list|,
literal|null
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyIsColocatedWithDifferentOperation
parameter_list|()
block|{
comment|//Funtion Param
name|Server
name|s1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Server
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|Endpoint
name|sep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|sboi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Local var
name|Service
name|ses
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceInfo
name|ssi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInfo
name|sei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|TestBindingInfo
name|rbi
init|=
operator|new
name|TestBindingInfo
argument_list|(
name|ssi
argument_list|,
literal|"testBinding"
argument_list|)
decl_stmt|;
name|Endpoint
name|rep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Service
name|res
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInfo
name|rei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sep
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ses
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sep
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sei
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|s1
operator|.
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rep
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rep
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rei
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ses
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|res
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rei
operator|.
name|getBinding
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rbi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sboi
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"E"
argument_list|,
literal|"F"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Causes ConcurrentModification intermittently
comment|//QName op = new QName("E", "F");
comment|//EasyMock.expect(rbi.getOperation(op).andReturn(null);
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Server
name|val
init|=
name|colocOut
operator|.
name|isColocated
argument_list|(
name|list
argument_list|,
name|sep
argument_list|,
name|sboi
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Is not a colocated call"
argument_list|,
literal|null
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BindingOperation.getOperation was not called"
argument_list|,
literal|1
argument_list|,
name|rbi
operator|.
name|getOpCount
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyIsColocatedWithSameOperation
parameter_list|()
block|{
name|colocOut
operator|=
operator|new
name|TestColocOutInterceptor1
argument_list|()
expr_stmt|;
comment|//Funtion Param
name|Server
name|s1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Server
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|Endpoint
name|sep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|sboi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Local var
name|Service
name|ses
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInfo
name|sei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingInfo
name|rbi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Endpoint
name|rep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Service
name|res
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInfo
name|rei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|rboi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|QName
name|op
init|=
operator|new
name|QName
argument_list|(
literal|"E"
argument_list|,
literal|"F"
argument_list|)
decl_stmt|;
name|QName
name|intf
init|=
operator|new
name|QName
argument_list|(
literal|"G"
argument_list|,
literal|"H"
argument_list|)
decl_stmt|;
name|QName
name|inmi
init|=
operator|new
name|QName
argument_list|(
literal|"M"
argument_list|,
literal|"in"
argument_list|)
decl_stmt|;
name|QName
name|outmi
init|=
operator|new
name|QName
argument_list|(
literal|"M"
argument_list|,
literal|"out"
argument_list|)
decl_stmt|;
name|ServiceInfo
name|ssi
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|InterfaceInfo
name|sii
init|=
operator|new
name|InterfaceInfo
argument_list|(
name|ssi
argument_list|,
name|intf
argument_list|)
decl_stmt|;
name|sii
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|OperationInfo
name|soi
init|=
name|sii
operator|.
name|getOperation
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|MessageInfo
name|mii
init|=
operator|new
name|MessageInfo
argument_list|(
name|soi
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|,
name|inmi
argument_list|)
decl_stmt|;
name|MessageInfo
name|mio
init|=
operator|new
name|MessageInfo
argument_list|(
name|soi
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|OUTPUT
argument_list|,
name|outmi
argument_list|)
decl_stmt|;
name|soi
operator|.
name|setInput
argument_list|(
literal|"in"
argument_list|,
name|mii
argument_list|)
expr_stmt|;
name|soi
operator|.
name|setOutput
argument_list|(
literal|"out"
argument_list|,
name|mio
argument_list|)
expr_stmt|;
name|ServiceInfo
name|rsi
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|InterfaceInfo
name|rii
init|=
operator|new
name|InterfaceInfo
argument_list|(
name|rsi
argument_list|,
name|intf
argument_list|)
decl_stmt|;
name|rii
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|OperationInfo
name|roi
init|=
name|rii
operator|.
name|getOperation
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|roi
operator|.
name|setInput
argument_list|(
literal|"in"
argument_list|,
name|mii
argument_list|)
expr_stmt|;
name|roi
operator|.
name|setOutput
argument_list|(
literal|"out"
argument_list|,
name|mio
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sep
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ses
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sep
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sei
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|s1
operator|.
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rep
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rep
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rei
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ses
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|res
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rei
operator|.
name|getBinding
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rbi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sboi
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sboi
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|soi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rboi
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rboi
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|roi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rbi
operator|.
name|getOperation
argument_list|(
name|op
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rboi
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Server
name|val
init|=
name|colocOut
operator|.
name|isColocated
argument_list|(
name|list
argument_list|,
name|sep
argument_list|,
name|sboi
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting a colocated call"
argument_list|,
name|s1
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyIsColocatedWithCompatibleOperation
parameter_list|()
block|{
name|colocOut
operator|=
operator|new
name|TestColocOutInterceptor1
argument_list|()
expr_stmt|;
comment|//Funtion Param
name|Server
name|s1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Server
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|Endpoint
name|sep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|sboi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Local var
name|Service
name|ses
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInfo
name|sei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingInfo
name|rbi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Endpoint
name|rep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Service
name|res
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInfo
name|rei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|rboi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|QName
name|op
init|=
operator|new
name|QName
argument_list|(
literal|"E"
argument_list|,
literal|"F"
argument_list|)
decl_stmt|;
name|QName
name|intf
init|=
operator|new
name|QName
argument_list|(
literal|"G"
argument_list|,
literal|"H"
argument_list|)
decl_stmt|;
name|QName
name|inmi
init|=
operator|new
name|QName
argument_list|(
literal|"M"
argument_list|,
literal|"in"
argument_list|)
decl_stmt|;
name|QName
name|outmi
init|=
operator|new
name|QName
argument_list|(
literal|"M"
argument_list|,
literal|"out"
argument_list|)
decl_stmt|;
name|ServiceInfo
name|ssi
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|InterfaceInfo
name|sii
init|=
operator|new
name|InterfaceInfo
argument_list|(
name|ssi
argument_list|,
name|intf
argument_list|)
decl_stmt|;
name|sii
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|OperationInfo
name|soi
init|=
name|sii
operator|.
name|getOperation
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|MessageInfo
name|mii
init|=
operator|new
name|MessageInfo
argument_list|(
name|soi
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|,
name|inmi
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|mpi
init|=
name|mii
operator|.
name|addMessagePart
argument_list|(
literal|"parameters"
argument_list|)
decl_stmt|;
name|mpi
operator|.
name|setTypeClass
argument_list|(
name|Source
operator|.
name|class
argument_list|)
expr_stmt|;
name|MessageInfo
name|mio
init|=
operator|new
name|MessageInfo
argument_list|(
name|soi
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|OUTPUT
argument_list|,
name|outmi
argument_list|)
decl_stmt|;
name|mpi
operator|=
name|mio
operator|.
name|addMessagePart
argument_list|(
literal|"parameters"
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setTypeClass
argument_list|(
name|Source
operator|.
name|class
argument_list|)
expr_stmt|;
name|soi
operator|.
name|setInput
argument_list|(
literal|"in"
argument_list|,
name|mii
argument_list|)
expr_stmt|;
name|soi
operator|.
name|setOutput
argument_list|(
literal|"out"
argument_list|,
name|mio
argument_list|)
expr_stmt|;
name|ServiceInfo
name|rsi
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|InterfaceInfo
name|rii
init|=
operator|new
name|InterfaceInfo
argument_list|(
name|rsi
argument_list|,
name|intf
argument_list|)
decl_stmt|;
name|rii
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|OperationInfo
name|roi
init|=
name|rii
operator|.
name|getOperation
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|mii
operator|=
operator|new
name|MessageInfo
argument_list|(
name|roi
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|,
name|inmi
argument_list|)
expr_stmt|;
name|mpi
operator|=
name|mii
operator|.
name|addMessagePart
argument_list|(
literal|"parameters"
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setTypeClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|mio
operator|=
operator|new
name|MessageInfo
argument_list|(
name|roi
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|OUTPUT
argument_list|,
name|outmi
argument_list|)
expr_stmt|;
name|mpi
operator|=
name|mio
operator|.
name|addMessagePart
argument_list|(
literal|"parameters"
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setTypeClass
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|roi
operator|.
name|setInput
argument_list|(
literal|"in"
argument_list|,
name|mii
argument_list|)
expr_stmt|;
name|roi
operator|.
name|setOutput
argument_list|(
literal|"out"
argument_list|,
name|mio
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sep
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ses
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sep
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sei
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|s1
operator|.
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rep
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rep
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rep
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rei
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ses
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|res
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"C"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rei
operator|.
name|getBinding
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rbi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sboi
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sboi
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|soi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rboi
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rboi
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|roi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rbi
operator|.
name|getOperation
argument_list|(
name|op
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rboi
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Server
name|val
init|=
name|colocOut
operator|.
name|isColocated
argument_list|(
name|list
argument_list|,
name|sep
argument_list|,
name|sboi
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting a colocated call"
argument_list|,
name|s1
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Bus
name|setupBus
parameter_list|()
block|{
name|Bus
name|bus
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
return|return
name|bus
return|;
block|}
class|class
name|TestColocOutInterceptor1
extends|extends
name|ColocOutInterceptor
block|{
specifier|public
name|void
name|invokeColocObserver
parameter_list|(
name|Message
name|outMsg
parameter_list|,
name|Endpoint
name|inboundEndpoint
parameter_list|)
block|{
comment|//No Op
block|}
specifier|public
name|void
name|invokeInboundChain
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Endpoint
name|ep
parameter_list|)
block|{
comment|//No Op
block|}
block|}
class|class
name|TestBindingInfo
extends|extends
name|BindingInfo
block|{
specifier|private
name|int
name|opCount
decl_stmt|;
name|TestBindingInfo
parameter_list|(
name|ServiceInfo
name|si
parameter_list|,
name|String
name|bindingId
parameter_list|)
block|{
name|super
argument_list|(
name|si
argument_list|,
name|bindingId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getOpCount
parameter_list|()
block|{
return|return
name|opCount
return|;
block|}
specifier|public
name|BindingOperationInfo
name|getOperation
parameter_list|(
name|QName
name|opName
parameter_list|)
block|{
name|BindingOperationInfo
name|boi
init|=
name|super
operator|.
name|getOperation
argument_list|(
name|opName
argument_list|)
decl_stmt|;
operator|++
name|opCount
expr_stmt|;
return|return
name|boi
return|;
block|}
block|}
block|}
end_class

end_unit

