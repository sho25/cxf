begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|jbi
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jbi
operator|.
name|messaging
operator|.
name|MessageExchange
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|jbi
operator|.
name|JBIBindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|jbi
operator|.
name|JBIConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|jbi
operator|.
name|JBIMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JBIOperationInInterceptorTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JBIOperationInInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|LOG
operator|.
name|getResourceBundle
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testPhase
parameter_list|()
throws|throws
name|Exception
block|{
name|PhaseInterceptor
argument_list|<
name|JBIMessage
argument_list|>
name|interceptor
init|=
operator|new
name|JBIOperationInInterceptor
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Phase
operator|.
name|PRE_PROTOCOL
argument_list|,
name|interceptor
operator|.
name|getPhase
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnknownOperation
parameter_list|()
throws|throws
name|Exception
block|{
name|PhaseInterceptor
argument_list|<
name|JBIMessage
argument_list|>
name|interceptor
init|=
operator|new
name|JBIOperationInInterceptor
argument_list|()
decl_stmt|;
name|JBIMessage
name|msg
init|=
operator|new
name|JBIMessage
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|MessageExchange
name|me
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MessageExchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|me
operator|.
name|getOperation
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:test"
argument_list|,
literal|"SayHi"
argument_list|)
argument_list|)
operator|.
name|times
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|MessageExchange
operator|.
name|class
argument_list|,
name|me
argument_list|)
expr_stmt|;
name|EndpointInfo
name|endpointInfo
init|=
operator|new
name|EndpointInfo
argument_list|()
decl_stmt|;
name|endpointInfo
operator|.
name|setBinding
argument_list|(
operator|new
name|JBIBindingInfo
argument_list|(
literal|null
argument_list|,
name|JBIConstants
operator|.
name|NS_JBI_BINDING
argument_list|)
argument_list|)
expr_stmt|;
name|Endpoint
name|ep
init|=
operator|new
name|EndpointImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|endpointInfo
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setExchange
argument_list|(
operator|new
name|ExchangeImpl
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|ep
argument_list|)
expr_stmt|;
try|try
block|{
name|interceptor
operator|.
name|handleMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"shouldn't found SayHi operation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|fault
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|fault
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|Message
argument_list|(
literal|"UNKNOWN_OPERATION"
argument_list|,
name|BUNDLE
argument_list|,
name|msg
operator|.
name|getJbiExchange
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

