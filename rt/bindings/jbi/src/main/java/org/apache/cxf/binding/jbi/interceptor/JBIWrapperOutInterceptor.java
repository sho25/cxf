begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|jbi
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|jbi
operator|.
name|JBIConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractOutDatabindingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_class
specifier|public
class|class
name|JBIWrapperOutInterceptor
extends|extends
name|AbstractOutDatabindingInterceptor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JBIWrapperOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|LOG
operator|.
name|getResourceBundle
argument_list|()
decl_stmt|;
specifier|public
name|JBIWrapperOutInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|MARSHAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|BindingOperationInfo
name|bop
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|XMLStreamWriter
name|xmlWriter
init|=
name|getXMLStreamWriter
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|DataWriter
argument_list|<
name|XMLStreamWriter
argument_list|>
name|dataWriter
init|=
name|getDataWriter
argument_list|(
name|message
argument_list|,
name|service
argument_list|,
name|XMLStreamWriter
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|xmlWriter
operator|.
name|setPrefix
argument_list|(
literal|"jbi"
argument_list|,
name|JBIConstants
operator|.
name|NS_JBI_WRAPPER
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
name|JBIConstants
operator|.
name|NS_JBI_WRAPPER
argument_list|,
name|JBIConstants
operator|.
name|JBI_WRAPPER_MESSAGE
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeNamespace
argument_list|(
literal|"jbi"
argument_list|,
name|JBIConstants
operator|.
name|NS_JBI_WRAPPER
argument_list|)
expr_stmt|;
name|setTypeAttr
argument_list|(
name|xmlWriter
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|parts
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|parts
operator|=
name|bop
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|parts
operator|=
name|bop
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|?
argument_list|>
name|objs
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|objs
operator|.
name|size
argument_list|()
operator|<
name|parts
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"NOT_EQUAL_ARG_NUM"
argument_list|,
name|BUNDLE
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|parts
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|MessagePartInfo
name|part
init|=
name|parts
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|Object
name|obj
init|=
name|objs
operator|.
name|get
argument_list|(
name|part
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|part
operator|.
name|isElement
argument_list|()
condition|)
block|{
if|if
condition|(
name|part
operator|.
name|getTypeClass
argument_list|()
operator|==
name|String
operator|.
name|class
condition|)
block|{
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
name|JBIConstants
operator|.
name|NS_JBI_WRAPPER
argument_list|,
name|JBIConstants
operator|.
name|JBI_WRAPPER_PART
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeCharacters
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|part
operator|=
operator|new
name|MessagePartInfo
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|part
operator|.
name|getMessageInfo
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|part
operator|.
name|setConcreteName
argument_list|(
name|JBIConstants
operator|.
name|JBI_WRAPPER_PART
argument_list|)
expr_stmt|;
name|dataWriter
operator|.
name|write
argument_list|(
name|obj
argument_list|,
name|part
argument_list|,
name|xmlWriter
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
name|JBIConstants
operator|.
name|NS_JBI_WRAPPER
argument_list|,
name|JBIConstants
operator|.
name|JBI_WRAPPER_PART
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|dataWriter
operator|.
name|write
argument_list|(
name|obj
argument_list|,
name|part
argument_list|,
name|xmlWriter
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
block|}
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"STAX_WRITE_EXC"
argument_list|,
name|BUNDLE
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|setTypeAttr
parameter_list|(
name|XMLStreamWriter
name|xmlWriter
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|BindingOperationInfo
name|wsdlOperation
init|=
name|getOperation
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|BindingMessageInfo
name|wsdlMessage
init|=
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|?
name|wsdlOperation
operator|.
name|getInput
argument_list|()
else|:
name|wsdlOperation
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|String
name|typeNamespace
init|=
name|wsdlMessage
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeNamespace
operator|==
literal|null
operator|||
name|typeNamespace
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"messageType namespace is null or empty"
argument_list|)
throw|;
block|}
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
operator|+
literal|":"
operator|+
literal|"msg"
argument_list|,
name|typeNamespace
argument_list|)
expr_stmt|;
name|String
name|typeLocalName
init|=
name|wsdlMessage
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeLocalName
operator|==
literal|null
operator|||
name|typeLocalName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"messageType local name is null or empty"
argument_list|)
throw|;
block|}
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"type"
argument_list|,
literal|"msg"
operator|+
literal|":"
operator|+
name|typeLocalName
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|BindingOperationInfo
name|getOperation
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|BindingOperationInfo
name|operation
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"Operation not bound on this message"
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|operation
return|;
block|}
specifier|protected
name|boolean
name|isRequestor
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|message
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|message
operator|.
name|containsKey
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

