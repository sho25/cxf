begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|jbi
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|jbi
operator|.
name|JBIConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|jbi
operator|.
name|JBIFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|jbi
operator|.
name|JBIMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|NSStack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_class
specifier|public
class|class
name|JBIFaultOutInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|JBIMessage
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|JBIFaultOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|JBIFaultOutInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|MARSHAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|JBIMessage
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|message
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
operator|new
name|Integer
argument_list|(
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|NSStack
name|nsStack
init|=
operator|new
name|NSStack
argument_list|()
decl_stmt|;
name|nsStack
operator|.
name|push
argument_list|()
expr_stmt|;
try|try
block|{
name|XMLStreamWriter
name|writer
init|=
name|getWriter
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Fault
name|fault
init|=
name|getFault
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|JBIFault
name|jbiFault
init|=
name|JBIFault
operator|.
name|createFault
argument_list|(
name|fault
argument_list|)
decl_stmt|;
name|nsStack
operator|.
name|add
argument_list|(
name|JBIConstants
operator|.
name|NS_JBI_BINDING
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
name|nsStack
operator|.
name|getPrefix
argument_list|(
name|JBIConstants
operator|.
name|NS_JBI_BINDING
argument_list|)
decl_stmt|;
name|StaxUtils
operator|.
name|writeStartElement
argument_list|(
name|writer
argument_list|,
name|prefix
argument_list|,
name|JBIFault
operator|.
name|JBI_FAULT_ROOT
argument_list|,
name|JBIConstants
operator|.
name|NS_JBI_BINDING
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|jbiFault
operator|.
name|hasDetails
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeEmptyElement
argument_list|(
literal|"fault"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|detail
init|=
name|jbiFault
operator|.
name|getDetail
argument_list|()
decl_stmt|;
name|NodeList
name|details
init|=
name|detail
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|details
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|details
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|instanceof
name|Element
condition|)
block|{
name|StaxUtils
operator|.
name|writeNode
argument_list|(
name|details
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|,
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|xe
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"XML_WRITE_EXC"
argument_list|,
name|BUNDLE
argument_list|)
argument_list|,
name|xe
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Fault
name|getFault
parameter_list|(
name|JBIMessage
name|message
parameter_list|)
block|{
name|Exception
name|e
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
name|Fault
name|fault
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"NO_EXCEPTION"
argument_list|,
name|BUNDLE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|Fault
condition|)
block|{
name|fault
operator|=
operator|(
name|Fault
operator|)
name|e
expr_stmt|;
block|}
else|else
block|{
name|fault
operator|=
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|fault
return|;
block|}
specifier|protected
name|XMLStreamWriter
name|getWriter
parameter_list|(
name|JBIMessage
name|message
parameter_list|)
block|{
name|XMLStreamWriter
name|writer
init|=
name|message
operator|.
name|getContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"NO_XML_STREAM_WRITER"
argument_list|,
name|BUNDLE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|writer
return|;
block|}
block|}
end_class

end_unit

