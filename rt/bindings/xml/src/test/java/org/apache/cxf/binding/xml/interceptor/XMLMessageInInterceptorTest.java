begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|xml
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|DocLiteralInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|bare
operator|.
name|types
operator|.
name|MyComplexStructType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|wrapped
operator|.
name|types
operator|.
name|GreetMe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|XMLMessageInInterceptorTest
extends|extends
name|TestBase
block|{
name|XMLMessageInInterceptor
name|in
init|=
operator|new
name|XMLMessageInInterceptor
argument_list|(
literal|"phase1"
argument_list|)
decl_stmt|;
name|DocLiteralInInterceptor
name|docLitIn
init|=
operator|new
name|DocLiteralInInterceptor
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleMessageOnBareMultiParam
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ns
init|=
literal|"http://apache.org/hello_world_xml_http/bare"
decl_stmt|;
name|prepareMessage
argument_list|(
literal|"/message-bare-multi-param.xml"
argument_list|)
expr_stmt|;
name|common
argument_list|(
literal|"/wsdl/hello_world_xml_bare.wsdl"
argument_list|,
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"XMLPort"
argument_list|)
argument_list|,
name|MyComplexStructType
operator|.
name|class
argument_list|)
expr_stmt|;
name|OperationInfo
name|op
init|=
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"testMultiParamPart"
argument_list|)
argument_list|)
decl_stmt|;
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
literal|0
argument_list|)
operator|.
name|setTypeClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
literal|1
argument_list|)
operator|.
name|setTypeClass
argument_list|(
name|MyComplexStructType
operator|.
name|class
argument_list|)
expr_stmt|;
name|in
operator|.
name|handleMessage
argument_list|(
name|xmlMessage
argument_list|)
expr_stmt|;
name|docLitIn
operator|.
name|handleMessage
argument_list|(
name|xmlMessage
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
name|xmlMessage
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expect 2 param"
argument_list|,
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"method input in2 is MyComplexStructType"
argument_list|,
literal|true
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|MyComplexStructType
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"method input in1 is String tli"
argument_list|,
literal|true
argument_list|,
operator|(
operator|(
name|String
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|indexOf
argument_list|(
literal|"tli"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleMessageOnBareSingleChild
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ns
init|=
literal|"http://apache.org/hello_world_xml_http/bare"
decl_stmt|;
name|prepareMessage
argument_list|(
literal|"/message-bare-single-param-element.xml"
argument_list|)
expr_stmt|;
name|common
argument_list|(
literal|"/wsdl/hello_world_xml_bare.wsdl"
argument_list|,
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"XMLPort"
argument_list|)
argument_list|)
expr_stmt|;
name|OperationInfo
name|op
init|=
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"greetMe"
argument_list|)
argument_list|)
decl_stmt|;
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
literal|0
argument_list|)
operator|.
name|setTypeClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|in
operator|.
name|handleMessage
argument_list|(
name|xmlMessage
argument_list|)
expr_stmt|;
name|docLitIn
operator|.
name|handleMessage
argument_list|(
name|xmlMessage
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
name|xmlMessage
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expect 1 param"
argument_list|,
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"method input me is String tli"
argument_list|,
literal|true
argument_list|,
operator|(
operator|(
name|String
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|indexOf
argument_list|(
literal|"tli"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleMessageWrapped
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ns
init|=
literal|"http://apache.org/hello_world_xml_http/wrapped"
decl_stmt|;
name|prepareMessage
argument_list|(
literal|"/message-wrap.xml"
argument_list|)
expr_stmt|;
name|common
argument_list|(
literal|"/wsdl/hello_world_xml_wrapped.wsdl"
argument_list|,
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"XMLPort"
argument_list|)
argument_list|,
name|GreetMe
operator|.
name|class
argument_list|)
expr_stmt|;
name|OperationInfo
name|op
init|=
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"greetMe"
argument_list|)
argument_list|)
decl_stmt|;
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
literal|0
argument_list|)
operator|.
name|setTypeClass
argument_list|(
name|GreetMe
operator|.
name|class
argument_list|)
expr_stmt|;
name|in
operator|.
name|handleMessage
argument_list|(
name|xmlMessage
argument_list|)
expr_stmt|;
name|docLitIn
operator|.
name|handleMessage
argument_list|(
name|xmlMessage
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
name|xmlMessage
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expect 1 param"
argument_list|,
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"method input me is String tli"
argument_list|,
literal|true
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|GreetMe
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|prepareMessage
parameter_list|(
name|String
name|messageFileName
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|inputStream
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|messageFileName
argument_list|)
decl_stmt|;
name|xmlMessage
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|inputStream
argument_list|)
expr_stmt|;
name|xmlMessage
operator|.
name|setContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|,
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|inputStream
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

