begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|xml
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|BindingFactoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|xml
operator|.
name|XMLBindingFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|xml
operator|.
name|wsdl11
operator|.
name|XMLWSDLExtensionLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|DestinationFactoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|TestBase
block|{
specifier|protected
name|PhaseInterceptorChain
name|chain
decl_stmt|;
specifier|protected
name|Message
name|xmlMessage
decl_stmt|;
specifier|protected
name|Bus
name|bus
decl_stmt|;
specifier|protected
name|IMocksControl
name|control
decl_stmt|;
specifier|protected
name|ServiceInfo
name|serviceInfo
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|phases
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Phase
name|phase1
init|=
operator|new
name|Phase
argument_list|(
literal|"phase1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Phase
name|phase2
init|=
operator|new
name|Phase
argument_list|(
literal|"phase2"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Phase
name|phase3
init|=
operator|new
name|Phase
argument_list|(
literal|"phase3"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|phases
operator|.
name|add
argument_list|(
name|phase1
argument_list|)
expr_stmt|;
name|phases
operator|.
name|add
argument_list|(
name|phase2
argument_list|)
expr_stmt|;
name|phases
operator|.
name|add
argument_list|(
name|phase3
argument_list|)
expr_stmt|;
name|chain
operator|=
operator|new
name|PhaseInterceptorChain
argument_list|(
name|phases
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|MessageImpl
name|messageImpl
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|messageImpl
operator|.
name|setInterceptorChain
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|messageImpl
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|xmlMessage
operator|=
name|messageImpl
expr_stmt|;
if|if
condition|(
name|JavaUtils
operator|.
name|isJava11Compatible
argument_list|()
condition|)
block|{
comment|//we need this property with JDK11 and easymock4
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.easymock.cglib.experimental_asm7"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{     }
specifier|public
name|InputStream
name|getTestStream
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|,
name|String
name|file
parameter_list|)
block|{
return|return
name|clz
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
return|;
block|}
specifier|public
name|XMLStreamReader
name|getXMLStreamReader
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
return|return
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|is
argument_list|)
return|;
block|}
specifier|public
name|XMLStreamWriter
name|getXMLStreamWriter
parameter_list|(
name|OutputStream
name|os
parameter_list|)
block|{
return|return
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|os
argument_list|)
return|;
block|}
specifier|public
name|Method
name|getTestMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|sei
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
name|Method
index|[]
name|iMethods
init|=
name|sei
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|iMethods
control|)
block|{
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|m
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|common
parameter_list|(
name|String
name|wsdl
parameter_list|,
name|QName
name|portName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|jaxbClasses
parameter_list|)
throws|throws
name|Exception
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|bus
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
expr_stmt|;
name|WSDLManagerImpl
name|manager
init|=
operator|new
name|WSDLManagerImpl
argument_list|()
decl_stmt|;
name|XMLWSDLExtensionLoader
operator|.
name|registerExtensors
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|BindingFactoryManager
name|bindingFactoryManager
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingFactoryManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|BindingFactoryManager
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|bindingFactoryManager
argument_list|)
expr_stmt|;
name|DestinationFactoryManager
name|dfm
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationFactoryManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|DestinationFactoryManager
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|dfm
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|WSDLServiceFactory
name|factory
init|=
operator|new
name|WSDLServiceFactory
argument_list|(
name|bus
argument_list|,
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|wsdl
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|QName
argument_list|(
name|portName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"XMLService"
argument_list|)
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
name|service
init|=
name|factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|EndpointInfo
name|epi
init|=
name|service
operator|.
name|getEndpointInfo
argument_list|(
name|portName
argument_list|)
decl_stmt|;
name|serviceInfo
operator|=
name|epi
operator|.
name|getService
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|epi
argument_list|)
expr_stmt|;
name|Binding
name|xmlBinding
init|=
operator|new
name|XMLBindingFactory
argument_list|()
operator|.
name|createBinding
argument_list|(
name|epi
operator|.
name|getBinding
argument_list|()
argument_list|)
decl_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|JAXBDataBinding
name|db
init|=
operator|new
name|JAXBDataBinding
argument_list|()
decl_stmt|;
name|db
operator|.
name|initialize
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|db
operator|.
name|setContext
argument_list|(
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|jaxbClasses
argument_list|)
argument_list|)
expr_stmt|;
name|service
operator|.
name|setDataBinding
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|epi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getBinding
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|xmlBinding
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andStubReturn
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|xmlMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|xmlMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
operator|.
name|class
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

