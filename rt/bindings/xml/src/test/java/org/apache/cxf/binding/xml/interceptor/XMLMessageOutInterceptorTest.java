begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|xml
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|DepthXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|bare
operator|.
name|types
operator|.
name|MyComplexStructType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_xml_http
operator|.
name|wrapped
operator|.
name|types
operator|.
name|GreetMe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|XMLMessageOutInterceptorTest
extends|extends
name|TestBase
block|{
specifier|static
name|String
name|bareNs
init|=
literal|"http://apache.org/hello_world_xml_http/bare"
decl_stmt|;
specifier|static
name|String
name|wrapNs
init|=
literal|"http://apache.org/hello_world_xml_http/wrapped"
decl_stmt|;
specifier|static
name|String
name|bareNsType
init|=
literal|"http://apache.org/hello_world_xml_http/bare/types"
decl_stmt|;
specifier|static
name|String
name|wrapNsType
init|=
literal|"http://apache.org/hello_world_xml_http/wrapped/types"
decl_stmt|;
name|OutputStream
name|outputStream
decl_stmt|;
name|XMLStreamWriter
name|writer
decl_stmt|;
name|XMLMessageOutInterceptor
name|out
init|=
operator|new
name|XMLMessageOutInterceptor
argument_list|(
literal|"phase1"
argument_list|)
decl_stmt|;
name|MessageContentsList
name|params
init|=
operator|new
name|MessageContentsList
argument_list|()
decl_stmt|;
name|QName
name|bareMyComplexStructTypeQName
init|=
operator|new
name|QName
argument_list|(
name|bareNs
argument_list|,
literal|"in"
argument_list|)
decl_stmt|;
name|QName
name|bareMyComplexStructQName
init|=
operator|new
name|QName
argument_list|(
name|bareNsType
argument_list|,
literal|"myComplexStruct"
argument_list|)
decl_stmt|;
name|QName
name|bareRequestTypeQName
init|=
operator|new
name|QName
argument_list|(
name|bareNsType
argument_list|,
literal|"requestType"
argument_list|)
decl_stmt|;
name|QName
name|wrapGreetMeQName
init|=
operator|new
name|QName
argument_list|(
name|wrapNsType
argument_list|,
literal|"greetMe"
argument_list|)
decl_stmt|;
name|QName
name|wrapRequestTypeQName
init|=
operator|new
name|QName
argument_list|(
name|wrapNsType
argument_list|,
literal|"requestType"
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|prepareMessage
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBareOutSingle
parameter_list|()
throws|throws
name|Exception
block|{
name|MyComplexStructType
name|myComplexStruct
init|=
operator|new
name|MyComplexStructType
argument_list|()
decl_stmt|;
name|myComplexStruct
operator|.
name|setElem1
argument_list|(
literal|"elem1"
argument_list|)
expr_stmt|;
name|myComplexStruct
operator|.
name|setElem2
argument_list|(
literal|"elem2"
argument_list|)
expr_stmt|;
name|myComplexStruct
operator|.
name|setElem3
argument_list|(
literal|45
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|myComplexStruct
argument_list|)
expr_stmt|;
name|common
argument_list|(
literal|"/wsdl/hello_world_xml_bare.wsdl"
argument_list|,
operator|new
name|QName
argument_list|(
name|bareNs
argument_list|,
literal|"XMLPort"
argument_list|)
argument_list|,
name|MyComplexStructType
operator|.
name|class
argument_list|)
expr_stmt|;
name|BindingInfo
name|bi
init|=
name|super
operator|.
name|serviceInfo
operator|.
name|getBinding
argument_list|(
operator|new
name|QName
argument_list|(
name|bareNs
argument_list|,
literal|"Greeter_XMLBinding"
argument_list|)
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|bi
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|bareNs
argument_list|,
literal|"sendReceiveData"
argument_list|)
argument_list|)
decl_stmt|;
name|xmlMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|boi
argument_list|)
expr_stmt|;
name|out
operator|.
name|handleMessage
argument_list|(
name|xmlMessage
argument_list|)
expr_stmt|;
name|XMLStreamReader
name|reader
init|=
name|getXMLReader
argument_list|()
decl_stmt|;
name|DepthXMLStreamReader
name|dxr
init|=
operator|new
name|DepthXMLStreamReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|StaxUtils
operator|.
name|nextEvent
argument_list|(
name|dxr
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|toNextElement
argument_list|(
name|dxr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bareMyComplexStructTypeQName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|dxr
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|toNextElement
argument_list|(
name|dxr
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|toNextText
argument_list|(
name|dxr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|myComplexStruct
operator|.
name|getElem1
argument_list|()
argument_list|,
name|dxr
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBareOutMultiWithRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|MyComplexStructType
name|myComplexStruct
init|=
operator|new
name|MyComplexStructType
argument_list|()
decl_stmt|;
name|myComplexStruct
operator|.
name|setElem1
argument_list|(
literal|"elem1"
argument_list|)
expr_stmt|;
name|myComplexStruct
operator|.
name|setElem2
argument_list|(
literal|"elem2"
argument_list|)
expr_stmt|;
name|myComplexStruct
operator|.
name|setElem3
argument_list|(
literal|45
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"tli"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|myComplexStruct
argument_list|)
expr_stmt|;
name|common
argument_list|(
literal|"/wsdl/hello_world_xml_bare.wsdl"
argument_list|,
operator|new
name|QName
argument_list|(
name|bareNs
argument_list|,
literal|"XMLPort"
argument_list|)
argument_list|,
name|MyComplexStructType
operator|.
name|class
argument_list|)
expr_stmt|;
name|BindingInfo
name|bi
init|=
name|super
operator|.
name|serviceInfo
operator|.
name|getBinding
argument_list|(
operator|new
name|QName
argument_list|(
name|bareNs
argument_list|,
literal|"Greeter_XMLBinding"
argument_list|)
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|bi
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|bareNs
argument_list|,
literal|"testMultiParamPart"
argument_list|)
argument_list|)
decl_stmt|;
name|xmlMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|boi
argument_list|)
expr_stmt|;
name|out
operator|.
name|handleMessage
argument_list|(
name|xmlMessage
argument_list|)
expr_stmt|;
name|XMLStreamReader
name|reader
init|=
name|getXMLReader
argument_list|()
decl_stmt|;
name|DepthXMLStreamReader
name|dxr
init|=
operator|new
name|DepthXMLStreamReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|StaxUtils
operator|.
name|nextEvent
argument_list|(
name|dxr
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|toNextElement
argument_list|(
name|dxr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bareNs
argument_list|,
name|dxr
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"multiParamRootReq"
argument_list|,
name|dxr
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|nextEvent
argument_list|(
name|dxr
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|toNextElement
argument_list|(
name|dxr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bareRequestTypeQName
argument_list|,
name|dxr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|nextEvent
argument_list|(
name|dxr
argument_list|)
expr_stmt|;
if|if
condition|(
name|StaxUtils
operator|.
name|toNextText
argument_list|(
name|dxr
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"tli"
argument_list|,
name|dxr
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|foundRequest
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|StaxUtils
operator|.
name|nextEvent
argument_list|(
name|dxr
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|toNextElement
argument_list|(
name|dxr
argument_list|)
expr_stmt|;
name|QName
name|requestType
init|=
operator|new
name|QName
argument_list|(
name|dxr
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|dxr
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestType
operator|.
name|equals
argument_list|(
name|bareMyComplexStructQName
argument_list|)
condition|)
block|{
name|foundRequest
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"found request type"
argument_list|,
name|foundRequest
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWrapOut
parameter_list|()
throws|throws
name|Exception
block|{
name|GreetMe
name|greetMe
init|=
operator|new
name|GreetMe
argument_list|()
decl_stmt|;
name|greetMe
operator|.
name|setRequestType
argument_list|(
literal|"tli"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|greetMe
argument_list|)
expr_stmt|;
name|common
argument_list|(
literal|"/wsdl/hello_world_xml_wrapped.wsdl"
argument_list|,
operator|new
name|QName
argument_list|(
name|wrapNs
argument_list|,
literal|"XMLPort"
argument_list|)
argument_list|,
name|GreetMe
operator|.
name|class
argument_list|)
expr_stmt|;
name|BindingInfo
name|bi
init|=
name|super
operator|.
name|serviceInfo
operator|.
name|getBinding
argument_list|(
operator|new
name|QName
argument_list|(
name|wrapNs
argument_list|,
literal|"Greeter_XMLBinding"
argument_list|)
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|bi
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|wrapNs
argument_list|,
literal|"greetMe"
argument_list|)
argument_list|)
decl_stmt|;
name|xmlMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|boi
argument_list|)
expr_stmt|;
name|out
operator|.
name|handleMessage
argument_list|(
name|xmlMessage
argument_list|)
expr_stmt|;
name|XMLStreamReader
name|reader
init|=
name|getXMLReader
argument_list|()
decl_stmt|;
name|DepthXMLStreamReader
name|dxr
init|=
operator|new
name|DepthXMLStreamReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|StaxUtils
operator|.
name|nextEvent
argument_list|(
name|dxr
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|toNextElement
argument_list|(
name|dxr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|wrapGreetMeQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|dxr
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|wrapGreetMeQName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|dxr
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|toNextElement
argument_list|(
name|dxr
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|toNextText
argument_list|(
name|dxr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|greetMe
operator|.
name|getRequestType
argument_list|()
argument_list|,
name|dxr
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|prepareMessage
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|paramsList
parameter_list|)
throws|throws
name|Exception
block|{
name|outputStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
comment|// all test case here use input message to do test,
comment|// that means the out interceptor's role is Server-Out
name|xmlMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|xmlMessage
operator|.
name|setContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
name|writer
operator|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
name|xmlMessage
operator|.
name|setContent
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|xmlMessage
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|paramsList
argument_list|)
expr_stmt|;
block|}
specifier|private
name|XMLStreamReader
name|getXMLReader
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|o
init|=
operator|(
name|ByteArrayOutputStream
operator|)
name|xmlMessage
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|InputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|o
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
end_class

end_unit

