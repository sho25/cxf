begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|object
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|AbstractBindingFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerLifeCycleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_class
specifier|public
class|class
name|ObjectBindingFactory
extends|extends
name|AbstractBindingFactory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|BINDING_ID
init|=
literal|"http://cxf.apache.org/binding/object"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RUN_NON_LOGICAL
init|=
literal|"objectBinding.stopAfterLogical"
decl_stmt|;
specifier|private
name|boolean
name|autoRegisterLocalEndpoint
decl_stmt|;
specifier|private
name|boolean
name|initialized
init|=
literal|true
decl_stmt|;
specifier|private
name|LocalServerListener
name|listener
decl_stmt|;
specifier|public
name|ObjectBindingFactory
parameter_list|()
block|{              }
specifier|public
name|ObjectBindingFactory
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|super
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialize
parameter_list|()
block|{
if|if
condition|(
name|autoRegisterLocalEndpoint
condition|)
block|{
name|Bus
name|bus
init|=
name|getBus
argument_list|()
decl_stmt|;
name|ServerLifeCycleManager
name|manager
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ServerLifeCycleManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|!=
literal|null
condition|)
block|{
name|listener
operator|=
operator|new
name|LocalServerListener
argument_list|(
name|bus
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|manager
operator|.
name|registerListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Binding
name|createBinding
parameter_list|(
name|BindingInfo
name|bi
parameter_list|)
block|{
name|ObjectBinding
name|binding
init|=
operator|new
name|ObjectBinding
argument_list|(
name|bi
argument_list|)
decl_stmt|;
name|binding
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ObjectDispatchOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ObjectDispatchInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|binding
return|;
block|}
specifier|public
name|BindingInfo
name|createBindingInfo
parameter_list|(
name|ServiceInfo
name|si
parameter_list|,
name|String
name|bindingid
parameter_list|,
name|Object
name|config
parameter_list|)
block|{
name|BindingInfo
name|info
init|=
name|super
operator|.
name|createBindingInfo
argument_list|(
name|si
argument_list|,
name|bindingid
argument_list|,
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|instanceof
name|ObjectBindingConfiguration
condition|)
block|{
name|ObjectBindingConfiguration
name|c
init|=
operator|(
name|ObjectBindingConfiguration
operator|)
name|config
decl_stmt|;
name|info
operator|.
name|setProperty
argument_list|(
name|RUN_NON_LOGICAL
argument_list|,
name|c
operator|.
name|isNonLogicalPhasesEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
name|si
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|si
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"ObjectBinding"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|OperationInfo
name|o
range|:
name|si
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|BindingOperationInfo
name|bop
init|=
name|info
operator|.
name|buildOperation
argument_list|(
name|o
operator|.
name|getName
argument_list|()
argument_list|,
name|o
operator|.
name|getInputName
argument_list|()
argument_list|,
name|o
operator|.
name|getOutputName
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|addOperation
argument_list|(
name|bop
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
specifier|public
name|boolean
name|isAutoRegisterLocalEndpoint
parameter_list|()
block|{
return|return
name|autoRegisterLocalEndpoint
return|;
block|}
specifier|public
name|void
name|setAutoRegisterLocalEndpoint
parameter_list|(
name|boolean
name|autoRegisterLocalEndpoint
parameter_list|)
block|{
name|this
operator|.
name|autoRegisterLocalEndpoint
operator|=
name|autoRegisterLocalEndpoint
expr_stmt|;
if|if
condition|(
name|initialized
operator|&&
name|listener
operator|==
literal|null
condition|)
block|{
comment|// register the lifecycle listener
name|initialize
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

