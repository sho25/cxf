begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|xml
operator|.
name|interceptor
operator|.
name|XMLMessageInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|DocLiteralInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|StaxInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|WrappedInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_class
specifier|public
class|class
name|DatabindingInSetupInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|WrappedInInterceptor
name|WRAPPED_IN
init|=
operator|new
name|WrappedInInterceptor
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XMLMessageInInterceptor
name|XML_IN
init|=
operator|new
name|XMLMessageInInterceptor
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DocLiteralInInterceptor
name|DOCLIT_IN
init|=
operator|new
name|DocLiteralInInterceptor
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|URIParameterInInterceptor
name|URI_IN
init|=
operator|new
name|URIParameterInInterceptor
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StaxInInterceptor
name|STAX_IN
init|=
operator|new
name|StaxInInterceptor
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DispatchInterceptor
name|DISPATCH_IN
init|=
operator|new
name|DispatchInterceptor
argument_list|()
decl_stmt|;
specifier|public
name|DatabindingInSetupInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|RECEIVE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|boolean
name|client
init|=
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|)
argument_list|)
decl_stmt|;
name|InterceptorChain
name|chain
init|=
name|message
operator|.
name|getInterceptorChain
argument_list|()
decl_stmt|;
if|if
condition|(
name|client
condition|)
block|{
name|chain
operator|.
name|add
argument_list|(
name|DOCLIT_IN
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|XML_IN
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|WRAPPED_IN
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|STAX_IN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chain
operator|.
name|add
argument_list|(
name|URI_IN
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|DISPATCH_IN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

