begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|SchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnnotated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_comment
comment|/**  * @author<a href=""mailto:gnodet [at] gmail.com">Guillaume Nodet</a>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|IriDecoderHelper
block|{
specifier|public
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|IriDecoderHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|IriDecoderHelper
parameter_list|()
block|{      }
specifier|public
specifier|static
name|List
argument_list|<
name|Param
argument_list|>
name|decodeIri
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|loc
parameter_list|)
block|{
name|List
argument_list|<
name|Param
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Param
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getUriPath
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|String
name|locPath
init|=
name|getUriPath
argument_list|(
name|loc
argument_list|)
decl_stmt|;
name|int
name|idx2
init|=
literal|0
decl_stmt|;
name|char
name|c
decl_stmt|;
for|for
control|(
name|int
name|idx1
init|=
literal|0
init|;
name|idx1
operator|<
name|locPath
operator|.
name|length
argument_list|()
condition|;
name|idx1
operator|++
control|)
block|{
name|c
operator|=
name|locPath
operator|.
name|charAt
argument_list|(
name|idx1
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'{'
condition|)
block|{
if|if
condition|(
name|locPath
operator|.
name|charAt
argument_list|(
name|idx1
operator|+
literal|1
argument_list|)
operator|==
literal|'{'
condition|)
block|{
comment|// double curly brace
name|expect
argument_list|(
name|path
argument_list|,
name|idx2
operator|++
argument_list|,
literal|'{'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|locEnd
init|=
name|locPath
operator|.
name|indexOf
argument_list|(
literal|'}'
argument_list|,
name|idx1
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|locPath
operator|.
name|substring
argument_list|(
name|idx1
operator|+
literal|1
argument_list|,
name|locEnd
argument_list|)
decl_stmt|;
name|idx1
operator|=
name|locEnd
expr_stmt|;
name|String
name|endFragment
init|=
name|getEndFragment
argument_list|(
name|locEnd
operator|+
literal|1
argument_list|,
name|locPath
argument_list|)
decl_stmt|;
name|int
name|end
init|=
name|findPartEnd
argument_list|(
name|path
argument_list|,
name|idx2
argument_list|,
name|endFragment
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|path
operator|.
name|substring
argument_list|(
name|idx2
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|idx2
operator|=
name|end
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
operator|new
name|Param
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|expect
argument_list|(
name|path
argument_list|,
name|idx2
operator|++
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|idx2
operator|<
name|path
operator|.
name|length
argument_list|()
condition|)
block|{
name|c
operator|=
name|path
operator|.
name|charAt
argument_list|(
name|idx2
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'?'
condition|)
block|{
name|int
name|end
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|,
name|idx2
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|<
literal|0
condition|)
block|{
name|end
operator|=
name|path
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|addParams
argument_list|(
name|path
argument_list|,
name|idx2
argument_list|,
name|end
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|values
return|;
block|}
specifier|private
specifier|static
name|String
name|getEndFragment
parameter_list|(
name|int
name|i
parameter_list|,
name|String
name|locPath
parameter_list|)
block|{
name|int
name|end
init|=
name|locPath
operator|.
name|indexOf
argument_list|(
literal|'{'
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|==
operator|-
literal|1
condition|)
block|{
name|end
operator|=
name|locPath
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|locPath
operator|.
name|charAt
argument_list|(
name|end
operator|+
literal|1
argument_list|)
operator|==
literal|'{'
condition|)
block|{
return|return
name|getEndFragment
argument_list|(
name|end
operator|+
literal|1
argument_list|,
name|locPath
argument_list|)
return|;
block|}
return|return
name|locPath
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|end
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|addParams
parameter_list|(
name|String
name|input
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|stop
parameter_list|,
name|List
argument_list|<
name|Param
argument_list|>
name|params
parameter_list|)
block|{
while|while
condition|(
name|start
operator|<
name|stop
condition|)
block|{
name|int
name|eq
init|=
name|input
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|int
name|se
init|=
name|input
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|,
name|eq
argument_list|)
decl_stmt|;
if|if
condition|(
name|se
operator|<
literal|0
condition|)
block|{
name|se
operator|=
name|stop
expr_stmt|;
block|}
name|params
operator|.
name|add
argument_list|(
operator|new
name|Param
argument_list|(
name|input
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|eq
argument_list|)
argument_list|,
name|input
operator|.
name|substring
argument_list|(
name|eq
operator|+
literal|1
argument_list|,
name|se
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
name|se
operator|+
literal|1
expr_stmt|;
block|}
block|}
comment|/**      * @param endFragment      *      */
specifier|public
specifier|static
name|int
name|findPartEnd
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|c
parameter_list|,
name|String
name|endFragment
parameter_list|)
block|{
name|int
name|end
init|=
name|path
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|end
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|endFragment
argument_list|)
condition|)
block|{
name|i
operator|=
name|path
operator|.
name|indexOf
argument_list|(
name|endFragment
argument_list|,
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|c
operator|&&
name|i
operator|<
name|end
condition|)
block|{
name|end
operator|=
name|i
expr_stmt|;
block|}
block|}
name|i
operator|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|,
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|c
operator|&&
name|i
operator|<
name|end
condition|)
block|{
name|end
operator|=
name|i
expr_stmt|;
block|}
return|return
name|end
return|;
block|}
comment|/**      * Check that the next character is the one expected or throw an exception      */
specifier|public
specifier|static
name|void
name|expect
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|index
parameter_list|,
name|char
name|c
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|!=
name|c
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected character '"
operator|+
name|c
operator|+
literal|"' at index "
operator|+
name|index
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get the path of a given uri, removing the scheme and authority parts      */
specifier|public
specifier|static
name|String
name|getUriPath
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|int
name|idx
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|"://"
argument_list|)
decl_stmt|;
name|int
name|idx2
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|idx
operator|+
literal|3
argument_list|)
decl_stmt|;
return|return
name|uri
operator|.
name|substring
argument_list|(
name|idx2
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|combine
parameter_list|(
name|String
name|location
parameter_list|,
name|String
name|httpLocation
parameter_list|)
block|{
if|if
condition|(
name|httpLocation
operator|==
literal|null
condition|)
block|{
return|return
name|location
return|;
block|}
if|if
condition|(
name|httpLocation
operator|.
name|indexOf
argument_list|(
literal|"://"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|httpLocation
return|;
block|}
if|if
condition|(
name|location
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
name|location
operator|+
name|httpLocation
return|;
block|}
else|else
block|{
return|return
name|location
operator|+
literal|"/"
operator|+
name|httpLocation
return|;
block|}
block|}
specifier|private
specifier|static
name|XmlSchemaType
name|findSchemaType
parameter_list|(
name|Collection
argument_list|<
name|SchemaInfo
argument_list|>
name|schemas
parameter_list|,
name|QName
name|name
parameter_list|)
block|{
for|for
control|(
name|SchemaInfo
name|inf
range|:
name|schemas
control|)
block|{
if|if
condition|(
name|inf
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|inf
operator|.
name|getSchema
argument_list|()
operator|.
name|getTypeByName
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|boolean
name|findSchemaUnQualified
parameter_list|(
name|Collection
argument_list|<
name|SchemaInfo
argument_list|>
name|schemas
parameter_list|,
name|QName
name|name
parameter_list|)
block|{
for|for
control|(
name|SchemaInfo
name|inf
range|:
name|schemas
control|)
block|{
if|if
condition|(
name|inf
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|inf
operator|.
name|getSchema
argument_list|()
operator|.
name|getElementFormDefault
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|XmlSchemaForm
operator|.
name|UNQUALIFIED
argument_list|)
return|;
block|}
block|}
comment|//Unqualified by default
return|return
literal|true
return|;
block|}
comment|/**      * Create a dom document conformant with the given schema element with the      * input parameters.      *       * @param element      * @param params      * @return      */
specifier|public
specifier|static
name|Document
name|buildDocument
parameter_list|(
name|XmlSchemaAnnotated
name|schemaAnnotation
parameter_list|,
name|Collection
argument_list|<
name|SchemaInfo
argument_list|>
name|schemas
parameter_list|,
name|List
argument_list|<
name|Param
argument_list|>
name|params
parameter_list|)
block|{
name|XmlSchemaElement
name|element
init|=
literal|null
decl_stmt|;
name|QName
name|qname
init|=
literal|null
decl_stmt|;
name|boolean
name|unQualified
init|=
literal|false
decl_stmt|;
name|XmlSchemaComplexType
name|cplxType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schemaAnnotation
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|element
operator|=
operator|(
name|XmlSchemaElement
operator|)
name|schemaAnnotation
expr_stmt|;
name|qname
operator|=
name|element
operator|.
name|getQName
argument_list|()
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|getSchemaType
argument_list|()
operator|instanceof
name|XmlSchemaSimpleType
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SIMPLE_TYPE"
argument_list|,
name|BUNDLE
argument_list|)
argument_list|)
throw|;
block|}
name|cplxType
operator|=
operator|(
name|XmlSchemaComplexType
operator|)
name|element
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
name|unQualified
operator|=
name|findSchemaUnQualified
argument_list|(
name|schemas
argument_list|,
name|element
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cplxType
operator|==
literal|null
condition|)
block|{
name|cplxType
operator|=
operator|(
name|XmlSchemaComplexType
operator|)
name|findSchemaType
argument_list|(
name|schemas
argument_list|,
name|element
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|schemaAnnotation
operator|instanceof
name|XmlSchemaComplexType
condition|)
block|{
name|cplxType
operator|=
operator|(
name|XmlSchemaComplexType
operator|)
name|schemaAnnotation
expr_stmt|;
name|qname
operator|=
name|cplxType
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|schemaAnnotation
operator|instanceof
name|XmlSchemaSimpleType
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SIMPLE_TYPE"
argument_list|,
name|BUNDLE
argument_list|)
argument_list|)
throw|;
block|}
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|XmlSchemaSequence
name|seq
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|cplxType
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|Element
name|e
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|e
operator|.
name|setAttribute
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
argument_list|,
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|seq
operator|==
literal|null
operator|||
name|seq
operator|.
name|getItems
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|doc
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|getCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|XmlSchemaElement
name|elChild
init|=
operator|(
name|XmlSchemaElement
operator|)
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|getItem
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Param
name|param
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Param
name|p
range|:
name|params
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|elChild
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|param
operator|=
name|p
expr_stmt|;
break|break;
block|}
block|}
name|Element
name|ec
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|unQualified
condition|)
block|{
name|ec
operator|=
name|doc
operator|.
name|createElement
argument_list|(
name|elChild
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ec
operator|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|elChild
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|elChild
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|elChild
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|ec
operator|.
name|setAttribute
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
argument_list|,
name|elChild
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|remove
argument_list|(
name|param
argument_list|)
expr_stmt|;
name|ec
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|appendChild
argument_list|(
name|ec
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
specifier|public
specifier|static
name|Document
name|interopolateParams
parameter_list|(
name|Document
name|doc
parameter_list|,
name|XmlSchemaAnnotated
name|schemaAnnotation
parameter_list|,
name|Collection
argument_list|<
name|SchemaInfo
argument_list|>
name|schemas
parameter_list|,
name|List
argument_list|<
name|Param
argument_list|>
name|params
parameter_list|)
block|{
name|XmlSchemaElement
name|element
init|=
literal|null
decl_stmt|;
name|QName
name|qname
init|=
literal|null
decl_stmt|;
name|XmlSchemaComplexType
name|cplxType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schemaAnnotation
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|element
operator|=
operator|(
name|XmlSchemaElement
operator|)
name|schemaAnnotation
expr_stmt|;
name|qname
operator|=
name|element
operator|.
name|getQName
argument_list|()
expr_stmt|;
name|cplxType
operator|=
operator|(
name|XmlSchemaComplexType
operator|)
name|element
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
if|if
condition|(
name|cplxType
operator|==
literal|null
condition|)
block|{
name|cplxType
operator|=
operator|(
name|XmlSchemaComplexType
operator|)
name|findSchemaType
argument_list|(
name|schemas
argument_list|,
name|element
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|schemaAnnotation
operator|instanceof
name|XmlSchemaComplexType
condition|)
block|{
name|cplxType
operator|=
operator|(
name|XmlSchemaComplexType
operator|)
name|schemaAnnotation
expr_stmt|;
name|qname
operator|=
name|cplxType
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
name|XmlSchemaSequence
name|seq
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|cplxType
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|root
operator|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|setAttribute
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
argument_list|,
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|getCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|XmlSchemaElement
name|elChild
init|=
operator|(
name|XmlSchemaElement
operator|)
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|getItem
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Param
name|param
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Param
name|p
range|:
name|params
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|elChild
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|param
operator|=
name|p
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|param
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Element
name|ec
init|=
name|getElement
argument_list|(
name|root
argument_list|,
name|elChild
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ec
operator|==
literal|null
condition|)
block|{
name|ec
operator|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|elChild
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|elChild
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|elChild
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|ec
operator|.
name|setAttribute
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
argument_list|,
name|elChild
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// insert the element at the appropriate position
name|Element
name|insertBeforeEl
init|=
name|getIndexedElement
argument_list|(
name|root
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|insertBeforeEl
operator|!=
literal|null
condition|)
block|{
name|root
operator|.
name|insertBefore
argument_list|(
name|ec
argument_list|,
name|insertBeforeEl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|root
operator|.
name|appendChild
argument_list|(
name|ec
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Node
name|node
init|=
name|ec
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|Node
name|next
init|=
name|node
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|ec
operator|.
name|removeChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|node
operator|=
name|next
expr_stmt|;
block|}
block|}
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|remove
argument_list|(
name|param
argument_list|)
expr_stmt|;
name|ec
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|doc
return|;
block|}
specifier|private
specifier|static
name|Element
name|getIndexedElement
parameter_list|(
name|Element
name|e
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|Element
name|elem
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|int
name|elNum
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|elem
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|elNum
condition|)
block|{
return|return
name|elem
return|;
block|}
name|elNum
operator|++
expr_stmt|;
name|elem
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|Element
name|getElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|QName
name|name
parameter_list|)
block|{
name|Element
name|elem
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|element
argument_list|)
decl_stmt|;
while|while
condition|(
name|elem
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|elem
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|&&
name|elem
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|elem
return|;
block|}
name|elem
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Param
argument_list|>
name|decode
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|loc
parameter_list|,
name|InputStream
name|is
parameter_list|)
block|{
name|List
argument_list|<
name|Param
argument_list|>
name|params
init|=
name|IriDecoderHelper
operator|.
name|decodeIri
argument_list|(
name|uri
argument_list|,
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|baos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|IriDecoderHelper
operator|.
name|addParams
argument_list|(
name|baos
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|baos
operator|.
name|size
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
comment|/**      * Simple holder class for a name/value pair.      */
specifier|public
specifier|static
class|class
name|Param
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
specifier|public
name|Param
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**          * @return the name          */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**          * @return the value          */
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/*          * (non-Javadoc)          *          * @see java.lang.Object#toString()          */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|name
operator|+
literal|"="
operator|+
name|value
operator|+
literal|"]"
return|;
block|}
comment|/*          * (non-Javadoc)          *          * @see java.lang.Object#hashCode()          */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|name
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|value
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|value
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/*          * (non-Javadoc)          *          * @see java.lang.Object#equals(java.lang.Object)          */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Param
name|other
init|=
operator|(
name|Param
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|other
operator|.
name|value
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

