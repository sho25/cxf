begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
operator|.
name|strategy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
specifier|public
class|class
name|Inflector
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|uncountable
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Rule
argument_list|>
name|singular
init|=
operator|new
name|ArrayList
argument_list|<
name|Rule
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Rule
argument_list|>
name|plural
init|=
operator|new
name|ArrayList
argument_list|<
name|Rule
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|irregular
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|String
name|singularlize
parameter_list|(
name|String
name|orig
parameter_list|)
block|{
if|if
condition|(
name|uncountable
operator|.
name|contains
argument_list|(
name|orig
argument_list|)
condition|)
block|{
return|return
name|orig
return|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|irregular
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|orig
argument_list|)
condition|)
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
for|for
control|(
name|Rule
name|r
range|:
name|singular
control|)
block|{
name|Matcher
name|m
init|=
name|r
operator|.
name|getRegex
argument_list|()
operator|.
name|matcher
argument_list|(
name|orig
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
name|m
operator|.
name|replaceAll
argument_list|(
name|r
operator|.
name|getReplacement
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|orig
return|;
block|}
specifier|public
name|String
name|pluralize
parameter_list|(
name|String
name|orig
parameter_list|)
block|{
if|if
condition|(
name|uncountable
operator|.
name|contains
argument_list|(
name|orig
argument_list|)
condition|)
block|{
return|return
name|orig
return|;
block|}
name|String
name|irr
init|=
name|irregular
operator|.
name|get
argument_list|(
name|orig
argument_list|)
decl_stmt|;
if|if
condition|(
name|irr
operator|!=
literal|null
condition|)
block|{
return|return
name|irr
return|;
block|}
for|for
control|(
name|Rule
name|r
range|:
name|plural
control|)
block|{
name|Matcher
name|m
init|=
name|r
operator|.
name|getRegex
argument_list|()
operator|.
name|matcher
argument_list|(
name|orig
argument_list|)
decl_stmt|;
comment|//System.out.println(m.pattern().pattern());
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
comment|//System.out.println("!!!found match!!!");
return|return
name|m
operator|.
name|replaceAll
argument_list|(
name|r
operator|.
name|getReplacement
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|orig
return|;
block|}
specifier|public
name|void
name|addPlural
parameter_list|(
name|String
name|regex
parameter_list|,
name|String
name|replacement
parameter_list|)
block|{
name|plural
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|Rule
argument_list|(
name|regex
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addSingular
parameter_list|(
name|String
name|regex
parameter_list|,
name|String
name|replacement
parameter_list|)
block|{
name|singular
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|Rule
argument_list|(
name|regex
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addIrregular
parameter_list|(
name|String
name|orig
parameter_list|,
name|String
name|replacement
parameter_list|)
block|{
name|irregular
operator|.
name|put
argument_list|(
name|orig
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addUncountable
parameter_list|(
name|String
index|[]
name|words
parameter_list|)
block|{
name|uncountable
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|words
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addUncountable
parameter_list|(
name|String
name|word
parameter_list|)
block|{
name|uncountable
operator|.
name|add
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|Rule
block|{
specifier|private
name|Pattern
name|regex
decl_stmt|;
specifier|private
name|String
name|replacement
decl_stmt|;
specifier|public
name|Rule
parameter_list|(
name|String
name|regex
parameter_list|,
name|String
name|replacement
parameter_list|)
block|{
name|this
operator|.
name|regex
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
expr_stmt|;
name|this
operator|.
name|replacement
operator|=
name|replacement
expr_stmt|;
block|}
specifier|public
name|Pattern
name|getRegex
parameter_list|()
block|{
return|return
name|regex
return|;
block|}
specifier|public
name|String
name|getReplacement
parameter_list|()
block|{
return|return
name|replacement
return|;
block|}
block|}
block|}
end_class

end_unit

