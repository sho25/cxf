begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
operator|.
name|strategy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
operator|.
name|URIMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
operator|.
name|HttpConstants
operator|.
name|DELETE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
operator|.
name|HttpConstants
operator|.
name|GET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
operator|.
name|HttpConstants
operator|.
name|POST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
operator|.
name|HttpConstants
operator|.
name|PUT
import|;
end_import

begin_comment
comment|/**  *<p>  * Maps a BindingOperation to a URI/combination using the following rules:  *</p>  *<p>  *<b>GET Operations:</b> If the operation name starts with "get" and it has  * no parameters, it is assumed it is a get for a collection of objects. The  * noun after the "get" is turned into the resource name. Example: "getCustomers"  * is turned into "/customers".   *</p>  *<p>  * If the operation name starts with "get" and it takes parameters, it is taken  * to be a get for a singular noun. In this case the noun is pluralized, and the  * resource name is the pluralized noun and any additional parameters the operation  * takes. For the case of the operation which has a signature of   * "Customer getCustomer(String id)" the resource would become "/customers/{id}".   *</p>  *   *<p>  *<b>POST Operations:</b> If the operation name starts with "add" or "create"  * it is turned into a POST operation. In this case noun after add/create is   * pluralized and turned into the resource name. Example: "addCustomer(Customer)"  * is truned into "/customers".  *</p>  *<p>  *<b>PUT Operations:</b> If the operation name starts with "update"  * it is turned into a PUT operation. In this case the resource name is the  * pluralized noun after "update" and any additional XML schema primitive  * parameters the operation takes.  Example: "updateCustomer(String id, Customer c)"  * becomes "/customers/{id}". The customer object does NOT become part of the   * resource name because it doesn't map to an XML schema primitive type such as  * xsd:int, xsd:string, etc.  *</p>  *<b>DELETE Operations:</b> Delete operations follow the same rules as PUT   * operations, except the operation name must start with either "delete" or  * "remove". Example: "deleteCustomer(String id,)" becomes "/customers/{id}".  *</p>  *  */
end_comment

begin_class
specifier|public
class|class
name|ConventionStrategy
implements|implements
name|ResourceStrategy
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ConventionStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Inflector
name|inflector
init|=
operator|new
name|EnglishInflector
argument_list|()
decl_stmt|;
specifier|public
name|boolean
name|map
parameter_list|(
name|BindingOperationInfo
name|bop
parameter_list|,
name|Method
name|m
parameter_list|,
name|URIMapper
name|mapper
parameter_list|)
block|{
name|String
name|name
init|=
name|m
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|verb
decl_stmt|;
name|String
name|noun
decl_stmt|;
name|String
name|resource
decl_stmt|;
comment|// find the most appropriate binding operation
name|BindingOperationInfo
name|bopWithParts
init|=
name|bop
operator|.
name|isUnwrappedCapable
argument_list|()
condition|?
name|bop
operator|.
name|getUnwrappedOperation
argument_list|()
else|:
name|bop
decl_stmt|;
name|boolean
name|pluralize
init|=
name|bopWithParts
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
name|verb
operator|=
name|GET
expr_stmt|;
name|noun
operator|=
name|extractNoun
argument_list|(
name|name
argument_list|,
literal|3
argument_list|,
name|pluralize
argument_list|)
expr_stmt|;
name|resource
operator|=
name|createResourceName
argument_list|(
name|noun
argument_list|,
name|bopWithParts
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"add"
argument_list|)
condition|)
block|{
name|verb
operator|=
name|POST
expr_stmt|;
name|noun
operator|=
name|extractNoun
argument_list|(
name|name
argument_list|,
literal|3
argument_list|,
name|pluralize
argument_list|)
expr_stmt|;
name|resource
operator|=
name|noun
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"create"
argument_list|)
condition|)
block|{
name|verb
operator|=
name|POST
expr_stmt|;
name|noun
operator|=
name|extractNoun
argument_list|(
name|name
argument_list|,
literal|5
argument_list|,
name|pluralize
argument_list|)
expr_stmt|;
name|resource
operator|=
name|noun
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"update"
argument_list|)
condition|)
block|{
name|verb
operator|=
name|PUT
expr_stmt|;
name|noun
operator|=
name|extractNoun
argument_list|(
name|name
argument_list|,
literal|6
argument_list|,
name|pluralize
argument_list|)
expr_stmt|;
name|resource
operator|=
name|createResourceName
argument_list|(
name|noun
argument_list|,
name|bopWithParts
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"remove"
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
literal|"delete"
argument_list|)
condition|)
block|{
name|verb
operator|=
name|DELETE
expr_stmt|;
name|noun
operator|=
name|extractNoun
argument_list|(
name|name
argument_list|,
literal|6
argument_list|,
name|pluralize
argument_list|)
expr_stmt|;
name|resource
operator|=
name|createResourceName
argument_list|(
name|noun
argument_list|,
name|bopWithParts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verb
operator|=
name|POST
expr_stmt|;
name|noun
operator|=
name|name
expr_stmt|;
name|resource
operator|=
name|noun
expr_stmt|;
block|}
name|resource
operator|=
literal|'/'
operator|+
name|resource
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mapping method "
operator|+
name|name
operator|+
literal|" to resource "
operator|+
name|resource
operator|+
literal|" and verb "
operator|+
name|verb
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|bind
argument_list|(
name|bop
argument_list|,
name|resource
argument_list|,
name|verb
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|String
name|createResourceName
parameter_list|(
name|String
name|noun
parameter_list|,
name|BindingOperationInfo
name|bopWithParts
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|noun
argument_list|)
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|bopWithParts
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
name|isXSDPrimitive
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"/{"
argument_list|)
operator|.
name|append
argument_list|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isXSDPrimitive
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{
name|String
name|xsdNs
init|=
literal|"http://www.w3.org/2001/XMLSchema"
decl_stmt|;
name|QName
name|tn
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|isElement
argument_list|()
condition|)
block|{
name|tn
operator|=
operator|(
operator|(
name|XmlSchemaElement
operator|)
name|part
operator|.
name|getXmlSchema
argument_list|()
operator|)
operator|.
name|getSchemaTypeName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tn
operator|=
name|part
operator|.
name|getTypeQName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tn
operator|!=
literal|null
operator|&&
name|tn
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|xsdNs
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// TODO: introspect xml schema object to see if the<xsd:element> is a simpleType
comment|// restriction
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|extractNoun
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|n
parameter_list|,
name|boolean
name|pluralize
parameter_list|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|n
argument_list|,
name|n
operator|+
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|name
operator|.
name|substring
argument_list|(
name|n
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|pluralize
condition|)
block|{
name|name
operator|=
name|inflector
operator|.
name|pluralize
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|Inflector
name|getInflector
parameter_list|()
block|{
return|return
name|inflector
return|;
block|}
specifier|public
name|void
name|setInflector
parameter_list|(
name|Inflector
name|inflector
parameter_list|)
block|{
name|this
operator|.
name|inflector
operator|=
name|inflector
expr_stmt|;
block|}
block|}
end_class

end_unit

