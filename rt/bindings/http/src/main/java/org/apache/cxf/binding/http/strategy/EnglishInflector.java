begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/**  * Copyright (c) 2005-2006 David Heinemeier Hansson  *   * Permission is hereby granted, free of charge, to any person obtaining  * a copy of this software and associated documentation files (the  * "Software"), to deal in the Software without restriction, including  * without limitation the rights to use, copy, modify, merge, publish,  * distribute, sublicense, and/or sell copies of the Software, and to  * permit persons to whom the Software is furnished to do so, subject to  * the following conditions:   * The above copyright notice and this permission notice shall be  * included in all copies or substantial portions of the Software.   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE  * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION  * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION  * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
operator|.
name|strategy
package|;
end_package

begin_comment
comment|/**  * Rules for English inflection.  *<p>  * Notice: Some portions of this class where ported from Ruby's ActiveSupport  * library which are Copyright (c) 2005-2006 David Heinemeier Hansson and  * under the MIT license.  */
end_comment

begin_class
specifier|public
class|class
name|EnglishInflector
extends|extends
name|Inflector
block|{
specifier|public
name|EnglishInflector
parameter_list|()
block|{
name|addPlural
argument_list|(
literal|"$"
argument_list|,
literal|"s"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"s$"
argument_list|,
literal|"$1s"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"(ax|test)is$"
argument_list|,
literal|"$1es"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"(octop|vir)us$"
argument_list|,
literal|"$1i"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"(alias|status)$"
argument_list|,
literal|"$1es"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"(bu)s$"
argument_list|,
literal|"$1ses"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"(buffal|tomat)o$"
argument_list|,
literal|"$1oes"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"([ti])um$"
argument_list|,
literal|"$1a"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"sis$"
argument_list|,
literal|"ses"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"(?:([^f])fe|([lr])f)$"
argument_list|,
literal|"$1\2ves"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"(hive)$"
argument_list|,
literal|"$1s"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"([^aeiouy]|qu)y$"
argument_list|,
literal|"$1ies"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"(x|ch|ss|sh)$"
argument_list|,
literal|"$1es"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"(matr|vert|ind)ix|ex$"
argument_list|,
literal|"$1ices"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"([m|l])ouse$"
argument_list|,
literal|"$1ice"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"^(ox)$"
argument_list|,
literal|"$1en"
argument_list|)
expr_stmt|;
name|addPlural
argument_list|(
literal|"(quiz)$"
argument_list|,
literal|"$1zes"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"s$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(n)ews$"
argument_list|,
literal|"$1ews"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"([ti])a$"
argument_list|,
literal|"$1um"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$"
argument_list|,
literal|"$1\2sis"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(^analy)ses$"
argument_list|,
literal|"$1sis"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"([^f])ves$"
argument_list|,
literal|"$1fe"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(hive)s$"
argument_list|,
literal|"$1"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(tive)s$"
argument_list|,
literal|"$1"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"([lr])ves$"
argument_list|,
literal|"$1f"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"([^aeiouy]|qu)ies$"
argument_list|,
literal|"$1y"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(s)eries$"
argument_list|,
literal|"$1eries"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(m)ovies$"
argument_list|,
literal|"$1ovie"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(x|ch|ss|sh)es$"
argument_list|,
literal|"$1"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"([m|l])ice$"
argument_list|,
literal|"$1ouse"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(bus)es$"
argument_list|,
literal|"$1"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(o)es$"
argument_list|,
literal|"$1"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(shoe)s$"
argument_list|,
literal|"$1"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(cris|ax|test)es$"
argument_list|,
literal|"$1is"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(octop|vir)i$"
argument_list|,
literal|"$1us"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(alias|status)es$"
argument_list|,
literal|"$1"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"^(ox)en"
argument_list|,
literal|"$1"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(vert|ind)ices$"
argument_list|,
literal|"$1ex"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(matr)ices$"
argument_list|,
literal|"$1ix"
argument_list|)
expr_stmt|;
name|addSingular
argument_list|(
literal|"(quiz)zes$"
argument_list|,
literal|"$1"
argument_list|)
expr_stmt|;
name|addIrregular
argument_list|(
literal|"person"
argument_list|,
literal|"people"
argument_list|)
expr_stmt|;
name|addIrregular
argument_list|(
literal|"man"
argument_list|,
literal|"men"
argument_list|)
expr_stmt|;
name|addIrregular
argument_list|(
literal|"child"
argument_list|,
literal|"children"
argument_list|)
expr_stmt|;
name|addIrregular
argument_list|(
literal|"sex"
argument_list|,
literal|"sexes"
argument_list|)
expr_stmt|;
name|addIrregular
argument_list|(
literal|"move"
argument_list|,
literal|"moves"
argument_list|)
expr_stmt|;
name|addUncountable
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"equipment"
block|,
literal|"information"
block|,
literal|"rice"
block|,
literal|"money"
block|,
literal|"species"
block|,
literal|"series"
block|,
literal|"fish"
block|,
literal|"sheep"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

