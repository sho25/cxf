begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
operator|.
name|IriDecoderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
operator|.
name|IriDecoderHelper
operator|.
name|Param
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
operator|.
name|URIMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|xml
operator|.
name|interceptor
operator|.
name|XMLMessageInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|DocLiteralInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|StaxInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|SchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_class
specifier|public
class|class
name|URIParameterInInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|URIParameterInInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|URIParameterInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|UNMARSHAL
argument_list|)
expr_stmt|;
name|addBefore
argument_list|(
name|XMLMessageInInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|DispatchInterceptor
operator|.
name|RELATIVE_PATH
argument_list|)
decl_stmt|;
name|String
name|method
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
decl_stmt|;
name|String
name|contentType
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"URIParameterInterceptor handle message on path ["
operator|+
name|path
operator|+
literal|"] with content-type ["
operator|+
name|contentType
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|op
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|URIMapper
name|mapper
init|=
operator|(
name|URIMapper
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Service
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
name|URIMapper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|mapper
operator|.
name|getLocation
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|parts
init|=
name|op
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|message
operator|.
name|setContent
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"SINGLE_PART_REQUIRED"
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|XMLMessageInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|DocLiteralInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|MessagePartInfo
name|part
init|=
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Param
argument_list|>
name|params
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"application/x-www-form-urlencoded"
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
name|params
operator|=
name|IriDecoderHelper
operator|.
name|decode
argument_list|(
name|path
argument_list|,
name|location
argument_list|,
name|message
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"application/xml"
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
name|params
operator|=
name|IriDecoderHelper
operator|.
name|decodeIri
argument_list|(
name|path
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"text/xml"
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
name|params
operator|=
name|IriDecoderHelper
operator|.
name|decodeIri
argument_list|(
name|path
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"multipart/form-data"
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
condition|)
block|{
comment|// TODO
block|}
else|else
block|{
name|params
operator|=
name|IriDecoderHelper
operator|.
name|decodeIri
argument_list|(
name|path
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
name|mergeParams
argument_list|(
name|message
argument_list|,
name|path
argument_list|,
name|method
argument_list|,
name|part
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|mergeParams
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|method
parameter_list|,
name|MessagePartInfo
name|part
parameter_list|,
name|List
argument_list|<
name|Param
argument_list|>
name|params
parameter_list|)
block|{
comment|// TODO: If its a POST/PUT operation we probably need to merge the
comment|// incoming doc
name|Document
name|doc
decl_stmt|;
name|Collection
argument_list|<
name|SchemaInfo
argument_list|>
name|schemas
init|=
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|getInterface
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"POST"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
operator|||
literal|"PUT"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|XMLInputFactory
name|inputFactory
init|=
name|StaxInInterceptor
operator|.
name|getXMLInputFactory
argument_list|(
name|message
argument_list|)
decl_stmt|;
try|try
block|{
name|XMLStreamReader
name|reader
decl_stmt|;
synchronized|synchronized
init|(
name|inputFactory
init|)
block|{
name|reader
operator|=
name|inputFactory
operator|.
name|createXMLStreamReader
argument_list|(
name|message
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doc
operator|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|doc
operator|=
name|IriDecoderHelper
operator|.
name|interopolateParams
argument_list|(
name|doc
argument_list|,
name|part
operator|.
name|getXmlSchema
argument_list|()
argument_list|,
name|schemas
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
name|IriDecoderHelper
operator|.
name|buildDocument
argument_list|(
name|part
operator|.
name|getXmlSchema
argument_list|()
argument_list|,
name|schemas
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|XMLStreamReader
name|reader
init|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|message
operator|.
name|setContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

