begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jra
operator|.
name|ResourceUtil
import|;
end_import

begin_class
specifier|public
class|class
name|URIMapper
block|{
specifier|private
name|List
argument_list|<
name|ResourceInfo
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|OperationInfo
argument_list|,
name|String
argument_list|>
name|locations
init|=
operator|new
name|HashMap
argument_list|<
name|OperationInfo
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|OperationInfo
argument_list|,
name|String
argument_list|>
name|verbs
init|=
operator|new
name|HashMap
argument_list|<
name|OperationInfo
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|BindingOperationInfo
name|getOperation
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|verb
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|List
argument_list|<
name|ResourceInfo
argument_list|>
name|bestMatch
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceInfo
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|bestScore
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ResourceInfo
name|r
range|:
name|resources
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getVerb
argument_list|()
operator|.
name|equals
argument_list|(
name|verb
argument_list|)
condition|)
block|{
name|int
name|newScore
init|=
name|ResourceUtil
operator|.
name|getMatchScore
argument_list|(
name|uri
argument_list|,
name|r
operator|.
name|getUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newScore
operator|>
name|bestScore
condition|)
block|{
name|bestMatch
operator|.
name|clear
argument_list|()
expr_stmt|;
name|bestScore
operator|=
name|newScore
expr_stmt|;
block|}
if|if
condition|(
name|newScore
operator|>=
name|bestScore
condition|)
block|{
name|bestMatch
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bestScore
operator|>
operator|-
literal|1
operator|&&
operator|!
name|bestMatch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|bestMatch
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|bestMatch
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperation
argument_list|()
return|;
block|}
comment|//two or more with the same score... find the one with longest match
comment|// NOT counting any tail match
name|bestScore
operator|=
operator|-
literal|1
expr_stmt|;
name|ResourceInfo
name|newBest
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ResourceInfo
name|r
range|:
name|bestMatch
control|)
block|{
name|String
name|newUri
init|=
name|r
operator|.
name|getUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|newUri
operator|.
name|charAt
argument_list|(
name|newUri
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'}'
condition|)
block|{
name|newUri
operator|=
name|newUri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|newUri
operator|.
name|lastIndexOf
argument_list|(
literal|'{'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|newScore
init|=
name|ResourceUtil
operator|.
name|getMatchScore
argument_list|(
name|uri
argument_list|,
name|newUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|newScore
operator|>
name|bestScore
condition|)
block|{
name|bestScore
operator|=
name|newScore
expr_stmt|;
name|newBest
operator|=
name|r
expr_stmt|;
block|}
block|}
return|return
name|newBest
operator|.
name|getOperation
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|bind
parameter_list|(
name|BindingOperationInfo
name|bop
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|verb
parameter_list|)
block|{
name|ResourceInfo
name|info
init|=
operator|new
name|ResourceInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|info
operator|.
name|setVerb
argument_list|(
name|verb
argument_list|)
expr_stmt|;
name|info
operator|.
name|setOperation
argument_list|(
name|bop
argument_list|)
expr_stmt|;
name|locations
operator|.
name|put
argument_list|(
name|bop
operator|.
name|getOperationInfo
argument_list|()
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|verbs
operator|.
name|put
argument_list|(
name|bop
operator|.
name|getOperationInfo
argument_list|()
argument_list|,
name|verb
argument_list|)
expr_stmt|;
if|if
condition|(
name|bop
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getUnwrappedOperation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|locations
operator|.
name|put
argument_list|(
name|bop
operator|.
name|getUnwrappedOperation
argument_list|()
operator|.
name|getOperationInfo
argument_list|()
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|verbs
operator|.
name|put
argument_list|(
name|bop
operator|.
name|getUnwrappedOperation
argument_list|()
operator|.
name|getOperationInfo
argument_list|()
argument_list|,
name|verb
argument_list|)
expr_stmt|;
block|}
name|resources
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getLocation
parameter_list|(
name|BindingOperationInfo
name|bop
parameter_list|)
block|{
return|return
name|locations
operator|.
name|get
argument_list|(
name|bop
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getVerb
parameter_list|(
name|BindingOperationInfo
name|bop
parameter_list|)
block|{
return|return
name|verbs
operator|.
name|get
argument_list|(
name|bop
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|ResourceInfo
block|{
specifier|private
name|String
name|uri
decl_stmt|;
specifier|private
name|String
name|verb
decl_stmt|;
specifier|private
name|BindingOperationInfo
name|operation
decl_stmt|;
specifier|public
name|BindingOperationInfo
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
specifier|public
name|void
name|setOperation
parameter_list|(
name|BindingOperationInfo
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
specifier|public
name|String
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
specifier|public
name|void
name|setUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
specifier|public
name|String
name|getVerb
parameter_list|()
block|{
return|return
name|verb
return|;
block|}
specifier|public
name|void
name|setVerb
parameter_list|(
name|String
name|verb
parameter_list|)
block|{
name|this
operator|.
name|verb
operator|=
name|verb
expr_stmt|;
block|}
block|}
specifier|public
name|List
name|getParameters
parameter_list|(
name|MessageInfo
name|msgInfo
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|String
name|resource
init|=
name|locations
operator|.
name|get
argument_list|(
name|msgInfo
operator|.
name|getOperation
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramMap
init|=
name|ResourceUtil
operator|.
name|getURIParameters
argument_list|(
name|path
argument_list|,
name|resource
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|msgInfo
operator|.
name|getMessageParts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MessagePartInfo
name|p
range|:
name|msgInfo
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|paramMap
operator|.
name|get
argument_list|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
block|}
end_class

end_unit

