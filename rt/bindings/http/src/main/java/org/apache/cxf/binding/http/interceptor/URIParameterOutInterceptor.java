begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|http
operator|.
name|URIMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|MessageSenderInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_comment
comment|/**  * Sets up the destination URI for a client invocation.  */
end_comment

begin_class
specifier|public
class|class
name|URIParameterOutInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|URIParameterOutInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PREPARE_SEND
argument_list|)
expr_stmt|;
name|addBefore
argument_list|(
name|MessageSenderInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|Endpoint
name|ep
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|URIMapper
name|mapper
init|=
operator|(
name|URIMapper
operator|)
name|ep
operator|.
name|getService
argument_list|()
operator|.
name|get
argument_list|(
name|URIMapper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|bop
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|address
init|=
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|String
name|location
init|=
name|mapper
operator|.
name|getLocation
argument_list|(
name|bop
argument_list|)
decl_stmt|;
name|StringBuilder
name|uri
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|uri
operator|.
name|append
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|boolean
name|addressSlash
init|=
name|address
operator|.
name|charAt
argument_list|(
name|address
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'/'
decl_stmt|;
name|boolean
name|locationSlash
init|=
name|location
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
decl_stmt|;
if|if
condition|(
operator|!
name|addressSlash
operator|&&
operator|!
name|locationSlash
condition|)
block|{
name|uri
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|uri
operator|.
name|append
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|addressSlash
operator|&&
name|locationSlash
condition|)
block|{
name|uri
operator|.
name|append
argument_list|(
name|location
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uri
operator|.
name|append
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|Document
name|d
init|=
operator|(
name|Document
operator|)
name|message
operator|.
name|getContent
argument_list|(
name|Node
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|encodedUri
init|=
name|encodeIri
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|,
name|encodedUri
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|encodeIri
parameter_list|(
name|String
name|uri
parameter_list|,
name|Document
name|doc
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|locPath
init|=
name|uri
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
name|char
name|c
decl_stmt|;
for|for
control|(
name|int
name|idx1
init|=
literal|0
init|;
name|idx1
operator|<
name|locPath
operator|.
name|length
argument_list|()
condition|;
name|idx1
operator|++
control|)
block|{
name|c
operator|=
name|locPath
operator|.
name|charAt
argument_list|(
name|idx1
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'{'
condition|)
block|{
if|if
condition|(
name|locPath
operator|.
name|charAt
argument_list|(
name|idx1
operator|+
literal|1
argument_list|)
operator|==
literal|'{'
condition|)
block|{
name|idx1
operator|++
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
name|locPath
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|idx1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|locEnd
init|=
name|locPath
operator|.
name|indexOf
argument_list|(
literal|'}'
argument_list|,
name|idx1
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|locPath
operator|.
name|substring
argument_list|(
name|idx1
operator|+
literal|1
argument_list|,
name|locEnd
argument_list|)
decl_stmt|;
name|idx1
operator|=
name|locEnd
expr_stmt|;
name|NodeList
name|childNodes
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|childNodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|n
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|start
operator|=
name|locEnd
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|start
operator|==
literal|0
condition|)
block|{
return|return
name|uri
return|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

