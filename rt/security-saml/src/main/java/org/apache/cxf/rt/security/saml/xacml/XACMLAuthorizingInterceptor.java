begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|saml
operator|.
name|xacml
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|saml
operator|.
name|xacml
operator|.
name|pdp
operator|.
name|api
operator|.
name|PolicyDecisionPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|OpenSAMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|ctx
operator|.
name|RequestType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|ctx
operator|.
name|ResponseType
import|;
end_import

begin_comment
comment|/**  * An interceptor to perform an XACML authorization request to a remote PDP,  * and make an authorization decision based on the response. It takes the principal and roles  * from the SecurityContext, and uses the XACMLRequestBuilder to construct an XACML Request  * statement.   */
end_comment

begin_class
specifier|public
class|class
name|XACMLAuthorizingInterceptor
extends|extends
name|AbstractXACMLAuthorizingInterceptor
block|{
specifier|private
name|PolicyDecisionPoint
name|pdp
decl_stmt|;
specifier|public
name|XACMLAuthorizingInterceptor
parameter_list|(
name|PolicyDecisionPoint
name|pdp
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|pdp
operator|=
name|pdp
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ResponseType
name|performRequest
parameter_list|(
name|RequestType
name|request
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|Source
name|requestSource
init|=
name|requestType2Source
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Source
name|responseSource
init|=
name|this
operator|.
name|pdp
operator|.
name|evaluate
argument_list|(
name|requestSource
argument_list|)
decl_stmt|;
return|return
name|responseSourceToResponseType
argument_list|(
name|responseSource
argument_list|)
return|;
block|}
specifier|private
name|Source
name|requestType2Source
parameter_list|(
name|RequestType
name|request
parameter_list|)
block|{
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|requestElement
decl_stmt|;
try|try
block|{
name|requestElement
operator|=
name|OpenSAMLUtil
operator|.
name|toDom
argument_list|(
name|request
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error converting PDP RequestType to Dom"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|DOMSource
argument_list|(
name|requestElement
argument_list|)
return|;
block|}
specifier|private
name|ResponseType
name|responseSourceToResponseType
parameter_list|(
name|Source
name|responseSource
parameter_list|)
block|{
try|try
block|{
name|TransformerFactory
name|transformerFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|transformerFactory
operator|.
name|setFeature
argument_list|(
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Transformer
name|transformer
init|=
name|transformerFactory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|DOMResult
name|res
init|=
operator|new
name|DOMResult
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|responseSource
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|Node
name|nd
init|=
name|res
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|nd
operator|instanceof
name|Document
condition|)
block|{
name|nd
operator|=
operator|(
operator|(
name|Document
operator|)
name|nd
operator|)
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|ResponseType
operator|)
name|OpenSAMLUtil
operator|.
name|fromDom
argument_list|(
operator|(
name|Element
operator|)
name|nd
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error converting pdp response to ResponseType"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

