begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|saml
operator|.
name|xacml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|core
operator|.
name|xml
operator|.
name|XMLObjectBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|core
operator|.
name|xml
operator|.
name|config
operator|.
name|XMLObjectProviderRegistrySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|common
operator|.
name|SAMLObjectBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|common
operator|.
name|SAMLVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Issuer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|XACMLObjectBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|ctx
operator|.
name|RequestType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|profile
operator|.
name|saml
operator|.
name|SAMLProfileConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xacml
operator|.
name|profile
operator|.
name|saml
operator|.
name|XACMLAuthzDecisionQueryType
import|;
end_import

begin_comment
comment|/**  * A set of utility methods to construct XACML SAML Request statements, based on the  * SAML 2.0 profile of XACML v2.0 specification.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SamlRequestComponentBuilder
block|{
specifier|private
specifier|static
specifier|volatile
name|XACMLObjectBuilder
argument_list|<
name|XACMLAuthzDecisionQueryType
argument_list|>
name|xacmlAuthzDecisionQueryTypeBuilder
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|SAMLObjectBuilder
argument_list|<
name|Issuer
argument_list|>
name|issuerBuilder
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|XMLObjectBuilderFactory
name|builderFactory
init|=
name|XMLObjectProviderRegistrySupport
operator|.
name|getBuilderFactory
argument_list|()
decl_stmt|;
specifier|private
name|SamlRequestComponentBuilder
parameter_list|()
block|{
comment|// complete
block|}
comment|/**      * Create an AuthzDecisionQuery using the defaults      */
specifier|public
specifier|static
name|XACMLAuthzDecisionQueryType
name|createAuthzDecisionQuery
parameter_list|(
name|String
name|issuerValue
parameter_list|,
name|RequestType
name|request
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
return|return
name|createAuthzDecisionQuery
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|issuerValue
argument_list|,
name|request
argument_list|,
name|namespace
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|XACMLAuthzDecisionQueryType
name|createAuthzDecisionQuery
parameter_list|(
name|boolean
name|inputContextOnly
parameter_list|,
name|boolean
name|returnContext
parameter_list|,
name|String
name|issuerValue
parameter_list|,
name|RequestType
name|request
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|xacmlAuthzDecisionQueryTypeBuilder
operator|==
literal|null
condition|)
block|{
name|xacmlAuthzDecisionQueryTypeBuilder
operator|=
operator|(
name|XACMLObjectBuilder
argument_list|<
name|XACMLAuthzDecisionQueryType
argument_list|>
operator|)
name|builderFactory
operator|.
name|getBuilder
argument_list|(
name|XACMLAuthzDecisionQueryType
operator|.
name|DEFAULT_ELEMENT_NAME_XACML20
argument_list|)
expr_stmt|;
block|}
name|XACMLAuthzDecisionQueryType
name|authzQuery
init|=
name|xacmlAuthzDecisionQueryTypeBuilder
operator|.
name|buildObject
argument_list|(
name|namespace
argument_list|,
name|XACMLAuthzDecisionQueryType
operator|.
name|DEFAULT_ELEMENT_LOCAL_NAME
argument_list|,
name|SAMLProfileConstants
operator|.
name|SAML20XACMLPROTOCOL_PREFIX
argument_list|)
decl_stmt|;
name|authzQuery
operator|.
name|setID
argument_list|(
literal|"_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|authzQuery
operator|.
name|setVersion
argument_list|(
name|SAMLVersion
operator|.
name|VERSION_20
argument_list|)
expr_stmt|;
name|authzQuery
operator|.
name|setIssueInstant
argument_list|(
operator|new
name|DateTime
argument_list|()
argument_list|)
expr_stmt|;
name|authzQuery
operator|.
name|setInputContextOnly
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|inputContextOnly
argument_list|)
argument_list|)
expr_stmt|;
name|authzQuery
operator|.
name|setReturnContext
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|returnContext
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|issuerValue
operator|!=
literal|null
condition|)
block|{
name|Issuer
name|issuer
init|=
name|createIssuer
argument_list|(
name|issuerValue
argument_list|)
decl_stmt|;
name|authzQuery
operator|.
name|setIssuer
argument_list|(
name|issuer
argument_list|)
expr_stmt|;
block|}
name|authzQuery
operator|.
name|setRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|authzQuery
return|;
block|}
comment|/**      * Create an Issuer object      *      * @param issuerValue of type String      * @return an Issuer object      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|Issuer
name|createIssuer
parameter_list|(
name|String
name|issuerValue
parameter_list|)
block|{
if|if
condition|(
name|issuerBuilder
operator|==
literal|null
condition|)
block|{
name|issuerBuilder
operator|=
operator|(
name|SAMLObjectBuilder
argument_list|<
name|Issuer
argument_list|>
operator|)
name|builderFactory
operator|.
name|getBuilder
argument_list|(
name|Issuer
operator|.
name|DEFAULT_ELEMENT_NAME
argument_list|)
expr_stmt|;
block|}
name|Issuer
name|issuer
init|=
name|issuerBuilder
operator|.
name|buildObject
argument_list|()
decl_stmt|;
comment|//
comment|// The SAML authority that is making the claim(s) in the assertion. The issuer SHOULD
comment|// be unambiguous to the intended relying parties.
name|issuer
operator|.
name|setValue
argument_list|(
name|issuerValue
argument_list|)
expr_stmt|;
return|return
name|issuer
return|;
block|}
block|}
end_class

end_unit

