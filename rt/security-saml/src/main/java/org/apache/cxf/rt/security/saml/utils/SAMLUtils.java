begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|saml
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|security
operator|.
name|SimpleGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|Claim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|ClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|saml
operator|.
name|claims
operator|.
name|SAMLClaim
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|core
operator|.
name|xml
operator|.
name|XMLObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|common
operator|.
name|SAMLVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml2
operator|.
name|core
operator|.
name|AttributeStatement
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|SAMLUtils
block|{
specifier|private
name|SAMLUtils
parameter_list|()
block|{              }
comment|/**      * Extract Claims from a SAML Assertion      */
specifier|public
specifier|static
name|ClaimCollection
name|getClaims
parameter_list|(
name|SamlAssertionWrapper
name|assertion
parameter_list|)
block|{
name|ClaimCollection
name|claims
init|=
operator|new
name|ClaimCollection
argument_list|()
decl_stmt|;
if|if
condition|(
name|assertion
operator|.
name|getSamlVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|SAMLVersion
operator|.
name|VERSION_20
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|AttributeStatement
argument_list|>
name|statements
init|=
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|.
name|getAttributeStatements
argument_list|()
decl_stmt|;
for|for
control|(
name|AttributeStatement
name|as
range|:
name|statements
control|)
block|{
for|for
control|(
name|Attribute
name|atr
range|:
name|as
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|SAMLClaim
name|claim
init|=
operator|new
name|SAMLClaim
argument_list|()
decl_stmt|;
name|claim
operator|.
name|setClaimType
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|atr
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setName
argument_list|(
name|atr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setNameFormat
argument_list|(
name|atr
operator|.
name|getNameFormat
argument_list|()
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setFriendlyName
argument_list|(
name|atr
operator|.
name|getFriendlyName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XMLObject
name|o
range|:
name|atr
operator|.
name|getAttributeValues
argument_list|()
control|)
block|{
name|String
name|attrValue
init|=
name|o
operator|.
name|getDOM
argument_list|()
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
name|attrValue
argument_list|)
expr_stmt|;
block|}
name|claims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml1
operator|.
name|core
operator|.
name|AttributeStatement
argument_list|>
name|attributeStatements
init|=
name|assertion
operator|.
name|getSaml1
argument_list|()
operator|.
name|getAttributeStatements
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml1
operator|.
name|core
operator|.
name|AttributeStatement
name|statement
range|:
name|attributeStatements
control|)
block|{
for|for
control|(
name|org
operator|.
name|opensaml
operator|.
name|saml
operator|.
name|saml1
operator|.
name|core
operator|.
name|Attribute
name|atr
range|:
name|statement
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|SAMLClaim
name|claim
init|=
operator|new
name|SAMLClaim
argument_list|()
decl_stmt|;
name|String
name|claimType
init|=
name|atr
operator|.
name|getAttributeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|atr
operator|.
name|getAttributeNamespace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|claimType
operator|=
name|atr
operator|.
name|getAttributeNamespace
argument_list|()
operator|+
literal|"/"
operator|+
name|claimType
expr_stmt|;
block|}
name|claim
operator|.
name|setClaimType
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|claimType
argument_list|)
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setName
argument_list|(
name|atr
operator|.
name|getAttributeName
argument_list|()
argument_list|)
expr_stmt|;
name|claim
operator|.
name|setNameFormat
argument_list|(
name|atr
operator|.
name|getAttributeNamespace
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|XMLObject
name|o
range|:
name|atr
operator|.
name|getAttributeValues
argument_list|()
control|)
block|{
name|String
name|attrValue
init|=
name|o
operator|.
name|getDOM
argument_list|()
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
name|attrValue
argument_list|)
expr_stmt|;
block|}
name|claims
operator|.
name|add
argument_list|(
name|claim
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|claims
return|;
block|}
comment|/**      * Extract roles from the given Claims      */
specifier|public
specifier|static
name|Set
argument_list|<
name|Principal
argument_list|>
name|parseRolesFromClaims
parameter_list|(
name|ClaimCollection
name|claims
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|nameFormat
parameter_list|)
block|{
name|String
name|roleAttributeName
init|=
name|name
decl_stmt|;
if|if
condition|(
name|roleAttributeName
operator|==
literal|null
condition|)
block|{
name|roleAttributeName
operator|=
name|SAMLClaim
operator|.
name|SAML_ROLE_ATTRIBUTENAME_DEFAULT
expr_stmt|;
block|}
name|Set
argument_list|<
name|Principal
argument_list|>
name|roles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Claim
name|claim
range|:
name|claims
control|)
block|{
if|if
condition|(
name|claim
operator|instanceof
name|SAMLClaim
operator|&&
operator|(
operator|(
name|SAMLClaim
operator|)
name|claim
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
operator|(
name|nameFormat
operator|==
literal|null
operator|||
name|nameFormat
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|SAMLClaim
operator|)
name|claim
operator|)
operator|.
name|getNameFormat
argument_list|()
argument_list|)
operator|)
condition|)
block|{
for|for
control|(
name|Object
name|claimValue
range|:
name|claim
operator|.
name|getValues
argument_list|()
control|)
block|{
if|if
condition|(
name|claimValue
operator|instanceof
name|String
condition|)
block|{
name|roles
operator|.
name|add
argument_list|(
operator|new
name|SimpleGroup
argument_list|(
operator|(
name|String
operator|)
name|claimValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|claim
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// Don't search for other attributes with the same name if> 1 claim value
break|break;
block|}
block|}
block|}
return|return
name|roles
return|;
block|}
specifier|public
specifier|static
name|String
name|getIssuer
parameter_list|(
name|Object
name|assertion
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SamlAssertionWrapper
operator|)
name|assertion
operator|)
operator|.
name|getIssuerString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Element
name|getAssertionElement
parameter_list|(
name|Object
name|assertion
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SamlAssertionWrapper
operator|)
name|assertion
operator|)
operator|.
name|getElement
argument_list|()
return|;
block|}
block|}
end_class

end_unit

