begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|WorkQueueManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|InstrumentationManagerTest
extends|extends
name|Assert
block|{
name|InstrumentationManager
name|im
decl_stmt|;
name|Bus
name|bus
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{      }
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|//test case had done the bus.shutdown
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInstrumentationNotEnabled
parameter_list|()
block|{
name|SpringBusFactory
name|factory
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|bus
operator|=
name|factory
operator|.
name|createBus
argument_list|()
expr_stmt|;
name|im
operator|=
name|bus
operator|.
name|getExtension
argument_list|(
name|InstrumentationManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Instrumentation Manager should not be null"
argument_list|,
name|im
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|MBeanServer
name|mbs
init|=
name|im
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"MBeanServer should not be available."
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// try to get WorkQueue information
specifier|public
name|void
name|testWorkQueueInstrumentation
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|factory
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|bus
operator|=
name|factory
operator|.
name|createBus
argument_list|(
literal|"managed-spring.xml"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|im
operator|=
name|bus
operator|.
name|getExtension
argument_list|(
name|InstrumentationManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Instrumentation Manager should not be null"
argument_list|,
name|im
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|WorkQueueManagerImpl
name|wqm
init|=
operator|new
name|WorkQueueManagerImpl
argument_list|()
decl_stmt|;
name|wqm
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|wqm
operator|.
name|getAutomaticWorkQueue
argument_list|()
expr_stmt|;
name|MBeanServer
name|mbs
init|=
name|im
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"MBeanServer should be available."
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
name|ObjectName
name|name
init|=
operator|new
name|ObjectName
argument_list|(
name|ManagementConstants
operator|.
name|DEFAULT_DOMAIN_NAME
operator|+
literal|":type=WorkQueueMBean,*"
argument_list|)
decl_stmt|;
name|Set
name|s
init|=
name|mbs
operator|.
name|queryNames
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|s
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjectName
name|n
init|=
operator|(
name|ObjectName
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|result
init|=
operator|(
name|Long
operator|)
name|mbs
operator|.
name|invoke
argument_list|(
name|n
argument_list|,
literal|"getWorkQueueMaxSize"
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
literal|256
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

