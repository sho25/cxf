begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|counters
operator|.
name|MessageHandlingTimeRecorder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|FaultMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ResponseTimeMessageOutInterceptorTest
extends|extends
name|AbstractMessageResponseTestBase
block|{
specifier|private
name|ResponseTimeMessageOutInterceptor
name|rtmoi
init|=
operator|new
name|ResponseTimeMessageOutInterceptor
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testServerMessageOut
parameter_list|()
block|{
comment|// need to increase the counter and is not a client
name|setupCounterRepository
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setupExchangeForMessage
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PARTIAL_RESPONSE_MESSAGE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.management.counter.enabled"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|MessageHandlingTimeRecorder
name|mhtr
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MessageHandlingTimeRecorder
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mhtr
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|rtmoi
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|mhtr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerCheckedApplicationFaultMessageOut
parameter_list|()
block|{
name|testServerFaultMessageOut
argument_list|(
name|FaultMode
operator|.
name|CHECKED_APPLICATION_FAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerLogicalRuntimeFaultMessageOut
parameter_list|()
block|{
name|testServerFaultMessageOut
argument_list|(
name|FaultMode
operator|.
name|LOGICAL_RUNTIME_FAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerRuntimeFaultMessageOut
parameter_list|()
block|{
name|testServerFaultMessageOut
argument_list|(
name|FaultMode
operator|.
name|RUNTIME_FAULT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerUncheckedApplicationFaultMessageOut
parameter_list|()
block|{
name|testServerFaultMessageOut
argument_list|(
name|FaultMode
operator|.
name|UNCHECKED_APPLICATION_FAULT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testServerFaultMessageOut
parameter_list|(
name|FaultMode
name|faultMode
parameter_list|)
block|{
comment|// need to increase the counter and is not a client
name|setupCounterRepository
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setupExchangeForMessage
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|FaultMode
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|faultMode
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.management.counter.enabled"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
name|FaultMode
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|faultMode
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|MessageHandlingTimeRecorder
name|mhtr
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MessageHandlingTimeRecorder
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mhtr
argument_list|)
expr_stmt|;
comment|//EasyMock.expect(exchange.get(MessageHandlingTimeRecorder.class)).andReturn(mhtr);
name|EasyMock
operator|.
name|replay
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|rtmoi
operator|.
name|handleFault
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|mhtr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientOneWayMessageOut
parameter_list|()
block|{
comment|//need to increase the counter and is a client
name|setupCounterRepository
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setupExchangeForMessage
argument_list|()
expr_stmt|;
name|setupOperationForMessage
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PARTIAL_RESPONSE_MESSAGE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getOutMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
name|FaultMode
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|isOneWay
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|MessageHandlingTimeRecorder
name|mhtr
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MessageHandlingTimeRecorder
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
name|MessageHandlingTimeRecorder
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mhtr
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.management.counter.enabled"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|InterceptorChain
name|chain
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|InterceptorChain
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//EasyMock.expect(message.getInterceptorChain()).andReturn(chain);
name|chain
operator|.
name|add
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|ResponseTimeMessageOutInterceptor
operator|.
name|EndingInterceptor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|rtmoi
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|rtmoi
operator|.
name|getEndingInterceptor
argument_list|()
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientMessageOut
parameter_list|()
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PARTIAL_RESPONSE_MESSAGE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.management.counter.enabled"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|rtmoi
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

