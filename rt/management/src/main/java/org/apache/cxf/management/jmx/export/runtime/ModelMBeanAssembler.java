begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|jmx
operator|.
name|export
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Descriptor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|modelmbean
operator|.
name|ModelMBeanInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedOperationParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedOperationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedResource
import|;
end_import

begin_class
specifier|public
class|class
name|ModelMBeanAssembler
block|{
specifier|private
name|ModelMBeanInfoSupporter
name|supporter
init|=
operator|new
name|ModelMBeanInfoSupporter
argument_list|()
decl_stmt|;
specifier|public
name|ManagedResource
name|getManagedResource
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|ManagedResource
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ManagedAttribute
name|getManagedAttribute
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
return|return
name|method
operator|.
name|getAnnotation
argument_list|(
name|ManagedAttribute
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ManagedOperation
name|getManagedOperation
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
return|return
name|method
operator|.
name|getAnnotation
argument_list|(
name|ManagedOperation
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|ManagedOperationParameter
index|[]
name|getManagedOperationParameters
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|ManagedOperationParameters
name|params
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|ManagedOperationParameters
operator|.
name|class
argument_list|)
decl_stmt|;
name|ManagedOperationParameter
index|[]
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ManagedOperationParameter
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|params
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|ManagedNotification
index|[]
name|getManagedNotifications
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|ManagedNotifications
name|notificationsAnn
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|ManagedNotifications
operator|.
name|class
argument_list|)
decl_stmt|;
name|ManagedNotification
index|[]
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|notificationsAnn
condition|)
block|{
return|return
operator|new
name|ManagedNotification
index|[
literal|0
index|]
return|;
block|}
name|result
operator|=
name|notificationsAnn
operator|.
name|value
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|String
name|getAttributeName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
if|if
condition|(
name|methodName
operator|.
name|indexOf
argument_list|(
literal|"set"
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|methodName
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
return|;
block|}
if|if
condition|(
name|methodName
operator|.
name|indexOf
argument_list|(
literal|"get"
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|methodName
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
return|;
block|}
if|if
condition|(
name|methodName
operator|.
name|indexOf
argument_list|(
literal|"is"
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|methodName
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|boolean
name|checkMethod
parameter_list|(
name|Method
index|[]
name|methods
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|methods
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|methodName
argument_list|)
operator|==
literal|0
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|String
name|getAttributeType
parameter_list|(
name|Method
index|[]
name|methods
parameter_list|,
name|String
name|attributeName
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
name|String
name|searchMethod
init|=
literal|"get"
operator|+
name|attributeName
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|methods
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|searchMethod
argument_list|)
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|methods
index|[
name|i
index|]
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
comment|// check it is "is " attribute
if|if
condition|(
literal|null
operator|==
name|result
condition|)
block|{
name|searchMethod
operator|=
literal|"is"
operator|+
name|attributeName
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|methods
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|searchMethod
argument_list|)
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|methods
index|[
name|i
index|]
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
class|class
name|ManagedAttributeInfo
block|{
name|String
name|fname
decl_stmt|;
name|String
name|ftype
decl_stmt|;
name|String
name|description
decl_stmt|;
name|boolean
name|read
decl_stmt|;
name|boolean
name|write
decl_stmt|;
name|boolean
name|is
decl_stmt|;
block|}
empty_stmt|;
comment|//get the attribut information for the method
specifier|public
name|ManagedAttributeInfo
name|getAttributInfo
parameter_list|(
name|Method
index|[]
name|methods
parameter_list|,
name|String
name|attributName
parameter_list|,
name|String
name|attributType
parameter_list|,
name|ManagedAttribute
name|managedAttribute
parameter_list|)
block|{
name|ManagedAttributeInfo
name|mai
init|=
operator|new
name|ManagedAttributeInfo
argument_list|()
decl_stmt|;
name|mai
operator|.
name|fname
operator|=
name|attributName
expr_stmt|;
name|mai
operator|.
name|ftype
operator|=
name|attributType
expr_stmt|;
name|mai
operator|.
name|description
operator|=
name|managedAttribute
operator|.
name|description
argument_list|()
expr_stmt|;
name|mai
operator|.
name|is
operator|=
name|checkMethod
argument_list|(
name|methods
argument_list|,
literal|"is"
operator|+
name|attributName
argument_list|)
expr_stmt|;
name|mai
operator|.
name|write
operator|=
name|checkMethod
argument_list|(
name|methods
argument_list|,
literal|"set"
operator|+
name|attributName
argument_list|)
expr_stmt|;
if|if
condition|(
name|mai
operator|.
name|is
condition|)
block|{
name|mai
operator|.
name|read
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|mai
operator|.
name|read
operator|=
name|checkMethod
argument_list|(
name|methods
argument_list|,
literal|"get"
operator|+
name|attributName
argument_list|)
expr_stmt|;
block|}
return|return
name|mai
return|;
block|}
name|Method
name|findMethodByName
parameter_list|(
name|Method
name|methods
index|[]
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|methods
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|methodName
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|methods
index|[
name|i
index|]
return|;
block|}
else|else
block|{
continue|continue;
block|}
block|}
return|return
literal|null
return|;
block|}
name|void
name|addAttributeOperation
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|Descriptor
name|operationDescriptor
init|=
name|supporter
operator|.
name|buildAttributeOperationDescriptor
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|types
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|String
index|[]
name|paramTypes
init|=
operator|new
name|String
index|[
name|types
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|paramNames
init|=
operator|new
name|String
index|[
name|types
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|paramDescs
init|=
operator|new
name|String
index|[
name|types
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|types
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|paramTypes
index|[
name|j
index|]
operator|=
name|types
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
name|paramDescs
index|[
name|j
index|]
operator|=
literal|""
expr_stmt|;
name|paramNames
index|[
name|j
index|]
operator|=
name|types
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|supporter
operator|.
name|addModelMBeanMethod
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|paramTypes
argument_list|,
name|paramNames
argument_list|,
name|paramDescs
argument_list|,
literal|""
argument_list|,
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|operationDescriptor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ModelMBeanInfo
name|getModelMbeanInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|supporter
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ManagedResource
name|mr
init|=
name|getManagedResource
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|mr
operator|==
literal|null
condition|)
block|{
comment|// the class is not need to expose to jmx
return|return
literal|null
return|;
block|}
comment|// Clazz get all the method which should be managemed
name|Descriptor
name|mbeanDescriptor
init|=
name|supporter
operator|.
name|buildMBeanDescriptor
argument_list|(
name|mr
argument_list|)
decl_stmt|;
comment|// add the notification
name|ManagedNotification
index|[]
name|mns
init|=
name|getManagedNotifications
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|mns
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|supporter
operator|.
name|addModelMBeanNotification
argument_list|(
name|mns
index|[
name|k
index|]
operator|.
name|notificationTypes
argument_list|()
argument_list|,
name|mns
index|[
name|k
index|]
operator|.
name|name
argument_list|()
argument_list|,
name|mns
index|[
name|k
index|]
operator|.
name|description
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|Method
index|[]
name|methods
init|=
name|clazz
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ManagedAttribute
name|ma
init|=
name|getManagedAttribute
argument_list|(
name|methods
index|[
name|i
index|]
argument_list|)
decl_stmt|;
comment|//add Attribute to the ModelMBean
if|if
condition|(
name|ma
operator|!=
literal|null
condition|)
block|{
name|String
name|attributeName
init|=
name|getAttributeName
argument_list|(
name|methods
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|supporter
operator|.
name|checkAttribute
argument_list|(
name|attributeName
argument_list|)
condition|)
block|{
name|String
name|attributeType
init|=
name|getAttributeType
argument_list|(
name|methods
argument_list|,
name|attributeName
argument_list|)
decl_stmt|;
name|ManagedAttributeInfo
name|mai
init|=
name|getAttributInfo
argument_list|(
name|methods
argument_list|,
name|attributeName
argument_list|,
name|attributeType
argument_list|,
name|ma
argument_list|)
decl_stmt|;
name|Descriptor
name|attributeDescriptor
init|=
name|supporter
operator|.
name|buildAttributeDescriptor
argument_list|(
name|ma
argument_list|,
name|attributeName
argument_list|,
name|mai
operator|.
name|is
argument_list|,
name|mai
operator|.
name|read
argument_list|,
name|mai
operator|.
name|write
argument_list|)
decl_stmt|;
comment|// should setup the description
name|supporter
operator|.
name|addModelMBeanAttribute
argument_list|(
name|mai
operator|.
name|fname
argument_list|,
name|mai
operator|.
name|ftype
argument_list|,
name|mai
operator|.
name|read
argument_list|,
name|mai
operator|.
name|write
argument_list|,
name|mai
operator|.
name|is
argument_list|,
name|mai
operator|.
name|description
argument_list|,
name|attributeDescriptor
argument_list|)
expr_stmt|;
name|Method
name|method
decl_stmt|;
comment|// add the attribute methode to operation
if|if
condition|(
name|mai
operator|.
name|read
condition|)
block|{
if|if
condition|(
name|mai
operator|.
name|is
condition|)
block|{
name|method
operator|=
name|findMethodByName
argument_list|(
name|methods
argument_list|,
literal|"is"
operator|+
name|attributeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|method
operator|=
name|findMethodByName
argument_list|(
name|methods
argument_list|,
literal|"get"
operator|+
name|attributeName
argument_list|)
expr_stmt|;
block|}
name|addAttributeOperation
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mai
operator|.
name|write
condition|)
block|{
name|method
operator|=
name|findMethodByName
argument_list|(
name|methods
argument_list|,
literal|"set"
operator|+
name|attributeName
argument_list|)
expr_stmt|;
name|addAttributeOperation
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// add Operation to the ModelMBean
name|ManagedOperation
name|mo
init|=
name|getManagedOperation
argument_list|(
name|methods
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|mo
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|types
init|=
name|methods
index|[
name|i
index|]
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|ManagedOperationParameter
index|[]
name|mop
init|=
name|getManagedOperationParameters
argument_list|(
name|methods
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|String
index|[]
name|paramTypes
init|=
operator|new
name|String
index|[
name|types
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|paramNames
init|=
operator|new
name|String
index|[
name|types
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|paramDescs
init|=
operator|new
name|String
index|[
name|types
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|types
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|paramTypes
index|[
name|j
index|]
operator|=
name|types
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|j
operator|<
name|mop
operator|.
name|length
condition|)
block|{
name|paramDescs
index|[
name|j
index|]
operator|=
name|mop
index|[
name|j
index|]
operator|.
name|description
argument_list|()
expr_stmt|;
name|paramNames
index|[
name|j
index|]
operator|=
name|mop
index|[
name|j
index|]
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|paramDescs
index|[
name|j
index|]
operator|=
literal|""
expr_stmt|;
name|paramNames
index|[
name|j
index|]
operator|=
name|types
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
name|Descriptor
name|operationDescriptor
init|=
name|supporter
operator|.
name|buildOperationDescriptor
argument_list|(
name|mo
argument_list|,
name|methods
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|supporter
operator|.
name|addModelMBeanMethod
argument_list|(
name|methods
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|paramTypes
argument_list|,
name|paramNames
argument_list|,
name|paramDescs
argument_list|,
name|mo
operator|.
name|description
argument_list|()
argument_list|,
name|methods
index|[
name|i
index|]
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|operationDescriptor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|supporter
operator|.
name|buildModelMBeanInfo
argument_list|(
name|mbeanDescriptor
argument_list|)
return|;
block|}
block|}
end_class

end_unit

