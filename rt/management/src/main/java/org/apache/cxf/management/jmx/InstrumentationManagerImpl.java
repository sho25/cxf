begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceAlreadyExistsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectInstance
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|modelmbean
operator|.
name|InvalidTargetObjectTypeException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|modelmbean
operator|.
name|ModelMBeanInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|modelmbean
operator|.
name|RequiredModelMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|ManagedBus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|buslifecycle
operator|.
name|BusLifeCycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|buslifecycle
operator|.
name|BusLifeCycleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|InstrumentationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|JMXConnectorPolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|ManagedComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|ManagementConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|jmx
operator|.
name|export
operator|.
name|runtime
operator|.
name|ModelMBeanAssembler
import|;
end_import

begin_comment
comment|/**  * The manager class for the JMXManagedComponent which hosts the JMXManagedComponents.  */
end_comment

begin_class
specifier|public
class|class
name|InstrumentationManagerImpl
extends|extends
name|JMXConnectorPolicyType
implements|implements
name|InstrumentationManager
implements|,
name|BusLifeCycleListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|InstrumentationManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|MBServerConnectorFactory
name|mcf
decl_stmt|;
specifier|private
name|MBeanServer
name|mbs
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|busMBeans
init|=
operator|new
name|HashSet
argument_list|<
name|ObjectName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|connectFailed
decl_stmt|;
comment|/**      * For backward compatibility, {@link #createMBServerConnectorFactory} is<code>true</code> by default.      */
specifier|private
name|boolean
name|createMBServerConnectorFactory
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|mbeanServerName
init|=
name|ManagementConstants
operator|.
name|DEFAULT_DOMAIN_NAME
decl_stmt|;
specifier|private
name|boolean
name|usePlatformMBeanServer
decl_stmt|;
specifier|public
name|InstrumentationManagerImpl
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
annotation|@
name|Resource
argument_list|(
name|name
operator|=
literal|"cxf"
argument_list|)
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
block|}
specifier|public
name|void
name|setServerName
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|mbeanServerName
operator|=
name|s
expr_stmt|;
block|}
specifier|public
name|void
name|setCreateMBServerConnectorFactory
parameter_list|(
name|boolean
name|createMBServerConnectorFactory
parameter_list|)
block|{
name|this
operator|.
name|createMBServerConnectorFactory
operator|=
name|createMBServerConnectorFactory
expr_stmt|;
block|}
specifier|public
name|void
name|setUsePlatformMBeanServer
parameter_list|(
name|Boolean
name|flag
parameter_list|)
block|{
name|usePlatformMBeanServer
operator|=
name|flag
expr_stmt|;
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|register
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|bus
condition|)
block|{
name|bus
operator|.
name|setExtension
argument_list|(
name|this
argument_list|,
name|InstrumentationManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|BusLifeCycleManager
name|blcm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|BusLifeCycleManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|blcm
condition|)
block|{
name|blcm
operator|.
name|registerLifeCycleListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|mbs
operator|==
literal|null
condition|)
block|{
comment|// return platform mbean server if the option is specified.
if|if
condition|(
name|usePlatformMBeanServer
condition|)
block|{
name|mbs
operator|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|MBeanServer
argument_list|>
name|servers
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|MBeanServerFactory
operator|.
name|findMBeanServer
argument_list|(
name|mbeanServerName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|servers
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|mbs
operator|=
name|MBeanServerFactory
operator|.
name|createMBeanServer
argument_list|(
name|mbeanServerName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mbs
operator|=
operator|(
name|MBeanServer
operator|)
name|servers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|createMBServerConnectorFactory
condition|)
block|{
name|mcf
operator|=
name|MBServerConnectorFactory
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|mcf
operator|.
name|setMBeanServer
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|mcf
operator|.
name|setThreaded
argument_list|(
name|isThreaded
argument_list|()
argument_list|)
expr_stmt|;
name|mcf
operator|.
name|setDaemon
argument_list|(
name|isDaemon
argument_list|()
argument_list|)
expr_stmt|;
name|mcf
operator|.
name|setServiceUrl
argument_list|(
name|getJMXServiceURL
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|mcf
operator|.
name|createConnector
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|connectFailed
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"START_CONNECTOR_FAILURE_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ex
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|connectFailed
operator|&&
literal|null
operator|!=
name|bus
condition|)
block|{
try|try
block|{
comment|//Register Bus here since we can guarantee that Instrumentation
comment|//infrastructure has been initialized.
name|ManagedBus
name|mbus
init|=
operator|new
name|ManagedBus
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|mbus
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMException
name|jmex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"REGISTER_FAILURE_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|bus
block|,
name|jmex
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|register
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectName
name|name
parameter_list|)
throws|throws
name|JMException
block|{
name|register
argument_list|(
name|obj
argument_list|,
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|register
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectName
name|name
parameter_list|,
name|boolean
name|forceRegistration
parameter_list|)
throws|throws
name|JMException
block|{
if|if
condition|(
operator|!
name|isEnabled
argument_list|()
operator|||
name|connectFailed
condition|)
block|{
return|return;
block|}
comment|//Try to register as a Standard MBean
try|try
block|{
name|registerMBeanWithServer
argument_list|(
name|obj
argument_list|,
name|name
argument_list|,
name|forceRegistration
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotCompliantMBeanException
name|e
parameter_list|)
block|{
comment|//If this is not a "normal" MBean, then try to deploy it using JMX annotations
name|ModelMBeanAssembler
name|assembler
init|=
operator|new
name|ModelMBeanAssembler
argument_list|()
decl_stmt|;
name|ModelMBeanInfo
name|mbi
init|=
name|assembler
operator|.
name|getModelMbeanInfo
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|obj
argument_list|,
name|name
argument_list|,
name|mbi
argument_list|,
name|forceRegistration
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ObjectName
name|register
parameter_list|(
name|ManagedComponent
name|i
parameter_list|)
throws|throws
name|JMException
block|{
name|ObjectName
name|name
init|=
name|register
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|name
return|;
block|}
specifier|public
name|ObjectName
name|register
parameter_list|(
name|ManagedComponent
name|i
parameter_list|,
name|boolean
name|forceRegistration
parameter_list|)
throws|throws
name|JMException
block|{
name|ObjectName
name|name
init|=
name|i
operator|.
name|getObjectName
argument_list|()
decl_stmt|;
name|register
argument_list|(
name|i
argument_list|,
name|name
argument_list|,
name|forceRegistration
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
specifier|public
name|void
name|unregister
parameter_list|(
name|ManagedComponent
name|component
parameter_list|)
throws|throws
name|JMException
block|{
name|ObjectName
name|name
init|=
name|component
operator|.
name|getObjectName
argument_list|()
decl_stmt|;
name|unregister
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unregister
parameter_list|(
name|ObjectName
name|name
parameter_list|)
throws|throws
name|JMException
block|{
if|if
condition|(
operator|!
name|isEnabled
argument_list|()
operator|||
name|connectFailed
condition|)
block|{
return|return;
block|}
name|busMBeans
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|mbs
operator|.
name|unregisterMBean
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MBeanServer
name|getMBeanServer
parameter_list|()
block|{
return|return
name|mbs
return|;
block|}
specifier|public
name|void
name|setServer
parameter_list|(
name|MBeanServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|mbs
operator|=
name|server
expr_stmt|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|mcf
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|mcf
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"STOP_CONNECTOR_FAILURE_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ex
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|initComplete
parameter_list|()
block|{              }
specifier|public
name|void
name|preShutdown
parameter_list|()
block|{                      }
specifier|public
name|void
name|postShutdown
parameter_list|()
block|{
comment|//Using the array to hold the busMBeans to avoid the CurrentModificationException
name|Object
index|[]
name|mBeans
init|=
name|busMBeans
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|name
range|:
name|mBeans
control|)
block|{
name|busMBeans
operator|.
name|remove
argument_list|(
operator|(
name|ObjectName
operator|)
name|name
argument_list|)
expr_stmt|;
try|try
block|{
name|unregister
argument_list|(
operator|(
name|ObjectName
operator|)
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMException
name|jmex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"UNREGISTER_FAILURE_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|,
name|jmex
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|register
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectName
name|name
parameter_list|,
name|ModelMBeanInfo
name|mbi
parameter_list|,
name|boolean
name|forceRegistration
parameter_list|)
throws|throws
name|JMException
block|{
name|RequiredModelMBean
name|rtMBean
init|=
operator|(
name|RequiredModelMBean
operator|)
name|mbs
operator|.
name|instantiate
argument_list|(
literal|"javax.management.modelmbean.RequiredModelMBean"
argument_list|)
decl_stmt|;
name|rtMBean
operator|.
name|setModelMBeanInfo
argument_list|(
name|mbi
argument_list|)
expr_stmt|;
try|try
block|{
name|rtMBean
operator|.
name|setManagedResource
argument_list|(
name|obj
argument_list|,
literal|"ObjectReference"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidTargetObjectTypeException
name|itotex
parameter_list|)
block|{
throw|throw
operator|new
name|JMException
argument_list|(
name|itotex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|registerMBeanWithServer
argument_list|(
name|rtMBean
argument_list|,
name|name
argument_list|,
name|forceRegistration
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerMBeanWithServer
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectName
name|name
parameter_list|,
name|boolean
name|forceRegistration
parameter_list|)
throws|throws
name|JMException
block|{
name|ObjectInstance
name|instance
init|=
literal|null
decl_stmt|;
try|try
block|{
name|instance
operator|=
name|mbs
operator|.
name|registerMBean
argument_list|(
name|obj
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstanceAlreadyExistsException
name|e
parameter_list|)
block|{
if|if
condition|(
name|forceRegistration
condition|)
block|{
name|mbs
operator|.
name|unregisterMBean
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|instance
operator|=
name|mbs
operator|.
name|registerMBean
argument_list|(
name|obj
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
name|busMBeans
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

