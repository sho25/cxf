begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|counters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|InstrumentationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|interceptor
operator|.
name|ResponseTimeMessageInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|interceptor
operator|.
name|ResponseTimeMessageInvokerInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|interceptor
operator|.
name|ResponseTimeMessageOutInterceptor
import|;
end_import

begin_comment
comment|/* Counters are created and managed by CounterRepository   * If a counter which is queried form the counterRepository is not exist,  * the CounterRepository will create a counter and expose it to the JMX  * Because we can get the instance of the counter object,   * it is not need to qurey the counter object from JMX   * */
end_comment

begin_class
specifier|public
class|class
name|CounterRepository
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|CounterRepository
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|Counter
argument_list|>
name|counters
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|Lock
name|counterCreationLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|public
name|CounterRepository
parameter_list|()
block|{
name|counters
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|Counter
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|Counter
argument_list|>
name|getCounters
parameter_list|()
block|{
return|return
name|counters
return|;
block|}
annotation|@
name|PostConstruct
name|void
name|registerInterceptorsToBus
parameter_list|()
block|{
name|ResponseTimeMessageInInterceptor
name|in
init|=
operator|new
name|ResponseTimeMessageInInterceptor
argument_list|()
decl_stmt|;
name|ResponseTimeMessageInvokerInterceptor
name|invoker
init|=
operator|new
name|ResponseTimeMessageInvokerInterceptor
argument_list|()
decl_stmt|;
name|ResponseTimeMessageOutInterceptor
name|out
init|=
operator|new
name|ResponseTimeMessageOutInterceptor
argument_list|()
decl_stmt|;
name|bus
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|invoker
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|bus
operator|.
name|setExtension
argument_list|(
name|this
argument_list|,
name|CounterRepository
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//create CounterRepositroyMoniter to writer the counter log
comment|//if the service is stopped or removed, the counters should remove itself
block|}
specifier|public
name|void
name|increaseCounter
parameter_list|(
name|ObjectName
name|on
parameter_list|,
name|MessageHandlingTimeRecorder
name|mhtr
parameter_list|)
block|{
name|Counter
name|counter
init|=
name|getCounter
argument_list|(
name|on
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|counter
condition|)
block|{
name|counterCreationLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// check if the counter has been created during the locked time
name|counter
operator|=
name|getCounter
argument_list|(
name|on
argument_list|)
expr_stmt|;
if|if
condition|(
name|counter
operator|==
literal|null
condition|)
block|{
name|counter
operator|=
name|createCounter
argument_list|(
name|on
argument_list|,
name|mhtr
argument_list|)
expr_stmt|;
name|counters
operator|.
name|put
argument_list|(
name|on
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|counterCreationLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
name|counter
operator|.
name|increase
argument_list|(
name|mhtr
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Increase counter "
operator|+
name|on
operator|+
literal|" with "
operator|+
name|mhtr
argument_list|)
expr_stmt|;
block|}
block|}
comment|//find a counter
specifier|public
name|Counter
name|getCounter
parameter_list|(
name|ObjectName
name|on
parameter_list|)
block|{
return|return
name|counters
operator|.
name|get
argument_list|(
name|on
argument_list|)
return|;
block|}
specifier|public
name|Counter
name|createCounter
parameter_list|(
name|ObjectName
name|on
parameter_list|,
name|MessageHandlingTimeRecorder
name|mhtr
parameter_list|)
block|{
name|Counter
name|counter
init|=
literal|null
decl_stmt|;
name|counter
operator|=
operator|new
name|ResponseTimeCounter
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|InstrumentationManager
name|im
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|InstrumentationManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|im
condition|)
block|{
try|try
block|{
name|im
operator|.
name|register
argument_list|(
name|counter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"INSTRUMENTATION_REGISTER_FAULT_MSG"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
name|e
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|counter
return|;
block|}
block|}
end_class

end_unit

