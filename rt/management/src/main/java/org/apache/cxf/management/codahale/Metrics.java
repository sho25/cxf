begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|codahale
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|JmxReporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|ObjectNameFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AttachmentInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|MessageSenderInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|ServiceInvokerInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|InstrumentationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|ManagementConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|FaultMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_class
specifier|public
class|class
name|Metrics
block|{
specifier|private
specifier|static
specifier|final
name|String
name|QUESTION_MARK
init|=
literal|"?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ESCAPED_QUESTION_MARK
init|=
literal|"\\?"
decl_stmt|;
specifier|private
name|MetricRegistry
name|registry
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|public
name|Metrics
parameter_list|()
block|{
name|registry
operator|=
operator|new
name|MetricRegistry
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Metrics
parameter_list|(
name|MetricRegistry
name|reg
parameter_list|)
block|{
name|registry
operator|=
name|reg
expr_stmt|;
block|}
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|registerInterceptorsToBus
argument_list|()
expr_stmt|;
block|}
name|InstrumentationManager
name|im
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|InstrumentationManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|im
operator|!=
literal|null
condition|)
block|{
name|JmxReporter
name|reporter
init|=
name|JmxReporter
operator|.
name|forRegistry
argument_list|(
name|registry
argument_list|)
operator|.
name|registerWith
argument_list|(
name|im
operator|.
name|getMBeanServer
argument_list|()
argument_list|)
operator|.
name|inDomain
argument_list|(
literal|"org.apache.cxf"
argument_list|)
operator|.
name|createsObjectNamesWith
argument_list|(
operator|new
name|ObjectNameFactory
argument_list|()
block|{
specifier|public
name|ObjectName
name|createName
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|domain
parameter_list|,
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|ObjectName
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedObjectNameException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|reporter
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
name|void
name|registerInterceptorsToBus
parameter_list|()
block|{
name|ResponseTimeMessageInInterceptor
name|in
init|=
operator|new
name|ResponseTimeMessageInInterceptor
argument_list|()
decl_stmt|;
name|ResponseTimeMessageInOneWayInterceptor
name|oneway
init|=
operator|new
name|ResponseTimeMessageInOneWayInterceptor
argument_list|()
decl_stmt|;
name|ResponseTimeMessageOutInterceptor
name|out
init|=
operator|new
name|ResponseTimeMessageOutInterceptor
argument_list|()
decl_stmt|;
comment|//ResponseTimeMessageInvokerInterceptor invoker = new ResponseTimeMessageInvokerInterceptor();
name|bus
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|oneway
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|//bus.setExtension(this, CounterRepository.class);
comment|//create CounterRepositroyMoniter to writer the counter log
comment|//if the service is stopped or removed, the counters should remove itself
block|}
specifier|static
class|class
name|TimerInfo
block|{
name|Counter
name|inFlight
decl_stmt|;
name|Timer
name|totals
decl_stmt|;
name|Timer
name|uncheckedApplicationFaults
decl_stmt|;
name|Timer
name|checkedApplicationFaults
decl_stmt|;
name|Timer
name|runtimeFaults
decl_stmt|;
name|Timer
name|logicalRuntimeFaults
decl_stmt|;
name|Context
name|start
parameter_list|()
block|{
name|inFlight
operator|.
name|inc
argument_list|()
expr_stmt|;
name|Context
name|ctx
init|=
operator|new
name|Context
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|info
operator|=
name|this
expr_stmt|;
name|ctx
operator|.
name|t
operator|=
name|totals
operator|.
name|time
argument_list|()
expr_stmt|;
return|return
name|ctx
return|;
block|}
specifier|static
class|class
name|Context
block|{
name|TimerInfo
name|info
decl_stmt|;
name|Timer
operator|.
name|Context
name|t
decl_stmt|;
block|}
block|}
name|TimerInfo
name|getTimerInfo
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|TimerInfo
name|ti
init|=
operator|(
name|TimerInfo
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|get
argument_list|(
name|TimerInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ti
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
init|)
block|{
return|return
name|createTimerInfo
argument_list|(
name|message
argument_list|)
return|;
block|}
block|}
return|return
name|ti
return|;
block|}
name|TimerInfo
name|getTimerInfo
parameter_list|(
name|Message
name|message
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
if|if
condition|(
name|boi
operator|.
name|isUnwrapped
argument_list|()
condition|)
block|{
name|boi
operator|=
name|boi
operator|.
name|getWrappedOperation
argument_list|()
expr_stmt|;
block|}
name|TimerInfo
name|ti
init|=
operator|(
name|TimerInfo
operator|)
name|boi
operator|.
name|getProperty
argument_list|(
name|TimerInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ti
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|boi
init|)
block|{
return|return
name|createTimerInfo
argument_list|(
name|message
argument_list|,
name|boi
argument_list|)
return|;
block|}
block|}
return|return
name|ti
return|;
block|}
specifier|private
name|TimerInfo
name|createTimerInfo
parameter_list|(
name|Message
name|message
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
name|TimerInfo
name|ti
init|=
operator|(
name|TimerInfo
operator|)
name|boi
operator|.
name|getProperty
argument_list|(
name|TimerInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ti
operator|==
literal|null
condition|)
block|{
name|ti
operator|=
operator|new
name|TimerInfo
argument_list|()
expr_stmt|;
name|StringBuilder
name|buffer
init|=
name|getBaseServiceName
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"Operation="
argument_list|)
operator|.
name|append
argument_list|(
name|boi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|ti
operator|.
name|totals
operator|=
name|registry
operator|.
name|timer
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
operator|+
literal|"Attribute=Totals"
argument_list|)
expr_stmt|;
name|ti
operator|.
name|uncheckedApplicationFaults
operator|=
name|registry
operator|.
name|timer
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
operator|+
literal|"Attribute=Unchecked Application Faults"
argument_list|)
expr_stmt|;
name|ti
operator|.
name|checkedApplicationFaults
operator|=
name|registry
operator|.
name|timer
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
operator|+
literal|"Attribute=Checked Application Faults"
argument_list|)
expr_stmt|;
name|ti
operator|.
name|runtimeFaults
operator|=
name|registry
operator|.
name|timer
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
operator|+
literal|"Attribute=Runtime Faults"
argument_list|)
expr_stmt|;
name|ti
operator|.
name|logicalRuntimeFaults
operator|=
name|registry
operator|.
name|timer
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
operator|+
literal|"Attribute=Logical Runtime Faults"
argument_list|)
expr_stmt|;
name|boi
operator|.
name|setProperty
argument_list|(
name|TimerInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ti
argument_list|)
expr_stmt|;
block|}
return|return
name|ti
return|;
block|}
name|StringBuilder
name|getBaseServiceName
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Exchange
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.management.service.counter.name"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|ex
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.management.service.counter.name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Service
name|service
init|=
name|ex
operator|.
name|getService
argument_list|()
decl_stmt|;
name|Endpoint
name|endpoint
init|=
name|ex
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|Bus
name|b
init|=
name|ex
operator|.
name|getBus
argument_list|()
decl_stmt|;
name|String
name|serviceName
init|=
literal|"\""
operator|+
name|escapePatternChars
argument_list|(
name|service
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"\""
decl_stmt|;
name|String
name|portName
init|=
literal|"\""
operator|+
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"\""
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|DEFAULT_DOMAIN_NAME
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|BUS_ID_PROP
operator|+
literal|"="
operator|+
name|b
operator|.
name|getId
argument_list|()
operator|+
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|TYPE_PROP
argument_list|)
operator|.
name|append
argument_list|(
literal|"=Metrics"
argument_list|)
expr_stmt|;
if|if
condition|(
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".Client,"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".Server,"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|SERVICE_NAME_PROP
operator|+
literal|"="
operator|+
name|serviceName
operator|+
literal|","
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|PORT_NAME_PROP
operator|+
literal|"="
operator|+
name|portName
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
return|;
block|}
specifier|private
name|TimerInfo
name|createTimerInfo
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Exchange
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
specifier|final
name|Endpoint
name|endpoint
init|=
name|ex
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimerInfo
name|ti
init|=
operator|(
name|TimerInfo
operator|)
name|endpoint
operator|.
name|get
argument_list|(
name|TimerInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ti
operator|==
literal|null
condition|)
block|{
name|ti
operator|=
operator|new
name|TimerInfo
argument_list|()
expr_stmt|;
name|StringBuilder
name|buffer
init|=
name|getBaseServiceName
argument_list|(
name|message
argument_list|)
decl_stmt|;
specifier|final
name|String
name|baseName
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ti
operator|.
name|totals
operator|=
name|registry
operator|.
name|timer
argument_list|(
name|baseName
operator|+
literal|"Attribute=Totals"
argument_list|)
expr_stmt|;
name|ti
operator|.
name|uncheckedApplicationFaults
operator|=
name|registry
operator|.
name|timer
argument_list|(
name|baseName
operator|+
literal|"Attribute=Unchecked Application Faults"
argument_list|)
expr_stmt|;
name|ti
operator|.
name|checkedApplicationFaults
operator|=
name|registry
operator|.
name|timer
argument_list|(
name|baseName
operator|+
literal|"Attribute=Checked Application Faults"
argument_list|)
expr_stmt|;
name|ti
operator|.
name|runtimeFaults
operator|=
name|registry
operator|.
name|timer
argument_list|(
name|baseName
operator|+
literal|"Attribute=Runtime Faults"
argument_list|)
expr_stmt|;
name|ti
operator|.
name|logicalRuntimeFaults
operator|=
name|registry
operator|.
name|timer
argument_list|(
name|baseName
operator|+
literal|"Attribute=Logical Runtime Faults"
argument_list|)
expr_stmt|;
name|ti
operator|.
name|inFlight
operator|=
name|registry
operator|.
name|counter
argument_list|(
name|baseName
operator|+
literal|"Attribute=In Flight"
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|put
argument_list|(
name|TimerInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|ti
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|addCleanupHook
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|registry
operator|.
name|remove
argument_list|(
name|baseName
operator|+
literal|"Attribute=Totals"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|baseName
operator|+
literal|"Attribute=Unchecked Application Faults"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|baseName
operator|+
literal|"Attribute=Checked Application Faults"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|baseName
operator|+
literal|"Attribute=Runtime Faults"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|baseName
operator|+
literal|"Attribute=Logical Runtime Faults"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|baseName
operator|+
literal|"Attribute=In Flight"
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|remove
argument_list|(
name|TimerInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|endpoint
operator|.
name|getBinding
argument_list|()
operator|.
name|getBindingInfo
argument_list|()
operator|.
name|getOperations
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|endpoint
operator|.
name|getBinding
argument_list|()
operator|.
name|getBindingInfo
argument_list|()
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|TimerInfo
name|ti
init|=
operator|(
name|TimerInfo
operator|)
name|boi
operator|.
name|removeProperty
argument_list|(
name|TimerInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ti
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|baseName
operator|+
literal|"Operation="
operator|+
name|boi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|","
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removing beans for "
operator|+
name|boi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|name
operator|+
literal|"Attribute=Totals"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|name
operator|+
literal|"Attribute=Unchecked Application Faults"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|name
operator|+
literal|"Attribute=Checked Application Faults"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|name
operator|+
literal|"Attribute=Runtime Faults"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
name|name
operator|+
literal|"Attribute=Logical Runtime Faults"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|ti
return|;
block|}
specifier|protected
name|String
name|escapePatternChars
parameter_list|(
name|String
name|value
parameter_list|)
block|{
comment|// This can be replaced if really needed with pattern-based matching
if|if
condition|(
name|value
operator|.
name|lastIndexOf
argument_list|(
name|QUESTION_MARK
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|replace
argument_list|(
name|QUESTION_MARK
argument_list|,
name|ESCAPED_QUESTION_MARK
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|static
name|void
name|update
parameter_list|(
name|Timer
name|t1
parameter_list|,
name|Timer
name|t2
parameter_list|,
name|long
name|t
parameter_list|)
block|{
if|if
condition|(
name|t1
operator|!=
literal|null
condition|)
block|{
name|t1
operator|.
name|update
argument_list|(
name|t
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t2
operator|!=
literal|null
condition|)
block|{
name|t2
operator|.
name|update
argument_list|(
name|t
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stopTimers
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|TimerInfo
operator|.
name|Context
name|ctx
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|TimerInfo
operator|.
name|Context
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|l
init|=
name|ctx
operator|.
name|t
operator|.
name|stop
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|info
operator|.
name|inFlight
operator|.
name|dec
argument_list|()
expr_stmt|;
name|BindingOperationInfo
name|bi
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|getBindingOperationInfo
argument_list|()
decl_stmt|;
name|FaultMode
name|fm
init|=
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|FaultMode
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimerInfo
name|op
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bi
operator|!=
literal|null
condition|)
block|{
name|op
operator|=
name|getTimerInfo
argument_list|(
name|m
argument_list|,
name|bi
argument_list|)
expr_stmt|;
name|op
operator|.
name|totals
operator|.
name|update
argument_list|(
name|l
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fm
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|fm
condition|)
block|{
case|case
name|CHECKED_APPLICATION_FAULT
case|:
name|update
argument_list|(
name|ctx
operator|.
name|info
operator|.
name|checkedApplicationFaults
argument_list|,
name|op
operator|!=
literal|null
condition|?
name|op
operator|.
name|checkedApplicationFaults
else|:
literal|null
argument_list|,
name|l
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNCHECKED_APPLICATION_FAULT
case|:
name|update
argument_list|(
name|ctx
operator|.
name|info
operator|.
name|uncheckedApplicationFaults
argument_list|,
name|op
operator|!=
literal|null
condition|?
name|op
operator|.
name|uncheckedApplicationFaults
else|:
literal|null
argument_list|,
name|l
argument_list|)
expr_stmt|;
break|break;
case|case
name|RUNTIME_FAULT
case|:
name|update
argument_list|(
name|ctx
operator|.
name|info
operator|.
name|runtimeFaults
argument_list|,
name|op
operator|!=
literal|null
condition|?
name|op
operator|.
name|runtimeFaults
else|:
literal|null
argument_list|,
name|l
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOGICAL_RUNTIME_FAULT
case|:
name|update
argument_list|(
name|ctx
operator|.
name|info
operator|.
name|logicalRuntimeFaults
argument_list|,
name|op
operator|!=
literal|null
condition|?
name|op
operator|.
name|logicalRuntimeFaults
else|:
literal|null
argument_list|,
name|l
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
block|}
class|class
name|ResponseTimeMessageInInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|ResponseTimeMessageInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|RECEIVE
argument_list|)
expr_stmt|;
name|addBefore
argument_list|(
name|AttachmentInInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|TimerInfo
name|ti
init|=
name|getTimerInfo
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
comment|//
block|}
else|else
block|{
name|TimerInfo
operator|.
name|Context
name|ctx
init|=
name|ti
operator|.
name|start
argument_list|()
decl_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|TimerInfo
operator|.
name|Context
operator|.
name|class
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleFault
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
name|stopTimers
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
class|class
name|ResponseTimeMessageOutInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|ResponseTimeMessageOutInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PREPARE_SEND_ENDING
argument_list|)
expr_stmt|;
name|addBefore
argument_list|(
name|MessageSenderInterceptor
operator|.
name|MessageSenderEndingInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
if|if
condition|(
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
comment|//
block|}
else|else
block|{
name|stopTimers
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
class|class
name|ResponseTimeMessageInOneWayInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|ResponseTimeMessageInOneWayInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|INVOKE
argument_list|)
expr_stmt|;
name|addAfter
argument_list|(
name|ServiceInvokerInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|Exchange
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|.
name|isOneWay
argument_list|()
operator|&&
operator|!
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|stopTimers
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

