begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
class|class
name|FilesystemExchangeDataDAO
implements|implements
name|ExchangeDataDAO
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|FilesystemExchangeDataDAO
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|directory
decl_stmt|;
specifier|private
name|String
name|extension
init|=
literal|"txt"
decl_stmt|;
specifier|public
name|void
name|setDirectory
parameter_list|(
name|String
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
specifier|public
name|void
name|save
parameter_list|(
name|ExchangeData
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|directory
operator|==
literal|null
condition|)
block|{
name|file
operator|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"cxf-management-"
argument_list|,
literal|"."
operator|+
name|this
operator|.
name|extension
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
name|Files
operator|.
name|createTempFile
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|this
operator|.
name|directory
argument_list|)
argument_list|,
literal|"cxf-management-"
argument_list|,
literal|"."
operator|+
name|this
operator|.
name|extension
argument_list|)
expr_stmt|;
block|}
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"Service : "
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getServiceName
argument_list|()
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"Operation : "
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getOperation
argument_list|()
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"Status : "
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"URI : "
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"User agent : "
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getUserAgent
argument_list|()
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"Encoding : "
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"Date in : "
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getInDate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"Date out : "
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getOutDate
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"Request size : "
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|exchange
operator|.
name|getRequestSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"Response size : "
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|exchange
operator|.
name|getResponseSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n\n\nRequest : \n\n\n"
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n\n\n\n"
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n\n\nResponse : \n\n\n"
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n\n\n\n"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"ERROR"
operator|.
name|equals
argument_list|(
name|exchange
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n\n\nExcepttion : "
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getExceptionType
argument_list|()
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\nStackTrace : "
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
name|exchange
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n\n\n\n"
argument_list|)
expr_stmt|;
block|}
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n\nProperties : \n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExchangeDataProperty
name|exchangeProperty
range|:
name|exchange
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|stringWriter
operator|.
name|append
argument_list|(
name|exchangeProperty
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|" : "
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
name|exchangeProperty
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|stringWriter
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|OutputStream
name|fileOutputStream
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|fileOutputStream
operator|.
name|write
argument_list|(
name|stringWriter
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Exchange data saved in "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

