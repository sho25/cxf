begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLEventReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLEventWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLOutputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|RequestWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|ResponseWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb_form
operator|.
name|ObjectWithQualifiedElementElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb_misc
operator|.
name|Base64WithDefaultValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb_misc
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxStreamFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|types
operator|.
name|GreetMe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|types
operator|.
name|GreetMeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|types
operator|.
name|StringStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * JAXBEncoderDecoderTest  */
end_comment

begin_class
specifier|public
class|class
name|JAXBEncoderDecoderTest
extends|extends
name|Assert
block|{
specifier|public
specifier|static
specifier|final
name|QName
name|SOAP_ENV
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.xmlsoap.org/soap/envelope/"
argument_list|,
literal|"Envelope"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|SOAP_BODY
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.xmlsoap.org/soap/envelope/"
argument_list|,
literal|"Body"
argument_list|)
decl_stmt|;
name|RequestWrapper
name|wrapperAnnotation
decl_stmt|;
name|JAXBContext
name|context
decl_stmt|;
name|Schema
name|schema
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapField
decl_stmt|;
name|String
index|[]
name|arrayField
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|listField
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
operator|new
name|Class
index|[]
block|{
name|GreetMe
operator|.
name|class
block|,
name|GreetMeResponse
operator|.
name|class
block|,
name|StringStruct
operator|.
name|class
block|,
name|ObjectWithQualifiedElementElement
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|Method
name|method
init|=
name|getMethod
argument_list|(
literal|"greetMe"
argument_list|)
decl_stmt|;
name|wrapperAnnotation
operator|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|RequestWrapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"resources/StringStruct.xsd"
argument_list|)
decl_stmt|;
name|StreamSource
name|schemaSource
init|=
operator|new
name|StreamSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|schemaSource
argument_list|)
expr_stmt|;
name|SchemaFactory
name|factory
init|=
name|SchemaFactory
operator|.
name|newInstance
argument_list|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
argument_list|)
decl_stmt|;
name|schema
operator|=
name|factory
operator|.
name|newSchema
argument_list|(
name|schemaSource
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Method
name|getMethod
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|Method
index|[]
name|declMethods
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|declMethods
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
condition|)
block|{
return|return
name|method
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|RequestWrapper
argument_list|(
name|localName
operator|=
literal|"greetMe"
argument_list|,
name|targetNamespace
operator|=
literal|"http://apache.org/hello_world_soap_http/types"
argument_list|,
name|className
operator|=
literal|"org.apache.hello_world_soap_http.types.GreetMe"
argument_list|)
annotation|@
name|ResponseWrapper
argument_list|(
name|localName
operator|=
literal|"greetMeResponse"
argument_list|,
name|targetNamespace
operator|=
literal|"http://apache.org/hello_world_soap_http/types"
argument_list|,
name|className
operator|=
literal|"org.apache.hello_world_soap_http.types.GreetMeResponse"
argument_list|)
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|greetMe
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|requestType
parameter_list|)
block|{
return|return
literal|"Hello "
operator|+
name|requestType
return|;
block|}
specifier|private
name|Type
name|getFieldType
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
name|name
argument_list|)
operator|.
name|getGenericType
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCXF3611
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|foo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|JAXBSchemaInitializer
operator|.
name|isArray
argument_list|(
name|getFieldType
argument_list|(
literal|"arrayField"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|JAXBSchemaInitializer
operator|.
name|isArray
argument_list|(
name|getFieldType
argument_list|(
literal|"listField"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|JAXBSchemaInitializer
operator|.
name|isArray
argument_list|(
name|foo
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|JAXBSchemaInitializer
operator|.
name|isArray
argument_list|(
name|getFieldType
argument_list|(
literal|"mapField"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMarshallIntoDOM
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|str
init|=
operator|new
name|String
argument_list|(
literal|"Hello"
argument_list|)
decl_stmt|;
name|QName
name|inCorrectElName
init|=
operator|new
name|QName
argument_list|(
literal|"http://test_jaxb_marshall"
argument_list|,
literal|"requestType"
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
operator|new
name|MessagePartInfo
argument_list|(
name|inCorrectElName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|inCorrectElName
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|elNode
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|inCorrectElName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|inCorrectElName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|elNode
argument_list|)
expr_stmt|;
name|Node
name|node
decl_stmt|;
try|try
block|{
name|JAXBEncoderDecoder
operator|.
name|marshall
argument_list|(
name|context
operator|.
name|createMarshaller
argument_list|()
argument_list|,
literal|null
argument_list|,
name|part
argument_list|,
name|elNode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown a Fault"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|ex
parameter_list|)
block|{
comment|//expected - not a valid object
block|}
name|GreetMe
name|obj
init|=
operator|new
name|GreetMe
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setRequestType
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QName
name|elName
init|=
operator|new
name|QName
argument_list|(
name|wrapperAnnotation
operator|.
name|targetNamespace
argument_list|()
argument_list|,
name|wrapperAnnotation
operator|.
name|localName
argument_list|()
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|elName
argument_list|)
expr_stmt|;
name|JAXBEncoderDecoder
operator|.
name|marshall
argument_list|(
name|context
operator|.
name|createMarshaller
argument_list|()
argument_list|,
name|obj
argument_list|,
name|part
argument_list|,
name|elNode
argument_list|)
expr_stmt|;
name|node
operator|=
name|elNode
operator|.
name|getLastChild
argument_list|()
expr_stmt|;
comment|//The XML Tree Looks like
comment|//<GreetMe><requestType>Hello</requestType></GreetMe>
name|assertEquals
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|node
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|childNode
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|childNode
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|childNode
operator|=
name|childNode
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Node
operator|.
name|TEXT_NODE
argument_list|,
name|childNode
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|str
argument_list|,
name|childNode
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now test schema validation during marshaling
name|StringStruct
name|stringStruct
init|=
operator|new
name|StringStruct
argument_list|()
decl_stmt|;
comment|// Don't initialize one of the structure members.
comment|//stringStruct.setArg0("hello");
name|stringStruct
operator|.
name|setArg1
argument_list|(
literal|"world"
argument_list|)
expr_stmt|;
comment|// Marshal without the schema should work.
name|JAXBEncoderDecoder
operator|.
name|marshall
argument_list|(
name|context
operator|.
name|createMarshaller
argument_list|()
argument_list|,
name|stringStruct
argument_list|,
name|part
argument_list|,
name|elNode
argument_list|)
expr_stmt|;
try|try
block|{
name|Marshaller
name|m
init|=
name|context
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|m
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
comment|// Marshal with the schema should get an exception.
name|JAXBEncoderDecoder
operator|.
name|marshall
argument_list|(
name|m
argument_list|,
name|stringStruct
argument_list|,
name|part
argument_list|,
name|elNode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Marshal with schema should have thrown a Fault"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|ex
parameter_list|)
block|{
comment|//expected - not a valid object
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMarshallWithFormQualifiedElement
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectWithQualifiedElementElement
name|testObject
init|=
operator|new
name|ObjectWithQualifiedElementElement
argument_list|()
decl_stmt|;
name|testObject
operator|.
name|setString1
argument_list|(
literal|"twine"
argument_list|)
expr_stmt|;
name|testObject
operator|.
name|setString2
argument_list|(
literal|"cord"
argument_list|)
expr_stmt|;
name|QName
name|elName
init|=
operator|new
name|QName
argument_list|(
name|wrapperAnnotation
operator|.
name|targetNamespace
argument_list|()
argument_list|,
name|wrapperAnnotation
operator|.
name|localName
argument_list|()
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
operator|new
name|MessagePartInfo
argument_list|(
name|elName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|elName
argument_list|)
expr_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|XMLOutputFactory
name|opFactory
init|=
name|XMLOutputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|opFactory
operator|.
name|setProperty
argument_list|(
name|XMLOutputFactory
operator|.
name|IS_REPAIRING_NAMESPACES
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|XMLEventWriter
name|writer
init|=
name|opFactory
operator|.
name|createXMLEventWriter
argument_list|(
name|stringWriter
argument_list|)
decl_stmt|;
name|JAXBEncoderDecoder
operator|.
name|marshall
argument_list|(
name|context
operator|.
name|createMarshaller
argument_list|()
argument_list|,
name|testObject
argument_list|,
name|part
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|xmlResult
init|=
name|stringWriter
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// the following is a bit of a crock, but, to tell the truth, this test case most exists
comment|// so that it could be examined inside the debugger to see how JAXB works.
name|assertTrue
argument_list|(
name|xmlResult
operator|.
name|contains
argument_list|(
literal|":string2>cord</ns"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomNamespaces
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapper
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|put
argument_list|(
literal|"http://apache.org/hello_world_soap_http/types"
argument_list|,
literal|"Omnia"
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|put
argument_list|(
literal|"http://cxf.apache.org/jaxb_form"
argument_list|,
literal|"Gallia"
argument_list|)
expr_stmt|;
name|ObjectWithQualifiedElementElement
name|testObject
init|=
operator|new
name|ObjectWithQualifiedElementElement
argument_list|()
decl_stmt|;
name|testObject
operator|.
name|setString1
argument_list|(
literal|"twine"
argument_list|)
expr_stmt|;
name|testObject
operator|.
name|setString2
argument_list|(
literal|"cord"
argument_list|)
expr_stmt|;
name|QName
name|elName
init|=
operator|new
name|QName
argument_list|(
name|wrapperAnnotation
operator|.
name|targetNamespace
argument_list|()
argument_list|,
name|wrapperAnnotation
operator|.
name|localName
argument_list|()
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
operator|new
name|MessagePartInfo
argument_list|(
name|elName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|elName
argument_list|)
expr_stmt|;
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|XMLOutputFactory
name|opFactory
init|=
name|XMLOutputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|opFactory
operator|.
name|setProperty
argument_list|(
name|XMLOutputFactory
operator|.
name|IS_REPAIRING_NAMESPACES
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|XMLEventWriter
name|writer
init|=
name|opFactory
operator|.
name|createXMLEventWriter
argument_list|(
name|stringWriter
argument_list|)
decl_stmt|;
name|Marshaller
name|m
init|=
name|context
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|JAXBUtils
operator|.
name|setNamespaceMapper
argument_list|(
name|mapper
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|JAXBEncoderDecoder
operator|.
name|marshall
argument_list|(
name|m
argument_list|,
name|testObject
argument_list|,
name|part
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|xmlResult
init|=
name|stringWriter
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// the following is a bit of a crock, but, to tell the truth, this test case most exists
comment|// so that it could be examined inside the debugger to see how JAXB works.
name|assertTrue
argument_list|(
name|xmlResult
operator|.
name|contains
argument_list|(
literal|"Gallia:string2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMarshallIntoStaxStreamWriter
parameter_list|()
throws|throws
name|Exception
block|{
name|GreetMe
name|obj
init|=
operator|new
name|GreetMe
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setRequestType
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QName
name|elName
init|=
operator|new
name|QName
argument_list|(
name|wrapperAnnotation
operator|.
name|targetNamespace
argument_list|()
argument_list|,
name|wrapperAnnotation
operator|.
name|localName
argument_list|()
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
operator|new
name|MessagePartInfo
argument_list|(
name|elName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|elName
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|XMLOutputFactory
name|opFactory
init|=
name|XMLOutputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|opFactory
operator|.
name|setProperty
argument_list|(
name|XMLOutputFactory
operator|.
name|IS_REPAIRING_NAMESPACES
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|FixNamespacesXMLStreamWriter
name|writer
init|=
operator|new
name|FixNamespacesXMLStreamWriter
argument_list|(
name|opFactory
operator|.
name|createXMLStreamWriter
argument_list|(
name|baos
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|writer
operator|.
name|getMarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|Marshaller
name|m
init|=
name|context
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|JAXBEncoderDecoder
operator|.
name|marshall
argument_list|(
name|m
argument_list|,
name|obj
argument_list|,
name|part
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
argument_list|,
name|writer
operator|.
name|getMarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|XMLInputFactory
name|ipFactory
init|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLEventReader
name|reader
init|=
name|ipFactory
operator|.
name|createXMLEventReader
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|Unmarshaller
name|um
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|um
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|,
name|GreetMe
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|val
operator|instanceof
name|JAXBElement
argument_list|)
expr_stmt|;
name|val
operator|=
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|val
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|val
operator|instanceof
name|GreetMe
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|obj
operator|.
name|getRequestType
argument_list|()
argument_list|,
operator|(
operator|(
name|GreetMe
operator|)
name|val
operator|)
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMarshallIntoStaxEventWriter
parameter_list|()
throws|throws
name|Exception
block|{
name|GreetMe
name|obj
init|=
operator|new
name|GreetMe
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setRequestType
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QName
name|elName
init|=
operator|new
name|QName
argument_list|(
name|wrapperAnnotation
operator|.
name|targetNamespace
argument_list|()
argument_list|,
name|wrapperAnnotation
operator|.
name|localName
argument_list|()
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
operator|new
name|MessagePartInfo
argument_list|(
name|elName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|elName
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|XMLOutputFactory
name|opFactory
init|=
name|XMLOutputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|opFactory
operator|.
name|setProperty
argument_list|(
name|XMLOutputFactory
operator|.
name|IS_REPAIRING_NAMESPACES
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|FixNamespacesXMLEventWriter
name|writer
init|=
operator|new
name|FixNamespacesXMLEventWriter
argument_list|(
name|opFactory
operator|.
name|createXMLEventWriter
argument_list|(
name|baos
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|writer
operator|.
name|getMarshaller
argument_list|()
argument_list|)
expr_stmt|;
comment|//STARTDOCUMENT/ENDDOCUMENT is not required
comment|//writer.add(eFactory.createStartDocument("utf-8", "1.0"));
name|Marshaller
name|m
init|=
name|context
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|JAXBEncoderDecoder
operator|.
name|marshall
argument_list|(
name|m
argument_list|,
name|obj
argument_list|,
name|part
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
argument_list|,
name|writer
operator|.
name|getMarshaller
argument_list|()
argument_list|)
expr_stmt|;
comment|//writer.add(eFactory.createEndDocument());
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//System.out.println(baos.toString());
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|XMLInputFactory
name|ipFactory
init|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLEventReader
name|reader
init|=
name|ipFactory
operator|.
name|createXMLEventReader
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|Unmarshaller
name|um
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|um
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|,
name|GreetMe
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|val
operator|instanceof
name|JAXBElement
argument_list|)
expr_stmt|;
name|val
operator|=
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|val
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|val
operator|instanceof
name|GreetMe
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|obj
operator|.
name|getRequestType
argument_list|()
argument_list|,
operator|(
operator|(
name|GreetMe
operator|)
name|val
operator|)
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnmarshallFromStaxStreamReader
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|elName
init|=
operator|new
name|QName
argument_list|(
name|wrapperAnnotation
operator|.
name|targetNamespace
argument_list|()
argument_list|,
name|wrapperAnnotation
operator|.
name|localName
argument_list|()
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
operator|new
name|MessagePartInfo
argument_list|(
name|elName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"resources/GreetMeDocLiteralReq.xml"
argument_list|)
decl_stmt|;
name|XMLInputFactory
name|factory
init|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLStreamReader
name|reader
init|=
name|factory
operator|.
name|createXMLStreamReader
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|QName
index|[]
name|tags
init|=
block|{
name|SOAP_ENV
block|,
name|SOAP_BODY
block|}
decl_stmt|;
name|StaxStreamFilter
name|filter
init|=
operator|new
name|StaxStreamFilter
argument_list|(
name|tags
argument_list|)
decl_stmt|;
name|FixNamespacesXMLStreamReader
name|filteredReader
init|=
operator|new
name|FixNamespacesXMLStreamReader
argument_list|(
name|factory
operator|.
name|createFilteredReader
argument_list|(
name|reader
argument_list|,
name|filter
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|filteredReader
operator|.
name|getUnmarshaller
argument_list|()
argument_list|)
expr_stmt|;
comment|//Remove START_DOCUMENT& START_ELEMENT pertaining to Envelope and Body Tags.
name|part
operator|.
name|setTypeClass
argument_list|(
name|GreetMe
operator|.
name|class
argument_list|)
expr_stmt|;
name|Unmarshaller
name|um
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|JAXBEncoderDecoder
operator|.
name|unmarshall
argument_list|(
name|um
argument_list|,
name|filteredReader
argument_list|,
name|part
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|um
argument_list|,
name|filteredReader
operator|.
name|getUnmarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|val
operator|instanceof
name|GreetMe
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TestSOAPInputPMessage"
argument_list|,
operator|(
operator|(
name|GreetMe
operator|)
name|val
operator|)
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnmarshallFromStaxEventReader
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|elName
init|=
operator|new
name|QName
argument_list|(
name|wrapperAnnotation
operator|.
name|targetNamespace
argument_list|()
argument_list|,
name|wrapperAnnotation
operator|.
name|localName
argument_list|()
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
operator|new
name|MessagePartInfo
argument_list|(
name|elName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"resources/GreetMeDocLiteralReq.xml"
argument_list|)
decl_stmt|;
name|XMLInputFactory
name|factory
init|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|FixNamespacesXMLEventReader
name|reader
init|=
operator|new
name|FixNamespacesXMLEventReader
argument_list|(
name|factory
operator|.
name|createXMLEventReader
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|getUnmarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTypeClass
argument_list|(
name|GreetMe
operator|.
name|class
argument_list|)
expr_stmt|;
name|Unmarshaller
name|um
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|JAXBEncoderDecoder
operator|.
name|unmarshall
argument_list|(
name|um
argument_list|,
name|reader
argument_list|,
name|part
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|um
argument_list|,
name|reader
operator|.
name|getUnmarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|val
operator|instanceof
name|GreetMe
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TestSOAPInputPMessage"
argument_list|,
operator|(
operator|(
name|GreetMe
operator|)
name|val
operator|)
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMarshalRPCLit
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|elName
init|=
operator|new
name|QName
argument_list|(
literal|"http://test_jaxb_marshall"
argument_list|,
literal|"in"
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
operator|new
name|MessagePartInfo
argument_list|(
name|elName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|elName
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|elNode
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|elName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|elName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|JAXBEncoderDecoder
operator|.
name|marshall
argument_list|(
name|context
operator|.
name|createMarshaller
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
literal|"TestSOAPMessage"
argument_list|)
argument_list|,
name|part
argument_list|,
name|elNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TestSOAPMessage"
argument_list|,
name|elNode
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnMarshall
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Hello World Wsdl generated namespace
name|QName
name|elName
init|=
operator|new
name|QName
argument_list|(
name|wrapperAnnotation
operator|.
name|targetNamespace
argument_list|()
argument_list|,
name|wrapperAnnotation
operator|.
name|localName
argument_list|()
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
operator|new
name|MessagePartInfo
argument_list|(
name|elName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|elName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTypeClass
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
name|wrapperAnnotation
operator|.
name|className
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|getEmptyDocument
argument_list|()
decl_stmt|;
name|Element
name|elNode
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|elName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|elName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|Element
name|rtEl
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|elName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"requestType"
argument_list|)
decl_stmt|;
name|elNode
operator|.
name|appendChild
argument_list|(
name|rtEl
argument_list|)
expr_stmt|;
name|rtEl
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
literal|"Hello Test"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|JAXBEncoderDecoder
operator|.
name|unmarshall
argument_list|(
name|context
operator|.
name|createUnmarshaller
argument_list|()
argument_list|,
name|elNode
argument_list|,
name|part
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|obj
argument_list|)
expr_stmt|;
comment|//Add a Node and then test
name|assertEquals
argument_list|(
name|GreetMe
operator|.
name|class
argument_list|,
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello Test"
argument_list|,
operator|(
operator|(
name|GreetMe
operator|)
name|obj
operator|)
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTypeClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
literal|null
decl_stmt|;
try|try
block|{
name|JAXBEncoderDecoder
operator|.
name|unmarshall
argument_list|(
name|context
operator|.
name|createUnmarshaller
argument_list|()
argument_list|,
name|n
argument_list|,
name|part
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have received a Fault"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|pe
parameter_list|)
block|{
comment|//Expected Exception
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should have received a Fault, not: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
comment|// Now test schema validation during unmarshaling
name|elName
operator|=
operator|new
name|QName
argument_list|(
name|wrapperAnnotation
operator|.
name|targetNamespace
argument_list|()
argument_list|,
literal|"stringStruct"
argument_list|)
expr_stmt|;
comment|// Create an XML Tree of
comment|//<StringStruct><arg1>World</arg1></StringStruct>
comment|//         elNode = soapElFactory.createElement(elName);
comment|//         elNode.addNamespaceDeclaration("", elName.getNamespaceURI());
name|part
operator|=
operator|new
name|MessagePartInfo
argument_list|(
name|elName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|elName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTypeClass
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hello_world_soap_http.types.StringStruct"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|=
name|DOMUtils
operator|.
name|getEmptyDocument
argument_list|()
expr_stmt|;
name|elNode
operator|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|elName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|elName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|rtEl
operator|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|elName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"arg1"
argument_list|)
expr_stmt|;
name|elNode
operator|.
name|appendChild
argument_list|(
name|rtEl
argument_list|)
expr_stmt|;
name|rtEl
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
literal|"World"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should unmarshal without problems when no schema used.
name|obj
operator|=
name|JAXBEncoderDecoder
operator|.
name|unmarshall
argument_list|(
name|context
operator|.
name|createUnmarshaller
argument_list|()
argument_list|,
name|elNode
argument_list|,
name|part
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|StringStruct
operator|.
name|class
argument_list|,
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"World"
argument_list|,
operator|(
operator|(
name|StringStruct
operator|)
name|obj
operator|)
operator|.
name|getArg1
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// unmarshal with schema should raise exception.
name|Unmarshaller
name|m
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|m
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|obj
operator|=
name|JAXBEncoderDecoder
operator|.
name|unmarshall
argument_list|(
name|m
argument_list|,
name|elNode
argument_list|,
name|part
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown a Fault"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|ex
parameter_list|)
block|{
comment|// expected - schema validation should fail.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnmarshallWithoutClzInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|QName
name|elName
init|=
operator|new
name|QName
argument_list|(
name|wrapperAnnotation
operator|.
name|targetNamespace
argument_list|()
argument_list|,
name|wrapperAnnotation
operator|.
name|localName
argument_list|()
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|getEmptyDocument
argument_list|()
decl_stmt|;
name|Element
name|elNode
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|elName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|elName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|Element
name|rtEl
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|elName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"requestType"
argument_list|)
decl_stmt|;
name|elNode
operator|.
name|appendChild
argument_list|(
name|rtEl
argument_list|)
expr_stmt|;
name|rtEl
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
literal|"Hello Test"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|JAXBEncoderDecoder
operator|.
name|unmarshall
argument_list|(
name|context
operator|.
name|createUnmarshaller
argument_list|()
argument_list|,
name|elNode
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|GreetMe
operator|.
name|class
argument_list|,
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello Test"
argument_list|,
operator|(
operator|(
name|GreetMe
operator|)
name|obj
operator|)
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMarshallExceptionWithOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|getEmptyDocument
argument_list|()
decl_stmt|;
name|Element
name|elNode
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
literal|"http://cxf.apache.org"
argument_list|,
literal|"ExceptionRoot"
argument_list|)
decl_stmt|;
name|OrderException
name|exception
init|=
operator|new
name|OrderException
argument_list|(
literal|"Mymessage"
argument_list|)
decl_stmt|;
name|exception
operator|.
name|setAValue
argument_list|(
literal|"avalue"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|setDetail
argument_list|(
literal|"detail"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|setInfo1
argument_list|(
literal|"info1"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|setInfo2
argument_list|(
literal|"info2"
argument_list|)
expr_stmt|;
name|exception
operator|.
name|setIntVal
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|QName
name|elName
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org"
argument_list|,
literal|"OrderException"
argument_list|)
decl_stmt|;
name|ServiceInfo
name|serviceInfo
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|InterfaceInfo
name|interfaceInfo
init|=
operator|new
name|InterfaceInfo
argument_list|(
name|serviceInfo
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|OperationInfo
name|op
init|=
name|interfaceInfo
operator|.
name|addOperation
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org"
argument_list|,
literal|"operation"
argument_list|)
argument_list|)
decl_stmt|;
name|MessageInfo
name|message
init|=
operator|new
name|MessageInfo
argument_list|(
name|op
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
operator|new
name|MessagePartInfo
argument_list|(
name|elName
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|elName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTypeClass
argument_list|(
name|OrderException
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//just need a simple generic context to handle the exceptions internal primitives
name|JAXBContext
name|exceptionContext
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|,         }
argument_list|)
decl_stmt|;
name|JAXBEncoderDecoder
operator|.
name|marshallException
argument_list|(
name|exceptionContext
operator|.
name|createMarshaller
argument_list|()
argument_list|,
name|exception
argument_list|,
name|part
argument_list|,
name|elNode
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|StaxUtils
operator|.
name|writeTo
argument_list|(
name|elNode
argument_list|,
name|bout
argument_list|)
expr_stmt|;
name|int
name|a
init|=
name|bout
operator|.
name|toString
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"aValue"
argument_list|)
decl_stmt|;
name|int
name|b
init|=
name|bout
operator|.
name|toString
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"detail"
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|bout
operator|.
name|toString
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"info1"
argument_list|)
decl_stmt|;
name|int
name|d
init|=
name|bout
operator|.
name|toString
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"info2"
argument_list|)
decl_stmt|;
name|int
name|e
init|=
name|bout
operator|.
name|toString
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|"intVal"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|<
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|b
operator|<
name|c
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|<
name|d
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|<
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bout
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"transientValue"
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bout
operator|.
name|toString
argument_list|()
argument_list|,
name|bout
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"mappedField=\"MappedField\""
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMarshallWithoutQNameInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|GreetMe
name|obj
init|=
operator|new
name|GreetMe
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setRequestType
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|XMLOutputFactory
name|opFactory
init|=
name|XMLOutputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|opFactory
operator|.
name|setProperty
argument_list|(
name|XMLOutputFactory
operator|.
name|IS_REPAIRING_NAMESPACES
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|XMLEventWriter
name|writer
init|=
name|opFactory
operator|.
name|createXMLEventWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
comment|//STARTDOCUMENT/ENDDOCUMENT is not required
comment|//writer.add(eFactory.createStartDocument("utf-8", "1.0"));
name|JAXBEncoderDecoder
operator|.
name|marshall
argument_list|(
name|context
operator|.
name|createMarshaller
argument_list|()
argument_list|,
name|obj
argument_list|,
literal|null
argument_list|,
name|writer
argument_list|)
expr_stmt|;
comment|//writer.add(eFactory.createEndDocument());
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//System.out.println(baos.toString());
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|XMLInputFactory
name|ipFactory
init|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLEventReader
name|reader
init|=
name|ipFactory
operator|.
name|createXMLEventReader
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|Unmarshaller
name|um
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|um
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|,
name|GreetMe
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|val
operator|instanceof
name|JAXBElement
argument_list|)
expr_stmt|;
name|val
operator|=
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|val
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|val
operator|instanceof
name|GreetMe
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|obj
operator|.
name|getRequestType
argument_list|()
argument_list|,
operator|(
operator|(
name|GreetMe
operator|)
name|val
operator|)
operator|.
name|getRequestType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetClassFromType
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|testByte
init|=
name|getMethod
argument_list|(
literal|"testByte"
argument_list|)
decl_stmt|;
name|Type
index|[]
name|genericParameterTypes
init|=
name|testByte
operator|.
name|getGenericParameterTypes
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|paramTypes
init|=
name|testByte
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Type
name|t
range|:
name|genericParameterTypes
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|JAXBEncoderDecoder
operator|.
name|getClassFromType
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cls
operator|.
name|equals
argument_list|(
name|paramTypes
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|Method
name|testBase64Binary
init|=
name|getMethod
argument_list|(
literal|"testBase64Binary"
argument_list|)
decl_stmt|;
name|genericParameterTypes
operator|=
name|testBase64Binary
operator|.
name|getGenericParameterTypes
argument_list|()
expr_stmt|;
name|paramTypes
operator|=
name|testBase64Binary
operator|.
name|getParameterTypes
argument_list|()
expr_stmt|;
name|idx
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Type
name|t
range|:
name|genericParameterTypes
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|JAXBEncoderDecoder
operator|.
name|getClassFromType
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cls
operator|.
name|equals
argument_list|(
name|paramTypes
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultValueConverter
parameter_list|()
throws|throws
name|Exception
block|{
name|Base64WithDefaultValueType
name|testData
init|=
operator|(
operator|new
name|ObjectFactory
argument_list|()
operator|)
operator|.
name|createBase64WithDefaultValueType
argument_list|()
decl_stmt|;
name|byte
index|[]
name|checkValue
init|=
name|testData
operator|.
name|getAttributeWithDefaultValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|checkValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|RequestWrapper
argument_list|(
name|localName
operator|=
literal|"testByte"
argument_list|,
name|targetNamespace
operator|=
literal|"http://apache.org/type_test/doc"
argument_list|,
name|className
operator|=
literal|"org.apache.type_test.doc.TestByte"
argument_list|)
annotation|@
name|ResponseWrapper
argument_list|(
name|localName
operator|=
literal|"testByteResponse"
argument_list|,
name|targetNamespace
operator|=
literal|"http://apache.org/type_test/doc"
argument_list|,
name|className
operator|=
literal|"org.apache.type_test.doc.TestByteResponse"
argument_list|)
specifier|public
name|byte
name|testByte
parameter_list|(
name|byte
name|x
parameter_list|,
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Byte
argument_list|>
name|y
parameter_list|,
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
argument_list|<
name|java
operator|.
name|lang
operator|.
name|Byte
argument_list|>
name|z
parameter_list|)
block|{
return|return
literal|24
return|;
block|}
annotation|@
name|RequestWrapper
argument_list|(
name|localName
operator|=
literal|"testBase64Binary"
argument_list|,
name|targetNamespace
operator|=
literal|"http://apache.org/type_test/doc"
argument_list|,
name|className
operator|=
literal|"org.apache.type_test.doc.TestBase64Binary"
argument_list|)
annotation|@
name|ResponseWrapper
argument_list|(
name|localName
operator|=
literal|"testBase64BinaryResponse"
argument_list|,
name|targetNamespace
operator|=
literal|"http://apache.org/type_test/doc"
argument_list|,
name|className
operator|=
literal|"org.apache.type_test.doc.TestBase64BinaryResponse"
argument_list|)
specifier|public
name|byte
index|[]
name|testBase64Binary
parameter_list|(
name|byte
index|[]
name|x
parameter_list|,
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
name|y
parameter_list|,
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
argument_list|<
name|byte
index|[]
argument_list|>
name|z
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

