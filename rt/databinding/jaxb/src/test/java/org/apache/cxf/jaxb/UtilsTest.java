begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|UtilsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetMethod
parameter_list|()
block|{
for|for
control|(
name|Method
name|method
range|:
name|Utils
operator|.
name|getGetters
argument_list|(
name|MyException
operator|.
name|class
argument_list|,
name|XmlAccessType
operator|.
name|PUBLIC_MEMBER
argument_list|)
control|)
block|{
if|if
condition|(
literal|"toString"
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"toString should not be included in get methods list"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|MyException
extends|extends
name|Exception
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|from
decl_stmt|;
specifier|private
name|int
name|id
decl_stmt|;
specifier|private
name|String
name|summary
decl_stmt|;
specifier|public
name|MyException
parameter_list|()
block|{         }
comment|// mandatory constructor
specifier|public
name|MyException
parameter_list|(
name|String
name|from
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|message
parameter_list|,
name|String
name|summary
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|summary
operator|=
name|summary
expr_stmt|;
block|}
comment|// mandatory from setter
specifier|public
name|void
name|setFrom
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
block|}
comment|// mandatory id setter
specifier|public
name|void
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|// mandatory summary setter
specifier|public
name|void
name|setSummary
parameter_list|(
name|String
name|summary
parameter_list|)
block|{
name|this
operator|.
name|summary
operator|=
name|summary
expr_stmt|;
block|}
specifier|public
name|String
name|getFrom
parameter_list|()
block|{
return|return
name|from
return|;
block|}
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|String
name|getSummary
parameter_list|()
block|{
return|return
name|summary
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|from
operator|+
literal|","
operator|+
name|id
operator|+
literal|","
operator|+
name|getMessage
argument_list|()
operator|+
literal|","
operator|+
name|summary
return|;
block|}
block|}
block|}
end_class

end_unit

