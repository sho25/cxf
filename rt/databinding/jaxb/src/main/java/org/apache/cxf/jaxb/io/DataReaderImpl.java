begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xml
operator|.
name|bind
operator|.
name|api
operator|.
name|TypeReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBDataBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBEncoderDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_class
specifier|public
class|class
name|DataReaderImpl
parameter_list|<
name|T
parameter_list|>
extends|extends
name|JAXBDataBase
implements|implements
name|DataReader
argument_list|<
name|T
argument_list|>
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|contextClasses
decl_stmt|;
specifier|public
name|DataReaderImpl
parameter_list|(
name|JAXBContext
name|ctx
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|contextClasses
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|contextClasses
operator|=
name|contextClasses
expr_stmt|;
block|}
specifier|public
name|Object
name|read
parameter_list|(
name|T
name|input
parameter_list|)
block|{
return|return
name|read
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
name|Object
name|read
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|,
name|T
name|reader
parameter_list|)
block|{
name|boolean
name|honorJaxbAnnotation
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
operator|&&
name|part
operator|.
name|getProperty
argument_list|(
literal|"honor.jaxb.annotations"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|honorJaxbAnnotation
operator|=
operator|(
name|Boolean
operator|)
name|part
operator|.
name|getProperty
argument_list|(
literal|"honor.jaxb.annotations"
argument_list|)
expr_stmt|;
block|}
name|Annotation
index|[]
name|anns
init|=
name|getJAXBAnnotation
argument_list|(
name|part
argument_list|)
decl_stmt|;
if|if
condition|(
name|honorJaxbAnnotation
operator|&&
name|anns
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|//RpcLit will use the JAXB Bridge to unmarshall part message when it is
comment|//annotated with @XmlList,@XmlAttachmentRef,@XmlJavaTypeAdapter
comment|//TODO:Cache the JAXBRIContext
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
literal|null
argument_list|,
name|part
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|TypeReference
name|typeReference
init|=
operator|new
name|TypeReference
argument_list|(
name|qname
argument_list|,
name|part
operator|.
name|getTypeClass
argument_list|()
argument_list|,
name|anns
argument_list|)
decl_stmt|;
return|return
name|JAXBEncoderDecoder
operator|.
name|unmarshalWithBridge
argument_list|(
name|typeReference
argument_list|,
name|contextClasses
argument_list|,
name|reader
argument_list|,
name|getAttachmentUnmarshaller
argument_list|()
argument_list|)
return|;
block|}
return|return
name|JAXBEncoderDecoder
operator|.
name|unmarshall
argument_list|(
name|getJAXBContext
argument_list|()
argument_list|,
name|getSchema
argument_list|()
argument_list|,
name|reader
argument_list|,
name|part
argument_list|,
name|getAttachmentUnmarshaller
argument_list|()
argument_list|,
name|unwrapJAXBElement
argument_list|)
return|;
block|}
specifier|public
name|Object
name|read
parameter_list|(
name|QName
name|name
parameter_list|,
name|T
name|input
parameter_list|,
name|Class
name|type
parameter_list|)
block|{
return|return
name|JAXBEncoderDecoder
operator|.
name|unmarshall
argument_list|(
name|getJAXBContext
argument_list|()
argument_list|,
name|getSchema
argument_list|()
argument_list|,
name|input
argument_list|,
name|name
argument_list|,
name|type
argument_list|,
name|getAttachmentUnmarshaller
argument_list|()
argument_list|,
name|unwrapJAXBElement
argument_list|)
return|;
block|}
block|}
end_class

end_unit

