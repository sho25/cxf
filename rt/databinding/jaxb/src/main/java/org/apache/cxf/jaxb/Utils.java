begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|XmlAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|XmlJavaTypeAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|XmlJavaTypeAdapters
import|;
end_import

begin_comment
comment|/**  * JAXB reflection utilities.  */
end_comment

begin_class
specifier|final
class|class
name|Utils
block|{
specifier|private
name|Utils
parameter_list|()
block|{     }
specifier|static
name|XmlAccessType
name|getXmlAccessType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|XmlAccessorType
name|accessorType
init|=
name|cls
operator|.
name|getAnnotation
argument_list|(
name|XmlAccessorType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessorType
operator|==
literal|null
operator|&&
name|cls
operator|.
name|getPackage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|accessorType
operator|=
name|cls
operator|.
name|getPackage
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|XmlAccessorType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|accessorType
operator|!=
literal|null
condition|?
name|accessorType
operator|.
name|value
argument_list|()
else|:
name|XmlAccessType
operator|.
name|PUBLIC_MEMBER
return|;
block|}
specifier|static
name|Collection
argument_list|<
name|Field
argument_list|>
name|getFields
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|XmlAccessType
name|accessType
parameter_list|)
block|{
return|return
name|getFieldsInternal
argument_list|(
name|cls
argument_list|,
name|accessType
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Collection
argument_list|<
name|Field
argument_list|>
name|getFieldsInternal
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|XmlAccessType
name|accessType
parameter_list|)
block|{
name|Set
argument_list|<
name|Field
argument_list|>
name|fields
init|=
operator|new
name|HashSet
argument_list|<
name|Field
argument_list|>
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|superClass
init|=
name|cls
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superClass
operator|!=
literal|null
operator|&&
operator|!
name|superClass
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|&&
operator|!
name|superClass
operator|.
name|equals
argument_list|(
name|Throwable
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// process super class until java.lang.Object or java.lang.Throwable is not reached
name|fields
operator|.
name|addAll
argument_list|(
name|getFieldsInternal
argument_list|(
name|superClass
argument_list|,
name|accessType
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// process current class
for|for
control|(
name|Field
name|field
range|:
name|cls
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|JAXBContextInitializer
operator|.
name|isFieldAccepted
argument_list|(
name|field
argument_list|,
name|accessType
argument_list|)
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fields
return|;
block|}
specifier|private
specifier|static
name|Collection
argument_list|<
name|Method
argument_list|>
name|getMethods
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|XmlAccessType
name|accessType
parameter_list|,
name|boolean
name|acceptSetters
parameter_list|)
block|{
return|return
name|getMethodsInternal
argument_list|(
name|cls
argument_list|,
name|accessType
argument_list|,
name|acceptSetters
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Collection
argument_list|<
name|Method
argument_list|>
name|getMethodsInternal
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|XmlAccessType
name|accessType
parameter_list|,
name|boolean
name|acceptSetters
parameter_list|)
block|{
name|Set
argument_list|<
name|Method
argument_list|>
name|methods
init|=
operator|new
name|HashSet
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|superClass
init|=
name|cls
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superClass
operator|!=
literal|null
operator|&&
operator|!
name|superClass
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
operator|&&
operator|!
name|superClass
operator|.
name|equals
argument_list|(
name|Throwable
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// process super class until java.lang.Object or java.lang.Throwable is not reached
name|methods
operator|.
name|addAll
argument_list|(
name|getMethodsInternal
argument_list|(
name|superClass
argument_list|,
name|accessType
argument_list|,
name|acceptSetters
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// process current class
for|for
control|(
name|Method
name|method
range|:
name|cls
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|isMethodAccepted
argument_list|(
name|method
argument_list|,
name|accessType
argument_list|,
name|acceptSetters
argument_list|)
condition|)
block|{
name|methods
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|methods
return|;
block|}
specifier|static
name|Method
name|getMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|XmlAccessType
name|accessType
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|paramTypes
parameter_list|)
block|{
for|for
control|(
name|Method
name|m
range|:
name|getMethods
argument_list|(
name|cls
argument_list|,
name|accessType
argument_list|,
literal|true
argument_list|)
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getParameterTypes
argument_list|()
argument_list|,
name|paramTypes
argument_list|)
condition|)
block|{
return|return
name|m
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|static
name|Field
name|getField
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|XmlAccessType
name|accessType
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Field
name|f
range|:
name|getFields
argument_list|(
name|cls
argument_list|,
name|accessType
argument_list|)
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
return|return
name|f
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|static
name|Collection
argument_list|<
name|Method
argument_list|>
name|getGetters
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|XmlAccessType
name|accessType
parameter_list|)
block|{
return|return
name|getMethods
argument_list|(
name|cls
argument_list|,
name|accessType
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|static
name|boolean
name|isMethodAccepted
parameter_list|(
name|Method
name|method
parameter_list|,
name|XmlAccessType
name|accessType
parameter_list|,
name|boolean
name|acceptSetters
parameter_list|)
block|{
comment|// ignore bridge, static, @XmlTransient methods plus methods declared in Throwable
if|if
condition|(
name|method
operator|.
name|isBridge
argument_list|()
operator|||
name|Modifier
operator|.
name|isStatic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|||
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|XmlTransient
operator|.
name|class
argument_list|)
operator|||
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|equals
argument_list|(
name|Throwable
operator|.
name|class
argument_list|)
operator|||
literal|"getClass"
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Allow only public methods if PUBLIC_MEMBER access is requested
if|if
condition|(
name|accessType
operator|==
name|XmlAccessType
operator|.
name|PUBLIC_MEMBER
operator|&&
operator|!
name|Modifier
operator|.
name|isPublic
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isGetter
argument_list|(
name|method
argument_list|)
condition|)
block|{
comment|// does nothing
block|}
elseif|else
if|if
condition|(
name|isSetter
argument_list|(
name|method
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|acceptSetters
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// we accept only getters and setters
return|return
literal|false
return|;
block|}
comment|// let JAXB annotations decide if NONE or FIELD access is requested
if|if
condition|(
name|accessType
operator|==
name|XmlAccessType
operator|.
name|NONE
operator|||
name|accessType
operator|==
name|XmlAccessType
operator|.
name|FIELD
condition|)
block|{
return|return
name|JAXBContextInitializer
operator|.
name|checkJaxbAnnotation
argument_list|(
name|method
operator|.
name|getAnnotations
argument_list|()
argument_list|)
return|;
block|}
comment|// method accepted
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isGetter
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
init|=
name|m
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getReturnType
argument_list|()
operator|!=
name|Void
operator|.
name|class
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
specifier|final
name|int
name|index
init|=
name|getterIndex
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|setterName
init|=
literal|"set"
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|paramTypes
init|=
name|m
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|Method
name|setter
init|=
name|getDeclaredMethod
argument_list|(
name|declaringClass
argument_list|,
name|setterName
argument_list|,
name|paramTypes
argument_list|)
decl_stmt|;
if|if
condition|(
name|setter
operator|!=
literal|null
operator|&&
name|setter
operator|.
name|isAnnotationPresent
argument_list|(
name|XmlTransient
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isSetter
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
init|=
name|m
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
name|boolean
name|isVoidReturnType
init|=
name|m
operator|.
name|getReturnType
argument_list|()
operator|==
name|Void
operator|.
name|class
operator|||
name|m
operator|.
name|getReturnType
argument_list|()
operator|==
name|Void
operator|.
name|TYPE
decl_stmt|;
if|if
condition|(
name|isVoidReturnType
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
condition|)
block|{
name|String
name|getterName
init|=
literal|"get"
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|setterParamType
init|=
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Method
name|getter
init|=
name|getDeclaredMethod
argument_list|(
name|declaringClass
argument_list|,
name|getterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|getter
operator|!=
literal|null
operator|&&
name|getter
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|setterParamType
argument_list|)
operator|&&
operator|!
name|getter
operator|.
name|isAnnotationPresent
argument_list|(
name|XmlTransient
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|int
name|getterIndex
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
if|if
condition|(
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"is"
argument_list|)
condition|)
block|{
return|return
literal|2
return|;
block|}
if|if
condition|(
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
return|return
literal|3
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
specifier|static
name|Method
name|getDeclaredMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|paramTypes
parameter_list|)
block|{
try|try
block|{
return|return
name|cls
operator|.
name|getDeclaredMethod
argument_list|(
name|methodName
argument_list|,
name|paramTypes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getFieldType
parameter_list|(
name|Field
name|f
parameter_list|)
block|{
name|XmlJavaTypeAdapter
name|adapter
init|=
name|getFieldXJTA
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|adapterType
init|=
name|getTypeFromXmlAdapter
argument_list|(
name|adapter
argument_list|)
decl_stmt|;
return|return
name|adapterType
operator|!=
literal|null
condition|?
name|adapterType
else|:
name|f
operator|.
name|getType
argument_list|()
return|;
block|}
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getMethodReturnType
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
name|XmlJavaTypeAdapter
name|adapter
init|=
name|getMethodXJTA
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|adapterType
init|=
name|getTypeFromXmlAdapter
argument_list|(
name|adapter
argument_list|)
decl_stmt|;
return|return
name|adapterType
operator|!=
literal|null
condition|?
name|adapterType
else|:
name|m
operator|.
name|getReturnType
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|static
name|Object
name|getFieldValue
parameter_list|(
name|Field
name|f
parameter_list|,
name|Object
name|target
parameter_list|)
throws|throws
name|Exception
block|{
name|XmlJavaTypeAdapter
name|adapterAnnotation
init|=
name|getFieldXJTA
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|XmlAdapter
name|adapter
init|=
name|getXmlAdapter
argument_list|(
name|adapterAnnotation
argument_list|)
decl_stmt|;
return|return
name|adapter
operator|!=
literal|null
condition|?
name|adapter
operator|.
name|marshal
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|target
argument_list|)
argument_list|)
else|:
name|f
operator|.
name|get
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|static
name|Object
name|getMethodValue
parameter_list|(
name|Method
name|m
parameter_list|,
name|Object
name|target
parameter_list|)
throws|throws
name|Exception
block|{
name|XmlJavaTypeAdapter
name|adapterAnnotation
init|=
name|getMethodXJTA
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|XmlAdapter
name|adapter
init|=
name|getXmlAdapter
argument_list|(
name|adapterAnnotation
argument_list|)
decl_stmt|;
return|return
name|adapter
operator|!=
literal|null
condition|?
name|adapter
operator|.
name|marshal
argument_list|(
name|m
operator|.
name|invoke
argument_list|(
name|target
argument_list|)
argument_list|)
else|:
name|m
operator|.
name|invoke
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|static
name|void
name|setFieldValue
parameter_list|(
name|Field
name|f
parameter_list|,
name|Object
name|target
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|XmlJavaTypeAdapter
name|xjta
init|=
name|getFieldXJTA
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|XmlAdapter
name|adapter
init|=
name|getXmlAdapter
argument_list|(
name|xjta
argument_list|)
decl_stmt|;
name|f
operator|.
name|set
argument_list|(
name|target
argument_list|,
name|adapter
operator|!=
literal|null
condition|?
name|adapter
operator|.
name|unmarshal
argument_list|(
name|value
argument_list|)
else|:
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|static
name|void
name|setMethodValue
parameter_list|(
name|Method
name|getter
parameter_list|,
name|Method
name|setter
parameter_list|,
name|Object
name|target
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|XmlJavaTypeAdapter
name|xjta
init|=
name|getMethodXJTA
argument_list|(
name|getter
argument_list|)
decl_stmt|;
name|XmlAdapter
name|adapter
init|=
name|getXmlAdapter
argument_list|(
name|xjta
argument_list|)
decl_stmt|;
name|setter
operator|.
name|invoke
argument_list|(
name|target
argument_list|,
name|adapter
operator|!=
literal|null
condition|?
name|adapter
operator|.
name|unmarshal
argument_list|(
name|value
argument_list|)
else|:
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|static
name|XmlAdapter
name|getXmlAdapter
parameter_list|(
name|XmlJavaTypeAdapter
name|adapterAnnotation
parameter_list|)
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
return|return
name|adapterAnnotation
operator|!=
literal|null
condition|?
name|adapterAnnotation
operator|.
name|value
argument_list|()
operator|.
name|newInstance
argument_list|()
else|:
literal|null
return|;
block|}
specifier|static
name|XmlJavaTypeAdapter
name|getFieldXJTA
parameter_list|(
specifier|final
name|Field
name|f
parameter_list|)
block|{
name|XmlJavaTypeAdapter
name|adapter
init|=
name|f
operator|.
name|getAnnotation
argument_list|(
name|XmlJavaTypeAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|adapter
operator|==
literal|null
condition|)
block|{
name|adapter
operator|=
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|XmlJavaTypeAdapter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|adapter
operator|==
literal|null
condition|)
block|{
name|XmlJavaTypeAdapters
name|adapters
init|=
name|f
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|XmlJavaTypeAdapters
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|adapters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XmlJavaTypeAdapter
name|candidate
range|:
name|adapters
operator|.
name|value
argument_list|()
control|)
block|{
if|if
condition|(
name|candidate
operator|!=
literal|null
operator|&&
name|candidate
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|adapter
operator|=
name|candidate
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|adapter
return|;
block|}
specifier|static
name|XmlJavaTypeAdapter
name|getMethodXJTA
parameter_list|(
specifier|final
name|Method
name|m
parameter_list|)
block|{
name|XmlJavaTypeAdapter
name|adapter
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|XmlJavaTypeAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|adapter
operator|==
literal|null
condition|)
block|{
name|adapter
operator|=
name|m
operator|.
name|getReturnType
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|XmlJavaTypeAdapter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|adapter
operator|==
literal|null
condition|)
block|{
name|XmlJavaTypeAdapters
name|adapters
init|=
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|XmlJavaTypeAdapters
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|adapters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XmlJavaTypeAdapter
name|candidate
range|:
name|adapters
operator|.
name|value
argument_list|()
control|)
block|{
if|if
condition|(
name|candidate
operator|!=
literal|null
operator|&&
name|candidate
operator|.
name|type
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getGenericReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|adapter
operator|=
name|candidate
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|adapter
return|;
block|}
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getTypeFromXmlAdapter
parameter_list|(
name|XmlJavaTypeAdapter
name|xjta
parameter_list|)
block|{
if|if
condition|(
name|xjta
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|c2
init|=
name|xjta
operator|.
name|value
argument_list|()
decl_stmt|;
name|Type
name|sp
init|=
name|c2
operator|.
name|getGenericSuperclass
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|XmlAdapter
operator|.
name|class
operator|.
name|equals
argument_list|(
name|c2
argument_list|)
operator|&&
name|c2
operator|!=
literal|null
condition|)
block|{
name|sp
operator|=
name|c2
operator|.
name|getGenericSuperclass
argument_list|()
expr_stmt|;
name|c2
operator|=
name|c2
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sp
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
call|(
name|Class
argument_list|<
name|?
argument_list|>
call|)
argument_list|(
operator|(
name|ParameterizedType
operator|)
name|sp
argument_list|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

