begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Member
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessOrder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorOrder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|HexBinaryAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|attachment
operator|.
name|AttachmentMarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|attachment
operator|.
name|AttachmentUnmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLEventReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLEventWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|util
operator|.
name|StreamReaderDelegate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|SchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|DepthXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CNamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleTypeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|constants
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Utility functions for JAXB.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|JAXBEncoderDecoder
block|{
specifier|private
specifier|static
specifier|final
class|class
name|AddXSITypeStreamReader
extends|extends
name|StreamReaderDelegate
block|{
specifier|private
name|boolean
name|first
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|offset
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
name|QName
name|typeQName
decl_stmt|;
specifier|private
name|AddXSITypeStreamReader
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|QName
name|typeQName
parameter_list|)
block|{
name|super
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|this
operator|.
name|typeQName
operator|=
name|typeQName
expr_stmt|;
block|}
specifier|public
name|int
name|getAttributeCount
parameter_list|()
block|{
return|return
name|super
operator|.
name|getAttributeCount
argument_list|()
operator|+
name|offset
return|;
block|}
specifier|public
name|String
name|getAttributeLocalName
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|first
operator|&&
name|index
operator|==
literal|0
condition|)
block|{
return|return
literal|"type"
return|;
block|}
return|return
name|super
operator|.
name|getAttributeLocalName
argument_list|(
name|index
operator|-
name|offset
argument_list|)
return|;
block|}
specifier|public
name|QName
name|getAttributeName
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|first
operator|&&
name|index
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|Constants
operator|.
name|URI_2001_SCHEMA_XSI
argument_list|,
literal|"type"
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|getAttributeName
argument_list|(
name|index
operator|-
name|offset
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeNamespace
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|first
operator|&&
name|index
operator|==
literal|0
condition|)
block|{
return|return
name|Constants
operator|.
name|URI_2001_SCHEMA_XSI
return|;
block|}
return|return
name|super
operator|.
name|getAttributeNamespace
argument_list|(
name|index
operator|-
name|offset
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributePrefix
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|first
operator|&&
name|index
operator|==
literal|0
condition|)
block|{
return|return
literal|"xsi"
return|;
block|}
return|return
name|super
operator|.
name|getAttributePrefix
argument_list|(
name|index
operator|-
name|offset
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeType
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|first
operator|&&
name|index
operator|==
literal|0
condition|)
block|{
return|return
literal|"#TEXT"
return|;
block|}
return|return
name|super
operator|.
name|getAttributeType
argument_list|(
name|index
operator|-
name|offset
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|first
operator|&&
name|index
operator|==
literal|0
condition|)
block|{
name|String
name|pfx
init|=
name|this
operator|.
name|getNamespaceContext
argument_list|()
operator|.
name|getPrefix
argument_list|(
name|typeQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|pfx
argument_list|)
condition|)
block|{
return|return
name|typeQName
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
return|return
name|pfx
operator|+
literal|":"
operator|+
name|typeQName
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
return|return
name|super
operator|.
name|getAttributeValue
argument_list|(
name|index
operator|-
name|offset
argument_list|)
return|;
block|}
specifier|public
name|int
name|next
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
return|return
name|super
operator|.
name|next
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|String
name|namespaceUri
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
if|if
condition|(
name|first
operator|&&
name|Constants
operator|.
name|URI_2001_SCHEMA_XSI
operator|.
name|equals
argument_list|(
name|namespaceUri
argument_list|)
operator|&&
literal|"type"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|String
name|pfx
init|=
name|this
operator|.
name|getNamespaceContext
argument_list|()
operator|.
name|getPrefix
argument_list|(
name|typeQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|pfx
argument_list|)
condition|)
block|{
return|return
name|typeQName
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
return|return
name|pfx
operator|+
literal|":"
operator|+
name|typeQName
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
return|return
name|super
operator|.
name|getAttributeValue
argument_list|(
name|namespaceUri
argument_list|,
name|localName
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|JAXBEncoderDecoder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|JAXBEncoderDecoder
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|marshall
parameter_list|(
name|Marshaller
name|marshaller
parameter_list|,
name|Object
name|elValue
parameter_list|,
name|MessagePartInfo
name|part
parameter_list|,
name|Object
name|source
parameter_list|)
block|{
try|try
block|{
comment|// The Marshaller.JAXB_FRAGMENT will tell the Marshaller not to
comment|// generate the xml declaration.
name|marshaller
operator|.
name|setProperty
argument_list|(
name|Marshaller
operator|.
name|JAXB_FRAGMENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|marshaller
operator|.
name|setProperty
argument_list|(
name|Marshaller
operator|.
name|JAXB_FORMATTED_OUTPUT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|PropertyException
name|e
parameter_list|)
block|{
comment|// intentionally empty.
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|cls
operator|=
name|part
operator|.
name|getTypeClass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
name|cls
operator|=
literal|null
operator|!=
name|elValue
condition|?
name|elValue
operator|.
name|getClass
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cls
operator|!=
literal|null
operator|&&
name|cls
operator|.
name|isArray
argument_list|()
operator|&&
name|elValue
operator|instanceof
name|Collection
condition|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|col
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|elValue
decl_stmt|;
name|elValue
operator|=
name|col
operator|.
name|toArray
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|cls
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|col
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Object
name|mObj
init|=
name|elValue
decl_stmt|;
name|QName
name|elName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|elName
operator|=
name|part
operator|.
name|getConcreteName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|elName
condition|)
block|{
if|if
condition|(
name|part
operator|!=
literal|null
operator|&&
name|part
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|XmlSchemaElement
name|el
init|=
operator|(
name|XmlSchemaElement
operator|)
name|part
operator|.
name|getXmlSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|mObj
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|&&
name|el
operator|.
name|getSchemaType
argument_list|()
operator|instanceof
name|XmlSchemaSimpleType
operator|&&
operator|(
operator|(
name|XmlSchemaSimpleType
operator|)
name|el
operator|.
name|getSchemaType
argument_list|()
operator|)
operator|.
name|getContent
argument_list|()
operator|instanceof
name|XmlSchemaSimpleTypeList
condition|)
block|{
name|mObj
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|mObj
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|marshaller
argument_list|,
name|source
argument_list|,
name|newJAXBElement
argument_list|(
name|elName
argument_list|,
name|cls
argument_list|,
name|mObj
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|isUnwrapped
argument_list|()
operator|&&
operator|(
name|mObj
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|||
name|mObj
operator|instanceof
name|List
operator|)
operator|&&
name|el
operator|.
name|getMaxOccurs
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|writeArrayObject
argument_list|(
name|marshaller
argument_list|,
name|source
argument_list|,
name|elName
argument_list|,
name|mObj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeObject
argument_list|(
name|marshaller
argument_list|,
name|source
argument_list|,
name|newJAXBElement
argument_list|(
name|elName
argument_list|,
name|cls
argument_list|,
name|mObj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|byte
index|[]
operator|.
name|class
operator|==
name|cls
operator|&&
name|part
operator|.
name|getTypeQName
argument_list|()
operator|!=
literal|null
operator|&&
literal|"hexBinary"
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getTypeQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|mObj
operator|=
operator|new
name|HexBinaryAdapter
argument_list|()
operator|.
name|marshal
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|mObj
argument_list|)
expr_stmt|;
name|writeObject
argument_list|(
name|marshaller
argument_list|,
name|source
argument_list|,
name|newJAXBElement
argument_list|(
name|elName
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|mObj
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mObj
operator|instanceof
name|JAXBElement
condition|)
block|{
name|writeObject
argument_list|(
name|marshaller
argument_list|,
name|source
argument_list|,
name|mObj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|marshaller
operator|.
name|getSchema
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//force xsi:type so types can be validated instead of trying to
comment|//use the RPC/lit element names that aren't in the schema
name|writeObject
argument_list|(
name|marshaller
argument_list|,
name|source
argument_list|,
name|newJAXBElement
argument_list|(
name|elName
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|mObj
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeObject
argument_list|(
name|marshaller
argument_list|,
name|source
argument_list|,
name|newJAXBElement
argument_list|(
name|elName
argument_list|,
name|cls
argument_list|,
name|mObj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writeObject
argument_list|(
name|marshaller
argument_list|,
name|source
argument_list|,
name|mObj
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Fault
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|MarshalException
condition|)
block|{
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|MarshalException
name|marshalEx
init|=
operator|(
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|MarshalException
operator|)
name|ex
decl_stmt|;
name|Message
name|faultMessage
init|=
operator|new
name|Message
argument_list|(
literal|"MARSHAL_ERROR"
argument_list|,
name|LOG
argument_list|,
name|marshalEx
operator|.
name|getLinkedException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
name|faultMessage
argument_list|,
name|ex
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"MARSHAL_ERROR"
argument_list|,
name|LOG
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|private
specifier|static
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|newJAXBElement
parameter_list|(
name|QName
name|elName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Object
name|mObj
parameter_list|)
block|{
if|if
condition|(
name|mObj
operator|instanceof
name|JAXBElement
condition|)
block|{
return|return
operator|(
name|JAXBElement
operator|)
name|mObj
return|;
block|}
if|if
condition|(
name|cls
operator|==
literal|null
operator|&&
name|mObj
operator|!=
literal|null
condition|)
block|{
name|cls
operator|=
name|mObj
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|JAXBElement
argument_list|(
name|elName
argument_list|,
name|cls
argument_list|,
name|mObj
argument_list|)
return|;
block|}
comment|//TODO: cache the JAXBRIContext
specifier|public
specifier|static
name|void
name|marshalWithBridge
parameter_list|(
name|QName
name|qname
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|ctxClasses
parameter_list|,
name|Object
name|elValue
parameter_list|,
name|Object
name|source
parameter_list|,
name|AttachmentMarshaller
name|am
parameter_list|)
block|{
try|try
block|{
name|JAXBUtils
operator|.
name|BridgeWrapper
name|bridge
init|=
name|JAXBUtils
operator|.
name|createBridge
argument_list|(
name|ctxClasses
argument_list|,
name|qname
argument_list|,
name|cls
argument_list|,
name|anns
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|XMLStreamWriter
condition|)
block|{
name|bridge
operator|.
name|marshal
argument_list|(
name|elValue
argument_list|,
operator|(
name|XMLStreamWriter
operator|)
name|source
argument_list|,
name|am
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|OutputStream
condition|)
block|{
comment|//the namespace is missing when marshal the xsd:QName type
comment|//to the OutputStream directly
name|java
operator|.
name|io
operator|.
name|StringWriter
name|sw
init|=
operator|new
name|java
operator|.
name|io
operator|.
name|StringWriter
argument_list|()
decl_stmt|;
name|StreamResult
name|s1
init|=
operator|new
name|StreamResult
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|bridge
operator|.
name|marshal
argument_list|(
name|elValue
argument_list|,
name|s1
argument_list|)
expr_stmt|;
operator|(
operator|(
name|OutputStream
operator|)
name|source
operator|)
operator|.
name|write
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|Node
condition|)
block|{
name|bridge
operator|.
name|marshal
argument_list|(
name|elValue
argument_list|,
operator|(
name|Node
operator|)
name|source
argument_list|,
name|am
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNKNOWN_SOURCE"
argument_list|,
name|LOG
argument_list|,
name|source
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|MarshalException
condition|)
block|{
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|MarshalException
name|marshalEx
init|=
operator|(
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|MarshalException
operator|)
name|ex
decl_stmt|;
name|Message
name|faultMessage
init|=
operator|new
name|Message
argument_list|(
literal|"MARSHAL_ERROR"
argument_list|,
name|LOG
argument_list|,
name|marshalEx
operator|.
name|getLinkedException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
name|faultMessage
argument_list|,
name|ex
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"MARSHAL_ERROR"
argument_list|,
name|LOG
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|//  TODO: cache the JAXBRIContext
specifier|public
specifier|static
name|Object
name|unmarshalWithBridge
parameter_list|(
name|QName
name|qname
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|ctxClasses
parameter_list|,
name|Object
name|source
parameter_list|,
name|AttachmentUnmarshaller
name|am
parameter_list|)
block|{
try|try
block|{
name|JAXBUtils
operator|.
name|BridgeWrapper
name|bridge
init|=
name|JAXBUtils
operator|.
name|createBridge
argument_list|(
name|ctxClasses
argument_list|,
name|qname
argument_list|,
name|cls
argument_list|,
name|anns
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|XMLStreamReader
condition|)
block|{
comment|//DOMUtils.writeXml(StaxUtils.read((XMLStreamReader)source), System.out);
return|return
name|bridge
operator|.
name|unmarshal
argument_list|(
operator|(
name|XMLStreamReader
operator|)
name|source
argument_list|,
name|am
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|InputStream
condition|)
block|{
return|return
name|bridge
operator|.
name|unmarshal
argument_list|(
operator|(
name|InputStream
operator|)
name|source
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|Node
condition|)
block|{
return|return
name|bridge
operator|.
name|unmarshal
argument_list|(
operator|(
name|Node
operator|)
name|source
argument_list|,
name|am
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNKNOWN_SOURCE"
argument_list|,
name|LOG
argument_list|,
name|source
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|MarshalException
condition|)
block|{
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|MarshalException
name|marshalEx
init|=
operator|(
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|MarshalException
operator|)
name|ex
decl_stmt|;
name|Message
name|faultMessage
init|=
operator|new
name|Message
argument_list|(
literal|"MARSHAL_ERROR"
argument_list|,
name|LOG
argument_list|,
name|marshalEx
operator|.
name|getLinkedException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
name|faultMessage
argument_list|,
name|ex
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"MARSHAL_ERROR"
argument_list|,
name|LOG
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|marshallException
parameter_list|(
name|Marshaller
name|marshaller
parameter_list|,
name|Exception
name|elValue
parameter_list|,
name|MessagePartInfo
name|part
parameter_list|,
name|Object
name|source
parameter_list|)
block|{
name|XMLStreamWriter
name|writer
init|=
name|getStreamWriter
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|QName
name|qn
init|=
name|part
operator|.
name|getElementQName
argument_list|()
decl_stmt|;
try|try
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"ns1"
argument_list|,
name|qn
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|qn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|part
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
name|XmlAccessType
name|accessType
init|=
name|Utils
operator|.
name|getXmlAccessType
argument_list|(
name|cls
argument_list|)
decl_stmt|;
name|String
name|namespace
init|=
name|part
operator|.
name|getElementQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|attNs
init|=
name|namespace
decl_stmt|;
name|SchemaInfo
name|sch
init|=
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|getInterface
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getSchema
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|sch
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Schema associated with "
operator|+
name|namespace
operator|+
literal|" is null"
argument_list|)
expr_stmt|;
name|namespace
operator|=
literal|null
expr_stmt|;
name|attNs
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|sch
operator|.
name|isElementFormQualified
argument_list|()
condition|)
block|{
name|namespace
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sch
operator|.
name|isAttributeFormQualified
argument_list|()
condition|)
block|{
name|attNs
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Member
argument_list|>
name|combinedMembers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|Utils
operator|.
name|getFields
argument_list|(
name|cls
argument_list|,
name|accessType
argument_list|)
control|)
block|{
name|XmlAttribute
name|at
init|=
name|f
operator|.
name|getAnnotation
argument_list|(
name|XmlAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|==
literal|null
condition|)
block|{
name|combinedMembers
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QName
name|fname
init|=
operator|new
name|QName
argument_list|(
name|attNs
argument_list|,
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|at
operator|.
name|name
argument_list|()
argument_list|)
condition|?
name|f
operator|.
name|getName
argument_list|()
else|:
name|at
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|Utils
operator|.
name|getFieldValue
argument_list|(
name|f
argument_list|,
name|elValue
argument_list|)
decl_stmt|;
name|DocumentFragment
name|frag
init|=
name|DOMUtils
operator|.
name|getEmptyDocument
argument_list|()
operator|.
name|createDocumentFragment
argument_list|()
decl_stmt|;
name|writeObject
argument_list|(
name|marshaller
argument_list|,
name|frag
argument_list|,
name|newJAXBElement
argument_list|(
name|fname
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|o
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|attNs
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|attNs
argument_list|,
name|fname
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|DOMUtils
operator|.
name|getAllContent
argument_list|(
name|frag
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|fname
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|DOMUtils
operator|.
name|getAllContent
argument_list|(
name|frag
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Method
name|m
range|:
name|Utils
operator|.
name|getGetters
argument_list|(
name|cls
argument_list|,
name|accessType
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|m
operator|.
name|isAnnotationPresent
argument_list|(
name|XmlAttribute
operator|.
name|class
argument_list|)
condition|)
block|{
name|combinedMembers
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|idx
init|=
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
condition|?
literal|3
else|:
literal|2
decl_stmt|;
name|String
name|name
init|=
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|name
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|XmlAttribute
name|at
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|XmlAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|QName
name|mname
init|=
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|at
operator|.
name|name
argument_list|()
argument_list|)
condition|?
name|name
else|:
name|at
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|DocumentFragment
name|frag
init|=
name|DOMUtils
operator|.
name|getEmptyDocument
argument_list|()
operator|.
name|createDocumentFragment
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
name|Utils
operator|.
name|getMethodValue
argument_list|(
name|m
argument_list|,
name|elValue
argument_list|)
decl_stmt|;
name|writeObject
argument_list|(
name|marshaller
argument_list|,
name|frag
argument_list|,
name|newJAXBElement
argument_list|(
name|mname
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|o
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|attNs
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|attNs
argument_list|,
name|mname
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|DOMUtils
operator|.
name|getAllContent
argument_list|(
name|frag
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|mname
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|DOMUtils
operator|.
name|getAllContent
argument_list|(
name|frag
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|XmlAccessorOrder
name|xmlAccessorOrder
init|=
name|cls
operator|.
name|getAnnotation
argument_list|(
name|XmlAccessorOrder
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlAccessorOrder
operator|!=
literal|null
operator|&&
name|xmlAccessorOrder
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
name|XmlAccessOrder
operator|.
name|ALPHABETICAL
argument_list|)
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|combinedMembers
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Member
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Member
name|m1
parameter_list|,
name|Member
name|m2
parameter_list|)
block|{
return|return
name|m1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|XmlType
name|xmlType
init|=
name|cls
operator|.
name|getAnnotation
argument_list|(
name|XmlType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlType
operator|!=
literal|null
operator|&&
name|xmlType
operator|.
name|propOrder
argument_list|()
operator|.
name|length
operator|>
literal|1
operator|&&
operator|!
name|xmlType
operator|.
name|propOrder
argument_list|()
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|orderList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|xmlType
operator|.
name|propOrder
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|combinedMembers
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Member
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Member
name|m1
parameter_list|,
name|Member
name|m2
parameter_list|)
block|{
name|String
name|m1Name
init|=
name|getName
argument_list|(
name|m1
argument_list|)
decl_stmt|;
name|String
name|m2Name
init|=
name|getName
argument_list|(
name|m2
argument_list|)
decl_stmt|;
name|int
name|m1Index
init|=
name|orderList
operator|.
name|indexOf
argument_list|(
name|m1Name
argument_list|)
decl_stmt|;
name|int
name|m2Index
init|=
name|orderList
operator|.
name|indexOf
argument_list|(
name|m2Name
argument_list|)
decl_stmt|;
if|if
condition|(
name|m1Index
operator|!=
operator|-
literal|1
operator|&&
name|m2Index
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|m1Index
operator|-
name|m2Index
return|;
block|}
if|if
condition|(
name|m1Index
operator|==
operator|-
literal|1
operator|&&
name|m2Index
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|m1Index
operator|!=
operator|-
literal|1
operator|&&
name|m2Index
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Member
name|member
range|:
name|combinedMembers
control|)
block|{
if|if
condition|(
name|member
operator|instanceof
name|Field
condition|)
block|{
name|Field
name|f
init|=
operator|(
name|Field
operator|)
name|member
decl_stmt|;
name|QName
name|fname
init|=
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|JAXBSchemaInitializer
operator|.
name|isArray
argument_list|(
name|f
operator|.
name|getGenericType
argument_list|()
argument_list|)
condition|)
block|{
name|writeArrayObject
argument_list|(
name|marshaller
argument_list|,
name|writer
argument_list|,
name|fname
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|elValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|o
init|=
name|Utils
operator|.
name|getFieldValue
argument_list|(
name|f
argument_list|,
name|elValue
argument_list|)
decl_stmt|;
name|writeObject
argument_list|(
name|marshaller
argument_list|,
name|writer
argument_list|,
name|newJAXBElement
argument_list|(
name|fname
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// it's a Method
name|Method
name|m
init|=
operator|(
name|Method
operator|)
name|member
decl_stmt|;
name|int
name|idx
init|=
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
condition|?
literal|3
else|:
literal|2
decl_stmt|;
name|String
name|name
init|=
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|name
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QName
name|mname
init|=
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|JAXBSchemaInitializer
operator|.
name|isArray
argument_list|(
name|m
operator|.
name|getGenericReturnType
argument_list|()
argument_list|)
condition|)
block|{
name|writeArrayObject
argument_list|(
name|marshaller
argument_list|,
name|writer
argument_list|,
name|mname
argument_list|,
name|m
operator|.
name|invoke
argument_list|(
name|elValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|o
init|=
name|Utils
operator|.
name|getMethodValue
argument_list|(
name|m
argument_list|,
name|elValue
argument_list|)
decl_stmt|;
name|writeObject
argument_list|(
name|marshaller
argument_list|,
name|writer
argument_list|,
name|newJAXBElement
argument_list|(
name|mname
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"MARSHAL_ERROR"
argument_list|,
name|LOG
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|StaxUtils
operator|.
name|close
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getName
parameter_list|(
name|Member
name|m1
parameter_list|)
block|{
name|String
name|m1Name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|m1
operator|instanceof
name|Field
condition|)
block|{
name|m1Name
operator|=
operator|(
operator|(
name|Field
operator|)
name|m1
operator|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|int
name|idx
init|=
name|m1
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
condition|?
literal|3
else|:
literal|2
decl_stmt|;
name|String
name|name
init|=
name|m1
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|m1Name
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|m1Name
return|;
block|}
specifier|private
specifier|static
name|void
name|writeArrayObject
parameter_list|(
name|Marshaller
name|marshaller
parameter_list|,
name|Object
name|source
parameter_list|,
name|QName
name|mname
parameter_list|,
name|Object
name|mObj
parameter_list|)
throws|throws
name|Fault
throws|,
name|JAXBException
block|{
comment|// Have to handle this ourselves.... which really
comment|// sucks.... but what can we do?
if|if
condition|(
name|mObj
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Object
name|objArray
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mObj
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|l
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|mObj
decl_stmt|;
name|objArray
operator|=
name|l
operator|.
name|toArray
argument_list|()
expr_stmt|;
name|cls
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|objArray
operator|=
name|mObj
expr_stmt|;
name|cls
operator|=
name|objArray
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
block|}
name|int
name|len
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|objArray
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|len
condition|;
name|x
operator|++
control|)
block|{
name|Object
name|o
init|=
name|Array
operator|.
name|get
argument_list|(
name|objArray
argument_list|,
name|x
argument_list|)
decl_stmt|;
name|writeObject
argument_list|(
name|marshaller
argument_list|,
name|source
argument_list|,
name|newJAXBElement
argument_list|(
name|mname
argument_list|,
name|cls
operator|==
literal|null
condition|?
name|o
operator|.
name|getClass
argument_list|()
else|:
name|cls
argument_list|,
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Exception
name|unmarshallException
parameter_list|(
name|Unmarshaller
name|u
parameter_list|,
name|Object
name|source
parameter_list|,
name|MessagePartInfo
name|part
parameter_list|)
block|{
name|XMLStreamReader
name|reader
decl_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|XMLStreamReader
condition|)
block|{
name|reader
operator|=
operator|(
name|XMLStreamReader
operator|)
name|source
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|Element
condition|)
block|{
name|reader
operator|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
operator|(
name|Element
operator|)
name|source
argument_list|)
expr_stmt|;
try|try
block|{
comment|// advance into the node
name|reader
operator|.
name|nextTag
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNKNOWN_SOURCE"
argument_list|,
name|LOG
argument_list|,
name|source
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
name|QName
name|qn
init|=
name|part
operator|.
name|getElementQName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qn
operator|.
name|equals
argument_list|(
name|reader
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"ELEMENT_NAME_MISMATCH"
argument_list|,
name|LOG
argument_list|,
name|qn
argument_list|,
name|reader
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|part
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
name|Object
name|obj
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|cons
init|=
name|cls
operator|.
name|getConstructor
argument_list|()
decl_stmt|;
name|obj
operator|=
name|cons
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nse
parameter_list|)
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|cons
init|=
name|cls
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|obj
operator|=
name|cons
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|XmlAccessType
name|accessType
init|=
name|Utils
operator|.
name|getXmlAccessType
argument_list|(
name|cls
argument_list|)
decl_stmt|;
name|reader
operator|.
name|nextTag
argument_list|()
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLStreamConstants
operator|.
name|START_ELEMENT
condition|)
block|{
name|QName
name|q
init|=
name|reader
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|fieldName
init|=
name|q
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|Field
name|f
init|=
name|Utils
operator|.
name|getField
argument_list|(
name|cls
argument_list|,
name|accessType
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|Type
name|type
init|=
name|f
operator|.
name|getGenericType
argument_list|()
decl_stmt|;
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|JAXBSchemaInitializer
operator|.
name|isArray
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|compType
init|=
name|JAXBSchemaInitializer
operator|.
name|getArrayComponentType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|ret
init|=
name|unmarshallArray
argument_list|(
name|u
argument_list|,
name|reader
argument_list|,
name|q
argument_list|,
name|compType
argument_list|,
name|createList
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|ret
decl_stmt|;
if|if
condition|(
operator|!
name|isList
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|compType
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|o
operator|=
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
operator|.
name|newInstance
argument_list|(
name|compType
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|ret
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|Array
operator|.
name|set
argument_list|(
name|o
argument_list|,
name|x
argument_list|,
name|ret
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|o
operator|=
name|ret
operator|.
name|toArray
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|compType
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|f
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|o
init|=
name|getElementValue
argument_list|(
name|u
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|,
name|Utils
operator|.
name|getFieldType
argument_list|(
name|f
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Utils
operator|.
name|setFieldValue
argument_list|(
name|f
argument_list|,
name|obj
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|s
init|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|q
operator|.
name|getLocalPart
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|q
operator|.
name|getLocalPart
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Method
name|m
init|=
name|Utils
operator|.
name|getMethod
argument_list|(
name|cls
argument_list|,
name|accessType
argument_list|,
literal|"get"
operator|+
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|m
operator|=
name|Utils
operator|.
name|getMethod
argument_list|(
name|cls
argument_list|,
name|accessType
argument_list|,
literal|"is"
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|Type
name|type
init|=
name|m
operator|.
name|getGenericReturnType
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|JAXBSchemaInitializer
operator|.
name|isArray
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|compType
init|=
name|JAXBSchemaInitializer
operator|.
name|getArrayComponentType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|ret
init|=
name|unmarshallArray
argument_list|(
name|u
argument_list|,
name|reader
argument_list|,
name|q
argument_list|,
name|compType
argument_list|,
name|createList
argument_list|(
name|type
argument_list|)
argument_list|)
decl_stmt|;
name|o
operator|=
name|ret
expr_stmt|;
if|if
condition|(
operator|!
name|isList
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|compType
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|o
operator|=
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
operator|.
name|newInstance
argument_list|(
name|compType
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|ret
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|Array
operator|.
name|set
argument_list|(
name|o
argument_list|,
name|x
argument_list|,
name|ret
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|o
operator|=
name|ret
operator|.
name|toArray
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|compType
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|o
operator|=
name|getElementValue
argument_list|(
name|u
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|,
name|Utils
operator|.
name|getMethodReturnType
argument_list|(
name|m
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Method
name|m2
init|=
name|Utils
operator|.
name|getMethod
argument_list|(
name|cls
argument_list|,
name|accessType
argument_list|,
literal|"set"
operator|+
name|s
argument_list|,
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|m2
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|JAXBSchemaInitializer
operator|.
name|isArray
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|m2
operator|.
name|invoke
argument_list|(
name|obj
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Utils
operator|.
name|setMethodValue
argument_list|(
name|m
argument_list|,
name|m2
argument_list|,
name|obj
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Field
name|fn
init|=
name|ReflectionUtil
operator|.
name|getDeclaredField
argument_list|(
name|cls
argument_list|,
name|q
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fn
operator|!=
literal|null
condition|)
block|{
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|fn
argument_list|)
expr_stmt|;
name|fn
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|reader
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLStreamConstants
operator|.
name|END_ELEMENT
operator|&&
name|q
operator|.
name|equals
argument_list|(
name|reader
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|(
name|Exception
operator|)
name|obj
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"MARSHAL_ERROR"
argument_list|,
name|LOG
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeObject
parameter_list|(
name|Marshaller
name|u
parameter_list|,
name|Object
name|source
parameter_list|,
name|Object
name|mObj
parameter_list|)
throws|throws
name|Fault
throws|,
name|JAXBException
block|{
if|if
condition|(
name|source
operator|instanceof
name|XMLStreamWriter
condition|)
block|{
comment|// allows the XML Stream Writer to adjust it's behaviour based on the state of the unmarshaller
if|if
condition|(
name|source
operator|instanceof
name|MarshallerAwareXMLWriter
condition|)
block|{
operator|(
operator|(
name|MarshallerAwareXMLWriter
operator|)
name|source
operator|)
operator|.
name|setMarshaller
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
name|u
operator|.
name|marshal
argument_list|(
name|mObj
argument_list|,
operator|(
name|XMLStreamWriter
operator|)
name|source
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|OutputStream
condition|)
block|{
name|u
operator|.
name|marshal
argument_list|(
name|mObj
argument_list|,
operator|(
name|OutputStream
operator|)
name|source
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|Node
condition|)
block|{
name|u
operator|.
name|marshal
argument_list|(
name|mObj
argument_list|,
operator|(
name|Node
operator|)
name|source
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|XMLEventWriter
condition|)
block|{
comment|// allows the XML Event Writer to adjust it's behaviour based on the state of the unmarshaller
if|if
condition|(
name|source
operator|instanceof
name|MarshallerAwareXMLWriter
condition|)
block|{
operator|(
operator|(
name|MarshallerAwareXMLWriter
operator|)
name|source
operator|)
operator|.
name|setMarshaller
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
name|u
operator|.
name|marshal
argument_list|(
name|mObj
argument_list|,
operator|(
name|XMLEventWriter
operator|)
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNKNOWN_SOURCE"
argument_list|,
name|LOG
argument_list|,
name|source
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|XMLStreamWriter
name|getStreamWriter
parameter_list|(
name|Object
name|source
parameter_list|)
throws|throws
name|Fault
block|{
if|if
condition|(
name|source
operator|instanceof
name|XMLStreamWriter
condition|)
block|{
return|return
operator|(
name|XMLStreamWriter
operator|)
name|source
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|OutputStream
condition|)
block|{
return|return
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
operator|(
name|OutputStream
operator|)
name|source
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|Node
condition|)
block|{
return|return
operator|new
name|W3CDOMStreamWriter
argument_list|(
operator|(
name|Element
operator|)
name|source
argument_list|)
return|;
block|}
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNKNOWN_SOURCE"
argument_list|,
name|LOG
argument_list|,
name|source
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|void
name|marshallNullElement
parameter_list|(
name|Marshaller
name|marshaller
parameter_list|,
name|Object
name|source
parameter_list|,
name|MessagePartInfo
name|part
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|part
operator|!=
literal|null
condition|?
name|part
operator|.
name|getTypeClass
argument_list|()
else|:
literal|null
decl_stmt|;
try|try
block|{
name|writeObject
argument_list|(
name|marshaller
argument_list|,
name|source
argument_list|,
name|newJAXBElement
argument_list|(
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|,
name|clazz
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"MARSHAL_ERROR"
argument_list|,
name|LOG
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Object
name|unmarshall
parameter_list|(
name|Unmarshaller
name|u
parameter_list|,
name|Object
name|source
parameter_list|,
name|MessagePartInfo
name|part
parameter_list|,
name|boolean
name|unwrap
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|part
operator|!=
literal|null
condition|?
name|part
operator|.
name|getTypeClass
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|Exception
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
operator|&&
name|part
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getProperty
argument_list|(
name|JAXBDataBinding
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".CUSTOM_EXCEPTION"
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|unmarshallException
argument_list|(
name|u
argument_list|,
name|source
argument_list|,
name|part
argument_list|)
return|;
block|}
name|QName
name|elName
init|=
name|part
operator|!=
literal|null
condition|?
name|part
operator|.
name|getConcreteName
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|isArray
argument_list|()
operator|&&
name|part
operator|!=
literal|null
operator|&&
name|part
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|XmlSchemaElement
name|el
init|=
operator|(
name|XmlSchemaElement
operator|)
name|part
operator|.
name|getXmlSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|el
operator|.
name|getSchemaType
argument_list|()
operator|instanceof
name|XmlSchemaSimpleType
operator|&&
operator|(
operator|(
name|XmlSchemaSimpleType
operator|)
name|el
operator|.
name|getSchemaType
argument_list|()
operator|)
operator|.
name|getContent
argument_list|()
operator|instanceof
name|XmlSchemaSimpleTypeList
condition|)
block|{
name|Object
name|obj
init|=
name|unmarshall
argument_list|(
name|u
argument_list|,
name|source
argument_list|,
name|elName
argument_list|,
literal|null
argument_list|,
name|unwrap
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isArray
argument_list|()
operator|&&
name|obj
operator|instanceof
name|List
condition|)
block|{
return|return
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|obj
operator|)
operator|.
name|toArray
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|,
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|obj
operator|)
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
name|obj
return|;
block|}
elseif|else
if|if
condition|(
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|isUnwrapped
argument_list|()
operator|&&
name|el
operator|.
name|getMaxOccurs
argument_list|()
operator|!=
literal|1
condition|)
block|{
comment|// must read ourselves....
name|List
argument_list|<
name|Object
argument_list|>
name|ret
init|=
name|unmarshallArray
argument_list|(
name|u
argument_list|,
name|source
argument_list|,
name|elName
argument_list|,
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|createList
argument_list|(
name|part
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|ret
decl_stmt|;
if|if
condition|(
operator|!
name|isList
argument_list|(
name|part
argument_list|)
condition|)
block|{
if|if
condition|(
name|isSet
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|o
operator|=
name|createSet
argument_list|(
name|part
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|.
name|getComponentType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|o
operator|=
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
operator|.
name|newInstance
argument_list|(
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|ret
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|Array
operator|.
name|set
argument_list|(
name|o
argument_list|,
name|x
argument_list|,
name|ret
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|o
operator|=
name|ret
operator|.
name|toArray
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|o
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|byte
index|[]
operator|.
name|class
operator|==
name|clazz
operator|&&
name|part
operator|!=
literal|null
operator|&&
name|part
operator|.
name|getTypeQName
argument_list|()
operator|!=
literal|null
operator|&&
literal|"hexBinary"
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getTypeQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|obj
init|=
operator|(
name|String
operator|)
name|unmarshall
argument_list|(
name|u
argument_list|,
name|source
argument_list|,
name|elName
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|unwrap
argument_list|)
decl_stmt|;
return|return
operator|new
name|HexBinaryAdapter
argument_list|()
operator|.
name|unmarshal
argument_list|(
name|obj
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|part
operator|!=
literal|null
operator|&&
name|u
operator|.
name|getSchema
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|part
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
operator|)
condition|)
block|{
comment|//Validating RPC/Lit, make sure we don't try a root element name thing
name|source
operator|=
name|updateSourceWithXSIType
argument_list|(
name|source
argument_list|,
name|part
operator|.
name|getTypeQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
name|o
init|=
name|unmarshall
argument_list|(
name|u
argument_list|,
name|source
argument_list|,
name|elName
argument_list|,
name|clazz
argument_list|,
name|unwrap
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|&&
name|isList
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|ret
init|=
name|createList
argument_list|(
name|part
argument_list|)
decl_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|o
operator|=
name|ret
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
specifier|private
specifier|static
name|Object
name|updateSourceWithXSIType
parameter_list|(
name|Object
name|source
parameter_list|,
specifier|final
name|QName
name|typeQName
parameter_list|)
block|{
if|if
condition|(
name|source
operator|instanceof
name|XMLStreamReader
operator|&&
name|typeQName
operator|!=
literal|null
condition|)
block|{
name|XMLStreamReader
name|reader
init|=
operator|(
name|XMLStreamReader
operator|)
name|source
decl_stmt|;
name|String
name|type
init|=
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|Constants
operator|.
name|URI_2001_SCHEMA_XSI
argument_list|,
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|source
operator|=
operator|new
name|AddXSITypeStreamReader
argument_list|(
name|reader
argument_list|,
name|typeQName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|source
return|;
block|}
specifier|private
specifier|static
name|Object
name|createSet
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|ret
parameter_list|)
block|{
name|Type
name|genericType
init|=
operator|(
name|Type
operator|)
name|part
operator|.
name|getProperty
argument_list|(
literal|"generic.type"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|tp2
init|=
call|(
name|Class
argument_list|<
name|?
argument_list|>
call|)
argument_list|(
operator|(
name|ParameterizedType
operator|)
name|genericType
argument_list|)
operator|.
name|getRawType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tp2
operator|.
name|isInterface
argument_list|()
condition|)
block|{
return|return
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|ret
argument_list|)
return|;
block|}
name|Collection
argument_list|<
name|Object
argument_list|>
name|c
decl_stmt|;
try|try
block|{
name|c
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|tp2
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|c
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|c
operator|.
name|addAll
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isSet
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{
if|if
condition|(
name|part
operator|.
name|getTypeClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|part
operator|.
name|getTypeClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
comment|//&& Collection.class.isAssignableFrom(part.getTypeClass())) {
comment|// it's List Para
comment|//
name|Type
name|genericType
init|=
operator|(
name|Type
operator|)
name|part
operator|.
name|getProperty
argument_list|(
literal|"generic.type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|genericType
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|Type
name|tp2
init|=
operator|(
operator|(
name|ParameterizedType
operator|)
name|genericType
operator|)
operator|.
name|getRawType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tp2
operator|instanceof
name|Class
condition|)
block|{
return|return
name|Set
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|tp2
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|createList
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{
name|Type
name|genericType
init|=
operator|(
name|Type
operator|)
name|part
operator|.
name|getProperty
argument_list|(
literal|"generic.type"
argument_list|)
decl_stmt|;
return|return
name|createList
argument_list|(
name|genericType
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|createList
parameter_list|(
name|Type
name|genericType
parameter_list|)
block|{
if|if
condition|(
name|genericType
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|Type
name|tp2
init|=
operator|(
operator|(
name|ParameterizedType
operator|)
name|genericType
operator|)
operator|.
name|getRawType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tp2
operator|instanceof
name|Class
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|tp2
decl_stmt|;
if|if
condition|(
operator|!
name|cls
operator|.
name|isInterface
argument_list|()
operator|&&
name|List
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|cls
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|cls
operator|.
name|newInstance
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore, just return an ArrayList
block|}
block|}
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isList
parameter_list|(
name|Type
name|cls
parameter_list|)
block|{
return|return
name|cls
operator|instanceof
name|ParameterizedType
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isList
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{
if|if
condition|(
name|part
operator|.
name|getTypeClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|part
operator|.
name|getTypeClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
comment|//&& Collection.class.isAssignableFrom(part.getTypeClass())) {
comment|// it's List Para
comment|//
name|Type
name|genericType
init|=
operator|(
name|Type
operator|)
name|part
operator|.
name|getProperty
argument_list|(
literal|"generic.type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|genericType
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|Type
name|tp2
init|=
operator|(
operator|(
name|ParameterizedType
operator|)
name|genericType
operator|)
operator|.
name|getRawType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tp2
operator|instanceof
name|Class
condition|)
block|{
return|return
name|List
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|tp2
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|Object
name|doUnmarshal
parameter_list|(
specifier|final
name|Unmarshaller
name|u
parameter_list|,
specifier|final
name|Object
name|source
parameter_list|,
specifier|final
name|QName
name|elName
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|boolean
name|unwrap
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|obj
init|=
literal|null
decl_stmt|;
name|boolean
name|unmarshalWithClass
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
operator|(
operator|!
name|clazz
operator|.
name|isPrimitive
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|isEnum
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|equals
argument_list|(
name|Calendar
operator|.
name|class
argument_list|)
operator|&&
operator|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|||
name|Modifier
operator|.
name|isInterface
argument_list|(
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
block|{
name|unmarshalWithClass
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
operator|(
literal|"javax.xml.datatype.XMLGregorianCalendar"
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"javax.xml.datatype.Duration"
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|// special treat two jaxb defined built-in abstract types
name|unmarshalWithClass
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|source
operator|instanceof
name|Node
condition|)
block|{
name|obj
operator|=
name|unmarshalWithClass
condition|?
name|u
operator|.
name|unmarshal
argument_list|(
operator|(
name|Node
operator|)
name|source
argument_list|,
name|clazz
argument_list|)
else|:
name|u
operator|.
name|unmarshal
argument_list|(
operator|(
name|Node
operator|)
name|source
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|DepthXMLStreamReader
condition|)
block|{
comment|// JAXB optimizes a ton of stuff depending on the StreamReader impl. Thus,
comment|// we REALLY want to pass the original reader in.   This is OK with JAXB
comment|// as it doesn't read beyond the end so the DepthXMLStreamReader state
comment|// would be OK when it returns.   The main winner is FastInfoset where parsing
comment|// a testcase I have goes from about 300/sec to well over 1000.
name|DepthXMLStreamReader
name|dr
init|=
operator|(
name|DepthXMLStreamReader
operator|)
name|source
decl_stmt|;
name|XMLStreamReader
name|reader
init|=
name|dr
operator|.
name|getReader
argument_list|()
decl_stmt|;
comment|// allows the XML Stream Reader to adjust it's behaviour based on the state of the unmarshaller
if|if
condition|(
name|reader
operator|instanceof
name|UnmarshallerAwareXMLReader
condition|)
block|{
operator|(
operator|(
name|UnmarshallerAwareXMLReader
operator|)
name|reader
operator|)
operator|.
name|setUnmarshaller
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|u
operator|.
name|getSchema
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//validating, but we may need more namespaces
name|reader
operator|=
name|findExtraNamespaces
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|obj
operator|=
name|unmarshalWithClass
condition|?
name|u
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|,
name|clazz
argument_list|)
else|:
name|u
operator|.
name|unmarshal
argument_list|(
name|dr
operator|.
name|getReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|XMLStreamReader
condition|)
block|{
name|XMLStreamReader
name|reader
init|=
operator|(
name|XMLStreamReader
operator|)
name|source
decl_stmt|;
comment|// allows the XML Stream Reader to adjust it's behaviour based on the state of the unmarshaller
if|if
condition|(
name|reader
operator|instanceof
name|UnmarshallerAwareXMLReader
condition|)
block|{
operator|(
operator|(
name|UnmarshallerAwareXMLReader
operator|)
name|reader
operator|)
operator|.
name|setUnmarshaller
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|u
operator|.
name|getSchema
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//validating, but we may need more namespaces
name|reader
operator|=
name|findExtraNamespaces
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|obj
operator|=
name|unmarshalWithClass
condition|?
name|u
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|,
name|clazz
argument_list|)
else|:
name|u
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|XMLEventReader
condition|)
block|{
comment|// allows the XML Event Reader to adjust it's behaviour based on the state of the unmarshaller
if|if
condition|(
name|source
operator|instanceof
name|UnmarshallerAwareXMLReader
condition|)
block|{
operator|(
operator|(
name|UnmarshallerAwareXMLReader
operator|)
name|source
operator|)
operator|.
name|setUnmarshaller
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
name|obj
operator|=
name|unmarshalWithClass
condition|?
name|u
operator|.
name|unmarshal
argument_list|(
operator|(
name|XMLEventReader
operator|)
name|source
argument_list|,
name|clazz
argument_list|)
else|:
name|u
operator|.
name|unmarshal
argument_list|(
operator|(
name|XMLEventReader
operator|)
name|source
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNKNOWN_SOURCE"
argument_list|,
name|LOG
argument_list|,
literal|"null"
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNKNOWN_SOURCE"
argument_list|,
name|LOG
argument_list|,
name|source
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|unwrap
condition|?
name|getElementValue
argument_list|(
name|obj
argument_list|)
else|:
name|obj
return|;
block|}
specifier|public
specifier|static
name|Object
name|unmarshall
parameter_list|(
specifier|final
name|Unmarshaller
name|u
parameter_list|,
specifier|final
name|Object
name|source
parameter_list|,
specifier|final
name|QName
name|elName
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|boolean
name|unwrap
parameter_list|)
block|{
try|try
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|doUnmarshal
argument_list|(
name|u
argument_list|,
name|source
argument_list|,
name|elName
argument_list|,
name|clazz
argument_list|,
name|unwrap
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|e
parameter_list|)
block|{
name|Exception
name|ex
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|Fault
condition|)
block|{
throw|throw
operator|(
name|Fault
operator|)
name|ex
throw|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|UnmarshalException
condition|)
block|{
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|UnmarshalException
name|unmarshalEx
init|=
operator|(
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|UnmarshalException
operator|)
name|ex
decl_stmt|;
if|if
condition|(
name|unmarshalEx
operator|.
name|getLinkedException
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNMARSHAL_ERROR"
argument_list|,
name|LOG
argument_list|,
name|unmarshalEx
operator|.
name|getLinkedException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNMARSHAL_ERROR"
argument_list|,
name|LOG
argument_list|,
name|unmarshalEx
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNMARSHAL_ERROR"
argument_list|,
name|LOG
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|XMLStreamReader
name|findExtraNamespaces
parameter_list|(
name|XMLStreamReader
name|source
parameter_list|)
block|{
comment|//due to a deficiency in the Stax API, there isn't a way to get all
comment|//the namespace prefixes that are "valid" at this point.  Thus, JAXB
comment|//cannot set all the prefixes into the validator (which also doesn't allow
comment|//setting a NSContext, just allows declaring of prefixes) so resolving
comment|//prefixes and such will fail if they were declared on any of the parent
comment|//elements.
comment|//
comment|//We'll use some reflection to grab the known namespaces from woodstox
comment|//or the xerces parser and fake extra namespace decls on the root elements.
comment|//slight performance penalty, but there already is a penalty if you are validating
comment|//anyway.
name|NamespaceContext
name|c
init|=
name|source
operator|.
name|getNamespaceContext
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|c
operator|instanceof
name|W3CNamespaceContext
condition|)
block|{
name|Element
name|element
init|=
operator|(
operator|(
name|W3CNamespaceContext
operator|)
name|c
operator|)
operator|.
name|getElement
argument_list|()
decl_stmt|;
while|while
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
name|NamedNodeMap
name|namedNodeMap
init|=
name|element
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|namedNodeMap
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Attr
name|attr
init|=
operator|(
name|Attr
operator|)
name|namedNodeMap
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|.
name|getPrefix
argument_list|()
operator|!=
literal|null
operator|&&
literal|"xmlns"
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
name|nsMap
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|element
operator|=
operator|(
name|Element
operator|)
name|element
operator|.
name|getParentNode
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
comment|//Woodstox version
name|c
operator|=
operator|(
name|NamespaceContext
operator|)
name|c
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"createNonTransientNsContext"
argument_list|,
name|Location
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
name|c
argument_list|,
operator|new
name|Object
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
name|Field
name|f
init|=
name|ReflectionUtil
operator|.
name|getDeclaredField
argument_list|(
name|c
operator|.
name|getClass
argument_list|()
argument_list|,
literal|"mNamespaces"
argument_list|)
decl_stmt|;
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|String
index|[]
name|ns
init|=
operator|(
name|String
index|[]
operator|)
name|f
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|ns
operator|.
name|length
condition|;
name|x
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|ns
index|[
name|x
index|]
operator|==
literal|null
condition|)
block|{
name|nsMap
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|ns
index|[
name|x
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nsMap
operator|.
name|put
argument_list|(
name|ns
index|[
name|x
index|]
argument_list|,
name|ns
index|[
name|x
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//internal JDK/xerces version
try|try
block|{
name|Field
name|f
init|=
name|ReflectionUtil
operator|.
name|getDeclaredField
argument_list|(
name|c
operator|.
name|getClass
argument_list|()
argument_list|,
literal|"fNamespaceContext"
argument_list|)
decl_stmt|;
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|Object
name|c2
init|=
name|f
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|enm
init|=
operator|(
name|Enumeration
argument_list|<
name|?
argument_list|>
operator|)
name|c2
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getAllPrefixes"
argument_list|)
operator|.
name|invoke
argument_list|(
name|c2
argument_list|)
decl_stmt|;
while|while
condition|(
name|enm
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|enm
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|nsMap
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|c
operator|.
name|getNamespaceURI
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nsMap
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|c
operator|.
name|getNamespaceURI
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t2
parameter_list|)
block|{
comment|//ignore
block|}
block|}
if|if
condition|(
operator|!
name|nsMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|source
operator|.
name|getNamespaceCount
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|String
name|pfx
init|=
name|source
operator|.
name|getNamespacePrefix
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|pfx
operator|==
literal|null
condition|)
block|{
name|nsMap
operator|.
name|remove
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nsMap
operator|.
name|remove
argument_list|(
name|pfx
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|nsMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
index|[]
name|namespaces
init|=
name|nsMap
operator|.
name|entrySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Map
operator|.
name|Entry
index|[
name|nsMap
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
comment|//OK. we have extra namespaces.  We'll need to wrapper the reader
comment|//with a new one that will fake extra namespace events
name|source
operator|=
operator|new
name|DepthXMLStreamReader
argument_list|(
name|source
argument_list|)
block|{
specifier|public
name|int
name|getNamespaceCount
parameter_list|()
block|{
if|if
condition|(
name|getDepth
argument_list|()
operator|==
literal|0
operator|&&
name|isStartElement
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|getNamespaceCount
argument_list|()
operator|+
name|nsMap
operator|.
name|size
argument_list|()
return|;
block|}
return|return
name|super
operator|.
name|getNamespaceCount
argument_list|()
return|;
block|}
specifier|public
name|String
name|getNamespacePrefix
parameter_list|(
name|int
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|getDepth
argument_list|()
operator|==
literal|0
operator|&&
name|isStartElement
argument_list|()
condition|)
block|{
name|int
name|i
init|=
name|super
operator|.
name|getNamespaceCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|arg0
operator|>=
name|i
condition|)
block|{
name|arg0
operator|-=
name|i
expr_stmt|;
return|return
name|namespaces
index|[
name|arg0
index|]
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
name|super
operator|.
name|getNamespacePrefix
argument_list|(
name|arg0
argument_list|)
return|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|int
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|getDepth
argument_list|()
operator|==
literal|0
operator|&&
name|isStartElement
argument_list|()
condition|)
block|{
name|int
name|i
init|=
name|super
operator|.
name|getNamespaceCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|arg0
operator|>=
name|i
condition|)
block|{
name|arg0
operator|-=
name|i
expr_stmt|;
return|return
name|namespaces
index|[
name|arg0
index|]
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
name|super
operator|.
name|getNamespaceURI
argument_list|(
name|arg0
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
block|}
return|return
name|source
return|;
block|}
specifier|public
specifier|static
name|Object
name|getElementValue
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|obj
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|JAXBElement
condition|)
block|{
return|return
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|obj
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
name|obj
return|;
block|}
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getClassFromType
parameter_list|(
name|Type
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|Class
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|t
return|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|GenericArrayType
name|g
init|=
operator|(
name|GenericArrayType
operator|)
name|t
decl_stmt|;
return|return
name|Array
operator|.
name|newInstance
argument_list|(
name|getClassFromType
argument_list|(
name|g
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|p
init|=
operator|(
name|ParameterizedType
operator|)
name|t
decl_stmt|;
return|return
name|getClassFromType
argument_list|(
name|p
operator|.
name|getRawType
argument_list|()
argument_list|)
return|;
block|}
comment|// TypeVariable and WildCardType are not handled as it is unlikely such
comment|// Types will
comment|// JAXB Code Generated.
assert|assert
literal|false
assert|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot get Class object from unknown Type"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|unmarshallArray
parameter_list|(
name|Unmarshaller
name|u
parameter_list|,
name|Object
name|source
parameter_list|,
name|QName
name|elName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|ret
parameter_list|)
block|{
try|try
block|{
name|XMLStreamReader
name|reader
decl_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|XMLStreamReader
condition|)
block|{
name|reader
operator|=
operator|(
name|XMLStreamReader
operator|)
name|source
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|Element
condition|)
block|{
name|reader
operator|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
operator|(
name|Element
operator|)
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNKNOWN_SOURCE"
argument_list|,
name|LOG
argument_list|,
name|source
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
while|while
condition|(
name|reader
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|elName
argument_list|)
condition|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|type
init|=
name|u
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|type
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|reader
operator|.
name|getEventType
argument_list|()
operator|!=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|&&
name|reader
operator|.
name|getEventType
argument_list|()
operator|!=
name|XMLStreamConstants
operator|.
name|END_ELEMENT
condition|)
block|{
name|reader
operator|.
name|nextTag
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Fault
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|UnmarshalException
condition|)
block|{
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|UnmarshalException
name|unmarshalEx
init|=
operator|(
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|UnmarshalException
operator|)
name|ex
decl_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNMARSHAL_ERROR"
argument_list|,
name|LOG
argument_list|,
name|unmarshalEx
operator|.
name|getLinkedException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNMARSHAL_ERROR"
argument_list|,
name|LOG
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

