begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|XmlAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|XmlJavaTypeAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionInvokationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|XmlSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|ServiceModelVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|SchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|utils
operator|.
name|NamespaceMap
import|;
end_import

begin_comment
comment|/**  * Walks the service model and sets up the element/type names.  */
end_comment

begin_class
class|class
name|JAXBSchemaInitializer
extends|extends
name|ServiceModelVisitor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|JAXBSchemaInitializer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SchemaCollection
name|schemas
decl_stmt|;
specifier|private
name|JAXBContextProxy
name|context
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|qualifiedSchemas
decl_stmt|;
specifier|public
name|JAXBSchemaInitializer
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|,
name|SchemaCollection
name|col
parameter_list|,
name|JAXBContext
name|context
parameter_list|,
name|boolean
name|q
parameter_list|)
block|{
name|super
argument_list|(
name|serviceInfo
argument_list|)
expr_stmt|;
name|schemas
operator|=
name|col
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|ReflectionInvokationHandler
operator|.
name|createProxyWrapper
argument_list|(
name|context
argument_list|,
name|JAXBContextProxy
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|qualifiedSchemas
operator|=
name|q
expr_stmt|;
block|}
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getArrayComponentType
parameter_list|(
name|Type
name|cls
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|instanceof
name|Class
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|Class
operator|)
name|cls
operator|)
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
operator|(
operator|(
name|Class
operator|)
name|cls
operator|)
operator|.
name|getComponentType
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|(
name|Class
operator|)
name|cls
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|cls
operator|instanceof
name|ParameterizedType
condition|)
block|{
for|for
control|(
name|Type
name|t2
range|:
operator|(
operator|(
name|ParameterizedType
operator|)
name|cls
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
control|)
block|{
return|return
name|getArrayComponentType
argument_list|(
name|t2
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|cls
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|GenericArrayType
name|gt
init|=
operator|(
name|GenericArrayType
operator|)
name|cls
decl_stmt|;
name|Class
name|ct
init|=
operator|(
name|Class
operator|)
name|gt
operator|.
name|getGenericComponentType
argument_list|()
decl_stmt|;
return|return
name|Array
operator|.
name|newInstance
argument_list|(
name|ct
argument_list|,
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|JAXBBeanInfo
name|getBeanInfo
parameter_list|(
name|Type
name|cls
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|instanceof
name|Class
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|Class
operator|)
name|cls
operator|)
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|getBeanInfo
argument_list|(
operator|(
operator|(
name|Class
operator|)
name|cls
operator|)
operator|.
name|getComponentType
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getBeanInfo
argument_list|(
operator|(
name|Class
operator|)
name|cls
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|cls
operator|instanceof
name|ParameterizedType
condition|)
block|{
for|for
control|(
name|Type
name|t2
range|:
operator|(
operator|(
name|ParameterizedType
operator|)
name|cls
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
control|)
block|{
return|return
name|getBeanInfo
argument_list|(
name|t2
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|cls
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|GenericArrayType
name|gt
init|=
operator|(
name|GenericArrayType
operator|)
name|cls
decl_stmt|;
name|Class
name|ct
init|=
operator|(
name|Class
operator|)
name|gt
operator|.
name|getGenericComponentType
argument_list|()
decl_stmt|;
name|ct
operator|=
name|Array
operator|.
name|newInstance
argument_list|(
name|ct
argument_list|,
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
expr_stmt|;
return|return
name|getBeanInfo
argument_list|(
name|ct
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|JAXBBeanInfo
name|getBeanInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|getBeanInfo
argument_list|(
name|context
argument_list|,
name|cls
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JAXBBeanInfo
name|getBeanInfo
parameter_list|(
name|JAXBContextProxy
name|context
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|Object
name|o
init|=
name|context
operator|.
name|getBeanInfo
argument_list|(
name|cls
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ReflectionInvokationHandler
operator|.
name|createProxyWrapper
argument_list|(
name|o
argument_list|,
name|JAXBBeanInfo
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|begin
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{
comment|// Check to see if the WSDL information has been filled in for us.
if|if
condition|(
name|part
operator|.
name|getTypeQName
argument_list|()
operator|!=
literal|null
operator|||
name|part
operator|.
name|getElementQName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|checkForExistence
argument_list|(
name|part
argument_list|)
expr_stmt|;
return|return;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|part
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|isFromWrapper
init|=
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|isUnwrapped
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFromWrapper
operator|&&
name|clazz
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|Byte
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|clazz
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
block|}
name|JAXBBeanInfo
name|beanInfo
init|=
name|getBeanInfo
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanInfo
operator|==
literal|null
condition|)
block|{
name|Annotation
index|[]
name|anns
init|=
operator|(
name|Annotation
index|[]
operator|)
name|part
operator|.
name|getProperty
argument_list|(
literal|"parameter.annotations"
argument_list|)
decl_stmt|;
name|XmlJavaTypeAdapter
name|jta
init|=
name|findFromTypeAdapter
argument_list|(
name|clazz
argument_list|,
name|anns
argument_list|)
decl_stmt|;
if|if
condition|(
name|jta
operator|!=
literal|null
condition|)
block|{
name|beanInfo
operator|=
name|findFromTypeAdapter
argument_list|(
name|jta
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|anns
operator|==
literal|null
condition|)
block|{
name|anns
operator|=
operator|new
name|Annotation
index|[]
block|{
name|jta
block|}
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Annotation
name|t
range|:
name|anns
control|)
block|{
if|if
condition|(
name|t
operator|==
name|jta
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|Annotation
name|tmp
index|[]
init|=
operator|new
name|Annotation
index|[
name|anns
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|anns
argument_list|,
literal|0
argument_list|,
name|tmp
argument_list|,
literal|0
argument_list|,
name|anns
operator|.
name|length
argument_list|)
expr_stmt|;
name|tmp
index|[
name|anns
operator|.
name|length
index|]
operator|=
name|jta
expr_stmt|;
name|anns
operator|=
name|tmp
expr_stmt|;
block|}
block|}
name|part
operator|.
name|setProperty
argument_list|(
literal|"parameter.annotations"
argument_list|,
name|anns
argument_list|)
expr_stmt|;
name|part
operator|.
name|setProperty
argument_list|(
literal|"honor.jaxb.annotations"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|beanInfo
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|Exception
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|QName
name|name
init|=
operator|(
name|QName
operator|)
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"elementName"
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|buildExceptionType
argument_list|(
name|part
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|boolean
name|isElement
init|=
name|beanInfo
operator|.
name|isElement
argument_list|()
operator|&&
operator|!
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"operation.force.types"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|hasType
init|=
operator|!
name|beanInfo
operator|.
name|getTypeNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|isElement
operator|&&
name|isFromWrapper
operator|&&
name|hasType
condition|)
block|{
comment|//if there is both a Global element and a global type, AND we are in a wrapper,
comment|//make sure we use the type instead of a ref to the element to
comment|//match the rules for wrapped/unwrapped
name|isElement
operator|=
literal|false
expr_stmt|;
block|}
name|part
operator|.
name|setElement
argument_list|(
name|isElement
argument_list|)
expr_stmt|;
if|if
condition|(
name|isElement
condition|)
block|{
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|beanInfo
operator|.
name|getElementNamespaceURI
argument_list|(
literal|null
argument_list|)
argument_list|,
name|beanInfo
operator|.
name|getElementLocalName
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|XmlSchemaElement
name|el
init|=
name|schemas
operator|.
name|getElementByQName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|el
operator|!=
literal|null
operator|&&
name|el
operator|.
name|getRefName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|setTypeQName
argument_list|(
name|el
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|part
operator|.
name|setElementQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|part
operator|.
name|setXmlSchema
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QName
name|typeName
init|=
name|getTypeName
argument_list|(
name|beanInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeName
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|setTypeQName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|typeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|XmlJavaTypeAdapter
name|findFromTypeAdapter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|)
block|{
name|JAXBBeanInfo
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|anns
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Annotation
name|a
range|:
name|anns
control|)
block|{
if|if
condition|(
name|XmlJavaTypeAdapter
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|a
operator|.
name|annotationType
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|=
name|findFromTypeAdapter
argument_list|(
operator|(
operator|(
name|XmlJavaTypeAdapter
operator|)
name|a
operator|)
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|XmlJavaTypeAdapter
operator|)
name|a
return|;
block|}
block|}
block|}
block|}
name|XmlJavaTypeAdapter
name|xjta
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|XmlJavaTypeAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|xjta
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|findFromTypeAdapter
argument_list|(
name|xjta
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|xjta
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|JAXBBeanInfo
name|findFromTypeAdapter
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|XmlAdapter
argument_list|>
name|aclass
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|c2
init|=
name|aclass
decl_stmt|;
name|Type
name|sp
init|=
name|c2
operator|.
name|getGenericSuperclass
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|XmlAdapter
operator|.
name|class
operator|.
name|equals
argument_list|(
name|c2
argument_list|)
operator|&&
name|c2
operator|!=
literal|null
condition|)
block|{
name|sp
operator|=
name|c2
operator|.
name|getGenericSuperclass
argument_list|()
expr_stmt|;
name|c2
operator|=
name|c2
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sp
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|Type
name|tp
init|=
operator|(
operator|(
name|ParameterizedType
operator|)
name|sp
operator|)
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|tp
operator|instanceof
name|Class
condition|)
block|{
return|return
name|getBeanInfo
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|tp
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|QName
name|getTypeName
parameter_list|(
name|JAXBBeanInfo
name|beanInfo
parameter_list|)
block|{
name|Iterator
argument_list|<
name|QName
argument_list|>
name|itr
init|=
name|beanInfo
operator|.
name|getTypeNames
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|itr
operator|.
name|next
argument_list|()
return|;
block|}
specifier|public
name|void
name|checkForExistence
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{
name|QName
name|qn
init|=
name|part
operator|.
name|getElementQName
argument_list|()
decl_stmt|;
if|if
condition|(
name|qn
operator|!=
literal|null
condition|)
block|{
name|XmlSchemaElement
name|el
init|=
name|schemas
operator|.
name|getElementByQName
argument_list|(
name|qn
argument_list|)
decl_stmt|;
if|if
condition|(
name|el
operator|==
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|part
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|isFromWrapper
init|=
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|isUnwrapped
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFromWrapper
operator|&&
name|clazz
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|Byte
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|clazz
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
block|}
name|JAXBBeanInfo
name|beanInfo
init|=
name|getBeanInfo
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanInfo
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|Exception
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|QName
name|name
init|=
operator|(
name|QName
operator|)
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"elementName"
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|buildExceptionType
argument_list|(
name|part
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|QName
name|typeName
init|=
name|getTypeName
argument_list|(
name|beanInfo
argument_list|)
decl_stmt|;
name|createBridgeXsElement
argument_list|(
name|part
argument_list|,
name|qn
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|.
name|getXmlSchema
argument_list|()
operator|==
literal|null
condition|)
block|{
name|part
operator|.
name|setXmlSchema
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|createBridgeXsElement
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|,
name|QName
name|qn
parameter_list|,
name|QName
name|typeName
parameter_list|)
block|{
name|XmlSchemaElement
name|el
init|=
literal|null
decl_stmt|;
name|SchemaInfo
name|schemaInfo
init|=
name|serviceInfo
operator|.
name|getSchema
argument_list|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaInfo
operator|!=
literal|null
condition|)
block|{
name|el
operator|=
name|schemaInfo
operator|.
name|getElementByQName
argument_list|(
name|qn
argument_list|)
expr_stmt|;
if|if
condition|(
name|el
operator|==
literal|null
condition|)
block|{
name|el
operator|=
name|createXsElement
argument_list|(
name|part
argument_list|,
name|typeName
argument_list|,
name|schemaInfo
argument_list|)
expr_stmt|;
name|schemaInfo
operator|.
name|getSchema
argument_list|()
operator|.
name|getElements
argument_list|()
operator|.
name|add
argument_list|(
name|el
operator|.
name|getQName
argument_list|()
argument_list|,
name|el
argument_list|)
expr_stmt|;
name|schemaInfo
operator|.
name|getSchema
argument_list|()
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|typeName
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"CANNOT_CREATE_ELEMENT"
argument_list|,
name|LOG
argument_list|,
name|qn
argument_list|,
name|typeName
argument_list|,
name|el
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return;
block|}
name|schemaInfo
operator|=
operator|new
name|SchemaInfo
argument_list|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|qualifiedSchemas
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|el
operator|=
name|createXsElement
argument_list|(
name|part
argument_list|,
name|typeName
argument_list|,
name|schemaInfo
argument_list|)
expr_stmt|;
name|XmlSchema
name|schema
init|=
name|schemas
operator|.
name|newXmlSchemaInCollection
argument_list|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|qualifiedSchemas
condition|)
block|{
name|schema
operator|.
name|setElementFormDefault
argument_list|(
operator|new
name|XmlSchemaForm
argument_list|(
name|XmlSchemaForm
operator|.
name|QUALIFIED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|schemaInfo
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getElements
argument_list|()
operator|.
name|add
argument_list|(
name|el
operator|.
name|getQName
argument_list|()
argument_list|,
name|el
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|NamespaceMap
name|nsMap
init|=
operator|new
name|NamespaceMap
argument_list|()
decl_stmt|;
name|nsMap
operator|.
name|add
argument_list|(
name|WSDLConstants
operator|.
name|CONVENTIONAL_TNS_PREFIX
argument_list|,
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|nsMap
operator|.
name|add
argument_list|(
name|WSDLConstants
operator|.
name|NP_SCHEMA_XSD
argument_list|,
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setNamespaceContext
argument_list|(
name|nsMap
argument_list|)
expr_stmt|;
name|serviceInfo
operator|.
name|addSchema
argument_list|(
name|schemaInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|XmlSchemaElement
name|createXsElement
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|,
name|QName
name|typeName
parameter_list|,
name|SchemaInfo
name|schemaInfo
parameter_list|)
block|{
name|XmlSchemaElement
name|el
init|=
operator|new
name|XmlSchemaElement
argument_list|()
decl_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementQName
argument_list|(
name|el
argument_list|,
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|setNillable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|el
operator|.
name|setSchemaTypeName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|schemaInfo
operator|.
name|setElement
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|el
return|;
block|}
specifier|public
name|void
name|end
parameter_list|(
name|FaultInfo
name|fault
parameter_list|)
block|{
name|MessagePartInfo
name|part
init|=
name|fault
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|part
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cl2
init|=
operator|(
name|Class
operator|)
name|fault
operator|.
name|getProperty
argument_list|(
name|Class
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|!=
name|cl2
condition|)
block|{
name|QName
name|name
init|=
operator|(
name|QName
operator|)
name|fault
operator|.
name|getProperty
argument_list|(
literal|"elementName"
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|JAXBBeanInfo
name|beanInfo
init|=
name|getBeanInfo
argument_list|(
name|cls
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"NO_BEAN_INFO"
argument_list|,
name|LOG
argument_list|,
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|SchemaInfo
name|schemaInfo
init|=
name|serviceInfo
operator|.
name|getSchema
argument_list|(
name|part
operator|.
name|getElementQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaInfo
operator|!=
literal|null
operator|&&
operator|!
name|isExistSchemaElement
argument_list|(
name|schemaInfo
operator|.
name|getSchema
argument_list|()
argument_list|,
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|)
condition|)
block|{
name|XmlSchemaElement
name|el
init|=
operator|new
name|XmlSchemaElement
argument_list|()
decl_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementQName
argument_list|(
name|el
argument_list|,
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|setNillable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|schemaInfo
operator|.
name|getSchema
argument_list|()
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|schemaInfo
operator|.
name|getSchema
argument_list|()
operator|.
name|getElements
argument_list|()
operator|.
name|add
argument_list|(
name|el
operator|.
name|getQName
argument_list|()
argument_list|,
name|el
argument_list|)
expr_stmt|;
name|schemaInfo
operator|.
name|setElement
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|QName
argument_list|>
name|itr
init|=
name|beanInfo
operator|.
name|getTypeNames
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return;
block|}
name|QName
name|typeName
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|el
operator|.
name|setSchemaTypeName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|part
operator|.
name|getXmlSchema
argument_list|()
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|cls
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|cls
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
comment|//no String or default constructor, we cannot use it
return|return;
block|}
block|}
comment|//not mappable in JAXBContext directly, we'll have to do it manually :-(
name|SchemaInfo
name|schemaInfo
init|=
name|serviceInfo
operator|.
name|getSchema
argument_list|(
name|part
operator|.
name|getElementQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaInfo
operator|==
literal|null
operator|||
name|isExistSchemaElement
argument_list|(
name|schemaInfo
operator|.
name|getSchema
argument_list|()
argument_list|,
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|XmlSchemaElement
name|el
init|=
operator|new
name|XmlSchemaElement
argument_list|()
decl_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementQName
argument_list|(
name|el
argument_list|,
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
name|schemaInfo
operator|.
name|getSchema
argument_list|()
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|schemaInfo
operator|.
name|getSchema
argument_list|()
operator|.
name|getElements
argument_list|()
operator|.
name|add
argument_list|(
name|el
operator|.
name|getQName
argument_list|()
argument_list|,
name|el
argument_list|)
expr_stmt|;
name|schemaInfo
operator|.
name|setElement
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|XmlSchemaComplexType
name|ct
init|=
operator|new
name|XmlSchemaComplexType
argument_list|(
name|schemaInfo
operator|.
name|getSchema
argument_list|()
argument_list|)
decl_stmt|;
name|el
operator|.
name|setSchemaType
argument_list|(
name|ct
argument_list|)
expr_stmt|;
name|XmlSchemaSequence
name|seq
init|=
operator|new
name|XmlSchemaSequence
argument_list|()
decl_stmt|;
name|ct
operator|.
name|setParticle
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|Method
name|methods
index|[]
init|=
name|cls
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|methods
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
operator|||
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"is"
argument_list|)
condition|)
block|{
name|int
name|beginIdx
init|=
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
condition|?
literal|3
else|:
literal|2
decl_stmt|;
try|try
block|{
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"set"
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|beginIdx
argument_list|)
argument_list|,
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
name|JAXBBeanInfo
name|beanInfo
init|=
name|getBeanInfo
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanInfo
operator|!=
literal|null
condition|)
block|{
name|el
operator|=
operator|new
name|XmlSchemaElement
argument_list|()
expr_stmt|;
name|el
operator|.
name|setName
argument_list|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|beginIdx
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|ns
init|=
name|schemaInfo
operator|.
name|getSchema
argument_list|()
operator|.
name|getElementFormDefault
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|XmlSchemaForm
operator|.
name|UNQUALIFIED
argument_list|)
condition|?
literal|""
else|:
name|part
operator|.
name|getElementQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementQName
argument_list|(
name|el
argument_list|,
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|beginIdx
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|QName
argument_list|>
name|itr
init|=
name|beanInfo
operator|.
name|getTypeNames
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return;
block|}
name|QName
name|typeName
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|el
operator|.
name|setSchemaTypeName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//not mappable
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|buildExceptionType
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|SchemaInfo
name|schemaInfo
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SchemaInfo
name|s
range|:
name|serviceInfo
operator|.
name|getSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getElementQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|schemaInfo
operator|=
name|s
expr_stmt|;
break|break;
block|}
block|}
name|XmlSchema
name|schema
decl_stmt|;
if|if
condition|(
name|schemaInfo
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
name|schemas
operator|.
name|newXmlSchemaInCollection
argument_list|(
name|part
operator|.
name|getElementQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualifiedSchemas
condition|)
block|{
name|schema
operator|.
name|setElementFormDefault
argument_list|(
operator|new
name|XmlSchemaForm
argument_list|(
name|XmlSchemaForm
operator|.
name|QUALIFIED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NamespaceMap
name|nsMap
init|=
operator|new
name|NamespaceMap
argument_list|()
decl_stmt|;
name|nsMap
operator|.
name|add
argument_list|(
name|WSDLConstants
operator|.
name|CONVENTIONAL_TNS_PREFIX
argument_list|,
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|nsMap
operator|.
name|add
argument_list|(
name|WSDLConstants
operator|.
name|NP_SCHEMA_XSD
argument_list|,
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setNamespaceContext
argument_list|(
name|nsMap
argument_list|)
expr_stmt|;
name|schemaInfo
operator|=
operator|new
name|SchemaInfo
argument_list|(
name|part
operator|.
name|getElementQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|schemaInfo
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|serviceInfo
operator|.
name|addSchema
argument_list|(
name|schemaInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|schema
operator|=
name|schemaInfo
operator|.
name|getSchema
argument_list|()
expr_stmt|;
block|}
name|XmlSchemaComplexType
name|ct
init|=
operator|new
name|XmlSchemaComplexType
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|ct
operator|.
name|setName
argument_list|(
name|part
operator|.
name|getElementQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
comment|// Before updating everything, make sure we haven't added this
comment|// type yet.  Multiple methods that throw the same exception
comment|// types will cause duplicates.
if|if
condition|(
name|schema
operator|.
name|getTypeByName
argument_list|(
name|ct
operator|.
name|getQName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|XmlSchemaElement
name|el
init|=
operator|new
name|XmlSchemaElement
argument_list|()
decl_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementQName
argument_list|(
name|el
argument_list|,
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getElements
argument_list|()
operator|.
name|add
argument_list|(
name|el
operator|.
name|getQName
argument_list|()
argument_list|,
name|el
argument_list|)
expr_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|ct
argument_list|)
expr_stmt|;
name|schema
operator|.
name|addType
argument_list|(
name|ct
argument_list|)
expr_stmt|;
name|schemaInfo
operator|.
name|setElement
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|el
operator|.
name|setSchemaTypeName
argument_list|(
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
name|XmlSchemaSequence
name|seq
init|=
operator|new
name|XmlSchemaSequence
argument_list|()
decl_stmt|;
name|ct
operator|.
name|setParticle
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|String
name|namespace
init|=
name|part
operator|.
name|getElementQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|XmlAccessorType
name|accessorType
init|=
name|cls
operator|.
name|getAnnotation
argument_list|(
name|XmlAccessorType
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessorType
operator|==
literal|null
operator|&&
name|cls
operator|.
name|getPackage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|accessorType
operator|=
name|cls
operator|.
name|getPackage
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|XmlAccessorType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|XmlAccessType
name|accessType
init|=
name|accessorType
operator|!=
literal|null
condition|?
name|accessorType
operator|.
name|value
argument_list|()
else|:
name|XmlAccessType
operator|.
name|PUBLIC_MEMBER
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|cls
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|JAXBContextInitializer
operator|.
name|isFieldAccepted
argument_list|(
name|f
argument_list|,
name|accessType
argument_list|)
condition|)
block|{
comment|//map field
name|Type
name|type
init|=
name|f
operator|.
name|getGenericType
argument_list|()
decl_stmt|;
name|JAXBBeanInfo
name|beanInfo
init|=
name|getBeanInfo
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanInfo
operator|!=
literal|null
condition|)
block|{
name|addElement
argument_list|(
name|seq
argument_list|,
name|beanInfo
argument_list|,
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|isArray
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Method
name|m
range|:
name|cls
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|JAXBContextInitializer
operator|.
name|isMethodAccepted
argument_list|(
name|m
argument_list|,
name|accessType
argument_list|)
condition|)
block|{
comment|//map field
name|Type
name|type
init|=
name|m
operator|.
name|getGenericReturnType
argument_list|()
decl_stmt|;
name|JAXBBeanInfo
name|beanInfo
init|=
name|getBeanInfo
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanInfo
operator|!=
literal|null
condition|)
block|{
name|int
name|idx
init|=
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
condition|?
literal|3
else|:
literal|2
decl_stmt|;
name|String
name|name
init|=
name|m
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|name
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addElement
argument_list|(
name|seq
argument_list|,
name|beanInfo
argument_list|,
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|name
argument_list|)
argument_list|,
name|isArray
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|part
operator|.
name|setProperty
argument_list|(
name|JAXBDataBinding
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".CUSTOM_EXCEPTION"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
specifier|static
name|boolean
name|isArray
parameter_list|(
name|Type
name|cls
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|instanceof
name|Class
condition|)
block|{
return|return
operator|(
operator|(
name|Class
operator|)
name|cls
operator|)
operator|.
name|isArray
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|cls
operator|instanceof
name|ParameterizedType
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|cls
operator|instanceof
name|GenericArrayType
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|addElement
parameter_list|(
name|XmlSchemaSequence
name|seq
parameter_list|,
name|JAXBBeanInfo
name|beanInfo
parameter_list|,
name|QName
name|name
parameter_list|,
name|boolean
name|isArray
parameter_list|)
block|{
name|XmlSchemaElement
name|el
init|=
operator|new
name|XmlSchemaElement
argument_list|()
decl_stmt|;
name|el
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementQName
argument_list|(
name|el
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|isArray
condition|)
block|{
name|el
operator|.
name|setMinOccurs
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|el
operator|.
name|setMaxOccurs
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|el
operator|.
name|setMinOccurs
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|el
operator|.
name|setMaxOccurs
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|el
operator|.
name|setNillable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|beanInfo
operator|.
name|isElement
argument_list|()
condition|)
block|{
name|QName
name|ename
init|=
operator|new
name|QName
argument_list|(
name|beanInfo
operator|.
name|getElementNamespaceURI
argument_list|(
literal|null
argument_list|)
argument_list|,
name|beanInfo
operator|.
name|getElementLocalName
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|XmlSchemaElement
name|el2
init|=
name|schemas
operator|.
name|getElementByQName
argument_list|(
name|ename
argument_list|)
decl_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementQName
argument_list|(
name|el
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementRefName
argument_list|(
name|el
argument_list|,
name|el2
operator|.
name|getRefName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Iterator
argument_list|<
name|QName
argument_list|>
name|itr
init|=
name|beanInfo
operator|.
name|getTypeNames
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return;
block|}
name|QName
name|typeName
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|el
operator|.
name|setSchemaTypeName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isExistSchemaElement
parameter_list|(
name|XmlSchema
name|schema
parameter_list|,
name|QName
name|qn
parameter_list|)
block|{
name|boolean
name|isExist
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|ite
init|=
name|schema
operator|.
name|getItems
argument_list|()
operator|.
name|getIterator
argument_list|()
init|;
name|ite
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|XmlSchemaObject
name|obj
init|=
operator|(
name|XmlSchemaObject
operator|)
name|ite
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|XmlSchemaElement
name|xsEle
init|=
operator|(
name|XmlSchemaElement
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|xsEle
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|qn
argument_list|)
condition|)
block|{
name|isExist
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|isExist
return|;
block|}
block|}
end_class

end_unit

