begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|attachment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|FileDataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|attachment
operator|.
name|AttachmentMarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
operator|.
name|AttachmentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
operator|.
name|AttachmentUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
operator|.
name|ByteDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Attachment
import|;
end_import

begin_class
specifier|public
class|class
name|JAXBAttachmentMarshaller
extends|extends
name|AttachmentMarshaller
block|{
specifier|private
name|int
name|threshold
init|=
literal|5
operator|*
literal|1024
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|atts
decl_stmt|;
specifier|private
name|boolean
name|isXop
decl_stmt|;
specifier|private
name|QName
name|lastElementName
decl_stmt|;
specifier|public
name|JAXBAttachmentMarshaller
parameter_list|(
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|attachments
parameter_list|,
name|Integer
name|mtomThreshold
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
if|if
condition|(
name|mtomThreshold
operator|!=
literal|null
condition|)
block|{
name|threshold
operator|=
name|mtomThreshold
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|atts
operator|=
name|attachments
expr_stmt|;
name|isXop
operator|=
name|attachments
operator|!=
literal|null
expr_stmt|;
block|}
specifier|public
name|QName
name|getLastMTOMElementName
parameter_list|()
block|{
return|return
name|lastElementName
return|;
block|}
specifier|public
name|String
name|addMtomAttachment
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|String
name|elementNS
parameter_list|,
name|String
name|elementLocalName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isXop
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
name|mimeType
operator|=
literal|"application/octet-stream"
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|<
name|threshold
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ByteDataSource
name|source
init|=
operator|new
name|ByteDataSource
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|source
operator|.
name|setContentType
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
name|DataHandler
name|handler
init|=
operator|new
name|DataHandler
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|String
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|AttachmentUtil
operator|.
name|createContentID
argument_list|(
name|elementNS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|AttachmentImpl
name|att
init|=
operator|new
name|AttachmentImpl
argument_list|(
name|id
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|att
operator|.
name|setXOP
argument_list|(
name|this
operator|.
name|isXop
argument_list|)
expr_stmt|;
name|atts
operator|.
name|add
argument_list|(
name|att
argument_list|)
expr_stmt|;
name|lastElementName
operator|=
operator|new
name|QName
argument_list|(
name|elementNS
argument_list|,
name|elementLocalName
argument_list|)
expr_stmt|;
return|return
literal|"cid:"
operator|+
name|id
return|;
block|}
specifier|public
name|String
name|addMtomAttachment
parameter_list|(
name|DataHandler
name|handler
parameter_list|,
name|String
name|elementNS
parameter_list|,
name|String
name|elementLocalName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isXop
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// The following is just wrong. Even if the DataHandler has a stream, we should still
comment|// apply the threshold.
try|try
block|{
name|DataSource
name|ds
init|=
name|handler
operator|.
name|getDataSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|ds
operator|instanceof
name|FileDataSource
condition|)
block|{
name|FileDataSource
name|fds
init|=
operator|(
name|FileDataSource
operator|)
name|ds
decl_stmt|;
name|File
name|file
init|=
name|fds
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|length
argument_list|()
operator|<
name|threshold
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|ds
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"ObjectDataSource"
argument_list|)
condition|)
block|{
name|Object
name|o
init|=
name|handler
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|String
operator|&&
operator|(
operator|(
name|String
operator|)
name|o
operator|)
operator|.
name|length
argument_list|()
operator|<
name|threshold
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|byte
index|[]
operator|&&
operator|(
operator|(
name|byte
index|[]
operator|)
name|o
operator|)
operator|.
name|length
operator|<
name|threshold
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|//      ignore, just do the normal attachment thing
block|}
name|String
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|AttachmentUtil
operator|.
name|createContentID
argument_list|(
name|elementNS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|AttachmentImpl
name|att
init|=
operator|new
name|AttachmentImpl
argument_list|(
name|id
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|att
operator|.
name|setXOP
argument_list|(
name|this
operator|.
name|isXop
argument_list|)
expr_stmt|;
name|atts
operator|.
name|add
argument_list|(
name|att
argument_list|)
expr_stmt|;
name|lastElementName
operator|=
operator|new
name|QName
argument_list|(
name|elementNS
argument_list|,
name|elementLocalName
argument_list|)
expr_stmt|;
return|return
literal|"cid:"
operator|+
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|addSwaRefAttachment
parameter_list|(
name|DataHandler
name|handler
parameter_list|)
block|{
name|String
name|id
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|+
literal|"@apache.org"
decl_stmt|;
name|AttachmentImpl
name|att
init|=
operator|new
name|AttachmentImpl
argument_list|(
name|id
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|att
operator|.
name|setXOP
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|atts
operator|.
name|add
argument_list|(
name|att
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
specifier|public
name|void
name|setXOPPackage
parameter_list|(
name|boolean
name|xop
parameter_list|)
block|{
name|this
operator|.
name|isXop
operator|=
name|xop
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isXOPPackage
parameter_list|()
block|{
return|return
name|isXop
return|;
block|}
block|}
end_class

end_unit

