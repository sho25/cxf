begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xmlbeans
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:dan@envoisolutions.com">Dan Diephouse</a>  */
end_comment

begin_class
specifier|public
class|class
name|PrimitiveTypesTest
extends|extends
name|AbstractXmlBeansTest
block|{
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|createService
argument_list|(
name|TypesService
operator|.
name|class
argument_list|,
operator|new
name|TypesService
argument_list|()
argument_list|,
literal|"TypesService"
argument_list|,
operator|new
name|QName
argument_list|(
literal|"urn:TypesService"
argument_list|,
literal|"TypesService"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitives
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestType
argument_list|(
literal|"testInt"
argument_list|,
literal|"24"
argument_list|,
literal|"In:24"
argument_list|)
expr_stmt|;
name|doTestType
argument_list|(
literal|"testInteger"
argument_list|,
literal|"24"
argument_list|,
literal|"In:24"
argument_list|)
expr_stmt|;
name|doTestType
argument_list|(
literal|"testFloat"
argument_list|,
literal|"3.14"
argument_list|,
literal|"In:3.14"
argument_list|)
expr_stmt|;
name|doTestType
argument_list|(
literal|"testFloatPrim"
argument_list|,
literal|"3.14"
argument_list|,
literal|"In:3.14"
argument_list|)
expr_stmt|;
name|doTestType
argument_list|(
literal|"testBoolean"
argument_list|,
literal|"false"
argument_list|,
literal|"In:false"
argument_list|)
expr_stmt|;
name|doTestType
argument_list|(
literal|"testBooleanPrim"
argument_list|,
literal|"true"
argument_list|,
literal|"In:true"
argument_list|)
expr_stmt|;
name|doTestType
argument_list|(
literal|"testBase64Binary"
argument_list|,
name|Base64Utility
operator|.
name|encode
argument_list|(
literal|"HelloWorld"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
literal|"In:HelloWorld"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestType
parameter_list|(
name|String
name|operation
parameter_list|,
name|String
name|data
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|req
init|=
literal|"<env:Envelope xmlns:env='http://schemas.xmlsoap.org/soap/envelope/'>"
operator|+
literal|"<env:Header/>"
operator|+
literal|"<env:Body xmlns='urn:TypesService' xmlns:x='http://example.com'>"
operator|+
literal|"<"
operator|+
name|operation
operator|+
literal|">"
operator|+
literal|"<arg0>"
operator|+
name|data
operator|+
literal|"</arg0>"
operator|+
literal|"</"
operator|+
name|operation
operator|+
literal|">"
operator|+
literal|"</env:Body>"
operator|+
literal|"</env:Envelope>"
decl_stmt|;
name|Node
name|nd
init|=
name|invoke
argument_list|(
literal|"TypesService"
argument_list|,
name|req
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|addNamespace
argument_list|(
literal|"t"
argument_list|,
literal|"urn:TypesService"
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"//t:return[text()='"
operator|+
name|expected
operator|+
literal|"']"
argument_list|,
name|nd
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"//t:return1[text()='"
operator|+
name|data
operator|+
literal|"']"
argument_list|,
name|nd
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

