begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xmlbeans
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|DefaultValueWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|ClassCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|core
operator|.
name|DataBindingProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|SchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|SchemaTypeLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|SchemaTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|SimpleValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|common
operator|.
name|ResolverUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|common
operator|.
name|XmlErrorWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|config
operator|.
name|BindingConfigImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|schema
operator|.
name|PathResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|schema
operator|.
name|SchemaTypeLoaderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|schema
operator|.
name|SchemaTypeSystemCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|schema
operator|.
name|StscState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|tool
operator|.
name|CodeGenUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|util
operator|.
name|FilerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|xb
operator|.
name|xmlconfig
operator|.
name|ConfigDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|xb
operator|.
name|xmlconfig
operator|.
name|Extensionconfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|xb
operator|.
name|xsdschema
operator|.
name|SchemaDocument
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|XMLBeansToolingDataBinding
implements|implements
name|DataBindingProfile
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_URI
init|=
literal|"http://xml.apache.org/xmlbeans/2004/02/xbean/config"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMPATIBILITY_CONFIG_URI
init|=
literal|"http://www.bea.com/2002/09/xbean/config"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|MAP_COMPATIBILITY_CONFIG_URIS
decl_stmt|;
static|static
block|{
name|MAP_COMPATIBILITY_CONFIG_URIS
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|MAP_COMPATIBILITY_CONFIG_URIS
operator|.
name|put
argument_list|(
name|COMPATIBILITY_CONFIG_URI
argument_list|,
name|CONFIG_URI
argument_list|)
expr_stmt|;
block|}
name|SchemaTypeSystem
name|typeSystem
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sourcesToCopyMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|XmlError
argument_list|>
name|errors
init|=
operator|new
name|LinkedList
argument_list|<
name|XmlError
argument_list|>
argument_list|()
decl_stmt|;
name|XmlErrorWatcher
name|errorListener
init|=
operator|new
name|XmlErrorWatcher
argument_list|(
name|errors
argument_list|)
decl_stmt|;
name|PathResourceLoader
name|cpResourceLoader
init|=
operator|new
name|PathResourceLoader
argument_list|(
name|CodeGenUtil
operator|.
name|systemClasspath
argument_list|()
argument_list|)
decl_stmt|;
name|StscState
name|state
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|ToolContext
name|context
parameter_list|)
throws|throws
name|ToolException
block|{
name|String
name|wsdl
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_WSDLURL
argument_list|)
decl_stmt|;
name|String
name|catalog
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_CATALOG
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_BINDING
argument_list|)
decl_stmt|;
name|String
name|bindingFiles
index|[]
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|bindingFiles
operator|=
operator|new
name|String
index|[]
block|{
name|o
operator|.
name|toString
argument_list|()
block|}
expr_stmt|;
block|}
else|else
block|{
name|bindingFiles
operator|=
operator|(
name|String
index|[]
operator|)
name|o
expr_stmt|;
block|}
comment|// build the in-memory type system
name|state
operator|=
name|StscState
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// construct the state (have to initialize early in case of errors)
name|state
operator|.
name|setErrorListener
argument_list|(
name|errorListener
argument_list|)
expr_stmt|;
name|EntityResolver
name|cmdLineEntRes
init|=
name|ResolverUtil
operator|.
name|resolverForCatalog
argument_list|(
name|catalog
argument_list|)
decl_stmt|;
name|typeSystem
operator|=
name|loadTypeSystem
argument_list|(
name|wsdl
argument_list|,
name|bindingFiles
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|cmdLineEntRes
argument_list|)
expr_stmt|;
name|StscState
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DefaultValueWriter
name|createDefaultValueWriter
parameter_list|(
name|QName
name|qn
parameter_list|,
name|boolean
name|element
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|DefaultValueWriter
name|createDefaultValueWriterForWrappedElement
parameter_list|(
name|QName
name|wrapperElement
parameter_list|,
name|QName
name|qn
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getType
parameter_list|(
name|QName
name|qn
parameter_list|,
name|boolean
name|element
parameter_list|)
block|{
name|String
name|ret
decl_stmt|;
if|if
condition|(
name|element
condition|)
block|{
name|ret
operator|=
name|typeSystem
operator|.
name|findElement
argument_list|(
name|qn
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|getFullJavaName
argument_list|()
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|contains
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|ret
operator|=
name|ret
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|indexOf
argument_list|(
literal|'$'
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
name|ret
operator|=
name|typeSystem
operator|.
name|findType
argument_list|(
name|qn
argument_list|)
operator|.
name|getFullJavaName
argument_list|()
expr_stmt|;
return|return
name|ret
operator|.
name|replace
argument_list|(
literal|'$'
argument_list|,
literal|'.'
argument_list|)
return|;
block|}
specifier|public
name|String
name|getWrappedElementType
parameter_list|(
name|QName
name|wrapperElement
parameter_list|,
name|QName
name|item
parameter_list|)
block|{
name|SchemaType
name|st
init|=
name|typeSystem
operator|.
name|findElement
argument_list|(
name|wrapperElement
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
name|SchemaType
name|partType
init|=
name|st
operator|.
name|getElementProperty
argument_list|(
name|item
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
return|return
name|XMLBeansSchemaTypeUtils
operator|.
name|getNaturalJavaClassName
argument_list|(
name|partType
argument_list|)
return|;
block|}
specifier|public
name|void
name|generate
parameter_list|(
name|ToolContext
name|context
parameter_list|)
throws|throws
name|ToolException
block|{
name|String
name|srcd
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_OUTPUTDIR
argument_list|)
decl_stmt|;
name|String
name|classesd
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_CLASSDIR
argument_list|)
decl_stmt|;
name|boolean
name|verbose
init|=
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_VERBOSE
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|errorListener
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
name|File
name|srcDir
decl_stmt|;
name|File
name|classesDir
decl_stmt|;
if|if
condition|(
name|srcd
operator|==
literal|null
condition|)
block|{
name|String
name|wsdl
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_WSDLLOCATION
argument_list|)
decl_stmt|;
try|try
block|{
name|srcd
operator|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|wsdl
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|srcd
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
block|}
name|srcDir
operator|=
operator|new
name|File
argument_list|(
name|srcd
argument_list|)
expr_stmt|;
name|srcDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
name|classesd
operator|==
literal|null
condition|)
block|{
name|classesDir
operator|=
name|srcDir
expr_stmt|;
block|}
else|else
block|{
name|classesDir
operator|=
operator|new
name|File
argument_list|(
name|classesd
argument_list|)
expr_stmt|;
name|classesDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
comment|// now code generate and compile the JAR
if|if
condition|(
name|result
condition|)
block|{
comment|// filer implementation writes binary .xsd and generated source to disk
specifier|final
name|ClassCollector
name|classCollector
init|=
name|context
operator|.
name|get
argument_list|(
name|ClassCollector
operator|.
name|class
argument_list|)
decl_stmt|;
name|FilerImpl
name|filer
init|=
operator|new
name|FilerImpl
argument_list|(
name|classesDir
argument_list|,
name|srcDir
argument_list|,
literal|null
argument_list|,
name|verbose
argument_list|,
literal|false
argument_list|)
block|{
specifier|public
name|Writer
name|createSourceFile
parameter_list|(
name|String
name|typename
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tn
init|=
name|typename
decl_stmt|;
if|if
condition|(
name|tn
operator|.
name|contains
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|tn
operator|=
name|tn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|tn
operator|.
name|indexOf
argument_list|(
literal|'$'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|pkg
init|=
name|tn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|tn
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|tn
operator|=
name|tn
operator|.
name|substring
argument_list|(
name|tn
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|classCollector
operator|.
name|addTypesClassName
argument_list|(
name|pkg
argument_list|,
name|tn
argument_list|,
name|pkg
operator|+
literal|"."
operator|+
name|tn
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|createSourceFile
argument_list|(
name|typename
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// currently just for schemaCodePrinter
name|XmlOptions
name|options
init|=
operator|new
name|XmlOptions
argument_list|()
decl_stmt|;
comment|/*             if (codePrinter != null) {                 options.setSchemaCodePrinter(codePrinter);             }             */
name|options
operator|.
name|setGenerateJavaVersion
argument_list|(
literal|"1.5"
argument_list|)
expr_stmt|;
comment|// save .xsb files
name|typeSystem
operator|.
name|save
argument_list|(
name|filer
argument_list|)
expr_stmt|;
comment|// gen source files
name|result
operator|&=
name|SchemaTypeSystemCompiler
operator|.
name|generateTypes
argument_list|(
name|typeSystem
argument_list|,
name|filer
argument_list|,
name|options
argument_list|)
expr_stmt|;
comment|/*             for (String s : classCollector.getGeneratedFileInfo()) {                 System.out.println(s);             }             */
block|}
if|if
condition|(
operator|!
name|result
condition|)
block|{
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BUILD FAILED"
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Error generating XMLBeans types\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|XmlError
name|err
range|:
name|errors
control|)
block|{
if|if
condition|(
name|err
operator|.
name|getSeverity
argument_list|()
operator|!=
name|XmlError
operator|.
name|SEVERITY_INFO
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|err
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|.
name|getLine
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|err
operator|.
name|getSourceName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|err
operator|.
name|getLine
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|err
operator|.
name|getColumn
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|ToolException
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|cpResourceLoader
operator|!=
literal|null
condition|)
block|{
name|cpResourceLoader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|SchemaTypeSystem
name|loadTypeSystem
parameter_list|(
name|String
name|wsdlFile
parameter_list|,
name|String
index|[]
name|configFiles
parameter_list|,
name|Set
name|mdefNamespaces
parameter_list|,
name|File
name|baseDir
parameter_list|,
name|File
name|schemasDir
parameter_list|,
name|EntityResolver
name|entResolver
parameter_list|)
block|{
name|SchemaTypeLoader
name|loader
init|=
name|XmlBeans
operator|.
name|typeLoaderForClassLoader
argument_list|(
name|SchemaDocument
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
comment|// parse all the XSD files.
name|List
argument_list|<
name|SchemaDocument
operator|.
name|Schema
argument_list|>
name|scontentlist
init|=
operator|new
name|ArrayList
argument_list|<
name|SchemaDocument
operator|.
name|Schema
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|wsdlFile
argument_list|)
decl_stmt|;
name|XmlOptions
name|options
init|=
operator|new
name|XmlOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setLoadLineNumbers
argument_list|()
expr_stmt|;
name|options
operator|.
name|setLoadSubstituteNamespaces
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"http://schemas.xmlsoap.org/wsdl/"
argument_list|,
literal|"http://www.apache.org/internal/xmlbeans/wsdlsubst"
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|setEntityResolver
argument_list|(
name|entResolver
argument_list|)
expr_stmt|;
name|options
operator|.
name|setGenerateJavaVersion
argument_list|(
name|XmlOptions
operator|.
name|GENERATE_JAVA_15
argument_list|)
expr_stmt|;
name|XmlObject
name|urldoc
init|=
name|loader
operator|.
name|parse
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|urldoc
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|xb
operator|.
name|substwsdl
operator|.
name|DefinitionsDocument
condition|)
block|{
name|addWsdlSchemas
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|xb
operator|.
name|substwsdl
operator|.
name|DefinitionsDocument
operator|)
name|urldoc
argument_list|,
name|errorListener
argument_list|,
name|scontentlist
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|urldoc
operator|instanceof
name|SchemaDocument
condition|)
block|{
name|addSchema
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|SchemaDocument
operator|)
name|urldoc
argument_list|,
name|errorListener
argument_list|,
literal|false
argument_list|,
name|scontentlist
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StscState
operator|.
name|addError
argument_list|(
name|errorListener
argument_list|,
name|XmlErrorCodes
operator|.
name|INVALID_DOCUMENT_TYPE
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url
block|,
literal|"wsdl or schema"
block|}
argument_list|,
name|urldoc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XmlException
name|e
parameter_list|)
block|{
name|errorListener
operator|.
name|add
argument_list|(
name|e
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|StscState
operator|.
name|addError
argument_list|(
name|errorListener
argument_list|,
name|XmlErrorCodes
operator|.
name|CANNOT_LOAD_FILE
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"url"
block|,
name|wsdlFile
block|,
name|e
operator|.
name|getMessage
argument_list|()
block|}
argument_list|,
operator|(
name|URL
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
name|SchemaDocument
operator|.
name|Schema
index|[]
name|sdocs
init|=
operator|(
name|SchemaDocument
operator|.
name|Schema
index|[]
operator|)
name|scontentlist
operator|.
name|toArray
argument_list|(
operator|new
name|SchemaDocument
operator|.
name|Schema
index|[
name|scontentlist
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
comment|// now the config files.
name|List
argument_list|<
name|ConfigDocument
operator|.
name|Config
argument_list|>
name|cdoclist
init|=
operator|new
name|ArrayList
argument_list|<
name|ConfigDocument
operator|.
name|Config
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|javaFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|configFiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|configFiles
index|[
name|i
index|]
operator|.
name|endsWith
argument_list|(
literal|".java"
argument_list|)
condition|)
block|{
name|javaFiles
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|configFiles
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|configFiles
index|[
name|i
index|]
operator|.
name|endsWith
argument_list|(
literal|".xsdconfig"
argument_list|)
condition|)
block|{
comment|//jaxws/jaxb customization file or something else
continue|continue;
block|}
try|try
block|{
name|XmlOptions
name|options
init|=
operator|new
name|XmlOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
name|XmlOptions
operator|.
name|LOAD_LINE_NUMBERS
argument_list|)
expr_stmt|;
name|options
operator|.
name|setEntityResolver
argument_list|(
name|entResolver
argument_list|)
expr_stmt|;
name|options
operator|.
name|setLoadSubstituteNamespaces
argument_list|(
name|MAP_COMPATIBILITY_CONFIG_URIS
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|configFiles
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|XmlObject
name|configdoc
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getRawSchemeSpecificPart
argument_list|()
argument_list|)
condition|)
block|{
name|configdoc
operator|=
name|loader
operator|.
name|parse
argument_list|(
operator|new
name|File
argument_list|(
name|uri
argument_list|)
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|InputSource
name|source
init|=
operator|new
name|InputSource
argument_list|(
name|configFiles
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|XMLUtils
operator|.
name|parse
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|configdoc
operator|=
name|loader
operator|.
name|parse
argument_list|(
name|doc
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|configdoc
operator|instanceof
name|ConfigDocument
operator|)
condition|)
block|{
name|StscState
operator|.
name|addError
argument_list|(
name|errorListener
argument_list|,
name|XmlErrorCodes
operator|.
name|INVALID_DOCUMENT_TYPE
argument_list|,
operator|new
name|Object
index|[]
block|{
name|configFiles
index|[
name|i
index|]
block|,
literal|"xsd config"
block|}
argument_list|,
name|configdoc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StscState
operator|.
name|addInfo
argument_list|(
name|errorListener
argument_list|,
literal|"Loading config file "
operator|+
name|configFiles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|configdoc
operator|.
name|validate
argument_list|(
operator|new
name|XmlOptions
argument_list|()
operator|.
name|setErrorListener
argument_list|(
name|errorListener
argument_list|)
argument_list|)
condition|)
block|{
name|ConfigDocument
operator|.
name|Config
name|config
init|=
operator|(
operator|(
name|ConfigDocument
operator|)
name|configdoc
operator|)
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|cdoclist
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|config
operator|.
name|setExtensionArray
argument_list|(
operator|new
name|Extensionconfig
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XmlException
name|e
parameter_list|)
block|{
name|errorListener
operator|.
name|add
argument_list|(
name|e
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|StscState
operator|.
name|addError
argument_list|(
name|errorListener
argument_list|,
name|XmlErrorCodes
operator|.
name|CANNOT_LOAD_FILE
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"xsd config"
block|,
name|configFiles
index|[
name|i
index|]
block|,
name|e
operator|.
name|getMessage
argument_list|()
block|}
argument_list|,
operator|new
name|File
argument_list|(
name|configFiles
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ConfigDocument
operator|.
name|Config
index|[]
name|cdocs
init|=
operator|(
name|ConfigDocument
operator|.
name|Config
index|[]
operator|)
name|cdoclist
operator|.
name|toArray
argument_list|(
operator|new
name|ConfigDocument
operator|.
name|Config
index|[
name|cdoclist
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|SchemaTypeLoader
name|linkTo
init|=
name|SchemaTypeLoaderImpl
operator|.
name|build
argument_list|(
literal|null
argument_list|,
name|cpResourceLoader
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|URI
name|baseURI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|baseDir
operator|!=
literal|null
condition|)
block|{
name|baseURI
operator|=
name|baseDir
operator|.
name|toURI
argument_list|()
expr_stmt|;
block|}
name|XmlOptions
name|opts
init|=
operator|new
name|XmlOptions
argument_list|()
decl_stmt|;
name|opts
operator|.
name|setCompileDownloadUrls
argument_list|()
expr_stmt|;
if|if
condition|(
name|mdefNamespaces
operator|!=
literal|null
condition|)
block|{
name|opts
operator|.
name|setCompileMdefNamespaces
argument_list|(
name|mdefNamespaces
argument_list|)
expr_stmt|;
block|}
name|opts
operator|.
name|setCompileNoValidation
argument_list|()
expr_stmt|;
comment|// already validated here
name|opts
operator|.
name|setEntityResolver
argument_list|(
name|entResolver
argument_list|)
expr_stmt|;
name|opts
operator|.
name|setGenerateJavaVersion
argument_list|(
literal|"1.5"
argument_list|)
expr_stmt|;
comment|// now pass it to the main compile function
name|SchemaTypeSystemCompiler
operator|.
name|Parameters
name|params
init|=
operator|new
name|SchemaTypeSystemCompiler
operator|.
name|Parameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setSchemas
argument_list|(
name|sdocs
argument_list|)
expr_stmt|;
name|params
operator|.
name|setConfig
argument_list|(
name|BindingConfigImpl
operator|.
name|forConfigDocuments
argument_list|(
name|cdocs
argument_list|,
name|javaFiles
operator|.
name|toArray
argument_list|(
operator|new
name|File
index|[
name|javaFiles
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|CodeGenUtil
operator|.
name|systemClasspath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|setLinkTo
argument_list|(
name|linkTo
argument_list|)
expr_stmt|;
name|params
operator|.
name|setOptions
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|params
operator|.
name|setErrorListener
argument_list|(
name|errorListener
argument_list|)
expr_stmt|;
name|params
operator|.
name|setJavaize
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|params
operator|.
name|setBaseURI
argument_list|(
name|baseURI
argument_list|)
expr_stmt|;
name|params
operator|.
name|setSourcesToCopyMap
argument_list|(
name|sourcesToCopyMap
argument_list|)
expr_stmt|;
comment|//params.setSchemasDir(schemasDir);
return|return
name|SchemaTypeSystemCompiler
operator|.
name|compile
argument_list|(
name|params
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|addSchema
parameter_list|(
name|String
name|name
parameter_list|,
name|SchemaDocument
name|schemadoc
parameter_list|,
name|XmlErrorWatcher
name|errorListener
parameter_list|,
name|boolean
name|noVDoc
parameter_list|,
name|List
argument_list|<
name|SchemaDocument
operator|.
name|Schema
argument_list|>
name|scontentlist
parameter_list|)
block|{
name|StscState
operator|.
name|addInfo
argument_list|(
name|errorListener
argument_list|,
literal|"Loading schema file "
operator|+
name|name
argument_list|)
expr_stmt|;
name|XmlOptions
name|opts
init|=
operator|new
name|XmlOptions
argument_list|()
operator|.
name|setErrorListener
argument_list|(
name|errorListener
argument_list|)
decl_stmt|;
if|if
condition|(
name|noVDoc
condition|)
block|{
name|opts
operator|.
name|setValidateTreatLaxAsSkip
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|schemadoc
operator|.
name|validate
argument_list|(
name|opts
argument_list|)
condition|)
block|{
name|scontentlist
operator|.
name|add
argument_list|(
name|schemadoc
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addWsdlSchemas
parameter_list|(
name|String
name|name
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|xb
operator|.
name|substwsdl
operator|.
name|DefinitionsDocument
name|wsdldoc
parameter_list|,
name|XmlErrorWatcher
name|errorListener
parameter_list|,
name|List
argument_list|<
name|SchemaDocument
operator|.
name|Schema
argument_list|>
name|scontentlist
parameter_list|)
block|{
if|if
condition|(
name|wsdlContainsEncoded
argument_list|(
name|wsdldoc
argument_list|)
condition|)
block|{
name|StscState
operator|.
name|addWarning
argument_list|(
name|errorListener
argument_list|,
literal|"The WSDL "
operator|+
name|name
operator|+
literal|" uses SOAP encoding. SOAP encoding "
operator|+
literal|"is not compatible with literal XML Schema."
argument_list|,
name|XmlErrorCodes
operator|.
name|GENERIC_ERROR
argument_list|,
name|wsdldoc
argument_list|)
expr_stmt|;
block|}
name|StscState
operator|.
name|addInfo
argument_list|(
name|errorListener
argument_list|,
literal|"Loading wsdl file "
operator|+
name|name
argument_list|)
expr_stmt|;
name|XmlOptions
name|opts
init|=
operator|new
name|XmlOptions
argument_list|()
operator|.
name|setErrorListener
argument_list|(
name|errorListener
argument_list|)
decl_stmt|;
name|XmlObject
index|[]
name|types
init|=
name|wsdldoc
operator|.
name|getDefinitions
argument_list|()
operator|.
name|getTypesArray
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|types
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|XmlObject
index|[]
name|schemas
init|=
name|types
index|[
name|j
index|]
operator|.
name|selectPath
argument_list|(
literal|"declare namespace xs=\"http://www.w3.org/2001/XMLSchema\" xs:schema"
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemas
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|StscState
operator|.
name|addWarning
argument_list|(
name|errorListener
argument_list|,
literal|"The WSDL "
operator|+
name|name
operator|+
literal|" did not have any schema documents in "
operator|+
literal|"namespace 'http://www.w3.org/2001/XMLSchema'"
argument_list|,
name|XmlErrorCodes
operator|.
name|GENERIC_ERROR
argument_list|,
name|wsdldoc
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|schemas
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|schemas
index|[
name|k
index|]
operator|instanceof
name|SchemaDocument
operator|.
name|Schema
operator|&&
name|schemas
index|[
name|k
index|]
operator|.
name|validate
argument_list|(
name|opts
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|scontentlist
operator|.
name|add
argument_list|(
operator|(
name|SchemaDocument
operator|.
name|Schema
operator|)
name|schemas
index|[
name|k
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|StscState
operator|.
name|addInfo
argument_list|(
name|errorListener
argument_list|,
literal|"Processing "
operator|+
name|count
operator|+
literal|" schema(s) in "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|wsdlContainsEncoded
parameter_list|(
name|XmlObject
name|wsdldoc
parameter_list|)
block|{
comment|// search for any<soap:body use="encoded"/> etc.
name|XmlObject
index|[]
name|useAttrs
init|=
name|wsdldoc
operator|.
name|selectPath
argument_list|(
literal|"declare namespace soap='http://schemas.xmlsoap.org/wsdl/soap/' "
operator|+
literal|".//soap:body/@use|.//soap:header/@use|.//soap:fault/@use"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|useAttrs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"encoded"
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|SimpleValue
operator|)
name|useAttrs
index|[
name|i
index|]
operator|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

