begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xmlbeans
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|SchemaType
import|;
end_import

begin_comment
comment|/**  * This class will help us to map the XMLBeansBuildinType into Natural Java Type  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|XMLBeansSchemaTypeUtils
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|BUILDIN_TYPES_MAP
decl_stmt|;
static|static
block|{
name|BUILDIN_TYPES_MAP
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlObject"
argument_list|,
literal|"org.apache.xmlbeans.XmlObject"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlAnySimpleType"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlAnyURI"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlBase64Binary"
argument_list|,
literal|"byte[]"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlBoolean"
argument_list|,
literal|"boolean"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlByte"
argument_list|,
literal|"byte"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlDate"
argument_list|,
literal|"java.util.Calendar"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlDateTime"
argument_list|,
literal|"java.util.Calendar"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlDecimal"
argument_list|,
literal|"java.math.BigDecimal"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlDouble"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlDuration"
argument_list|,
literal|"org.apache.xmlbeans.GDuration"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlENTITIES"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlENTITY"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlFloat"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlGDay"
argument_list|,
literal|"java.util.Calendar"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlGMonth"
argument_list|,
literal|"java.util.Calendar"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlGMonthDay"
argument_list|,
literal|"java.util.Calendar"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlGYear"
argument_list|,
literal|"java.util.Calendar"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlHexBinary"
argument_list|,
literal|"java.util.Calendar"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlHexBinary"
argument_list|,
literal|"byte[]"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlID"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlIDREF"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlIDREFS"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlInt"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlInteger"
argument_list|,
literal|"java.math.BigInteger"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlLanguage"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlLong"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlName"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlNCNAME"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlNegativeInteger"
argument_list|,
literal|"java.math.BigInteger"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlNMTOKEN"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlNMTOKENS"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlNonNegativeInteger"
argument_list|,
literal|"java.math.BigInteger"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlNonPositiveInteger"
argument_list|,
literal|"java.math.BigInteger"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlNormalizedString"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlNOTATION"
argument_list|,
literal|"org.apache.xmlbeans.XmlNOTATION"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlPositiveInteger"
argument_list|,
literal|"java.math.BigInteger"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlQName"
argument_list|,
literal|"javax.xml.namespace.QName"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlShort"
argument_list|,
literal|"short"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlString"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlTime"
argument_list|,
literal|"java.util.Calendar"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlToken"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlUnsignedByte"
argument_list|,
literal|"short"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlUnsignedInt"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlUnsignedLong"
argument_list|,
literal|"java.math.BigInteger"
argument_list|)
expr_stmt|;
name|BUILDIN_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"org.apache.xmlbeans.XmlUnsignedShort"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|XMLBeansSchemaTypeUtils
parameter_list|()
block|{
comment|// helper class
block|}
specifier|public
specifier|static
name|String
name|getNaturalJavaClassName
parameter_list|(
name|SchemaType
name|st
parameter_list|)
block|{
name|SchemaType
name|schemaType
init|=
name|st
decl_stmt|;
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|isSimpleType
argument_list|()
operator|&&
operator|!
name|st
operator|.
name|isBuiltinType
argument_list|()
condition|)
block|{
name|schemaType
operator|=
name|st
operator|.
name|getBaseType
argument_list|()
expr_stmt|;
while|while
condition|(
name|schemaType
operator|!=
literal|null
operator|&&
operator|!
name|schemaType
operator|.
name|isBuiltinType
argument_list|()
condition|)
block|{
name|schemaType
operator|=
name|schemaType
operator|.
name|getBaseType
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|schemaType
operator|.
name|isBuiltinType
argument_list|()
condition|)
block|{
name|result
operator|=
name|BUILDIN_TYPES_MAP
operator|.
name|get
argument_list|(
name|schemaType
operator|.
name|getFullJavaName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|schemaType
operator|.
name|getFullJavaName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'$'
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

