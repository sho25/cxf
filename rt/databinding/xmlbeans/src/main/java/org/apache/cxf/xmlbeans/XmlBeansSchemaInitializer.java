begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xmlbeans
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|ServiceModelVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|SchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|SchemaTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlAnySimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|schema
operator|.
name|BuiltinSchemaTypeSystem
import|;
end_import

begin_comment
comment|/**  * Walks the service model and sets up the element/type names.  */
end_comment

begin_class
class|class
name|XmlBeansSchemaInitializer
extends|extends
name|ServiceModelVisitor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|XmlBeansSchemaInitializer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|XmlAnySimpleType
argument_list|>
argument_list|>
name|CLASS_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|XmlAnySimpleType
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|SchemaCollection
name|schemas
decl_stmt|;
specifier|private
name|XmlBeansDataBinding
name|dataBinding
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|XmlSchema
argument_list|>
name|schemaMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|XmlSchema
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlString
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlInt
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlInt
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlShort
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlShort
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlByte
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlByte
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlFloat
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlFloat
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlDouble
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlDouble
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlLong
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlLong
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlBoolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlBoolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlDecimal
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlInteger
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Date
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlDate
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Calendar
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlDate
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlBase64Binary
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XmlBeansSchemaInitializer
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|,
name|SchemaCollection
name|col
parameter_list|,
name|XmlBeansDataBinding
name|db
parameter_list|)
block|{
name|super
argument_list|(
name|serviceInfo
argument_list|)
expr_stmt|;
name|schemas
operator|=
name|col
expr_stmt|;
name|dataBinding
operator|=
name|db
expr_stmt|;
block|}
name|XmlSchema
name|getSchema
parameter_list|(
name|SchemaTypeSystem
name|sts
parameter_list|,
name|String
name|file
parameter_list|)
block|{
if|if
condition|(
name|schemaMap
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return
name|schemaMap
operator|.
name|get
argument_list|(
name|file
argument_list|)
return|;
block|}
name|InputStream
name|ins
init|=
name|sts
operator|.
name|getSourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
comment|//temporary marker to make sure recursive imports don't blow up
name|schemaMap
operator|.
name|put
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|XMLUtils
operator|.
name|parse
argument_list|(
name|ins
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|n
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"import"
argument_list|)
condition|)
block|{
name|String
name|loc
init|=
name|e
operator|.
name|getAttribute
argument_list|(
literal|"schemaLocation"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|loc
argument_list|)
condition|)
block|{
name|getSchema
argument_list|(
name|sts
argument_list|,
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|XmlSchema
name|schema
init|=
name|dataBinding
operator|.
name|addSchemaDocument
argument_list|(
name|serviceInfo
argument_list|,
name|schemas
argument_list|,
name|doc
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|schemaMap
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|schema
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to find schema for: "
operator|+
name|file
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|begin
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{
name|LOG
operator|.
name|finest
argument_list|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check to see if the WSDL information has been filled in for us.
if|if
condition|(
name|part
operator|.
name|getTypeQName
argument_list|()
operator|!=
literal|null
operator|||
name|part
operator|.
name|getElementQName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|checkForExistence
argument_list|(
name|part
argument_list|)
expr_stmt|;
return|return;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|part
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|isFromWrapper
init|=
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|isUnwrapped
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFromWrapper
operator|&&
name|clazz
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|Byte
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|clazz
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
block|}
name|mapClass
argument_list|(
name|part
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|mapClass
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
if|if
condition|(
operator|!
name|XmlObject
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|XmlAnySimpleType
argument_list|>
name|type
init|=
name|CLASS_MAP
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
name|SchemaTypeSystem
name|sts
init|=
name|BuiltinSchemaTypeSystem
operator|.
name|get
argument_list|()
decl_stmt|;
name|SchemaType
name|st2
init|=
name|sts
operator|.
name|typeForClassname
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|part
operator|.
name|setProperty
argument_list|(
name|SchemaType
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|st2
argument_list|)
expr_stmt|;
name|part
operator|.
name|setProperty
argument_list|(
name|XmlAnySimpleType
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTypeQName
argument_list|(
name|st2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|XmlSchemaType
name|xmlSchema
init|=
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|st2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|xmlSchema
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Field
name|field
init|=
name|clazz
operator|.
name|getField
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|SchemaType
name|st
init|=
operator|(
name|SchemaType
operator|)
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|part
operator|.
name|setProperty
argument_list|(
name|SchemaType
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|st
argument_list|)
expr_stmt|;
name|SchemaTypeSystem
name|sts
init|=
name|st
operator|.
name|getTypeSystem
argument_list|()
decl_stmt|;
name|XmlSchema
name|schema
init|=
name|getSchema
argument_list|(
name|sts
argument_list|,
name|st
operator|.
name|getSourceName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|isDocumentType
argument_list|()
condition|)
block|{
name|XmlSchemaElement
name|sct
init|=
name|schema
operator|.
name|getElementByName
argument_list|(
name|st
operator|.
name|getDocumentElementName
argument_list|()
argument_list|)
decl_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|sct
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|st
operator|.
name|getDocumentElementName
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setConcreteName
argument_list|(
name|st
operator|.
name|getDocumentElementName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|st
operator|.
name|getComponentType
argument_list|()
operator|==
name|SchemaType
operator|.
name|ELEMENT
condition|)
block|{
name|XmlSchemaElement
name|sct
init|=
name|schema
operator|.
name|getElementByName
argument_list|(
name|st
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|sct
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XmlSchemaType
name|sct
init|=
name|schema
operator|.
name|getTypeByName
argument_list|(
name|st
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|part
operator|.
name|setTypeQName
argument_list|(
name|st
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|sct
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkForExistence
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{
name|QName
name|qn
init|=
name|part
operator|.
name|getElementQName
argument_list|()
decl_stmt|;
if|if
condition|(
name|qn
operator|!=
literal|null
condition|)
block|{
name|XmlSchemaElement
name|el
init|=
name|schemas
operator|.
name|getElementByQName
argument_list|(
name|qn
argument_list|)
decl_stmt|;
if|if
condition|(
name|el
operator|==
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|part
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|isFromWrapper
init|=
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|isUnwrapped
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFromWrapper
operator|&&
name|clazz
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|Byte
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|clazz
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
block|}
name|mapClass
argument_list|(
name|part
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

