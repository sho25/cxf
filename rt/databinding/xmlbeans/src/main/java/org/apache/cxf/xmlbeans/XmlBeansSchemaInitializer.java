begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xmlbeans
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|ServiceModelVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|resolver
operator|.
name|URIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|SchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|SchemaTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlAnySimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|schema
operator|.
name|BuiltinSchemaTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|impl
operator|.
name|schema
operator|.
name|SchemaTypeSystemImpl
import|;
end_import

begin_comment
comment|/**  * Walks the service model and sets up the element/type names.  */
end_comment

begin_class
class|class
name|XmlBeansSchemaInitializer
extends|extends
name|ServiceModelVisitor
block|{
specifier|public
specifier|static
specifier|final
name|String
name|XML_BEANS_SCHEMA_PREFIX
init|=
literal|"schema"
operator|+
name|SchemaTypeSystemImpl
operator|.
name|METADATA_PACKAGE_GEN
operator|+
literal|"/src/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|XmlBeansSchemaInitializer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|XmlAnySimpleType
argument_list|>
argument_list|>
name|CLASS_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|XmlAnySimpleType
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|SchemaCollection
name|schemas
decl_stmt|;
specifier|private
name|XmlBeansDataBinding
name|dataBinding
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|XmlSchema
argument_list|>
name|schemaMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|XmlSchema
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|URIResolver
name|schemaResolver
decl_stmt|;
static|static
block|{
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlString
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlInt
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlInt
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlShort
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlShort
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlByte
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlByte
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlFloat
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlFloat
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlDouble
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlDouble
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlLong
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlLong
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlBoolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlBoolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlDecimal
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlInteger
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Date
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlDate
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|Calendar
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlDate
operator|.
name|class
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlBase64Binary
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XmlBeansSchemaInitializer
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|,
name|SchemaCollection
name|col
parameter_list|,
name|XmlBeansDataBinding
name|db
parameter_list|)
block|{
name|super
argument_list|(
name|serviceInfo
argument_list|)
expr_stmt|;
name|schemas
operator|=
name|col
expr_stmt|;
name|dataBinding
operator|=
name|db
expr_stmt|;
name|schemaResolver
operator|=
name|serviceInfo
operator|.
name|getXmlSchemaCollection
argument_list|()
operator|.
name|getXmlSchemaCollection
argument_list|()
operator|.
name|getSchemaResolver
argument_list|()
expr_stmt|;
block|}
specifier|public
class|class
name|XMLSchemaResolver
implements|implements
name|URIResolver
block|{
specifier|final
name|SchemaTypeSystem
name|sts
decl_stmt|;
specifier|public
name|XMLSchemaResolver
parameter_list|(
name|SchemaTypeSystem
name|sts
parameter_list|)
block|{
name|this
operator|.
name|sts
operator|=
name|sts
expr_stmt|;
block|}
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|targetNamespace
parameter_list|,
name|String
name|schemaLocation
parameter_list|,
name|String
name|baseUri
parameter_list|)
block|{
name|InputStream
name|ins
init|=
name|sts
operator|.
name|getSourceAsStream
argument_list|(
name|schemaLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|ins
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|InputSource
argument_list|(
name|ins
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
name|XmlSchema
name|addSchemaElement
parameter_list|(
name|SchemaTypeSystem
name|sts
parameter_list|,
name|Document
name|doc
parameter_list|,
name|Element
name|elem
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|doc
operator|.
name|appendChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|elem
operator|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|elem
argument_list|)
expr_stmt|;
while|while
condition|(
name|elem
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|elem
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"import"
argument_list|)
condition|)
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|String
name|loc
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"schemaLocation"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|loc
argument_list|)
condition|)
block|{
name|URI
name|locUri
init|=
name|uri
operator|.
name|resolve
argument_list|(
name|loc
argument_list|)
decl_stmt|;
name|String
name|newLoc
init|=
name|locUri
operator|.
name|toString
argument_list|()
decl_stmt|;
name|getSchema
argument_list|(
name|sts
argument_list|,
name|newLoc
argument_list|)
expr_stmt|;
block|}
block|}
name|elem
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
name|XmlSchema
name|schema
init|=
name|dataBinding
operator|.
name|addSchemaDocument
argument_list|(
name|serviceInfo
argument_list|,
name|schemas
argument_list|,
name|doc
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|doc
operator|.
name|removeChild
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
name|schemaMap
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|schema
argument_list|)
expr_stmt|;
return|return
name|schema
return|;
block|}
specifier|protected
name|XmlSchema
name|getSchema
parameter_list|(
name|SchemaTypeSystem
name|sts
parameter_list|,
name|String
name|file
parameter_list|)
block|{
if|if
condition|(
name|schemaMap
operator|.
name|containsKey
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return
name|schemaMap
operator|.
name|get
argument_list|(
name|file
argument_list|)
return|;
block|}
try|try
block|{
name|InputSource
name|fileSource
init|=
name|schemaResolver
operator|.
name|resolveEntity
argument_list|(
literal|null
argument_list|,
name|file
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|systemId
init|=
name|removePrefix
argument_list|(
name|fileSource
operator|.
name|getSystemId
argument_list|()
argument_list|,
name|XML_BEANS_SCHEMA_PREFIX
argument_list|)
decl_stmt|;
return|return
name|getSchemaInternal
argument_list|(
name|sts
argument_list|,
name|systemId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XmlSchemaException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|,
literal|"The XML catalog is not configured to map the file ["
operator|+
name|file
operator|+
literal|"] "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getSchemaInternal
argument_list|(
name|sts
argument_list|,
name|file
argument_list|)
return|;
block|}
specifier|protected
name|XmlSchema
name|getSchemaInternal
parameter_list|(
name|SchemaTypeSystem
name|sts
parameter_list|,
name|String
name|file
parameter_list|)
block|{
name|InputStream
name|ins
init|=
name|sts
operator|.
name|getSourceAsStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|ins
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
comment|//temporary marker to make sure recursive imports don't blow up
name|schemaMap
operator|.
name|put
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|XMLUtils
operator|.
name|parse
argument_list|(
name|ins
argument_list|)
decl_stmt|;
name|Element
name|elem
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|doc
operator|.
name|removeChild
argument_list|(
name|elem
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"schema"
operator|.
name|equals
argument_list|(
name|elem
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
literal|"http://www.w3.org/2001/XMLSchema"
operator|.
name|equals
argument_list|(
name|elem
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|addSchemaElement
argument_list|(
name|sts
argument_list|,
name|doc
argument_list|,
name|elem
argument_list|,
name|file
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"wsdl"
argument_list|,
name|WSDLConstants
operator|.
name|NS_WSDL11
argument_list|)
expr_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"xsd"
argument_list|,
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
argument_list|)
expr_stmt|;
name|XPathUtils
name|xpath
init|=
operator|new
name|XPathUtils
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|NodeList
name|list
init|=
name|xpath
operator|.
name|getValueList
argument_list|(
literal|"/wsdl:definitions/wsdl:types/xsd:schema"
argument_list|,
name|elem
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|list
operator|.
name|getLength
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|addSchemaElement
argument_list|(
name|sts
argument_list|,
name|doc
argument_list|,
operator|(
name|Element
operator|)
name|list
operator|.
name|item
argument_list|(
name|x
argument_list|)
argument_list|,
name|file
operator|+
literal|"#1"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to find schema for: "
operator|+
name|file
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Removes the prefix ending with the given suffix. For instance, the value      * XYZ where the prefix is Y, the result will be Z. The removed string is XY.      *      * @param value the value from where the returned string is extracted      * @param prefixSuffix the prefix      * @return the rest of the string      */
specifier|protected
name|String
name|removePrefix
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|prefixSuffix
parameter_list|)
block|{
return|return
name|value
operator|.
name|substring
argument_list|(
name|value
operator|.
name|indexOf
argument_list|(
name|prefixSuffix
argument_list|)
operator|+
name|prefixSuffix
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|begin
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{
name|LOG
operator|.
name|finest
argument_list|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check to see if the WSDL information has been filled in for us.
if|if
condition|(
name|part
operator|.
name|getTypeQName
argument_list|()
operator|!=
literal|null
operator|||
name|part
operator|.
name|getElementQName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|checkForExistence
argument_list|(
name|part
argument_list|)
expr_stmt|;
return|return;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|part
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|isFromWrapper
init|=
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|isUnwrapped
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFromWrapper
operator|&&
name|clazz
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|Byte
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|clazz
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
block|}
name|mapClass
argument_list|(
name|part
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|mapClass
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
if|if
condition|(
operator|!
name|XmlObject
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|XmlAnySimpleType
argument_list|>
name|type
init|=
name|CLASS_MAP
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|" was not found in class map"
argument_list|)
expr_stmt|;
return|return;
block|}
name|SchemaTypeSystem
name|sts
init|=
name|BuiltinSchemaTypeSystem
operator|.
name|get
argument_list|()
decl_stmt|;
name|SchemaType
name|st2
init|=
name|sts
operator|.
name|typeForClassname
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|part
operator|.
name|setProperty
argument_list|(
name|SchemaType
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|st2
argument_list|)
expr_stmt|;
name|part
operator|.
name|setProperty
argument_list|(
name|XmlAnySimpleType
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTypeQName
argument_list|(
name|st2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|XmlSchemaType
name|xmlSchema
init|=
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|st2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|xmlSchema
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Field
name|field
init|=
name|clazz
operator|.
name|getField
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|SchemaType
name|st
init|=
operator|(
name|SchemaType
operator|)
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|part
operator|.
name|setProperty
argument_list|(
name|SchemaType
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|st
argument_list|)
expr_stmt|;
name|SchemaTypeSystem
name|sts
init|=
name|st
operator|.
name|getTypeSystem
argument_list|()
decl_stmt|;
name|schemas
operator|.
name|getXmlSchemaCollection
argument_list|()
operator|.
name|setSchemaResolver
argument_list|(
operator|new
name|XMLSchemaResolver
argument_list|(
name|sts
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|sourceName
init|=
name|st
operator|.
name|getSourceName
argument_list|()
decl_stmt|;
name|XmlSchema
name|schema
init|=
name|getSchema
argument_list|(
name|sts
argument_list|,
name|sourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|st
operator|.
name|isDocumentType
argument_list|()
condition|)
block|{
name|XmlSchemaElement
name|sct
init|=
name|schema
operator|.
name|getElementByName
argument_list|(
name|st
operator|.
name|getDocumentElementName
argument_list|()
argument_list|)
decl_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|sct
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|st
operator|.
name|getDocumentElementName
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setConcreteName
argument_list|(
name|st
operator|.
name|getDocumentElementName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|st
operator|.
name|getComponentType
argument_list|()
operator|==
name|SchemaType
operator|.
name|ELEMENT
condition|)
block|{
name|XmlSchemaElement
name|sct
init|=
name|schema
operator|.
name|getElementByName
argument_list|(
name|st
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|sct
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XmlSchemaType
name|sct
init|=
name|schema
operator|.
name|getTypeByName
argument_list|(
name|st
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|part
operator|.
name|setTypeQName
argument_list|(
name|st
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|sct
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|st
operator|.
name|isDocumentType
argument_list|()
condition|)
block|{
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|st
operator|.
name|getDocumentElementName
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setConcreteName
argument_list|(
name|st
operator|.
name|getDocumentElementName
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|schemas
operator|.
name|getElementByQName
argument_list|(
name|st
operator|.
name|getDocumentElementName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|st
operator|.
name|getComponentType
argument_list|()
operator|==
name|SchemaType
operator|.
name|ELEMENT
condition|)
block|{
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|st
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setConcreteName
argument_list|(
name|st
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|schemas
operator|.
name|getElementByQName
argument_list|(
name|st
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|part
operator|.
name|setTypeQName
argument_list|(
name|st
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|st
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|checkForExistence
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{
name|QName
name|qn
init|=
name|part
operator|.
name|getElementQName
argument_list|()
decl_stmt|;
if|if
condition|(
name|qn
operator|!=
literal|null
condition|)
block|{
name|XmlSchemaElement
name|el
init|=
name|schemas
operator|.
name|getElementByQName
argument_list|(
name|qn
argument_list|)
decl_stmt|;
if|if
condition|(
name|el
operator|==
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|part
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|isFromWrapper
init|=
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|isUnwrapped
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFromWrapper
operator|&&
name|clazz
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|Byte
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|clazz
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
block|}
name|mapClass
argument_list|(
name|part
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

