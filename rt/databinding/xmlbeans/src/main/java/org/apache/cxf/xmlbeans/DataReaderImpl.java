begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xmlbeans
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataBindingValidation2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|SchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlAnySimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlOptions
import|;
end_import

begin_class
specifier|public
class|class
name|DataReaderImpl
implements|implements
name|DataReader
argument_list|<
name|XMLStreamReader
argument_list|>
implements|,
name|DataBindingValidation2
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|XmlBeansDataBinding
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|XmlSchemaCollection
name|schemas
decl_stmt|;
specifier|public
name|DataReaderImpl
parameter_list|()
block|{     }
specifier|public
name|Object
name|read
parameter_list|(
name|XMLStreamReader
name|input
parameter_list|)
block|{
return|return
name|read
argument_list|(
literal|null
argument_list|,
name|input
argument_list|)
return|;
block|}
specifier|public
name|Object
name|read
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|,
name|XMLStreamReader
name|reader
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|typeClass
init|=
name|part
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
name|boolean
name|unwrap
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|XmlObject
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|typeClass
argument_list|)
condition|)
block|{
name|typeClass
operator|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|part
operator|.
name|getProperty
argument_list|(
name|XmlAnySimpleType
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|unwrap
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|isOutClass
init|=
literal|false
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|encClass
init|=
name|typeClass
operator|.
name|getEnclosingClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|encClass
operator|!=
literal|null
condition|)
block|{
name|typeClass
operator|=
name|encClass
expr_stmt|;
name|isOutClass
operator|=
literal|true
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|cls
index|[]
init|=
name|typeClass
operator|.
name|getDeclaredClasses
argument_list|()
decl_stmt|;
name|Object
name|obj
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
range|:
name|cls
control|)
block|{
if|if
condition|(
literal|"Factory"
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|SchemaType
name|st
init|=
operator|(
name|SchemaType
operator|)
name|part
operator|.
name|getProperty
argument_list|(
name|SchemaType
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|XmlOptions
name|options
init|=
operator|new
name|XmlOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|schemas
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|setValidateOnSet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|st
operator|!=
literal|null
operator|&&
operator|!
name|st
operator|.
name|isDocumentType
argument_list|()
operator|&&
operator|!
name|isOutClass
condition|)
block|{
name|options
operator|.
name|setLoadReplaceDocumentElement
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|Method
name|meth
init|=
name|c
operator|.
name|getMethod
argument_list|(
literal|"parse"
argument_list|,
name|XMLStreamReader
operator|.
name|class
argument_list|,
name|XmlOptions
operator|.
name|class
argument_list|)
decl_stmt|;
name|obj
operator|=
name|meth
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|reader
argument_list|,
name|options
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNMARSHAL_ERROR"
argument_list|,
name|LOG
argument_list|,
name|part
operator|.
name|getTypeClass
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|unwrap
operator|&&
name|obj
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|tc
init|=
name|part
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
name|String
name|methName
decl_stmt|;
if|if
condition|(
name|tc
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|)
operator|||
name|tc
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
condition|)
block|{
name|methName
operator|=
literal|"getIntValue"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tc
operator|.
name|equals
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
condition|)
block|{
name|methName
operator|=
literal|"byteArrayValue"
expr_stmt|;
block|}
else|else
block|{
name|String
name|tp
init|=
name|tc
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|tp
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|tp
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|tp
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|methName
operator|=
literal|"get"
operator|+
name|tp
operator|+
literal|"Value"
expr_stmt|;
block|}
name|Method
name|m
init|=
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|methName
argument_list|)
decl_stmt|;
name|obj
operator|=
name|m
operator|.
name|invoke
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isOutClass
condition|)
block|{
for|for
control|(
name|Method
name|m
range|:
name|encClass
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
name|m
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getTypeClass
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|obj
operator|=
name|m
operator|.
name|invoke
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|reader
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLStreamReader
operator|.
name|END_ELEMENT
condition|)
block|{
try|try
block|{
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|obj
return|;
block|}
specifier|public
name|Object
name|read
parameter_list|(
name|QName
name|name
parameter_list|,
name|XMLStreamReader
name|input
parameter_list|,
name|Class
name|type
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setAttachments
parameter_list|(
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|attachments
parameter_list|)
block|{     }
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|prop
parameter_list|,
name|Object
name|value
parameter_list|)
block|{     }
specifier|public
name|void
name|setSchema
parameter_list|(
name|Schema
name|s
parameter_list|)
block|{     }
specifier|public
name|void
name|setSchema
parameter_list|(
name|XmlSchemaCollection
name|validationSchemas
parameter_list|)
block|{
name|this
operator|.
name|schemas
operator|=
name|validationSchemas
expr_stmt|;
block|}
block|}
end_class

end_unit

