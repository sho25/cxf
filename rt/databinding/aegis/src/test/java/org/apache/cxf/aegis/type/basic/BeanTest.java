begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AbstractAegisTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AegisContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|services
operator|.
name|SimpleBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeCreationOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|util
operator|.
name|jdom
operator|.
name|StaxBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|jdom
operator|.
name|JDOMReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|jdom
operator|.
name|JDOMWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|stax
operator|.
name|ElementReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|stax
operator|.
name|ElementWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SOAPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|XmlSchemaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|BeanTest
extends|extends
name|AbstractAegisTest
block|{
name|TypeMapping
name|mapping
decl_stmt|;
specifier|private
name|AegisContext
name|context
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|addNamespace
argument_list|(
literal|"b"
argument_list|,
literal|"urn:Bean"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"bz"
argument_list|,
literal|"urn:beanz"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"a"
argument_list|,
literal|"urn:anotherns"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"xsi"
argument_list|,
name|SOAPConstants
operator|.
name|XSI_NS
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|AegisContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|mapping
operator|=
name|context
operator|.
name|getTypeMapping
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBean
parameter_list|()
throws|throws
name|Exception
block|{
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|()
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|SimpleBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bean"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test reading
name|ElementReader
name|reader
init|=
operator|new
name|ElementReader
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"bean1.xml"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleBean
name|bean
init|=
operator|(
name|SimpleBean
operator|)
name|type
operator|.
name|readObject
argument_list|(
name|reader
argument_list|,
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bleh"
argument_list|,
name|bean
operator|.
name|getBleh
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"howdy"
argument_list|,
name|bean
operator|.
name|getHowdy
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getXMLStreamReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Test reading with extra elements
name|reader
operator|=
operator|new
name|ElementReader
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"bean2.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|bean
operator|=
operator|(
name|SimpleBean
operator|)
name|type
operator|.
name|readObject
argument_list|(
name|reader
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bleh"
argument_list|,
name|bean
operator|.
name|getBleh
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"howdy"
argument_list|,
name|bean
operator|.
name|getHowdy
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getXMLStreamReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test<bleh/> element
name|reader
operator|=
operator|new
name|ElementReader
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"bean7.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|bean
operator|=
operator|(
name|SimpleBean
operator|)
name|type
operator|.
name|readObject
argument_list|(
name|reader
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|bean
operator|.
name|getBleh
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"howdy"
argument_list|,
name|bean
operator|.
name|getHowdy
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getXMLStreamReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|bean
operator|.
name|setBleh
argument_list|(
literal|"bleh"
argument_list|)
expr_stmt|;
comment|// Test writing
name|Element
name|element
init|=
operator|new
name|Element
argument_list|(
literal|"root"
argument_list|,
literal|"b"
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
operator|new
name|Document
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|type
operator|.
name|writeObject
argument_list|(
name|bean
argument_list|,
operator|new
name|JDOMWriter
argument_list|(
name|element
argument_list|)
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root/b:bleh[text()='bleh']"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root/b:howdy[text()='howdy']"
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBeanWithXsiType
parameter_list|()
throws|throws
name|Exception
block|{
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|()
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|SimpleBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bean"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test reading
name|ElementReader
name|reader
init|=
operator|new
name|ElementReader
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"bean9.xml"
argument_list|)
argument_list|)
decl_stmt|;
name|Context
name|ctx
init|=
name|getContext
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|getGlobalContext
argument_list|()
operator|.
name|setReadXsiTypes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|SimpleBean
name|bean
init|=
operator|(
name|SimpleBean
operator|)
name|type
operator|.
name|readObject
argument_list|(
name|reader
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bleh"
argument_list|,
name|bean
operator|.
name|getBleh
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"howdy"
argument_list|,
name|bean
operator|.
name|getHowdy
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getXMLStreamReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Test writing
name|Element
name|element
init|=
operator|new
name|Element
argument_list|(
literal|"root"
argument_list|,
literal|"b"
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
operator|new
name|Document
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|type
operator|.
name|writeObject
argument_list|(
name|bean
argument_list|,
operator|new
name|JDOMWriter
argument_list|(
name|element
argument_list|)
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root/b:bleh[text()='bleh']"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root/b:howdy[text()='howdy']"
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnmappedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ns
init|=
literal|"urn:Bean"
decl_stmt|;
name|BeanTypeInfo
name|info
init|=
operator|new
name|BeanTypeInfo
argument_list|(
name|SimpleBean
operator|.
name|class
argument_list|,
name|ns
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"howdycustom"
argument_list|)
decl_stmt|;
name|info
operator|.
name|mapElement
argument_list|(
literal|"howdy"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|info
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"howdy"
argument_list|,
name|info
operator|.
name|getPropertyDescriptorFromMappedName
argument_list|(
name|name
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|SimpleBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bean"
argument_list|)
argument_list|)
expr_stmt|;
name|ElementReader
name|reader
init|=
operator|new
name|ElementReader
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"bean3.xml"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleBean
name|bean
init|=
operator|(
name|SimpleBean
operator|)
name|type
operator|.
name|readObject
argument_list|(
name|reader
argument_list|,
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"howdy"
argument_list|,
name|bean
operator|.
name|getHowdy
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bean
operator|.
name|getBleh
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getXMLStreamReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Test writing
name|Element
name|element
init|=
operator|new
name|Element
argument_list|(
literal|"root"
argument_list|,
literal|"b"
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
operator|new
name|Document
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|type
operator|.
name|writeObject
argument_list|(
name|bean
argument_list|,
operator|new
name|JDOMWriter
argument_list|(
name|element
argument_list|)
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"/b:root/b:bleh"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root/b:howdycustom[text()='howdy']"
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAttributeMap
parameter_list|()
throws|throws
name|Exception
block|{
name|BeanTypeInfo
name|info
init|=
operator|new
name|BeanTypeInfo
argument_list|(
name|SimpleBean
operator|.
name|class
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|info
operator|.
name|mapAttribute
argument_list|(
literal|"howdy"
argument_list|,
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"howdy"
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|mapAttribute
argument_list|(
literal|"bleh"
argument_list|,
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bleh"
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|SimpleBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bean"
argument_list|)
argument_list|)
expr_stmt|;
name|ElementReader
name|reader
init|=
operator|new
name|ElementReader
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"bean4.xml"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleBean
name|bean
init|=
operator|(
name|SimpleBean
operator|)
name|type
operator|.
name|readObject
argument_list|(
name|reader
argument_list|,
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bleh"
argument_list|,
name|bean
operator|.
name|getBleh
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"howdy"
argument_list|,
name|bean
operator|.
name|getHowdy
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getXMLStreamReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Test writing
name|Element
name|element
init|=
operator|new
name|Element
argument_list|(
literal|"root"
argument_list|,
literal|"b"
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
operator|new
name|Document
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|type
operator|.
name|writeObject
argument_list|(
name|bean
argument_list|,
operator|new
name|JDOMWriter
argument_list|(
name|element
argument_list|)
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root[@b:bleh='bleh']"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root[@b:howdy='howdy']"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|XmlSchema
name|schema
init|=
name|newXmlSchema
argument_list|(
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|type
operator|.
name|writeSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|XmlSchemaComplexType
name|stype
init|=
operator|(
name|XmlSchemaComplexType
operator|)
name|schema
operator|.
name|getTypeByName
argument_list|(
literal|"bean"
argument_list|)
decl_stmt|;
name|boolean
name|howdy
init|=
literal|false
decl_stmt|;
name|boolean
name|bleh
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|stype
operator|.
name|getAttributes
argument_list|()
operator|.
name|getCount
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|XmlSchemaObject
name|o
init|=
name|stype
operator|.
name|getAttributes
argument_list|()
operator|.
name|getItem
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|XmlSchemaAttribute
condition|)
block|{
name|XmlSchemaAttribute
name|a
init|=
operator|(
name|XmlSchemaAttribute
operator|)
name|o
decl_stmt|;
if|if
condition|(
literal|"howdy"
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|howdy
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
literal|"bleh"
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|bleh
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
name|howdy
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bleh
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAttributeMapDifferentNS
parameter_list|()
throws|throws
name|Exception
block|{
name|BeanTypeInfo
name|info
init|=
operator|new
name|BeanTypeInfo
argument_list|(
name|SimpleBean
operator|.
name|class
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|info
operator|.
name|mapAttribute
argument_list|(
literal|"howdy"
argument_list|,
operator|new
name|QName
argument_list|(
literal|"urn:Bean2"
argument_list|,
literal|"howdy"
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|mapAttribute
argument_list|(
literal|"bleh"
argument_list|,
operator|new
name|QName
argument_list|(
literal|"urn:Bean2"
argument_list|,
literal|"bleh"
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|SimpleBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bean"
argument_list|)
argument_list|)
expr_stmt|;
name|ElementReader
name|reader
init|=
operator|new
name|ElementReader
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"bean8.xml"
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleBean
name|bean
init|=
operator|(
name|SimpleBean
operator|)
name|type
operator|.
name|readObject
argument_list|(
name|reader
argument_list|,
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bleh"
argument_list|,
name|bean
operator|.
name|getBleh
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"howdy"
argument_list|,
name|bean
operator|.
name|getHowdy
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getXMLStreamReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Test writing
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ElementWriter
name|writer
init|=
operator|new
name|ElementWriter
argument_list|(
name|bos
argument_list|,
literal|"root"
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|type
operator|.
name|writeObject
argument_list|(
name|bean
argument_list|,
name|writer
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
name|StaxBuilder
name|builder
init|=
operator|new
name|StaxBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|builder
operator|.
name|build
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|element
init|=
name|doc
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
name|addNamespace
argument_list|(
literal|"b2"
argument_list|,
literal|"urn:Bean2"
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root[@b2:bleh='bleh']"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root[@b2:howdy='howdy']"
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|BeanTypeInfo
name|info
init|=
operator|new
name|BeanTypeInfo
argument_list|(
name|SimpleBean
operator|.
name|class
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|info
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|info
operator|.
name|mapAttribute
argument_list|(
literal|"howdy"
argument_list|,
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"howdy"
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|mapElement
argument_list|(
literal|"bleh"
argument_list|,
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bleh"
argument_list|)
argument_list|)
expr_stmt|;
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|SimpleBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bean"
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleBean
name|bean
init|=
operator|new
name|SimpleBean
argument_list|()
decl_stmt|;
comment|// Test writing
name|Element
name|element
init|=
operator|new
name|Element
argument_list|(
literal|"root"
argument_list|,
literal|"b"
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
operator|new
name|Document
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|type
operator|.
name|writeObject
argument_list|(
name|bean
argument_list|,
operator|new
name|JDOMWriter
argument_list|(
name|element
argument_list|)
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"/b:root[@b:howdy]"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root/b:bleh[@xsi:nil='true']"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|XmlSchema
name|schema
init|=
name|newXmlSchema
argument_list|(
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|type
operator|.
name|writeSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|XmlSchemaComplexType
name|stype
init|=
operator|(
name|XmlSchemaComplexType
operator|)
name|schema
operator|.
name|getTypeByName
argument_list|(
literal|"bean"
argument_list|)
decl_stmt|;
name|XmlSchemaSequence
name|seq
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|stype
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|boolean
name|howdy
init|=
literal|false
decl_stmt|;
name|boolean
name|bleh
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|getCount
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|XmlSchemaObject
name|o
init|=
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|getItem
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|XmlSchemaElement
name|a
init|=
operator|(
name|XmlSchemaElement
operator|)
name|o
decl_stmt|;
if|if
condition|(
literal|"bleh"
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|bleh
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|stype
operator|.
name|getAttributes
argument_list|()
operator|.
name|getCount
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|XmlSchemaObject
name|o
init|=
name|stype
operator|.
name|getAttributes
argument_list|()
operator|.
name|getItem
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|XmlSchemaAttribute
condition|)
block|{
name|XmlSchemaAttribute
name|a
init|=
operator|(
name|XmlSchemaAttribute
operator|)
name|o
decl_stmt|;
if|if
condition|(
literal|"howdy"
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|howdy
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
name|howdy
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bleh
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNillableInt
parameter_list|()
throws|throws
name|Exception
block|{
name|BeanTypeInfo
name|info
init|=
operator|new
name|BeanTypeInfo
argument_list|(
name|IntBean
operator|.
name|class
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|info
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|IntBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bean"
argument_list|)
argument_list|)
expr_stmt|;
name|XmlSchema
name|schema
init|=
name|newXmlSchema
argument_list|(
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|type
operator|.
name|writeSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|XmlSchemaComplexType
name|btype
init|=
operator|(
name|XmlSchemaComplexType
operator|)
name|schema
operator|.
name|getTypeByName
argument_list|(
literal|"bean"
argument_list|)
decl_stmt|;
name|XmlSchemaSequence
name|seq
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|btype
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|boolean
name|int1ok
init|=
literal|false
decl_stmt|;
name|boolean
name|int2ok
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|getCount
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|XmlSchemaObject
name|o
init|=
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|getItem
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|XmlSchemaElement
name|oe
init|=
operator|(
name|XmlSchemaElement
operator|)
name|o
decl_stmt|;
if|if
condition|(
literal|"int1"
operator|.
name|equals
argument_list|(
name|oe
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|int1ok
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|oe
operator|.
name|isNillable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oe
operator|.
name|getMinOccurs
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"int2"
operator|.
name|equals
argument_list|(
name|oe
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|int2ok
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oe
operator|.
name|getMinOccurs
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|oe
operator|.
name|isNillable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
name|int1ok
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|int2ok
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNillableIntMinOccurs1
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|=
operator|new
name|AegisContext
argument_list|()
expr_stmt|;
name|TypeCreationOptions
name|config
init|=
operator|new
name|TypeCreationOptions
argument_list|()
decl_stmt|;
name|config
operator|.
name|setDefaultMinOccurs
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|config
operator|.
name|setDefaultNillable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|context
operator|.
name|setTypeCreationOptions
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|context
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|mapping
operator|=
name|context
operator|.
name|getTypeMapping
argument_list|()
expr_stmt|;
name|BeanType
name|type
init|=
operator|(
name|BeanType
operator|)
name|mapping
operator|.
name|getTypeCreator
argument_list|()
operator|.
name|createType
argument_list|(
name|IntBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|IntBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|XmlSchema
name|schema
init|=
name|newXmlSchema
argument_list|(
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|type
operator|.
name|writeSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|XmlSchemaComplexType
name|btype
init|=
operator|(
name|XmlSchemaComplexType
operator|)
name|schema
operator|.
name|getTypeByName
argument_list|(
literal|"IntBean"
argument_list|)
decl_stmt|;
name|XmlSchemaSequence
name|seq
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|btype
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|boolean
name|int1ok
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|getCount
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|XmlSchemaObject
name|o
init|=
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|getItem
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|XmlSchemaElement
name|oe
init|=
operator|(
name|XmlSchemaElement
operator|)
name|o
decl_stmt|;
if|if
condition|(
literal|"int1"
operator|.
name|equals
argument_list|(
name|oe
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|int1ok
operator|=
literal|true
expr_stmt|;
name|assertFalse
argument_list|(
name|oe
operator|.
name|isNillable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|oe
operator|.
name|getMinOccurs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
name|int1ok
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCharMappings
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|=
operator|new
name|AegisContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|mapping
operator|=
name|context
operator|.
name|getTypeMapping
argument_list|()
expr_stmt|;
name|BeanType
name|type
init|=
operator|(
name|BeanType
operator|)
name|mapping
operator|.
name|getTypeCreator
argument_list|()
operator|.
name|createType
argument_list|(
name|SimpleBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|SimpleBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|XmlSchema
name|schema
init|=
name|newXmlSchema
argument_list|(
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|type
operator|.
name|writeSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|XmlSchemaComplexType
name|btype
init|=
operator|(
name|XmlSchemaComplexType
operator|)
name|schema
operator|.
name|getTypeByName
argument_list|(
literal|"SimpleBean"
argument_list|)
decl_stmt|;
name|XmlSchemaSequence
name|seq
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|btype
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|boolean
name|charok
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|getCount
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|XmlSchemaObject
name|o
init|=
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|getItem
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|XmlSchemaElement
name|oe
init|=
operator|(
name|XmlSchemaElement
operator|)
name|o
decl_stmt|;
if|if
condition|(
literal|"character"
operator|.
name|equals
argument_list|(
name|oe
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|charok
operator|=
literal|true
expr_stmt|;
name|assertNotNull
argument_list|(
name|oe
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|oe
operator|.
name|isNillable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CharacterAsStringType
operator|.
name|CHARACTER_AS_STRING_TYPE_QNAME
argument_list|,
name|oe
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
name|charok
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByteMappings
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|=
operator|new
name|AegisContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|mapping
operator|=
name|context
operator|.
name|getTypeMapping
argument_list|()
expr_stmt|;
name|BeanType
name|type
init|=
operator|(
name|BeanType
operator|)
name|mapping
operator|.
name|getTypeCreator
argument_list|()
operator|.
name|createType
argument_list|(
name|SimpleBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|SimpleBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|XmlSchema
name|schema
init|=
name|newXmlSchema
argument_list|(
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|type
operator|.
name|writeSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|XmlSchemaComplexType
name|btype
init|=
operator|(
name|XmlSchemaComplexType
operator|)
name|schema
operator|.
name|getTypeByName
argument_list|(
literal|"SimpleBean"
argument_list|)
decl_stmt|;
name|XmlSchemaSequence
name|seq
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|btype
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|boolean
name|littleByteOk
init|=
literal|false
decl_stmt|;
name|boolean
name|bigByteOk
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|getCount
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|XmlSchemaObject
name|o
init|=
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|getItem
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|XmlSchemaElement
name|oe
init|=
operator|(
name|XmlSchemaElement
operator|)
name|o
decl_stmt|;
if|if
condition|(
literal|"littleByte"
operator|.
name|equals
argument_list|(
name|oe
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|littleByteOk
operator|=
literal|true
expr_stmt|;
name|assertNotNull
argument_list|(
name|oe
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmlSchemaConstants
operator|.
name|BYTE_QNAME
argument_list|,
name|oe
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"bigByte"
operator|.
name|equals
argument_list|(
name|oe
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|bigByteOk
operator|=
literal|true
expr_stmt|;
name|assertNotNull
argument_list|(
name|oe
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XmlSchemaConstants
operator|.
name|BYTE_QNAME
argument_list|,
name|oe
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
name|littleByteOk
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bigByteOk
argument_list|)
expr_stmt|;
name|Element
name|element
init|=
operator|new
name|Element
argument_list|(
literal|"root"
argument_list|,
literal|"b"
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
operator|new
name|Document
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|SimpleBean
name|bean
init|=
operator|new
name|SimpleBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setBigByte
argument_list|(
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
literal|0xfe
argument_list|)
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setLittleByte
argument_list|(
operator|(
name|byte
operator|)
literal|0xfd
argument_list|)
expr_stmt|;
name|type
operator|.
name|writeObject
argument_list|(
name|bean
argument_list|,
operator|new
name|JDOMWriter
argument_list|(
name|element
argument_list|)
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|Byte
name|bb
init|=
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
literal|0xfe
argument_list|)
decl_stmt|;
name|String
name|bbs
init|=
name|bb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertValid
argument_list|(
literal|"/b:root/bz:bigByte[text()='"
operator|+
name|bbs
operator|+
literal|"']"
argument_list|,
name|element
argument_list|)
expr_stmt|;
comment|// Test reading
name|ElementReader
name|reader
init|=
operator|new
name|ElementReader
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"byteBeans.xml"
argument_list|)
argument_list|)
decl_stmt|;
name|bean
operator|=
operator|(
name|SimpleBean
operator|)
name|type
operator|.
name|readObject
argument_list|(
name|reader
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|5
argument_list|,
name|bean
operator|.
name|getLittleByte
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25
argument_list|,
name|bean
operator|.
name|getBigByte
argument_list|()
operator|.
name|byteValue
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|getXMLStreamReader
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullNonNillableWithDate
parameter_list|()
throws|throws
name|Exception
block|{
name|BeanTypeInfo
name|info
init|=
operator|new
name|BeanTypeInfo
argument_list|(
name|DateBean
operator|.
name|class
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|info
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|DateBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bean"
argument_list|)
argument_list|)
expr_stmt|;
name|DateBean
name|bean
init|=
operator|new
name|DateBean
argument_list|()
decl_stmt|;
comment|// Test writing
name|Element
name|element
init|=
operator|new
name|Element
argument_list|(
literal|"root"
argument_list|,
literal|"b"
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
operator|new
name|Document
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|type
operator|.
name|writeObject
argument_list|(
name|bean
argument_list|,
operator|new
name|JDOMWriter
argument_list|(
name|element
argument_list|)
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure the date doesn't have an element. Its non nillable so it
comment|// just
comment|// shouldn't be there.
name|assertInvalid
argument_list|(
literal|"/b:root/b:date"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root"
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtendedBean
parameter_list|()
throws|throws
name|Exception
block|{
name|BeanTypeInfo
name|info
init|=
operator|new
name|BeanTypeInfo
argument_list|(
name|ExtendedBean
operator|.
name|class
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|info
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|ExtendedBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bean"
argument_list|)
argument_list|)
expr_stmt|;
name|PropertyDescriptor
index|[]
name|pds
init|=
name|info
operator|.
name|getPropertyDescriptors
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|pds
operator|.
name|length
argument_list|)
expr_stmt|;
name|ExtendedBean
name|bean
init|=
operator|new
name|ExtendedBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setHowdy
argument_list|(
literal|"howdy"
argument_list|)
expr_stmt|;
name|Element
name|element
init|=
operator|new
name|Element
argument_list|(
literal|"root"
argument_list|,
literal|"b"
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
operator|new
name|Document
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|type
operator|.
name|writeObject
argument_list|(
name|bean
argument_list|,
operator|new
name|JDOMWriter
argument_list|(
name|element
argument_list|)
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root/b:howdy[text()='howdy']"
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testByteBean
parameter_list|()
throws|throws
name|Exception
block|{
name|BeanTypeInfo
name|info
init|=
operator|new
name|BeanTypeInfo
argument_list|(
name|ByteBean
operator|.
name|class
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|info
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|ByteBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bean"
argument_list|)
argument_list|)
expr_stmt|;
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"data"
argument_list|)
decl_stmt|;
name|Type
name|dataType
init|=
name|type
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getType
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dataType
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|type
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|isNillable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|ByteBean
name|bean
init|=
operator|new
name|ByteBean
argument_list|()
decl_stmt|;
comment|// Test writing
name|Element
name|element
init|=
operator|new
name|Element
argument_list|(
literal|"root"
argument_list|,
literal|"b"
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
operator|new
name|Document
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|type
operator|.
name|writeObject
argument_list|(
name|bean
argument_list|,
operator|new
name|JDOMWriter
argument_list|(
name|element
argument_list|)
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure the date doesn't have an element. Its non nillable so it
comment|// just
comment|// shouldn't be there.
name|addNamespace
argument_list|(
literal|"xsi"
argument_list|,
name|SOAPConstants
operator|.
name|XSI_NS
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root/b:data[@xsi:nil='true']"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|bean
operator|=
operator|(
name|ByteBean
operator|)
name|type
operator|.
name|readObject
argument_list|(
operator|new
name|JDOMReader
argument_list|(
name|element
argument_list|)
argument_list|,
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bean
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bean
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSetRequired
parameter_list|()
throws|throws
name|Exception
block|{
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|()
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|GoodBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:foo"
argument_list|,
literal|"BadBean"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|type
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getElements
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|=
operator|new
name|BeanType
argument_list|()
expr_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|BadBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:foo"
argument_list|,
literal|"BadBean"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|type
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getElements
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|=
operator|new
name|BeanType
argument_list|()
expr_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|BadBean2
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:foo"
argument_list|,
literal|"BadBean2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|type
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getElements
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|DateBean
block|{
specifier|private
name|Date
name|date
decl_stmt|;
specifier|public
name|Date
name|getDate
parameter_list|()
block|{
return|return
name|date
return|;
block|}
specifier|public
name|void
name|setDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|this
operator|.
name|date
operator|=
name|date
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|IntBean
block|{
specifier|private
name|Integer
name|int1
decl_stmt|;
specifier|private
name|int
name|int2
decl_stmt|;
specifier|public
name|Integer
name|getInt1
parameter_list|()
block|{
return|return
name|int1
return|;
block|}
specifier|public
name|void
name|setInt1
parameter_list|(
name|Integer
name|int1
parameter_list|)
block|{
name|this
operator|.
name|int1
operator|=
name|int1
expr_stmt|;
block|}
specifier|public
name|int
name|getInt2
parameter_list|()
block|{
return|return
name|int2
return|;
block|}
specifier|public
name|void
name|setInt2
parameter_list|(
name|int
name|int2
parameter_list|)
block|{
name|this
operator|.
name|int2
operator|=
name|int2
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ByteBean
block|{
specifier|private
name|byte
index|[]
name|data
decl_stmt|;
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
specifier|public
name|void
name|setData
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
block|}
comment|// This class only has a read property, no write
specifier|public
specifier|static
class|class
name|GoodBean
block|{
specifier|private
name|String
name|string
decl_stmt|;
specifier|public
name|String
name|getString
parameter_list|()
block|{
return|return
name|string
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BadBean
block|{
specifier|public
name|String
name|delete
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BadBean2
block|{
specifier|public
name|void
name|setString
parameter_list|(
name|String
name|string
parameter_list|)
block|{         }
block|}
specifier|public
specifier|static
class|class
name|ExtendedBean
extends|extends
name|SimpleBean
block|{
specifier|private
name|String
name|howdy
decl_stmt|;
specifier|public
name|String
name|getHowdy
parameter_list|()
block|{
return|return
name|howdy
return|;
block|}
specifier|public
name|void
name|setHowdy
parameter_list|(
name|String
name|howdy
parameter_list|)
block|{
name|this
operator|.
name|howdy
operator|=
name|howdy
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

