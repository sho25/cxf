begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|namespaces
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|factory
operator|.
name|WSDLFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AbstractAegisTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|databinding
operator|.
name|AegisDatabinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|namespaces
operator|.
name|data
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|namespaces
operator|.
name|impl
operator|.
name|NameServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|AegisType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * Regression test for CXF-959. This is a point test for consistent  * use of namespace prefixes in generated WSDL/XMLSchema. This test could  * be made into a more comprehensive functional test by exercising  * cases such as multiple schema.  */
end_comment

begin_class
specifier|public
class|class
name|NamespaceConfusionTest
extends|extends
name|AbstractAegisTest
block|{
specifier|private
name|TypeMapping
name|tm
decl_stmt|;
specifier|private
name|Service
name|service
decl_stmt|;
specifier|private
name|AegisDatabinding
name|databinding
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Server
name|s
init|=
name|createService
argument_list|(
name|NameServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|service
operator|=
name|s
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getService
argument_list|()
expr_stmt|;
name|databinding
operator|=
operator|(
name|AegisDatabinding
operator|)
name|service
operator|.
name|getDataBinding
argument_list|()
expr_stmt|;
name|tm
operator|=
name|databinding
operator|.
name|getAegisContext
argument_list|()
operator|.
name|getTypeMapping
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|getNamespaceForPrefix
parameter_list|(
name|Element
name|rootElement
parameter_list|,
name|Element
name|typeElement
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|Exception
block|{
name|Element
name|schemaElement
init|=
operator|(
name|Element
operator|)
name|assertValid
argument_list|(
literal|"ancestor::xsd:schema"
argument_list|,
name|typeElement
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NamedNodeMap
name|attributes
init|=
name|schemaElement
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|Attr
name|attr
init|=
operator|(
name|Attr
operator|)
name|attributes
operator|.
name|item
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"xmlns:"
argument_list|)
condition|)
block|{
name|String
name|attrPrefix
init|=
name|attr
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|attrPrefix
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|attr
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
name|attributes
operator|=
name|rootElement
operator|.
name|getAttributes
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|Attr
name|attr
init|=
operator|(
name|Attr
operator|)
name|attributes
operator|.
name|item
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"xmlns:"
argument_list|)
condition|)
block|{
name|String
name|attrPrefix
init|=
name|attr
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|attrPrefix
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|attr
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNameNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|doc
init|=
name|getWSDLDocument
argument_list|(
literal|"NameServiceImpl"
argument_list|)
decl_stmt|;
name|Element
name|rootElement
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|Definition
name|def
init|=
name|getWSDLDefinition
argument_list|(
literal|"NameServiceImpl"
argument_list|)
decl_stmt|;
name|StringWriter
name|sink
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|WSDLFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newWSDLWriter
argument_list|()
operator|.
name|writeWSDL
argument_list|(
name|def
argument_list|,
name|sink
argument_list|)
expr_stmt|;
name|NodeList
name|aonNodes
init|=
name|assertValid
argument_list|(
literal|"//xsd:complexType[@name='ArrayOfName']/xsd:sequence/xsd:element"
argument_list|,
name|doc
argument_list|)
decl_stmt|;
name|Element
name|arrayOfNameElement
init|=
operator|(
name|Element
operator|)
name|aonNodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|typename
init|=
name|arrayOfNameElement
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|typename
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|String
name|uri
init|=
name|getNamespaceForPrefix
argument_list|(
name|rootElement
argument_list|,
name|arrayOfNameElement
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|AegisType
name|nameType
init|=
name|tm
operator|.
name|getTypeCreator
argument_list|()
operator|.
name|createType
argument_list|(
name|Name
operator|.
name|class
argument_list|)
decl_stmt|;
name|QName
name|tmQname
init|=
name|nameType
operator|.
name|getSchemaType
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|tmQname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

