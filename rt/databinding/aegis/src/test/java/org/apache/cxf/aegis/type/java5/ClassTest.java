begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|java5
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AbstractAegisTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AegisContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|DatabindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|databinding
operator|.
name|AegisDatabinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|AegisType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|StringType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|XMLSchemaQNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleTypeRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ClassTest
extends|extends
name|AbstractAegisTest
block|{
name|Server
name|server
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|startServer
parameter_list|()
throws|throws
name|Exception
block|{
name|AegisContext
name|context
init|=
operator|new
name|AegisContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|context
operator|.
name|getTypeMapping
argument_list|()
operator|.
name|register
argument_list|(
operator|new
name|ClassAsStringType
argument_list|()
argument_list|)
expr_stmt|;
name|ServerFactoryBean
name|b
init|=
operator|new
name|ServerFactoryBean
argument_list|()
decl_stmt|;
name|b
operator|.
name|setDataBinding
argument_list|(
operator|new
name|AegisDatabinding
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|setServiceClass
argument_list|(
name|GenericsService
operator|.
name|class
argument_list|)
expr_stmt|;
name|b
operator|.
name|setAddress
argument_list|(
literal|"local://GenericsService"
argument_list|)
expr_stmt|;
name|server
operator|=
name|b
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopServer
parameter_list|()
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testType
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|getWSDLDocument
argument_list|(
literal|"GenericsService"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|this
operator|.
name|assertValidBoolean
argument_list|(
literal|"//xsd:simpleType[@name='class']/xsd:restriction"
argument_list|,
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|GenericsService
block|{
specifier|public
parameter_list|<
name|T
extends|extends
name|Serializable
parameter_list|>
name|T
name|createInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
return|return
name|type
operator|.
name|newInstance
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ClassAsStringType
extends|extends
name|AegisType
block|{
specifier|public
specifier|static
specifier|final
name|QName
name|CLASS_AS_STRING_TYPE_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/my/class/test"
argument_list|,
literal|"class"
argument_list|)
decl_stmt|;
specifier|private
name|StringType
name|stringType
decl_stmt|;
specifier|public
name|ClassAsStringType
parameter_list|()
block|{
name|stringType
operator|=
operator|new
name|StringType
argument_list|()
expr_stmt|;
name|super
operator|.
name|setTypeClass
argument_list|(
name|Class
operator|.
name|class
argument_list|)
expr_stmt|;
name|super
operator|.
name|setSchemaType
argument_list|(
name|CLASS_AS_STRING_TYPE_QNAME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|readObject
parameter_list|(
name|MessageReader
name|reader
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|DatabindingException
block|{
name|String
name|className
init|=
operator|(
name|String
operator|)
name|stringType
operator|.
name|readObject
argument_list|(
name|reader
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
literal|null
decl_stmt|;
try|try
block|{
name|context
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|x
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Unable to dynamically load class '"
operator|+
name|className
operator|+
literal|"'"
argument_list|,
name|x
argument_list|)
throw|;
block|}
return|return
name|cls
return|;
block|}
specifier|public
name|void
name|writeObject
parameter_list|(
name|Object
name|object
parameter_list|,
name|MessageWriter
name|writer
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|DatabindingException
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|stringType
operator|.
name|writeObject
argument_list|(
literal|null
argument_list|,
name|writer
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
name|stringType
operator|.
name|writeObject
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|,
name|writer
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|writeSchema
parameter_list|(
name|XmlSchema
name|root
parameter_list|)
block|{
name|XmlSchemaSimpleType
name|xst
init|=
operator|new
name|XmlSchemaSimpleType
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|xst
operator|.
name|setName
argument_list|(
literal|"class"
argument_list|)
expr_stmt|;
name|XmlSchemaSimpleTypeRestriction
name|content
init|=
operator|new
name|XmlSchemaSimpleTypeRestriction
argument_list|()
decl_stmt|;
name|content
operator|.
name|setBaseTypeName
argument_list|(
name|XMLSchemaQNames
operator|.
name|XSD_STRING
argument_list|)
expr_stmt|;
name|xst
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|usesUtilityTypes
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

