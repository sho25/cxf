begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws2
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws2
operator|.
name|WS2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws2
operator|.
name|common
operator|.
name|ParentBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws2
operator|.
name|common
operator|.
name|exception
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws2
operator|.
name|common
operator|.
name|exception
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws2
operator|.
name|common
operator|.
name|pack1
operator|.
name|ContentBean1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws2
operator|.
name|common
operator|.
name|pack2
operator|.
name|ContentBean2
import|;
end_import

begin_class
specifier|public
class|class
name|WS2Impl
implements|implements
name|WS2
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ParentBean
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|WS2Impl
parameter_list|()
block|{
name|ParentBean
name|x
init|=
operator|new
name|ParentBean
argument_list|(
literal|"X"
argument_list|,
operator|new
name|ContentBean1
argument_list|(
literal|"data1-X"
argument_list|)
argument_list|)
decl_stmt|;
name|ParentBean
name|y
init|=
operator|new
name|ParentBean
argument_list|(
literal|"Y"
argument_list|,
operator|new
name|ContentBean2
argument_list|(
literal|"data1-Y"
argument_list|,
literal|"content2-Y"
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|x
operator|.
name|getId
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|y
operator|.
name|getId
argument_list|()
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|putParentBean
parameter_list|(
name|ParentBean
name|parentBean
parameter_list|)
throws|throws
name|AlreadyExistsException
block|{
name|String
name|id
init|=
name|parentBean
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
name|id
argument_list|)
throw|;
block|}
name|map
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|parentBean
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|ParentBean
name|getParentBean
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|NotFoundException
block|{
name|ParentBean
name|result
init|=
name|map
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|id
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

