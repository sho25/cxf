begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|mtom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|MockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_comment
comment|/**  * Unit test for DataSourceType class, which also tests any static helper functions invoked  * by its implementation.  *  */
end_comment

begin_class
specifier|public
class|class
name|DataSourceTypeTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|inputStreamShouldBeClosedOnHappyPath
parameter_list|()
throws|throws
name|Exception
block|{
name|DataSource
name|ds
init|=
name|mock
argument_list|(
name|MockType
operator|.
name|STRICT
argument_list|,
name|DataSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|mock
argument_list|(
name|MockType
operator|.
name|STRICT
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|ds
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|ds
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|is
operator|.
name|available
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|is
operator|.
name|read
argument_list|(
name|anyObject
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|DataSourceType
name|dst
init|=
operator|new
name|DataSourceType
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dst
operator|.
name|getBytes
argument_list|(
name|ds
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|ds
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RuntimeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|inputStreamShouldBeClosedOnReadingException
parameter_list|()
throws|throws
name|Exception
block|{
name|DataSource
name|ds
init|=
name|mock
argument_list|(
name|MockType
operator|.
name|STRICT
argument_list|,
name|DataSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|mock
argument_list|(
name|MockType
operator|.
name|STRICT
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|ds
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|ds
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|is
operator|.
name|available
argument_list|()
argument_list|)
operator|.
name|andThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|DataSourceType
name|dst
init|=
operator|new
name|DataSourceType
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|dst
operator|.
name|getBytes
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|verify
argument_list|(
name|ds
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

