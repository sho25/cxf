begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|stax
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|util
operator|.
name|jdom
operator|.
name|StaxBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|test
operator|.
name|AbstractCXFTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|output
operator|.
name|DOMOutputter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:dan@envoisolutions.com">Dan Diephouse</a>  * @since Nov 4, 2004  */
end_comment

begin_class
specifier|public
class|class
name|WriterTest
extends|extends
name|AbstractCXFTest
block|{
name|File
name|output
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUpBus
argument_list|()
expr_stmt|;
name|output
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"writetest"
argument_list|,
literal|".xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|output
operator|.
name|exists
argument_list|()
condition|)
block|{
name|output
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLiteral
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ElementWriter
name|writer
init|=
operator|new
name|ElementWriter
argument_list|(
name|bos
argument_list|,
literal|"root"
argument_list|,
literal|"urn:test"
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// System.out.println(bos.toString());
name|StaxBuilder
name|builder
init|=
operator|new
name|StaxBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|builder
operator|.
name|build
argument_list|(
operator|new
name|StringReader
argument_list|(
name|bos
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|testWrite
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|MessageWriter
name|writer
parameter_list|)
block|{
name|MessageWriter
name|nons
init|=
name|writer
operator|.
name|getElementWriter
argument_list|(
literal|"nons"
argument_list|)
decl_stmt|;
name|nons
operator|.
name|writeValue
argument_list|(
literal|"nons"
argument_list|)
expr_stmt|;
name|nons
operator|.
name|close
argument_list|()
expr_stmt|;
name|MessageWriter
name|intval
init|=
name|writer
operator|.
name|getElementWriter
argument_list|(
literal|"int"
argument_list|)
decl_stmt|;
name|intval
operator|.
name|writeValueAsInt
argument_list|(
operator|new
name|Integer
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|intval
operator|.
name|close
argument_list|()
expr_stmt|;
name|MessageWriter
name|child1
init|=
name|writer
operator|.
name|getElementWriter
argument_list|(
literal|"child1"
argument_list|,
literal|"urn:child1"
argument_list|)
decl_stmt|;
name|MessageWriter
name|att1
init|=
name|child1
operator|.
name|getAttributeWriter
argument_list|(
literal|"att1"
argument_list|)
decl_stmt|;
name|att1
operator|.
name|writeValue
argument_list|(
literal|"att1"
argument_list|)
expr_stmt|;
name|att1
operator|.
name|close
argument_list|()
expr_stmt|;
name|MessageWriter
name|att2
init|=
name|child1
operator|.
name|getAttributeWriter
argument_list|(
literal|"att2"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|att2
operator|.
name|writeValue
argument_list|(
literal|"att2"
argument_list|)
expr_stmt|;
name|att2
operator|.
name|close
argument_list|()
expr_stmt|;
name|MessageWriter
name|att3
init|=
name|child1
operator|.
name|getAttributeWriter
argument_list|(
literal|"att3"
argument_list|,
literal|"urn:att3"
argument_list|)
decl_stmt|;
name|att3
operator|.
name|writeValue
argument_list|(
literal|"att3"
argument_list|)
expr_stmt|;
name|att3
operator|.
name|close
argument_list|()
expr_stmt|;
name|MessageWriter
name|att4
init|=
name|child1
operator|.
name|getAttributeWriter
argument_list|(
literal|"att4"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|att4
operator|.
name|writeValue
argument_list|(
literal|"att4"
argument_list|)
expr_stmt|;
name|att4
operator|.
name|close
argument_list|()
expr_stmt|;
name|child1
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testWrite
parameter_list|(
name|Document
name|jdoc
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|doc
init|=
operator|new
name|DOMOutputter
argument_list|()
operator|.
name|output
argument_list|(
name|jdoc
argument_list|)
decl_stmt|;
name|addNamespace
argument_list|(
literal|"t"
argument_list|,
literal|"urn:test"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"c"
argument_list|,
literal|"urn:child1"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"a"
argument_list|,
literal|"urn:att3"
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/t:root/t:nons[text()='nons']"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/t:root/t:int[text()='10000']"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/t:root/c:child1"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/t:root/c:child1[@c:att1]"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/t:root/c:child1[@att2]"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/t:root/c:child1[@a:att3]"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/t:root/c:child1[@att4]"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

