begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|BookServiceImpl
implements|implements
name|BookService
block|{
specifier|private
name|List
argument_list|<
name|Book
argument_list|>
name|allBooks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|BookServiceImpl
parameter_list|()
block|{     }
specifier|public
name|void
name|addBook
parameter_list|(
name|Book
name|book
parameter_list|)
block|{
name|allBooks
operator|.
name|add
argument_list|(
name|book
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addBooks
parameter_list|(
name|Book
index|[]
name|books
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|books
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|allBooks
operator|.
name|add
argument_list|(
name|books
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Book
index|[]
name|getBooks
parameter_list|()
block|{
return|return
name|allBooks
operator|.
name|toArray
argument_list|(
operator|new
name|Book
index|[
name|allBooks
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|Book
name|findBook
parameter_list|(
name|String
name|isbn
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allBooks
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Book
name|book
init|=
name|allBooks
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|isbn
operator|.
name|equals
argument_list|(
name|book
operator|.
name|getIsbn
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|book
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

