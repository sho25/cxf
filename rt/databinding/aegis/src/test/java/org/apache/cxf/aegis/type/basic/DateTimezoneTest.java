begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AbstractAegisTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AegisContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|constants
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DateTimezoneTest
extends|extends
name|AbstractAegisTest
block|{
name|TypeMapping
name|mapping
decl_stmt|;
specifier|private
name|AegisContext
name|context
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|context
operator|=
operator|new
name|AegisContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|mapping
operator|=
name|context
operator|.
name|getTypeMapping
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimezoneLessCalendar
parameter_list|()
throws|throws
name|Exception
block|{
name|BeanTypeInfo
name|info
init|=
operator|new
name|BeanTypeInfo
argument_list|(
name|CalendarBean
operator|.
name|class
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|register
argument_list|(
name|Calendar
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DATETIME
argument_list|,
operator|new
name|TimezoneLessDateType
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|register
argument_list|(
name|Calendar
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DATE
argument_list|,
operator|new
name|TimezoneLessDateType
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|CalendarBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bean"
argument_list|)
argument_list|)
expr_stmt|;
name|CalendarBean
name|bean
init|=
operator|new
name|CalendarBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setCalendar
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test writing
name|Element
name|element
init|=
name|writeObjectToElement
argument_list|(
name|type
argument_list|,
name|bean
argument_list|,
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertTimezoneLessString
argument_list|(
name|element
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimezoneLessDate
parameter_list|()
throws|throws
name|Exception
block|{
name|BeanTypeInfo
name|info
init|=
operator|new
name|BeanTypeInfo
argument_list|(
name|DateBean
operator|.
name|class
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|mapping
operator|.
name|register
argument_list|(
name|Date
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DATETIME
argument_list|,
operator|new
name|TimezoneLessDateType
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|register
argument_list|(
name|Date
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DATE
argument_list|,
operator|new
name|TimezoneLessDateType
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|DateBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bean"
argument_list|)
argument_list|)
expr_stmt|;
name|DateBean
name|bean
init|=
operator|new
name|DateBean
argument_list|()
decl_stmt|;
name|bean
operator|.
name|setDate
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test writing
name|Element
name|element
init|=
name|writeObjectToElement
argument_list|(
name|type
argument_list|,
name|bean
argument_list|,
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertTimezoneLessString
argument_list|(
name|element
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertTimezoneLessString
parameter_list|(
name|String
name|dateString
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|dateString
operator|.
name|length
argument_list|()
operator|<=
literal|10
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dateString
operator|.
name|contains
argument_list|(
literal|"+"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dateString
operator|.
name|contains
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//TODO add tests with Timezones
specifier|public
specifier|static
class|class
name|CalendarBean
block|{
specifier|private
name|Calendar
name|calendar
decl_stmt|;
specifier|public
name|Calendar
name|getCalendar
parameter_list|()
block|{
return|return
name|calendar
return|;
block|}
specifier|public
name|void
name|setCalendar
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
name|this
operator|.
name|calendar
operator|=
name|calendar
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DateBean
block|{
specifier|private
name|Date
name|date
decl_stmt|;
specifier|public
name|Date
name|getDate
parameter_list|()
block|{
return|return
name|date
return|;
block|}
specifier|public
name|void
name|setDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|this
operator|.
name|date
operator|=
name|date
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

