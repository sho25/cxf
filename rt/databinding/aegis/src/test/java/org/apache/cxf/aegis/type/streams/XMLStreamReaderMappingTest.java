begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|streams
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AbstractAegisTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AegisContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AegisReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|DefaultTypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|xml
operator|.
name|XMLStreamReaderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|constants
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|XMLStreamReaderMappingTest
extends|extends
name|AbstractAegisTest
block|{
specifier|protected
name|DefaultTypeMapping
name|mapping
decl_stmt|;
specifier|private
name|AegisContext
name|context
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|addNamespace
argument_list|(
literal|"b"
argument_list|,
literal|"urn:beanz"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"xsi"
argument_list|,
name|Constants
operator|.
name|URI_2001_SCHEMA_XSI
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|AegisContext
argument_list|()
expr_stmt|;
comment|// create a different mapping than the context creates.
name|TypeMapping
name|baseMapping
init|=
name|DefaultTypeMapping
operator|.
name|createSoap11TypeMapping
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|mapping
operator|=
operator|new
name|DefaultTypeMapping
argument_list|(
name|Constants
operator|.
name|URI_2001_SCHEMA_XSD
argument_list|,
name|baseMapping
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|register
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|,
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"SimpleBean"
argument_list|)
argument_list|,
operator|new
name|XMLStreamReaderType
argument_list|()
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|setTypeCreator
argument_list|(
name|context
operator|.
name|createTypeCreator
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|context
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadStream
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test reading
name|InputStream
name|is
init|=
name|getResourceAsStream
argument_list|(
literal|"bean1.xml"
argument_list|)
decl_stmt|;
name|XMLInputFactory
name|inputFactory
init|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLStreamReader
name|inputReader
init|=
name|inputFactory
operator|.
name|createXMLStreamReader
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|AegisReader
argument_list|<
name|XMLStreamReader
argument_list|>
name|reader
init|=
name|context
operator|.
name|createXMLStreamReader
argument_list|()
decl_stmt|;
name|Object
name|what
init|=
name|reader
operator|.
name|read
argument_list|(
name|inputReader
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|what
operator|instanceof
name|XMLStreamReader
argument_list|)
expr_stmt|;
name|XMLStreamReader
name|beanReader
init|=
operator|(
name|XMLStreamReader
operator|)
name|what
decl_stmt|;
name|beanReader
operator|.
name|nextTag
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bleh"
argument_list|,
name|beanReader
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Context
name|getContext
parameter_list|()
block|{
name|AegisContext
name|globalContext
init|=
operator|new
name|AegisContext
argument_list|()
decl_stmt|;
name|globalContext
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|globalContext
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
return|return
operator|new
name|Context
argument_list|(
name|globalContext
argument_list|)
return|;
block|}
block|}
end_class

end_unit

