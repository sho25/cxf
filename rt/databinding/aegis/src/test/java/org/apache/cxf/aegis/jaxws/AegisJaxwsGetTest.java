begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|methods
operator|.
name|GetMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|databinding
operator|.
name|AegisDatabinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|services
operator|.
name|Echo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractInDatabindingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|URIMappingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|test
operator|.
name|AbstractCXFTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|test
operator|.
name|XPathAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|testutil
operator|.
name|common
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|AegisJaxwsGetTest
extends|extends
name|AbstractCXFTest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PORT
init|=
name|TestUtil
operator|.
name|getPortNumber
argument_list|(
name|AegisJaxwsGetTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|JaxWsServerFactoryBean
name|sf
init|=
operator|new
name|JaxWsServerFactoryBean
argument_list|()
decl_stmt|;
name|sf
operator|.
name|setAddress
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/Echo"
argument_list|)
expr_stmt|;
name|sf
operator|.
name|setDataBinding
argument_list|(
operator|new
name|AegisDatabinding
argument_list|()
argument_list|)
expr_stmt|;
name|sf
operator|.
name|setServiceBean
argument_list|(
operator|new
name|Echo
argument_list|()
argument_list|)
expr_stmt|;
name|sf
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|URIMappingInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
name|sf
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// turn off nanny in URIMappingInterceptor
name|server
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|put
argument_list|(
name|AbstractInDatabindingInterceptor
operator|.
name|NO_VALIDATE_PARTS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|ServerFactoryBean
name|sf2
init|=
operator|new
name|ServerFactoryBean
argument_list|()
decl_stmt|;
name|sf2
operator|.
name|setAddress
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/SimpleEcho"
argument_list|)
expr_stmt|;
name|sf2
operator|.
name|setDataBinding
argument_list|(
operator|new
name|AegisDatabinding
argument_list|()
argument_list|)
expr_stmt|;
name|sf2
operator|.
name|setServiceBean
argument_list|(
operator|new
name|Echo
argument_list|()
argument_list|)
expr_stmt|;
name|sf2
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|URIMappingInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|=
name|sf2
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// turn off nanny in URIMappingInterceptor
name|server
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|put
argument_list|(
name|AbstractInDatabindingInterceptor
operator|.
name|NO_VALIDATE_PARTS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HttpClient
name|createClient
parameter_list|()
block|{
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|httpClient
operator|.
name|getHttpConnectionManager
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|setConnectionTimeout
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
return|return
name|httpClient
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEcho
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpClient
name|httpClient
init|=
name|createClient
argument_list|()
decl_stmt|;
name|String
name|url
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/Echo/echo/echo/hello"
decl_stmt|;
name|HttpMethod
name|method
init|=
literal|null
decl_stmt|;
name|method
operator|=
operator|new
name|GetMethod
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|httpClient
operator|.
name|executeMethod
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|method
operator|.
name|getResponseBodyAsString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
name|httpClient
operator|=
name|createClient
argument_list|()
expr_stmt|;
name|url
operator|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/Echo/echo/echo/hello?wsdl"
expr_stmt|;
name|method
operator|=
operator|new
name|GetMethod
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|status
operator|=
name|httpClient
operator|.
name|executeMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|method
operator|.
name|getResponseBodyAsStream
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ns
operator|.
name|put
argument_list|(
literal|"xsd"
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|)
expr_stmt|;
name|NodeList
name|nl
init|=
name|XPathAssert
operator|.
name|assertValid
argument_list|(
literal|"//xsd:element[@name='firstHeader']"
argument_list|,
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|ns
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nl
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEchoSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpClient
name|httpClient
init|=
name|createClient
argument_list|()
decl_stmt|;
name|String
name|url
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/SimpleEcho/simpleEcho/string/hello"
decl_stmt|;
name|HttpMethod
name|method
init|=
literal|null
decl_stmt|;
name|method
operator|=
operator|new
name|GetMethod
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|int
name|status
init|=
name|httpClient
operator|.
name|executeMethod
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|method
operator|.
name|getResponseBodyAsString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

