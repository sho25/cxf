begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|namespaces
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|factory
operator|.
name|WSDLFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AbstractAegisTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|databinding
operator|.
name|AegisDatabinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|namespaces
operator|.
name|impl
operator|.
name|NameServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test of the ability of the user to control prefixes by specifying them in a  * map.  */
end_comment

begin_class
specifier|public
class|class
name|ExplicitPrefixTest
extends|extends
name|AbstractAegisTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|AEGIS_TEST_NAMESPACE_PREFIX_XYZZY
init|=
literal|"xyzzy"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URN_AEGIS_NAMESPACE_TEST
init|=
literal|"urn:aegis:namespace:test"
decl_stmt|;
specifier|static
class|class
name|ServiceAndMapping
block|{
specifier|private
name|TypeMapping
name|typeMapping
decl_stmt|;
specifier|private
name|Service
name|service
decl_stmt|;
specifier|private
name|Server
name|server
decl_stmt|;
comment|/**          * *          *          * @return Returns the server.          */
specifier|public
name|Server
name|getServer
parameter_list|()
block|{
return|return
name|server
return|;
block|}
comment|/**          * @param server The server to set.          */
specifier|public
name|void
name|setServer
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
comment|/**          * *          *          * @return Returns the typeMapping.          */
specifier|public
name|TypeMapping
name|getTypeMapping
parameter_list|()
block|{
return|return
name|typeMapping
return|;
block|}
comment|/**          * @param typeMapping The typeMapping to set.          */
specifier|public
name|void
name|setTypeMapping
parameter_list|(
name|TypeMapping
name|typeMapping
parameter_list|)
block|{
name|this
operator|.
name|typeMapping
operator|=
name|typeMapping
expr_stmt|;
block|}
comment|/**          * *          *          * @return Returns the service.          */
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
name|service
return|;
block|}
comment|/**          * @param service The service to set.          */
specifier|public
name|void
name|setService
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
block|}
block|}
specifier|private
name|ServiceAndMapping
name|setupService
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|seiClass
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
block|{
name|AegisDatabinding
name|db
init|=
operator|new
name|AegisDatabinding
argument_list|()
decl_stmt|;
name|db
operator|.
name|setNamespaceMap
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|Server
name|s
init|=
name|createService
argument_list|(
name|seiClass
argument_list|,
literal|null
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|ServiceAndMapping
name|serviceAndMapping
init|=
operator|new
name|ServiceAndMapping
argument_list|()
decl_stmt|;
name|serviceAndMapping
operator|.
name|setServer
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|serviceAndMapping
operator|.
name|setService
argument_list|(
name|s
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
name|serviceAndMapping
operator|.
name|setTypeMapping
argument_list|(
operator|(
name|TypeMapping
operator|)
name|serviceAndMapping
operator|.
name|getService
argument_list|()
operator|.
name|get
argument_list|(
name|TypeMapping
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|serviceAndMapping
return|;
block|}
comment|/**      * The W3C dom is not helpful in looking at declarations. We could convert      * to JDOM, but this is enough to get the job done.      *      * @param node      * @return      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getNodeNamespaceDeclarations
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|NamedNodeMap
name|attributes
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|Attr
name|attr
init|=
operator|(
name|Attr
operator|)
name|attributes
operator|.
name|item
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"xmlns:"
argument_list|)
condition|)
block|{
name|String
index|[]
name|ns
init|=
name|attr
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|ns
index|[
literal|1
index|]
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * This substitutes for using the commons-collection BiDiMap.      * @param nsmap      * @param namespace      * @return      */
specifier|private
name|String
name|lookupPrefix
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsmap
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nspair
range|:
name|nsmap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|namespace
operator|.
name|equals
argument_list|(
name|nspair
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|nspair
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOnePrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|URN_AEGIS_NAMESPACE_TEST
argument_list|,
name|AEGIS_TEST_NAMESPACE_PREFIX_XYZZY
argument_list|)
expr_stmt|;
name|ServiceAndMapping
name|serviceAndMapping
init|=
name|setupService
argument_list|(
name|NameServiceImpl
operator|.
name|class
argument_list|,
name|mappings
argument_list|)
decl_stmt|;
name|Definition
name|def
init|=
name|getWSDLDefinition
argument_list|(
literal|"NameServiceImpl"
argument_list|)
decl_stmt|;
name|StringWriter
name|wsdlSink
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|WSDLFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newWSDLWriter
argument_list|()
operator|.
name|writeWSDL
argument_list|(
name|def
argument_list|,
name|wsdlSink
argument_list|)
expr_stmt|;
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|wsdlDoc
init|=
name|getWSDLDocument
argument_list|(
literal|"NameServiceImpl"
argument_list|)
decl_stmt|;
name|Element
name|rootElement
init|=
name|wsdlDoc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|addNamespace
argument_list|(
name|AEGIS_TEST_NAMESPACE_PREFIX_XYZZY
argument_list|,
name|URN_AEGIS_NAMESPACE_TEST
argument_list|)
expr_stmt|;
name|assertXPathEquals
argument_list|(
literal|"//namespace::xyzzy"
argument_list|,
name|URN_AEGIS_NAMESPACE_TEST
argument_list|,
name|rootElement
argument_list|)
expr_stmt|;
name|Element
name|nameSchema
init|=
operator|(
name|Element
operator|)
name|assertValid
argument_list|(
literal|"//xsd:schema[@targetNamespace='urn:aegis:namespace:test']"
argument_list|,
name|rootElement
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namePrefixes
init|=
name|getNodeNamespaceDeclarations
argument_list|(
name|nameSchema
argument_list|)
decl_stmt|;
comment|// there should be no TNS prefix, since the TNS namespace is explicitly
comment|// xyzzy.
name|assertFalse
argument_list|(
name|namePrefixes
operator|.
name|containsKey
argument_list|(
literal|"tns"
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|serviceSchema
init|=
operator|(
name|Element
operator|)
name|assertValid
argument_list|(
literal|"//xsd:schema[@targetNamespace='http://impl.namespaces.aegis.cxf.apache.org']"
argument_list|,
name|rootElement
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|servicePrefixes
init|=
name|getNodeNamespaceDeclarations
argument_list|(
name|serviceSchema
argument_list|)
decl_stmt|;
name|String
name|testPrefix
init|=
name|lookupPrefix
argument_list|(
name|servicePrefixes
argument_list|,
name|URN_AEGIS_NAMESPACE_TEST
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|AEGIS_TEST_NAMESPACE_PREFIX_XYZZY
argument_list|,
name|testPrefix
argument_list|)
expr_stmt|;
name|serviceAndMapping
operator|.
name|getServer
argument_list|()
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

