begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|stax
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|FactoryConfigurationError
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|test
operator|.
name|AbstractCXFTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:dan@envoisolutions.com">Dan Diephouse</a>  * @since Nov 4, 2004  */
end_comment

begin_class
specifier|public
class|class
name|ReaderTest
extends|extends
name|AbstractCXFTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testLiteralReader
parameter_list|()
throws|throws
name|Exception
block|{
name|ElementReader
name|lr
init|=
name|getStreamReader
argument_list|(
literal|"bean11.xml"
argument_list|)
decl_stmt|;
name|testReading
argument_list|(
name|lr
argument_list|)
expr_stmt|;
name|lr
operator|=
name|getStreamReader
argument_list|(
literal|"read1.xml"
argument_list|)
expr_stmt|;
name|testReading2
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ElementReader
name|getStreamReader
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|FactoryConfigurationError
throws|,
name|XMLStreamException
block|{
comment|/*          * XMLInputFactory factory = XMLInputFactory.newInstance();          * XMLStreamReader reader = factory.createXMLStreamReader(          * getResourceAsStream(resource));          */
name|XMLStreamReader
name|reader
init|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|getEventType
argument_list|()
operator|!=
name|XMLStreamReader
operator|.
name|START_ELEMENT
condition|)
block|{
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ElementReader
argument_list|(
name|reader
argument_list|)
return|;
block|}
specifier|public
name|void
name|testReading
parameter_list|(
name|MessageReader
name|reader
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|reader
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Envelope"
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure we can repeat this
name|assertTrue
argument_list|(
name|reader
operator|.
name|hasMoreElementReaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|hasMoreElementReaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|hasMoreElementReaders
argument_list|()
argument_list|)
expr_stmt|;
name|MessageReader
name|header
init|=
name|reader
operator|.
name|getNextElementReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Header"
argument_list|,
name|header
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Soap11
operator|.
name|getInstance
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|header
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|header
operator|.
name|hasMoreElementReaders
argument_list|()
argument_list|)
expr_stmt|;
name|MessageReader
name|body
init|=
name|reader
operator|.
name|getNextElementReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Body"
argument_list|,
name|body
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|body
operator|.
name|hasMoreElementReaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReading2
parameter_list|(
name|MessageReader
name|reader
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:test"
argument_list|,
name|reader
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure we can repeat this
name|assertTrue
argument_list|(
name|reader
operator|.
name|hasMoreAttributeReaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|hasMoreAttributeReaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|hasMoreAttributeReaders
argument_list|()
argument_list|)
expr_stmt|;
name|MessageReader
name|one
init|=
name|reader
operator|.
name|getNextAttributeReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
name|one
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|MessageReader
name|two
init|=
name|reader
operator|.
name|getNextAttributeReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
name|two
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|reader
operator|.
name|hasMoreAttributeReaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|hasMoreElementReaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|hasMoreElementReaders
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|.
name|hasMoreElementReaders
argument_list|()
argument_list|)
expr_stmt|;
name|MessageReader
name|child
init|=
name|reader
operator|.
name|getNextElementReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"child"
argument_list|,
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|child
operator|.
name|hasMoreElementReaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

