begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|databinding
operator|.
name|AegisDatabinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|ArrayType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|BeanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|BookDynamicClient
block|{
specifier|static
specifier|final
name|String
name|ENCODED_NS
init|=
name|Soap11
operator|.
name|getInstance
argument_list|()
operator|.
name|getSoapEncodingStyle
argument_list|()
decl_stmt|;
specifier|private
name|BookDynamicClient
parameter_list|()
block|{
comment|//utility class
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
comment|// String serviceURL = "http://localhost:8080/BookService";
try|try
block|{
name|Client
name|client
init|=
operator|new
name|ClientImpl
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://localhost:6980/BookService?WSDL"
argument_list|)
argument_list|)
decl_stmt|;
name|Service
name|s
init|=
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getService
argument_list|()
decl_stmt|;
name|AegisDatabinding
name|db
init|=
operator|new
name|AegisDatabinding
argument_list|()
decl_stmt|;
name|s
operator|.
name|setDataBinding
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|.
name|initialize
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|TypeMapping
name|tm
init|=
operator|(
name|TypeMapping
operator|)
name|s
operator|.
name|get
argument_list|(
name|TypeMapping
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|()
decl_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://org.codehaus.xfire.client"
argument_list|,
literal|"Book"
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|Book
operator|.
name|class
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|tm
operator|.
name|register
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|ArrayType
name|aType
init|=
operator|new
name|ArrayType
argument_list|()
decl_stmt|;
name|aType
operator|.
name|setTypeClass
argument_list|(
name|Book
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|aType
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://client.xfire.codehaus.org"
argument_list|,
literal|"ArrayOfBook"
argument_list|)
argument_list|)
expr_stmt|;
name|aType
operator|.
name|setTypeMapping
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|tm
operator|.
name|register
argument_list|(
name|aType
argument_list|)
expr_stmt|;
name|QName
name|qn
init|=
name|tm
operator|.
name|getTypeQName
argument_list|(
name|Book
operator|.
name|class
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"QName("
operator|+
name|tm
operator|.
name|isRegistered
argument_list|(
name|Book
operator|.
name|class
argument_list|)
operator|+
literal|") = "
operator|+
name|qn
argument_list|)
expr_stmt|;
name|Book
name|book
init|=
operator|new
name|Book
argument_list|()
decl_stmt|;
name|book
operator|.
name|setAuthor
argument_list|(
literal|"Dan"
argument_list|)
expr_stmt|;
name|book
operator|.
name|setIsbn
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|book
operator|.
name|setTitle
argument_list|(
literal|"XFire in Action"
argument_list|)
expr_stmt|;
comment|// client.invoke("addBook", new Object[] {book});
name|book
operator|.
name|setAuthor
argument_list|(
literal|"Dierk"
argument_list|)
expr_stmt|;
name|book
operator|.
name|setIsbn
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|book
operator|.
name|setTitle
argument_list|(
literal|"Groovy in Action"
argument_list|)
expr_stmt|;
comment|// client.invoke("addBook", new Object[] {book});
name|Book
index|[]
name|books
init|=
operator|(
name|Book
index|[]
operator|)
name|client
operator|.
name|invoke
argument_list|(
literal|"getBooks"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"BOOKS:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|books
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|books
index|[
name|i
index|]
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*              * Book[] books = (Book [])client.invoke("findBook", new Object[]              * {"2"});; System.out.println("ISBN :");              * System.out.println(books[0].getAuthor());              */
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

