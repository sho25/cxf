begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws1
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws1
operator|.
name|BeanA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws1
operator|.
name|BeanB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws1
operator|.
name|BeanC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws1
operator|.
name|ResultBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws1
operator|.
name|RootBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws1
operator|.
name|WS1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws1
operator|.
name|WS1Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|ws1
operator|.
name|WS1ExtendedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|services
operator|.
name|SimpleBean
import|;
end_import

begin_class
specifier|public
class|class
name|WS1Impl
implements|implements
name|WS1
block|{
specifier|public
name|BeanA
name|getBeanA
parameter_list|()
block|{
name|BeanA
name|a
init|=
operator|new
name|BeanA
argument_list|()
decl_stmt|;
name|a
operator|.
name|setPropA
argument_list|(
literal|"valueA"
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
specifier|public
name|BeanB
name|getBeanB
parameter_list|()
block|{
name|BeanB
name|b
init|=
operator|new
name|BeanB
argument_list|()
decl_stmt|;
name|b
operator|.
name|setPropA
argument_list|(
literal|"valueA"
argument_list|)
expr_stmt|;
name|b
operator|.
name|setPropB
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|// not exported to interface to "hide" BeanC from interface introspection
specifier|public
name|BeanC
name|getBeanC
parameter_list|()
block|{
name|BeanC
name|c
init|=
operator|new
name|BeanC
argument_list|()
decl_stmt|;
name|c
operator|.
name|setPropA
argument_list|(
literal|"valueA"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPropB
argument_list|(
literal|"valueB"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPropC
argument_list|(
literal|"valueC"
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
specifier|public
name|BeanA
name|getBean
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
literal|"b"
operator|.
name|equalsIgnoreCase
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|getBeanB
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"c"
operator|.
name|equalsIgnoreCase
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|getBeanC
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
literal|"a"
operator|.
name|equalsIgnoreCase
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|getBeanA
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|BeanA
index|[]
name|listBeans
parameter_list|()
block|{
name|BeanA
index|[]
name|result
init|=
operator|new
name|BeanA
index|[
literal|4
index|]
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|getBean
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
literal|null
expr_stmt|;
name|result
index|[
literal|2
index|]
operator|=
name|getBean
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|result
index|[
literal|3
index|]
operator|=
name|getBean
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|RootBean
name|getRootBean
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|RootBean
name|rootBean
init|=
operator|new
name|RootBean
argument_list|()
decl_stmt|;
name|rootBean
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|rootBean
operator|.
name|setChild
argument_list|(
name|getBean
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rootBean
return|;
block|}
specifier|public
name|RootBean
index|[]
name|listRootBeans
parameter_list|()
block|{
name|RootBean
index|[]
name|result
init|=
operator|new
name|RootBean
index|[
literal|4
index|]
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|getRootBean
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
literal|null
expr_stmt|;
name|result
index|[
literal|2
index|]
operator|=
name|getRootBean
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|result
index|[
literal|3
index|]
operator|=
name|getRootBean
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|ResultBean
name|getResultBean
parameter_list|()
block|{
name|ResultBean
name|resultBean
init|=
operator|new
name|ResultBean
argument_list|()
decl_stmt|;
name|resultBean
operator|.
name|setResult1
argument_list|(
name|listBeans
argument_list|()
argument_list|)
expr_stmt|;
name|resultBean
operator|.
name|setResult2
argument_list|(
name|listRootBeans
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|resultBean
return|;
block|}
specifier|public
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|echoMap
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|beans
parameter_list|)
block|{
return|return
name|beans
return|;
block|}
specifier|public
name|void
name|throwException
parameter_list|(
name|boolean
name|extendedOne
parameter_list|)
throws|throws
name|WS1Exception
block|{
if|if
condition|(
name|extendedOne
condition|)
block|{
throw|throw
operator|new
name|WS1ExtendedException
argument_list|(
literal|"WS1 extended exception"
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|,
operator|new
name|SimpleBean
argument_list|()
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|WS1Exception
argument_list|(
literal|"WS1 base exception"
argument_list|,
literal|10
argument_list|)
throw|;
block|}
specifier|public
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|echoRawMap
parameter_list|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|rawMap
parameter_list|)
block|{
return|return
name|rawMap
return|;
block|}
block|}
end_class

end_unit

