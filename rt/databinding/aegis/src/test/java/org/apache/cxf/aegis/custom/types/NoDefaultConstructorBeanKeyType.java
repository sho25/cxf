begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|custom
operator|.
name|types
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|DatabindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|custom
operator|.
name|service
operator|.
name|NoDefaultConstructorBeanKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|custom
operator|.
name|service
operator|.
name|NoDefaultConstructorBeanKeyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|AegisType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|BeanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|BeanTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|java5
operator|.
name|Java5TypeCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageReader
import|;
end_import

begin_class
specifier|public
class|class
name|NoDefaultConstructorBeanKeyType
extends|extends
name|BeanType
block|{
specifier|public
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|TYPE_CLASS
init|=
name|NoDefaultConstructorBeanKey
operator|.
name|class
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|QNAME
init|=
operator|new
name|Java5TypeCreator
argument_list|()
operator|.
name|createQName
argument_list|(
name|TYPE_CLASS
argument_list|)
decl_stmt|;
specifier|public
name|NoDefaultConstructorBeanKeyType
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setTypeClass
argument_list|(
name|TYPE_CLASS
argument_list|)
expr_stmt|;
name|setSchemaType
argument_list|(
name|QNAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|readObject
parameter_list|(
name|MessageReader
name|reader
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|DatabindingException
block|{
name|BeanTypeInfo
name|inf
init|=
name|getTypeInfo
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|key
init|=
literal|null
decl_stmt|;
comment|// Read child elements
while|while
condition|(
name|reader
operator|.
name|hasMoreElementReaders
argument_list|()
condition|)
block|{
name|MessageReader
name|childReader
init|=
name|reader
operator|.
name|getNextElementReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|childReader
operator|.
name|isXsiNil
argument_list|()
condition|)
block|{
name|childReader
operator|.
name|readToEnd
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|QName
name|name
init|=
name|childReader
operator|.
name|getName
argument_list|()
decl_stmt|;
name|AegisType
name|defaultType
init|=
name|inf
operator|.
name|getType
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|AegisType
name|type
init|=
name|TypeUtil
operator|.
name|getReadType
argument_list|(
name|childReader
operator|.
name|getXMLStreamReader
argument_list|()
argument_list|,
name|context
operator|.
name|getGlobalContext
argument_list|()
argument_list|,
name|defaultType
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|type
operator|.
name|readObject
argument_list|(
name|childReader
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"key"
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|key
operator|=
name|value
expr_stmt|;
block|}
block|}
else|else
block|{
name|childReader
operator|.
name|readToEnd
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|new
name|NoDefaultConstructorBeanKeyImpl
argument_list|(
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Illegal argument. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|AegisType
argument_list|>
name|getDependencies
parameter_list|()
block|{
comment|// The string type is provided by aegis, so it should always be there.
name|AegisType
name|stringType
init|=
name|getTypeMapping
argument_list|()
operator|.
name|getType
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|stringType
argument_list|)
return|;
block|}
block|}
end_class

end_unit

