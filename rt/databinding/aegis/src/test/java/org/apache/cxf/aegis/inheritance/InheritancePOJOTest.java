begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AbstractAegisTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AegisContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|databinding
operator|.
name|AegisDatabinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SOAPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|InheritancePOJOTest
extends|extends
name|AbstractAegisTest
block|{
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|ServerFactoryBean
name|sf
init|=
name|createServiceFactory
argument_list|(
name|InheritanceService
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|"InheritanceService"
argument_list|,
operator|new
name|QName
argument_list|(
literal|"urn:xfire:inheritance"
argument_list|,
literal|"InheritanceService"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AegisContext
name|globalContext
init|=
operator|new
name|AegisContext
argument_list|()
decl_stmt|;
name|globalContext
operator|.
name|setWriteXsiTypes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|Employee
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|globalContext
operator|.
name|setRootClassNames
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|AegisDatabinding
name|binding
init|=
operator|new
name|AegisDatabinding
argument_list|()
decl_stmt|;
name|binding
operator|.
name|setAegisContext
argument_list|(
name|globalContext
argument_list|)
expr_stmt|;
name|sf
operator|.
name|getServiceFactory
argument_list|()
operator|.
name|setDataBinding
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|sf
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGenerateWsdl
parameter_list|()
throws|throws
name|Exception
block|{
name|Document
name|d
init|=
name|getWSDLDocument
argument_list|(
literal|"InheritanceService"
argument_list|)
decl_stmt|;
name|String
name|types
init|=
literal|"//wsdl:types/xsd:schema/"
decl_stmt|;
comment|// check for Employee as extension
name|String
name|employeeType
init|=
name|types
operator|+
literal|"xsd:complexType[@name='Employee']"
decl_stmt|;
name|assertValid
argument_list|(
name|employeeType
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|String
name|extension
init|=
literal|"/xsd:complexContent/xsd:extension[@base='tns:AbstractUser']"
decl_stmt|;
name|assertValid
argument_list|(
name|employeeType
operator|+
name|extension
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
name|employeeType
operator|+
name|extension
operator|+
literal|"/xsd:sequence/xsd:element[@name='division']"
argument_list|,
name|d
argument_list|)
expr_stmt|;
comment|// assertValid("count(" + employeeType + extension +
comment|// "/xsd:sequence/*)=1", d);
comment|// check for BaseUser as abstract
name|String
name|baseUserType
init|=
name|types
operator|+
literal|"xsd:complexType[(@name='AbstractUser') and (@abstract='true')]"
decl_stmt|;
name|assertValid
argument_list|(
name|baseUserType
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
name|baseUserType
operator|+
literal|"/xsd:sequence/xsd:element[@name='name']"
argument_list|,
name|d
argument_list|)
expr_stmt|;
comment|// assertValid("count(" + baseUserType + "/xsd:sequence/*)=1", d);
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocalReceiveEmployee
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|response
init|=
name|invoke
argument_list|(
literal|"InheritanceService"
argument_list|,
literal|"ReceiveEmployee.xml"
argument_list|)
decl_stmt|;
name|addNamespace
argument_list|(
literal|"w"
argument_list|,
literal|"urn:xfire:inheritance"
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"//s:Body/w:receiveUserResponse"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocalGetEmployee
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|response
init|=
name|invoke
argument_list|(
literal|"InheritanceService"
argument_list|,
literal|"GetEmployee.xml"
argument_list|)
decl_stmt|;
name|addNamespace
argument_list|(
literal|"xsi"
argument_list|,
name|SOAPConstants
operator|.
name|XSI_NS
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"w"
argument_list|,
literal|"urn:xfire:inheritance"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"p"
argument_list|,
literal|"http://inheritance.aegis.cxf.apache.org"
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"//s:Body/w:getEmployeeResponse/w:return/p:division"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"//s:Body/w:getEmployeeResponse/w:return[@xsi:type]"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

