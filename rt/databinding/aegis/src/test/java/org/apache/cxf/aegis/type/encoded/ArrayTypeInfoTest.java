begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AbstractAegisTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AegisContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|BeanTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|stax
operator|.
name|ElementReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|constants
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|ArrayTypeInfoTest
extends|extends
name|AbstractAegisTest
block|{
specifier|private
name|TypeMapping
name|mapping
decl_stmt|;
specifier|private
name|StructType
name|addressType
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|addNamespace
argument_list|(
literal|"b"
argument_list|,
literal|"urn:Bean"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"a"
argument_list|,
literal|"urn:anotherns"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"xsi"
argument_list|,
name|Constants
operator|.
name|URI_2001_SCHEMA_XSI
argument_list|)
expr_stmt|;
name|AegisContext
name|context
init|=
operator|new
name|AegisContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|mapping
operator|=
name|context
operator|.
name|getTypeMapping
argument_list|()
expr_stmt|;
comment|// address type
name|BeanTypeInfo
name|addressInfo
init|=
operator|new
name|BeanTypeInfo
argument_list|(
name|Address
operator|.
name|class
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
name|addressInfo
operator|.
name|setTypeMapping
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|addressType
operator|=
operator|new
name|StructType
argument_list|(
name|addressInfo
argument_list|)
expr_stmt|;
name|addressType
operator|.
name|setTypeClass
argument_list|(
name|Address
operator|.
name|class
argument_list|)
expr_stmt|;
name|addressType
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"addr"
argument_list|)
argument_list|)
expr_stmt|;
name|mapping
operator|.
name|register
argument_list|(
name|addressType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArrayTypeInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|new
name|ArrayTypeInfo
argument_list|(
operator|new
name|QName
argument_list|(
literal|""
argument_list|,
literal|"addr"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"addr[4]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ArrayTypeInfo
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"addr"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"b:addr[4]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ArrayTypeInfo
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"addr"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
argument_list|,
literal|"b:addr[4,8,9]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ArrayTypeInfo
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"addr"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"b:addr[4]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ArrayTypeInfo
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"addr"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"b:addr[][4]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ArrayTypeInfo
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"addr"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"b:addr[,][4]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ArrayTypeInfo
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"addr"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"b:addr[,,,][4]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ArrayTypeInfo
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"addr"
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
argument_list|,
literal|"b:addr[,,,][4,8,9]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|":addr[4]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:a:ddress[4]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[0]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[a]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[4,0]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[4,a]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[4,0,5]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[4,a,5]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[,]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[,][]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr],][4]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[,[[4]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[,]]4]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[,][4["
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[,][]4]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[,][][4]"
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[,][][4["
argument_list|)
expr_stmt|;
name|assertInvalid
argument_list|(
literal|"b:addr[,][][4]end"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertEquals
parameter_list|(
name|ArrayTypeInfo
name|expected
parameter_list|,
name|String
name|actualString
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayTypeInfo
name|actual
init|=
operator|new
name|ArrayTypeInfo
argument_list|(
name|getNamespaceContext
argument_list|()
argument_list|,
name|actualString
argument_list|)
decl_stmt|;
comment|// only compare local part because prefix is only resolved when using the MessageReader constructor
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getRanks
argument_list|()
argument_list|,
name|actual
operator|.
name|getRanks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getDimensions
argument_list|()
argument_list|,
name|actual
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expected
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getTypeName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|actual
operator|.
name|getTypeName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expected
operator|.
name|getRanks
argument_list|()
operator|==
literal|0
condition|)
block|{
name|assertSame
argument_list|(
name|addressType
argument_list|,
name|actual
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"actual.getType() should be an instance of SoapArrayType, but is "
operator|+
name|actual
operator|.
name|getType
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|actual
operator|.
name|getType
argument_list|()
operator|instanceof
name|SoapArrayType
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|toString
argument_list|()
argument_list|,
name|actual
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
literal|"<b:array xmlns:b=\"urn:Bean\"\n"
operator|+
literal|"    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n"
operator|+
literal|"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
operator|+
literal|"    xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\"\n"
operator|+
literal|"    soapenc:arrayType=\""
operator|+
name|actualString
operator|+
literal|"\"/>"
decl_stmt|;
name|ElementReader
name|reader
init|=
operator|new
name|ElementReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|xml
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|actual
operator|=
operator|new
name|ArrayTypeInfo
argument_list|(
name|reader
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getRanks
argument_list|()
argument_list|,
name|actual
operator|.
name|getRanks
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getDimensions
argument_list|()
argument_list|,
name|actual
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expected
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getTypeName
argument_list|()
argument_list|,
name|actual
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expected
operator|.
name|getRanks
argument_list|()
operator|==
literal|0
condition|)
block|{
name|assertSame
argument_list|(
name|addressType
argument_list|,
name|actual
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"actual.getType() should be an instance of SoapArrayType, but is "
operator|+
name|actual
operator|.
name|getType
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|actual
operator|.
name|getType
argument_list|()
operator|instanceof
name|SoapArrayType
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|toString
argument_list|()
argument_list|,
name|actual
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertInvalid
parameter_list|(
name|String
name|actualString
parameter_list|)
block|{
try|try
block|{
operator|new
name|ArrayTypeInfo
argument_list|(
name|getNamespaceContext
argument_list|()
argument_list|,
name|actualString
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a DatabindingException from invalid arrayType "
operator|+
name|actualString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

