begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AbstractAegisTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AegisContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|services
operator|.
name|AttributeBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeCreationOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|jdom
operator|.
name|JDOMWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SOAPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|QualificationTest
extends|extends
name|AbstractAegisTest
block|{
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|addNamespace
argument_list|(
literal|"b"
argument_list|,
literal|"urn:Bean"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"xyzzy"
argument_list|,
literal|"urn:xyzzy"
argument_list|)
expr_stmt|;
name|addNamespace
argument_list|(
literal|"xsi"
argument_list|,
name|SOAPConstants
operator|.
name|XSI_NS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultUnqualifiedAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|AegisContext
name|context
init|=
operator|new
name|AegisContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|TypeMapping
name|mapping
init|=
name|context
operator|.
name|getTypeMapping
argument_list|()
decl_stmt|;
name|Type
name|type
init|=
name|mapping
operator|.
name|getTypeCreator
argument_list|()
operator|.
name|createType
argument_list|(
name|AttributeBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bean"
argument_list|)
argument_list|)
expr_stmt|;
name|Context
name|messageContext
init|=
operator|new
name|Context
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Element
name|element
init|=
operator|new
name|Element
argument_list|(
literal|"root"
argument_list|,
literal|"b"
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
operator|new
name|Document
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|AttributeBean
name|bean
init|=
operator|new
name|AttributeBean
argument_list|()
decl_stmt|;
name|type
operator|.
name|writeObject
argument_list|(
name|bean
argument_list|,
operator|new
name|JDOMWriter
argument_list|(
name|element
argument_list|)
argument_list|,
name|messageContext
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root[@xyzzy:attrExplicitString]"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|assertXPathEquals
argument_list|(
literal|"/b:root/@xyzzy:attrExplicitString"
argument_list|,
literal|"attrExplicit"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root[@attrPlainString]"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|assertXPathEquals
argument_list|(
literal|"/b:root/@attrPlainString"
argument_list|,
literal|"attrPlain"
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultQualifiedAttribute
parameter_list|()
throws|throws
name|Exception
block|{
name|AegisContext
name|context
init|=
operator|new
name|AegisContext
argument_list|()
decl_stmt|;
name|TypeCreationOptions
name|typeCreationOptions
init|=
operator|new
name|TypeCreationOptions
argument_list|()
decl_stmt|;
name|typeCreationOptions
operator|.
name|setQualifyAttributes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|setTypeCreationOptions
argument_list|(
name|typeCreationOptions
argument_list|)
expr_stmt|;
name|context
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|TypeMapping
name|mapping
init|=
name|context
operator|.
name|getTypeMapping
argument_list|()
decl_stmt|;
name|Type
name|type
init|=
name|mapping
operator|.
name|getTypeCreator
argument_list|()
operator|.
name|createType
argument_list|(
name|AttributeBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|type
operator|.
name|setSchemaType
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:Bean"
argument_list|,
literal|"bean"
argument_list|)
argument_list|)
expr_stmt|;
name|Context
name|messageContext
init|=
operator|new
name|Context
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Element
name|element
init|=
operator|new
name|Element
argument_list|(
literal|"root"
argument_list|,
literal|"b"
argument_list|,
literal|"urn:Bean"
argument_list|)
decl_stmt|;
operator|new
name|Document
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|AttributeBean
name|bean
init|=
operator|new
name|AttributeBean
argument_list|()
decl_stmt|;
name|type
operator|.
name|writeObject
argument_list|(
name|bean
argument_list|,
operator|new
name|JDOMWriter
argument_list|(
name|element
argument_list|)
argument_list|,
name|messageContext
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root[@xyzzy:attrExplicitString]"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|assertXPathEquals
argument_list|(
literal|"/b:root/@xyzzy:attrExplicitString"
argument_list|,
literal|"attrExplicit"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|assertValid
argument_list|(
literal|"/b:root[@attrPlainString]"
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|assertXPathEquals
argument_list|(
literal|"/b:root/@attrPlainString"
argument_list|,
literal|"attrPlain"
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

