begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|override
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AbstractAegisTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|databinding
operator|.
name|AegisDatabinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|inheritance
operator|.
name|Employee
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|OverrideTypeTest
extends|extends
name|AbstractAegisTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testOverrideBean
parameter_list|()
throws|throws
name|Exception
block|{
name|AegisDatabinding
name|aegisDatabinding
init|=
operator|new
name|AegisDatabinding
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
literal|"org.apache.cxf.aegis.inheritance.Employee"
argument_list|)
expr_stmt|;
name|aegisDatabinding
operator|.
name|setOverrideTypes
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|DataReader
argument_list|<
name|XMLStreamReader
argument_list|>
name|dataReader
init|=
name|aegisDatabinding
operator|.
name|createReader
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|)
decl_stmt|;
name|InputStream
name|employeeBytes
init|=
name|testUtilities
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/cxf/aegis/override/employee.xml"
argument_list|)
decl_stmt|;
name|XMLInputFactory
name|readerFactory
init|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLStreamReader
name|reader
init|=
name|readerFactory
operator|.
name|createXMLStreamReader
argument_list|(
name|employeeBytes
argument_list|)
decl_stmt|;
name|Object
name|objectRead
init|=
name|dataReader
operator|.
name|read
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|objectRead
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|objectRead
operator|instanceof
name|Employee
argument_list|)
expr_stmt|;
name|Employee
name|e
init|=
operator|(
name|Employee
operator|)
name|objectRead
decl_stmt|;
name|assertEquals
argument_list|(
literal|"long"
argument_list|,
name|e
operator|.
name|getDivision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

