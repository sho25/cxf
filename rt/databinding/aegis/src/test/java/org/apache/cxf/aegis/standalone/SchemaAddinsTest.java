begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|standalone
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AegisContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|test
operator|.
name|TestUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SchemaAddinsTest
extends|extends
name|Assert
block|{
specifier|private
name|TestUtilities
name|testUtilities
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|testUtilities
operator|=
operator|new
name|TestUtilities
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|testUtilities
operator|.
name|addDefaultNamespaces
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAegisTypeSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|AegisContext
name|context
init|=
operator|new
name|AegisContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|XmlSchemaCollection
name|collection
init|=
operator|new
name|XmlSchemaCollection
argument_list|()
decl_stmt|;
name|context
operator|.
name|addTypesSchemaDocument
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|XmlSchema
index|[]
name|schemas
init|=
name|collection
operator|.
name|getXmlSchemas
argument_list|()
decl_stmt|;
name|XmlSchema
name|typeSchema
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XmlSchema
name|schema
range|:
name|schemas
control|)
block|{
if|if
condition|(
name|AegisContext
operator|.
name|UTILITY_TYPES_SCHEMA_NS
operator|.
name|equals
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|typeSchema
operator|=
name|schema
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|typeSchema
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
literal|0
argument_list|,
name|typeSchema
operator|.
name|getItems
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|XmlSchemaSerializer
name|serializer
init|=
operator|new
name|XmlSchemaSerializer
argument_list|()
decl_stmt|;
name|Document
index|[]
name|docs
init|=
name|serializer
operator|.
name|serializeSchema
argument_list|(
name|typeSchema
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|testUtilities
operator|.
name|assertValid
argument_list|(
literal|"/xsd:schema/xsd:simpleType[@name='char']"
argument_list|,
name|docs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

