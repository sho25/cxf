begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|stax
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|DatabindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|util
operator|.
name|NamespaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|AbstractMessageWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageWriter
import|;
end_import

begin_class
specifier|public
class|class
name|AttributeWriter
extends|extends
name|AbstractMessageWriter
block|{
specifier|private
name|XMLStreamWriter
name|writer
decl_stmt|;
specifier|private
name|String
name|namespace
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|prefix
decl_stmt|;
specifier|public
name|AttributeWriter
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|namespace
operator|=
literal|""
expr_stmt|;
comment|// otherwise, sjsxp is unhappy.
block|}
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
try|try
block|{
if|if
condition|(
name|namespace
operator|!=
literal|null
operator|&&
name|namespace
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|prefix
operator|=
name|NamespaceHelper
operator|.
name|getUniquePrefix
argument_list|(
name|writer
argument_list|,
name|namespace
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Couldn't write to stream."
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|writeValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
try|try
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|,
name|name
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Error writing document."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MessageWriter
name|getAttributeWriter
parameter_list|(
name|String
name|nm
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|public
name|MessageWriter
name|getAttributeWriter
parameter_list|(
name|String
name|nm
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|public
name|MessageWriter
name|getAttributeWriter
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|public
name|MessageWriter
name|getElementWriter
parameter_list|(
name|String
name|nm
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|public
name|MessageWriter
name|getElementWriter
parameter_list|(
name|String
name|nm
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|public
name|MessageWriter
name|getElementWriter
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|public
name|String
name|getPrefixForNamespace
parameter_list|(
name|String
name|ns
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|public
name|String
name|getPrefixForNamespace
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|hint
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{     }
block|}
end_class

end_unit

