begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|util
operator|.
name|jdom
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|CDATA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|EntityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Text
import|;
end_import

begin_class
specifier|public
class|class
name|StaxSerializer
block|{
specifier|public
name|void
name|writeDocument
parameter_list|(
name|Document
name|doc
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writer
operator|.
name|writeStartDocument
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|itr
init|=
name|doc
operator|.
name|getContent
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Content
name|content
init|=
operator|(
name|Content
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|Element
condition|)
block|{
name|writeElement
argument_list|(
operator|(
name|Element
operator|)
name|content
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|writeElement
parameter_list|(
name|Element
name|e
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
comment|// need to check if the namespace is declared before we write the
comment|// start element because that will put the namespace in the context.
name|String
name|elPrefix
init|=
name|e
operator|.
name|getNamespacePrefix
argument_list|()
decl_stmt|;
name|String
name|elUri
init|=
name|e
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|boundPrefix
init|=
name|writer
operator|.
name|getPrefix
argument_list|(
name|elUri
argument_list|)
decl_stmt|;
name|boolean
name|writeElementNS
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|boundPrefix
operator|==
literal|null
operator|||
operator|!
name|elPrefix
operator|.
name|equals
argument_list|(
name|boundPrefix
argument_list|)
condition|)
block|{
name|writeElementNS
operator|=
literal|true
expr_stmt|;
block|}
name|writer
operator|.
name|writeStartElement
argument_list|(
name|elPrefix
argument_list|,
name|e
operator|.
name|getName
argument_list|()
argument_list|,
name|elUri
argument_list|)
expr_stmt|;
name|List
name|namespaces
init|=
name|e
operator|.
name|getAdditionalNamespaces
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|itr
init|=
name|namespaces
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Namespace
name|ns
init|=
operator|(
name|Namespace
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|ns
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|ns
operator|.
name|getURI
argument_list|()
decl_stmt|;
name|writer
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|elUri
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|&&
name|elPrefix
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|writeElementNS
operator|=
literal|false
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|itr
init|=
name|e
operator|.
name|getAttributes
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Attribute
name|attr
init|=
operator|(
name|Attribute
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|attPrefix
init|=
name|attr
operator|.
name|getNamespacePrefix
argument_list|()
decl_stmt|;
name|String
name|attUri
init|=
name|attr
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|attUri
operator|==
literal|null
operator|||
name|attUri
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|attPrefix
argument_list|,
name|attUri
argument_list|,
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDeclared
argument_list|(
name|writer
argument_list|,
name|attPrefix
argument_list|,
name|attUri
argument_list|)
condition|)
block|{
if|if
condition|(
name|elUri
operator|.
name|equals
argument_list|(
name|attUri
argument_list|)
operator|&&
name|elPrefix
operator|.
name|equals
argument_list|(
name|attPrefix
argument_list|)
condition|)
block|{
if|if
condition|(
name|writeElementNS
condition|)
block|{
name|writer
operator|.
name|setPrefix
argument_list|(
name|attPrefix
argument_list|,
name|attUri
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
name|attPrefix
argument_list|,
name|attUri
argument_list|)
expr_stmt|;
name|writeElementNS
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|writer
operator|.
name|setPrefix
argument_list|(
name|attPrefix
argument_list|,
name|attUri
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
name|attPrefix
argument_list|,
name|attUri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|writeElementNS
condition|)
block|{
if|if
condition|(
name|elPrefix
operator|==
literal|null
operator|||
name|elPrefix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|writeDefaultNamespace
argument_list|(
name|elUri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeNamespace
argument_list|(
name|elPrefix
argument_list|,
name|elUri
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|itr
init|=
name|e
operator|.
name|getContent
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Content
name|n
init|=
operator|(
name|Content
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|instanceof
name|CDATA
condition|)
block|{
name|writer
operator|.
name|writeCData
argument_list|(
name|n
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|instanceof
name|Text
condition|)
block|{
name|writer
operator|.
name|writeCharacters
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|n
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|instanceof
name|Element
condition|)
block|{
name|writeElement
argument_list|(
operator|(
name|Element
operator|)
name|n
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|instanceof
name|Comment
condition|)
block|{
name|writer
operator|.
name|writeComment
argument_list|(
name|n
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|instanceof
name|EntityRef
condition|)
block|{
comment|// EntityRef ref = (EntityRef) n;
comment|// writer.writeEntityRef(ref.)
block|}
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
comment|/**      * @param writer      * @param prefix      * @param uri      * @throws XMLStreamException      */
specifier|private
name|boolean
name|isDeclared
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|XMLStreamException
block|{
for|for
control|(
name|Iterator
name|pxs
init|=
name|writer
operator|.
name|getNamespaceContext
argument_list|()
operator|.
name|getPrefixes
argument_list|(
name|uri
argument_list|)
init|;
name|pxs
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|px
init|=
operator|(
name|String
operator|)
name|pxs
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|px
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

