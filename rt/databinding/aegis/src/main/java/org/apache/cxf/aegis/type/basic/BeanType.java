begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AegisContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|DatabindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|AbstractTypeCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|AegisType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|mtom
operator|.
name|AbstractXOPType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|XmlSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAny
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnyAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexContentExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_comment
comment|/**  * Serializes JavaBeans.  *  * There's a really dangerous coding convention in this class, maintainers beware.  * There are two constructor. The no-args constructor defers, until later,  * the construction of a BeanTypeInfo. The one-arg constructor gets the BeanTypeInfo passed as a parameter.  * Aegis doesn't have any uniform discipline of 'construct, set properties, initialize'. Instead,  * each piece of code that uses the type info needs to call getTypeInfo() instead of referencing the  * 'info' field.  */
end_comment

begin_class
specifier|public
class|class
name|BeanType
extends|extends
name|AegisType
block|{
specifier|private
name|BeanTypeInfo
name|info
decl_stmt|;
specifier|private
name|boolean
name|isInterface
decl_stmt|;
specifier|private
name|boolean
name|isException
decl_stmt|;
comment|/**      * Construct a type info. Caller must pass in the type class via      * setTypeClass later.      */
specifier|public
name|BeanType
parameter_list|()
block|{     }
comment|/**      * Construct a type info given a full BeanTypeInfo.      * @param info      */
specifier|public
name|BeanType
parameter_list|(
name|BeanTypeInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
name|this
operator|.
name|typeClass
operator|=
name|info
operator|.
name|getTypeClass
argument_list|()
expr_stmt|;
name|initTypeClass
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initTypeClass
parameter_list|()
block|{
comment|// throw if someone tries to set up a generic bean.
name|Class
argument_list|<
name|?
argument_list|>
name|plainClass
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|typeClass
decl_stmt|;
name|this
operator|.
name|isInterface
operator|=
name|plainClass
operator|.
name|isInterface
argument_list|()
expr_stmt|;
name|isException
operator|=
name|Exception
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|plainClass
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|Object
name|readObject
parameter_list|(
name|MessageReader
name|reader
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|DatabindingException
block|{
name|BeanTypeInfo
name|inf
init|=
name|getTypeInfo
argument_list|()
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|getTypeClass
argument_list|()
decl_stmt|;
name|Object
name|object
decl_stmt|;
comment|// the target for properties; either the object or the proxy handler
name|Object
name|target
decl_stmt|;
if|if
condition|(
name|isInterface
condition|)
block|{
name|String
name|impl
init|=
name|context
operator|.
name|getGlobalContext
argument_list|()
operator|.
name|getBeanImplementationMap
argument_list|()
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|impl
operator|==
literal|null
condition|)
block|{
name|InvocationHandler
name|handler
init|=
operator|new
name|InterfaceInvocationHandler
argument_list|()
decl_stmt|;
name|object
operator|=
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|clazz
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|clazz
block|}
argument_list|,
name|handler
argument_list|)
expr_stmt|;
name|target
operator|=
name|handler
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|clazz
operator|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|impl
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|object
operator|=
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|target
operator|=
name|object
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Could not find implementation class "
operator|+
name|impl
operator|+
literal|" for class "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|isException
condition|)
block|{
name|object
operator|=
name|createFromFault
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|target
operator|=
name|object
expr_stmt|;
block|}
else|else
block|{
name|object
operator|=
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|target
operator|=
name|object
expr_stmt|;
block|}
comment|// Read attributes
while|while
condition|(
name|reader
operator|.
name|hasMoreAttributeReaders
argument_list|()
condition|)
block|{
name|MessageReader
name|childReader
init|=
name|reader
operator|.
name|getNextAttributeReader
argument_list|()
decl_stmt|;
name|QName
name|name
init|=
name|childReader
operator|.
name|getName
argument_list|()
decl_stmt|;
name|AegisType
name|type
init|=
name|inf
operator|.
name|getType
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|Object
name|writeObj
init|=
name|type
operator|.
name|readObject
argument_list|(
name|childReader
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|writeProperty
argument_list|(
name|name
argument_list|,
name|target
argument_list|,
name|writeObj
argument_list|,
name|clazz
argument_list|,
name|inf
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Read child elements
while|while
condition|(
name|reader
operator|.
name|hasMoreElementReaders
argument_list|()
condition|)
block|{
name|MessageReader
name|childReader
init|=
name|reader
operator|.
name|getNextElementReader
argument_list|()
decl_stmt|;
name|QName
name|name
init|=
name|childReader
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Find the BeanTypeInfo that contains a property for the element name
name|BeanTypeInfo
name|propertyTypeInfo
init|=
name|getBeanTypeInfoWithProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// Get the AegisType for the property
name|AegisType
name|type
init|=
name|getElementType
argument_list|(
name|name
argument_list|,
name|propertyTypeInfo
argument_list|,
name|childReader
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|childReader
operator|.
name|isXsiNil
argument_list|()
condition|)
block|{
name|Object
name|writeObj
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isFlatArray
argument_list|()
condition|)
block|{
name|ArrayType
name|aType
init|=
operator|(
name|ArrayType
operator|)
name|type
decl_stmt|;
name|PropertyDescriptor
name|desc
init|=
name|inf
operator|.
name|getPropertyDescriptorFromMappedName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|boolean
name|isList
init|=
name|List
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|desc
operator|.
name|getPropertyType
argument_list|()
argument_list|)
decl_stmt|;
name|writeObj
operator|=
name|aType
operator|.
name|readObject
argument_list|(
name|childReader
argument_list|,
name|name
argument_list|,
name|context
argument_list|,
operator|!
name|isList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeObj
operator|=
name|type
operator|.
name|readObject
argument_list|(
name|childReader
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|writeProperty
argument_list|(
name|name
argument_list|,
name|target
argument_list|,
name|writeObj
argument_list|,
name|clazz
argument_list|,
name|propertyTypeInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|alwaysAllowNillables
argument_list|()
operator|&&
operator|!
name|propertyTypeInfo
operator|.
name|isNillable
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|" is nil, but not nillable."
argument_list|)
throw|;
block|}
name|childReader
operator|.
name|readToEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|childReader
operator|.
name|readToEnd
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|object
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Illegal access. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Couldn't instantiate class. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Illegal access. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Illegal argument. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Could not create class: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|boolean
name|alwaysAllowNillables
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|protected
name|AegisType
name|getElementType
parameter_list|(
name|QName
name|name
parameter_list|,
name|BeanTypeInfo
name|beanTypeInfo
parameter_list|,
name|MessageReader
name|reader
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
name|AegisType
name|type
init|=
name|beanTypeInfo
operator|.
name|getType
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// AegisType can be overriden with a xsi:type attribute
name|type
operator|=
name|TypeUtil
operator|.
name|getReadType
argument_list|(
name|reader
operator|.
name|getXMLStreamReader
argument_list|()
argument_list|,
name|context
operator|.
name|getGlobalContext
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|type
return|;
block|}
comment|/**      * If the class is an exception, this will try and instantiate it with information from the XFireFault (if      * it exists).      */
specifier|protected
name|Object
name|createFromFault
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|IllegalArgumentException
throws|,
name|InvocationTargetException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|getTypeClass
argument_list|()
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|ctr
decl_stmt|;
name|Object
name|o
decl_stmt|;
name|Fault
name|fault
init|=
name|context
operator|.
name|getFault
argument_list|()
decl_stmt|;
try|try
block|{
name|ctr
operator|=
name|clazz
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|,
name|Throwable
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|o
operator|=
name|ctr
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|fault
operator|.
name|getMessage
argument_list|()
block|,
name|fault
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
try|try
block|{
name|ctr
operator|=
name|clazz
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|,
name|Exception
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|o
operator|=
name|ctr
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|fault
operator|.
name|getMessage
argument_list|()
block|,
name|fault
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e1
parameter_list|)
block|{
try|try
block|{
name|ctr
operator|=
name|clazz
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|o
operator|=
name|ctr
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|fault
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e2
parameter_list|)
block|{
return|return
name|clazz
operator|.
name|newInstance
argument_list|()
return|;
block|}
block|}
block|}
return|return
name|o
return|;
block|}
comment|/**      * Write the specified property to a field.      */
specifier|protected
name|void
name|writeProperty
parameter_list|(
name|QName
name|name
parameter_list|,
name|Object
name|object
parameter_list|,
name|Object
name|property
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|impl
parameter_list|,
name|BeanTypeInfo
name|inf
parameter_list|)
throws|throws
name|DatabindingException
block|{
if|if
condition|(
name|object
operator|instanceof
name|InterfaceInvocationHandler
condition|)
block|{
name|InterfaceInvocationHandler
name|delegate
init|=
operator|(
name|InterfaceInvocationHandler
operator|)
name|object
decl_stmt|;
name|delegate
operator|.
name|writeProperty
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|property
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|PropertyDescriptor
name|desc
init|=
name|inf
operator|.
name|getPropertyDescriptorFromMappedName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Method
name|m
init|=
name|desc
operator|.
name|getWriteMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getTypeClass
argument_list|()
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|m
operator|=
name|getWriteMethodFromImplClass
argument_list|(
name|impl
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|==
literal|null
operator|&&
name|property
operator|instanceof
name|List
condition|)
block|{
name|m
operator|=
name|desc
operator|.
name|getReadMethod
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|l
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|m
operator|.
name|invoke
argument_list|(
name|object
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|p
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|property
argument_list|)
decl_stmt|;
name|l
operator|.
name|addAll
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"No write method for property "
operator|+
name|name
operator|+
literal|" in "
operator|+
name|object
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|propertyType
init|=
name|desc
operator|.
name|getPropertyType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|property
operator|==
literal|null
operator|&&
operator|!
name|propertyType
operator|.
name|isPrimitive
argument_list|()
operator|)
operator|||
operator|(
name|property
operator|!=
literal|null
operator|)
condition|)
block|{
name|m
operator|.
name|invoke
argument_list|(
name|object
argument_list|,
operator|new
name|Object
index|[]
block|{
name|property
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DatabindingException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Couldn't set property "
operator|+
name|name
operator|+
literal|" on "
operator|+
name|object
operator|+
literal|". "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * This is a hack to get the write method from the implementation class for an interface.      */
specifier|private
name|Method
name|getWriteMethodFromImplClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|impl
parameter_list|,
name|PropertyDescriptor
name|pd
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|pd
operator|.
name|getName
argument_list|()
decl_stmt|;
name|name
operator|=
literal|"set"
operator|+
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|impl
operator|.
name|getMethod
argument_list|(
name|name
argument_list|,
operator|new
name|Class
index|[]
block|{
name|pd
operator|.
name|getPropertyType
argument_list|()
block|}
argument_list|)
return|;
block|}
comment|/**      * To avoid double-writing xsi:type attributes, ObjectType uses this special entrypoint.      *      * @param object      * @param writer      * @param context      * @param wroteXsiType      */
name|void
name|writeObjectFromObjectType
parameter_list|(
name|Object
name|object
parameter_list|,
name|MessageWriter
name|writer
parameter_list|,
name|Context
name|context
parameter_list|,
name|boolean
name|wroteXsiType
parameter_list|)
block|{
name|writeObjectInternal
argument_list|(
name|object
argument_list|,
name|writer
argument_list|,
name|context
argument_list|,
name|wroteXsiType
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|Object
name|object
parameter_list|,
name|MessageWriter
name|writer
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|DatabindingException
block|{
name|writeObjectInternal
argument_list|(
name|object
argument_list|,
name|writer
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeObjectInternal
parameter_list|(
name|Object
name|object
parameter_list|,
name|MessageWriter
name|writer
parameter_list|,
name|Context
name|context
parameter_list|,
name|boolean
name|wroteXsiType
parameter_list|)
throws|throws
name|DatabindingException
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|BeanTypeInfo
name|inf
init|=
name|getTypeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|wroteXsiType
operator|&&
name|object
operator|.
name|getClass
argument_list|()
operator|==
name|getTypeClass
argument_list|()
operator|&&
name|context
operator|.
name|isWriteXsiTypes
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeXsiType
argument_list|(
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|QName
name|name
range|:
name|inf
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|isInheritedProperty
argument_list|(
name|inf
argument_list|,
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Object
name|value
init|=
name|readProperty
argument_list|(
name|object
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|AegisType
name|type
init|=
name|getType
argument_list|(
name|inf
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Couldn't find type for "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|" for property "
operator|+
name|name
argument_list|)
throw|;
block|}
name|MessageWriter
name|cwriter
init|=
name|writer
operator|.
name|getAttributeWriter
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|type
operator|.
name|writeObject
argument_list|(
name|value
argument_list|,
name|cwriter
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|cwriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|inf
operator|.
name|isExtension
argument_list|()
condition|)
block|{
name|AegisType
name|t
init|=
name|getSuperType
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|writeObject
argument_list|(
name|object
argument_list|,
name|writer
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|QName
name|name
range|:
name|inf
operator|.
name|getElements
argument_list|()
control|)
block|{
if|if
condition|(
name|isInheritedProperty
argument_list|(
name|inf
argument_list|,
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Object
name|value
init|=
name|readProperty
argument_list|(
name|object
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|AegisType
name|defaultType
init|=
name|getType
argument_list|(
name|inf
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|AegisType
name|type
init|=
name|TypeUtil
operator|.
name|getWriteType
argument_list|(
name|context
operator|.
name|getGlobalContext
argument_list|()
argument_list|,
name|value
argument_list|,
name|defaultType
argument_list|)
decl_stmt|;
comment|// Write the value if it is not null.
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Couldn't find type for "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|+
literal|" for property "
operator|+
name|name
argument_list|)
throw|;
block|}
name|writeElement
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|type
argument_list|,
name|writer
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inf
operator|.
name|isNillable
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|MessageWriter
name|cwriter
init|=
name|getWriter
argument_list|(
name|writer
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
decl_stmt|;
comment|// Write the xsi:nil if it is null.
name|cwriter
operator|.
name|writeXsiNil
argument_list|()
expr_stmt|;
name|cwriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @return true if the given beanType is extended and its given property is inherited from parent classes      */
specifier|private
name|boolean
name|isInheritedProperty
parameter_list|(
name|BeanTypeInfo
name|beanTypeInfo
parameter_list|,
name|QName
name|propertyQName
parameter_list|)
block|{
return|return
name|beanTypeInfo
operator|.
name|isExtension
argument_list|()
operator|&&
name|beanTypeInfo
operator|.
name|getPropertyDescriptorFromMappedName
argument_list|(
name|propertyQName
argument_list|)
operator|.
name|getReadMethod
argument_list|()
operator|.
name|getDeclaringClass
argument_list|()
operator|!=
name|beanTypeInfo
operator|.
name|getTypeClass
argument_list|()
return|;
block|}
specifier|protected
name|void
name|writeElement
parameter_list|(
name|QName
name|name
parameter_list|,
name|Object
name|value
parameter_list|,
name|AegisType
name|type
parameter_list|,
name|MessageWriter
name|writer
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|isFlatArray
argument_list|()
condition|)
block|{
name|MessageWriter
name|cwriter
init|=
literal|null
decl_stmt|;
name|cwriter
operator|=
name|getWriter
argument_list|(
name|writer
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|type
operator|.
name|writeObject
argument_list|(
name|value
argument_list|,
name|cwriter
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|cwriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ArrayType
name|arrayType
init|=
operator|(
name|ArrayType
operator|)
name|type
decl_stmt|;
name|arrayType
operator|.
name|writeObject
argument_list|(
name|value
argument_list|,
name|writer
argument_list|,
name|context
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|MessageWriter
name|getWriter
parameter_list|(
name|MessageWriter
name|writer
parameter_list|,
name|QName
name|name
parameter_list|,
name|AegisType
name|type
parameter_list|)
block|{
name|MessageWriter
name|cwriter
decl_stmt|;
name|cwriter
operator|=
name|writer
operator|.
name|getElementWriter
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|cwriter
return|;
block|}
specifier|protected
name|Object
name|readProperty
parameter_list|(
name|Object
name|object
parameter_list|,
name|QName
name|name
parameter_list|)
block|{
try|try
block|{
name|PropertyDescriptor
name|desc
init|=
name|getTypeInfo
argument_list|()
operator|.
name|getPropertyDescriptorFromMappedName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Method
name|m
init|=
name|desc
operator|.
name|getReadMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"No read method for property "
operator|+
name|name
operator|+
literal|" in class "
operator|+
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|m
operator|.
name|invoke
argument_list|(
name|object
argument_list|,
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Couldn't get property "
operator|+
name|name
operator|+
literal|" from bean "
operator|+
name|object
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|AegisType
name|getType
parameter_list|(
name|BeanTypeInfo
name|inf
parameter_list|,
name|QName
name|name
parameter_list|)
block|{
name|AegisType
name|type
init|=
name|inf
operator|.
name|getType
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Couldn't find type for"
operator|+
name|name
operator|+
literal|" in class "
operator|+
name|getTypeClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|type
return|;
block|}
specifier|private
name|void
name|writeTypeReference
parameter_list|(
name|QName
name|name
parameter_list|,
name|XmlSchemaElement
name|element
parameter_list|,
name|AegisType
name|type
parameter_list|,
name|XmlSchema
name|schemaRoot
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|element
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|element
operator|.
name|setSchemaTypeName
argument_list|(
name|type
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|XmlSchemaUtils
operator|.
name|addImportIfNeeded
argument_list|(
name|schemaRoot
argument_list|,
name|type
operator|.
name|getSchemaType
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
comment|/*              * Here we have a semi-giant mess. If a parameter has a minOccurs> 1, it ends              * up in the type info. However, it really got used in the array type.              * All we really want to do here is manage 'optional' elements. If we              * ever implement flat arrays, this will change. For now, we ignore              * maxOccurs and we only look for 0's in the minOccurs.              */
name|long
name|minOccurs
init|=
name|getTypeInfo
argument_list|()
operator|.
name|getMinOccurs
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|/* If it is 1, that's the default, and if it's greater than one, it means              * that there is a real array at work here. So the only value we want to pay              * attention to is 0.              */
if|if
condition|(
name|minOccurs
operator|==
literal|0
condition|)
block|{
name|element
operator|.
name|setMinOccurs
argument_list|(
name|minOccurs
argument_list|)
expr_stmt|;
block|}
name|element
operator|.
name|setNillable
argument_list|(
name|getTypeInfo
argument_list|()
operator|.
name|isNillable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|element
operator|.
name|getRef
argument_list|()
operator|.
name|setTargetQName
argument_list|(
name|type
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|void
name|setTypeClass
parameter_list|(
name|Type
name|typeClass
parameter_list|)
block|{
name|super
operator|.
name|setTypeClass
argument_list|(
name|typeClass
argument_list|)
expr_stmt|;
name|initTypeClass
argument_list|()
expr_stmt|;
block|}
comment|/**      * We need to write a complex type schema for Beans, so return true.      *      * @see org.apache.cxf.aegis.type.AegisType#isComplex()      */
annotation|@
name|Override
specifier|public
name|boolean
name|isComplex
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|AegisType
argument_list|>
name|getDependencies
parameter_list|()
block|{
name|Set
argument_list|<
name|AegisType
argument_list|>
name|deps
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|BeanTypeInfo
name|inf
init|=
name|getTypeInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|QName
name|name
range|:
name|inf
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|isInheritedProperty
argument_list|(
name|inf
argument_list|,
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|deps
operator|.
name|add
argument_list|(
name|inf
operator|.
name|getType
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|QName
name|name
range|:
name|inf
operator|.
name|getElements
argument_list|()
control|)
block|{
if|if
condition|(
name|isInheritedProperty
argument_list|(
name|inf
argument_list|,
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|deps
operator|.
name|add
argument_list|(
name|inf
operator|.
name|getType
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*          * Automagically add chain of superclasses if this is an an extension.          */
name|AegisType
name|sooperType
init|=
name|getSuperType
argument_list|()
decl_stmt|;
if|if
condition|(
name|sooperType
operator|!=
literal|null
condition|)
block|{
name|deps
operator|.
name|add
argument_list|(
name|sooperType
argument_list|)
expr_stmt|;
block|}
return|return
name|deps
return|;
block|}
specifier|protected
name|BeanTypeInfo
name|getBeanTypeInfoWithProperty
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
comment|// search the BeanType superType tree for the first BeanType with a property named 'name'
name|BeanType
name|beanType
init|=
name|this
decl_stmt|;
name|AegisType
name|type
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|beanType
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getType
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|AegisType
name|superType
init|=
name|beanType
operator|.
name|getSuperType
argument_list|()
decl_stmt|;
comment|/*                                                            * The class might inherit from, say, 'Integer'. In                                                            * which case we've got no BeanType to work with.                                                            */
if|if
condition|(
name|superType
operator|instanceof
name|BeanType
condition|)
block|{
name|beanType
operator|=
operator|(
name|BeanType
operator|)
name|superType
expr_stmt|;
block|}
else|else
block|{
break|break;
comment|// give up.
block|}
block|}
block|}
return|return
name|beanType
operator|.
name|getTypeInfo
argument_list|()
return|;
block|}
comment|/**      * Return the AegisType for the superclass if this type's class, if any.      * @return      */
specifier|public
name|AegisType
name|getSuperType
parameter_list|()
block|{
name|BeanTypeInfo
name|inf
init|=
name|getTypeInfo
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|inf
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isInterface
argument_list|()
operator|&&
name|c
operator|.
name|getInterfaces
argument_list|()
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|c
operator|=
name|c
operator|.
name|getInterfaces
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|c
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
comment|/*          * Don't dig any deeper than Object or Exception          */
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|!=
name|Object
operator|.
name|class
operator|&&
name|c
operator|!=
name|Exception
operator|.
name|class
operator|&&
name|c
operator|!=
name|RuntimeException
operator|.
name|class
operator|&&
name|c
operator|!=
name|Enum
operator|.
name|class
operator|&&
name|c
operator|!=
name|Serializable
operator|.
name|class
operator|&&
name|c
operator|!=
name|Cloneable
operator|.
name|class
condition|)
block|{
name|TypeMapping
name|tm
init|=
name|inf
operator|.
name|getTypeMapping
argument_list|()
decl_stmt|;
name|AegisType
name|superType
init|=
name|tm
operator|.
name|getType
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|superType
operator|==
literal|null
condition|)
block|{
comment|// if we call createType, we know that we'll get a BeanType. */
name|superType
operator|=
name|getTypeMapping
argument_list|()
operator|.
name|getTypeCreator
argument_list|()
operator|.
name|createType
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|superType
operator|!=
literal|null
condition|)
block|{
name|tm
operator|.
name|register
argument_list|(
name|superType
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setExtension
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|info
operator|.
name|setExtension
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|superType
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Return the type info.      * @return      */
specifier|public
name|BeanTypeInfo
name|getTypeInfo
parameter_list|()
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|info
operator|=
name|createTypeInfo
argument_list|()
expr_stmt|;
block|}
name|info
operator|.
name|initialize
argument_list|()
expr_stmt|;
return|return
name|info
return|;
block|}
comment|/**      * Create type info based in the type class.      * @return      */
specifier|public
name|BeanTypeInfo
name|createTypeInfo
parameter_list|()
block|{
name|BeanTypeInfo
name|inf
init|=
operator|new
name|BeanTypeInfo
argument_list|(
name|getTypeClass
argument_list|()
argument_list|,
name|getSchemaType
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|inf
operator|.
name|setTypeMapping
argument_list|(
name|getTypeMapping
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|inf
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|32
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|": [class="
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|getTypeClass
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
operator|(
name|c
operator|==
literal|null
operator|)
condition|?
literal|"<null>"
else|:
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\nQName="
argument_list|)
expr_stmt|;
name|QName
name|q
init|=
name|getSchemaType
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
operator|(
name|q
operator|==
literal|null
operator|)
condition|?
literal|"<null>"
else|:
name|q
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",\ninfo="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getTypeInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|addXmimeToSchema
parameter_list|(
name|XmlSchema
name|root
parameter_list|)
block|{
name|XmlSchemaUtils
operator|.
name|addImportIfNeeded
argument_list|(
name|root
argument_list|,
name|AbstractXOPType
operator|.
name|XML_MIME_NS
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|long
name|getMinOccurs
parameter_list|()
block|{
return|return
name|getTypeInfo
argument_list|()
operator|.
name|getMinOccurs
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasMinOccurs
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTypeMapping
parameter_list|(
name|TypeMapping
name|typeMapping
parameter_list|)
block|{
name|super
operator|.
name|setTypeMapping
argument_list|(
name|typeMapping
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
comment|// this seems dangerous .. what if the type info is later created, it won't be passed the mapping.
name|info
operator|.
name|setTypeMapping
argument_list|(
name|typeMapping
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeSchema
parameter_list|(
name|XmlSchema
name|root
parameter_list|)
block|{
name|BeanTypeInfo
name|inf
init|=
name|getTypeInfo
argument_list|()
decl_stmt|;
name|XmlSchemaComplexType
name|complex
init|=
operator|new
name|XmlSchemaComplexType
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|complex
operator|.
name|setName
argument_list|(
name|getSchemaType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|AegisType
name|sooperType
init|=
name|getSuperType
argument_list|()
decl_stmt|;
comment|/*          * See Java Virtual Machine specification:          * http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#75734          */
if|if
condition|(
operator|(
operator|(
name|inf
operator|.
name|getTypeClass
argument_list|()
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|ABSTRACT
operator|)
operator|!=
literal|0
operator|)
operator|&&
operator|!
name|inf
operator|.
name|getTypeClass
argument_list|()
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|complex
operator|.
name|setAbstract
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|XmlSchemaSequence
name|sequence
init|=
operator|new
name|XmlSchemaSequence
argument_list|()
decl_stmt|;
comment|/*          * Decide if we're going to extend another type. If we are going to defer, then make sure that we          * extend the type for our superclass.          */
name|boolean
name|isExtension
init|=
name|inf
operator|.
name|isExtension
argument_list|()
decl_stmt|;
if|if
condition|(
name|isExtension
operator|&&
name|sooperType
operator|!=
literal|null
condition|)
block|{
comment|// if sooperType is null, things are confused.
name|XmlSchemaComplexContent
name|content
init|=
operator|new
name|XmlSchemaComplexContent
argument_list|()
decl_stmt|;
name|complex
operator|.
name|setContentModel
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|XmlSchemaComplexContentExtension
name|extension
init|=
operator|new
name|XmlSchemaComplexContentExtension
argument_list|()
decl_stmt|;
name|content
operator|.
name|setContent
argument_list|(
name|extension
argument_list|)
expr_stmt|;
name|extension
operator|.
name|setBaseTypeName
argument_list|(
name|sooperType
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|extension
operator|.
name|setParticle
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|complex
operator|.
name|setParticle
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
block|}
name|boolean
name|needXmime
init|=
literal|false
decl_stmt|;
name|boolean
name|needUtilityTypes
init|=
literal|false
decl_stmt|;
comment|// Write out schema for elements
for|for
control|(
name|QName
name|name
range|:
name|inf
operator|.
name|getElements
argument_list|()
control|)
block|{
if|if
condition|(
name|isInheritedProperty
argument_list|(
name|inf
argument_list|,
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|XmlSchemaElement
name|element
init|=
operator|new
name|XmlSchemaElement
argument_list|(
name|root
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|element
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|sequence
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|AegisType
name|type
init|=
name|getType
argument_list|(
name|inf
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isFlatArray
argument_list|()
condition|)
block|{
comment|// ok, we need some tricks here
name|element
operator|.
name|setMinOccurs
argument_list|(
name|type
operator|.
name|getMinOccurs
argument_list|()
argument_list|)
expr_stmt|;
name|element
operator|.
name|setMaxOccurs
argument_list|(
name|type
operator|.
name|getMaxOccurs
argument_list|()
argument_list|)
expr_stmt|;
comment|// for now, assume ArrayType. Look at lists or more general solutions later.
name|ArrayType
name|aType
init|=
operator|(
name|ArrayType
operator|)
name|type
decl_stmt|;
name|type
operator|=
name|aType
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
name|element
operator|.
name|setNillable
argument_list|(
name|type
operator|.
name|isNillable
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|AbstractTypeCreator
operator|.
name|HTTP_CXF_APACHE_ORG_ARRAYS
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getSchemaType
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|XmlSchemaUtils
operator|.
name|addImportIfNeeded
argument_list|(
name|root
argument_list|,
name|AbstractTypeCreator
operator|.
name|HTTP_CXF_APACHE_ORG_ARRAYS
argument_list|)
expr_stmt|;
block|}
block|}
name|writeTypeReference
argument_list|(
name|name
argument_list|,
name|element
argument_list|,
name|type
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|needXmime
operator||=
name|type
operator|.
name|usesXmime
argument_list|()
expr_stmt|;
name|needUtilityTypes
operator||=
name|type
operator|.
name|usesUtilityTypes
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|needXmime
condition|)
block|{
name|addXmimeToSchema
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needUtilityTypes
condition|)
block|{
name|AegisContext
operator|.
name|addUtilityTypesToSchema
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
comment|/**          * if future proof then add<xsd:any/> element          */
if|if
condition|(
name|inf
operator|.
name|isExtensibleElements
argument_list|()
condition|)
block|{
name|XmlSchemaAny
name|any
init|=
operator|new
name|XmlSchemaAny
argument_list|()
decl_stmt|;
name|any
operator|.
name|setMinOccurs
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|any
operator|.
name|setMaxOccurs
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|sequence
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|any
argument_list|)
expr_stmt|;
block|}
comment|// Write out schema for attributes
for|for
control|(
name|QName
name|name
range|:
name|inf
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|isInheritedProperty
argument_list|(
name|inf
argument_list|,
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|XmlSchemaAttribute
name|attribute
init|=
operator|new
name|XmlSchemaAttribute
argument_list|(
name|root
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|complex
operator|.
name|getAttributes
argument_list|()
operator|.
name|add
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|AegisType
name|type
init|=
name|getType
argument_list|(
name|inf
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|attribute
operator|.
name|setSchemaTypeName
argument_list|(
name|type
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ns
init|=
name|name
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ns
operator|.
name|equals
argument_list|(
name|root
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|XmlSchemaUtils
operator|.
name|addImportIfNeeded
argument_list|(
name|root
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * If extensible attributes then add<xsd:anyAttribute/>          */
if|if
condition|(
name|inf
operator|.
name|isExtensibleAttributes
argument_list|()
condition|)
block|{
name|complex
operator|.
name|setAnyAttribute
argument_list|(
operator|new
name|XmlSchemaAnyAttribute
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

