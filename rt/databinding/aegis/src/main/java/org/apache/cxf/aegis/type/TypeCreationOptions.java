begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/**  * This class contains a set of flags that control Aegis' process of mapping from Java types to XML Schema.  * These options are respected by the standard Aegis type creation classes. An application that replaces  * these with custom creators will make its own arrangements.  *   * @see AbstractTypeCreator  * @see DefaultTypeCreator  * @see XMLTypeCreator  * @see Java5TypeCreator  *   * @since 2.1  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
package|;
end_package

begin_class
specifier|public
class|class
name|TypeCreationOptions
block|{
specifier|private
name|boolean
name|defaultExtensibleElements
decl_stmt|;
specifier|private
name|boolean
name|defaultExtensibleAttributes
decl_stmt|;
specifier|private
name|boolean
name|defaultNillable
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|defaultMinOccurs
decl_stmt|;
specifier|private
name|boolean
name|qualifyElements
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|qualifyAttributes
decl_stmt|;
specifier|public
name|TypeCreationOptions
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Should all elements permit 'any attribute'?      * @return      */
specifier|public
name|boolean
name|isDefaultExtensibleAttributes
parameter_list|()
block|{
return|return
name|defaultExtensibleAttributes
return|;
block|}
specifier|public
name|void
name|setDefaultExtensibleAttributes
parameter_list|(
name|boolean
name|defaultExtensibleAttributes
parameter_list|)
block|{
name|this
operator|.
name|defaultExtensibleAttributes
operator|=
name|defaultExtensibleAttributes
expr_stmt|;
block|}
comment|/**      * Should all complex types include an xsd:any to allow for future expansion?      * @return      */
specifier|public
name|boolean
name|isDefaultExtensibleElements
parameter_list|()
block|{
return|return
name|defaultExtensibleElements
return|;
block|}
specifier|public
name|void
name|setDefaultExtensibleElements
parameter_list|(
name|boolean
name|defaultExtensibleElements
parameter_list|)
block|{
name|this
operator|.
name|defaultExtensibleElements
operator|=
name|defaultExtensibleElements
expr_stmt|;
block|}
comment|/**      * Absent any annotations of XML mapping, the value of the minOccurs attribute on elements.      * @return      */
specifier|public
name|int
name|getDefaultMinOccurs
parameter_list|()
block|{
return|return
name|defaultMinOccurs
return|;
block|}
specifier|public
name|void
name|setDefaultMinOccurs
parameter_list|(
name|int
name|defaultMinOccurs
parameter_list|)
block|{
name|this
operator|.
name|defaultMinOccurs
operator|=
name|defaultMinOccurs
expr_stmt|;
block|}
comment|/**      * Absent any annotations of XML mapping, the value of the nillable attribute on elements.      * @return      */
specifier|public
name|boolean
name|isDefaultNillable
parameter_list|()
block|{
return|return
name|defaultNillable
return|;
block|}
specifier|public
name|void
name|setDefaultNillable
parameter_list|(
name|boolean
name|defaultNillable
parameter_list|)
block|{
name|this
operator|.
name|defaultNillable
operator|=
name|defaultNillable
expr_stmt|;
block|}
comment|/**       * Whether or not elements are qualified absent any annotations      * or mapping files.       * True by default.      * @return       */
specifier|public
name|boolean
name|isQualifyElements
parameter_list|()
block|{
return|return
name|qualifyElements
return|;
block|}
comment|/**      * Turn on of off element qualification.      * @param qualifyElements       */
specifier|public
name|void
name|setQualifyElements
parameter_list|(
name|boolean
name|qualifyElements
parameter_list|)
block|{
name|this
operator|.
name|qualifyElements
operator|=
name|qualifyElements
expr_stmt|;
block|}
comment|/**      * Whether or not attributes are qualified absent any annotations      * or mapping files.      * False by default.       * @return       */
specifier|public
name|boolean
name|isQualifyAttributes
parameter_list|()
block|{
return|return
name|qualifyAttributes
return|;
block|}
comment|/**      * Turn on or off attribute qualification.       * @param qualifyAttributes       */
specifier|public
name|void
name|setQualifyAttributes
parameter_list|(
name|boolean
name|qualifyAttributes
parameter_list|)
block|{
name|this
operator|.
name|qualifyAttributes
operator|=
name|qualifyAttributes
expr_stmt|;
block|}
block|}
end_class

end_unit

