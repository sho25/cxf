begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|CharArrayWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|DatabindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|AegisType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|mtom
operator|.
name|AbstractXOPType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|mtom
operator|.
name|ByteArrayType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|Base64Utility
import|;
end_import

begin_comment
comment|/**  * Converts back and forth to byte[] objects.  * There is a co-routine between this class and the MTOM ByteArrayType. This class can accept either   * inline base64 or an MTOM attachment. It passes the problem over the ByteArrayType for the later.   * @author<a href="mailto:dan@envoisolutions.com">Dan Diephouse</a>  */
end_comment

begin_class
specifier|public
class|class
name|Base64Type
extends|extends
name|AegisType
block|{
specifier|private
name|AbstractXOPType
name|optimizedType
decl_stmt|;
specifier|public
name|Base64Type
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// no MTOM for this type.
name|optimizedType
operator|=
operator|new
name|ByteArrayType
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Base64Type
parameter_list|(
name|AbstractXOPType
name|xopType
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|optimizedType
operator|=
name|xopType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|readObject
parameter_list|(
name|MessageReader
name|mreader
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|DatabindingException
block|{
name|XMLStreamReader
name|reader
init|=
name|mreader
operator|.
name|getXMLStreamReader
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|isCharacters
argument_list|()
operator|&&
operator|!
name|reader
operator|.
name|isEndElement
argument_list|()
operator|&&
operator|!
name|reader
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|.
name|isStartElement
argument_list|()
operator|&&
name|reader
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|AbstractXOPType
operator|.
name|XOP_INCLUDE
argument_list|)
condition|)
block|{
return|return
name|optimizedType
operator|.
name|readMtoM
argument_list|(
name|mreader
argument_list|,
name|context
argument_list|)
return|;
block|}
if|if
condition|(
name|reader
operator|.
name|isEndElement
argument_list|()
condition|)
block|{
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
name|CharArrayWriter
name|writer
init|=
operator|new
name|CharArrayWriter
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|isCharacters
argument_list|()
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|reader
operator|.
name|getTextCharacters
argument_list|()
argument_list|,
name|reader
operator|.
name|getTextStart
argument_list|()
argument_list|,
name|reader
operator|.
name|getTextLength
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|Base64Utility
operator|.
name|decode
argument_list|(
name|writer
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|writer
operator|.
name|size
argument_list|()
argument_list|,
name|bos
argument_list|)
expr_stmt|;
while|while
condition|(
name|reader
operator|.
name|getEventType
argument_list|()
operator|!=
name|XMLStreamConstants
operator|.
name|END_ELEMENT
condition|)
block|{
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
comment|// Advance just past the end element
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Base64Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Could not parse base64Binary data."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Could not parse base64Binary data."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|Object
name|object
parameter_list|,
name|MessageWriter
name|writer
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|DatabindingException
block|{
name|boolean
name|mtomEnabled
init|=
name|context
operator|.
name|isMtomEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|mtomEnabled
condition|)
block|{
name|optimizedType
operator|.
name|writeObject
argument_list|(
name|object
argument_list|,
name|writer
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return;
block|}
name|byte
index|[]
name|data
init|=
operator|(
name|byte
index|[]
operator|)
name|object
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|data
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|writeValue
argument_list|(
name|Base64Utility
operator|.
name|encode
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

