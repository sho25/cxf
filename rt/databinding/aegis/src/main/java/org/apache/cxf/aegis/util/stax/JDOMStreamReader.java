begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|util
operator|.
name|stax
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|AbstractDOMStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|FastStack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|CDATA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|EntityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Facade for DOMStreamReader using JDOM implmentation.  *   * @author<a href="mailto:tsztelak@gmail.com">Tomasz Sztelak</a>  */
end_comment

begin_class
specifier|public
class|class
name|JDOMStreamReader
extends|extends
name|AbstractDOMStreamReader
argument_list|<
name|Element
argument_list|,
name|Integer
argument_list|>
block|{
specifier|private
name|Content
name|content
decl_stmt|;
specifier|private
name|FastStack
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Namespace
argument_list|>
argument_list|>
name|namespaceStack
init|=
operator|new
name|FastStack
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Namespace
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Namespace
argument_list|>
name|namespaces
init|=
operator|new
name|ArrayList
argument_list|<
name|Namespace
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Namespace
argument_list|>
name|prefix2decNs
decl_stmt|;
specifier|private
name|JDOMNamespaceContext
name|namespaceContext
decl_stmt|;
comment|/**      * @param element      */
specifier|public
name|JDOMStreamReader
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|ElementFrame
argument_list|<
name|Element
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|element
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|namespaceContext
operator|=
operator|new
name|JDOMNamespaceContext
argument_list|()
expr_stmt|;
name|setupNamespaces
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param document      */
specifier|public
name|JDOMStreamReader
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
name|this
argument_list|(
name|document
operator|.
name|getRootElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|toStaxType
parameter_list|(
name|int
name|jdom
parameter_list|)
block|{
name|String
name|val
decl_stmt|;
switch|switch
condition|(
name|jdom
condition|)
block|{
case|case
name|Attribute
operator|.
name|CDATA_TYPE
case|:
name|val
operator|=
literal|"CDATA"
expr_stmt|;
break|break;
case|case
name|Attribute
operator|.
name|ID_TYPE
case|:
name|val
operator|=
literal|"ID"
expr_stmt|;
break|break;
case|case
name|Attribute
operator|.
name|IDREF_TYPE
case|:
name|val
operator|=
literal|"IDREF"
expr_stmt|;
break|break;
case|case
name|Attribute
operator|.
name|IDREFS_TYPE
case|:
name|val
operator|=
literal|"IDREFS"
expr_stmt|;
break|break;
case|case
name|Attribute
operator|.
name|ENTITY_TYPE
case|:
name|val
operator|=
literal|"ENTITY"
expr_stmt|;
break|break;
case|case
name|Attribute
operator|.
name|ENTITIES_TYPE
case|:
name|val
operator|=
literal|"ENTITIES"
expr_stmt|;
break|break;
case|case
name|Attribute
operator|.
name|ENUMERATED_TYPE
case|:
name|val
operator|=
literal|"ENUMERATED"
expr_stmt|;
break|break;
case|case
name|Attribute
operator|.
name|NMTOKEN_TYPE
case|:
name|val
operator|=
literal|"NMTOKEN"
expr_stmt|;
break|break;
case|case
name|Attribute
operator|.
name|NMTOKENS_TYPE
case|:
name|val
operator|=
literal|"NMTOKENS"
expr_stmt|;
break|break;
case|case
name|Attribute
operator|.
name|NOTATION_TYPE
case|:
name|val
operator|=
literal|"NOTATION"
expr_stmt|;
break|break;
default|default:
name|val
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
specifier|private
name|void
name|setupNamespaces
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|namespaceContext
operator|.
name|setElement
argument_list|(
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix2decNs
operator|!=
literal|null
condition|)
block|{
name|namespaceStack
operator|.
name|push
argument_list|(
name|prefix2decNs
argument_list|)
expr_stmt|;
block|}
name|prefix2decNs
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Namespace
argument_list|>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|itr
init|=
name|element
operator|.
name|getAdditionalNamespaces
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|declare
argument_list|(
operator|(
name|Namespace
operator|)
name|itr
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Namespace
name|ns
init|=
name|element
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldDeclare
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|declare
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|itr
init|=
name|element
operator|.
name|getAttributes
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ns
operator|=
operator|(
operator|(
name|Attribute
operator|)
name|itr
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getNamespace
argument_list|()
expr_stmt|;
if|if
condition|(
name|shouldDeclare
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|declare
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|declare
parameter_list|(
name|Namespace
name|ns
parameter_list|)
block|{
name|prefix2decNs
operator|.
name|put
argument_list|(
name|ns
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|ns
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|shouldDeclare
parameter_list|(
name|Namespace
name|ns
parameter_list|)
block|{
if|if
condition|(
name|ns
operator|==
name|Namespace
operator|.
name|XML_NAMESPACE
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ns
operator|==
name|Namespace
operator|.
name|NO_NAMESPACE
operator|&&
name|getDeclaredURI
argument_list|(
literal|""
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|decUri
init|=
name|getDeclaredURI
argument_list|(
name|ns
operator|.
name|getPrefix
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|!
operator|(
name|decUri
operator|!=
literal|null
operator|&&
name|decUri
operator|.
name|equals
argument_list|(
name|ns
operator|.
name|getURI
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|private
name|String
name|getDeclaredURI
parameter_list|(
name|String
name|string
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|namespaceStack
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|==
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Namespace
argument_list|>
name|nmspaces
init|=
name|namespaceStack
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Namespace
name|dec
init|=
name|nmspaces
operator|.
name|get
argument_list|(
name|string
argument_list|)
decl_stmt|;
if|if
condition|(
name|dec
operator|!=
literal|null
condition|)
block|{
return|return
name|dec
operator|.
name|getURI
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|endElement
parameter_list|()
block|{
if|if
condition|(
name|namespaceStack
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|prefix2decNs
operator|=
name|namespaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Element
name|getCurrentElement
parameter_list|()
block|{
return|return
name|getCurrentFrame
argument_list|()
operator|.
name|getElement
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ElementFrame
argument_list|<
name|Element
argument_list|,
name|Integer
argument_list|>
name|getChildFrame
parameter_list|()
block|{
name|int
name|currentChild
init|=
name|getCurrentFrame
argument_list|()
operator|.
name|getCurrentChild
argument_list|()
decl_stmt|;
return|return
operator|new
name|ElementFrame
argument_list|<
name|Element
argument_list|,
name|Integer
argument_list|>
argument_list|(
operator|(
name|Element
operator|)
name|getCurrentElement
argument_list|()
operator|.
name|getContent
argument_list|(
name|currentChild
argument_list|)
argument_list|,
name|getCurrentFrame
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|hasMoreChildren
parameter_list|()
block|{
name|int
name|currentChild
init|=
name|getCurrentFrame
argument_list|()
operator|.
name|getCurrentChild
argument_list|()
decl_stmt|;
return|return
name|currentChild
operator|<
operator|(
name|getCurrentElement
argument_list|()
operator|.
name|getContentSize
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|nextChild
parameter_list|()
block|{
name|int
name|currentChild
init|=
name|getCurrentFrame
argument_list|()
operator|.
name|getCurrentChild
argument_list|()
decl_stmt|;
name|currentChild
operator|++
expr_stmt|;
name|getCurrentFrame
argument_list|()
operator|.
name|setCurrentChild
argument_list|(
name|currentChild
argument_list|)
expr_stmt|;
name|this
operator|.
name|content
operator|=
name|getCurrentElement
argument_list|()
operator|.
name|getContent
argument_list|(
name|currentChild
argument_list|)
expr_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|Text
condition|)
block|{
return|return
name|CHARACTERS
return|;
block|}
elseif|else
if|if
condition|(
name|content
operator|instanceof
name|Element
condition|)
block|{
name|setupNamespaces
argument_list|(
operator|(
name|Element
operator|)
name|content
argument_list|)
expr_stmt|;
return|return
name|START_ELEMENT
return|;
block|}
elseif|else
if|if
condition|(
name|content
operator|instanceof
name|CDATA
condition|)
block|{
return|return
name|CHARACTERS
return|;
block|}
elseif|else
if|if
condition|(
name|content
operator|instanceof
name|Comment
condition|)
block|{
return|return
name|CHARACTERS
return|;
block|}
elseif|else
if|if
condition|(
name|content
operator|instanceof
name|EntityRef
condition|)
block|{
return|return
name|ENTITY_REFERENCE
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getElementText
parameter_list|()
throws|throws
name|XMLStreamException
block|{
return|return
operator|(
operator|(
name|Text
operator|)
name|content
operator|)
operator|.
name|getText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|getCurrentElement
argument_list|()
operator|.
name|getNamespace
argument_list|(
name|prefix
argument_list|)
operator|.
name|getURI
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|local
parameter_list|)
block|{
return|return
name|getCurrentElement
argument_list|()
operator|.
name|getAttributeValue
argument_list|(
name|local
argument_list|,
name|Namespace
operator|.
name|getNamespace
argument_list|(
name|ns
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|getAttributeCount
parameter_list|()
block|{
return|return
name|getCurrentElement
argument_list|()
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
name|Attribute
name|getAttribute
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
name|Attribute
operator|)
name|getCurrentElement
argument_list|()
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|public
name|QName
name|getAttributeName
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|Attribute
name|at
init|=
name|getAttribute
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
operator|new
name|QName
argument_list|(
name|at
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|at
operator|.
name|getName
argument_list|()
argument_list|,
name|at
operator|.
name|getNamespacePrefix
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeNamespace
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getAttribute
argument_list|(
name|i
argument_list|)
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAttributeLocalName
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getAttribute
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAttributePrefix
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getAttribute
argument_list|(
name|i
argument_list|)
operator|.
name|getNamespacePrefix
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAttributeType
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|toStaxType
argument_list|(
name|getAttribute
argument_list|(
name|i
argument_list|)
operator|.
name|getAttributeType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getAttribute
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isAttributeSpecified
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getAttribute
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getNamespaceCount
parameter_list|()
block|{
return|return
name|namespaces
operator|.
name|size
argument_list|()
return|;
block|}
name|Namespace
name|getNamespace
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|namespaces
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|public
name|String
name|getNamespacePrefix
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getNamespace
argument_list|(
name|i
argument_list|)
operator|.
name|getPrefix
argument_list|()
return|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getNamespace
argument_list|(
name|i
argument_list|)
operator|.
name|getURI
argument_list|()
return|;
block|}
specifier|public
name|NamespaceContext
name|getNamespaceContext
parameter_list|()
block|{
return|return
name|namespaceContext
return|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|content
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|char
index|[]
name|getTextCharacters
parameter_list|()
block|{
return|return
name|getText
argument_list|()
operator|.
name|toCharArray
argument_list|()
return|;
block|}
specifier|public
name|int
name|getTextStart
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getTextLength
parameter_list|()
block|{
return|return
name|getText
argument_list|()
operator|.
name|length
argument_list|()
return|;
block|}
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|QName
name|getName
parameter_list|()
block|{
name|Element
name|el
init|=
name|getCurrentElement
argument_list|()
decl_stmt|;
return|return
operator|new
name|QName
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|el
operator|.
name|getName
argument_list|()
argument_list|,
name|el
operator|.
name|getNamespacePrefix
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
name|getCurrentElement
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
name|getCurrentElement
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|getCurrentElement
argument_list|()
operator|.
name|getNamespacePrefix
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPITarget
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|String
name|getPIData
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

