begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|DatabindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * SoapRefType reads and writes SoapRef objects.  *<p/>  * When reading, this class checks for a SOAP ref attribute, and if present creates SoapRef and registers it  * with the SoapRefRegistry.  If the SOAP ref attribute is not present, this class delegates to the baseType  * specified in the constructor.  Regardless of the element containing SOAP ref or not, a SoapRef object is  * returned. In the case of an inline object the SoapRef will contain a null value.  *<p/>  * When writing, the class always writes an element containing a SOAP ref attribute.  The actual object  * instance is registered with the MarshalRegistry, and is written at the end of the message body by the  * TrailingBlocks class.  */
end_comment

begin_class
specifier|public
class|class
name|SoapRefType
extends|extends
name|Type
block|{
specifier|private
specifier|final
name|Type
name|baseType
decl_stmt|;
specifier|public
name|SoapRefType
parameter_list|(
name|Type
name|baseType
parameter_list|)
block|{
if|if
condition|(
name|baseType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"baseType is null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|baseType
operator|=
name|baseType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|readObject
parameter_list|(
name|MessageReader
name|reader
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|DatabindingException
block|{
name|SoapRef
name|soapRef
init|=
operator|new
name|SoapRef
argument_list|()
decl_stmt|;
comment|// if we have a ref, register our soap ref with context
name|String
name|ref
init|=
name|SoapEncodingUtil
operator|.
name|readRef
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|SoapRefRegistry
operator|.
name|get
argument_list|(
name|context
argument_list|)
operator|.
name|addRef
argument_list|(
name|ref
argument_list|,
name|soapRef
argument_list|)
expr_stmt|;
name|reader
operator|.
name|readToEnd
argument_list|()
expr_stmt|;
return|return
name|soapRef
return|;
block|}
name|Object
name|object
init|=
name|baseType
operator|.
name|readObject
argument_list|(
name|reader
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|soapRef
operator|.
name|set
argument_list|(
name|object
argument_list|)
expr_stmt|;
return|return
name|soapRef
return|;
block|}
specifier|public
name|void
name|writeObject
parameter_list|(
name|Object
name|object
parameter_list|,
name|MessageWriter
name|writer
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|DatabindingException
block|{
comment|// write the ref id
name|String
name|refId
init|=
name|MarshalRegistry
operator|.
name|get
argument_list|(
name|context
argument_list|)
operator|.
name|getInstanceId
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|SoapEncodingUtil
operator|.
name|writeRef
argument_list|(
name|writer
argument_list|,
name|refId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|writeSchema
parameter_list|(
name|Element
name|root
parameter_list|)
block|{
name|baseType
operator|.
name|writeSchema
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TypeMapping
name|getTypeMapping
parameter_list|()
block|{
return|return
name|baseType
operator|.
name|getTypeMapping
argument_list|()
return|;
block|}
specifier|public
name|void
name|setTypeMapping
parameter_list|(
name|TypeMapping
name|typeMapping
parameter_list|)
block|{
name|baseType
operator|.
name|setTypeMapping
argument_list|(
name|typeMapping
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Class
name|getTypeClass
parameter_list|()
block|{
return|return
name|baseType
operator|.
name|getTypeClass
argument_list|()
return|;
block|}
specifier|public
name|void
name|setTypeClass
parameter_list|(
name|Class
name|typeClass
parameter_list|)
block|{
name|baseType
operator|.
name|setTypeClass
argument_list|(
name|typeClass
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isComplex
parameter_list|()
block|{
return|return
name|baseType
operator|.
name|isComplex
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
name|baseType
operator|.
name|isAbstract
argument_list|()
return|;
block|}
specifier|public
name|void
name|setAbstract
parameter_list|(
name|boolean
name|ab
parameter_list|)
block|{
name|baseType
operator|.
name|setAbstract
argument_list|(
name|ab
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isNillable
parameter_list|()
block|{
return|return
name|baseType
operator|.
name|isNillable
argument_list|()
return|;
block|}
specifier|public
name|void
name|setNillable
parameter_list|(
name|boolean
name|nillable
parameter_list|)
block|{
name|baseType
operator|.
name|setNillable
argument_list|(
name|nillable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|Type
argument_list|>
name|getDependencies
parameter_list|()
block|{
return|return
name|baseType
operator|.
name|getDependencies
argument_list|()
return|;
block|}
specifier|public
name|QName
name|getSchemaType
parameter_list|()
block|{
return|return
name|baseType
operator|.
name|getSchemaType
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSchemaType
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
name|baseType
operator|.
name|setSchemaType
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isWriteOuter
parameter_list|()
block|{
return|return
name|baseType
operator|.
name|isWriteOuter
argument_list|()
return|;
block|}
specifier|public
name|void
name|setWriteOuter
parameter_list|(
name|boolean
name|writeOuter
parameter_list|)
block|{
name|baseType
operator|.
name|setWriteOuter
argument_list|(
name|writeOuter
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

