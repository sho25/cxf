begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|DatabindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|BeanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|BeanTypeInfo
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultTypeCreator
extends|extends
name|AbstractTypeCreator
block|{
specifier|public
name|DefaultTypeCreator
parameter_list|()
block|{     }
specifier|public
name|DefaultTypeCreator
parameter_list|(
name|TypeCreationOptions
name|configuration
parameter_list|)
block|{
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TypeClassInfo
name|createClassInfo
parameter_list|(
name|Method
name|m
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|TypeClassInfo
name|info
init|=
operator|new
name|TypeClassInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setDescription
argument_list|(
literal|"method "
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|+
literal|" parameter "
operator|+
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|info
operator|.
name|setType
argument_list|(
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|setType
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
annotation|@
name|Override
specifier|public
name|TypeClassInfo
name|createClassInfo
parameter_list|(
name|PropertyDescriptor
name|pd
parameter_list|)
block|{
return|return
name|createBasicClassInfo
argument_list|(
name|pd
operator|.
name|getPropertyType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AegisType
name|createCollectionType
parameter_list|(
name|TypeClassInfo
name|info
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|info
operator|.
name|getType
argument_list|()
operator|instanceof
name|ParameterizedType
operator|)
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Cannot create mapping for "
operator|+
name|info
operator|.
name|getType
argument_list|()
operator|+
literal|", unspecified component type for "
operator|+
name|info
operator|.
name|getDescription
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|createCollectionTypeFromGeneric
argument_list|(
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AegisType
name|createDefaultType
parameter_list|(
name|TypeClassInfo
name|info
parameter_list|)
block|{
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|()
decl_stmt|;
comment|/*          * As of this point, we refuse to do this for generics in general.          * This might be revisited ... it might turn out to 'just work'.          */
name|Class
argument_list|<
name|?
argument_list|>
name|typeClass
init|=
name|TypeUtil
operator|.
name|getTypeClass
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Unable to map generic type "
operator|+
name|info
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
name|type
operator|.
name|setSchemaType
argument_list|(
name|createQName
argument_list|(
name|typeClass
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|typeClass
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|getTypeMapping
argument_list|()
argument_list|)
expr_stmt|;
name|BeanTypeInfo
name|typeInfo
init|=
name|type
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
name|typeInfo
operator|.
name|setDefaultMinOccurs
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getDefaultMinOccurs
argument_list|()
argument_list|)
expr_stmt|;
name|typeInfo
operator|.
name|setExtensibleAttributes
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|isDefaultExtensibleAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|typeInfo
operator|.
name|setExtensibleElements
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|isDefaultExtensibleElements
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|type
return|;
block|}
specifier|protected
name|AegisType
name|getOrCreateMapKeyType
parameter_list|(
name|TypeClassInfo
name|info
parameter_list|)
block|{
return|return
name|createObjectType
argument_list|()
return|;
block|}
specifier|protected
name|AegisType
name|getOrCreateMapValueType
parameter_list|(
name|TypeClassInfo
name|info
parameter_list|)
block|{
return|return
name|createObjectType
argument_list|()
return|;
block|}
block|}
end_class

end_unit

