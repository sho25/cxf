begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_comment
comment|/**  * Common implementation of the Aegis data readers and writer.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractAegisIoImpl
block|{
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
specifier|protected
name|Schema
name|schema
decl_stmt|;
specifier|protected
name|AegisContext
name|aegisContext
decl_stmt|;
specifier|protected
name|Context
name|context
decl_stmt|;
specifier|protected
name|AbstractAegisIoImpl
parameter_list|(
name|AegisContext
name|globalContext
parameter_list|)
block|{
name|aegisContext
operator|=
name|globalContext
expr_stmt|;
name|context
operator|=
operator|new
name|Context
argument_list|(
name|globalContext
argument_list|)
expr_stmt|;
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Due to the fact that the element data reader borrows this class, we need      * a constructor that takes an existing context.      * @param globalContext      * @param context      */
specifier|protected
name|AbstractAegisIoImpl
parameter_list|(
name|AegisContext
name|globalContext
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
name|aegisContext
operator|=
name|globalContext
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc}*/
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|prop
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|DataReader
operator|.
name|FAULT
operator|.
name|equals
argument_list|(
name|prop
argument_list|)
condition|)
block|{
name|context
operator|.
name|setFault
argument_list|(
operator|(
name|Fault
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc}*/
specifier|public
name|void
name|setSchema
parameter_list|(
name|Schema
name|s
parameter_list|)
block|{     }
specifier|public
name|Context
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
block|}
end_class

end_unit

