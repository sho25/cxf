begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|util
operator|.
name|date
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|FieldPosition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParsePosition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_comment
comment|/**  *<p>  * An instance of {@link java.text.Format}, which may be used to parse and  * format<code>xs:dateTime</code> values.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|XsDateTimeFormat
extends|extends
name|Format
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3258131340871479609L
decl_stmt|;
specifier|final
name|boolean
name|parseDate
decl_stmt|;
specifier|final
name|boolean
name|parseTime
decl_stmt|;
specifier|final
name|boolean
name|parseTimezone
decl_stmt|;
name|XsDateTimeFormat
parameter_list|(
name|boolean
name|pParseDate
parameter_list|,
name|boolean
name|pParseTime
parameter_list|)
block|{
name|this
argument_list|(
name|pParseDate
argument_list|,
name|pParseTime
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|XsDateTimeFormat
parameter_list|(
name|boolean
name|pParseDate
parameter_list|,
name|boolean
name|pParseTime
parameter_list|,
name|boolean
name|pParseTimezone
parameter_list|)
block|{
name|parseDate
operator|=
name|pParseDate
expr_stmt|;
name|parseTime
operator|=
name|pParseTime
expr_stmt|;
name|parseTimezone
operator|=
name|pParseTimezone
expr_stmt|;
block|}
comment|/**      * Creates a new instance.      */
specifier|public
name|XsDateTimeFormat
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|parseObject
parameter_list|(
name|String
name|pString
parameter_list|,
name|ParsePosition
name|pParsePosition
parameter_list|)
block|{
if|if
condition|(
name|pString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The String argument must not be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|pParsePosition
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The ParsePosition argument must not be null."
argument_list|)
throw|;
block|}
name|int
name|offset
init|=
name|pParsePosition
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|int
name|idxSpc
init|=
name|pString
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|int
name|idxCom
init|=
name|pString
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|,
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|idxCom
operator|!=
operator|-
literal|1
operator|&&
name|idxCom
operator|<
name|idxSpc
condition|)
block|{
name|idxSpc
operator|=
name|idxCom
expr_stmt|;
block|}
name|String
name|newVal
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|idxSpc
operator|==
operator|-
literal|1
condition|)
block|{
name|newVal
operator|=
name|pString
operator|.
name|substring
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newVal
operator|=
name|pString
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|idxSpc
argument_list|)
expr_stmt|;
block|}
name|DatatypeFactory
name|factory
decl_stmt|;
try|try
block|{
name|factory
operator|=
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|XMLGregorianCalendar
name|cal
init|=
name|factory
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|newVal
argument_list|)
decl_stmt|;
name|pParsePosition
operator|.
name|setIndex
argument_list|(
name|idxSpc
argument_list|)
expr_stmt|;
return|return
name|cal
operator|.
name|toGregorianCalendar
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|e
parameter_list|)
block|{
name|pParsePosition
operator|.
name|setErrorIndex
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|append
parameter_list|(
name|StringBuffer
name|pBuffer
parameter_list|,
name|int
name|pNum
parameter_list|,
name|int
name|pMinLen
parameter_list|)
block|{
name|String
name|s
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|pNum
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|s
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|pMinLen
condition|;
name|i
operator|++
control|)
block|{
name|pBuffer
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|pBuffer
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|StringBuffer
name|format
parameter_list|(
name|Object
name|pCalendar
parameter_list|,
name|StringBuffer
name|pBuffer
parameter_list|,
name|FieldPosition
name|pPos
parameter_list|)
block|{
if|if
condition|(
name|pCalendar
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The Calendar argument must not be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|pBuffer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The StringBuffer argument must not be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|pPos
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The FieldPosition argument must not be null."
argument_list|)
throw|;
block|}
name|Calendar
name|cal
init|=
operator|(
name|Calendar
operator|)
name|pCalendar
decl_stmt|;
if|if
condition|(
name|parseDate
condition|)
block|{
name|int
name|year
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|year
operator|<
literal|0
condition|)
block|{
name|pBuffer
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|year
operator|=
operator|-
name|year
expr_stmt|;
block|}
name|append
argument_list|(
name|pBuffer
argument_list|,
name|year
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|pBuffer
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|pBuffer
argument_list|,
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
operator|+
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|pBuffer
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|pBuffer
argument_list|,
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|parseTime
condition|)
block|{
name|pBuffer
operator|.
name|append
argument_list|(
literal|'T'
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parseTime
condition|)
block|{
name|append
argument_list|(
name|pBuffer
argument_list|,
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|pBuffer
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|pBuffer
argument_list|,
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|pBuffer
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|pBuffer
argument_list|,
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|millis
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|)
decl_stmt|;
if|if
condition|(
name|millis
operator|>
literal|0
condition|)
block|{
name|pBuffer
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|pBuffer
argument_list|,
name|millis
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parseTimezone
condition|)
block|{
name|TimeZone
name|tz
init|=
name|cal
operator|.
name|getTimeZone
argument_list|()
decl_stmt|;
comment|// JDK 1.4: int offset = tz.getOffset(cal.getTimeInMillis());
name|int
name|offset
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|ZONE_OFFSET
argument_list|)
decl_stmt|;
if|if
condition|(
name|tz
operator|.
name|inDaylightTime
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|offset
operator|+=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DST_OFFSET
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|==
literal|0
condition|)
block|{
name|pBuffer
operator|.
name|append
argument_list|(
literal|'Z'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|offset
operator|<
literal|0
condition|)
block|{
name|pBuffer
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|offset
operator|=
operator|-
name|offset
expr_stmt|;
block|}
else|else
block|{
name|pBuffer
operator|.
name|append
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
block|}
name|int
name|minutes
init|=
name|offset
operator|/
operator|(
literal|60
operator|*
literal|1000
operator|)
decl_stmt|;
name|int
name|hours
init|=
name|minutes
operator|/
literal|60
decl_stmt|;
name|minutes
operator|-=
name|hours
operator|*
literal|60
expr_stmt|;
name|append
argument_list|(
name|pBuffer
argument_list|,
name|hours
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|pBuffer
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|pBuffer
argument_list|,
name|minutes
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pBuffer
return|;
block|}
block|}
end_class

end_unit

