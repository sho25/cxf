begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|DatabindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|AegisType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|ObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageWriter
import|;
end_import

begin_comment
comment|/**  * TrailingBlocks reads and writes the extra objects referenced but not written in the main message parts.  * These objects are commonly refered to as serialization (SOAP spec) roots and trailing blocks (JaxRpc spec).  * This class uses ObjectType to perform the actual reading and writting, so each block will (and must)  * contain an xsi type element.  *<p/>  * Typically, all message parts are read or written using the SoapRefType and before closing the SOAP body  * element the trailing blocks are read or written using this class.  */
end_comment

begin_class
specifier|public
class|class
name|TrailingBlocks
block|{
comment|/**      * The ObjectType used to read and write the trailing block instances.      */
specifier|private
name|ObjectType
name|objectType
decl_stmt|;
specifier|public
name|TrailingBlocks
parameter_list|()
block|{
comment|// we only work with mapped types
name|objectType
operator|=
operator|new
name|ObjectType
argument_list|()
expr_stmt|;
name|objectType
operator|.
name|setReadToDocument
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TrailingBlocks
parameter_list|(
name|TypeMapping
name|typeMapping
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|objectType
operator|.
name|setTypeMapping
argument_list|(
name|typeMapping
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TrailingBlocks
parameter_list|(
name|ObjectType
name|objectType
parameter_list|)
block|{
name|this
operator|.
name|objectType
operator|=
name|objectType
expr_stmt|;
block|}
comment|/**      * Gets the ObjectType used to read and write the trailing block instances.      *      * @return the ObjectType used to read and write the trailing block instances.      */
specifier|public
name|ObjectType
name|getObjectType
parameter_list|()
block|{
return|return
name|objectType
return|;
block|}
comment|/**      * Sets the ObjectType used to read and write the trailing block instances.      *      * @param objectType the ObjectType used to read and write the trailing block instances.      */
specifier|public
name|void
name|setObjectType
parameter_list|(
name|ObjectType
name|objectType
parameter_list|)
block|{
name|this
operator|.
name|objectType
operator|=
name|objectType
expr_stmt|;
block|}
comment|/**      * Reads all remailing elements in the reader and registers them with the SoapRefRegistry in the context.      *      * @param reader the stream to read      * @param context the unmarshal context      * @return a list containing the object instances read      * @throws DatabindingException if a trailing block element does not contain a soap id attribute      */
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|readBlocks
parameter_list|(
name|MessageReader
name|reader
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|DatabindingException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|blocks
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// read extra serialization roots
while|while
condition|(
name|reader
operator|.
name|hasMoreElementReaders
argument_list|()
condition|)
block|{
name|MessageReader
name|creader
init|=
name|reader
operator|.
name|getNextElementReader
argument_list|()
decl_stmt|;
comment|// read the instance id
name|String
name|id
init|=
name|SoapEncodingUtil
operator|.
name|readId
argument_list|(
name|creader
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Trailing block does not contain a SOAP id attribute "
operator|+
name|creader
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// read the instance
name|Object
name|instance
init|=
name|objectType
operator|.
name|readObject
argument_list|(
name|creader
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|blocks
operator|.
name|add
argument_list|(
name|instance
argument_list|)
expr_stmt|;
comment|// register the instance
name|SoapRefRegistry
operator|.
name|get
argument_list|(
name|context
argument_list|)
operator|.
name|addInstance
argument_list|(
name|id
argument_list|,
name|instance
argument_list|)
expr_stmt|;
comment|// close the element reader
name|creader
operator|.
name|readToEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|blocks
return|;
block|}
comment|/**      * Writes all of the unmarshalled objects in the MarshalRegistry.      *      * @param writer the stream to write the objects      * @param context the marshal context      * @return a list containing the object instances written      */
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|writeBlocks
parameter_list|(
name|MessageWriter
name|writer
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|blocks
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|instance
range|:
name|MarshalRegistry
operator|.
name|get
argument_list|(
name|context
argument_list|)
control|)
block|{
comment|// determine instance type
name|AegisType
name|type
init|=
name|objectType
operator|.
name|determineType
argument_list|(
name|context
argument_list|,
name|instance
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|TypeMapping
name|tm
init|=
name|context
operator|.
name|getTypeMapping
argument_list|()
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
block|{
name|tm
operator|=
name|objectType
operator|.
name|getTypeMapping
argument_list|()
expr_stmt|;
block|}
name|type
operator|=
name|tm
operator|.
name|getTypeCreator
argument_list|()
operator|.
name|createType
argument_list|(
name|instance
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|tm
operator|.
name|register
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|// create an new element for the instance
name|MessageWriter
name|cwriter
init|=
name|writer
operator|.
name|getElementWriter
argument_list|(
name|type
operator|.
name|getSchemaType
argument_list|()
argument_list|)
decl_stmt|;
comment|// write the id attribute
name|String
name|id
init|=
name|MarshalRegistry
operator|.
name|get
argument_list|(
name|context
argument_list|)
operator|.
name|getInstanceId
argument_list|(
name|instance
argument_list|)
decl_stmt|;
name|SoapEncodingUtil
operator|.
name|writeId
argument_list|(
name|cwriter
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// write the instance
name|objectType
operator|.
name|writeObject
argument_list|(
name|instance
argument_list|,
name|cwriter
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|blocks
operator|.
name|add
argument_list|(
name|instance
argument_list|)
expr_stmt|;
comment|// close the element
name|cwriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|blocks
return|;
block|}
block|}
end_class

end_unit

