begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|databinding
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AegisContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|AbstractServiceConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|ReflectionServiceFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_comment
comment|/**  * Configure the services based on information in a .aegis.xml file  * for the SEI or SEB.  */
end_comment

begin_class
specifier|public
class|class
name|AegisXmlServiceConfiguration
extends|extends
name|AbstractServiceConfiguration
block|{
specifier|private
name|AegisContext
name|context
decl_stmt|;
specifier|private
name|TypeCreator
name|creator
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|serviceClass
decl_stmt|;
specifier|private
name|void
name|getTypeCreator
parameter_list|()
block|{
if|if
condition|(
name|creator
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|DataBinding
name|db
init|=
name|getServiceFactory
argument_list|()
operator|.
name|getDataBinding
argument_list|()
decl_stmt|;
if|if
condition|(
name|db
operator|instanceof
name|AegisDatabinding
condition|)
block|{
name|context
operator|=
operator|(
operator|(
name|AegisDatabinding
operator|)
name|db
operator|)
operator|.
name|getAegisContext
argument_list|()
expr_stmt|;
name|serviceClass
operator|=
name|getServiceFactory
argument_list|()
operator|.
name|getServiceClass
argument_list|()
expr_stmt|;
name|creator
operator|=
name|context
operator|.
name|getTypeMapping
argument_list|()
operator|.
name|getTypeCreator
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setServiceFactory
parameter_list|(
name|ReflectionServiceFactoryBean
name|serviceFactory
parameter_list|)
block|{
name|super
operator|.
name|setServiceFactory
argument_list|(
name|serviceFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getInParameterName
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|,
name|int
name|paramNumber
parameter_list|)
block|{
name|getTypeCreator
argument_list|()
expr_stmt|;
if|if
condition|(
name|creator
operator|!=
literal|null
condition|)
block|{
name|QName
name|paramName
init|=
name|creator
operator|.
name|getElementName
argument_list|(
name|method
argument_list|,
name|paramNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramName
operator|!=
literal|null
condition|)
block|{
return|return
name|paramName
return|;
block|}
block|}
return|return
name|super
operator|.
name|getInParameterName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|paramNumber
argument_list|)
return|;
block|}
block|}
end_class

end_unit

