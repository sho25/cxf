begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_comment
comment|/**  * Object to carry information for an Aegis type,  * such as that from an XML mapping file.  *  * Note that this class has a misleading name. It is used both for  * type information that corresponds to a type, and also for parameters  * of methods and elements of beans. When describing a top-level type,  * minOccurs and maxOccurs are not meaningful. Aegis does not have a  * very clear model of a 'type', in the sense of an AegisType object  * corresponding to some particular XML Schema type, in isolation  * from the mapping system.  *  * Historically, Aegis talked about Java types as Class. However,  * we want to be able to keep track, distinctly, of un-erased  * generics. That requires java.lang.reflect.Type.  *  *  Nillable is only used for parameters.  *  *  It might be that the code could be deconfused by  * using the nillable property in here for the non-parameters cases  * that look at minOccurs and maxOccurs.  *  * Historically, the code for dealing with nillable was very confused,  * and so the support here is a bit ginger, until someone figures out how  * to sort things out. Thus the three-valued support instead  * of a plain boolean.  */
end_comment

begin_class
specifier|public
class|class
name|TypeClassInfo
block|{
comment|// The general reflection Type.
specifier|private
name|Type
name|type
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|typeVars
decl_stmt|;
specifier|private
name|Object
index|[]
name|annotations
decl_stmt|;
comment|// for collection types we pull out the parameters for convenience.
specifier|private
name|Type
name|keyType
decl_stmt|;
specifier|private
name|Type
name|valueType
decl_stmt|;
comment|// Preferred element name.
specifier|private
name|QName
name|mappedName
decl_stmt|;
comment|// XML schema name for the type.
specifier|private
name|QName
name|typeName
decl_stmt|;
comment|// a Class reference to the aegis aegisTypeClass, if the app has specified it
comment|// via XML or via an annotation.
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|AegisType
argument_list|>
name|aegisTypeClass
decl_stmt|;
specifier|private
name|String
name|description
decl_stmt|;
specifier|private
name|long
name|minOccurs
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|maxOccurs
init|=
operator|-
literal|1
decl_stmt|;
comment|// Flat array.
specifier|private
name|boolean
name|flat
decl_stmt|;
specifier|private
name|Boolean
name|nillable
decl_stmt|;
specifier|public
name|boolean
name|nonDefaultAttributes
parameter_list|()
block|{
return|return
name|minOccurs
operator|!=
operator|-
literal|1
operator|||
name|maxOccurs
operator|!=
operator|-
literal|1
operator|||
name|flat
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
specifier|public
name|Object
index|[]
name|getAnnotations
parameter_list|()
block|{
return|return
name|annotations
return|;
block|}
specifier|public
name|void
name|setAnnotations
parameter_list|(
name|Object
index|[]
name|annotations
parameter_list|)
block|{
name|this
operator|.
name|annotations
operator|=
name|annotations
expr_stmt|;
block|}
specifier|public
name|Type
name|getKeyType
parameter_list|()
block|{
return|return
name|keyType
return|;
block|}
specifier|public
name|void
name|setKeyType
parameter_list|(
name|Type
name|keyType
parameter_list|)
block|{
name|this
operator|.
name|keyType
operator|=
name|keyType
expr_stmt|;
block|}
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|Type
name|tp
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|vars
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|tp
expr_stmt|;
name|this
operator|.
name|typeVars
operator|=
name|vars
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|getTypeVars
parameter_list|()
block|{
return|return
name|typeVars
return|;
block|}
specifier|public
name|QName
name|getTypeName
parameter_list|()
block|{
return|return
name|typeName
return|;
block|}
specifier|public
name|void
name|setTypeName
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
name|this
operator|.
name|typeName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|AegisType
argument_list|>
name|getAegisTypeClass
parameter_list|()
block|{
return|return
name|aegisTypeClass
return|;
block|}
specifier|public
name|void
name|setAegisTypeClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|AegisType
argument_list|>
name|aegisTypeClass
parameter_list|)
block|{
name|this
operator|.
name|aegisTypeClass
operator|=
name|aegisTypeClass
expr_stmt|;
block|}
specifier|public
name|QName
name|getMappedName
parameter_list|()
block|{
return|return
name|mappedName
return|;
block|}
specifier|public
name|void
name|setMappedName
parameter_list|(
name|QName
name|mappedName
parameter_list|)
block|{
name|this
operator|.
name|mappedName
operator|=
name|mappedName
expr_stmt|;
block|}
specifier|public
name|long
name|getMaxOccurs
parameter_list|()
block|{
return|return
name|maxOccurs
return|;
block|}
specifier|public
name|void
name|setMaxOccurs
parameter_list|(
name|long
name|maxOccurs
parameter_list|)
block|{
name|this
operator|.
name|maxOccurs
operator|=
name|maxOccurs
expr_stmt|;
block|}
specifier|public
name|long
name|getMinOccurs
parameter_list|()
block|{
return|return
name|minOccurs
return|;
block|}
specifier|public
name|void
name|setMinOccurs
parameter_list|(
name|long
name|minOccurs
parameter_list|)
block|{
name|this
operator|.
name|minOccurs
operator|=
name|minOccurs
expr_stmt|;
block|}
specifier|public
name|boolean
name|isFlat
parameter_list|()
block|{
return|return
name|flat
return|;
block|}
specifier|public
name|void
name|setFlat
parameter_list|(
name|boolean
name|flat
parameter_list|)
block|{
name|this
operator|.
name|flat
operator|=
name|flat
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TypeClassInfo "
operator|+
name|getDescription
argument_list|()
return|;
block|}
specifier|public
name|Type
name|getValueType
parameter_list|()
block|{
return|return
name|valueType
return|;
block|}
specifier|public
name|void
name|setValueType
parameter_list|(
name|Type
name|valueType
parameter_list|)
block|{
name|this
operator|.
name|valueType
operator|=
name|valueType
expr_stmt|;
block|}
specifier|public
name|Boolean
name|getNillable
parameter_list|()
block|{
return|return
name|nillable
return|;
block|}
specifier|public
name|void
name|setNillable
parameter_list|(
name|Boolean
name|nillable
parameter_list|)
block|{
name|this
operator|.
name|nillable
operator|=
name|nillable
expr_stmt|;
block|}
block|}
end_class

end_unit

