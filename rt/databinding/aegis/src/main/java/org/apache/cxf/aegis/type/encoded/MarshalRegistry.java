begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|Context
import|;
end_import

begin_comment
comment|/**  * MarshalRegistry maintains tracks which object instances have been marshaled  * and which objects still need to be marshaled.  *<p/>  * Note: only the StructType register objects with this class.  */
end_comment

begin_class
specifier|public
class|class
name|MarshalRegistry
implements|implements
name|Iterable
argument_list|<
name|Object
argument_list|>
block|{
comment|/**      * All objects instances with ids.  It is CRITICAL that is be an IdentityHashMap to assure we don't      * exclude instances that are equivilant but different instances.      */
specifier|private
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|instances
init|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * The objects not yet marshaled.  The is maintained as a map for debugging purposes. It is IMPORTANT      * that this be a LinkedHashMap so we write the objects in the order they were discovered in the object      * graphs (and writes them in numeric order).      */
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|notMarshalled
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * The next id.      */
specifier|private
name|int
name|nextId
decl_stmt|;
comment|/**      * Get the MarshalRegistry stored in the context, and if necessary create a new one.      *      * @param context the unmarshal context      * @return the SoapRefRegistry; never null      */
specifier|public
specifier|static
name|MarshalRegistry
name|get
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|MarshalRegistry
name|marshalRegistry
init|=
name|context
operator|.
name|getProperty
argument_list|(
name|MarshalRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|marshalRegistry
operator|==
literal|null
condition|)
block|{
name|marshalRegistry
operator|=
operator|new
name|MarshalRegistry
argument_list|()
expr_stmt|;
name|context
operator|.
name|setProperty
argument_list|(
name|marshalRegistry
argument_list|)
expr_stmt|;
block|}
return|return
name|marshalRegistry
return|;
block|}
specifier|public
name|String
name|getInstanceId
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
name|String
name|id
init|=
name|instances
operator|.
name|get
argument_list|(
name|instance
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
literal|""
operator|+
name|nextId
operator|++
expr_stmt|;
name|instances
operator|.
name|put
argument_list|(
name|instance
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|notMarshalled
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
comment|/**      * Returns an iterator over the object instances that have not been marshalled yet.  As each instance in      * this iterator is written, it may contain references to additional objects that have not been written.      * Those references objects will be added to the end of this iterator, so the "list" that is being      * iterated over grows as the iteration preceeds.      *<p/>      * When an instance is returned from this iterator it is marked as marshalled.      *      * @return an iterator over the objects to be marshalled.      */
specifier|public
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
operator|!
name|notMarshalled
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
comment|// remove the first entry in the notMarshalled map
name|Iterator
argument_list|<
name|Object
argument_list|>
name|iterator
init|=
name|notMarshalled
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Object
name|instance
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// return the instance
return|return
name|instance
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

