begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|java5
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|DatabindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SOAPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Namespace
import|;
end_import

begin_class
specifier|public
class|class
name|EnumType
extends|extends
name|Type
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Object
name|readObject
parameter_list|(
name|MessageReader
name|reader
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
name|String
name|value
init|=
name|reader
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|Enum
operator|.
name|valueOf
argument_list|(
name|getTypeClass
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|Object
name|object
parameter_list|,
name|MessageWriter
name|writer
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
comment|// match the reader.
name|writer
operator|.
name|writeValue
argument_list|(
operator|(
operator|(
name|Enum
operator|)
name|object
operator|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTypeClass
parameter_list|(
name|Class
name|typeClass
parameter_list|)
block|{
if|if
condition|(
operator|!
name|typeClass
operator|.
name|isEnum
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Type class must be an enum."
argument_list|)
throw|;
block|}
name|super
operator|.
name|setTypeClass
argument_list|(
name|typeClass
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeSchema
parameter_list|(
name|Element
name|root
parameter_list|)
block|{
name|Namespace
name|xsd
init|=
name|Namespace
operator|.
name|getNamespace
argument_list|(
name|SOAPConstants
operator|.
name|XSD_PREFIX
argument_list|,
name|SOAPConstants
operator|.
name|XSD
argument_list|)
decl_stmt|;
name|Element
name|simple
init|=
operator|new
name|Element
argument_list|(
literal|"simpleType"
argument_list|,
name|xsd
argument_list|)
decl_stmt|;
name|simple
operator|.
name|setAttribute
argument_list|(
operator|new
name|Attribute
argument_list|(
literal|"name"
argument_list|,
name|getSchemaType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addContent
argument_list|(
name|simple
argument_list|)
expr_stmt|;
name|Element
name|restriction
init|=
operator|new
name|Element
argument_list|(
literal|"restriction"
argument_list|,
name|xsd
argument_list|)
decl_stmt|;
name|restriction
operator|.
name|setAttribute
argument_list|(
operator|new
name|Attribute
argument_list|(
literal|"base"
argument_list|,
name|SOAPConstants
operator|.
name|XSD_PREFIX
operator|+
literal|":string"
argument_list|)
argument_list|)
expr_stmt|;
name|simple
operator|.
name|addContent
argument_list|(
name|restriction
argument_list|)
expr_stmt|;
name|Object
index|[]
name|constants
init|=
name|getTypeClass
argument_list|()
operator|.
name|getEnumConstants
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|constant
range|:
name|constants
control|)
block|{
name|Element
name|enumeration
init|=
operator|new
name|Element
argument_list|(
literal|"enumeration"
argument_list|,
name|xsd
argument_list|)
decl_stmt|;
name|enumeration
operator|.
name|setAttribute
argument_list|(
operator|new
name|Attribute
argument_list|(
literal|"value"
argument_list|,
operator|(
operator|(
name|Enum
operator|)
name|constant
operator|)
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|restriction
operator|.
name|addContent
argument_list|(
name|enumeration
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isComplex
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

