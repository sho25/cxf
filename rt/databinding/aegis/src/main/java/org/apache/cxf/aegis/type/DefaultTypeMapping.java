begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|Base64Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|BigDecimalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|BigIntegerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|BooleanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|ByteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|CalendarType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|CharacterAsStringType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|CharacterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|DateTimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|DoubleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|FloatType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|IntType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|LongType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|ObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|ShortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|SqlDateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|StringType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|TimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|TimestampType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|URIType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|mtom
operator|.
name|AbstractXOPType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|mtom
operator|.
name|DataHandlerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|mtom
operator|.
name|DataSourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|xml
operator|.
name|DocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|xml
operator|.
name|JDOMDocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|xml
operator|.
name|JDOMElementType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|xml
operator|.
name|SourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|xml
operator|.
name|XMLStreamReaderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SOAPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|XMLSchemaQNames
import|;
end_import

begin_comment
comment|/**  * Contains type mappings for java/qname pairs.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultTypeMapping
implements|implements
name|TypeMapping
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_MAPPING_URI
init|=
literal|"urn:org.apache.cxf.aegis.types"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|DefaultTypeMapping
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Class
argument_list|,
name|Type
argument_list|>
name|class2Type
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|Type
argument_list|>
name|xml2Type
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Class
argument_list|,
name|QName
argument_list|>
name|class2xml
decl_stmt|;
specifier|private
name|TypeMapping
name|nextTM
decl_stmt|;
specifier|private
name|TypeCreator
name|typeCreator
decl_stmt|;
specifier|private
name|String
name|identifierURI
decl_stmt|;
specifier|public
name|DefaultTypeMapping
parameter_list|(
name|String
name|identifierURI
parameter_list|,
name|TypeMapping
name|defaultTM
parameter_list|)
block|{
name|this
argument_list|(
name|identifierURI
argument_list|)
expr_stmt|;
name|this
operator|.
name|nextTM
operator|=
name|defaultTM
expr_stmt|;
block|}
specifier|public
name|DefaultTypeMapping
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_MAPPING_URI
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultTypeMapping
parameter_list|(
name|String
name|identifierURI
parameter_list|)
block|{
name|this
operator|.
name|identifierURI
operator|=
name|identifierURI
expr_stmt|;
name|class2Type
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|Type
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|class2xml
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|QName
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|xml2Type
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Type
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRegistered
parameter_list|(
name|Class
name|javaType
parameter_list|)
block|{
name|boolean
name|registered
init|=
name|class2Type
operator|.
name|containsKey
argument_list|(
name|javaType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|registered
operator|&&
name|nextTM
operator|!=
literal|null
condition|)
block|{
name|registered
operator|=
name|nextTM
operator|.
name|isRegistered
argument_list|(
name|javaType
argument_list|)
expr_stmt|;
block|}
return|return
name|registered
return|;
block|}
specifier|public
name|boolean
name|isRegistered
parameter_list|(
name|QName
name|xmlType
parameter_list|)
block|{
name|boolean
name|registered
init|=
name|xml2Type
operator|.
name|containsKey
argument_list|(
name|xmlType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|registered
operator|&&
name|nextTM
operator|!=
literal|null
condition|)
block|{
name|registered
operator|=
name|nextTM
operator|.
name|isRegistered
argument_list|(
name|xmlType
argument_list|)
expr_stmt|;
block|}
return|return
name|registered
return|;
block|}
specifier|public
name|void
name|register
parameter_list|(
name|Class
name|javaType
parameter_list|,
name|QName
name|xmlType
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
name|type
operator|.
name|setSchemaType
argument_list|(
name|xmlType
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|javaType
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|register
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|type
operator|.
name|setTypeMapping
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|/*          * -- prb@codehaus.org; changing this to only register the type for          * actions that it supports, and it could be none.          */
if|if
condition|(
name|type
operator|.
name|getTypeClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|class2xml
operator|.
name|put
argument_list|(
name|type
operator|.
name|getTypeClass
argument_list|()
argument_list|,
name|type
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|class2Type
operator|.
name|put
argument_list|(
name|type
operator|.
name|getTypeClass
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|getSchemaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|xml2Type
operator|.
name|put
argument_list|(
name|type
operator|.
name|getSchemaType
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|getTypeClass
argument_list|()
operator|==
literal|null
operator|&&
name|type
operator|.
name|getSchemaType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"The type "
operator|+
name|type
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" supports neither serialization (non-null TypeClass)"
operator|+
literal|" nor deserialization (non-null SchemaType)."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
name|xml2Type
operator|.
name|containsKey
argument_list|(
name|type
operator|.
name|getSchemaType
argument_list|()
argument_list|)
condition|)
block|{
name|nextTM
operator|.
name|removeType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xml2Type
operator|.
name|remove
argument_list|(
name|type
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|class2Type
operator|.
name|remove
argument_list|(
name|type
operator|.
name|getTypeClass
argument_list|()
argument_list|)
expr_stmt|;
name|class2xml
operator|.
name|remove
argument_list|(
name|type
operator|.
name|getTypeClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see org.apache.cxf.aegis.type.TypeMapping#getType(java.lang.Class)      */
specifier|public
name|Type
name|getType
parameter_list|(
name|Class
name|javaType
parameter_list|)
block|{
name|Type
name|type
init|=
name|class2Type
operator|.
name|get
argument_list|(
name|javaType
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|&&
name|nextTM
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|nextTM
operator|.
name|getType
argument_list|(
name|javaType
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
comment|/**      * @see org.apache.cxf.aegis.type.TypeMapping#getType(javax.xml.namespace.QName)      */
specifier|public
name|Type
name|getType
parameter_list|(
name|QName
name|xmlType
parameter_list|)
block|{
name|Type
name|type
init|=
name|xml2Type
operator|.
name|get
argument_list|(
name|xmlType
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|&&
name|nextTM
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|nextTM
operator|.
name|getType
argument_list|(
name|xmlType
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
comment|/**      * @see org.apache.cxf.aegis.type.TypeMapping#getTypeQName(java.lang.Class)      */
specifier|public
name|QName
name|getTypeQName
parameter_list|(
name|Class
name|clazz
parameter_list|)
block|{
name|QName
name|qname
init|=
name|class2xml
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|qname
operator|==
literal|null
operator|&&
name|nextTM
operator|!=
literal|null
condition|)
block|{
name|qname
operator|=
name|nextTM
operator|.
name|getTypeQName
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|qname
return|;
block|}
specifier|public
name|TypeCreator
name|getTypeCreator
parameter_list|()
block|{
return|return
name|typeCreator
return|;
block|}
specifier|public
name|void
name|setTypeCreator
parameter_list|(
name|TypeCreator
name|typeCreator
parameter_list|)
block|{
name|this
operator|.
name|typeCreator
operator|=
name|typeCreator
expr_stmt|;
name|typeCreator
operator|.
name|setTypeMapping
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TypeMapping
name|getParent
parameter_list|()
block|{
return|return
name|nextTM
return|;
block|}
specifier|private
specifier|static
name|void
name|defaultRegister
parameter_list|(
name|TypeMapping
name|tm
parameter_list|,
name|boolean
name|defaultNillable
parameter_list|,
name|Class
name|class1
parameter_list|,
name|QName
name|name
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
name|defaultNillable
condition|)
block|{
name|type
operator|.
name|setNillable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|tm
operator|.
name|register
argument_list|(
name|class1
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|fillStandardMappings
parameter_list|(
name|TypeMapping
name|tm
parameter_list|,
name|boolean
name|defaultNillable
parameter_list|,
name|boolean
name|enableMtomXmime
parameter_list|,
name|boolean
name|enableJDOM
parameter_list|)
block|{
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|BigDecimal
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_DECIMAL
argument_list|,
operator|new
name|BigDecimalType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|BigInteger
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_INTEGER
argument_list|,
operator|new
name|BigIntegerType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_BOOLEAN
argument_list|,
operator|new
name|BooleanType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|Calendar
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_DATETIME
argument_list|,
operator|new
name|CalendarType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|Date
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_DATETIME
argument_list|,
operator|new
name|DateTimeType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|Float
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_FLOAT
argument_list|,
operator|new
name|FloatType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|Double
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_DOUBLE
argument_list|,
operator|new
name|DoubleType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_INT
argument_list|,
operator|new
name|IntType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|Long
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_LONG
argument_list|,
operator|new
name|LongType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_ANY
argument_list|,
operator|new
name|ObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|Byte
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_BYTE
argument_list|,
operator|new
name|ByteType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|Short
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_SHORT
argument_list|,
operator|new
name|ShortType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|Source
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_ANY
argument_list|,
operator|new
name|SourceType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_STRING
argument_list|,
operator|new
name|StringType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|Time
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_TIME
argument_list|,
operator|new
name|TimeType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|Timestamp
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_DATETIME
argument_list|,
operator|new
name|TimestampType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|URI
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_URI
argument_list|,
operator|new
name|URIType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|XMLStreamReader
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_ANY
argument_list|,
operator|new
name|XMLStreamReaderType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|boolean
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_BOOLEAN
argument_list|,
operator|new
name|BooleanType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_BASE64
argument_list|,
operator|new
name|Base64Type
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|double
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_DOUBLE
argument_list|,
operator|new
name|DoubleType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|float
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_FLOAT
argument_list|,
operator|new
name|FloatType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_INT
argument_list|,
operator|new
name|IntType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|short
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_SHORT
argument_list|,
operator|new
name|ShortType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|byte
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_BYTE
argument_list|,
operator|new
name|ByteType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_LONG
argument_list|,
operator|new
name|LongType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_DATETIME
argument_list|,
operator|new
name|SqlDateType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_DATE
argument_list|,
operator|new
name|SqlDateType
argument_list|()
argument_list|)
expr_stmt|;
name|QName
name|mtomBase64
init|=
name|XMLSchemaQNames
operator|.
name|XSD_BASE64
decl_stmt|;
if|if
condition|(
name|enableMtomXmime
condition|)
block|{
name|mtomBase64
operator|=
name|AbstractXOPType
operator|.
name|XML_MIME_BASE64
expr_stmt|;
block|}
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|DataSource
operator|.
name|class
argument_list|,
name|mtomBase64
argument_list|,
operator|new
name|DataSourceType
argument_list|(
name|enableMtomXmime
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|DataHandler
operator|.
name|class
argument_list|,
name|mtomBase64
argument_list|,
operator|new
name|DataHandlerType
argument_list|(
name|enableMtomXmime
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|Document
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_ANY
argument_list|,
operator|new
name|DocumentType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enableJDOM
condition|)
block|{
name|registerJDOMTypes
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|registerJDOMTypes
parameter_list|(
name|TypeMapping
name|tm
parameter_list|,
name|boolean
name|defaultNillable
parameter_list|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|jdomDocClass
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"org.jdom.Document"
argument_list|,
name|DefaultTypeMapping
operator|.
name|class
argument_list|)
decl_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|jdomDocClass
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_ANY
argument_list|,
operator|new
name|JDOMDocumentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// not available.
block|}
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|jdomElementClass
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"org.jdom.Element"
argument_list|,
name|DefaultTypeMapping
operator|.
name|class
argument_list|)
decl_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|jdomElementClass
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_ANY
argument_list|,
operator|new
name|JDOMElementType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// not available.
block|}
block|}
specifier|public
specifier|static
name|DefaultTypeMapping
name|createSoap11TypeMapping
parameter_list|(
name|boolean
name|defaultNillable
parameter_list|,
name|boolean
name|enableMtomXmime
parameter_list|)
block|{
return|return
name|createSoap11TypeMapping
argument_list|(
name|defaultNillable
argument_list|,
name|enableMtomXmime
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Create a type mapping object with a stock set of mappings, including the SOAP 1.1 'encoded'      * types.      * @param defaultNillable whether elements are nillable by default.      * @param enableMtomXmime whether to enable XMIME annotations with MTOM.      * @param enableJDOM whether to add mappings for JDOM.      * @return      */
specifier|public
specifier|static
name|DefaultTypeMapping
name|createSoap11TypeMapping
parameter_list|(
name|boolean
name|defaultNillable
parameter_list|,
name|boolean
name|enableMtomXmime
parameter_list|,
name|boolean
name|enableJDOM
parameter_list|)
block|{
comment|// Create a Type Mapping for SOAP 1.1 Encoding
name|DefaultTypeMapping
name|soapTM
init|=
operator|new
name|DefaultTypeMapping
argument_list|(
name|Soap11
operator|.
name|SOAP_ENCODING_URI
argument_list|)
decl_stmt|;
name|fillStandardMappings
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|enableMtomXmime
argument_list|,
name|enableJDOM
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|boolean
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_BOOLEAN
argument_list|,
operator|new
name|BooleanType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|char
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_CHAR
argument_list|,
operator|new
name|CharacterType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_INT
argument_list|,
operator|new
name|IntType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|short
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_SHORT
argument_list|,
operator|new
name|ShortType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|double
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_DOUBLE
argument_list|,
operator|new
name|DoubleType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|float
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_FLOAT
argument_list|,
operator|new
name|FloatType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|long
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_LONG
argument_list|,
operator|new
name|LongType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|char
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_CHAR
argument_list|,
operator|new
name|CharacterType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|Character
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_CHAR
argument_list|,
operator|new
name|CharacterType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_STRING
argument_list|,
operator|new
name|StringType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_BOOLEAN
argument_list|,
operator|new
name|BooleanType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_INT
argument_list|,
operator|new
name|IntType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|Short
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_SHORT
argument_list|,
operator|new
name|ShortType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|Double
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_DOUBLE
argument_list|,
operator|new
name|DoubleType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|Float
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_FLOAT
argument_list|,
operator|new
name|FloatType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|Long
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_LONG
argument_list|,
operator|new
name|LongType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|Date
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_DATETIME
argument_list|,
operator|new
name|DateTimeType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_DATETIME
argument_list|,
operator|new
name|SqlDateType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|Calendar
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_DATETIME
argument_list|,
operator|new
name|CalendarType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_BASE64
argument_list|,
operator|new
name|Base64Type
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|BigDecimal
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_DECIMAL
argument_list|,
operator|new
name|BigDecimalType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|soapTM
argument_list|,
name|defaultNillable
argument_list|,
name|BigInteger
operator|.
name|class
argument_list|,
name|Soap11
operator|.
name|ENCODED_INTEGER
argument_list|,
operator|new
name|BigIntegerType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|soapTM
return|;
block|}
specifier|public
specifier|static
name|DefaultTypeMapping
name|createDefaultTypeMapping
parameter_list|(
name|boolean
name|defaultNillable
parameter_list|,
name|boolean
name|enableMtomXmime
parameter_list|)
block|{
return|return
name|createDefaultTypeMapping
argument_list|(
name|defaultNillable
argument_list|,
name|enableMtomXmime
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Create a set of default type mappings.      * @param defaultNillable whether elements are nillable by default.      * @param enableMtomXmime whether to enable XMIME annotations on MTOM.      * @param enableJDOM whether to map JDOM types.      * @return      */
specifier|public
specifier|static
name|DefaultTypeMapping
name|createDefaultTypeMapping
parameter_list|(
name|boolean
name|defaultNillable
parameter_list|,
name|boolean
name|enableMtomXmime
parameter_list|,
name|boolean
name|enableJDOM
parameter_list|)
block|{
comment|// by convention, the default mapping is against the XML schema URI.
name|DefaultTypeMapping
name|tm
init|=
operator|new
name|DefaultTypeMapping
argument_list|(
name|SOAPConstants
operator|.
name|XSD
argument_list|)
decl_stmt|;
name|fillStandardMappings
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|enableMtomXmime
argument_list|,
name|enableJDOM
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|Character
operator|.
name|class
argument_list|,
name|CharacterAsStringType
operator|.
name|CHARACTER_AS_STRING_TYPE_QNAME
argument_list|,
operator|new
name|CharacterAsStringType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|char
operator|.
name|class
argument_list|,
name|CharacterAsStringType
operator|.
name|CHARACTER_AS_STRING_TYPE_QNAME
argument_list|,
operator|new
name|CharacterAsStringType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_DURATION
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|java5
operator|.
name|DurationType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_DATE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|java5
operator|.
name|XMLGregorianCalendarType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_TIME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|java5
operator|.
name|XMLGregorianCalendarType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_G_DAY
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|java5
operator|.
name|XMLGregorianCalendarType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_G_MONTH
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|java5
operator|.
name|XMLGregorianCalendarType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_G_MONTH_DAY
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|java5
operator|.
name|XMLGregorianCalendarType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_G_YEAR
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|java5
operator|.
name|XMLGregorianCalendarType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_G_YEAR_MONTH
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|java5
operator|.
name|XMLGregorianCalendarType
argument_list|()
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|tm
argument_list|,
name|defaultNillable
argument_list|,
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
operator|.
name|class
argument_list|,
name|XMLSchemaQNames
operator|.
name|XSD_DATETIME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|java5
operator|.
name|XMLGregorianCalendarType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tm
return|;
block|}
specifier|public
name|String
name|getMappingIdentifierURI
parameter_list|()
block|{
return|return
name|identifierURI
return|;
block|}
specifier|public
name|void
name|setMappingIdentifierURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|identifierURI
operator|=
name|uri
expr_stmt|;
block|}
block|}
end_class

end_unit

