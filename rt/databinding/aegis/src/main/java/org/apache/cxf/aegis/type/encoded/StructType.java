begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|DatabindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|BeanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|BeanTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageWriter
import|;
end_import

begin_comment
comment|/**  * StructType is a small extension of the BeanType which can properly read and write SOAP encoded structs. The  * modifications are:  *<ul>  *<li>Nested elements MUST be unqualified</li>  *<li>Nested elements MAY contain a SOAP ref attribute instead of an inline value</li>  *<li>Struct MAY contain a SOAP id attribute</li>  *</ul>  *</p>  * When writting, the class will always write the struct in the following canonical format:  *<ul>  *<li>Struct will contain a SOAP id</li>  *<li>Nested structs will be written as SOAP references (with SoapRefType)</li>  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|StructType
extends|extends
name|BeanType
block|{
specifier|public
name|StructType
parameter_list|()
block|{     }
specifier|public
name|StructType
parameter_list|(
name|BeanTypeInfo
name|info
parameter_list|)
block|{
name|super
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
comment|/**      * Gets the BeanTypeInfo using an unqualified name.      * @param name the unqualified name of the element      * @return the BeanTypeInfo containing a property with the specified unqualified name      */
annotation|@
name|Override
specifier|protected
name|BeanTypeInfo
name|getBeanTypeInfoWithProperty
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
comment|// nested elements use unqualified names
name|name
operator|=
name|qualifyName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getBeanTypeInfoWithProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Returns a SoapRefType wrapping the actual type.      */
annotation|@
name|Override
specifier|protected
name|Type
name|getElementType
parameter_list|(
name|QName
name|name
parameter_list|,
name|BeanTypeInfo
name|beanTypeInfo
parameter_list|,
name|MessageReader
name|reader
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
comment|// nested elements use unqualified names
name|name
operator|=
name|qualifyName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Type
name|type
init|=
name|super
operator|.
name|getElementType
argument_list|(
name|name
argument_list|,
name|beanTypeInfo
argument_list|,
name|reader
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
operator|new
name|SoapRefType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
comment|/**      * Adds special handeling for SoapRefs      */
annotation|@
name|Override
specifier|protected
name|void
name|writeProperty
parameter_list|(
name|QName
name|name
parameter_list|,
name|Object
name|object
parameter_list|,
name|Object
name|property
parameter_list|,
name|Class
name|impl
parameter_list|,
name|BeanTypeInfo
name|inf
parameter_list|)
throws|throws
name|DatabindingException
block|{
comment|// nested elements use unqualified names
name|name
operator|=
name|qualifyName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|property
operator|instanceof
name|SoapRef
condition|)
block|{
name|SoapRef
name|soapRef
init|=
operator|(
name|SoapRef
operator|)
name|property
decl_stmt|;
comment|// register an action with the ref that will set the bean property
comment|// if the reference has already been resolved the action will be
comment|// invoked immedately
name|soapRef
operator|.
name|setAction
argument_list|(
operator|new
name|WritePropertyAction
argument_list|(
name|name
argument_list|,
name|object
argument_list|,
name|impl
argument_list|,
name|inf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// normal property
name|super
operator|.
name|writeProperty
argument_list|(
name|name
argument_list|,
name|object
argument_list|,
name|property
argument_list|,
name|impl
argument_list|,
name|inf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes a nested element with an unqualified name.      */
annotation|@
name|Override
specifier|protected
name|void
name|writeElement
parameter_list|(
name|QName
name|name
parameter_list|,
name|Object
name|value
parameter_list|,
name|Type
name|type
parameter_list|,
name|MessageWriter
name|writer
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
comment|// Nested elements are unqualified
name|name
operator|=
operator|new
name|QName
argument_list|(
literal|""
argument_list|,
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|MessageWriter
name|cwriter
init|=
name|writer
operator|.
name|getElementWriter
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|BeanType
operator|||
name|type
operator|instanceof
name|SoapArrayType
condition|)
block|{
name|String
name|refId
init|=
name|MarshalRegistry
operator|.
name|get
argument_list|(
name|context
argument_list|)
operator|.
name|getInstanceId
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|SoapEncodingUtil
operator|.
name|writeRef
argument_list|(
name|cwriter
argument_list|,
name|refId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|type
operator|.
name|writeObject
argument_list|(
name|value
argument_list|,
name|cwriter
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|cwriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Gets the qualified name of a nested element.  Soap encoded structs contain unqualified elements so      * the method searches for a property matching the local part of the unqualified name.      */
specifier|private
name|QName
name|qualifyName
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
comment|// is the name already qualified, we're done
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|name
return|;
block|}
comment|// find the matching property and get it's name
for|for
control|(
name|BeanType
name|sooper
init|=
name|this
init|;
name|sooper
operator|!=
literal|null
condition|;
name|sooper
operator|=
name|sooper
operator|.
name|getSuperType
argument_list|()
control|)
block|{
name|QName
name|qualifiedName
init|=
operator|new
name|QName
argument_list|(
name|sooper
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getDefaultNamespace
argument_list|()
argument_list|,
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sooper
operator|.
name|getTypeInfo
argument_list|()
operator|.
name|getType
argument_list|(
name|qualifiedName
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|qualifiedName
return|;
block|}
block|}
return|return
name|name
return|;
block|}
comment|/**      * When the SoapRef is resolved write the matching property on the target object.      */
specifier|private
specifier|final
class|class
name|WritePropertyAction
implements|implements
name|SoapRef
operator|.
name|Action
block|{
specifier|private
specifier|final
name|QName
name|name
decl_stmt|;
specifier|private
specifier|final
name|Object
name|targetObject
decl_stmt|;
specifier|private
specifier|final
name|Class
name|targetClass
decl_stmt|;
specifier|private
specifier|final
name|BeanTypeInfo
name|beanTypeInfo
decl_stmt|;
specifier|private
name|WritePropertyAction
parameter_list|(
name|QName
name|name
parameter_list|,
name|Object
name|targetObject
parameter_list|,
name|Class
name|targetClass
parameter_list|,
name|BeanTypeInfo
name|beanTypeInfo
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|targetObject
operator|=
name|targetObject
expr_stmt|;
name|this
operator|.
name|targetClass
operator|=
name|targetClass
expr_stmt|;
name|this
operator|.
name|beanTypeInfo
operator|=
name|beanTypeInfo
expr_stmt|;
block|}
specifier|public
name|void
name|onSet
parameter_list|(
name|SoapRef
name|ref
parameter_list|)
block|{
name|writeProperty
argument_list|(
name|name
argument_list|,
name|targetObject
argument_list|,
name|ref
operator|.
name|get
argument_list|()
argument_list|,
name|targetClass
argument_list|,
name|beanTypeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

