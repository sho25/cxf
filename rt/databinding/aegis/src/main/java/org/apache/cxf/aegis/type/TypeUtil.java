begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AegisContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|util
operator|.
name|NamespaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SOAPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|XmlSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_comment
comment|/**  * Static methods/constants for Aegis.  *   * @author<a href="mailto:dan@envoisolutions.com">Dan Diephouse</a>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TypeUtil
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TypeUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TypeUtil
parameter_list|()
block|{
comment|//utility class
block|}
specifier|public
specifier|static
name|Type
name|getReadType
parameter_list|(
name|XMLStreamReader
name|xsr
parameter_list|,
name|AegisContext
name|context
parameter_list|,
name|Type
name|baseType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|isReadXsiTypes
argument_list|()
condition|)
block|{
if|if
condition|(
name|baseType
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"xsi:type reading disabled, and no type available for "
operator|+
name|xsr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|baseType
return|;
block|}
name|String
name|overrideType
init|=
name|xsr
operator|.
name|getAttributeValue
argument_list|(
name|SOAPConstants
operator|.
name|XSI_NS
argument_list|,
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|overrideType
operator|!=
literal|null
condition|)
block|{
name|QName
name|overrideName
init|=
name|NamespaceHelper
operator|.
name|createQName
argument_list|(
name|xsr
operator|.
name|getNamespaceContext
argument_list|()
argument_list|,
name|overrideType
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseType
operator|==
literal|null
operator|||
operator|!
name|overrideName
operator|.
name|equals
argument_list|(
name|baseType
operator|.
name|getSchemaType
argument_list|()
argument_list|)
condition|)
block|{
name|Type
name|improvedType
init|=
literal|null
decl_stmt|;
name|TypeMapping
name|tm
decl_stmt|;
if|if
condition|(
name|baseType
operator|!=
literal|null
condition|)
block|{
name|tm
operator|=
name|baseType
operator|.
name|getTypeMapping
argument_list|()
expr_stmt|;
name|improvedType
operator|=
name|tm
operator|.
name|getType
argument_list|(
name|overrideName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|improvedType
operator|==
literal|null
condition|)
block|{
name|improvedType
operator|=
name|context
operator|.
name|getRootType
argument_list|(
name|overrideName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|improvedType
operator|!=
literal|null
condition|)
block|{
return|return
name|improvedType
return|;
block|}
block|}
if|if
condition|(
name|baseType
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"xsi:type=\""
operator|+
name|overrideName
operator|+
literal|"\" was specified, but no corresponding Type was registered; defaulting to "
operator|+
name|baseType
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|baseType
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"xsi:type=\""
operator|+
name|overrideName
operator|+
literal|"\" was specified, but no corresponding Type was registered; no default."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|baseType
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"xsi:type absent, and no type available for "
operator|+
name|xsr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|baseType
return|;
block|}
block|}
comment|/**      * getReadType cannot just look up the xsi:type in the mapping. This function must be      * called instead at the root where there is no initial mapping to start from, as from      * a part or an element of some containing item.      * @param xsr      * @param context      * @return      */
specifier|public
specifier|static
name|Type
name|getReadTypeStandalone
parameter_list|(
name|XMLStreamReader
name|xsr
parameter_list|,
name|AegisContext
name|context
parameter_list|,
name|Type
name|baseType
parameter_list|)
block|{
if|if
condition|(
name|baseType
operator|!=
literal|null
condition|)
block|{
return|return
name|getReadType
argument_list|(
name|xsr
argument_list|,
name|context
argument_list|,
name|baseType
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|context
operator|.
name|isReadXsiTypes
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"xsi:type reading disabled, and no type available for "
operator|+
name|xsr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|typeNameString
init|=
name|xsr
operator|.
name|getAttributeValue
argument_list|(
name|SOAPConstants
operator|.
name|XSI_NS
argument_list|,
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeNameString
operator|!=
literal|null
condition|)
block|{
name|QName
name|schemaTypeName
init|=
name|NamespaceHelper
operator|.
name|createQName
argument_list|(
name|xsr
operator|.
name|getNamespaceContext
argument_list|()
argument_list|,
name|typeNameString
argument_list|)
decl_stmt|;
name|TypeMapping
name|tm
decl_stmt|;
name|tm
operator|=
name|context
operator|.
name|getTypeMapping
argument_list|()
expr_stmt|;
name|Type
name|type
init|=
name|tm
operator|.
name|getType
argument_list|(
name|schemaTypeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|context
operator|.
name|getRootType
argument_list|(
name|schemaTypeName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|type
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"xsi:type=\""
operator|+
name|schemaTypeName
operator|+
literal|"\" was specified, but no corresponding Type was registered; no default."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"xsi:type was not specified for top-level element "
operator|+
name|xsr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Type
name|getWriteType
parameter_list|(
name|AegisContext
name|globalContext
parameter_list|,
name|Object
name|value
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|getTypeClass
argument_list|()
operator|!=
name|value
operator|.
name|getClass
argument_list|()
condition|)
block|{
name|Type
name|overrideType
init|=
name|globalContext
operator|.
name|getRootType
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|overrideType
operator|!=
literal|null
condition|)
block|{
return|return
name|overrideType
return|;
block|}
block|}
return|return
name|type
return|;
block|}
specifier|public
specifier|static
name|Type
name|getWriteTypeStandalone
parameter_list|(
name|AegisContext
name|globalContext
parameter_list|,
name|Object
name|value
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
return|return
name|getWriteType
argument_list|(
name|globalContext
argument_list|,
name|value
argument_list|,
name|type
argument_list|)
return|;
block|}
name|TypeMapping
name|tm
decl_stmt|;
name|tm
operator|=
name|globalContext
operator|.
name|getTypeMapping
argument_list|()
expr_stmt|;
comment|// don't use this for null!
name|type
operator|=
name|tm
operator|.
name|getType
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|type
return|;
block|}
specifier|public
specifier|static
name|void
name|setAttributeAttributes
parameter_list|(
name|QName
name|name
parameter_list|,
name|Type
name|type
parameter_list|,
name|XmlSchema
name|root
parameter_list|)
block|{
name|String
name|ns
init|=
name|type
operator|.
name|getSchemaType
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|XmlSchemaUtils
operator|.
name|addImportIfNeeded
argument_list|(
name|root
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

