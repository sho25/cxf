begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|jdom
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|util
operator|.
name|stax
operator|.
name|JDOMNamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|AbstractMessageWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Namespace
import|;
end_import

begin_class
specifier|public
class|class
name|JDOMWriter
extends|extends
name|AbstractMessageWriter
block|{
specifier|private
name|Element
name|element
decl_stmt|;
specifier|public
name|JDOMWriter
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|this
operator|.
name|element
operator|=
name|element
expr_stmt|;
block|}
specifier|public
name|void
name|writeValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
comment|// an NPE is not helpful, and code at a higher level is responsible for
comment|// xsi:nil processing.
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|element
operator|.
name|addContent
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|writeValue
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|ns
parameter_list|,
name|String
name|attr
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getUniquePrefix
argument_list|(
name|element
argument_list|,
name|ns
argument_list|)
decl_stmt|;
name|element
operator|.
name|setAttribute
argument_list|(
operator|new
name|Attribute
argument_list|(
name|attr
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|Namespace
operator|.
name|getNamespace
argument_list|(
name|prefix
argument_list|,
name|ns
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MessageWriter
name|getElementWriter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getElementWriter
argument_list|(
name|name
argument_list|,
name|element
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|MessageWriter
name|getElementWriter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getUniquePrefix
argument_list|(
name|element
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|Element
name|child
init|=
operator|new
name|Element
argument_list|(
name|name
argument_list|,
name|Namespace
operator|.
name|getNamespace
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|)
argument_list|)
decl_stmt|;
name|element
operator|.
name|addContent
argument_list|(
name|child
argument_list|)
expr_stmt|;
return|return
operator|new
name|JDOMWriter
argument_list|(
name|child
argument_list|)
return|;
block|}
specifier|public
name|MessageWriter
name|getElementWriter
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
return|return
name|getElementWriter
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPrefixForNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|getUniquePrefix
argument_list|(
name|element
argument_list|,
name|namespace
argument_list|)
return|;
block|}
specifier|public
name|XMLStreamWriter
name|getXMLStreamWriter
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Stream writing not supported from a JDOMWriter."
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getPrefixForNamespace
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|hint
parameter_list|)
block|{
comment|// todo: this goes for the option of ignoring the hint - we should
comment|// probably at least attempt to honour it
return|return
name|getUniquePrefix
argument_list|(
name|element
argument_list|,
name|namespace
argument_list|)
return|;
block|}
specifier|public
name|MessageWriter
name|getAttributeWriter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Attribute
name|att
init|=
operator|new
name|Attribute
argument_list|(
name|name
argument_list|,
literal|""
argument_list|,
name|element
operator|.
name|getNamespace
argument_list|()
argument_list|)
decl_stmt|;
name|element
operator|.
name|setAttribute
argument_list|(
name|att
argument_list|)
expr_stmt|;
return|return
operator|new
name|AttributeWriter
argument_list|(
name|att
argument_list|)
return|;
block|}
specifier|public
name|MessageWriter
name|getAttributeWriter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|Attribute
name|att
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
operator|&&
name|namespace
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|prefix
init|=
name|getUniquePrefix
argument_list|(
name|element
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|att
operator|=
operator|new
name|Attribute
argument_list|(
name|name
argument_list|,
literal|""
argument_list|,
name|Namespace
operator|.
name|getNamespace
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|att
operator|=
operator|new
name|Attribute
argument_list|(
name|name
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|element
operator|.
name|setAttribute
argument_list|(
name|att
argument_list|)
expr_stmt|;
return|return
operator|new
name|AttributeWriter
argument_list|(
name|att
argument_list|)
return|;
block|}
specifier|public
name|MessageWriter
name|getAttributeWriter
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
return|return
name|getAttributeWriter
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{     }
specifier|private
specifier|static
name|String
name|getUniquePrefix
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
name|int
name|n
init|=
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|nsPrefix
init|=
literal|"ns"
operator|+
name|n
decl_stmt|;
if|if
condition|(
name|el
operator|.
name|getNamespace
argument_list|(
name|nsPrefix
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
name|nsPrefix
return|;
block|}
name|n
operator|++
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getUniquePrefix
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|namespaceURI
parameter_list|)
block|{
name|String
name|prefix
init|=
name|JDOMNamespaceContext
operator|.
name|rawGetPrefix
argument_list|(
name|element
argument_list|,
name|namespaceURI
argument_list|)
decl_stmt|;
comment|// it is OK to have both namespace URI and prefix be empty.
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
name|prefix
operator|=
name|getUniquePrefix
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|element
operator|.
name|addNamespaceDeclaration
argument_list|(
name|Namespace
operator|.
name|getNamespace
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|prefix
return|;
block|}
block|}
end_class

end_unit

