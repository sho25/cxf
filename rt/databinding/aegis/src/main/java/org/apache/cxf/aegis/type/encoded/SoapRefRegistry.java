begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|DatabindingException
import|;
end_import

begin_comment
comment|/**  * SoapRefRegistry handles resolving all SOAP encoded references.  After each object is unmarshalled if the  * xml contained a SOAP id attribute it is registered with that attribute.  As each object is unmarshalled if  * any nested elements have a SOAP ref attribute it, the references is registered.  If there is a object  * instance already registered with the referenced id, the SOAP reference is immediately set. Otherwise, the  * reference is set when an object instance is registered with the id.  This allows for the objects to occur  * in any order in the XML document.  *<p/>  * Note: only the StructType and TraillingBlocks register objects with this class.  */
end_comment

begin_class
specifier|public
class|class
name|SoapRefRegistry
block|{
comment|/**      * The unmarshaled object instances by id.      */
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|instances
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * The unresolved SOAP references by referenced id.      */
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SoapRef
argument_list|>
argument_list|>
name|unresolvedRefs
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SoapRef
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Get the SoapRefRegistry stored in the context, and if necessary create a new one.      *      * @param context the unmarshal context      * @return the SoapRefRegistry; never null      */
specifier|public
specifier|static
name|SoapRefRegistry
name|get
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
name|SoapRefRegistry
name|soapRefRegistry
init|=
name|context
operator|.
name|getProperty
argument_list|(
name|SoapRefRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|soapRefRegistry
operator|==
literal|null
condition|)
block|{
name|soapRefRegistry
operator|=
operator|new
name|SoapRefRegistry
argument_list|()
expr_stmt|;
name|context
operator|.
name|setProperty
argument_list|(
name|soapRefRegistry
argument_list|)
expr_stmt|;
block|}
return|return
name|soapRefRegistry
return|;
block|}
comment|/**      * Add an object instance to the registry.      *      * @param id the unique identifier of the instance      * @param instance the instance      * @throws DatabindingException if another object instance is already registered with the id      */
specifier|public
name|void
name|addInstance
parameter_list|(
name|String
name|id
parameter_list|,
name|Object
name|instance
parameter_list|)
block|{
name|Object
name|oldInstance
init|=
name|instances
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|instance
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldInstance
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Id "
operator|+
name|id
operator|+
literal|" is already registered to instance "
operator|+
name|instance
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|SoapRef
argument_list|>
name|list
init|=
name|unresolvedRefs
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SoapRef
name|soapRef
range|:
name|list
control|)
block|{
name|soapRef
operator|.
name|set
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Adds a reference to the specified id.  If an object is already registered with the specified id, the      * SOAP reference will immedately be set.  Otherwise, the reference will be set when an object is      * registered with the specified id.      *      * @param id the id of the referenced object instance      * @param soapRef the reference to set      */
specifier|public
name|void
name|addRef
parameter_list|(
name|String
name|id
parameter_list|,
name|SoapRef
name|soapRef
parameter_list|)
block|{
name|Object
name|value
init|=
name|instances
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|soapRef
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|SoapRef
argument_list|>
name|list
init|=
name|unresolvedRefs
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|unresolvedRefs
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|soapRef
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets the ids of the registered object instances.      *      * @return the ids of the registered object instances      */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getIds
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|instances
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Gets the unresolved SOAP references by referenced id.      *      * @return the unresolved SOAP references by referenced id      */
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SoapRef
argument_list|>
argument_list|>
name|getUnresolvedRefs
parameter_list|()
block|{
return|return
name|unresolvedRefs
return|;
block|}
block|}
end_class

end_unit

