begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|collection
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentNavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|DatabindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|AegisType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_class
specifier|public
class|class
name|MapType
extends|extends
name|AegisType
block|{
specifier|private
name|AegisType
name|keyType
decl_stmt|;
specifier|private
name|AegisType
name|valueType
decl_stmt|;
specifier|private
name|QName
name|keyName
decl_stmt|;
specifier|private
name|QName
name|valueName
decl_stmt|;
specifier|private
name|QName
name|entryName
decl_stmt|;
specifier|public
name|MapType
parameter_list|(
name|QName
name|schemaType
parameter_list|,
name|AegisType
name|keyType
parameter_list|,
name|AegisType
name|valueType
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|keyType
operator|=
name|keyType
expr_stmt|;
name|this
operator|.
name|valueType
operator|=
name|valueType
expr_stmt|;
name|setSchemaType
argument_list|(
name|schemaType
argument_list|)
expr_stmt|;
name|keyName
operator|=
operator|new
name|QName
argument_list|(
name|schemaType
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"key"
argument_list|)
expr_stmt|;
name|valueName
operator|=
operator|new
name|QName
argument_list|(
name|schemaType
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|entryName
operator|=
operator|new
name|QName
argument_list|(
name|schemaType
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"entry"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|readObject
parameter_list|(
name|MessageReader
name|reader
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|DatabindingException
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|instantiateMap
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|hasMoreElementReaders
argument_list|()
condition|)
block|{
name|MessageReader
name|entryReader
init|=
name|reader
operator|.
name|getNextElementReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|entryReader
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|getEntryName
argument_list|()
argument_list|)
condition|)
block|{
name|Object
name|key
init|=
literal|null
decl_stmt|;
name|Object
name|value
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|entryReader
operator|.
name|hasMoreElementReaders
argument_list|()
condition|)
block|{
name|MessageReader
name|evReader
init|=
name|entryReader
operator|.
name|getNextElementReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|evReader
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|getKeyName
argument_list|()
argument_list|)
condition|)
block|{
name|AegisType
name|kType
init|=
name|TypeUtil
operator|.
name|getReadType
argument_list|(
name|evReader
operator|.
name|getXMLStreamReader
argument_list|()
argument_list|,
name|context
operator|.
name|getGlobalContext
argument_list|()
argument_list|,
name|getKeyType
argument_list|()
argument_list|)
decl_stmt|;
name|key
operator|=
name|kType
operator|.
name|readObject
argument_list|(
name|evReader
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|evReader
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|getValueName
argument_list|()
argument_list|)
condition|)
block|{
name|AegisType
name|vType
init|=
name|TypeUtil
operator|.
name|getReadType
argument_list|(
name|evReader
operator|.
name|getXMLStreamReader
argument_list|()
argument_list|,
name|context
operator|.
name|getGlobalContext
argument_list|()
argument_list|,
name|getValueType
argument_list|()
argument_list|)
decl_stmt|;
name|value
operator|=
name|vType
operator|.
name|readObject
argument_list|(
name|evReader
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|readToEnd
argument_list|(
name|evReader
argument_list|)
expr_stmt|;
block|}
block|}
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|readToEnd
argument_list|(
name|entryReader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Illegal argument."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readToEnd
parameter_list|(
name|MessageReader
name|childReader
parameter_list|)
block|{
while|while
condition|(
name|childReader
operator|.
name|hasMoreElementReaders
argument_list|()
condition|)
block|{
name|readToEnd
argument_list|(
name|childReader
operator|.
name|getNextElementReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a map instance. If the type class is a<code>Map</code> or      * extends the<code>Map</code> interface a<code>HashMap</code> is      * created. Otherwise the map classs (i.e. LinkedHashMap) is instantiated      * using the default constructor.      *      * @return      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|instantiateMap
parameter_list|()
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
literal|null
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|cls
operator|.
name|equals
argument_list|(
name|Map
operator|.
name|class
argument_list|)
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cls
operator|.
name|equals
argument_list|(
name|Hashtable
operator|.
name|class
argument_list|)
condition|)
block|{
name|map
operator|=
operator|new
name|Hashtable
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cls
operator|.
name|equals
argument_list|(
name|ConcurrentMap
operator|.
name|class
argument_list|)
condition|)
block|{
name|map
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cls
operator|.
name|equals
argument_list|(
name|ConcurrentNavigableMap
operator|.
name|class
argument_list|)
condition|)
block|{
name|map
operator|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cls
operator|.
name|equals
argument_list|(
name|SortedMap
operator|.
name|class
argument_list|)
operator|||
name|cls
operator|.
name|equals
argument_list|(
name|NavigableMap
operator|.
name|class
argument_list|)
condition|)
block|{
name|map
operator|=
operator|new
name|TreeMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cls
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|map
operator|=
operator|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|cls
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Could not create map implementation: "
operator|+
name|getTypeClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|map
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|Object
name|object
parameter_list|,
name|MessageWriter
name|writer
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|DatabindingException
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
name|AegisType
name|kType
init|=
name|getKeyType
argument_list|()
decl_stmt|;
name|AegisType
name|vType
init|=
name|getValueType
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|itr
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|writeEntry
argument_list|(
name|writer
argument_list|,
name|context
argument_list|,
name|kType
argument_list|,
name|vType
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Illegal argument."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|writeEntry
parameter_list|(
name|MessageWriter
name|writer
parameter_list|,
name|Context
name|context
parameter_list|,
name|AegisType
name|kType
parameter_list|,
name|AegisType
name|vType
parameter_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
parameter_list|)
throws|throws
name|DatabindingException
block|{
name|kType
operator|=
name|TypeUtil
operator|.
name|getWriteType
argument_list|(
name|context
operator|.
name|getGlobalContext
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|kType
argument_list|)
expr_stmt|;
name|vType
operator|=
name|TypeUtil
operator|.
name|getWriteType
argument_list|(
name|context
operator|.
name|getGlobalContext
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|vType
argument_list|)
expr_stmt|;
name|MessageWriter
name|entryWriter
init|=
name|writer
operator|.
name|getElementWriter
argument_list|(
name|getEntryName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageWriter
name|keyWriter
init|=
name|entryWriter
operator|.
name|getElementWriter
argument_list|(
name|getKeyName
argument_list|()
argument_list|)
decl_stmt|;
name|kType
operator|.
name|writeObject
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|keyWriter
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|keyWriter
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|MessageWriter
name|valueWriter
init|=
name|entryWriter
operator|.
name|getElementWriter
argument_list|(
name|getValueName
argument_list|()
argument_list|)
decl_stmt|;
name|vType
operator|.
name|writeObject
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|valueWriter
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|valueWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|entryWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeSchema
parameter_list|(
name|XmlSchema
name|root
parameter_list|)
block|{
name|XmlSchemaComplexType
name|complex
init|=
operator|new
name|XmlSchemaComplexType
argument_list|(
name|root
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|complex
operator|.
name|setName
argument_list|(
name|getSchemaType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|XmlSchemaSequence
name|sequence
init|=
operator|new
name|XmlSchemaSequence
argument_list|()
decl_stmt|;
name|complex
operator|.
name|setParticle
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
name|AegisType
name|kType
init|=
name|getKeyType
argument_list|()
decl_stmt|;
name|AegisType
name|vType
init|=
name|getValueType
argument_list|()
decl_stmt|;
name|XmlSchemaElement
name|element
init|=
operator|new
name|XmlSchemaElement
argument_list|(
name|root
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|sequence
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|element
operator|.
name|setName
argument_list|(
name|getEntryName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|element
operator|.
name|setMinOccurs
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|element
operator|.
name|setMaxOccurs
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|XmlSchemaComplexType
name|evType
init|=
operator|new
name|XmlSchemaComplexType
argument_list|(
name|root
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|element
operator|.
name|setType
argument_list|(
name|evType
argument_list|)
expr_stmt|;
name|XmlSchemaSequence
name|evSequence
init|=
operator|new
name|XmlSchemaSequence
argument_list|()
decl_stmt|;
name|evType
operator|.
name|setParticle
argument_list|(
name|evSequence
argument_list|)
expr_stmt|;
name|createElement
argument_list|(
name|root
argument_list|,
name|evSequence
argument_list|,
name|getKeyName
argument_list|()
argument_list|,
name|kType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|createElement
argument_list|(
name|root
argument_list|,
name|evSequence
argument_list|,
name|getValueName
argument_list|()
argument_list|,
name|vType
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a element in a sequence for the key type and the value type.      */
specifier|private
name|void
name|createElement
parameter_list|(
name|XmlSchema
name|schema
parameter_list|,
name|XmlSchemaSequence
name|seq
parameter_list|,
name|QName
name|name
parameter_list|,
name|AegisType
name|type
parameter_list|,
name|boolean
name|optional
parameter_list|)
block|{
name|XmlSchemaElement
name|element
init|=
operator|new
name|XmlSchemaElement
argument_list|(
name|schema
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|element
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|element
operator|.
name|setSchemaTypeName
argument_list|(
name|type
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|optional
condition|)
block|{
name|element
operator|.
name|setMinOccurs
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|element
operator|.
name|setMinOccurs
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|element
operator|.
name|setMaxOccurs
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|AegisType
argument_list|>
name|getDependencies
parameter_list|()
block|{
name|Set
argument_list|<
name|AegisType
argument_list|>
name|deps
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|deps
operator|.
name|add
argument_list|(
name|getKeyType
argument_list|()
argument_list|)
expr_stmt|;
name|deps
operator|.
name|add
argument_list|(
name|getValueType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|deps
return|;
block|}
specifier|public
name|AegisType
name|getKeyType
parameter_list|()
block|{
return|return
name|keyType
return|;
block|}
specifier|public
name|AegisType
name|getValueType
parameter_list|()
block|{
return|return
name|valueType
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isComplex
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|QName
name|getKeyName
parameter_list|()
block|{
return|return
name|keyName
return|;
block|}
specifier|public
name|void
name|setKeyName
parameter_list|(
name|QName
name|keyName
parameter_list|)
block|{
name|this
operator|.
name|keyName
operator|=
name|keyName
expr_stmt|;
block|}
specifier|public
name|QName
name|getValueName
parameter_list|()
block|{
return|return
name|valueName
return|;
block|}
specifier|public
name|void
name|setValueName
parameter_list|(
name|QName
name|valueName
parameter_list|)
block|{
name|this
operator|.
name|valueName
operator|=
name|valueName
expr_stmt|;
block|}
specifier|public
name|QName
name|getEntryName
parameter_list|()
block|{
return|return
name|entryName
return|;
block|}
specifier|public
name|void
name|setEntryName
parameter_list|(
name|QName
name|entryName
parameter_list|)
block|{
name|this
operator|.
name|entryName
operator|=
name|entryName
expr_stmt|;
block|}
block|}
end_class

end_unit

