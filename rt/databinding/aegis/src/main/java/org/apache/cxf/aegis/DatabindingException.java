begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|DatabindingException
extends|extends
name|RuntimeException
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|2595633596348811788L
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|extraMessages
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Constructs a new exception with the specified detail      * message.      *      * @param message the detail message.      */
specifier|public
name|DatabindingException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new exception with the specified detail      * message and cause.      *      * @param message the detail message.      * @param cause the cause.      */
specifier|public
name|DatabindingException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DatabindingException
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DatabindingException
parameter_list|(
name|Message
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return the detail message, including the message from the      * {@link #getCause() nested exception} if there is one.      *      * @return the detail message.      */
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
if|if
condition|(
name|getCause
argument_list|()
operator|==
literal|null
operator|||
name|getCause
argument_list|()
operator|==
name|this
condition|)
block|{
return|return
name|getActualMessage
argument_list|()
return|;
block|}
return|return
name|getActualMessage
argument_list|()
operator|+
literal|". Nested exception is "
operator|+
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
return|;
block|}
specifier|public
name|String
name|getActualMessage
parameter_list|()
block|{
if|if
condition|(
name|extraMessages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|getMessage
argument_list|()
return|;
block|}
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|extraMessages
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|super
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Prints this throwable and its backtrace to the specified print stream.      *      * @param s<code>PrintStream</code> to use for output      */
annotation|@
name|Override
specifier|public
name|void
name|printStackTrace
parameter_list|(
name|PrintStream
name|s
parameter_list|)
block|{
if|if
condition|(
name|getCause
argument_list|()
operator|==
literal|null
operator|||
name|getCause
argument_list|()
operator|==
name|this
condition|)
block|{
name|super
operator|.
name|printStackTrace
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|.
name|println
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|getCause
argument_list|()
operator|.
name|printStackTrace
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Prints this throwable and its backtrace to the specified print writer.      *      * @param w<code>PrintWriter</code> to use for output      */
annotation|@
name|Override
specifier|public
name|void
name|printStackTrace
parameter_list|(
name|PrintWriter
name|w
parameter_list|)
block|{
if|if
condition|(
name|getCause
argument_list|()
operator|==
literal|null
operator|||
name|getCause
argument_list|()
operator|==
name|this
condition|)
block|{
name|super
operator|.
name|printStackTrace
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|w
operator|.
name|println
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|getCause
argument_list|()
operator|.
name|printStackTrace
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|void
name|prepend
parameter_list|(
name|String
name|m
parameter_list|)
block|{
name|extraMessages
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|m
operator|+
literal|": "
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|extraMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
name|extraMessages
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

