begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|/**  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
class|class
name|InterfaceInvocationHandler
implements|implements
name|InvocationHandler
block|{
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|InterfaceInvocationHandler
parameter_list|()
block|{     }
specifier|public
name|void
name|writeProperty
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|readProperty
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|attributes
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|Object
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"hashCode"
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
return|return
name|proxyHashCode
argument_list|(
name|proxy
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Object
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"equals"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|}
block|)
function|.equals
parameter_list|(
name|method
parameter_list|)
block|)
block|{
return|return
name|proxyEquals
argument_list|(
name|proxy
argument_list|,
name|args
index|[
literal|0
index|]
argument_list|)
return|;
block|}
end_class

begin_elseif
elseif|else
if|if
condition|(
name|Object
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"toString"
argument_list|,
operator|(
name|Class
index|[]
operator|)
literal|null
argument_list|)
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
return|return
name|proxyToString
argument_list|(
name|proxy
argument_list|)
return|;
block|}
end_elseif

begin_else
else|else
block|{
if|if
condition|(
name|isGetterMethod
argument_list|(
name|method
argument_list|,
name|args
argument_list|)
condition|)
block|{
return|return
name|doGetter
argument_list|(
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|isSetterMethod
argument_list|(
name|method
argument_list|,
name|args
argument_list|)
condition|)
block|{
return|return
name|doSetter
argument_list|(
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalAccessError
argument_list|(
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" is not delegated."
argument_list|)
throw|;
block|}
block|}
end_else

begin_function
unit|}      protected
name|boolean
name|isGetterMethod
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|methodName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
operator|&&
name|methodName
operator|.
name|length
argument_list|()
operator|>
literal|3
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|methodName
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|&&
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"is"
argument_list|)
return|;
comment|/*          * // should "hasXXX()" be considered a getter method? else if          * (methodName.startsWith("has")&& methodName.length()> 3) { return          * true; }          */
block|}
end_function

begin_function
specifier|protected
name|boolean
name|isSetterMethod
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
literal|"void"
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|methodName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
operator|&&
name|methodName
operator|.
name|length
argument_list|()
operator|>
literal|3
return|;
block|}
end_function

begin_function
specifier|protected
name|Object
name|doGetter
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|methodName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|attrName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
name|attrName
operator|=
name|convertMethodName
argument_list|(
name|methodName
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"is"
argument_list|)
condition|)
block|{
name|attrName
operator|=
name|convertMethodName
argument_list|(
name|methodName
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalAccessError
argument_list|(
name|methodName
operator|+
literal|" is not a valid getter method."
argument_list|)
throw|;
block|}
name|Object
name|prop
init|=
name|readProperty
argument_list|(
name|attrName
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|==
literal|null
operator|&&
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|int
operator|.
name|class
condition|)
block|{
name|prop
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|boolean
operator|.
name|class
condition|)
block|{
name|prop
operator|=
name|Boolean
operator|.
name|FALSE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|long
operator|.
name|class
condition|)
block|{
name|prop
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|double
operator|.
name|class
condition|)
block|{
name|prop
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|short
operator|.
name|class
condition|)
block|{
name|prop
operator|=
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|byte
operator|.
name|class
condition|)
block|{
name|prop
operator|=
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|char
operator|.
name|class
condition|)
block|{
name|prop
operator|=
name|Character
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prop
return|;
block|}
end_function

begin_function
specifier|protected
name|Object
name|doSetter
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|methodName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|attrName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
condition|)
block|{
name|attrName
operator|=
name|convertMethodName
argument_list|(
name|methodName
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalAccessError
argument_list|(
name|methodName
operator|+
literal|" is not a valid setter method."
argument_list|)
throw|;
block|}
name|writeProperty
argument_list|(
name|attrName
argument_list|,
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|private
name|String
name|convertMethodName
parameter_list|(
name|String
name|methodName
parameter_list|,
name|int
name|firstCharacter
parameter_list|)
block|{
if|if
condition|(
name|methodName
operator|.
name|length
argument_list|()
operator|>=
name|firstCharacter
operator|+
literal|2
condition|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isUpperCase
argument_list|(
name|methodName
operator|.
name|charAt
argument_list|(
name|firstCharacter
operator|+
literal|1
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|Character
operator|.
name|toLowerCase
argument_list|(
name|methodName
operator|.
name|charAt
argument_list|(
name|firstCharacter
argument_list|)
argument_list|)
operator|+
name|methodName
operator|.
name|substring
argument_list|(
name|firstCharacter
operator|+
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|methodName
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|Character
operator|.
name|toLowerCase
argument_list|(
name|methodName
operator|.
name|charAt
argument_list|(
name|firstCharacter
argument_list|)
argument_list|)
operator|+
name|methodName
operator|.
name|substring
argument_list|(
name|firstCharacter
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
end_function

begin_function
specifier|protected
name|Integer
name|proxyHashCode
parameter_list|(
name|Object
name|proxy
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|proxy
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|protected
name|Boolean
name|proxyEquals
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Object
name|other
parameter_list|)
block|{
return|return
name|proxy
operator|==
name|other
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
end_function

begin_function
specifier|protected
name|String
name|proxyToString
parameter_list|(
name|Object
name|proxy
parameter_list|)
block|{
return|return
name|proxy
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|'@'
operator|+
name|proxy
operator|.
name|hashCode
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

