begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|AegisType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|ArrayType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|stax
operator|.
name|ElementReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
class|class
name|AegisXMLStreamDataReader
extends|extends
name|AbstractAegisIoImpl
implements|implements
name|AegisReader
argument_list|<
name|XMLStreamReader
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AegisXMLStreamDataReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|AegisXMLStreamDataReader
parameter_list|(
name|AegisContext
name|globalContext
parameter_list|)
block|{
name|super
argument_list|(
name|globalContext
argument_list|)
expr_stmt|;
block|}
comment|/**      * This constructor is used by the Element data reader to borrow this class.      * @param globalContext      * @param context      */
specifier|public
name|AegisXMLStreamDataReader
parameter_list|(
name|AegisContext
name|globalContext
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|globalContext
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setupReaderPosition
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|reader
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLStreamConstants
operator|.
name|START_DOCUMENT
condition|)
block|{
while|while
condition|(
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|!=
name|reader
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|reader
operator|.
name|nextTag
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reader
operator|.
name|getEventType
argument_list|()
operator|!=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
condition|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|"STREAM_BAD_POSITION"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|DatabindingException
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/** {@inheritDoc}*/
specifier|public
name|Object
name|read
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|read
argument_list|(
name|reader
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** {@inheritDoc}*/
specifier|public
name|Object
name|read
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|AegisType
name|desiredType
parameter_list|)
throws|throws
name|Exception
block|{
name|setupReaderPosition
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|ElementReader
name|elReader
init|=
operator|new
name|ElementReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|elReader
operator|.
name|isXsiNil
argument_list|()
condition|)
block|{
name|elReader
operator|.
name|readToEnd
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|AegisType
name|type
init|=
name|TypeUtil
operator|.
name|getReadTypeStandalone
argument_list|(
name|reader
argument_list|,
name|aegisContext
argument_list|,
name|desiredType
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"NO_MAPPING"
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|type
operator|.
name|readObject
argument_list|(
name|elReader
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|public
name|Object
name|readFlatArray
parameter_list|(
name|XMLStreamReader
name|input
parameter_list|,
name|ArrayType
name|arrayType
parameter_list|,
name|QName
name|concreteName
parameter_list|)
throws|throws
name|Exception
block|{
name|setupReaderPosition
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|ElementReader
name|elReader
init|=
operator|new
name|ElementReader
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
name|arrayType
operator|.
name|readObject
argument_list|(
name|elReader
argument_list|,
name|concreteName
argument_list|,
name|context
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

