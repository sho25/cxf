begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|encoded
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|DatabindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|BeanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|xml
operator|.
name|MessageWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|encoded
operator|.
name|SoapEncodingUtil
operator|.
name|readAttributeValue
import|;
end_import

begin_class
specifier|public
class|class
name|SoapArrayType
extends|extends
name|Type
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SoapArrayType
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SOAP_ENCODING_NS_1_1
init|=
name|Soap11
operator|.
name|getInstance
argument_list|()
operator|.
name|getSoapEncodingStyle
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|SOAP_ARRAY_POSITION
init|=
operator|new
name|QName
argument_list|(
name|SOAP_ENCODING_NS_1_1
argument_list|,
literal|"position"
argument_list|)
decl_stmt|;
specifier|private
name|QName
name|componentName
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|readObject
parameter_list|(
name|MessageReader
name|reader
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|DatabindingException
block|{
try|try
block|{
comment|// get the encoded array type info
name|TypeMapping
name|tm
init|=
name|context
operator|.
name|getTypeMapping
argument_list|()
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
block|{
name|tm
operator|=
name|getTypeMapping
argument_list|()
expr_stmt|;
block|}
name|ArrayTypeInfo
name|arrayTypeInfo
init|=
operator|new
name|ArrayTypeInfo
argument_list|(
name|reader
argument_list|,
name|tm
argument_list|)
decl_stmt|;
comment|// verify arrayType dimensions are the same as this type class's array dimensions
if|if
condition|(
name|getDimensions
argument_list|()
operator|!=
name|arrayTypeInfo
operator|.
name|getTotalDimensions
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"In "
operator|+
name|getSchemaType
argument_list|()
operator|+
literal|" expected array with "
operator|+
name|getDimensions
argument_list|()
operator|+
literal|" dimensions, but arrayType has "
operator|+
name|arrayTypeInfo
operator|.
name|getTotalDimensions
argument_list|()
operator|+
literal|" dimensions: "
operator|+
name|arrayTypeInfo
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// calculate max size
name|int
name|maxSize
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|dimension
range|:
name|arrayTypeInfo
operator|.
name|getDimensions
argument_list|()
control|)
block|{
name|maxSize
operator|*=
name|dimension
expr_stmt|;
block|}
comment|// verify offset doesn't exceed maximum size
if|if
condition|(
name|arrayTypeInfo
operator|.
name|getOffset
argument_list|()
operator|>=
name|maxSize
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"The array offset "
operator|+
name|arrayTypeInfo
operator|.
name|getOffset
argument_list|()
operator|+
literal|" in "
operator|+
name|getSchemaType
argument_list|()
operator|+
literal|" exceeds the expecte size of "
operator|+
name|maxSize
argument_list|)
throw|;
block|}
comment|// read the values
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|readCollection
argument_list|(
name|reader
argument_list|,
name|context
argument_list|,
name|arrayTypeInfo
argument_list|,
name|maxSize
operator|-
name|arrayTypeInfo
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
comment|// if it is a partially transmitted array offset the array values
if|if
condition|(
name|arrayTypeInfo
operator|.
name|getOffset
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|values
operator|.
name|size
argument_list|()
operator|+
name|arrayTypeInfo
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|arrayTypeInfo
operator|.
name|getOffset
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|values
operator|=
name|list
expr_stmt|;
block|}
comment|// check bounds
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|>
name|maxSize
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"The number of elements "
operator|+
name|values
operator|.
name|size
argument_list|()
operator|+
literal|" in "
operator|+
name|getSchemaType
argument_list|()
operator|+
literal|" exceeds the expecte size of "
operator|+
name|maxSize
argument_list|)
throw|;
block|}
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|<
name|maxSize
condition|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|maxSize
operator|-
name|values
operator|.
name|size
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// todo is this an error?
comment|// throw new DatabindingException("The number of elements in " + getSchemaType() +
comment|//         " is less then the expected size of " + expectedSize);
block|}
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|!=
name|maxSize
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Internal error: Expected values collection to contain "
operator|+
name|maxSize
operator|+
literal|" elements but it contains "
operator|+
name|values
operator|.
name|size
argument_list|()
operator|+
literal|" elements"
argument_list|)
throw|;
block|}
comment|// create the array
return|return
name|makeArray
argument_list|(
name|values
argument_list|,
name|arrayTypeInfo
operator|.
name|getDimensions
argument_list|()
argument_list|,
name|getTypeClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Illegal argument."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|Object
argument_list|>
name|readCollection
parameter_list|(
name|MessageReader
name|reader
parameter_list|,
name|Context
name|context
parameter_list|,
name|ArrayTypeInfo
name|arrayTypeInfo
parameter_list|,
name|int
name|maxSize
parameter_list|)
throws|throws
name|DatabindingException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Boolean
name|sparse
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|hasMoreElementReaders
argument_list|()
condition|)
block|{
name|MessageReader
name|creader
init|=
name|reader
operator|.
name|getNextElementReader
argument_list|()
decl_stmt|;
comment|// if the first element contains a position attribute, this is a sparse array
comment|// and all subsequent elements must contain the position attribute
name|String
name|position
init|=
name|readAttributeValue
argument_list|(
name|creader
argument_list|,
name|SOAP_ARRAY_POSITION
argument_list|)
decl_stmt|;
if|if
condition|(
name|sparse
operator|==
literal|null
condition|)
block|{
name|sparse
operator|=
name|position
operator|!=
literal|null
expr_stmt|;
block|}
comment|// nested element names can specifiy a type
name|Type
name|compType
init|=
name|getTypeMapping
argument_list|()
operator|.
name|getType
argument_list|(
name|creader
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|compType
operator|==
literal|null
condition|)
block|{
comment|// use the type declared in the arrayType attribute
name|compType
operator|=
name|arrayTypeInfo
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
comment|// check for an xsi:type override
name|compType
operator|=
name|TypeUtil
operator|.
name|getReadType
argument_list|(
name|creader
operator|.
name|getXMLStreamReader
argument_list|()
argument_list|,
name|context
operator|.
name|getGlobalContext
argument_list|()
argument_list|,
name|compType
argument_list|)
expr_stmt|;
comment|// wrap type with soap ref to handle hrefs
name|compType
operator|=
operator|new
name|SoapRefType
argument_list|(
name|compType
argument_list|)
expr_stmt|;
comment|// read the value
name|Object
name|value
decl_stmt|;
if|if
condition|(
name|creader
operator|.
name|isXsiNil
argument_list|()
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
name|creader
operator|.
name|readToEnd
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|compType
operator|.
name|readObject
argument_list|(
name|creader
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|// add the value
if|if
condition|(
operator|!
name|sparse
condition|)
block|{
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|>
name|maxSize
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"The number of elements in "
operator|+
name|getSchemaType
argument_list|()
operator|+
literal|" exceeds the maximum size of "
operator|+
name|maxSize
argument_list|)
throw|;
block|}
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|valuesPosition
init|=
name|readValuesPosition
argument_list|(
name|position
argument_list|,
name|arrayTypeInfo
operator|.
name|getDimensions
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|valuesPosition
operator|>
name|maxSize
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Array position "
operator|+
name|valuesPosition
operator|+
literal|" in "
operator|+
name|getSchemaType
argument_list|()
operator|+
literal|" exceeds the maximum size of "
operator|+
name|maxSize
argument_list|)
throw|;
block|}
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|<=
name|valuesPosition
condition|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|valuesPosition
operator|-
name|values
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Object
name|oldValue
init|=
name|values
operator|.
name|set
argument_list|(
name|valuesPosition
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Array position "
operator|+
name|valuesPosition
operator|+
literal|" in "
operator|+
name|getSchemaType
argument_list|()
operator|+
literal|" is already assigned to value "
operator|+
name|oldValue
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|values
return|;
block|}
specifier|private
name|int
name|readValuesPosition
parameter_list|(
name|String
name|positionString
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|dimensions
parameter_list|)
block|{
if|if
condition|(
name|positionString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Sparse array entry does not contain a position attribute"
argument_list|)
throw|;
block|}
try|try
block|{
comment|// position = "[" , length , { "," , lenght } , "]" ;
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|Collections
operator|.
name|list
argument_list|(
operator|new
name|StringTokenizer
argument_list|(
name|positionString
argument_list|,
literal|"[],"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|+
name|dimensions
operator|.
name|size
argument_list|()
operator|+
name|dimensions
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|&&
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"["
argument_list|)
operator|&&
name|tokens
operator|.
name|get
argument_list|(
name|tokens
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"]"
argument_list|)
condition|)
block|{
comment|// strip off leading [ and trailing ]
name|tokens
operator|=
name|tokens
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// return the product of the values
name|int
index|[]
name|index
init|=
operator|new
name|int
index|[
name|dimensions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|tokenId
init|=
name|i
operator|*
literal|2
decl_stmt|;
name|index
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tokens
operator|.
name|get
argument_list|(
name|tokenId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenId
operator|+
literal|1
operator|<
name|tokens
operator|.
name|size
argument_list|()
operator|&&
operator|!
name|tokens
operator|.
name|get
argument_list|(
name|tokenId
operator|+
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|","
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected a comma but got "
operator|+
name|tokens
operator|.
name|get
argument_list|(
name|tokenId
operator|+
literal|1
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// determine the real position withing the flattened square array
name|int
name|valuePosition
init|=
literal|0
decl_stmt|;
name|int
name|multiplier
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|index
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|int
name|position
init|=
name|index
index|[
name|i
index|]
decl_stmt|;
name|valuePosition
operator|+=
name|position
operator|*
name|multiplier
expr_stmt|;
name|multiplier
operator|*=
name|dimensions
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|valuePosition
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
comment|// exception is thrown below
block|}
comment|// failed print the expected format
name|StringBuilder
name|expectedFormat
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|expectedFormat
operator|.
name|append
argument_list|(
literal|"[x"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|dimensions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|expectedFormat
operator|.
name|append
argument_list|(
literal|",x"
argument_list|)
expr_stmt|;
block|}
name|expectedFormat
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Expected sparse array position value in format "
operator|+
name|expectedFormat
operator|+
literal|", but was "
operator|+
name|positionString
argument_list|)
throw|;
block|}
specifier|protected
name|Object
name|makeArray
parameter_list|(
name|List
name|values
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|dimensions
parameter_list|,
name|Class
name|componentType
parameter_list|)
block|{
comment|// if this is an array of arrays, recurse into this function
comment|// for each nested array
if|if
condition|(
name|componentType
operator|.
name|isArray
argument_list|()
operator|&&
name|dimensions
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// square array
name|int
name|chunkSize
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Integer
name|dimension
range|:
name|dimensions
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|dimensions
operator|.
name|size
argument_list|()
argument_list|)
control|)
block|{
name|chunkSize
operator|*=
name|dimension
expr_stmt|;
block|}
name|Object
index|[]
name|array
init|=
operator|(
name|Object
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|componentType
argument_list|,
name|dimensions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|List
name|chunk
init|=
name|values
operator|.
name|subList
argument_list|(
name|i
operator|*
name|chunkSize
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
name|chunkSize
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|makeArray
argument_list|(
name|chunk
argument_list|,
name|dimensions
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|dimensions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|componentType
operator|.
name|getComponentType
argument_list|()
argument_list|)
decl_stmt|;
name|Array
operator|.
name|set
argument_list|(
name|array
argument_list|,
name|i
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
comment|// build the array
name|Object
name|array
init|=
name|Array
operator|.
name|newInstance
argument_list|(
name|componentType
argument_list|,
name|dimensions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|value
init|=
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|SoapRef
name|soapRef
init|=
operator|(
name|SoapRef
operator|)
name|value
decl_stmt|;
name|soapRef
operator|.
name|setAction
argument_list|(
operator|new
name|SetArrayAction
argument_list|(
name|array
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|array
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeObject
parameter_list|(
name|Object
name|values
parameter_list|,
name|MessageWriter
name|writer
parameter_list|,
name|Context
name|context
parameter_list|)
throws|throws
name|DatabindingException
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// ComponentType
name|Type
name|type
init|=
name|getComponentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Couldn't find component type for array."
argument_list|)
throw|;
block|}
comment|// Root component's schema type
name|QName
name|rootType
init|=
name|getRootType
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|writer
operator|.
name|getPrefixForNamespace
argument_list|(
name|rootType
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|rootType
operator|.
name|getPrefix
argument_list|()
argument_list|)
decl_stmt|;
name|rootType
operator|=
operator|new
name|QName
argument_list|(
name|rootType
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|rootType
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
comment|// write the soap arrayType attribute
name|ArrayTypeInfo
name|arrayTypeInfo
init|=
operator|new
name|ArrayTypeInfo
argument_list|(
name|rootType
argument_list|,
name|getDimensions
argument_list|()
operator|-
literal|1
argument_list|,
name|Array
operator|.
name|getLength
argument_list|(
name|values
argument_list|)
argument_list|)
decl_stmt|;
name|arrayTypeInfo
operator|.
name|writeAttribute
argument_list|(
name|writer
argument_list|)
expr_stmt|;
comment|// write each element
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Array
operator|.
name|getLength
argument_list|(
name|values
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|writeValue
argument_list|(
name|Array
operator|.
name|get
argument_list|(
name|values
argument_list|,
name|i
argument_list|)
argument_list|,
name|writer
argument_list|,
name|context
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|writeValue
parameter_list|(
name|Object
name|value
parameter_list|,
name|MessageWriter
name|writer
parameter_list|,
name|Context
name|context
parameter_list|,
name|Type
name|type
parameter_list|)
throws|throws
name|DatabindingException
block|{
name|type
operator|=
name|TypeUtil
operator|.
name|getWriteType
argument_list|(
name|context
operator|.
name|getGlobalContext
argument_list|()
argument_list|,
name|value
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|MessageWriter
name|cwriter
init|=
name|writer
operator|.
name|getElementWriter
argument_list|(
name|type
operator|.
name|getSchemaType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
name|type
operator|.
name|isNillable
argument_list|()
condition|)
block|{
comment|// null
name|cwriter
operator|.
name|writeXsiNil
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|BeanType
operator|||
name|type
operator|instanceof
name|SoapArrayType
condition|)
block|{
comment|// write refs to complex type
name|String
name|refId
init|=
name|MarshalRegistry
operator|.
name|get
argument_list|(
name|context
argument_list|)
operator|.
name|getInstanceId
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|SoapEncodingUtil
operator|.
name|writeRef
argument_list|(
name|cwriter
argument_list|,
name|refId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// write simple types inline
name|type
operator|.
name|writeObject
argument_list|(
name|value
argument_list|,
name|cwriter
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|cwriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Throws UnsupportedOperationException      */
annotation|@
name|Override
specifier|public
name|void
name|writeSchema
parameter_list|(
name|XmlSchema
name|root
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * We need to write a complex type schema for Beans, so return true.      *      * @see org.apache.cxf.aegis.type.Type#isComplex()      */
annotation|@
name|Override
specifier|public
name|boolean
name|isComplex
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Gets the QName of the component type of this array.      * @return the QName of the component type of this array      */
specifier|public
name|QName
name|getComponentName
parameter_list|()
block|{
return|return
name|componentName
return|;
block|}
comment|/**      * Sets the QName of the component type of this array.      * @param componentName the QName of the component type of this array      */
specifier|public
name|void
name|setComponentName
parameter_list|(
name|QName
name|componentName
parameter_list|)
block|{
name|this
operator|.
name|componentName
operator|=
name|componentName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Type
argument_list|>
name|getDependencies
parameter_list|()
block|{
name|Set
argument_list|<
name|Type
argument_list|>
name|deps
init|=
operator|new
name|HashSet
argument_list|<
name|Type
argument_list|>
argument_list|()
decl_stmt|;
name|deps
operator|.
name|add
argument_list|(
name|getComponentType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|deps
return|;
block|}
comment|/**      * Get the<code>Type</code> of the elements in the array.  This is only used for writing an array.      * When reading the type is solely determined by the required arrayType soap attribute.      */
specifier|public
name|Type
name|getComponentType
parameter_list|()
block|{
name|Class
name|compType
init|=
name|getTypeClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
name|Type
name|type
decl_stmt|;
if|if
condition|(
name|componentName
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|getTypeMapping
argument_list|()
operator|.
name|getType
argument_list|(
name|compType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
name|getTypeMapping
argument_list|()
operator|.
name|getType
argument_list|(
name|componentName
argument_list|)
expr_stmt|;
comment|// We couldn't find the type the user specified. One is created
comment|// below instead.
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Couldn't find array component type "
operator|+
name|componentName
operator|+
literal|". Creating one instead."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|getTypeMapping
argument_list|()
operator|.
name|getTypeCreator
argument_list|()
operator|.
name|createType
argument_list|(
name|compType
argument_list|)
expr_stmt|;
name|getTypeMapping
argument_list|()
operator|.
name|register
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
comment|/**      * Gets the QName of the root component type of this array.  This will be a non-array type such as      * a simple xsd type.      * @return the QName of the root component type of this array      */
specifier|protected
name|QName
name|getRootType
parameter_list|()
block|{
name|Type
name|componentType
init|=
name|getComponentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|componentType
operator|instanceof
name|SoapArrayType
condition|)
block|{
name|SoapArrayType
name|arrayType
init|=
operator|(
name|SoapArrayType
operator|)
name|componentType
decl_stmt|;
return|return
name|arrayType
operator|.
name|getRootType
argument_list|()
return|;
block|}
return|return
name|componentType
operator|.
name|getSchemaType
argument_list|()
return|;
block|}
comment|/**      * Gets the number of array dimensions in the class for this type.      * @return the number of array dimensions      */
specifier|private
name|int
name|getDimensions
parameter_list|()
block|{
name|int
name|dimensions
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class
name|type
init|=
name|getTypeClass
argument_list|()
init|;
name|type
operator|.
name|isArray
argument_list|()
condition|;
name|type
operator|=
name|type
operator|.
name|getComponentType
argument_list|()
control|)
block|{
name|dimensions
operator|++
expr_stmt|;
block|}
return|return
name|dimensions
return|;
block|}
comment|/**      * Sets an array entry when the soap ref is resolved      */
specifier|private
specifier|static
class|class
name|SetArrayAction
implements|implements
name|SoapRef
operator|.
name|Action
block|{
specifier|private
specifier|final
name|Object
name|array
decl_stmt|;
specifier|private
specifier|final
name|int
name|index
decl_stmt|;
specifier|public
name|SetArrayAction
parameter_list|(
name|Object
name|array
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|array
operator|=
name|array
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
specifier|public
name|void
name|onSet
parameter_list|(
name|SoapRef
name|ref
parameter_list|)
block|{
name|Array
operator|.
name|set
argument_list|(
name|array
argument_list|,
name|index
argument_list|,
name|ref
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

