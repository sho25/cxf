begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|databinding
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|AegisContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|DatabindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeClassInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeCreationOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|TypeMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|ArrayType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|mtom
operator|.
name|AbstractXOPType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|XmlSchemaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|XmlSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|AbstractDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|MethodDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|SimpleMethodDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|AbstractMessageContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|SchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnnotated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|utils
operator|.
name|NamespaceMap
import|;
end_import

begin_comment
comment|/**  * CXF databinding object for Aegis. By default, this creates an AegisContext object. To customize the  * behavior of the binding, an application should create its own AegisContext object and pass it to  * {@link #setAegisContext(AegisContext)}<i>before</i> any call to {@link #initialize(Service)}. That does  * not require special arrangements; the service factories do not call {{@link #initialize(Service)} until  * after the application passes the data binding into the factory. This class adds root classes to the context  * based on the SEI and implementation.  *   * @see org.apache.cxf.aegis.AegisContext  */
end_comment

begin_class
specifier|public
class|class
name|AegisDatabinding
extends|extends
name|AbstractDataBinding
block|{
comment|// these are here only for compatibility.
comment|/**      * @deprecated 2.1      */
specifier|public
specifier|static
specifier|final
name|String
name|WRITE_XSI_TYPE_KEY
init|=
literal|"writeXsiType"
decl_stmt|;
comment|/**      * @deprecated 2.1      */
specifier|public
specifier|static
specifier|final
name|String
name|OVERRIDE_TYPES_KEY
init|=
literal|"overrideTypesList"
decl_stmt|;
comment|/**      * @deprecated 2.1      */
specifier|public
specifier|static
specifier|final
name|String
name|READ_XSI_TYPE_KEY
init|=
literal|"readXsiType"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|IN_PARAM
init|=
literal|0
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|OUT_PARAM
init|=
literal|1
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|FAULT_PARAM
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AegisDatabinding
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AegisContext
name|aegisContext
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|MessagePartInfo
argument_list|,
name|Type
argument_list|>
name|part2Type
decl_stmt|;
specifier|private
name|Service
name|service
decl_stmt|;
specifier|private
name|boolean
name|isInitialized
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|overrideTypes
decl_stmt|;
specifier|private
name|TypeCreationOptions
name|configuration
decl_stmt|;
specifier|private
name|boolean
name|mtomEnabled
decl_stmt|;
specifier|private
name|boolean
name|mtomUseXmime
decl_stmt|;
specifier|public
name|AegisDatabinding
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|part2Type
operator|=
operator|new
name|HashMap
argument_list|<
name|MessagePartInfo
argument_list|,
name|Type
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * The Databinding API has initialize(Service). However, this object should be usable even if that API is      * never called.      */
specifier|private
name|void
name|ensureInitialized
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isInitialized
condition|)
block|{
if|if
condition|(
name|aegisContext
operator|==
literal|null
condition|)
block|{
name|aegisContext
operator|=
operator|new
name|AegisContext
argument_list|()
expr_stmt|;
if|if
condition|(
name|overrideTypes
operator|!=
literal|null
condition|)
block|{
name|aegisContext
operator|.
name|setRootClassNames
argument_list|(
name|overrideTypes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
name|aegisContext
operator|.
name|setTypeCreationOptions
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mtomEnabled
condition|)
block|{
name|aegisContext
operator|.
name|setMtomEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mtomUseXmime
condition|)
block|{
name|aegisContext
operator|.
name|setMtomUseXmime
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|aegisContext
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
name|isInitialized
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|DataReader
argument_list|<
name|T
argument_list|>
name|createReader
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
name|ensureInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|cls
operator|.
name|equals
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|DataReader
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|XMLStreamDataReader
argument_list|(
name|this
argument_list|,
name|getBus
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cls
operator|.
name|equals
argument_list|(
name|Node
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|DataReader
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|ElementDataReader
argument_list|(
name|this
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|DataWriter
argument_list|<
name|T
argument_list|>
name|createWriter
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
name|ensureInitialized
argument_list|()
expr_stmt|;
if|if
condition|(
name|cls
operator|.
name|equals
argument_list|(
name|XMLStreamWriter
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|DataWriter
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|XMLStreamDataWriter
argument_list|(
name|this
argument_list|,
name|getBus
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cls
operator|.
name|equals
argument_list|(
name|Node
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|DataWriter
argument_list|<
name|T
argument_list|>
operator|)
operator|new
name|ElementDataWriter
argument_list|(
name|this
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|getSupportedReaderFormats
parameter_list|()
block|{
return|return
operator|new
name|Class
index|[]
block|{
name|XMLStreamReader
operator|.
name|class
block|,
name|Node
operator|.
name|class
block|}
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|getSupportedWriterFormats
parameter_list|()
block|{
return|return
operator|new
name|Class
index|[]
block|{
name|XMLStreamWriter
operator|.
name|class
block|,
name|Node
operator|.
name|class
block|}
return|;
block|}
comment|/**      * {@inheritDoc} Set up the data binding for a service.      */
specifier|public
name|void
name|initialize
parameter_list|(
name|Service
name|s
parameter_list|)
block|{
comment|// We want to support some compatibility configuration properties.
if|if
condition|(
name|aegisContext
operator|==
literal|null
condition|)
block|{
name|aegisContext
operator|=
operator|new
name|AegisContext
argument_list|()
expr_stmt|;
name|Object
name|val
init|=
name|s
operator|.
name|get
argument_list|(
name|READ_XSI_TYPE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"false"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
operator|||
name|Boolean
operator|.
name|FALSE
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|aegisContext
operator|.
name|setReadXsiTypes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|val
operator|=
name|s
operator|.
name|get
argument_list|(
name|WRITE_XSI_TYPE_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
operator|||
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|aegisContext
operator|.
name|setWriteXsiTypes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|val
operator|=
name|s
operator|.
name|get
argument_list|(
name|OVERRIDE_TYPES_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|Collection
name|nameCollection
init|=
operator|(
name|Collection
operator|)
name|val
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|typeNames
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|nameCollection
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|overrideTypes
operator|==
literal|null
condition|)
block|{
name|overrideTypes
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|overrideTypes
operator|.
name|addAll
argument_list|(
name|typeNames
argument_list|)
expr_stmt|;
block|}
name|val
operator|=
name|s
operator|.
name|get
argument_list|(
literal|"mtom-enabled"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
operator|||
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|val
argument_list|)
operator|||
name|mtomEnabled
condition|)
block|{
name|aegisContext
operator|.
name|setMtomEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mtomUseXmime
condition|)
block|{
name|aegisContext
operator|.
name|setMtomUseXmime
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
name|implMap
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// now for a really annoying case, the .implementation objects.
for|for
control|(
name|String
name|key
range|:
name|s
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|endsWith
argument_list|(
literal|".implementation"
argument_list|)
condition|)
block|{
name|String
name|className
init|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|key
operator|.
name|length
argument_list|()
operator|-
literal|".implementation"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|className
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|"MAPPED_CLASS_NOT_FOUND"
argument_list|,
name|LOG
argument_list|,
name|className
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|implClassName
init|=
operator|(
name|String
operator|)
name|s
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|implMap
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
name|implClassName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|overrideTypes
operator|!=
literal|null
condition|)
block|{
name|aegisContext
operator|.
name|setRootClassNames
argument_list|(
name|overrideTypes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
name|aegisContext
operator|.
name|setTypeCreationOptions
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|implMap
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|aegisContext
operator|.
name|setBeanImplementationMap
argument_list|(
name|implMap
argument_list|)
expr_stmt|;
block|}
block|}
name|aegisContext
operator|.
name|setMappingNamespaceURI
argument_list|(
name|s
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|aegisContext
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|s
expr_stmt|;
name|s
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AegisSchemaValidationInInterceptor
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|s
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Type
argument_list|>
name|deps
init|=
operator|new
name|HashSet
argument_list|<
name|Type
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceInfo
name|info
range|:
name|s
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
for|for
control|(
name|OperationInfo
name|opInfo
range|:
name|info
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperations
argument_list|()
control|)
block|{
if|if
condition|(
name|opInfo
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
name|initializeOperation
argument_list|(
name|s
argument_list|,
name|aegisContext
operator|.
name|getTypeMapping
argument_list|()
argument_list|,
name|opInfo
operator|.
name|getUnwrappedOperation
argument_list|()
argument_list|,
name|deps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initializeOperation
argument_list|(
name|s
argument_list|,
name|aegisContext
operator|.
name|getTypeMapping
argument_list|()
argument_list|,
name|opInfo
argument_list|,
name|deps
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collection
argument_list|<
name|Type
argument_list|>
name|additional
init|=
name|aegisContext
operator|.
name|getRootTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|additional
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Type
name|t
range|:
name|additional
control|)
block|{
if|if
condition|(
operator|!
name|deps
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|deps
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|addDependencies
argument_list|(
name|deps
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|createSchemas
argument_list|(
name|s
argument_list|,
name|deps
argument_list|)
expr_stmt|;
for|for
control|(
name|ServiceInfo
name|info
range|:
name|s
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
for|for
control|(
name|OperationInfo
name|opInfo
range|:
name|info
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperations
argument_list|()
control|)
block|{
if|if
condition|(
name|opInfo
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
name|initializeOperationTypes
argument_list|(
name|info
argument_list|,
name|opInfo
operator|.
name|getUnwrappedOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initializeOperationTypes
argument_list|(
name|info
argument_list|,
name|opInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|initializeOperation
parameter_list|(
name|Service
name|s
parameter_list|,
name|TypeMapping
name|serviceTM
parameter_list|,
name|OperationInfo
name|opInfo
parameter_list|,
name|Set
argument_list|<
name|Type
argument_list|>
name|deps
parameter_list|)
block|{
try|try
block|{
name|initializeMessage
argument_list|(
name|s
argument_list|,
name|serviceTM
argument_list|,
name|opInfo
operator|.
name|getInput
argument_list|()
argument_list|,
name|IN_PARAM
argument_list|,
name|deps
argument_list|)
expr_stmt|;
if|if
condition|(
name|opInfo
operator|.
name|hasOutput
argument_list|()
condition|)
block|{
name|initializeMessage
argument_list|(
name|s
argument_list|,
name|serviceTM
argument_list|,
name|opInfo
operator|.
name|getOutput
argument_list|()
argument_list|,
name|OUT_PARAM
argument_list|,
name|deps
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FaultInfo
name|info
range|:
name|opInfo
operator|.
name|getFaults
argument_list|()
control|)
block|{
name|initializeMessage
argument_list|(
name|s
argument_list|,
name|serviceTM
argument_list|,
name|info
argument_list|,
name|FAULT_PARAM
argument_list|,
name|deps
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DatabindingException
name|e
parameter_list|)
block|{
name|e
operator|.
name|prepend
argument_list|(
literal|"Error initializing parameters for operation "
operator|+
name|opInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|initializeOperationTypes
parameter_list|(
name|ServiceInfo
name|s
parameter_list|,
name|OperationInfo
name|opInfo
parameter_list|)
block|{
try|try
block|{
name|initializeMessageTypes
argument_list|(
name|s
argument_list|,
name|opInfo
operator|.
name|getInput
argument_list|()
argument_list|,
name|IN_PARAM
argument_list|)
expr_stmt|;
if|if
condition|(
name|opInfo
operator|.
name|hasOutput
argument_list|()
condition|)
block|{
name|initializeMessageTypes
argument_list|(
name|s
argument_list|,
name|opInfo
operator|.
name|getOutput
argument_list|()
argument_list|,
name|OUT_PARAM
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FaultInfo
name|info
range|:
name|opInfo
operator|.
name|getFaults
argument_list|()
control|)
block|{
name|initializeMessageTypes
argument_list|(
name|s
argument_list|,
name|info
argument_list|,
name|FAULT_PARAM
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DatabindingException
name|e
parameter_list|)
block|{
name|e
operator|.
name|prepend
argument_list|(
literal|"Error initializing parameters for operation "
operator|+
name|opInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|protected
name|void
name|initializeMessage
parameter_list|(
name|Service
name|s
parameter_list|,
name|TypeMapping
name|serviceTM
parameter_list|,
name|AbstractMessageContainer
name|container
parameter_list|,
name|int
name|partType
parameter_list|,
name|Set
argument_list|<
name|Type
argument_list|>
name|deps
parameter_list|)
block|{
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Iterator
name|itr
init|=
name|container
operator|.
name|getMessageParts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MessagePartInfo
name|part
init|=
operator|(
name|MessagePartInfo
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|Type
name|type
init|=
name|getParameterType
argument_list|(
name|s
argument_list|,
name|serviceTM
argument_list|,
name|part
argument_list|,
name|partType
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|getXmlSchema
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// schema hasn't been filled in yet
if|if
condition|(
name|type
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|part
operator|.
name|setTypeQName
argument_list|(
name|type
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|part
operator|.
name|setElementQName
argument_list|(
name|type
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The concept of type.isNillable is questionable: how are types nillable?
comment|// However, this if at least allow .aegis.xml files to get control.
if|if
condition|(
name|part
operator|.
name|getProperty
argument_list|(
literal|"nillable"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|part
operator|.
name|setProperty
argument_list|(
literal|"nillable"
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|type
operator|.
name|isNillable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|hasMinOccurs
argument_list|()
condition|)
block|{
name|long
name|miValue
init|=
name|type
operator|.
name|getMinOccurs
argument_list|()
decl_stmt|;
if|if
condition|(
name|miValue
operator|!=
literal|0
condition|)
block|{
name|part
operator|.
name|setProperty
argument_list|(
literal|"minOccurs"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|miValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|.
name|hasMaxOccurs
argument_list|()
condition|)
block|{
name|String
name|moValue
decl_stmt|;
name|long
name|mo
init|=
name|type
operator|.
name|getMaxOccurs
argument_list|()
decl_stmt|;
if|if
condition|(
name|mo
operator|!=
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
name|moValue
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|mo
argument_list|)
expr_stmt|;
name|part
operator|.
name|setProperty
argument_list|(
literal|"maxOccurs"
argument_list|,
name|moValue
argument_list|)
expr_stmt|;
block|}
block|}
name|part2Type
operator|.
name|put
argument_list|(
name|part
argument_list|,
name|type
argument_list|)
expr_stmt|;
comment|// QName elName = getSuggestedName(service, op, param)
name|deps
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|addDependencies
argument_list|(
name|deps
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|initializeMessageTypes
parameter_list|(
name|ServiceInfo
name|s
parameter_list|,
name|AbstractMessageContainer
name|container
parameter_list|,
name|int
name|partType
parameter_list|)
block|{
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|SchemaCollection
name|col
init|=
name|s
operator|.
name|getXmlSchemaCollection
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|itr
init|=
name|container
operator|.
name|getMessageParts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MessagePartInfo
name|part
init|=
operator|(
name|MessagePartInfo
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|getXmlSchema
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|part
operator|.
name|isElement
argument_list|()
condition|)
block|{
name|XmlSchemaAnnotated
name|tp
init|=
name|col
operator|.
name|getElementByQName
argument_list|(
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|)
decl_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XmlSchemaAnnotated
name|tp
init|=
name|col
operator|.
name|getTypeByQName
argument_list|(
name|part
operator|.
name|getTypeQName
argument_list|()
argument_list|)
decl_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|addDependencies
parameter_list|(
name|Set
argument_list|<
name|Type
argument_list|>
name|deps
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
name|Set
argument_list|<
name|Type
argument_list|>
name|typeDeps
init|=
name|type
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeDeps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Type
name|t
range|:
name|typeDeps
control|)
block|{
if|if
condition|(
operator|!
name|deps
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|deps
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|addDependencies
argument_list|(
name|deps
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|createSchemas
parameter_list|(
name|Service
name|s
parameter_list|,
name|Set
argument_list|<
name|Type
argument_list|>
name|deps
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Type
argument_list|>
argument_list|>
name|tns2Type
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Type
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Type
name|t
range|:
name|deps
control|)
block|{
name|String
name|ns
init|=
name|t
operator|.
name|getSchemaType
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Type
argument_list|>
name|types
init|=
name|tns2Type
operator|.
name|get
argument_list|(
name|ns
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|==
literal|null
condition|)
block|{
name|types
operator|=
operator|new
name|HashSet
argument_list|<
name|Type
argument_list|>
argument_list|()
expr_stmt|;
name|tns2Type
operator|.
name|put
argument_list|(
name|ns
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
name|types
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ServiceInfo
name|si
range|:
name|s
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
name|SchemaCollection
name|col
init|=
name|si
operator|.
name|getXmlSchemaCollection
argument_list|()
decl_stmt|;
if|if
condition|(
name|col
operator|.
name|getXmlSchemas
argument_list|()
operator|.
name|length
operator|>
literal|1
condition|)
block|{
comment|// someone has already filled in the types
continue|continue;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceMap
init|=
name|getDeclaredNamespaceMappings
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceInfo
name|si
range|:
name|s
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
comment|// these two must be recalculated per-service-info!
name|boolean
name|needXmimeSchema
init|=
literal|false
decl_stmt|;
name|boolean
name|needTypesSchema
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Type
argument_list|>
argument_list|>
name|entry
range|:
name|tns2Type
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|schemaNamespaceUri
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|XmlSchemaConstants
operator|.
name|XSD_NAMESPACE_URI
operator|.
name|equals
argument_list|(
name|schemaNamespaceUri
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|AegisContext
operator|.
name|UTILITY_TYPES_SCHEMA_NS
operator|.
name|equals
argument_list|(
name|schemaNamespaceUri
argument_list|)
condition|)
block|{
continue|continue;
comment|// we handle this separately.
block|}
if|if
condition|(
name|AbstractXOPType
operator|.
name|XML_MIME_NS
operator|.
name|equals
argument_list|(
name|schemaNamespaceUri
argument_list|)
condition|)
block|{
continue|continue;
comment|// similiarly.
block|}
name|SchemaInfo
name|schemaInfo
init|=
name|si
operator|.
name|addNewSchema
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|XmlSchema
name|schema
init|=
name|schemaInfo
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|NamespaceMap
name|xmlsNamespaceMap
init|=
operator|new
name|NamespaceMap
argument_list|()
decl_stmt|;
comment|// user-requested prefix mappings.
if|if
condition|(
name|namespaceMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|namespaceMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|xmlsNamespaceMap
operator|.
name|add
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// tns: is conventional, and besides we have unit tests that are hardcoded to it.
if|if
condition|(
operator|!
name|xmlsNamespaceMap
operator|.
name|containsKey
argument_list|(
name|WSDLConstants
operator|.
name|CONVENTIONAL_TNS_PREFIX
argument_list|)
comment|// if some wants something other than TNS, they get it.
operator|&&
operator|!
name|xmlsNamespaceMap
operator|.
name|containsValue
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|xmlsNamespaceMap
operator|.
name|add
argument_list|(
name|WSDLConstants
operator|.
name|CONVENTIONAL_TNS_PREFIX
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ditto for xsd: instead of just namespace= for the schema schema.
if|if
condition|(
operator|!
name|xmlsNamespaceMap
operator|.
name|containsKey
argument_list|(
literal|"xsd"
argument_list|)
operator|&&
operator|!
name|xmlsNamespaceMap
operator|.
name|containsValue
argument_list|(
name|XmlSchemaConstants
operator|.
name|XSD_NAMESPACE_URI
argument_list|)
condition|)
block|{
name|xmlsNamespaceMap
operator|.
name|add
argument_list|(
literal|"xsd"
argument_list|,
name|XmlSchemaConstants
operator|.
name|XSD_NAMESPACE_URI
argument_list|)
expr_stmt|;
block|}
name|schema
operator|.
name|setNamespaceContext
argument_list|(
name|xmlsNamespaceMap
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setTargetNamespace
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setElementFormDefault
argument_list|(
operator|new
name|XmlSchemaForm
argument_list|(
name|XmlSchemaForm
operator|.
name|QUALIFIED
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setAttributeFormDefault
argument_list|(
operator|new
name|XmlSchemaForm
argument_list|(
name|XmlSchemaForm
operator|.
name|QUALIFIED
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Type
name|t
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
try|try
block|{
name|t
operator|.
name|writeSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmlSchemaException
name|ex
parameter_list|)
block|{
name|QName
name|name
init|=
name|t
operator|.
name|getSchemaType
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
literal|" Schema for namespace '"
operator|+
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"' already contains type '"
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"'"
decl_stmt|;
name|String
name|message
init|=
name|ex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|expected
operator|.
name|equals
argument_list|(
name|message
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
if|if
condition|(
name|schemaImportsXmime
argument_list|(
name|schema
argument_list|)
condition|)
block|{
name|needXmimeSchema
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|AegisContext
operator|.
name|schemaImportsUtilityTypes
argument_list|(
name|schema
argument_list|)
condition|)
block|{
name|needTypesSchema
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needXmimeSchema
condition|)
block|{
name|XmlSchema
name|schema
init|=
name|aegisContext
operator|.
name|addXmimeSchemaDocument
argument_list|(
name|si
operator|.
name|getXmlSchemaCollection
argument_list|()
operator|.
name|getXmlSchemaCollection
argument_list|()
argument_list|)
decl_stmt|;
name|SchemaInfo
name|schemaInfo
init|=
operator|new
name|SchemaInfo
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
decl_stmt|;
name|schemaInfo
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|si
operator|.
name|addSchema
argument_list|(
name|schemaInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needTypesSchema
condition|)
block|{
name|XmlSchema
name|schema
init|=
name|aegisContext
operator|.
name|addTypesSchemaDocument
argument_list|(
name|si
operator|.
name|getXmlSchemaCollection
argument_list|()
operator|.
name|getXmlSchemaCollection
argument_list|()
argument_list|)
decl_stmt|;
name|SchemaInfo
name|schemaInfo
init|=
operator|new
name|SchemaInfo
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
decl_stmt|;
name|schemaInfo
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|si
operator|.
name|addSchema
argument_list|(
name|schemaInfo
argument_list|)
expr_stmt|;
block|}
comment|// it's quite likely that the code in Aegis missed at least one ...
name|si
operator|.
name|getXmlSchemaCollection
argument_list|()
operator|.
name|addCrossImports
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|schemaImportsXmime
parameter_list|(
name|XmlSchema
name|schema
parameter_list|)
block|{
return|return
name|XmlSchemaUtils
operator|.
name|schemaImportsNamespace
argument_list|(
name|schema
argument_list|,
name|AbstractXOPType
operator|.
name|XML_MIME_NS
argument_list|)
return|;
block|}
specifier|public
name|QName
name|getSuggestedName
parameter_list|(
name|Service
name|s
parameter_list|,
name|TypeMapping
name|tm
parameter_list|,
name|OperationInfo
name|op
parameter_list|,
name|int
name|param
parameter_list|)
block|{
name|Method
name|m
init|=
name|getMethod
argument_list|(
name|s
argument_list|,
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|QName
name|name
init|=
name|tm
operator|.
name|getTypeCreator
argument_list|()
operator|.
name|getElementName
argument_list|(
name|m
argument_list|,
name|param
argument_list|)
decl_stmt|;
comment|// No mapped name was specified, so if its a complex type use that name
comment|// instead
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|Type
name|type
init|=
name|tm
operator|.
name|getTypeCreator
argument_list|()
operator|.
name|createType
argument_list|(
name|m
argument_list|,
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isComplex
argument_list|()
operator|&&
operator|!
name|type
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|name
operator|=
name|type
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|name
return|;
block|}
specifier|private
name|Type
name|getParameterType
parameter_list|(
name|Service
name|s
parameter_list|,
name|TypeMapping
name|tm
parameter_list|,
name|MessagePartInfo
name|param
parameter_list|,
name|int
name|paramtype
parameter_list|)
block|{
name|Type
name|type
init|=
name|tm
operator|.
name|getType
argument_list|(
name|param
operator|.
name|getTypeQName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|paramtype
operator|==
name|OUT_PARAM
condition|)
block|{
name|offset
operator|=
literal|1
expr_stmt|;
block|}
name|TypeCreator
name|typeCreator
init|=
name|tm
operator|.
name|getTypeCreator
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
comment|// Current author doesn't know how type can be non-null here.
name|boolean
name|usingComponentType
init|=
literal|false
decl_stmt|;
name|OperationInfo
name|op
init|=
name|param
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
decl_stmt|;
name|Method
name|m
init|=
name|getMethod
argument_list|(
name|s
argument_list|,
name|op
argument_list|)
decl_stmt|;
name|TypeClassInfo
name|info
decl_stmt|;
if|if
condition|(
name|paramtype
operator|!=
name|FAULT_PARAM
operator|&&
name|m
operator|!=
literal|null
condition|)
block|{
name|info
operator|=
name|typeCreator
operator|.
name|createClassInfo
argument_list|(
name|m
argument_list|,
name|param
operator|.
name|getIndex
argument_list|()
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|=
name|typeCreator
operator|.
name|createBasicClassInfo
argument_list|(
name|param
operator|.
name|getTypeClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|nillable
init|=
name|info
operator|.
name|getNillable
argument_list|()
decl_stmt|;
comment|/*              * Note that, for types from the mapping, the minOccurs, maxOccurs, and nillable from the 'info'              * will be ignored by createTypeForClass below. So we need to override.              */
name|type
operator|=
name|typeCreator
operator|.
name|createTypeForClass
argument_list|(
name|info
argument_list|)
expr_stmt|;
comment|// if not writing outer, we don't need anything special.
if|if
condition|(
name|param
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|isUnwrapped
argument_list|()
operator|&&
name|param
operator|.
name|getTypeClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|&&
name|type
operator|.
name|isWriteOuter
argument_list|()
condition|)
block|{
comment|/*                  * The service factory expects arrays going into the wrapper to be mapped to the array                  * component type and will then add min=0/max=unbounded. That doesn't work for Aegis where we                  * already created a wrapper ArrayType so we'll let it know we want the default.                  */
name|param
operator|.
name|setProperty
argument_list|(
literal|"minOccurs"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|param
operator|.
name|setProperty
argument_list|(
literal|"maxOccurs"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
if|if
condition|(
name|nillable
operator|==
literal|null
condition|)
block|{
name|nillable
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
name|param
operator|.
name|setProperty
argument_list|(
literal|"nillable"
argument_list|,
name|nillable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|nillable
operator|!=
literal|null
condition|)
block|{
name|param
operator|.
name|setProperty
argument_list|(
literal|"nillable"
argument_list|,
name|nillable
argument_list|)
expr_stmt|;
block|}
comment|/*                  * TypeClassInfo uses -1 to mean 'not specified'                  */
if|if
condition|(
name|info
operator|.
name|getMinOccurs
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|param
operator|.
name|setProperty
argument_list|(
literal|"minOccurs"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|info
operator|.
name|getMinOccurs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getMaxOccurs
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|param
operator|.
name|setProperty
argument_list|(
literal|"maxOccurs"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|info
operator|.
name|getMaxOccurs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|type
operator|instanceof
name|ArrayType
operator|)
operator|&&
operator|!
name|type
operator|.
name|isWriteOuter
argument_list|()
condition|)
block|{
name|param
operator|.
name|setProperty
argument_list|(
literal|"org.apache.cxf.aegis.outerType"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|ArrayType
name|aType
init|=
operator|(
name|ArrayType
operator|)
name|type
decl_stmt|;
name|type
operator|=
name|aType
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
name|usingComponentType
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|info
operator|.
name|getMappedName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|param
operator|.
name|setConcreteName
argument_list|(
name|info
operator|.
name|getMappedName
argument_list|()
argument_list|)
expr_stmt|;
name|param
operator|.
name|setName
argument_list|(
name|info
operator|.
name|getMappedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|usingComponentType
condition|)
block|{
comment|// We have to register the type if we want minOccurs and such to
comment|// work. (for custom types). Is this really still true with all the
comment|// param setting above?
if|if
condition|(
name|info
operator|.
name|nonDefaultAttributes
argument_list|()
condition|)
block|{
name|tm
operator|.
name|register
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|type
operator|.
name|setTypeMapping
argument_list|(
name|tm
argument_list|)
expr_stmt|;
block|}
name|part2Type
operator|.
name|put
argument_list|(
name|param
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
specifier|private
name|Method
name|getMethod
parameter_list|(
name|Service
name|s
parameter_list|,
name|OperationInfo
name|op
parameter_list|)
block|{
name|MethodDispatcher
name|md
init|=
operator|(
name|MethodDispatcher
operator|)
name|s
operator|.
name|get
argument_list|(
name|MethodDispatcher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SimpleMethodDispatcher
name|smd
init|=
operator|(
name|SimpleMethodDispatcher
operator|)
name|md
decl_stmt|;
return|return
name|smd
operator|!=
literal|null
condition|?
name|smd
operator|.
name|getPrimaryMethod
argument_list|(
name|op
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|Type
name|getType
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{
return|return
name|part2Type
operator|.
name|get
argument_list|(
name|part
argument_list|)
return|;
block|}
specifier|public
name|MessagePartInfo
name|getPartFromClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MessagePartInfo
argument_list|,
name|Type
argument_list|>
name|entry
range|:
name|part2Type
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getTypeClass
argument_list|()
operator|==
name|cls
condition|)
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Type
name|getTypeFromClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
for|for
control|(
name|Type
name|t
range|:
name|part2Type
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getTypeClass
argument_list|()
operator|==
name|cls
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
name|service
return|;
block|}
specifier|public
name|AegisContext
name|getAegisContext
parameter_list|()
block|{
name|ensureInitialized
argument_list|()
expr_stmt|;
return|return
name|aegisContext
return|;
block|}
specifier|public
name|void
name|setAegisContext
parameter_list|(
name|AegisContext
name|aegisContext
parameter_list|)
block|{
name|this
operator|.
name|aegisContext
operator|=
name|aegisContext
expr_stmt|;
block|}
specifier|public
name|void
name|setOverrideTypes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|types
parameter_list|)
block|{
name|overrideTypes
operator|=
name|types
expr_stmt|;
block|}
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|TypeCreationOptions
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMtomEnabled
parameter_list|()
block|{
return|return
name|mtomEnabled
return|;
block|}
specifier|public
name|void
name|setMtomEnabled
parameter_list|(
name|boolean
name|mtomEnabled
parameter_list|)
block|{
name|this
operator|.
name|mtomEnabled
operator|=
name|mtomEnabled
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMtomUseXmime
parameter_list|()
block|{
return|return
name|mtomUseXmime
return|;
block|}
specifier|public
name|void
name|setMtomUseXmime
parameter_list|(
name|boolean
name|mtomUseXmime
parameter_list|)
block|{
name|this
operator|.
name|mtomUseXmime
operator|=
name|mtomUseXmime
expr_stmt|;
block|}
block|}
end_class

end_unit

