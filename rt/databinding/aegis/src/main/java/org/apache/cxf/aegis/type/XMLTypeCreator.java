begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|DatabindingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|BeanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|basic
operator|.
name|XMLBeanTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|type
operator|.
name|java5
operator|.
name|Java5TypeCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|aegis
operator|.
name|util
operator|.
name|NamespaceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XPathUtils
import|;
end_import

begin_comment
comment|/**  * Deduce mapping information from an xml file. The xml file should be in the  * same packages as the class, with the name<code>className.aegis.xml</code>.  * For example, given the following service interface:<p/>  *  *<pre>  * public Collection getResultsForValues(String id, Collection values); //method 1  *  * public Collection getResultsForValues(int id, Collection values); //method 2  *  * public String getResultForValue(String value); //method 3  *</pre>  *  * An example of the type xml is:  *  *<pre>  *&lt;mappings&gt;  *&lt;mapping&gt;  *&lt;method name=&quot;getResultsForValues&quot;&gt;  *&lt;return-type componentType=&quot;com.acme.ResultBean&quot; /&gt;  *&lt;!-- no need to specify index 0, since it's a String --&gt;  *&lt;parameter index=&quot;1&quot; componentType=&quot;java.lang.String&quot; /&gt;  *&lt;/method&gt;  *&lt;/mapping&gt;  *&lt;/mappings&gt;  *</pre>  *  *<p/> Note that for values which can be easily deduced (such as the String  * parameter, or the second service method) no mapping need be specified in the  * xml descriptor, which is why no mapping is specified for method 3.<p/>  * However, if you have overloaded methods with different semantics, then you  * will need to specify enough parameters to disambiguate the method and  * uniquely identify it. So in the example above, the mapping specifies will  * apply to both method 1 and method 2, since the parameter at index 0 is not  * specified.  */
end_comment

begin_class
specifier|public
class|class
name|XMLTypeCreator
extends|extends
name|AbstractTypeCreator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|XMLTypeCreator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|stopClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|stopClasses
operator|.
name|add
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
name|stopClasses
operator|.
name|add
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
name|stopClasses
operator|.
name|add
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
expr_stmt|;
name|stopClasses
operator|.
name|add
argument_list|(
name|Throwable
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|DocumentBuilderFactory
name|AEGIS_DOCUMENT_BUILDER_FACTORY
decl_stmt|;
comment|// cache of classes to documents
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|documents
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|AEGIS_DOCUMENT_BUILDER_FACTORY
operator|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|AEGIS_DOCUMENT_BUILDER_FACTORY
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|AEGIS_DOCUMENT_BUILDER_FACTORY
operator|.
name|setFeature
argument_list|(
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
name|String
name|path
init|=
literal|"/META-INF/cxf/aegis.xsd"
decl_stmt|;
name|InputStream
name|is
init|=
name|XMLTypeCreator
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|SchemaFactory
name|schemaFactory
init|=
name|SchemaFactory
operator|.
name|newInstance
argument_list|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
argument_list|)
decl_stmt|;
name|Schema
name|aegisSchema
init|=
name|schemaFactory
operator|.
name|newSchema
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|AEGIS_DOCUMENT_BUILDER_FACTORY
operator|.
name|setSchema
argument_list|(
name|aegisSchema
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Could not set aegis schema.  Not validating."
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
block|}
specifier|private
specifier|volatile
name|XPathUtils
name|xpathUtils
decl_stmt|;
specifier|private
specifier|synchronized
name|XPathUtils
name|getXPathUtils
parameter_list|()
block|{
if|if
condition|(
name|xpathUtils
operator|==
literal|null
condition|)
block|{
name|xpathUtils
operator|=
operator|new
name|XPathUtils
argument_list|()
expr_stmt|;
block|}
return|return
name|xpathUtils
return|;
block|}
specifier|private
name|Document
name|readAegisFile
parameter_list|(
name|InputStream
name|is
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|DocumentBuilder
name|documentBuilder
decl_stmt|;
try|try
block|{
name|documentBuilder
operator|=
name|AEGIS_DOCUMENT_BUILDER_FACTORY
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Unable to create a document builder, e"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to create a document builder, e"
argument_list|)
throw|;
block|}
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
name|doc
decl_stmt|;
name|documentBuilder
operator|.
name|setErrorHandler
argument_list|(
operator|new
name|ErrorHandler
argument_list|()
block|{
specifier|private
name|String
name|errorMessage
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
block|{
return|return
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"{0} at {1} line {2} column {3}."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|exception
operator|.
name|getMessage
argument_list|()
block|,
name|path
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|exception
operator|.
name|getLineNumber
argument_list|()
argument_list|)
block|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|exception
operator|.
name|getColumnNumber
argument_list|()
argument_list|)
block|}
argument_list|)
return|;
block|}
specifier|private
name|void
name|throwDatabindingException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
comment|//DatabindingException is quirky. This dance is required to get the full message
comment|//to where it belongs.
name|DatabindingException
name|e
init|=
operator|new
name|DatabindingException
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|e
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|message
init|=
name|errorMessage
argument_list|(
name|exception
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|message
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|throwDatabindingException
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|message
init|=
name|errorMessage
argument_list|(
name|exception
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|message
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|throwDatabindingException
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
name|errorMessage
argument_list|(
name|exception
argument_list|)
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|doc
operator|=
name|documentBuilder
operator|.
name|parse
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Error parsing Aegis file."
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// can't happen due to
comment|// above.
return|return
literal|null
return|;
block|}
return|return
name|doc
return|;
block|}
specifier|protected
name|Document
name|getDocument
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|documents
operator|.
name|containsKey
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|documents
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|String
name|path
init|=
literal|'/'
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".aegis.xml"
decl_stmt|;
name|InputStream
name|is
init|=
name|clazz
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|documents
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|finest
argument_list|(
literal|"Mapping file : "
operator|+
name|path
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|finest
argument_list|(
literal|"Found mapping file : "
operator|+
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|Document
name|doc
init|=
name|readAegisFile
argument_list|(
name|is
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|documents
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|doc
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Error loading file "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|documents
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isEnum
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|javaType
parameter_list|)
block|{
name|Element
name|mapping
init|=
name|findMapping
argument_list|(
name|javaType
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|isEnum
argument_list|(
name|javaType
argument_list|)
return|;
block|}
return|return
name|nextCreator
operator|.
name|isEnum
argument_list|(
name|javaType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AegisType
name|createEnumType
parameter_list|(
name|TypeClassInfo
name|info
parameter_list|)
block|{
name|Element
name|mapping
init|=
name|findMapping
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|createEnumType
argument_list|(
name|info
argument_list|)
return|;
block|}
return|return
name|nextCreator
operator|.
name|createEnumType
argument_list|(
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AegisType
name|createCollectionType
parameter_list|(
name|TypeClassInfo
name|info
parameter_list|)
block|{
comment|/* If it is a parameterized type, then we already know          * the parameter(s) and we don't need to fish them out of the XML.          */
if|if
condition|(
name|info
operator|.
name|getType
argument_list|()
operator|instanceof
name|Class
condition|)
block|{
return|return
name|createCollectionTypeFromGeneric
argument_list|(
name|info
argument_list|)
return|;
block|}
return|return
name|nextCreator
operator|.
name|createCollectionType
argument_list|(
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TypeClassInfo
name|createClassInfo
parameter_list|(
name|PropertyDescriptor
name|pd
parameter_list|)
block|{
name|Element
name|mapping
init|=
name|findMapping
argument_list|(
name|pd
operator|.
name|getReadMethod
argument_list|()
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|==
literal|null
condition|)
block|{
return|return
name|nextCreator
operator|.
name|createClassInfo
argument_list|(
name|pd
argument_list|)
return|;
block|}
name|Element
name|propertyEl
init|=
name|getMatch
argument_list|(
name|mapping
argument_list|,
literal|"./property[@name='"
operator|+
name|pd
operator|.
name|getName
argument_list|()
operator|+
literal|"']"
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyEl
operator|==
literal|null
condition|)
block|{
return|return
name|nextCreator
operator|.
name|createClassInfo
argument_list|(
name|pd
argument_list|)
return|;
block|}
name|TypeClassInfo
name|info
init|=
operator|new
name|TypeClassInfo
argument_list|()
decl_stmt|;
name|Type
name|returnType
init|=
name|pd
operator|.
name|getReadMethod
argument_list|()
operator|.
name|getGenericReturnType
argument_list|()
decl_stmt|;
name|info
operator|.
name|setType
argument_list|(
name|returnType
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDescription
argument_list|(
literal|"property "
operator|+
name|pd
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|readMetadata
argument_list|(
name|info
argument_list|,
name|mapping
argument_list|,
name|propertyEl
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|protected
name|Element
name|findMapping
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
comment|// We are not prepared to find .aegis.xml files for Parameterized types.
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|TypeUtil
operator|.
name|getTypeClass
argument_list|(
name|type
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Document
name|doc
init|=
name|getDocument
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Element
name|mapping
init|=
name|getMatch
argument_list|(
name|doc
argument_list|,
literal|"/mappings/mapping[@uri='"
operator|+
name|getTypeMapping
argument_list|()
operator|.
name|getMappingIdentifierURI
argument_list|()
operator|+
literal|"']"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|==
literal|null
condition|)
block|{
name|mapping
operator|=
name|getMatch
argument_list|(
name|doc
argument_list|,
literal|"/mappings/mapping[not(@uri)]"
argument_list|)
expr_stmt|;
block|}
return|return
name|mapping
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Element
argument_list|>
name|findMappings
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|TypeUtil
operator|.
name|getTypeClass
argument_list|(
name|type
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|mappings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return
name|mappings
return|;
block|}
name|Element
name|top
init|=
name|findMapping
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|top
operator|!=
literal|null
condition|)
block|{
name|mappings
operator|.
name|add
argument_list|(
name|top
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|parent
init|=
name|clazz
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// Read mappings for interfaces as well
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|interfaces
init|=
name|parent
operator|.
name|getInterfaces
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|interfaces
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|interfaze
init|=
name|interfaces
index|[
name|i
index|]
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|interfaceMappings
init|=
name|findMappings
argument_list|(
name|interfaze
argument_list|)
decl_stmt|;
name|mappings
operator|.
name|addAll
argument_list|(
name|interfaceMappings
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|sup
init|=
name|parent
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|sup
operator|==
literal|null
operator|||
name|stopClasses
operator|.
name|contains
argument_list|(
name|sup
argument_list|)
condition|)
block|{
break|break;
block|}
name|Element
name|mapping
init|=
name|findMapping
argument_list|(
name|sup
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|mappings
operator|.
name|add
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
block|}
name|parent
operator|=
name|sup
expr_stmt|;
block|}
return|return
name|mappings
return|;
block|}
annotation|@
name|Override
specifier|public
name|AegisType
name|createDefaultType
parameter_list|(
name|TypeClassInfo
name|info
parameter_list|)
block|{
name|Element
name|mapping
init|=
name|findMapping
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|mappings
init|=
name|findMappings
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|relatedClass
init|=
name|TypeUtil
operator|.
name|getTypeRelatedClass
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
operator|||
operator|!
name|mappings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|typeNameAtt
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|typeNameAtt
operator|=
name|DOMUtils
operator|.
name|getAttributeValueEmptyNull
argument_list|(
name|mapping
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
block|}
name|String
name|extensibleElements
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|extensibleElements
operator|=
name|mapping
operator|.
name|getAttribute
argument_list|(
literal|"extensibleElements"
argument_list|)
expr_stmt|;
block|}
name|String
name|extensibleAttributes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mapping
operator|!=
literal|null
condition|)
block|{
name|extensibleAttributes
operator|=
name|mapping
operator|.
name|getAttribute
argument_list|(
literal|"extensibleAttributes"
argument_list|)
expr_stmt|;
block|}
name|String
name|defaultNS
init|=
name|NamespaceHelper
operator|.
name|makeNamespaceFromClassName
argument_list|(
name|relatedClass
operator|.
name|getName
argument_list|()
argument_list|,
literal|"http"
argument_list|)
decl_stmt|;
name|QName
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|typeNameAtt
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|NamespaceHelper
operator|.
name|createQName
argument_list|(
name|mapping
argument_list|,
name|typeNameAtt
argument_list|,
name|defaultNS
argument_list|)
expr_stmt|;
name|defaultNS
operator|=
name|name
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
comment|// We do not deal with Generic beans at this point.
name|XMLBeanTypeInfo
name|btinfo
init|=
operator|new
name|XMLBeanTypeInfo
argument_list|(
name|relatedClass
argument_list|,
name|mappings
argument_list|,
name|defaultNS
argument_list|)
decl_stmt|;
name|btinfo
operator|.
name|setTypeMapping
argument_list|(
name|getTypeMapping
argument_list|()
argument_list|)
expr_stmt|;
name|btinfo
operator|.
name|setDefaultMinOccurs
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getDefaultMinOccurs
argument_list|()
argument_list|)
expr_stmt|;
name|btinfo
operator|.
name|setDefaultNillable
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|isDefaultNillable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|extensibleElements
operator|!=
literal|null
condition|)
block|{
name|btinfo
operator|.
name|setExtensibleElements
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|extensibleElements
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|btinfo
operator|.
name|setExtensibleElements
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|isDefaultExtensibleElements
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extensibleAttributes
operator|!=
literal|null
condition|)
block|{
name|btinfo
operator|.
name|setExtensibleAttributes
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|extensibleAttributes
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|btinfo
operator|.
name|setExtensibleAttributes
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|isDefaultExtensibleAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|btinfo
operator|.
name|setQualifyAttributes
argument_list|(
name|this
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isQualifyAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|btinfo
operator|.
name|setQualifyElements
argument_list|(
name|this
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isQualifyElements
argument_list|()
argument_list|)
expr_stmt|;
name|BeanType
name|type
init|=
operator|new
name|BeanType
argument_list|(
name|btinfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|createQName
argument_list|(
name|relatedClass
argument_list|)
expr_stmt|;
block|}
name|type
operator|.
name|setSchemaType
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeClass
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setTypeMapping
argument_list|(
name|getTypeMapping
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|type
return|;
block|}
return|return
name|nextCreator
operator|.
name|createDefaultType
argument_list|(
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TypeClassInfo
name|createClassInfo
parameter_list|(
name|Method
name|m
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|Element
name|mapping
init|=
name|findMapping
argument_list|(
name|m
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapping
operator|==
literal|null
condition|)
block|{
return|return
name|nextCreator
operator|.
name|createClassInfo
argument_list|(
name|m
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|// find the elements that apply to the specified method
name|TypeClassInfo
name|info
init|=
name|nextCreator
operator|.
name|createClassInfo
argument_list|(
name|m
argument_list|,
name|index
argument_list|)
decl_stmt|;
comment|// start
comment|// with the
comment|// java5
comment|// (or whatever) version.
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|info
operator|=
operator|new
name|TypeClassInfo
argument_list|()
expr_stmt|;
block|}
name|info
operator|.
name|setDescription
argument_list|(
literal|"method "
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|+
literal|" parameter "
operator|+
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|index
operator|>=
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Method "
operator|+
name|m
operator|+
literal|" does not have a parameter at index "
operator|+
name|index
argument_list|)
throw|;
block|}
comment|// we don't want nodes for which the specified index is not
comment|// specified
name|List
argument_list|<
name|Element
argument_list|>
name|nodes
init|=
name|getMatches
argument_list|(
name|mapping
argument_list|,
literal|"./method[@name='"
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|+
literal|"']/parameter[@index='"
operator|+
name|index
operator|+
literal|"']/parent::*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no mapping for this method
return|return
name|info
return|;
block|}
comment|// pick the best matching node
name|Element
name|bestMatch
init|=
name|getBestMatch
argument_list|(
name|mapping
argument_list|,
name|m
argument_list|,
name|nodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|bestMatch
operator|==
literal|null
condition|)
block|{
comment|// no mapping for this method
return|return
name|info
return|;
block|}
name|info
operator|.
name|setType
argument_list|(
name|m
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
name|index
index|]
argument_list|)
expr_stmt|;
comment|// info.setAnnotations(m.getParameterAnnotations()[index]);
name|Element
name|parameter
init|=
name|getMatch
argument_list|(
name|bestMatch
argument_list|,
literal|"parameter[@index='"
operator|+
name|index
operator|+
literal|"']"
argument_list|)
decl_stmt|;
name|readMetadata
argument_list|(
name|info
argument_list|,
name|mapping
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|nodes
init|=
name|getMatches
argument_list|(
name|mapping
argument_list|,
literal|"./method[@name='"
operator|+
name|m
operator|.
name|getName
argument_list|()
operator|+
literal|"']/return-type/parent::*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|info
return|;
block|}
name|Element
name|bestMatch
init|=
name|getBestMatch
argument_list|(
name|mapping
argument_list|,
name|m
argument_list|,
name|nodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|bestMatch
operator|==
literal|null
condition|)
block|{
comment|// no mapping for this method
return|return
name|info
return|;
block|}
name|info
operator|.
name|setType
argument_list|(
name|m
operator|.
name|getGenericReturnType
argument_list|()
argument_list|)
expr_stmt|;
comment|// info.setAnnotations(m.getAnnotations());
name|Element
name|rtElement
init|=
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|bestMatch
argument_list|,
literal|""
argument_list|,
literal|"return-type"
argument_list|)
decl_stmt|;
name|readMetadata
argument_list|(
name|info
argument_list|,
name|mapping
argument_list|,
name|rtElement
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
specifier|protected
name|void
name|readMetadata
parameter_list|(
name|TypeClassInfo
name|info
parameter_list|,
name|Element
name|mapping
parameter_list|,
name|Element
name|parameter
parameter_list|)
block|{
name|info
operator|.
name|setTypeName
argument_list|(
name|createQName
argument_list|(
name|parameter
argument_list|,
name|DOMUtils
operator|.
name|getAttributeValueEmptyNull
argument_list|(
name|parameter
argument_list|,
literal|"typeName"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMappedName
argument_list|(
name|createQName
argument_list|(
name|parameter
argument_list|,
name|DOMUtils
operator|.
name|getAttributeValueEmptyNull
argument_list|(
name|parameter
argument_list|,
literal|"mappedName"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|relatedClass
init|=
name|TypeUtil
operator|.
name|getTypeRelatedClass
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
comment|// we only mess with the generic issues for list and map
if|if
condition|(
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|relatedClass
argument_list|)
condition|)
block|{
name|Type
name|componentType
init|=
name|getComponentType
argument_list|(
name|mapping
argument_list|,
name|parameter
argument_list|)
decl_stmt|;
if|if
condition|(
name|componentType
operator|!=
literal|null
condition|)
block|{
comment|// there is actually XML config.
name|Type
name|fullType
init|=
name|ParameterizedTypeFactory
operator|.
name|createParameterizedType
argument_list|(
name|relatedClass
argument_list|,
operator|new
name|Type
index|[]
block|{
name|componentType
block|}
argument_list|)
decl_stmt|;
name|info
operator|.
name|setType
argument_list|(
name|fullType
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|relatedClass
argument_list|)
condition|)
block|{
name|Type
name|keyType
init|=
name|getKeyType
argument_list|(
name|mapping
argument_list|,
name|parameter
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyType
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setKeyType
argument_list|(
name|keyType
argument_list|)
expr_stmt|;
block|}
name|Type
name|valueType
init|=
name|getValueType
argument_list|(
name|mapping
argument_list|,
name|parameter
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueType
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setValueType
argument_list|(
name|valueType
argument_list|)
expr_stmt|;
block|}
comment|// if the XML only specifies one, we expect the other to come from a full
comment|// parameterized type.
if|if
condition|(
name|keyType
operator|!=
literal|null
operator|||
name|valueType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|keyType
operator|==
literal|null
operator|||
name|valueType
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|keyType
operator|==
literal|null
condition|)
block|{
name|keyType
operator|=
name|TypeUtil
operator|.
name|getSingleTypeParameter
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keyType
operator|==
literal|null
condition|)
block|{
name|keyType
operator|=
name|Object
operator|.
name|class
expr_stmt|;
block|}
if|if
condition|(
name|valueType
operator|==
literal|null
condition|)
block|{
name|valueType
operator|=
name|TypeUtil
operator|.
name|getSingleTypeParameter
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueType
operator|==
literal|null
condition|)
block|{
name|valueType
operator|=
name|Object
operator|.
name|class
expr_stmt|;
block|}
block|}
name|Type
name|fullType
init|=
name|ParameterizedTypeFactory
operator|.
name|createParameterizedType
argument_list|(
name|relatedClass
argument_list|,
operator|new
name|Type
index|[]
block|{
name|keyType
block|,
name|valueType
block|}
argument_list|)
decl_stmt|;
name|info
operator|.
name|setType
argument_list|(
name|fullType
argument_list|)
expr_stmt|;
block|}
block|}
name|setType
argument_list|(
name|info
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
name|String
name|min
init|=
name|DOMUtils
operator|.
name|getAttributeValueEmptyNull
argument_list|(
name|parameter
argument_list|,
literal|"minOccurs"
argument_list|)
decl_stmt|;
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setMinOccurs
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|min
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|max
init|=
name|DOMUtils
operator|.
name|getAttributeValueEmptyNull
argument_list|(
name|parameter
argument_list|,
literal|"maxOccurs"
argument_list|)
decl_stmt|;
if|if
condition|(
name|max
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setMaxOccurs
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|max
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|flat
init|=
name|DOMUtils
operator|.
name|getAttributeValueEmptyNull
argument_list|(
name|parameter
argument_list|,
literal|"flat"
argument_list|)
decl_stmt|;
if|if
condition|(
name|flat
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setFlat
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|flat
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|nillable
init|=
name|DOMUtils
operator|.
name|getAttributeValueEmptyNull
argument_list|(
name|parameter
argument_list|,
literal|"nillable"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nillable
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|setNillable
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|nillable
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|AegisType
name|getOrCreateGenericType
parameter_list|(
name|TypeClassInfo
name|info
parameter_list|)
block|{
name|AegisType
name|type
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getType
argument_list|()
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|type
operator|=
name|createTypeFromGeneric
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|super
operator|.
name|getOrCreateGenericType
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
specifier|private
name|AegisType
name|createTypeFromGeneric
parameter_list|(
name|Object
name|cType
parameter_list|)
block|{
if|if
condition|(
name|cType
operator|instanceof
name|TypeClassInfo
condition|)
block|{
return|return
name|createTypeForClass
argument_list|(
operator|(
name|TypeClassInfo
operator|)
name|cType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cType
operator|instanceof
name|Class
condition|)
block|{
return|return
name|createType
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|cType
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|AegisType
name|getOrCreateMapKeyType
parameter_list|(
name|TypeClassInfo
name|info
parameter_list|)
block|{
name|AegisType
name|type
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getKeyType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|createTypeFromGeneric
argument_list|(
name|info
operator|.
name|getKeyType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|super
operator|.
name|getOrCreateMapKeyType
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|protected
name|AegisType
name|getOrCreateMapValueType
parameter_list|(
name|TypeClassInfo
name|info
parameter_list|)
block|{
name|AegisType
name|type
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getType
argument_list|()
operator|instanceof
name|ParameterizedType
condition|)
block|{
comment|// well, let's hope that someone has filled in the value type.
name|type
operator|=
name|createTypeFromGeneric
argument_list|(
name|info
operator|.
name|getValueType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|super
operator|.
name|getOrCreateMapValueType
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
specifier|private
name|Type
name|getComponentType
parameter_list|(
name|Element
name|mapping
parameter_list|,
name|Element
name|parameter
parameter_list|)
block|{
name|String
name|componentSpec
init|=
name|DOMUtils
operator|.
name|getAttributeValueEmptyNull
argument_list|(
name|parameter
argument_list|,
literal|"componentType"
argument_list|)
decl_stmt|;
if|if
condition|(
name|componentSpec
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getGenericParameterFromSpec
argument_list|(
name|mapping
argument_list|,
name|componentSpec
argument_list|)
return|;
block|}
specifier|private
name|Type
name|getKeyType
parameter_list|(
name|Element
name|mapping
parameter_list|,
name|Element
name|parameter
parameter_list|)
block|{
name|String
name|spec
init|=
name|DOMUtils
operator|.
name|getAttributeValueEmptyNull
argument_list|(
name|parameter
argument_list|,
literal|"keyType"
argument_list|)
decl_stmt|;
if|if
condition|(
name|spec
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getGenericParameterFromSpec
argument_list|(
name|mapping
argument_list|,
name|spec
argument_list|)
return|;
block|}
specifier|private
name|Type
name|getValueType
parameter_list|(
name|Element
name|mapping
parameter_list|,
name|Element
name|parameter
parameter_list|)
block|{
name|String
name|spec
init|=
name|DOMUtils
operator|.
name|getAttributeValueEmptyNull
argument_list|(
name|parameter
argument_list|,
literal|"valueType"
argument_list|)
decl_stmt|;
if|if
condition|(
name|spec
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getGenericParameterFromSpec
argument_list|(
name|mapping
argument_list|,
name|spec
argument_list|)
return|;
block|}
comment|// This cannot do List<List<x>>.
specifier|private
name|Type
name|getGenericParameterFromSpec
parameter_list|(
name|Element
name|mapping
parameter_list|,
name|String
name|componentType
parameter_list|)
block|{
if|if
condition|(
name|componentType
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|componentType
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Element
name|propertyEl
init|=
name|getMatch
argument_list|(
name|mapping
argument_list|,
literal|"./component[@name='"
operator|+
name|name
operator|+
literal|"']"
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyEl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Could not find<component> element in mapping named '"
operator|+
name|name
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|String
name|className
init|=
name|DOMUtils
operator|.
name|getAttributeValueEmptyNull
argument_list|(
name|propertyEl
argument_list|,
literal|"class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"A 'class' attribute must be specified for<component> "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|loadComponentClass
argument_list|(
name|className
argument_list|)
return|;
block|}
return|return
name|loadComponentClass
argument_list|(
name|componentType
argument_list|)
return|;
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|loadComponentClass
parameter_list|(
name|String
name|componentType
parameter_list|)
block|{
try|try
block|{
return|return
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|componentType
argument_list|,
name|getClass
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Unable to load component type class "
operator|+
name|componentType
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|setType
parameter_list|(
name|TypeClassInfo
name|info
parameter_list|,
name|Element
name|parameter
parameter_list|)
block|{
name|String
name|type
init|=
name|DOMUtils
operator|.
name|getAttributeValueEmptyNull
argument_list|(
name|parameter
argument_list|,
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|aegisTypeClass
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|type
argument_list|,
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|setAegisTypeClass
argument_list|(
name|Java5TypeCreator
operator|.
name|castToAegisTypeClass
argument_list|(
name|aegisTypeClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Unable to load type class "
operator|+
name|type
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|Element
name|getBestMatch
parameter_list|(
name|Element
name|mapping
parameter_list|,
name|Method
name|method
parameter_list|,
name|List
argument_list|<
name|Element
argument_list|>
name|availableNodes
parameter_list|)
block|{
comment|// first find all the matching method names
name|List
argument_list|<
name|Element
argument_list|>
name|nodes
init|=
name|getMatches
argument_list|(
name|mapping
argument_list|,
literal|"./method[@name='"
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"']"
argument_list|)
decl_stmt|;
comment|// remove the ones that aren't in our acceptable set, if one is
comment|// specified
if|if
condition|(
name|availableNodes
operator|!=
literal|null
condition|)
block|{
name|nodes
operator|.
name|retainAll
argument_list|(
name|availableNodes
argument_list|)
expr_stmt|;
block|}
comment|// no name found, so no matches
if|if
condition|(
name|nodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// if the method has no params, then more than one mapping is pointless
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|parameterTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameterTypes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|// here's the fun part.
comment|// we go through the method parameters, ruling out matches
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameterTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
init|=
name|parameterTypes
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|iterator
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// first we check if the parameter index is specified
name|Element
name|match
init|=
name|getMatch
argument_list|(
name|element
argument_list|,
literal|"parameter[@index='"
operator|+
name|i
operator|+
literal|"']"
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|!=
literal|null
comment|// we check if the type is specified and matches
operator|&&
name|DOMUtils
operator|.
name|getAttributeValueEmptyNull
argument_list|(
name|match
argument_list|,
literal|"class"
argument_list|)
operator|!=
literal|null
comment|// if it doesn't match, then we can definitely rule out
comment|// this result
operator|&&
operator|!
name|DOMUtils
operator|.
name|getAttributeValueEmptyNull
argument_list|(
name|match
argument_list|,
literal|"class"
argument_list|)
operator|.
name|equals
argument_list|(
name|parameterType
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// if we have just one node left, then it has to be the best match
if|if
condition|(
name|nodes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|// all remaining definitions could apply, so we need to now pick the
comment|// best one
comment|// the best one is the one with the most parameters specified
name|Element
name|bestCandidate
init|=
literal|null
decl_stmt|;
name|int
name|highestSpecified
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|iterator
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|params
init|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|element
argument_list|,
literal|""
argument_list|,
literal|"parameter"
argument_list|)
decl_stmt|;
name|int
name|availableParameters
init|=
name|params
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|availableParameters
operator|>
name|highestSpecified
condition|)
block|{
name|bestCandidate
operator|=
name|element
expr_stmt|;
name|highestSpecified
operator|=
name|availableParameters
expr_stmt|;
block|}
block|}
return|return
name|bestCandidate
return|;
block|}
specifier|private
name|Element
name|getMatch
parameter_list|(
name|Node
name|doc
parameter_list|,
name|String
name|xpath
parameter_list|)
block|{
return|return
operator|(
name|Element
operator|)
name|getXPathUtils
argument_list|()
operator|.
name|getValue
argument_list|(
name|xpath
argument_list|,
name|doc
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Element
argument_list|>
name|getMatches
parameter_list|(
name|Node
name|doc
parameter_list|,
name|String
name|xpath
parameter_list|)
block|{
name|NodeList
name|nl
init|=
operator|(
name|NodeList
operator|)
name|getXPathUtils
argument_list|()
operator|.
name|getValue
argument_list|(
name|xpath
argument_list|,
name|doc
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|nl
operator|.
name|getLength
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|r
operator|.
name|add
argument_list|(
operator|(
name|Element
operator|)
name|nl
operator|.
name|item
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
comment|/**      * Creates a QName from a string, such as "ns:Element".      */
specifier|protected
name|QName
name|createQName
parameter_list|(
name|Element
name|e
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|index
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|getTypeMapping
argument_list|()
operator|.
name|getMappingIdentifierURI
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
name|String
name|prefix
init|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|String
name|localName
init|=
name|value
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|ns
init|=
name|DOMUtils
operator|.
name|getNamespace
argument_list|(
name|e
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
operator|||
name|localName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DatabindingException
argument_list|(
literal|"Invalid QName in mapping: "
operator|+
name|value
argument_list|)
throw|;
block|}
return|return
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|localName
argument_list|,
name|prefix
argument_list|)
return|;
block|}
block|}
end_class

end_unit

