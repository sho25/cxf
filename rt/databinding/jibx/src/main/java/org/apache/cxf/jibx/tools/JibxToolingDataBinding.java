begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jibx
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|WSDLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|factory
operator|.
name|WSDLFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|xml
operator|.
name|WSDLReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ClassUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|DefaultValueWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|ClassCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|URIParserUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|core
operator|.
name|DataBindingProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|binding
operator|.
name|Compile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|binding
operator|.
name|Utility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|binding
operator|.
name|model
operator|.
name|BindingElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|binding
operator|.
name|model
operator|.
name|BindingHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|binding
operator|.
name|model
operator|.
name|BindingOrganizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|binding
operator|.
name|model
operator|.
name|BindingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|binding
operator|.
name|model
operator|.
name|MappingElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|binding
operator|.
name|model
operator|.
name|ModelVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|binding
operator|.
name|model
operator|.
name|NamespaceElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|binding
operator|.
name|model
operator|.
name|TreeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|binding
operator|.
name|model
operator|.
name|ValueElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|JiBXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|schema
operator|.
name|codegen
operator|.
name|CodeGen
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|schema
operator|.
name|codegen
operator|.
name|PackageHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|schema
operator|.
name|codegen
operator|.
name|PackageOrganizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|schema
operator|.
name|codegen
operator|.
name|StringObjectPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|schema
operator|.
name|codegen
operator|.
name|custom
operator|.
name|SchemaCustom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|schema
operator|.
name|codegen
operator|.
name|custom
operator|.
name|SchemasetCustom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|schema
operator|.
name|validation
operator|.
name|ProblemMultiHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|util
operator|.
name|DummyClassLocator
import|;
end_import

begin_class
specifier|public
class|class
name|JibxToolingDataBinding
implements|implements
name|DataBindingProfile
block|{
specifier|private
name|JibxToolingProblemHandler
name|problemHandler
init|=
operator|new
name|JibxToolingProblemHandler
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|schemaMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|JibxSchemaResolver
argument_list|>
name|resolvers
init|=
operator|new
name|ArrayList
argument_list|<
name|JibxSchemaResolver
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|QName
argument_list|,
name|MappingElement
argument_list|>
name|types
init|=
operator|new
name|HashMap
argument_list|<
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|QName
argument_list|,
name|MappingElement
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|QName
argument_list|,
name|MappingElement
argument_list|>
name|elements
init|=
operator|new
name|HashMap
argument_list|<
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|QName
argument_list|,
name|MappingElement
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|DefaultValueWriter
name|createDefaultValueWriter
parameter_list|(
name|QName
name|qn
parameter_list|,
name|boolean
name|element
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|DefaultValueWriter
name|createDefaultValueWriterForWrappedElement
parameter_list|(
name|QName
name|wrapperElement
parameter_list|,
name|QName
name|qn
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|generate
parameter_list|(
name|ToolContext
name|context
parameter_list|)
throws|throws
name|ToolException
block|{
try|try
block|{
name|JiBXCodeGen
name|codegen
init|=
operator|new
name|JiBXCodeGen
argument_list|()
decl_stmt|;
name|ProblemMultiHandler
name|handler
init|=
operator|new
name|ProblemMultiHandler
argument_list|()
decl_stmt|;
name|handler
operator|.
name|addHandler
argument_list|(
name|problemHandler
argument_list|)
expr_stmt|;
name|codegen
operator|.
name|setProblemHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
comment|// Setting the source (or the output) directory
name|String
name|sourcePath
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_OUTPUTDIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourcePath
operator|==
literal|null
condition|)
block|{
name|sourcePath
operator|=
operator|(
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
name|File
name|generatePath
init|=
operator|new
name|File
argument_list|(
name|sourcePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|generatePath
operator|.
name|exists
argument_list|()
condition|)
block|{
name|generatePath
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
name|codegen
operator|.
name|setGeneratePath
argument_list|(
name|generatePath
argument_list|)
expr_stmt|;
name|String
name|wsdlUrl
init|=
name|URIParserUtil
operator|.
name|getAbsoluteURI
argument_list|(
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_WSDLURL
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|wsdlUrl
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|wsdlUrl
operator|=
name|wsdlUrl
operator|.
name|substring
argument_list|(
name|wsdlUrl
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsdlUrl
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".wsdl"
argument_list|)
condition|)
block|{
name|wsdlUrl
operator|=
name|wsdlUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|wsdlUrl
operator|.
name|length
argument_list|()
operator|-
literal|5
argument_list|)
expr_stmt|;
block|}
name|wsdlUrl
operator|+=
literal|".xml"
expr_stmt|;
name|File
name|jibxDir
init|=
operator|new
name|File
argument_list|(
name|generatePath
argument_list|,
literal|"jibx_bindings/"
argument_list|)
decl_stmt|;
name|jibxDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|codegen
operator|.
name|setBindingName
argument_list|(
literal|"jibx_bindings/"
operator|+
name|wsdlUrl
argument_list|)
expr_stmt|;
name|String
name|classPath
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_CLASSDIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|classPath
operator|==
literal|null
condition|)
block|{
name|classPath
operator|=
operator|(
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
name|File
name|compilePath
init|=
operator|new
name|File
argument_list|(
name|classPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|compilePath
operator|.
name|exists
argument_list|()
condition|)
block|{
name|compilePath
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
name|codegen
operator|.
name|setCompilePath
argument_list|(
name|compilePath
argument_list|)
expr_stmt|;
comment|// Set schema resolver list
name|codegen
operator|.
name|setFileset
argument_list|(
name|resolvers
argument_list|)
expr_stmt|;
comment|// Set Customization
name|String
index|[]
name|bindingFiles
init|=
operator|(
name|String
index|[]
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_BINDING
argument_list|)
decl_stmt|;
name|SchemasetCustom
name|customRoot
decl_stmt|;
if|if
condition|(
name|bindingFiles
operator|==
literal|null
operator|||
name|bindingFiles
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|customRoot
operator|=
name|defaultSchemasetCustom
argument_list|(
name|schemaMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|customRoot
operator|=
name|SchemasetCustom
operator|.
name|loadCustomizations
argument_list|(
name|bindingFiles
index|[
literal|0
index|]
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
comment|// force to retrain types information in the generated binding model
name|forceTypes
argument_list|(
name|customRoot
argument_list|)
expr_stmt|;
name|codegen
operator|.
name|setCustomRoot
argument_list|(
name|customRoot
argument_list|)
expr_stmt|;
name|codegen
operator|.
name|generate
argument_list|()
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_COMPILE
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_SOURCEDIR
argument_list|)
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_SOURCEDIR
argument_list|,
name|generatePath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_CLASSDIR
argument_list|)
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_CLASSDIR
argument_list|,
name|compilePath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ClassCollector
name|collector
init|=
operator|new
name|ClassCollector
argument_list|()
decl_stmt|;
name|addGeneratedSourceFiles
argument_list|(
name|codegen
operator|.
name|getPackageOrganizer
argument_list|()
argument_list|,
name|collector
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
name|ClassCollector
operator|.
name|class
argument_list|,
name|collector
argument_list|)
expr_stmt|;
comment|// compile generated source files
operator|(
operator|new
name|ClassUtils
argument_list|()
operator|)
operator|.
name|compile
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// jibx binding compiler
name|codegen
operator|.
name|compile
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|formats
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|BindingUtils
operator|.
name|getDefinitions
argument_list|(
name|codegen
operator|.
name|getRootBinding
argument_list|()
argument_list|,
name|types
argument_list|,
name|elements
argument_list|,
name|formats
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|codegen
operator|.
name|getBindingOrganizer
argument_list|()
operator|.
name|iterateBindings
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BindingHolder
name|o
init|=
operator|(
name|BindingHolder
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|getDefinitions
argument_list|(
name|o
argument_list|,
name|types
argument_list|,
name|elements
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|problemHandler
operator|.
name|handleSevere
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|getDefinitions
parameter_list|(
specifier|final
name|BindingHolder
name|holder
parameter_list|,
specifier|final
name|Map
argument_list|<
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|QName
argument_list|,
name|MappingElement
argument_list|>
name|types
parameter_list|,
specifier|final
name|Map
argument_list|<
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|QName
argument_list|,
name|MappingElement
argument_list|>
name|elems
parameter_list|)
block|{
name|TreeContext
name|ctx
init|=
operator|new
name|TreeContext
argument_list|(
operator|new
name|DummyClassLocator
argument_list|()
argument_list|)
decl_stmt|;
name|ModelVisitor
name|visitor
init|=
operator|new
name|ModelVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|visit
parameter_list|(
name|MappingElement
name|mapping
parameter_list|)
block|{
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|QName
name|qname
init|=
name|mapping
operator|.
name|getTypeQName
argument_list|()
decl_stmt|;
if|if
condition|(
name|qname
operator|!=
literal|null
condition|)
block|{
name|types
operator|.
name|put
argument_list|(
name|qname
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|mapping
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|NamespaceElement
name|ns
init|=
name|mapping
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
condition|)
block|{
name|qname
operator|=
operator|new
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|QName
argument_list|(
name|holder
operator|.
name|getElementDefaultNamespace
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qname
operator|=
operator|new
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|QName
argument_list|(
name|mapping
operator|.
name|getNamespace
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|elems
operator|.
name|put
argument_list|(
name|qname
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|ctx
operator|.
name|tourTree
argument_list|(
name|holder
operator|.
name|getBinding
argument_list|()
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getType
parameter_list|(
name|QName
name|qn
parameter_list|,
name|boolean
name|element
parameter_list|)
block|{
name|MappingElement
name|mappingElement
init|=
name|element
condition|?
name|elements
operator|.
name|get
argument_list|(
name|jibxQName
argument_list|(
name|qn
argument_list|)
argument_list|)
else|:
name|types
operator|.
name|get
argument_list|(
name|jibxQName
argument_list|(
name|qn
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|mappingElement
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|mappingElement
operator|.
name|getClassName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getWrappedElementType
parameter_list|(
name|QName
name|wrapperElement
parameter_list|,
name|QName
name|item
parameter_list|)
block|{
name|MappingElement
name|mappingElement
init|=
name|elements
operator|.
name|get
argument_list|(
name|jibxQName
argument_list|(
name|wrapperElement
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|mappingElement
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|itemType
argument_list|(
name|mappingElement
argument_list|,
name|item
argument_list|)
return|;
block|}
specifier|public
name|void
name|initialize
parameter_list|(
name|ToolContext
name|context
parameter_list|)
throws|throws
name|ToolException
block|{
name|context
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|RUNTIME_DATABINDING_CLASS
argument_list|,
literal|"org.apache.cxf.jibx.JibxDataBinding.class"
argument_list|)
expr_stmt|;
name|String
name|wsdlUrl
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_WSDLURL
argument_list|)
decl_stmt|;
name|initializeJiBXCodeGenerator
argument_list|(
name|wsdlUrl
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initializeJiBXCodeGenerator
parameter_list|(
name|String
name|wsdlUrl
parameter_list|)
block|{
try|try
block|{
name|loadWsdl
argument_list|(
name|wsdlUrl
argument_list|,
name|this
operator|.
name|schemaMap
argument_list|,
name|this
operator|.
name|resolvers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSDLException
name|e
parameter_list|)
block|{
name|problemHandler
operator|.
name|handleSevere
argument_list|(
literal|"Error in loading wsdl file at :"
operator|+
name|wsdlUrl
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|loadWsdl
parameter_list|(
name|String
name|wsdlUrl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|schemaMap
parameter_list|,
name|List
argument_list|<
name|JibxSchemaResolver
argument_list|>
name|resolvers
parameter_list|)
throws|throws
name|WSDLException
block|{
name|WSDLFactory
name|factory
init|=
name|WSDLFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|WSDLReader
name|reader
init|=
name|factory
operator|.
name|newWSDLReader
argument_list|()
decl_stmt|;
name|Definition
name|parentDef
init|=
name|reader
operator|.
name|readWSDL
argument_list|(
name|wsdlUrl
argument_list|)
decl_stmt|;
name|JibxSchemaHelper
name|util
init|=
operator|new
name|JibxSchemaHelper
argument_list|(
name|BusFactory
operator|.
name|getDefaultBus
argument_list|()
argument_list|,
name|schemaMap
argument_list|)
decl_stmt|;
name|util
operator|.
name|getSchemas
argument_list|(
name|parentDef
argument_list|,
operator|new
name|SchemaCollection
argument_list|()
argument_list|,
name|resolvers
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|QName
name|jibxQName
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
return|return
operator|new
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|QName
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|itemType
parameter_list|(
name|MappingElement
name|mappingElement
parameter_list|,
name|QName
name|qName
parameter_list|)
block|{
name|String
name|localPart
init|=
name|qName
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|childIterator
init|=
name|mappingElement
operator|.
name|childIterator
argument_list|()
init|;
name|childIterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|child
init|=
name|childIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|instanceof
name|ValueElement
condition|)
block|{
name|ValueElement
name|valueElement
init|=
operator|(
name|ValueElement
operator|)
name|child
decl_stmt|;
if|if
condition|(
name|localPart
operator|.
name|equals
argument_list|(
name|valueElement
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|valueElement
operator|.
name|getDeclaredType
argument_list|()
return|;
block|}
block|}
comment|// TODO
comment|/*              * else if (child instanceof ) { .. } else if () { .. }              */
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|SchemasetCustom
name|defaultSchemasetCustom
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|smap
parameter_list|)
block|{
name|SchemasetCustom
name|customRoot
init|=
operator|new
name|SchemasetCustom
argument_list|(
operator|(
name|SchemasetCustom
operator|)
literal|null
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|schemaIds
init|=
name|smap
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|schemaId
range|:
name|schemaIds
control|)
block|{
name|SchemaCustom
name|schemaCustom
init|=
operator|new
name|SchemaCustom
argument_list|(
name|customRoot
argument_list|)
decl_stmt|;
name|schemaCustom
operator|.
name|setName
argument_list|(
name|schemaId
argument_list|)
expr_stmt|;
name|schemaCustom
operator|.
name|setForceTypes
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|schemaCustom
operator|.
name|setNamespace
argument_list|(
name|smap
operator|.
name|get
argument_list|(
name|schemaId
argument_list|)
operator|.
name|getAttribute
argument_list|(
literal|"targetNamespace"
argument_list|)
argument_list|)
expr_stmt|;
name|customRoot
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|schemaCustom
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|JibxSchemaResolver
name|r
range|:
name|resolvers
control|)
block|{
if|if
condition|(
operator|!
name|schemaIds
operator|.
name|contains
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|SchemaCustom
name|schemaCustom
init|=
operator|new
name|SchemaCustom
argument_list|(
name|customRoot
argument_list|)
decl_stmt|;
name|schemaCustom
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|schemaCustom
operator|.
name|setNamespace
argument_list|(
name|r
operator|.
name|getElement
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"targetNamespace"
argument_list|)
argument_list|)
expr_stmt|;
name|schemaCustom
operator|.
name|setForceTypes
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|customRoot
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|schemaCustom
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|customRoot
return|;
block|}
specifier|private
specifier|static
name|void
name|forceTypes
parameter_list|(
name|SchemasetCustom
name|customRoot
parameter_list|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|children
init|=
name|customRoot
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|child
range|:
name|children
control|)
block|{
name|SchemaCustom
name|schemaCustom
init|=
operator|(
name|SchemaCustom
operator|)
name|child
decl_stmt|;
name|schemaCustom
operator|.
name|setForceTypes
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addGeneratedSourceFiles
parameter_list|(
name|PackageOrganizer
name|o
parameter_list|,
name|ClassCollector
name|collector
parameter_list|)
block|{
name|List
argument_list|<
name|PackageHolder
argument_list|>
name|packages
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|o
operator|.
name|getPackages
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PackageHolder
name|pkgHolder
range|:
name|packages
control|)
block|{
if|if
condition|(
name|pkgHolder
operator|.
name|getTopClassCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|pkgName
init|=
name|pkgHolder
operator|.
name|getName
argument_list|()
decl_stmt|;
name|StringObjectPair
index|[]
name|classFields
init|=
name|pkgHolder
operator|.
name|getClassFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|fullname
init|=
name|classFields
index|[
name|i
index|]
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|fullname
operator|.
name|contains
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
comment|// CHECK
continue|continue;
block|}
name|collector
operator|.
name|addTypesClassName
argument_list|(
name|pkgName
argument_list|,
name|fullname
operator|.
name|replace
argument_list|(
name|pkgName
argument_list|,
literal|""
argument_list|)
argument_list|,
name|fullname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * A helper class to manage JiBX specific code generation parameters and initiate code generation. Every      * member variable is a parameter for JiBX code generator and carries a default value in case it is not      * set by CXF code generator framework.      */
specifier|static
class|class
name|JiBXCodeGen
block|{
specifier|private
name|ProblemMultiHandler
name|problemHandler
decl_stmt|;
specifier|private
name|SchemasetCustom
name|customRoot
decl_stmt|;
specifier|private
name|URL
name|schemaRoot
decl_stmt|;
specifier|private
name|File
name|generatePath
decl_stmt|;
specifier|private
name|boolean
name|verbose
decl_stmt|;
specifier|private
name|String
name|usingNamespace
decl_stmt|;
specifier|private
name|String
name|nonamespacePackage
decl_stmt|;
specifier|private
name|String
name|bindingName
init|=
literal|"binding"
decl_stmt|;
specifier|private
name|List
argument_list|<
name|?
argument_list|>
name|fileset
decl_stmt|;
specifier|private
name|List
argument_list|<
name|?
argument_list|>
name|includePaths
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|File
name|modelFile
decl_stmt|;
specifier|private
name|BindingElement
name|rootBinding
decl_stmt|;
specifier|private
name|File
name|compilePath
decl_stmt|;
specifier|private
name|PackageOrganizer
name|packageOrganizer
decl_stmt|;
specifier|private
name|BindingOrganizer
name|bindingOrganizer
decl_stmt|;
specifier|public
name|void
name|setProblemHandler
parameter_list|(
name|ProblemMultiHandler
name|problemHandler
parameter_list|)
block|{
name|this
operator|.
name|problemHandler
operator|=
name|problemHandler
expr_stmt|;
block|}
specifier|public
name|BindingOrganizer
name|getBindingOrganizer
parameter_list|()
block|{
return|return
name|bindingOrganizer
return|;
block|}
specifier|public
name|void
name|setCustomRoot
parameter_list|(
name|SchemasetCustom
name|customRoot
parameter_list|)
block|{
name|this
operator|.
name|customRoot
operator|=
name|customRoot
expr_stmt|;
block|}
specifier|public
name|void
name|setSchemaRoot
parameter_list|(
name|URL
name|schemaRoot
parameter_list|)
block|{
name|this
operator|.
name|schemaRoot
operator|=
name|schemaRoot
expr_stmt|;
block|}
specifier|public
name|void
name|setGeneratePath
parameter_list|(
name|File
name|generatePath
parameter_list|)
block|{
name|this
operator|.
name|generatePath
operator|=
name|generatePath
expr_stmt|;
block|}
specifier|public
name|void
name|setVerbose
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
specifier|public
name|void
name|setUsingNamespace
parameter_list|(
name|String
name|usingNamespace
parameter_list|)
block|{
name|this
operator|.
name|usingNamespace
operator|=
name|usingNamespace
expr_stmt|;
block|}
specifier|public
name|void
name|setNonamespacePackage
parameter_list|(
name|String
name|nonamespacePackage
parameter_list|)
block|{
name|this
operator|.
name|nonamespacePackage
operator|=
name|nonamespacePackage
expr_stmt|;
block|}
specifier|public
name|void
name|setBindingName
parameter_list|(
name|String
name|bindingName
parameter_list|)
block|{
name|this
operator|.
name|bindingName
operator|=
name|bindingName
expr_stmt|;
block|}
specifier|public
name|void
name|setFileset
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|fileset
parameter_list|)
block|{
name|this
operator|.
name|fileset
operator|=
name|fileset
expr_stmt|;
block|}
specifier|public
name|void
name|setIncludePaths
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|includePaths
parameter_list|)
block|{
name|this
operator|.
name|includePaths
operator|=
name|includePaths
expr_stmt|;
block|}
specifier|public
name|void
name|setModelFile
parameter_list|(
name|File
name|modelFile
parameter_list|)
block|{
name|this
operator|.
name|modelFile
operator|=
name|modelFile
expr_stmt|;
block|}
comment|/**          * Returns the {@link BindingElement} instance that contains binding information of generated code.          * Hence it is<strong>only meaningful<strong> after executing {@link #generate()} method.          *           * @return the binding element instance that contains binding info of generated code          */
specifier|public
name|BindingElement
name|getRootBinding
parameter_list|()
block|{
return|return
name|rootBinding
return|;
block|}
specifier|public
name|PackageOrganizer
name|getPackageOrganizer
parameter_list|()
block|{
return|return
name|packageOrganizer
return|;
block|}
specifier|public
name|void
name|setCompilePath
parameter_list|(
name|File
name|compilePath
parameter_list|)
block|{
name|this
operator|.
name|compilePath
operator|=
name|compilePath
expr_stmt|;
block|}
comment|/**          * Generates code based on parameters set. Once the code is generated {@link #rootBinding} is set          * which can be retrieved by {@link #getRootBinding()}          *           * @throws JiBXException if thrown by JiBX code generator          * @throws IOException if thrown by JiBX code generator          */
specifier|public
name|void
name|generate
parameter_list|()
throws|throws
name|JiBXException
throws|,
name|IOException
block|{
name|CodeGen
name|codegen
init|=
operator|new
name|CodeGen
argument_list|(
name|customRoot
argument_list|,
name|schemaRoot
argument_list|,
name|generatePath
argument_list|)
decl_stmt|;
name|codegen
operator|.
name|generate
argument_list|(
name|verbose
argument_list|,
name|usingNamespace
argument_list|,
name|nonamespacePackage
argument_list|,
name|bindingName
argument_list|,
name|fileset
argument_list|,
name|includePaths
argument_list|,
name|modelFile
argument_list|,
name|problemHandler
argument_list|)
expr_stmt|;
name|setPostGenerateInfo
argument_list|(
name|codegen
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|compile
parameter_list|()
throws|throws
name|JiBXException
block|{
name|Compile
name|compiler
init|=
operator|new
name|Compile
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|generatePath
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|+
name|File
operator|.
name|separator
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|clsPath
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|clsPath
operator|.
name|add
argument_list|(
name|compilePath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|clsPath
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Utility
operator|.
name|getClassPaths
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|clsPathSet
init|=
name|clsPath
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|clsPath
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|String
index|[]
name|bindingSet
init|=
operator|new
name|String
index|[]
block|{
name|path
operator|+
name|bindingName
operator|+
literal|".xml"
block|}
decl_stmt|;
name|compiler
operator|.
name|compile
argument_list|(
name|clsPathSet
argument_list|,
name|bindingSet
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setPostGenerateInfo
parameter_list|(
name|CodeGen
name|codegen
parameter_list|)
block|{
name|this
operator|.
name|bindingOrganizer
operator|=
name|codegen
operator|.
name|getBindingDirectory
argument_list|()
expr_stmt|;
name|this
operator|.
name|rootBinding
operator|=
name|codegen
operator|.
name|getRootBinding
argument_list|()
expr_stmt|;
name|this
operator|.
name|packageOrganizer
operator|=
name|codegen
operator|.
name|getPackageDirectory
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

