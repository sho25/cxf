begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jibx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|BindingDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|IBindingFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|IMarshallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|IMarshallingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|JiBXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|impl
operator|.
name|StAXWriter
import|;
end_import

begin_class
specifier|public
class|class
name|JibxDataWriter
implements|implements
name|DataWriter
argument_list|<
name|XMLStreamWriter
argument_list|>
block|{
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|obj
parameter_list|,
name|XMLStreamWriter
name|output
parameter_list|)
block|{     }
specifier|public
name|void
name|write
parameter_list|(
name|Object
name|obj
parameter_list|,
name|MessagePartInfo
name|part
parameter_list|,
name|XMLStreamWriter
name|output
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|jtype
init|=
name|part
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
name|QName
name|stype
init|=
name|part
operator|.
name|getTypeQName
argument_list|()
decl_stmt|;
if|if
condition|(
name|JibxSimpleTypes
operator|.
name|isSimpleType
argument_list|(
name|jtype
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|pfx
init|=
name|output
operator|.
name|getPrefix
argument_list|(
name|part
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|pfx
argument_list|)
condition|)
block|{
name|output
operator|.
name|writeStartElement
argument_list|(
literal|"tns"
argument_list|,
name|part
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|part
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeNamespace
argument_list|(
literal|"tns"
argument_list|,
name|part
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|writeStartElement
argument_list|(
name|pfx
argument_list|,
name|part
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|part
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|writeCharacters
argument_list|(
name|JibxSimpleTypes
operator|.
name|toText
argument_list|(
name|stype
argument_list|,
name|obj
argument_list|)
argument_list|)
expr_stmt|;
name|output
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|IBindingFactory
name|factory
init|=
name|BindingDirectory
operator|.
name|getFactory
argument_list|(
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|IMarshallingContext
name|ctx
init|=
name|getMarshallingContext
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|StAXWriter
name|writer
init|=
operator|new
name|StAXWriter
argument_list|(
name|factory
operator|.
name|getNamespaces
argument_list|()
argument_list|,
name|output
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setXmlWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
operator|(
operator|(
name|IMarshallable
operator|)
name|obj
operator|)
operator|.
name|marshal
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|setAttachments
parameter_list|(
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|attachments
parameter_list|)
block|{     }
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{     }
specifier|public
name|void
name|setSchema
parameter_list|(
name|Schema
name|s
parameter_list|)
block|{     }
specifier|private
name|IMarshallingContext
name|getMarshallingContext
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|JiBXException
block|{
name|IBindingFactory
name|factory
init|=
name|BindingDirectory
operator|.
name|getFactory
argument_list|(
name|object
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|factory
operator|.
name|createMarshallingContext
argument_list|()
return|;
block|}
block|}
end_class

end_unit

