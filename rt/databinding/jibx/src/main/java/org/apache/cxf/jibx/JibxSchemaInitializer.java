begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jibx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|ServiceModelVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|BindingDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|IBindingFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|JiBXException
import|;
end_import

begin_class
specifier|public
class|class
name|JibxSchemaInitializer
extends|extends
name|ServiceModelVisitor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|JibxSchemaInitializer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SchemaCollection
name|schemas
decl_stmt|;
specifier|public
name|JibxSchemaInitializer
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|,
name|SchemaCollection
name|schemas
parameter_list|,
name|JibxDataBinding
name|databinding
parameter_list|)
block|{
name|super
argument_list|(
name|serviceInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|schemas
operator|=
name|schemas
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|begin
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{
name|LOG
operator|.
name|finest
argument_list|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check to see if the WSDL information has been filled in for us.
if|if
condition|(
name|part
operator|.
name|getTypeQName
argument_list|()
operator|!=
literal|null
operator|||
name|part
operator|.
name|getElementQName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|checkForExistence
argument_list|(
name|part
argument_list|)
expr_stmt|;
return|return;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|part
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|isFromWrapper
init|=
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|isUnwrapped
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFromWrapper
operator|&&
name|clazz
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|Byte
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|clazz
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
block|}
name|mapClass
argument_list|(
name|part
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkForExistence
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{
name|QName
name|qn
init|=
name|part
operator|.
name|getElementQName
argument_list|()
decl_stmt|;
if|if
condition|(
name|qn
operator|!=
literal|null
condition|)
block|{
name|XmlSchemaElement
name|el
init|=
name|schemas
operator|.
name|getElementByQName
argument_list|(
name|qn
argument_list|)
decl_stmt|;
if|if
condition|(
name|el
operator|==
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|part
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|isFromWrapper
init|=
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|isUnwrapped
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFromWrapper
operator|&&
name|clazz
operator|.
name|isArray
argument_list|()
operator|&&
operator|!
name|Byte
operator|.
name|TYPE
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getComponentType
argument_list|()
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|clazz
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
block|}
name|mapClass
argument_list|(
name|part
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|mapClass
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|JibxSimpleTypes
operator|.
name|isSimpleType
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|QName
name|schemaType
init|=
name|JibxSimpleTypes
operator|.
name|schemaType
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|part
operator|.
name|setTypeQName
argument_list|(
name|schemaType
argument_list|)
expr_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|schemaType
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|IBindingFactory
name|factory
init|=
name|BindingDirectory
operator|.
name|getFactory
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|String
index|[]
index|[]
name|abstractMappings
init|=
name|factory
operator|.
name|getAbstractMappings
argument_list|()
decl_stmt|;
name|String
name|stype
init|=
name|abstractMappings
index|[
literal|0
index|]
index|[
literal|0
index|]
decl_stmt|;
name|QName
name|qName
init|=
name|JibxSimpleTypes
operator|.
name|toQname
argument_list|(
name|stype
argument_list|)
decl_stmt|;
name|XmlSchema
name|schema
init|=
name|schemas
operator|.
name|getSchemaForElement
argument_list|(
name|qName
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
comment|// needs to handle element is a Global element case
name|XmlSchemaElement
name|element
init|=
name|schema
operator|.
name|getElementByName
argument_list|(
name|qName
argument_list|)
decl_stmt|;
name|part
operator|.
name|setXmlSchema
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|qName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setConcreteName
argument_list|(
name|qName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO : throw an exception ?
block|}
block|}
catch|catch
parameter_list|(
name|JiBXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

