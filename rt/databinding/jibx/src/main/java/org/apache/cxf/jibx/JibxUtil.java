begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jibx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|Utility
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JibxUtil
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SCHEMA_NAMESPACE
init|=
literal|"http://www.w3.org/2001/XMLSchema"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|STRING_QNAME
init|=
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"string"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|QName
argument_list|>
name|simpleObjectTypeMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|QName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|QName
argument_list|>
name|simplePrimitiveTypeMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|QName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|simpleWrapperMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|QName
argument_list|,
name|Format
argument_list|>
name|simpleTypeMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Format
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|Utility
argument_list|>
name|UTILITY
init|=
name|org
operator|.
name|jibx
operator|.
name|runtime
operator|.
name|Utility
operator|.
name|class
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|String
argument_list|>
name|INPUT_TYPE
init|=
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|class
decl_stmt|;
static|static
block|{
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"java.lang.Boolean"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"boolean"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"java.lang.Byte"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"byte"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"java.lang.Character"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"unsignedInt"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"java.lang.Double"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"double"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"java.lang.Float"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"float"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"java.lang.Integer"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"java.lang.Long"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"long"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"java.lang.Short"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"short"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"java.lang.String"
argument_list|,
name|STRING_QNAME
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"java.math.BigDecimal"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"decimal"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"java.math.BigInteger"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"integer"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"java.util.Date"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"dateTime"
argument_list|)
argument_list|)
expr_stmt|;
comment|// #!j2me{
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"java.sql.Date"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"date"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"java.sql.Time"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"time"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"java.sql.Timestamp"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"dateTime"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"org.joda.time.LocalDate"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"date"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"org.joda.time.DateMidnight"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"date"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"org.joda.time.LocalTime"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"time"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"org.joda.time.DateTime"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"dateTime"
argument_list|)
argument_list|)
expr_stmt|;
comment|// #j2me}
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"byte[]"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"base64"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleObjectTypeMap
operator|.
name|put
argument_list|(
literal|"org.jibx.runtime.QName"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"QName"
argument_list|)
argument_list|)
expr_stmt|;
name|simplePrimitiveTypeMap
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"boolean"
argument_list|)
argument_list|)
expr_stmt|;
name|simplePrimitiveTypeMap
operator|.
name|put
argument_list|(
literal|"byte"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"byte"
argument_list|)
argument_list|)
expr_stmt|;
name|simplePrimitiveTypeMap
operator|.
name|put
argument_list|(
literal|"char"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"unsignedInt"
argument_list|)
argument_list|)
expr_stmt|;
name|simplePrimitiveTypeMap
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"double"
argument_list|)
argument_list|)
expr_stmt|;
name|simplePrimitiveTypeMap
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"float"
argument_list|)
argument_list|)
expr_stmt|;
name|simplePrimitiveTypeMap
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|simplePrimitiveTypeMap
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"long"
argument_list|)
argument_list|)
expr_stmt|;
name|simplePrimitiveTypeMap
operator|.
name|put
argument_list|(
literal|"short"
argument_list|,
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
literal|"short"
argument_list|)
argument_list|)
expr_stmt|;
name|simpleWrapperMap
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|simpleWrapperMap
operator|.
name|put
argument_list|(
literal|"byte"
argument_list|,
name|Byte
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|simpleWrapperMap
operator|.
name|put
argument_list|(
literal|"char"
argument_list|,
name|Character
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|simpleWrapperMap
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
name|Double
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|simpleWrapperMap
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
name|Float
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|simpleWrapperMap
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|simpleWrapperMap
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
name|Long
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|simpleWrapperMap
operator|.
name|put
argument_list|(
literal|"short"
argument_list|,
name|Short
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|buildFormat
argument_list|(
literal|"byte"
argument_list|,
literal|"byte"
argument_list|,
literal|"serializeByte"
argument_list|,
literal|"parseByte"
argument_list|,
literal|"0"
argument_list|,
name|simpleTypeMap
argument_list|)
expr_stmt|;
name|buildFormat
argument_list|(
literal|"unsignedShort"
argument_list|,
literal|"char"
argument_list|,
literal|"serializeChar"
argument_list|,
literal|"parseChar"
argument_list|,
literal|"0"
argument_list|,
name|simpleTypeMap
argument_list|)
expr_stmt|;
name|buildFormat
argument_list|(
literal|"double"
argument_list|,
literal|"double"
argument_list|,
literal|"serializeDouble"
argument_list|,
literal|"parseDouble"
argument_list|,
literal|"0.0"
argument_list|,
name|simpleTypeMap
argument_list|)
expr_stmt|;
name|buildFormat
argument_list|(
literal|"float"
argument_list|,
literal|"float"
argument_list|,
literal|"serializeFloat"
argument_list|,
literal|"parseFloat"
argument_list|,
literal|"0.0"
argument_list|,
name|simpleTypeMap
argument_list|)
expr_stmt|;
name|buildFormat
argument_list|(
literal|"int"
argument_list|,
literal|"int"
argument_list|,
literal|"serializeInt"
argument_list|,
literal|"parseInt"
argument_list|,
literal|"0"
argument_list|,
name|simpleTypeMap
argument_list|)
expr_stmt|;
name|buildFormat
argument_list|(
literal|"long"
argument_list|,
literal|"long"
argument_list|,
literal|"serializeLong"
argument_list|,
literal|"parseLong"
argument_list|,
literal|"0"
argument_list|,
name|simpleTypeMap
argument_list|)
expr_stmt|;
name|buildFormat
argument_list|(
literal|"short"
argument_list|,
literal|"short"
argument_list|,
literal|"serializeShort"
argument_list|,
literal|"parseShort"
argument_list|,
literal|"0"
argument_list|,
name|simpleTypeMap
argument_list|)
expr_stmt|;
name|buildFormat
argument_list|(
literal|"boolean"
argument_list|,
literal|"boolean"
argument_list|,
literal|"serializeBoolean"
argument_list|,
literal|"parseBoolean"
argument_list|,
literal|"false"
argument_list|,
name|simpleTypeMap
argument_list|)
expr_stmt|;
name|buildFormat
argument_list|(
literal|"dateTime"
argument_list|,
literal|"java.util.Date"
argument_list|,
literal|"serializeDateTime"
argument_list|,
literal|"deserializeDateTime"
argument_list|,
literal|null
argument_list|,
name|simpleTypeMap
argument_list|)
expr_stmt|;
name|buildFormat
argument_list|(
literal|"date"
argument_list|,
literal|"java.sql.Date"
argument_list|,
literal|"serializeSqlDate"
argument_list|,
literal|"deserializeSqlDate"
argument_list|,
literal|null
argument_list|,
name|simpleTypeMap
argument_list|)
expr_stmt|;
name|buildFormat
argument_list|(
literal|"time"
argument_list|,
literal|"java.sql.Time"
argument_list|,
literal|"serializeSqlTime"
argument_list|,
literal|"deserializeSqlTime"
argument_list|,
literal|null
argument_list|,
name|simpleTypeMap
argument_list|)
expr_stmt|;
name|buildFormat
argument_list|(
literal|"base64Binary"
argument_list|,
literal|"byte[]"
argument_list|,
literal|"serializeBase64"
argument_list|,
literal|"deserializeBase64"
argument_list|,
literal|null
argument_list|,
name|simpleTypeMap
argument_list|)
expr_stmt|;
name|buildFormat
argument_list|(
literal|"string"
argument_list|,
literal|"java.lang.String"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|simpleTypeMap
argument_list|)
expr_stmt|;
block|}
specifier|private
name|JibxUtil
parameter_list|()
block|{     }
specifier|private
specifier|static
name|void
name|buildFormat
parameter_list|(
specifier|final
name|String
name|stype
parameter_list|,
specifier|final
name|String
name|jtype
parameter_list|,
specifier|final
name|String
name|sname
parameter_list|,
specifier|final
name|String
name|dname
parameter_list|,
specifier|final
name|String
name|dflt
parameter_list|,
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Format
argument_list|>
name|map
parameter_list|)
block|{
name|Format
name|format
init|=
operator|new
name|Format
argument_list|()
decl_stmt|;
name|format
operator|.
name|setTypeName
argument_list|(
name|jtype
argument_list|)
expr_stmt|;
name|format
operator|.
name|setSerializeMethod
argument_list|(
name|sname
argument_list|)
expr_stmt|;
name|format
operator|.
name|setDeserializeMethod
argument_list|(
name|dname
argument_list|)
expr_stmt|;
name|format
operator|.
name|setDefaultValue
argument_list|(
name|dflt
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|SCHEMA_NAMESPACE
argument_list|,
name|stype
argument_list|)
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Format
name|getFormatElement
parameter_list|(
specifier|final
name|QName
name|type
parameter_list|)
block|{
return|return
name|simpleTypeMap
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
name|toObject
parameter_list|(
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|QName
name|stype
parameter_list|)
block|{
name|Format
name|format
init|=
name|simpleTypeMap
operator|.
name|get
argument_list|(
name|stype
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
name|String
name|deserializerMethod
init|=
name|format
operator|.
name|getDeserializeMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|deserializerMethod
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|UTILITY
operator|.
name|getMethod
argument_list|(
name|deserializerMethod
argument_list|,
name|INPUT_TYPE
argument_list|)
decl_stmt|;
return|return
name|method
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|text
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|text
return|;
block|}
specifier|public
specifier|static
name|String
name|toText
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|,
specifier|final
name|QName
name|stype
parameter_list|)
block|{
name|Format
name|format
init|=
name|simpleTypeMap
operator|.
name|get
argument_list|(
name|stype
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
name|String
name|serializeMethod
init|=
name|format
operator|.
name|getSerializeMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|serializeMethod
operator|!=
literal|null
condition|)
block|{
name|String
name|jtype
init|=
name|format
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
name|Class
index|[]
name|paraTypes
init|=
operator|(
name|JibxUtil
operator|.
name|isPrimitiveType
argument_list|(
name|jtype
argument_list|)
operator|)
condition|?
operator|new
name|Class
index|[]
block|{
name|JibxUtil
operator|.
name|getPrimitiveType
argument_list|(
name|jtype
argument_list|)
block|}
else|:
operator|new
name|Class
index|[]
block|{
name|value
operator|.
name|getClass
argument_list|()
block|}
decl_stmt|;
try|try
block|{
name|Method
name|method
init|=
name|UTILITY
operator|.
name|getMethod
argument_list|(
name|serializeMethod
argument_list|,
name|paraTypes
argument_list|)
decl_stmt|;
return|return
name|method
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|value
block|}
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isSimpleValue
parameter_list|(
specifier|final
name|String
name|type
parameter_list|)
block|{
return|return
name|simplePrimitiveTypeMap
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
operator|||
name|simpleObjectTypeMap
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
operator|||
literal|"void"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isSimpleValue
parameter_list|(
specifier|final
name|Class
name|type
parameter_list|)
block|{
return|return
name|isSimpleValue
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|QName
name|getSchemaType
parameter_list|(
specifier|final
name|String
name|jtype
parameter_list|)
block|{
name|QName
name|stype
init|=
operator|(
name|QName
operator|)
name|simplePrimitiveTypeMap
operator|.
name|get
argument_list|(
name|jtype
argument_list|)
decl_stmt|;
if|if
condition|(
name|stype
operator|==
literal|null
condition|)
block|{
name|stype
operator|=
operator|(
name|QName
operator|)
name|simpleObjectTypeMap
operator|.
name|get
argument_list|(
name|jtype
argument_list|)
expr_stmt|;
block|}
return|return
name|stype
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isPrimitiveType
parameter_list|(
specifier|final
name|String
name|type
parameter_list|)
block|{
return|return
name|simpleWrapperMap
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getPrimitiveType
parameter_list|(
specifier|final
name|String
name|type
parameter_list|)
block|{
return|return
name|simpleWrapperMap
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|QName
name|getQName
parameter_list|(
name|String
name|qname
parameter_list|)
block|{
name|String
name|ns
init|=
name|qname
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|qname
operator|.
name|indexOf
argument_list|(
literal|"}"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|localName
init|=
name|qname
operator|.
name|substring
argument_list|(
name|qname
operator|.
name|indexOf
argument_list|(
literal|"}"
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
return|return
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|localName
argument_list|)
return|;
block|}
specifier|static
class|class
name|Format
block|{
specifier|private
name|String
name|typeName
decl_stmt|;
specifier|private
name|String
name|deserializeMethod
decl_stmt|;
specifier|private
name|String
name|serializeMethod
decl_stmt|;
specifier|private
name|String
name|defaultValue
decl_stmt|;
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|typeName
return|;
block|}
specifier|public
name|void
name|setTypeName
parameter_list|(
specifier|final
name|String
name|typeName
parameter_list|)
block|{
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
block|}
specifier|public
name|String
name|getDeserializeMethod
parameter_list|()
block|{
return|return
name|deserializeMethod
return|;
block|}
specifier|public
name|void
name|setDeserializeMethod
parameter_list|(
specifier|final
name|String
name|deserializeMethod
parameter_list|)
block|{
name|this
operator|.
name|deserializeMethod
operator|=
name|deserializeMethod
expr_stmt|;
block|}
specifier|public
name|String
name|getSerializeMethod
parameter_list|()
block|{
return|return
name|serializeMethod
return|;
block|}
specifier|public
name|void
name|setSerializeMethod
parameter_list|(
specifier|final
name|String
name|serializeMethod
parameter_list|)
block|{
name|this
operator|.
name|serializeMethod
operator|=
name|serializeMethod
expr_stmt|;
block|}
specifier|public
name|String
name|getDefaultValue
parameter_list|()
block|{
return|return
name|defaultValue
return|;
block|}
specifier|public
name|void
name|setDefaultValue
parameter_list|(
specifier|final
name|String
name|defaultValue
parameter_list|)
block|{
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

