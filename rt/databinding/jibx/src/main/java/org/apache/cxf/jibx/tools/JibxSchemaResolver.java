begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jibx
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|resolver
operator|.
name|URIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jibx
operator|.
name|schema
operator|.
name|ISchemaResolver
import|;
end_import

begin_comment
comment|/**  * A Wrapper class that acts as a wrapper when passing schema instances to JiBX code generation framework.  */
end_comment

begin_class
specifier|public
class|class
name|JibxSchemaResolver
implements|implements
name|ISchemaResolver
block|{
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|XmlSchema
name|schema
decl_stmt|;
specifier|private
name|Element
name|element
decl_stmt|;
specifier|private
name|SchemaCollection
name|collection
decl_stmt|;
specifier|public
name|JibxSchemaResolver
parameter_list|(
name|String
name|id
parameter_list|,
name|XmlSchema
name|schema
parameter_list|,
name|SchemaCollection
name|collection
parameter_list|,
name|Element
name|element
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|setName
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
name|this
operator|.
name|element
operator|=
name|element
expr_stmt|;
block|}
specifier|public
name|InputStream
name|getContent
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|schema
operator|.
name|write
argument_list|(
name|bos
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|Element
name|getElement
parameter_list|()
block|{
return|return
name|element
return|;
block|}
specifier|private
name|void
name|setName
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|uri
expr_stmt|;
comment|//this.name = uri.substring(uri.lastIndexOf('/') + 1);
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|ISchemaResolver
name|resolve
parameter_list|(
name|String
name|loc
parameter_list|,
name|String
name|tns
parameter_list|)
throws|throws
name|IOException
block|{
name|URIResolver
name|resolver
init|=
name|collection
operator|.
name|getXmlSchemaCollection
argument_list|()
operator|.
name|getSchemaResolver
argument_list|()
decl_stmt|;
name|InputSource
name|source
init|=
name|resolver
operator|.
name|resolveEntity
argument_list|(
name|tns
argument_list|,
name|loc
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|SchemaCollection
name|schemaCol
init|=
operator|new
name|SchemaCollection
argument_list|()
decl_stmt|;
name|schemaCol
operator|.
name|setSchemaResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|XmlSchema
name|read
init|=
name|schemaCol
operator|.
name|getXmlSchemaCollection
argument_list|()
operator|.
name|read
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|loc
decl_stmt|;
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
operator|new
name|URL
argument_list|(
name|id
argument_list|)
argument_list|,
name|loc
argument_list|)
decl_stmt|;
name|uri
operator|=
name|url
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
return|return
operator|new
name|JibxSchemaResolver
argument_list|(
name|uri
argument_list|,
name|read
argument_list|,
name|schemaCol
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

