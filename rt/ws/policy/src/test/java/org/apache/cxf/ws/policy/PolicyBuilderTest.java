begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|xml
operator|.
name|XMLPrimitiveAssertionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|PolicyBuilderTest
extends|extends
name|Assert
block|{
specifier|private
name|PolicyBuilderImpl
name|builder
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|builder
operator|=
operator|new
name|PolicyBuilderImpl
argument_list|()
expr_stmt|;
name|AssertionBuilderRegistry
name|abr
init|=
operator|new
name|AssertionBuilderRegistryImpl
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setAssertionBuilderRegistry
argument_list|(
name|abr
argument_list|)
expr_stmt|;
name|AssertionBuilder
name|ab
init|=
operator|new
name|XMLPrimitiveAssertionBuilder
argument_list|()
decl_stmt|;
name|abr
operator|.
name|register
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://sample.org/Assertions"
argument_list|,
literal|"A"
argument_list|)
argument_list|,
name|ab
argument_list|)
expr_stmt|;
name|abr
operator|.
name|register
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://sample.org/Assertions"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
name|ab
argument_list|)
expr_stmt|;
name|abr
operator|.
name|register
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://sample.org/Assertions"
argument_list|,
literal|"C"
argument_list|)
argument_list|,
name|ab
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"/samples/test25.xml"
decl_stmt|;
name|InputStream
name|is
init|=
name|PolicyBuilderTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Policy
name|p
init|=
name|builder
operator|.
name|getPolicy
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PolicyComponent
argument_list|>
name|a
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|p
operator|.
name|getAssertions
argument_list|()
argument_list|,
name|PolicyComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|Constants
operator|.
name|TYPE_ASSERTION
argument_list|,
name|a
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPolicyReference
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"/samples/test26.xml"
decl_stmt|;
name|InputStream
name|is
init|=
name|PolicyBuilderTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|PolicyReference
name|pr
init|=
name|builder
operator|.
name|getPolicyReference
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"#PolicyA"
argument_list|,
name|pr
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
literal|"/samples/test27.xml"
expr_stmt|;
name|is
operator|=
name|PolicyBuilderTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|pr
operator|=
name|builder
operator|.
name|getPolicyReference
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://sample.org/test.wsdl#PolicyA"
argument_list|,
name|pr
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPolicyWithAttributes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|"/samples/test28.xml"
decl_stmt|;
name|InputStream
name|is
init|=
name|PolicyBuilderTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Policy
name|p
init|=
name|builder
operator|.
name|getPolicy
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|QName
name|n1
init|=
operator|new
name|QName
argument_list|(
literal|"nonsattr"
argument_list|)
decl_stmt|;
name|Object
name|v1
init|=
name|p
operator|.
name|getAttribute
argument_list|(
name|n1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|QName
name|n2
init|=
operator|new
name|QName
argument_list|(
literal|"http://x.y.z"
argument_list|,
literal|"nsattr"
argument_list|)
decl_stmt|;
name|Object
name|v2
init|=
name|p
operator|.
name|getAttribute
argument_list|(
name|n2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|v2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

