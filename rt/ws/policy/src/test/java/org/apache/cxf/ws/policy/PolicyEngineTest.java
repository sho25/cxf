begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|CXFBusImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingFaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|primitive
operator|.
name|PrimitiveAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|PolicyEngineTest
extends|extends
name|Assert
block|{
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|PolicyEngineImpl
name|engine
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
specifier|private
name|EndpointInfo
name|createMockEndpointInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|EndpointInfo
name|ei
init|=
operator|new
name|EndpointInfo
argument_list|()
decl_stmt|;
name|ei
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"mock"
argument_list|,
literal|"mock"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ei
return|;
block|}
specifier|private
name|BindingOperationInfo
name|createMockBindingOperationInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|OperationInfo
name|info
init|=
operator|new
name|OperationInfo
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
operator|new
name|BindingOperationInfo
argument_list|(
literal|null
argument_list|,
name|info
argument_list|)
block|{
specifier|public
name|boolean
name|isUnwrapped
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
return|return
name|boi
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessors
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|=
operator|new
name|PolicyEngineImpl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|engine
operator|.
name|getRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|engine
operator|.
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|engine
operator|.
name|getPolicyProviders
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|engine
operator|.
name|getAlternativeSelector
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|engine
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|Bus
name|bus
init|=
operator|new
name|CXFBusImpl
argument_list|()
decl_stmt|;
name|engine
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PolicyProvider
argument_list|>
name|providers
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|PolicyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|engine
operator|.
name|setPolicyProviders
argument_list|(
name|providers
argument_list|)
expr_stmt|;
name|PolicyRegistry
name|reg
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|engine
operator|.
name|setRegistry
argument_list|(
name|reg
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AlternativeSelector
name|selector
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AlternativeSelector
operator|.
name|class
argument_list|)
decl_stmt|;
name|engine
operator|.
name|setAlternativeSelector
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|bus
argument_list|,
name|engine
operator|.
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|reg
argument_list|,
name|engine
operator|.
name|getRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|engine
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|selector
argument_list|,
name|engine
operator|.
name|getAlternativeSelector
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|engine
operator|.
name|createOutPolicyInfo
argument_list|()
argument_list|)
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveClientRequestPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m
init|=
name|PolicyEngineImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createOutPolicyInfo"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|engine
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyEngineImpl
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|init
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|createMockBindingOperationInfo
argument_list|()
decl_stmt|;
name|AssertingConduit
name|conduit
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AssertingConduit
operator|.
name|class
argument_list|)
decl_stmt|;
name|EffectivePolicyImpl
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EffectivePolicyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|engine
operator|.
name|createOutPolicyInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epi
argument_list|)
expr_stmt|;
name|epi
operator|.
name|initialise
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|engine
argument_list|,
name|conduit
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getEffectiveClientRequestPolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|conduit
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getEffectiveClientRequestPolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|conduit
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetEffectiveClientRequestPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|=
operator|new
name|PolicyEngineImpl
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|createMockBindingOperationInfo
argument_list|()
decl_stmt|;
name|EffectivePolicy
name|effectivePolicy
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EffectivePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|engine
operator|.
name|setEffectiveClientRequestPolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|effectivePolicy
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|effectivePolicy
argument_list|,
name|engine
operator|.
name|getEffectiveClientRequestPolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
operator|(
name|Conduit
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveServerResponsePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m
init|=
name|PolicyEngineImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createOutPolicyInfo"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|engine
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyEngineImpl
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|init
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|createMockBindingOperationInfo
argument_list|()
decl_stmt|;
name|AssertingDestination
name|destination
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AssertingDestination
operator|.
name|class
argument_list|)
decl_stmt|;
name|EffectivePolicyImpl
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EffectivePolicyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|engine
operator|.
name|createOutPolicyInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epi
argument_list|)
expr_stmt|;
name|epi
operator|.
name|initialise
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|engine
argument_list|,
name|destination
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getEffectiveServerResponsePolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|destination
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getEffectiveServerResponsePolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|destination
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetEffectiveServerResponsePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|=
operator|new
name|PolicyEngineImpl
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|createMockBindingOperationInfo
argument_list|()
decl_stmt|;
name|EffectivePolicy
name|effectivePolicy
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EffectivePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|engine
operator|.
name|setEffectiveServerResponsePolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|effectivePolicy
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|effectivePolicy
argument_list|,
name|engine
operator|.
name|getEffectiveServerResponsePolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
operator|(
name|Destination
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveServerFaultPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m
init|=
name|PolicyEngineImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createOutPolicyInfo"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|engine
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyEngineImpl
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|init
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|BindingFaultInfo
name|bfi
init|=
operator|new
name|BindingFaultInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AssertingDestination
name|destination
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AssertingDestination
operator|.
name|class
argument_list|)
decl_stmt|;
name|EffectivePolicyImpl
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EffectivePolicyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|engine
operator|.
name|createOutPolicyInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epi
argument_list|)
expr_stmt|;
name|epi
operator|.
name|initialise
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|,
name|engine
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getEffectiveServerFaultPolicy
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|,
name|destination
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getEffectiveServerFaultPolicy
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|,
name|destination
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetEffectiveServerFaultPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|=
operator|new
name|PolicyEngineImpl
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|BindingFaultInfo
name|bfi
init|=
operator|new
name|BindingFaultInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|EffectivePolicy
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EffectivePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|engine
operator|.
name|setEffectiveServerFaultPolicy
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|,
name|epi
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getEffectiveServerFaultPolicy
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|,
operator|(
name|Destination
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveServerRequestPolicyInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m
init|=
name|PolicyEngineImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createOutPolicyInfo"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|engine
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyEngineImpl
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|init
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|createMockBindingOperationInfo
argument_list|()
decl_stmt|;
name|EffectivePolicyImpl
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EffectivePolicyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|engine
operator|.
name|createOutPolicyInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epi
argument_list|)
expr_stmt|;
name|epi
operator|.
name|initialise
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|engine
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getEffectiveServerRequestPolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getEffectiveServerRequestPolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetEffectiveServerRequestPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|=
operator|new
name|PolicyEngineImpl
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|createMockBindingOperationInfo
argument_list|()
decl_stmt|;
name|EffectivePolicy
name|effectivePolicy
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EffectivePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|engine
operator|.
name|setEffectiveServerRequestPolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|effectivePolicy
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|effectivePolicy
argument_list|,
name|engine
operator|.
name|getEffectiveServerRequestPolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveClientResponsePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m
init|=
name|PolicyEngineImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createOutPolicyInfo"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|engine
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyEngineImpl
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|init
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|createMockBindingOperationInfo
argument_list|()
decl_stmt|;
name|EffectivePolicyImpl
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EffectivePolicyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|engine
operator|.
name|createOutPolicyInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epi
argument_list|)
expr_stmt|;
name|epi
operator|.
name|initialise
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|engine
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getEffectiveClientResponsePolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getEffectiveClientResponsePolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetEffectiveClientResponsePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|=
operator|new
name|PolicyEngineImpl
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|createMockBindingOperationInfo
argument_list|()
decl_stmt|;
name|EffectivePolicy
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EffectivePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|engine
operator|.
name|setEffectiveClientResponsePolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|epi
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getEffectiveClientResponsePolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveClientFaultPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m
init|=
name|PolicyEngineImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createOutPolicyInfo"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|engine
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyEngineImpl
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|init
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|BindingFaultInfo
name|bfi
init|=
operator|new
name|BindingFaultInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|EffectivePolicyImpl
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EffectivePolicyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|engine
operator|.
name|createOutPolicyInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epi
argument_list|)
expr_stmt|;
name|epi
operator|.
name|initialisePolicy
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|,
name|engine
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getEffectiveClientFaultPolicy
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getEffectiveClientFaultPolicy
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetEffectiveClientFaultPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|=
operator|new
name|PolicyEngineImpl
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|BindingFaultInfo
name|bfi
init|=
operator|new
name|BindingFaultInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|EffectivePolicy
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EffectivePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|engine
operator|.
name|setEffectiveClientFaultPolicy
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|,
name|epi
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getEffectiveClientFaultPolicy
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEndpointPolicyClientSide
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m
init|=
name|PolicyEngineImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createEndpointPolicyInfo"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|EndpointInfo
operator|.
name|class
block|,
name|boolean
operator|.
name|class
block|,
name|Assertor
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|engine
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyEngineImpl
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|init
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|AssertingConduit
name|conduit
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AssertingConduit
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointPolicyImpl
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointPolicyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|engine
operator|.
name|createEndpointPolicyInfo
argument_list|(
name|ei
argument_list|,
literal|true
argument_list|,
name|conduit
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epi
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getClientEndpointPolicy
argument_list|(
name|ei
argument_list|,
name|conduit
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEndpointPolicyServerSide
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m
init|=
name|PolicyEngineImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createEndpointPolicyInfo"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|EndpointInfo
operator|.
name|class
block|,
name|boolean
operator|.
name|class
block|,
name|Assertor
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|engine
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyEngineImpl
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|init
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|AssertingDestination
name|destination
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AssertingDestination
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointPolicyImpl
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointPolicyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|engine
operator|.
name|createEndpointPolicyInfo
argument_list|(
name|ei
argument_list|,
literal|false
argument_list|,
name|destination
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epi
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getServerEndpointPolicy
argument_list|(
name|ei
argument_list|,
name|destination
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateEndpointPolicyInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m1
init|=
name|PolicyEngineImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createEndpointPolicyInfo"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|EndpointInfo
operator|.
name|class
block|,
name|boolean
operator|.
name|class
block|,
name|Assertor
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|engine
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyEngineImpl
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m1
block|}
argument_list|)
expr_stmt|;
name|engine
operator|.
name|init
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|Assertor
name|assertor
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Assertor
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointPolicyImpl
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointPolicyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|engine
operator|.
name|createEndpointPolicyInfo
argument_list|(
name|ei
argument_list|,
literal|false
argument_list|,
name|assertor
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epi
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|createEndpointPolicyInfo
argument_list|(
name|ei
argument_list|,
literal|false
argument_list|,
name|assertor
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndpointPolicyWithEqualPolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|=
operator|new
name|PolicyEngineImpl
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|ServiceInfo
name|si
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|ei
operator|.
name|setService
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|si
operator|.
name|getExtensor
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|EndpointPolicyImpl
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointPolicyImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|engine
operator|.
name|setServerEndpointPolicy
argument_list|(
name|ei
argument_list|,
name|epi
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setClientEndpointPolicy
argument_list|(
name|ei
argument_list|,
name|epi
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getClientEndpointPolicy
argument_list|(
name|ei
argument_list|,
operator|(
name|Conduit
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getServerEndpointPolicy
argument_list|(
name|ei
argument_list|,
operator|(
name|Destination
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ei
operator|.
name|setService
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|Policy
name|p
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
name|si
operator|.
name|getExtensor
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|p
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|epi
operator|.
name|getPolicy
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|p
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|epi
argument_list|,
name|engine
operator|.
name|getServerEndpointPolicy
argument_list|(
name|ei
argument_list|,
operator|(
name|Destination
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDontAddBusInterceptors
parameter_list|()
block|{
name|doTestAddBusInterceptors
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddBusInterceptors
parameter_list|()
block|{
name|doTestAddBusInterceptors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestAddBusInterceptors
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|engine
operator|=
operator|new
name|PolicyEngineImpl
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|Bus
name|bus
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|in
init|=
operator|new
name|ArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|inFault
init|=
operator|new
name|ArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|outFault
init|=
operator|new
name|ArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|enabled
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getOutInterceptors
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|out
argument_list|)
operator|.
name|times
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getInInterceptors
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|in
argument_list|)
operator|.
name|times
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getInFaultInterceptors
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|inFault
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getOutFaultInterceptors
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|outFault
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
block|}
name|engine
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
if|if
condition|(
name|enabled
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|idsOut
init|=
name|getInterceptorIds
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|idsIn
init|=
name|getInterceptorIds
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|idsInFault
init|=
name|getInterceptorIds
argument_list|(
name|inFault
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|idsOutFault
init|=
name|getInterceptorIds
argument_list|(
name|outFault
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|idsOut
operator|.
name|contains
argument_list|(
name|PolicyConstants
operator|.
name|POLICY_OUT_INTERCEPTOR_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|in
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|idsIn
operator|.
name|contains
argument_list|(
name|PolicyConstants
operator|.
name|POLICY_IN_INTERCEPTOR_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|inFault
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|idsInFault
operator|.
name|contains
argument_list|(
name|PolicyConstants
operator|.
name|CLIENT_POLICY_IN_FAULT_INTERCEPTOR_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|idsInFault
operator|.
name|contains
argument_list|(
name|PolicyVerificationInFaultInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outFault
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|idsOutFault
operator|.
name|contains
argument_list|(
name|PolicyConstants
operator|.
name|SERVER_POLICY_OUT_FAULT_INTERCEPTOR_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|in
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inFault
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outFault
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enabled
condition|)
block|{
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|engine
operator|.
name|getAlternativeSelector
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAggregatedServicePolicy
parameter_list|()
block|{
name|engine
operator|=
operator|new
name|PolicyEngineImpl
argument_list|()
expr_stmt|;
name|ServiceInfo
name|si
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Policy
name|p
init|=
name|engine
operator|.
name|getAggregatedServicePolicy
argument_list|(
name|si
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|PolicyProvider
name|provider1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|engine
operator|.
name|getPolicyProviders
argument_list|()
operator|.
name|add
argument_list|(
name|provider1
argument_list|)
expr_stmt|;
name|Policy
name|p1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|provider1
operator|.
name|getEffectivePolicy
argument_list|(
name|si
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|p1
argument_list|,
name|engine
operator|.
name|getAggregatedServicePolicy
argument_list|(
name|si
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|PolicyProvider
name|provider2
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|engine
operator|.
name|getPolicyProviders
argument_list|()
operator|.
name|add
argument_list|(
name|provider2
argument_list|)
expr_stmt|;
name|Policy
name|p2
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|Policy
name|p3
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|provider1
operator|.
name|getEffectivePolicy
argument_list|(
name|si
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|provider2
operator|.
name|getEffectivePolicy
argument_list|(
name|si
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|p1
operator|.
name|merge
argument_list|(
name|p2
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p3
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|p3
argument_list|,
name|engine
operator|.
name|getAggregatedServicePolicy
argument_list|(
name|si
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAggregatedEndpointPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|=
operator|new
name|PolicyEngineImpl
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|createMockEndpointInfo
argument_list|()
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Policy
name|p
init|=
name|engine
operator|.
name|getAggregatedEndpointPolicy
argument_list|(
name|ei
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|PolicyProvider
name|provider1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|engine
operator|.
name|getPolicyProviders
argument_list|()
operator|.
name|add
argument_list|(
name|provider1
argument_list|)
expr_stmt|;
name|Policy
name|p1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|provider1
operator|.
name|getEffectivePolicy
argument_list|(
name|ei
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|p1
argument_list|,
name|engine
operator|.
name|getAggregatedEndpointPolicy
argument_list|(
name|ei
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|PolicyProvider
name|provider2
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|engine
operator|.
name|getPolicyProviders
argument_list|()
operator|.
name|add
argument_list|(
name|provider2
argument_list|)
expr_stmt|;
name|Policy
name|p2
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|Policy
name|p3
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|provider1
operator|.
name|getEffectivePolicy
argument_list|(
name|ei
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|provider2
operator|.
name|getEffectivePolicy
argument_list|(
name|ei
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|p1
operator|.
name|merge
argument_list|(
name|p2
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p3
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|p3
argument_list|,
name|engine
operator|.
name|getAggregatedEndpointPolicy
argument_list|(
name|ei
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAggregatedOperationPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|engine
operator|=
operator|new
name|PolicyEngineImpl
argument_list|()
expr_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|createMockBindingOperationInfo
argument_list|()
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Policy
name|p
init|=
name|engine
operator|.
name|getAggregatedOperationPolicy
argument_list|(
name|boi
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|PolicyProvider
name|provider1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|engine
operator|.
name|getPolicyProviders
argument_list|()
operator|.
name|add
argument_list|(
name|provider1
argument_list|)
expr_stmt|;
name|Policy
name|p1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|provider1
operator|.
name|getEffectivePolicy
argument_list|(
name|boi
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|p1
argument_list|,
name|engine
operator|.
name|getAggregatedOperationPolicy
argument_list|(
name|boi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|PolicyProvider
name|provider2
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|engine
operator|.
name|getPolicyProviders
argument_list|()
operator|.
name|add
argument_list|(
name|provider2
argument_list|)
expr_stmt|;
name|Policy
name|p2
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|Policy
name|p3
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|provider1
operator|.
name|getEffectivePolicy
argument_list|(
name|boi
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|provider2
operator|.
name|getEffectivePolicy
argument_list|(
name|boi
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|p1
operator|.
name|merge
argument_list|(
name|p2
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p3
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|p3
argument_list|,
name|engine
operator|.
name|getAggregatedOperationPolicy
argument_list|(
name|boi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAggregatedMessagePolicy
parameter_list|()
block|{
name|engine
operator|=
operator|new
name|PolicyEngineImpl
argument_list|()
expr_stmt|;
name|BindingMessageInfo
name|bmi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingMessageInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Policy
name|p
init|=
name|engine
operator|.
name|getAggregatedMessagePolicy
argument_list|(
name|bmi
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|PolicyProvider
name|provider1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|engine
operator|.
name|getPolicyProviders
argument_list|()
operator|.
name|add
argument_list|(
name|provider1
argument_list|)
expr_stmt|;
name|Policy
name|p1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|provider1
operator|.
name|getEffectivePolicy
argument_list|(
name|bmi
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|p1
argument_list|,
name|engine
operator|.
name|getAggregatedMessagePolicy
argument_list|(
name|bmi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|PolicyProvider
name|provider2
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|engine
operator|.
name|getPolicyProviders
argument_list|()
operator|.
name|add
argument_list|(
name|provider2
argument_list|)
expr_stmt|;
name|Policy
name|p2
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|Policy
name|p3
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|provider1
operator|.
name|getEffectivePolicy
argument_list|(
name|bmi
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|provider2
operator|.
name|getEffectivePolicy
argument_list|(
name|bmi
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|p1
operator|.
name|merge
argument_list|(
name|p2
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p3
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|p3
argument_list|,
name|engine
operator|.
name|getAggregatedMessagePolicy
argument_list|(
name|bmi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAggregatedFaultPolicy
parameter_list|()
block|{
name|engine
operator|=
operator|new
name|PolicyEngineImpl
argument_list|()
expr_stmt|;
name|BindingFaultInfo
name|bfi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingFaultInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Policy
name|p
init|=
name|engine
operator|.
name|getAggregatedFaultPolicy
argument_list|(
name|bfi
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|PolicyProvider
name|provider1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|engine
operator|.
name|getPolicyProviders
argument_list|()
operator|.
name|add
argument_list|(
name|provider1
argument_list|)
expr_stmt|;
name|Policy
name|p1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|provider1
operator|.
name|getEffectivePolicy
argument_list|(
name|bfi
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|p1
argument_list|,
name|engine
operator|.
name|getAggregatedFaultPolicy
argument_list|(
name|bfi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|PolicyProvider
name|provider2
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|engine
operator|.
name|getPolicyProviders
argument_list|()
operator|.
name|add
argument_list|(
name|provider2
argument_list|)
expr_stmt|;
name|Policy
name|p2
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|Policy
name|p3
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|provider1
operator|.
name|getEffectivePolicy
argument_list|(
name|bfi
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|provider2
operator|.
name|getEffectivePolicy
argument_list|(
name|bfi
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|p1
operator|.
name|merge
argument_list|(
name|p2
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p3
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|p3
argument_list|,
name|engine
operator|.
name|getAggregatedFaultPolicy
argument_list|(
name|bfi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAssertions
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Method
name|m
init|=
name|PolicyEngineImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"addAssertions"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|PolicyComponent
operator|.
name|class
block|,
name|boolean
operator|.
name|class
block|,
name|Collection
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|engine
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyEngineImpl
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|PolicyAssertion
name|a
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyAssertion
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|a
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Constants
operator|.
name|TYPE_ASSERTION
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|a
operator|.
name|isOptional
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|engine
operator|.
name|getAssertions
argument_list|(
name|a
argument_list|,
literal|false
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|a
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Constants
operator|.
name|TYPE_ASSERTION
argument_list|)
expr_stmt|;
comment|// EasyMock.expect(a.isOptional()).andReturn(false);
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|ca
init|=
name|engine
operator|.
name|getAssertions
argument_list|(
name|a
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ca
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|a
argument_list|,
name|ca
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Policy
name|p
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|p
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Constants
operator|.
name|TYPE_POLICY
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addAssertions
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|p
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|,
name|CastUtils
operator|.
name|cast
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
argument_list|,
name|Assertion
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|engine
operator|.
name|getAssertions
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAssertions
parameter_list|()
block|{
name|engine
operator|=
operator|new
name|PolicyEngineImpl
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|assertions
init|=
operator|new
name|ArrayList
argument_list|<
name|Assertion
argument_list|>
argument_list|()
decl_stmt|;
name|Assertion
name|a
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Assertion
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|a
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Constants
operator|.
name|TYPE_ASSERTION
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|a
operator|.
name|isOptional
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|engine
operator|.
name|addAssertions
argument_list|(
name|a
argument_list|,
literal|false
argument_list|,
name|assertions
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|a
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Constants
operator|.
name|TYPE_ASSERTION
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|engine
operator|.
name|addAssertions
argument_list|(
name|a
argument_list|,
literal|true
argument_list|,
name|assertions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|assertions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|a
argument_list|,
name|assertions
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Policy
name|p
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
name|a
operator|=
operator|new
name|PrimitiveAssertion
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://x.y.z"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addAssertion
argument_list|(
name|a
argument_list|)
expr_stmt|;
comment|// id has no #
name|engine
operator|.
name|getRegistry
argument_list|()
operator|.
name|register
argument_list|(
literal|"ab"
argument_list|,
name|p
argument_list|)
expr_stmt|;
comment|// local reference is an id + #
name|PolicyReference
name|pr
init|=
operator|new
name|PolicyReference
argument_list|()
decl_stmt|;
name|pr
operator|.
name|setURI
argument_list|(
literal|"#ab"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addAssertions
argument_list|(
name|pr
argument_list|,
literal|false
argument_list|,
name|assertions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|assertions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|a
argument_list|,
name|assertions
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getInterceptorIds
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|i
range|:
name|interceptors
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
operator|(
operator|(
name|PhaseInterceptor
operator|)
name|i
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ids
return|;
block|}
interface|interface
name|AssertingConduit
extends|extends
name|Assertor
extends|,
name|Conduit
block|{     }
interface|interface
name|AssertingDestination
extends|extends
name|Assertor
extends|,
name|Destination
block|{     }
block|}
end_class

end_unit

