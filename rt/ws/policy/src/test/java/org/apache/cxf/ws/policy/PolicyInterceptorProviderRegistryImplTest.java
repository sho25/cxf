begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|PolicyInterceptorProviderRegistryImplTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|QName
name|ASSERTION
init|=
operator|new
name|QName
argument_list|(
literal|"testns"
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|WRONG_ASSERTION
init|=
operator|new
name|QName
argument_list|(
literal|"testns"
argument_list|,
literal|"wrong"
argument_list|)
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
operator|new
name|Integer
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstructors
parameter_list|()
block|{
name|PolicyInterceptorProviderRegistryImpl
name|reg
init|=
operator|new
name|PolicyInterceptorProviderRegistryImpl
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|reg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PolicyInterceptorProviderRegistry
operator|.
name|class
argument_list|,
name|reg
operator|.
name|getRegistrationType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testRegister
parameter_list|()
block|{
name|PolicyInterceptorProviderRegistryImpl
name|reg
init|=
operator|new
name|PolicyInterceptorProviderRegistryImpl
argument_list|()
decl_stmt|;
name|PolicyInterceptorProvider
name|pp
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyInterceptorProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|Interceptor
argument_list|<
name|Message
argument_list|>
name|pi1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Interceptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Interceptor
argument_list|<
name|Message
argument_list|>
name|pi2
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Interceptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Interceptor
argument_list|<
name|Message
argument_list|>
name|pif
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Interceptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Interceptor
argument_list|<
name|Message
argument_list|>
name|po
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Interceptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Interceptor
argument_list|<
name|Message
argument_list|>
name|pof
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Interceptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|pil
init|=
operator|new
name|ArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|pil
operator|.
name|add
argument_list|(
name|pi1
argument_list|)
expr_stmt|;
name|pil
operator|.
name|add
argument_list|(
name|pi2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|pifl
init|=
operator|new
name|ArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|pifl
operator|.
name|add
argument_list|(
name|pif
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|pol
init|=
operator|new
name|ArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|pol
operator|.
name|add
argument_list|(
name|po
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|pofl
init|=
operator|new
name|ArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|pofl
operator|.
name|add
argument_list|(
name|pof
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|pp
operator|.
name|getInInterceptors
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|pil
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|pp
operator|.
name|getInFaultInterceptors
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|pifl
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|pp
operator|.
name|getOutInterceptors
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|pol
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|pp
operator|.
name|getOutFaultInterceptors
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|pofl
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|QName
argument_list|>
name|assertionTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertionTypes
operator|.
name|add
argument_list|(
name|ASSERTION
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|pp
operator|.
name|getAssertionTypes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|assertionTypes
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|reg
operator|.
name|register
argument_list|(
name|pp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pil
argument_list|,
name|reg
operator|.
name|getInInterceptorsForAssertion
argument_list|(
name|ASSERTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pifl
argument_list|,
name|reg
operator|.
name|getInFaultInterceptorsForAssertion
argument_list|(
name|ASSERTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pol
argument_list|,
name|reg
operator|.
name|getOutInterceptorsForAssertion
argument_list|(
name|ASSERTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pofl
argument_list|,
name|reg
operator|.
name|getOutFaultInterceptorsForAssertion
argument_list|(
name|ASSERTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reg
operator|.
name|getInInterceptorsForAssertion
argument_list|(
name|WRONG_ASSERTION
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNotNull
parameter_list|()
block|{
name|PolicyInterceptorProviderRegistryImpl
name|reg
init|=
operator|new
name|PolicyInterceptorProviderRegistryImpl
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|reg
operator|.
name|get
argument_list|(
name|ASSERTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reg
operator|.
name|get
argument_list|(
name|ASSERTION
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reg
operator|.
name|getInInterceptorsForAssertion
argument_list|(
name|ASSERTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reg
operator|.
name|getInInterceptorsForAssertion
argument_list|(
name|ASSERTION
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reg
operator|.
name|getOutInterceptorsForAssertion
argument_list|(
name|ASSERTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reg
operator|.
name|getOutInterceptorsForAssertion
argument_list|(
name|ASSERTION
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reg
operator|.
name|getInFaultInterceptorsForAssertion
argument_list|(
name|ASSERTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reg
operator|.
name|getInFaultInterceptorsForAssertion
argument_list|(
name|ASSERTION
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reg
operator|.
name|getOutFaultInterceptorsForAssertion
argument_list|(
name|ASSERTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reg
operator|.
name|getOutFaultInterceptorsForAssertion
argument_list|(
name|ASSERTION
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

