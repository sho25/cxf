begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|attachment
operator|.
name|external
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingFaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|URIDomainExpressionTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TARGET_NAMESPACE
init|=
literal|"http://org.apache.cxf/targetNamespace"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_NAME
init|=
literal|"testService"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|SERVICE_QNAME
init|=
operator|new
name|QName
argument_list|(
name|TARGET_NAMESPACE
argument_list|,
name|SERVICE_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INTERFACE_NAME
init|=
literal|"testPortType"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|INTERFACE_QNAME
init|=
operator|new
name|QName
argument_list|(
name|TARGET_NAMESPACE
argument_list|,
name|INTERFACE_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PORT_NAME
init|=
literal|"testPort"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|PORT_QNAME
init|=
operator|new
name|QName
argument_list|(
name|TARGET_NAMESPACE
argument_list|,
name|PORT_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPERATION_NAME
init|=
literal|"testOperation"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|OPERATION_QNAME
init|=
operator|new
name|QName
argument_list|(
name|TARGET_NAMESPACE
argument_list|,
name|OPERATION_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BINDING_NAME
init|=
literal|"testBinding"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|BINDING_QNAME
init|=
operator|new
name|QName
argument_list|(
name|TARGET_NAMESPACE
argument_list|,
name|BINDING_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MESSAGE_NAME
init|=
literal|"testBinding"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|MESSAGE_QNAME
init|=
operator|new
name|QName
argument_list|(
name|TARGET_NAMESPACE
argument_list|,
name|MESSAGE_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FAULT_NAME
init|=
literal|"testFault"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|FAULT_QNAME
init|=
operator|new
name|QName
argument_list|(
name|TARGET_NAMESPACE
argument_list|,
name|FAULT_NAME
argument_list|)
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|ServiceInfo
name|si
decl_stmt|;
specifier|private
name|EndpointInfo
name|ei
decl_stmt|;
specifier|private
name|BindingOperationInfo
name|boi
decl_stmt|;
specifier|private
name|BindingMessageInfo
name|bmi
decl_stmt|;
specifier|private
name|BindingFaultInfo
name|bfi
decl_stmt|;
specifier|private
name|MessageInfo
name|mi
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServiceInfo
parameter_list|()
block|{
name|mockInfoObjects
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|expression
init|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.definitions()"
decl_stmt|;
name|URIDomainExpression
name|ude
init|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected true for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|si
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.service("
operator|+
name|SERVICE_NAME
operator|+
literal|")"
expr_stmt|;
name|ude
operator|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected true for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|si
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.portType("
operator|+
name|INTERFACE_NAME
operator|+
literal|")"
expr_stmt|;
name|ude
operator|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected true for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|si
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.portType("
operator|+
name|INTERFACE_NAME
operator|+
literal|"wrong"
operator|+
literal|")"
expr_stmt|;
name|ude
operator|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected false for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|si
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|TARGET_NAMESPACE
operator|+
literal|"wrong"
operator|+
literal|"#wsdl11.portType("
operator|+
name|INTERFACE_NAME
operator|+
literal|")"
expr_stmt|;
name|ude
operator|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected false for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|si
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEndpointInfo
parameter_list|()
block|{
name|mockInfoObjects
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|expression
init|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.port("
operator|+
name|SERVICE_NAME
operator|+
literal|"/"
operator|+
name|PORT_NAME
operator|+
literal|")"
decl_stmt|;
name|URIDomainExpression
name|ude
init|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected true for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|ei
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.port("
operator|+
name|SERVICE_NAME
operator|+
literal|"/"
operator|+
name|PORT_NAME
operator|+
literal|"wrong"
operator|+
literal|")"
expr_stmt|;
name|ude
operator|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected false for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|boi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindingOperationInfo
parameter_list|()
block|{
name|mockInfoObjects
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|expression
init|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.binding("
operator|+
name|BINDING_NAME
operator|+
literal|")"
decl_stmt|;
name|URIDomainExpression
name|ude
init|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected true for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|boi
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.bindingOperation("
operator|+
name|BINDING_NAME
operator|+
literal|"/"
operator|+
name|OPERATION_NAME
operator|+
literal|")"
expr_stmt|;
name|ude
operator|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected true for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|boi
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.portTypeOperation("
operator|+
name|INTERFACE_NAME
operator|+
literal|"/"
operator|+
name|OPERATION_NAME
operator|+
literal|")"
expr_stmt|;
name|ude
operator|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected true for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|boi
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.portTypeOperation("
operator|+
name|INTERFACE_NAME
operator|+
literal|"/"
operator|+
name|OPERATION_NAME
operator|+
literal|"wrong"
operator|+
literal|")"
expr_stmt|;
name|ude
operator|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected false for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|boi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindingMessageInfo
parameter_list|()
block|{
name|mockInfoObjects
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|expression
init|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.message("
operator|+
name|MESSAGE_NAME
operator|+
literal|")"
decl_stmt|;
name|URIDomainExpression
name|ude
init|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected true for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|bmi
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.message("
operator|+
name|MESSAGE_NAME
operator|+
literal|"wrong"
operator|+
literal|")"
expr_stmt|;
name|ude
operator|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected false for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|bmi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|mockInfoObjects
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mi
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Type
operator|.
name|INPUT
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|expression
operator|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.bindingOperation.input("
operator|+
name|BINDING_NAME
operator|+
literal|"/"
operator|+
name|OPERATION_NAME
operator|+
literal|")"
expr_stmt|;
name|ude
operator|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected true for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|bmi
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.portTypeOperation.input("
operator|+
name|INTERFACE_NAME
operator|+
literal|"/"
operator|+
name|OPERATION_NAME
operator|+
literal|")"
expr_stmt|;
name|ude
operator|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected true for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|bmi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|mockInfoObjects
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mi
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Type
operator|.
name|OUTPUT
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|expression
operator|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.bindingOperation.output("
operator|+
name|BINDING_NAME
operator|+
literal|"/"
operator|+
name|OPERATION_NAME
operator|+
literal|")"
expr_stmt|;
name|ude
operator|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected true for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|bmi
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.portTypeOperation.output("
operator|+
name|INTERFACE_NAME
operator|+
literal|"/"
operator|+
name|OPERATION_NAME
operator|+
literal|")"
expr_stmt|;
name|ude
operator|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected true for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|bmi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindingOperationFault
parameter_list|()
block|{
name|mockInfoObjects
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|expression
init|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.bindingOperation.fault("
operator|+
name|BINDING_NAME
operator|+
literal|"/"
operator|+
name|OPERATION_NAME
operator|+
literal|"/"
operator|+
name|FAULT_NAME
operator|+
literal|")"
decl_stmt|;
name|URIDomainExpression
name|ude
init|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected true for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|bfi
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.portTypeOperation.fault("
operator|+
name|INTERFACE_NAME
operator|+
literal|"/"
operator|+
name|OPERATION_NAME
operator|+
literal|"/"
operator|+
name|FAULT_NAME
operator|+
literal|")"
expr_stmt|;
name|ude
operator|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected true for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|bfi
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|=
name|TARGET_NAMESPACE
operator|+
literal|"#wsdl11.portTypeOperation.fault("
operator|+
name|INTERFACE_NAME
operator|+
literal|"/"
operator|+
name|OPERATION_NAME
operator|+
literal|"/"
operator|+
name|FAULT_NAME
operator|+
literal|"wrong"
operator|+
literal|")"
expr_stmt|;
name|ude
operator|=
operator|new
name|URIDomainExpression
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Expected false for expression: "
operator|+
name|expression
argument_list|,
name|ude
operator|.
name|appliesTo
argument_list|(
name|bfi
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|mockInfoObjects
parameter_list|()
block|{
name|si
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|ei
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|boi
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|bmi
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingMessageInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|bfi
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingFaultInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|InterfaceInfo
name|ii
init|=
name|control
operator|.
name|createMock
argument_list|(
name|InterfaceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|si
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|TARGET_NAMESPACE
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|si
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|SERVICE_QNAME
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|si
operator|.
name|getInterface
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ii
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ii
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|INTERFACE_QNAME
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|PORT_QNAME
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ei
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|si
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|BindingInfo
name|bi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|OperationInfo
name|oi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|OperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|boi
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|OPERATION_QNAME
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|boi
operator|.
name|getBinding
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bi
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|BINDING_QNAME
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|boi
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|oi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|oi
operator|.
name|getInterface
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ii
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|oi
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|OPERATION_QNAME
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|mi
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|MessageInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bmi
operator|.
name|getMessageInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mi
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|MESSAGE_QNAME
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bmi
operator|.
name|getBindingOperation
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|boi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|FaultInfo
name|fi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|FaultInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|bfi
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingFaultInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bfi
operator|.
name|getBindingOperation
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|boi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bfi
operator|.
name|getFaultInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|fi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|fi
operator|.
name|getFaultName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|FAULT_QNAME
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

