begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|primitive
operator|.
name|PrimitiveAssertionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|util
operator|.
name|PolicyComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|NormalizeTest
extends|extends
name|Assert
block|{
specifier|private
name|IMocksControl
name|control
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNormalize
parameter_list|()
throws|throws
name|Exception
block|{
name|Bus
name|bus
init|=
name|createBus
argument_list|(
name|Constants
operator|.
name|URI_POLICY_13_NS
argument_list|)
decl_stmt|;
name|PolicyBuilderImpl
name|builder
init|=
name|createBuilder
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|26
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|String
name|sample
init|=
literal|"/samples/test"
operator|+
name|i
operator|+
literal|".xml"
decl_stmt|;
name|String
name|normalized
init|=
literal|"/normalized/test"
operator|+
name|i
operator|+
literal|".xml"
decl_stmt|;
name|doTestNormalize
argument_list|(
name|builder
argument_list|,
name|sample
argument_list|,
name|normalized
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNormalizeDefaultNs
parameter_list|()
throws|throws
name|Exception
block|{
name|Bus
name|bus
init|=
name|createBus
argument_list|(
name|Constants
operator|.
name|URI_POLICY_NS
argument_list|)
decl_stmt|;
name|PolicyBuilderImpl
name|builder
init|=
name|createBuilder
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|String
name|sample
init|=
literal|"/samples/test1DefaultNs.xml"
decl_stmt|;
name|String
name|normalized
init|=
literal|"/normalized/test1DefaultNs.xml"
decl_stmt|;
name|doTestNormalize
argument_list|(
name|builder
argument_list|,
name|sample
argument_list|,
name|normalized
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PolicyBuilderImpl
name|createBuilder
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|PolicyBuilderImpl
name|builder
init|=
operator|new
name|PolicyBuilderImpl
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|AssertionBuilderRegistry
name|abr
init|=
operator|new
name|AssertionBuilderRegistryImpl
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setAssertionBuilderRegistry
argument_list|(
name|abr
argument_list|)
expr_stmt|;
name|PrimitiveAssertionBuilder
name|ab
init|=
operator|new
name|PrimitiveAssertionBuilder
argument_list|()
decl_stmt|;
name|abr
operator|.
name|registerBuilder
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://schemas.xmlsoap.org/ws/2002/12/secext"
argument_list|,
literal|"SecurityToken"
argument_list|)
argument_list|,
name|ab
argument_list|)
expr_stmt|;
name|abr
operator|.
name|registerBuilder
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://schemas.xmlsoap.org/ws/2002/12/secext"
argument_list|,
literal|"SecurityHeader"
argument_list|)
argument_list|,
name|ab
argument_list|)
expr_stmt|;
name|abr
operator|.
name|registerBuilder
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://schemas.xmlsoap.org/ws/2002/12/secext"
argument_list|,
literal|"Integrity"
argument_list|)
argument_list|,
name|ab
argument_list|)
expr_stmt|;
name|abr
operator|.
name|registerBuilder
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://sample.org/Assertions"
argument_list|,
literal|"A"
argument_list|)
argument_list|,
name|ab
argument_list|)
expr_stmt|;
name|abr
operator|.
name|registerBuilder
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://sample.org/Assertions"
argument_list|,
literal|"B"
argument_list|)
argument_list|,
name|ab
argument_list|)
expr_stmt|;
name|abr
operator|.
name|registerBuilder
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://sample.org/Assertions"
argument_list|,
literal|"C"
argument_list|)
argument_list|,
name|ab
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
specifier|private
name|Bus
name|createBus
parameter_list|(
name|String
name|policyNamespace
parameter_list|)
block|{
name|Bus
name|bus
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
return|return
name|bus
return|;
block|}
specifier|private
name|void
name|doTestNormalize
parameter_list|(
name|PolicyBuilderImpl
name|builder
parameter_list|,
name|String
name|sample
parameter_list|,
name|String
name|normalized
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|sampleIn
init|=
name|NormalizeTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|sample
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not get input stream for resource "
operator|+
name|sample
argument_list|,
name|sampleIn
argument_list|)
expr_stmt|;
name|InputStream
name|normalisedIn
init|=
name|NormalizeTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|normalized
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not get input stream for resource "
operator|+
name|normalized
argument_list|,
name|normalisedIn
argument_list|)
expr_stmt|;
name|Policy
name|samplePolicy
init|=
name|builder
operator|.
name|getPolicy
argument_list|(
name|sampleIn
argument_list|)
decl_stmt|;
name|Policy
name|normalisedPolicy
init|=
name|builder
operator|.
name|getPolicy
argument_list|(
name|normalisedIn
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|samplePolicy
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|normalisedPolicy
argument_list|)
expr_stmt|;
name|Policy
name|normalisedSamplePolicy
init|=
name|samplePolicy
operator|.
name|normalize
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|PolicyComparator
operator|.
name|compare
argument_list|(
name|normalisedPolicy
argument_list|,
name|normalisedSamplePolicy
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

