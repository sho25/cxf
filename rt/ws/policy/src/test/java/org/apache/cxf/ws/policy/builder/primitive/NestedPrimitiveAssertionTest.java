begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|primitive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionBuilderRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionBuilderRegistryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyBuilderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|util
operator|.
name|PolicyComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|NestedPrimitiveAssertionTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NAMESPACE
init|=
literal|"http://cxf.apache.org/test"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|TEST_NAME1
init|=
operator|new
name|QName
argument_list|(
name|TEST_NAMESPACE
argument_list|,
literal|"Addressing"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|TEST_NAME2
init|=
operator|new
name|QName
argument_list|(
name|TEST_NAMESPACE
argument_list|,
literal|"AnonymousResponses"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|TEST_NAME3
init|=
operator|new
name|QName
argument_list|(
name|TEST_NAMESPACE
argument_list|,
literal|"NonAnonymousResponses"
argument_list|)
decl_stmt|;
specifier|private
name|PolicyBuilderImpl
name|builder
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|bus
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
expr_stmt|;
name|AssertionBuilderRegistry
name|abr
init|=
operator|new
name|AssertionBuilderRegistryImpl
argument_list|()
decl_stmt|;
name|builder
operator|=
operator|new
name|PolicyBuilderImpl
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setAssertionBuilderRegistry
argument_list|(
name|abr
argument_list|)
expr_stmt|;
name|NestedPrimitiveAssertionBuilder
name|npab
init|=
operator|new
name|NestedPrimitiveAssertionBuilder
argument_list|()
decl_stmt|;
name|npab
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|npab
operator|.
name|setPolicyBuilder
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|npab
operator|.
name|setKnownElements
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TEST_NAME1
argument_list|)
argument_list|)
expr_stmt|;
name|abr
operator|.
name|register
argument_list|(
name|TEST_NAME1
argument_list|,
name|npab
argument_list|)
expr_stmt|;
name|PrimitiveAssertionBuilder
name|pab
init|=
operator|new
name|PrimitiveAssertionBuilder
argument_list|()
decl_stmt|;
name|pab
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|QName
argument_list|>
name|known
init|=
operator|new
name|ArrayList
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
name|known
operator|.
name|add
argument_list|(
name|TEST_NAME2
argument_list|)
expr_stmt|;
name|known
operator|.
name|add
argument_list|(
name|TEST_NAME3
argument_list|)
expr_stmt|;
name|pab
operator|.
name|setKnownElements
argument_list|(
name|known
argument_list|)
expr_stmt|;
name|abr
operator|.
name|register
argument_list|(
name|TEST_NAME2
argument_list|,
name|pab
argument_list|)
expr_stmt|;
name|abr
operator|.
name|register
argument_list|(
name|TEST_NAME3
argument_list|,
name|pab
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildNonNested
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|resource
init|=
literal|"resources/compact1.xml"
decl_stmt|;
name|InputStream
name|is
init|=
name|NestedPrimitiveAssertionTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|Policy
name|policy
init|=
name|builder
operator|.
name|getPolicy
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policy
operator|.
name|getPolicyComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PolicyComponent
name|pc
init|=
name|policy
operator|.
name|getFirstPolicyComponent
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pc
operator|instanceof
name|NestedPrimitiveAssertion
argument_list|)
expr_stmt|;
name|NestedPrimitiveAssertion
name|npc
init|=
operator|(
name|NestedPrimitiveAssertion
operator|)
name|pc
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_NAME1
argument_list|,
name|npc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Policy
name|nested
init|=
name|npc
operator|.
name|getPolicy
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|nested
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBuildNested
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|resource
init|=
literal|"resources/compact3.xml"
decl_stmt|;
name|InputStream
name|is
init|=
name|NestedPrimitiveAssertionTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|Policy
name|policy
init|=
name|builder
operator|.
name|getPolicy
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policy
operator|.
name|getPolicyComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PolicyComponent
name|pc
init|=
name|policy
operator|.
name|getFirstPolicyComponent
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|pc
operator|instanceof
name|NestedPrimitiveAssertion
argument_list|)
expr_stmt|;
name|NestedPrimitiveAssertion
name|npc
init|=
operator|(
name|NestedPrimitiveAssertion
operator|)
name|pc
decl_stmt|;
name|assertEquals
argument_list|(
name|TEST_NAME1
argument_list|,
name|npc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Policy
name|nested
init|=
name|npc
operator|.
name|getPolicy
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nested
operator|.
name|getPolicyComponents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PolicyAssertion
name|a1
init|=
call|(
name|PolicyAssertion
call|)
argument_list|(
name|nested
operator|.
name|getPolicyComponents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a1
operator|instanceof
name|PrimitiveAssertion
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TEST_NAME2
operator|.
name|equals
argument_list|(
name|a1
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|TEST_NAME3
operator|.
name|equals
argument_list|(
name|a1
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PolicyAssertion
name|a2
init|=
call|(
name|PolicyAssertion
call|)
argument_list|(
name|nested
operator|.
name|getPolicyComponents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a2
operator|instanceof
name|PrimitiveAssertion
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TEST_NAME2
operator|.
name|equals
argument_list|(
name|a2
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|TEST_NAME3
operator|.
name|equals
argument_list|(
name|a2
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Resources for this tests are taken from WS-Addressing 1.0 Metadata      * specification      * http://dev.w3.org/cvsweb/~checkout~/2004/ws/addressing/ws-addr-wsdl.html      *       * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testNormalise
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|n
init|=
literal|6
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|String
name|compact
init|=
literal|"resources/compact"
operator|+
name|i
operator|+
literal|".xml"
decl_stmt|;
name|String
name|normalised
init|=
literal|"resources/normalised"
operator|+
name|i
operator|+
literal|".xml"
decl_stmt|;
name|InputStream
name|compactIn
init|=
name|NestedPrimitiveAssertionTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|compact
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not get input stream for resource "
operator|+
name|compact
argument_list|,
name|compactIn
argument_list|)
expr_stmt|;
name|InputStream
name|normalisedIn
init|=
name|NestedPrimitiveAssertionTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|normalised
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not get input stream for resource "
operator|+
name|normalised
argument_list|,
name|normalisedIn
argument_list|)
expr_stmt|;
name|Policy
name|compactPolicy
init|=
name|builder
operator|.
name|getPolicy
argument_list|(
name|compactIn
argument_list|)
decl_stmt|;
name|Policy
name|expectedNormalisedPolicy
init|=
name|builder
operator|.
name|getPolicy
argument_list|(
name|normalisedIn
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|compactPolicy
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedNormalisedPolicy
argument_list|)
expr_stmt|;
name|Policy
name|normalisedPolicy
init|=
operator|(
name|Policy
operator|)
name|compactPolicy
operator|.
name|normalize
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|normalisedPolicy
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Normalised version of policy defined in compact"
operator|+
name|i
operator|+
literal|".xml does not match expected version defined in normalised"
operator|+
name|i
operator|+
literal|".xml"
argument_list|,
name|PolicyComparator
operator|.
name|compare
argument_list|(
name|expectedNormalisedPolicy
argument_list|,
name|normalisedPolicy
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

