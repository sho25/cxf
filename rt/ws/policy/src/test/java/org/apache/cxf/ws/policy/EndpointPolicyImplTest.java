begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|All
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|ExactlyOne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|EndpointPolicyImplTest
extends|extends
name|Assert
block|{
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|final
class|class
name|TestEndpointPolicy
extends|extends
name|EndpointPolicyImpl
block|{
annotation|@
name|Override
specifier|protected
name|EndpointPolicyImpl
name|createEndpointPolicy
parameter_list|()
block|{
return|return
operator|new
name|TestEndpointPolicy
argument_list|()
return|;
block|}
annotation|@
name|Override
name|void
name|finalizeConfig
parameter_list|(
name|Message
name|m
parameter_list|)
block|{         }
block|}
empty_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|createMockInterceptorList
parameter_list|()
block|{
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|i
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Interceptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|m
init|=
name|i
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|a
init|=
operator|new
name|ArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|a
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessors
parameter_list|()
block|{
name|EndpointPolicyImpl
name|epi
init|=
operator|new
name|EndpointPolicyImpl
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|epi
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|epi
operator|.
name|getChosenAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|epi
operator|.
name|getInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|epi
operator|.
name|getFaultInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|Policy
name|p
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assertion
name|a
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Assertion
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Assertion
argument_list|>
name|la
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|li
init|=
name|createMockInterceptorList
argument_list|()
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|epi
operator|.
name|setPolicy
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|p
argument_list|,
name|epi
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|epi
operator|.
name|setChosenAlternative
argument_list|(
name|la
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|la
argument_list|,
name|epi
operator|.
name|getChosenAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|epi
operator|.
name|setInterceptors
argument_list|(
name|li
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|li
argument_list|,
name|epi
operator|.
name|getInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|epi
operator|.
name|setFaultInterceptors
argument_list|(
name|li
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|li
argument_list|,
name|epi
operator|.
name|getFaultInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|epi
operator|.
name|setVocabulary
argument_list|(
name|la
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|la
argument_list|,
name|epi
operator|.
name|getVocabulary
argument_list|()
argument_list|)
expr_stmt|;
name|epi
operator|.
name|setFaultVocabulary
argument_list|(
name|la
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|la
argument_list|,
name|epi
operator|.
name|getFaultVocabulary
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitialize
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|Method
name|m1
init|=
name|EndpointPolicyImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"initializePolicy"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|Method
name|m2
init|=
name|EndpointPolicyImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"checkExactlyOnes"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|Method
name|m3
init|=
name|EndpointPolicyImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"chooseAlternative"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Message
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Method
name|m4
init|=
name|EndpointPolicyImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"initializeVocabulary"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Message
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Method
name|m5
init|=
name|EndpointPolicyImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"initializeInterceptors"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Message
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|EndpointPolicyImpl
name|epi
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|EndpointPolicyImpl
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethods
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|,
name|m3
argument_list|,
name|m4
argument_list|,
name|m5
argument_list|)
operator|.
name|createMock
argument_list|(
name|control
argument_list|)
decl_stmt|;
name|epi
operator|.
name|initializePolicy
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|epi
operator|.
name|checkExactlyOnes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|epi
operator|.
name|chooseAlternative
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|epi
operator|.
name|initialize
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitializePolicy
parameter_list|()
block|{
name|EndpointInfo
name|ei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|PolicyEngineImpl
name|engine
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyEngineImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceInfo
name|si
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ei
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|Policy
name|sp
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|engine
operator|.
name|getAggregatedServicePolicy
argument_list|(
name|si
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|Policy
name|ep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|engine
operator|.
name|getAggregatedEndpointPolicy
argument_list|(
name|ei
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ep
argument_list|)
expr_stmt|;
name|Policy
name|merged
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sp
operator|.
name|merge
argument_list|(
name|ep
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|merged
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|merged
operator|.
name|normalize
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|merged
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|EndpointPolicyImpl
name|epi
init|=
operator|new
name|EndpointPolicyImpl
argument_list|(
name|ei
argument_list|,
name|engine
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|epi
operator|.
name|initializePolicy
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|merged
argument_list|,
name|epi
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChooseAlternative
parameter_list|()
block|{
name|Policy
name|policy
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
name|PolicyEngineImpl
name|engine
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyEngineImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assertor
name|assertor
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Assertor
operator|.
name|class
argument_list|)
decl_stmt|;
name|AlternativeSelector
name|selector
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AlternativeSelector
operator|.
name|class
argument_list|)
decl_stmt|;
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|EndpointPolicyImpl
name|epi
init|=
operator|new
name|EndpointPolicyImpl
argument_list|(
literal|null
argument_list|,
name|engine
argument_list|,
literal|true
argument_list|,
name|assertor
argument_list|)
decl_stmt|;
name|epi
operator|.
name|setPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|engine
operator|.
name|getAlternativeSelector
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|selector
operator|.
name|selectAlternative
argument_list|(
name|policy
argument_list|,
name|engine
argument_list|,
name|assertor
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|epi
operator|.
name|chooseAlternative
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected PolicyException not thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PolicyException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|engine
operator|.
name|getAlternativeSelector
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|alternative
init|=
operator|new
name|ArrayList
argument_list|<
name|Assertion
argument_list|>
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|selector
operator|.
name|selectAlternative
argument_list|(
name|policy
argument_list|,
name|engine
argument_list|,
name|assertor
argument_list|,
literal|null
argument_list|,
name|m
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|alternative
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|epi
operator|.
name|chooseAlternative
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|choice
init|=
name|epi
operator|.
name|getChosenAlternative
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|choice
argument_list|,
name|alternative
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePolicy
parameter_list|()
block|{
name|EndpointPolicyImpl
name|epi
init|=
operator|new
name|TestEndpointPolicy
argument_list|()
decl_stmt|;
name|Policy
name|p1
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
name|QName
name|aqn1
init|=
operator|new
name|QName
argument_list|(
literal|"http://x.y.z"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|p1
operator|.
name|addAssertion
argument_list|(
name|mockAssertion
argument_list|(
name|aqn1
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Policy
name|p2
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
name|QName
name|aqn2
init|=
operator|new
name|QName
argument_list|(
literal|"http://x.y.z"
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|p2
operator|.
name|addAssertion
argument_list|(
name|mockAssertion
argument_list|(
name|aqn2
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|epi
operator|.
name|setPolicy
argument_list|(
name|p1
operator|.
name|normalize
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Policy
name|ep
init|=
name|epi
operator|.
name|updatePolicy
argument_list|(
name|p2
argument_list|)
operator|.
name|getPolicy
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExactlyOne
argument_list|>
name|pops
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|ep
operator|.
name|getPolicyComponents
argument_list|()
argument_list|,
name|ExactlyOne
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"New policy must have 1 top level policy operator"
argument_list|,
literal|1
argument_list|,
name|pops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|All
argument_list|>
name|alts
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|pops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPolicyComponents
argument_list|()
argument_list|,
name|All
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2 alternatives should be available"
argument_list|,
literal|2
argument_list|,
name|alts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PolicyAssertion
argument_list|>
name|assertions1
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|alts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAssertions
argument_list|()
argument_list|,
name|PolicyAssertion
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1 assertion should be available"
argument_list|,
literal|1
argument_list|,
name|assertions1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PolicyAssertion
argument_list|>
name|assertions2
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|alts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getAssertions
argument_list|()
argument_list|,
name|PolicyAssertion
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1 assertion should be available"
argument_list|,
literal|1
argument_list|,
name|assertions2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QName
name|n1
init|=
name|assertions1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|QName
name|n2
init|=
name|assertions2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Policy was not merged"
argument_list|,
name|n1
operator|.
name|equals
argument_list|(
name|aqn1
argument_list|)
operator|&&
name|n2
operator|.
name|equals
argument_list|(
name|aqn2
argument_list|)
operator|||
name|n1
operator|.
name|equals
argument_list|(
name|aqn2
argument_list|)
operator|&&
name|n2
operator|.
name|equals
argument_list|(
name|aqn1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePolicyWithEmptyPolicy
parameter_list|()
block|{
name|doTestUpdateWithEmptyPolicy
argument_list|(
operator|new
name|Policy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePolicyWithEmptyAll
parameter_list|()
block|{
name|Policy
name|emptyPolicy
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
name|emptyPolicy
operator|.
name|addPolicyComponent
argument_list|(
operator|new
name|All
argument_list|()
argument_list|)
expr_stmt|;
name|emptyPolicy
operator|.
name|addPolicyComponent
argument_list|(
operator|new
name|All
argument_list|()
argument_list|)
expr_stmt|;
name|doTestUpdateWithEmptyPolicy
argument_list|(
name|emptyPolicy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatePolicyWithEmptyExactlyOneAndAll
parameter_list|()
block|{
name|Policy
name|emptyPolicy
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
name|PolicyOperator
name|exactlyOne
init|=
operator|new
name|ExactlyOne
argument_list|()
decl_stmt|;
name|exactlyOne
operator|.
name|addPolicyComponent
argument_list|(
operator|new
name|All
argument_list|()
argument_list|)
expr_stmt|;
name|exactlyOne
operator|.
name|addPolicyComponent
argument_list|(
operator|new
name|All
argument_list|()
argument_list|)
expr_stmt|;
name|emptyPolicy
operator|.
name|addPolicyComponent
argument_list|(
name|exactlyOne
argument_list|)
expr_stmt|;
name|emptyPolicy
operator|.
name|addPolicyComponent
argument_list|(
operator|new
name|All
argument_list|()
argument_list|)
expr_stmt|;
name|emptyPolicy
operator|.
name|addPolicyComponent
argument_list|(
operator|new
name|All
argument_list|()
argument_list|)
expr_stmt|;
name|doTestUpdateWithEmptyPolicy
argument_list|(
name|emptyPolicy
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestUpdateWithEmptyPolicy
parameter_list|(
name|Policy
name|emptyPolicy
parameter_list|)
block|{
name|Policy
name|p1
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
name|QName
name|aqn1
init|=
operator|new
name|QName
argument_list|(
literal|"http://x.y.z"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|p1
operator|.
name|addAssertion
argument_list|(
name|mockAssertion
argument_list|(
name|aqn1
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|EndpointPolicyImpl
name|epi
init|=
operator|new
name|TestEndpointPolicy
argument_list|()
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|epi
operator|.
name|setPolicy
argument_list|(
name|p1
operator|.
name|normalize
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Policy
name|ep
init|=
name|epi
operator|.
name|updatePolicy
argument_list|(
name|emptyPolicy
argument_list|)
operator|.
name|getPolicy
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExactlyOne
argument_list|>
name|pops
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|ep
operator|.
name|getPolicyComponents
argument_list|()
argument_list|,
name|ExactlyOne
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"New policy must have 1 top level policy operator"
argument_list|,
literal|1
argument_list|,
name|pops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|All
argument_list|>
name|alts
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|pops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPolicyComponents
argument_list|()
argument_list|,
name|All
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1 alternatives should be available"
argument_list|,
literal|1
argument_list|,
name|alts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PolicyAssertion
argument_list|>
name|assertions1
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|alts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAssertions
argument_list|()
argument_list|,
name|PolicyAssertion
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1 assertion should be available"
argument_list|,
literal|1
argument_list|,
name|assertions1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QName
name|n1
init|=
name|assertions1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Policy was not merged"
argument_list|,
name|n1
operator|.
name|equals
argument_list|(
name|aqn1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PolicyAssertion
name|mockAssertion
parameter_list|(
name|QName
name|name
parameter_list|,
name|int
name|howMany
parameter_list|,
name|boolean
name|normalize
parameter_list|)
block|{
name|PolicyAssertion
name|a
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyAssertion
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|name
argument_list|)
operator|.
name|times
argument_list|(
name|howMany
argument_list|)
expr_stmt|;
if|if
condition|(
name|normalize
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|a
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Constants
operator|.
name|TYPE_ASSERTION
argument_list|)
operator|.
name|times
argument_list|(
name|howMany
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|a
operator|.
name|normalize
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|a
argument_list|)
operator|.
name|times
argument_list|(
name|howMany
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitialiseInterceptorsServer
parameter_list|()
block|{
name|doTestInitializeInterceptors
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitialiseInterceptorsClient
parameter_list|()
block|{
name|doTestInitializeInterceptors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestInitializeInterceptors
parameter_list|(
name|boolean
name|requestor
parameter_list|)
block|{
name|EndpointInfo
name|ei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|PolicyEngineImpl
name|engine
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyEngineImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointPolicyImpl
name|epi
init|=
operator|new
name|EndpointPolicyImpl
argument_list|(
name|ei
argument_list|,
name|engine
argument_list|,
name|requestor
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|v
init|=
operator|new
name|ArrayList
argument_list|<
name|Assertion
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|fv
init|=
operator|new
name|ArrayList
argument_list|<
name|Assertion
argument_list|>
argument_list|()
decl_stmt|;
name|QName
name|aqn
init|=
operator|new
name|QName
argument_list|(
literal|"http://x.y.z"
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|v
operator|.
name|add
argument_list|(
name|mockAssertion
argument_list|(
name|aqn
argument_list|,
name|requestor
condition|?
literal|2
else|:
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|.
name|add
argument_list|(
name|mockAssertion
argument_list|(
name|aqn
argument_list|,
name|requestor
condition|?
literal|2
else|:
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|fv
operator|.
name|addAll
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|epi
operator|.
name|setVocabulary
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|epi
operator|.
name|setChosenAlternative
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|epi
operator|.
name|setFaultVocabulary
argument_list|(
name|fv
argument_list|)
expr_stmt|;
name|PolicyInterceptorProviderRegistry
name|reg
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyInterceptorProviderRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|setupPolicyInterceptorProviderRegistry
argument_list|(
name|engine
argument_list|,
name|reg
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|li
init|=
name|createMockInterceptorList
argument_list|()
decl_stmt|;
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|api
init|=
name|li
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|reg
operator|.
name|getInInterceptorsForAssertion
argument_list|(
name|aqn
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|li
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
if|if
condition|(
name|requestor
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|reg
operator|.
name|getInFaultInterceptorsForAssertion
argument_list|(
name|aqn
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|li
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Message
name|m
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|epi
operator|.
name|initializeInterceptors
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|epi
operator|.
name|getInterceptors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|api
argument_list|,
name|epi
operator|.
name|getInterceptors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|requestor
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|epi
operator|.
name|getFaultInterceptors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|api
argument_list|,
name|epi
operator|.
name|getFaultInterceptors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|epi
operator|.
name|getFaultInterceptors
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setupPolicyInterceptorProviderRegistry
parameter_list|(
name|PolicyEngineImpl
name|engine
parameter_list|,
name|PolicyInterceptorProviderRegistry
name|reg
parameter_list|)
block|{
name|Bus
name|bus
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|engine
operator|.
name|getBus
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bus
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyInterceptorProviderRegistry
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|reg
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

