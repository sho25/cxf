begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|attachment
operator|.
name|external
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingFaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|primitive
operator|.
name|PrimitiveAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|UrlResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|ExternalAttachmentProviderTest
block|{
specifier|private
specifier|static
specifier|final
name|QName
name|TEST_ASSERTION_TYPE
init|=
operator|new
name|QName
argument_list|(
literal|"http://a.b.c"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|Policy
name|policy
decl_stmt|;
specifier|private
name|Assertion
name|assertion
decl_stmt|;
specifier|private
name|PolicyAttachment
name|attachment
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|PolicyAttachment
argument_list|>
name|attachments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasic
parameter_list|()
block|{
name|ExternalAttachmentProvider
name|eap
init|=
operator|new
name|ExternalAttachmentProvider
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|eap
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|uri
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|eap
operator|.
name|setLocation
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|uri
argument_list|,
name|eap
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveFaultPolicy
parameter_list|()
block|{
name|ExternalAttachmentProvider
name|eap
init|=
operator|new
name|ExternalAttachmentProvider
argument_list|()
decl_stmt|;
name|BindingFaultInfo
name|bfi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingFaultInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpAttachment
argument_list|(
name|bfi
argument_list|,
literal|false
argument_list|,
name|eap
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|eap
operator|.
name|getEffectivePolicy
argument_list|(
name|bfi
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|setUpAttachment
argument_list|(
name|bfi
argument_list|,
literal|true
argument_list|,
name|eap
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|assertion
argument_list|,
name|eap
operator|.
name|getEffectivePolicy
argument_list|(
name|bfi
argument_list|,
literal|null
argument_list|)
operator|.
name|getAssertions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveMessagePolicy
parameter_list|()
block|{
name|ExternalAttachmentProvider
name|eap
init|=
operator|new
name|ExternalAttachmentProvider
argument_list|()
decl_stmt|;
name|BindingMessageInfo
name|bmi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingMessageInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpAttachment
argument_list|(
name|bmi
argument_list|,
literal|false
argument_list|,
name|eap
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|eap
operator|.
name|getEffectivePolicy
argument_list|(
name|bmi
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|setUpAttachment
argument_list|(
name|bmi
argument_list|,
literal|true
argument_list|,
name|eap
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|assertion
argument_list|,
name|eap
operator|.
name|getEffectivePolicy
argument_list|(
name|bmi
argument_list|,
literal|null
argument_list|)
operator|.
name|getAssertions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveOperationPolicy
parameter_list|()
block|{
name|BindingOperationInfo
name|boi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExternalAttachmentProvider
name|eap
init|=
operator|new
name|ExternalAttachmentProvider
argument_list|()
decl_stmt|;
name|setUpAttachment
argument_list|(
name|boi
argument_list|,
literal|false
argument_list|,
name|eap
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|eap
operator|.
name|getEffectivePolicy
argument_list|(
name|boi
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|setUpAttachment
argument_list|(
name|boi
argument_list|,
literal|true
argument_list|,
name|eap
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|assertion
argument_list|,
name|eap
operator|.
name|getEffectivePolicy
argument_list|(
name|boi
argument_list|,
literal|null
argument_list|)
operator|.
name|getAssertions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveEndpointPolicy
parameter_list|()
block|{
name|ExternalAttachmentProvider
name|eap
init|=
operator|new
name|ExternalAttachmentProvider
argument_list|()
decl_stmt|;
name|EndpointInfo
name|ei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpAttachment
argument_list|(
name|ei
argument_list|,
literal|false
argument_list|,
name|eap
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|eap
operator|.
name|getEffectivePolicy
argument_list|(
name|ei
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|setUpAttachment
argument_list|(
name|ei
argument_list|,
literal|true
argument_list|,
name|eap
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|assertion
argument_list|,
name|eap
operator|.
name|getEffectivePolicy
argument_list|(
name|ei
argument_list|,
literal|null
argument_list|)
operator|.
name|getAssertions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveServicePolicy
parameter_list|()
block|{
name|ExternalAttachmentProvider
name|eap
init|=
operator|new
name|ExternalAttachmentProvider
argument_list|()
decl_stmt|;
name|ServiceInfo
name|si
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpAttachment
argument_list|(
name|si
argument_list|,
literal|false
argument_list|,
name|eap
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|eap
operator|.
name|getEffectivePolicy
argument_list|(
name|si
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|setUpAttachment
argument_list|(
name|si
argument_list|,
literal|true
argument_list|,
name|eap
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|assertion
argument_list|,
name|eap
operator|.
name|getEffectivePolicy
argument_list|(
name|si
argument_list|,
literal|null
argument_list|)
operator|.
name|getAssertions
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadDocumentNotExisting
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|ExternalAttachmentProvider
name|eap
init|=
operator|new
name|ExternalAttachmentProvider
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|ExternalAttachmentProviderTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"resources/attachments1.xml"
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|url
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
name|uri
operator|=
name|uri
operator|.
name|replaceAll
argument_list|(
literal|"attachments1.xml"
argument_list|,
literal|"attachments0.xml"
argument_list|)
expr_stmt|;
name|eap
operator|.
name|setLocation
argument_list|(
operator|new
name|UrlResource
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|eap
operator|.
name|readDocument
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected PolicyException not thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PolicyException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|FileNotFoundException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadDocumentWithoutAttachmentElements
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|ExternalAttachmentProvider
name|eap
init|=
operator|new
name|ExternalAttachmentProvider
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|ExternalAttachmentProviderTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"resources/attachments1.xml"
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|url
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
name|eap
operator|.
name|setLocation
argument_list|(
operator|new
name|UrlResource
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|eap
operator|.
name|readDocument
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|eap
operator|.
name|getAttachments
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadDocumentAttachmentElementWithoutAppliesTo
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|ExternalAttachmentProvider
name|eap
init|=
operator|new
name|ExternalAttachmentProvider
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|ExternalAttachmentProviderTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"resources/attachments2.xml"
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|url
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
name|eap
operator|.
name|setLocation
argument_list|(
operator|new
name|UrlResource
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|eap
operator|.
name|readDocument
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|eap
operator|.
name|getAttachments
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadDocumentUnknownDomainExpression
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|Bus
name|bus
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|DomainExpressionBuilderRegistry
name|debr
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DomainExpressionBuilderRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|DomainExpressionBuilderRegistry
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|debr
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|debr
operator|.
name|build
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|Element
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andThrow
argument_list|(
operator|new
name|PolicyException
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|ExternalAttachmentProviderTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"resources/attachments3.xml"
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|url
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|ExternalAttachmentProvider
name|eap
init|=
operator|new
name|ExternalAttachmentProvider
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|eap
operator|.
name|setLocation
argument_list|(
operator|new
name|UrlResource
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|eap
operator|.
name|readDocument
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected PolicyException not thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PolicyException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadDocumentEPRDomainExpression
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|Bus
name|bus
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|DomainExpressionBuilderRegistry
name|debr
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DomainExpressionBuilderRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|DomainExpressionBuilderRegistry
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|debr
argument_list|)
expr_stmt|;
name|DomainExpression
name|de
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DomainExpression
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|debr
operator|.
name|build
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|Element
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|de
argument_list|)
expr_stmt|;
name|PolicyBuilder
name|pb
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyBuilder
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|pb
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Policy
name|p
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|pb
operator|.
name|getPolicy
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|Element
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|ExternalAttachmentProvider
name|eap
init|=
operator|new
name|ExternalAttachmentProvider
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|ExternalAttachmentProviderTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"resources/attachments4.xml"
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|url
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
name|eap
operator|.
name|setLocation
argument_list|(
operator|new
name|UrlResource
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|eap
operator|.
name|readDocument
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|eap
operator|.
name|getAttachments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PolicyAttachment
name|pa
init|=
name|eap
operator|.
name|getAttachments
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|p
argument_list|,
name|pa
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pa
operator|.
name|getDomainExpressions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|de
argument_list|,
name|pa
operator|.
name|getDomainExpressions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
name|void
name|setUpAttachment
parameter_list|(
name|Object
name|subject
parameter_list|,
name|boolean
name|applies
parameter_list|,
name|ExternalAttachmentProvider
name|eap
parameter_list|)
block|{
name|attachments
operator|.
name|clear
argument_list|()
expr_stmt|;
name|attachment
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyAttachment
operator|.
name|class
argument_list|)
expr_stmt|;
name|attachments
operator|.
name|add
argument_list|(
name|attachment
argument_list|)
expr_stmt|;
name|policy
operator|=
operator|new
name|Policy
argument_list|()
expr_stmt|;
name|assertion
operator|=
operator|new
name|PrimitiveAssertion
argument_list|(
name|TEST_ASSERTION_TYPE
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addAssertion
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
name|eap
operator|.
name|setAttachments
argument_list|(
name|attachments
argument_list|)
expr_stmt|;
if|if
condition|(
name|subject
operator|instanceof
name|ServiceInfo
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|attachment
operator|.
name|appliesTo
argument_list|(
operator|(
name|ServiceInfo
operator|)
name|subject
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|applies
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subject
operator|instanceof
name|EndpointInfo
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|attachment
operator|.
name|appliesTo
argument_list|(
operator|(
name|EndpointInfo
operator|)
name|subject
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|applies
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subject
operator|instanceof
name|BindingOperationInfo
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|attachment
operator|.
name|appliesTo
argument_list|(
operator|(
name|BindingOperationInfo
operator|)
name|subject
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|applies
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subject
operator|instanceof
name|BindingMessageInfo
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|attachment
operator|.
name|appliesTo
argument_list|(
operator|(
name|BindingMessageInfo
operator|)
name|subject
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|applies
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|subject
operator|instanceof
name|BindingFaultInfo
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|attachment
operator|.
name|appliesTo
argument_list|(
operator|(
name|BindingFaultInfo
operator|)
name|subject
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|applies
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"subject class: "
operator|+
name|subject
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|applies
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|attachment
operator|.
name|getPolicy
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

