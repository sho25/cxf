begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|attachment
operator|.
name|reference
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|UnknownExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|DescriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|ReferenceResolverTest
extends|extends
name|Assert
block|{
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|PolicyConstants
name|constants
init|=
operator|new
name|PolicyConstants
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocalServiceModelReferenceResolver
parameter_list|()
block|{
name|DescriptionInfo
name|di
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DescriptionInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|PolicyBuilder
name|builder
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalServiceModelReferenceResolver
name|resolver
init|=
operator|new
name|LocalServiceModelReferenceResolver
argument_list|(
name|di
argument_list|,
name|builder
argument_list|,
name|constants
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UnknownExtensibilityElement
argument_list|>
name|extensions
init|=
operator|new
name|ArrayList
argument_list|<
name|UnknownExtensibilityElement
argument_list|>
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|di
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|extensions
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|resolver
operator|.
name|resolveReference
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|UnknownExtensibilityElement
name|extension
init|=
name|control
operator|.
name|createMock
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
decl_stmt|;
name|extensions
operator|.
name|add
argument_list|(
name|extension
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|di
operator|.
name|getExtensors
argument_list|(
name|UnknownExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|extensions
argument_list|)
expr_stmt|;
name|Element
name|e
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Element
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|extension
operator|.
name|getElement
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|e
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QName
name|qn
init|=
operator|new
name|QName
argument_list|(
name|constants
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|constants
operator|.
name|getPolicyElemName
argument_list|()
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|extension
operator|.
name|getElementType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|qn
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|e
operator|.
name|getAttributeNS
argument_list|(
name|constants
operator|.
name|getWSUNamespace
argument_list|()
argument_list|,
name|constants
operator|.
name|getIdAttrName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|Policy
name|p
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|builder
operator|.
name|getPolicy
argument_list|(
name|e
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|p
argument_list|,
name|resolver
operator|.
name|resolveReference
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocalDocumentReferenceResolver
parameter_list|()
block|{
name|Document
name|doc
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|PolicyBuilder
name|builder
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|LocalDocumentReferenceResolver
name|resolver
init|=
operator|new
name|LocalDocumentReferenceResolver
argument_list|(
name|doc
argument_list|,
name|builder
argument_list|,
name|constants
argument_list|)
decl_stmt|;
name|NodeList
name|nl
init|=
name|control
operator|.
name|createMock
argument_list|(
name|NodeList
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|doc
operator|.
name|getElementsByTagNameNS
argument_list|(
name|constants
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|constants
operator|.
name|getPolicyElemName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|nl
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|nl
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|resolver
operator|.
name|resolveReference
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|doc
operator|.
name|getElementsByTagNameNS
argument_list|(
name|constants
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|constants
operator|.
name|getPolicyElemName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|nl
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|nl
operator|.
name|getLength
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Element
name|e
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Element
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|nl
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|e
operator|.
name|getAttributeNS
argument_list|(
name|constants
operator|.
name|getWSUNamespace
argument_list|()
argument_list|,
name|constants
operator|.
name|getIdAttrName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|Policy
name|p
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|builder
operator|.
name|getPolicy
argument_list|(
name|e
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|p
argument_list|,
name|resolver
operator|.
name|resolveReference
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoteReferenceResolverWithOlderNs
parameter_list|()
block|{
name|doTestRemoteResolver
argument_list|(
name|PolicyConstants
operator|.
name|NAMESPACE_W3_200607
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoteReferenceResolverWithDefaultNs
parameter_list|()
block|{
name|doTestRemoteResolver
argument_list|(
name|PolicyConstants
operator|.
name|NAMESPACE_WS_POLICY
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestRemoteResolver
parameter_list|(
name|String
name|policyNs
parameter_list|)
block|{
name|constants
operator|.
name|setNamespace
argument_list|(
name|policyNs
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
name|ReferenceResolverTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"referring.wsdl"
argument_list|)
decl_stmt|;
name|String
name|baseURI
init|=
name|url
operator|.
name|toString
argument_list|()
decl_stmt|;
name|PolicyBuilder
name|builder
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|RemoteReferenceResolver
name|resolver
init|=
operator|new
name|RemoteReferenceResolver
argument_list|(
name|baseURI
argument_list|,
name|builder
argument_list|,
name|constants
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|resolver
operator|.
name|resolveReference
argument_list|(
literal|"referred.wsdl#PolicyB"
argument_list|)
argument_list|)
expr_stmt|;
name|Policy
name|p
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|builder
operator|.
name|getPolicy
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|Element
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|p
argument_list|,
name|resolver
operator|.
name|resolveReference
argument_list|(
literal|"referred.wsdl#PolicyA"
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

