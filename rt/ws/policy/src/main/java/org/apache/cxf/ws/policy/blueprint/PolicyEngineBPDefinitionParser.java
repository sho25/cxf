begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|blueprint
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|ParserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|mutable
operator|.
name|MutableBeanMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|blueprint
operator|.
name|AbstractBPBeanDefinitionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|AbstractFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AlternativeSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyEngineImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|Metadata
import|;
end_import

begin_class
specifier|public
class|class
name|PolicyEngineBPDefinitionParser
extends|extends
name|AbstractBPBeanDefinitionParser
block|{
specifier|public
name|Metadata
name|parse
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|context
parameter_list|)
block|{
name|MutableBeanMetadata
name|policyEngineConfig
init|=
name|context
operator|.
name|createMetadata
argument_list|(
name|MutableBeanMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
name|policyEngineConfig
operator|.
name|setRuntimeClass
argument_list|(
name|PolicyEngineConfig
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|bus
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"bus"
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|bus
argument_list|)
condition|)
block|{
name|bus
operator|=
literal|"cxf"
expr_stmt|;
block|}
name|policyEngineConfig
operator|.
name|addArgument
argument_list|(
name|getBusRef
argument_list|(
name|context
argument_list|,
name|bus
argument_list|)
argument_list|,
name|Bus
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|parseAttributes
argument_list|(
name|element
argument_list|,
name|context
argument_list|,
name|policyEngineConfig
argument_list|)
expr_stmt|;
name|parseChildElements
argument_list|(
name|element
argument_list|,
name|context
argument_list|,
name|policyEngineConfig
argument_list|)
expr_stmt|;
name|policyEngineConfig
operator|.
name|setId
argument_list|(
name|PolicyEngineConfig
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
name|context
operator|.
name|generateId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|policyEngineConfig
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|mapElement
parameter_list|(
name|ParserContext
name|ctx
parameter_list|,
name|MutableBeanMetadata
name|bean
parameter_list|,
name|Element
name|el
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
literal|"alternativeSelector"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|setFirstChildAsProperty
argument_list|(
name|el
argument_list|,
name|ctx
argument_list|,
name|bean
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PolicyEngineConfig
extends|extends
name|AbstractFeature
block|{
specifier|private
name|PolicyEngineImpl
name|engine
decl_stmt|;
specifier|public
name|PolicyEngineConfig
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|engine
operator|=
operator|(
name|PolicyEngineImpl
operator|)
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyEngine
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|getEnabled
parameter_list|()
block|{
return|return
name|engine
operator|.
name|isEnabled
argument_list|()
return|;
block|}
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|engine
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|getIgnoreUnknownAssertions
parameter_list|()
block|{
return|return
name|engine
operator|.
name|isIgnoreUnknownAssertions
argument_list|()
return|;
block|}
specifier|public
name|void
name|setIgnoreUnknownAssertions
parameter_list|(
name|boolean
name|ignoreUnknownAssertions
parameter_list|)
block|{
name|engine
operator|.
name|setIgnoreUnknownAssertions
argument_list|(
name|ignoreUnknownAssertions
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AlternativeSelector
name|getAlternativeSelector
parameter_list|()
block|{
return|return
name|engine
operator|.
name|getAlternativeSelector
argument_list|()
return|;
block|}
specifier|public
name|void
name|setAlternativeSelector
parameter_list|(
name|AlternativeSelector
name|alternativeSelector
parameter_list|)
block|{
name|engine
operator|.
name|setAlternativeSelector
argument_list|(
name|alternativeSelector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

