begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBContextCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBContextCache
operator|.
name|CachedContextAndSchemas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|primitive
operator|.
name|PrimitiveAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyComponent
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|JaxbAssertion
parameter_list|<
name|T
parameter_list|>
extends|extends
name|PrimitiveAssertion
block|{
specifier|private
name|JAXBContext
name|context
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
decl_stmt|;
specifier|private
name|T
name|data
decl_stmt|;
specifier|public
name|JaxbAssertion
parameter_list|()
block|{     }
specifier|public
name|JaxbAssertion
parameter_list|(
name|QName
name|qn
parameter_list|,
name|boolean
name|optional
parameter_list|)
block|{
name|super
argument_list|(
name|qn
argument_list|,
name|optional
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JaxbAssertion
parameter_list|(
name|QName
name|qn
parameter_list|,
name|boolean
name|optional
parameter_list|,
name|boolean
name|ignorable
parameter_list|)
block|{
name|super
argument_list|(
name|qn
argument_list|,
name|optional
argument_list|,
name|ignorable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|boolean
name|equal
parameter_list|(
name|PolicyComponent
name|policyComponent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|super
operator|.
name|equal
argument_list|(
name|policyComponent
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|JaxbAssertion
argument_list|<
name|T
argument_list|>
name|a
init|=
operator|(
name|JaxbAssertion
argument_list|<
name|T
argument_list|>
operator|)
name|policyComponent
decl_stmt|;
return|return
name|data
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getData
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|setData
parameter_list|(
name|T
name|d
parameter_list|)
block|{
name|data
operator|=
name|d
expr_stmt|;
block|}
specifier|public
name|T
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
specifier|protected
name|Assertion
name|clone
parameter_list|(
name|boolean
name|optional
parameter_list|)
block|{
name|JaxbAssertion
argument_list|<
name|T
argument_list|>
name|a
init|=
operator|new
name|JaxbAssertion
argument_list|<
name|T
argument_list|>
argument_list|(
name|getName
argument_list|()
argument_list|,
name|optional
argument_list|,
name|ignorable
argument_list|)
decl_stmt|;
name|a
operator|.
name|setData
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|JaxbAssertion
argument_list|<
name|T
argument_list|>
name|cast
parameter_list|(
name|Assertion
name|a
parameter_list|)
block|{
return|return
operator|(
name|JaxbAssertion
argument_list|<
name|T
argument_list|>
operator|)
name|a
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|JaxbAssertion
argument_list|<
name|T
argument_list|>
name|cast
parameter_list|(
name|Assertion
name|a
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|(
name|JaxbAssertion
argument_list|<
name|T
argument_list|>
operator|)
name|a
return|;
block|}
specifier|private
specifier|synchronized
name|JAXBContext
name|getContext
parameter_list|()
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|classes
operator|==
literal|null
condition|)
block|{
name|CachedContextAndSchemas
name|ccs
init|=
name|JAXBContextCache
operator|.
name|getCachedContextAndSchemas
argument_list|(
name|data
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|classes
operator|=
name|ccs
operator|.
name|getClasses
argument_list|()
expr_stmt|;
name|context
operator|=
name|ccs
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serialize
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
try|try
block|{
name|JAXBContext
name|ctx
init|=
name|getContext
argument_list|()
decl_stmt|;
name|Marshaller
name|marshaller
init|=
name|ctx
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|setProperty
argument_list|(
literal|"jaxb.fragment"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|marshaller
operator|.
name|marshal
argument_list|(
name|data
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

