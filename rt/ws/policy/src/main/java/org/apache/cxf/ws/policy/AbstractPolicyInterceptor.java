begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingFaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractPolicyInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|protected
name|Bus
name|bus
decl_stmt|;
specifier|public
name|AbstractPolicyInterceptor
parameter_list|(
name|String
name|phase
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AbstractPolicyInterceptor
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|phase
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|phase
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
try|try
block|{
name|handle
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PolicyException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|getTransportAssertions
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Exchange
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|Assertor
name|assertor
init|=
literal|null
decl_stmt|;
name|Conduit
name|conduit
init|=
name|ex
operator|.
name|getConduit
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|conduit
operator|instanceof
name|Assertor
condition|)
block|{
name|assertor
operator|=
operator|(
name|Assertor
operator|)
name|conduit
expr_stmt|;
block|}
else|else
block|{
name|Destination
name|destination
init|=
name|ex
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|destination
operator|instanceof
name|Assertor
condition|)
block|{
name|assertor
operator|=
operator|(
name|Assertor
operator|)
name|destination
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|assertor
condition|)
block|{
name|assertor
operator|.
name|assertMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|BindingFaultInfo
name|getBindingFaultInfo
parameter_list|(
name|Message
name|msg
parameter_list|,
name|Exception
name|ex
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
name|BindingFaultInfo
name|bfi
init|=
name|msg
operator|.
name|get
argument_list|(
name|BindingFaultInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|bfi
condition|)
block|{
name|Throwable
name|cause
init|=
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|cause
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|BindingFaultInfo
name|b
range|:
name|boi
operator|.
name|getFaults
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|faultClass
init|=
name|b
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getProperty
argument_list|(
name|Class
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|Class
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|faultClass
operator|.
name|isAssignableFrom
argument_list|(
name|cause
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|bfi
operator|=
name|b
expr_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|BindingFaultInfo
operator|.
name|class
argument_list|,
name|bfi
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
literal|null
operator|==
name|bfi
operator|&&
literal|null
operator|!=
name|boi
operator|.
name|getWrappedOperation
argument_list|()
condition|)
block|{
for|for
control|(
name|BindingFaultInfo
name|b
range|:
name|boi
operator|.
name|getWrappedOperation
argument_list|()
operator|.
name|getFaults
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|faultClass
init|=
name|b
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|getProperty
argument_list|(
name|Class
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|Class
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|faultClass
operator|.
name|isAssignableFrom
argument_list|(
name|cause
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|bfi
operator|=
name|b
expr_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|BindingFaultInfo
operator|.
name|class
argument_list|,
name|bfi
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|bfi
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|handle
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|PolicyException
function_decl|;
block|}
end_class

end_unit

