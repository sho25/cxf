begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|policy
operator|.
name|PolicyCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|policy
operator|.
name|PolicyDataEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|jaxb
operator|.
name|JaxbAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_class
specifier|public
class|class
name|PolicyDataEngineImpl
implements|implements
name|PolicyDataEngine
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|PolicyDataEngineImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|PolicyEngine
name|policyEngine
decl_stmt|;
specifier|public
name|PolicyDataEngineImpl
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
block|}
name|void
name|setPolicyEngine
parameter_list|(
name|PolicyEngine
name|policyEngine
parameter_list|)
block|{
name|this
operator|.
name|policyEngine
operator|=
name|policyEngine
expr_stmt|;
block|}
specifier|private
name|PolicyEngine
name|getPolicyEngine
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|policyEngine
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|policyEngine
operator|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyEngine
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|policyEngine
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getClientEndpointPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|Conduit
name|c
parameter_list|,
name|PolicyCalculator
argument_list|<
name|T
argument_list|>
name|policyCalculator
parameter_list|)
block|{
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|alternative
init|=
name|getPolicyEngine
argument_list|()
operator|.
name|getClientEndpointPolicy
argument_list|(
name|ei
argument_list|,
name|c
argument_list|)
operator|.
name|getChosenAlternative
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|filteredPolicies
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Assertion
name|a
range|:
name|alternative
control|)
block|{
if|if
condition|(
name|policyCalculator
operator|.
name|getDataClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|T
name|p
init|=
name|JaxbAssertion
operator|.
name|cast
argument_list|(
name|a
argument_list|,
name|policyCalculator
operator|.
name|getDataClass
argument_list|()
argument_list|)
operator|.
name|getData
argument_list|()
decl_stmt|;
name|filteredPolicies
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getPolicy
argument_list|(
name|filteredPolicies
argument_list|,
name|policyCalculator
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getPolicy
parameter_list|(
name|Message
name|message
parameter_list|,
name|T
name|confPolicy
parameter_list|,
name|PolicyCalculator
argument_list|<
name|T
argument_list|>
name|intersector
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|policies
init|=
name|getPoliciesFromMessage
argument_list|(
name|intersector
operator|.
name|getDataClassName
argument_list|()
argument_list|,
name|message
argument_list|,
name|intersector
operator|.
name|getDataClass
argument_list|()
argument_list|)
decl_stmt|;
name|policies
operator|.
name|add
argument_list|(
name|confPolicy
argument_list|)
expr_stmt|;
return|return
name|getPolicy
argument_list|(
name|policies
argument_list|,
name|intersector
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getServerEndpointPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|Destination
name|d
parameter_list|,
name|PolicyCalculator
argument_list|<
name|T
argument_list|>
name|policyCalculator
parameter_list|)
block|{
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|alternative
init|=
name|getPolicyEngine
argument_list|()
operator|.
name|getServerEndpointPolicy
argument_list|(
name|ei
argument_list|,
name|d
argument_list|)
operator|.
name|getChosenAlternative
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|filteredPolicies
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Assertion
name|a
range|:
name|alternative
control|)
block|{
if|if
condition|(
name|policyCalculator
operator|.
name|getDataClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|T
name|p
init|=
name|JaxbAssertion
operator|.
name|cast
argument_list|(
name|a
argument_list|,
name|policyCalculator
operator|.
name|getDataClass
argument_list|()
argument_list|)
operator|.
name|getData
argument_list|()
decl_stmt|;
name|filteredPolicies
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getPolicy
argument_list|(
name|filteredPolicies
argument_list|,
name|policyCalculator
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getPoliciesFromMessage
parameter_list|(
name|QName
name|name
parameter_list|,
name|Message
name|message
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|dataClass
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|policies
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|AssertionInfoMap
name|amap
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|amap
operator|||
name|amap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|policies
return|;
block|}
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|amap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ais
condition|)
block|{
return|return
name|policies
return|;
block|}
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|T
name|policy
init|=
name|JaxbAssertion
operator|.
name|cast
argument_list|(
name|ai
operator|.
name|getAssertion
argument_list|()
argument_list|,
name|dataClass
argument_list|)
operator|.
name|getData
argument_list|()
decl_stmt|;
name|policies
operator|.
name|add
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
return|return
name|policies
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|assertMessage
parameter_list|(
name|Message
name|message
parameter_list|,
name|T
name|confPol
parameter_list|,
name|PolicyCalculator
argument_list|<
name|T
argument_list|>
name|policyCalculator
parameter_list|)
block|{
name|T
name|messagePol
init|=
name|message
operator|.
name|get
argument_list|(
name|policyCalculator
operator|.
name|getDataClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|T
name|refPolicy
init|=
operator|(
name|messagePol
operator|!=
literal|null
operator|)
condition|?
name|policyCalculator
operator|.
name|intersect
argument_list|(
name|messagePol
argument_list|,
name|confPol
argument_list|)
else|:
name|confPol
decl_stmt|;
name|AssertionInfoMap
name|amap
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|amap
operator|||
name|amap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|amap
operator|.
name|get
argument_list|(
name|policyCalculator
operator|.
name|getDataClassName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|T
name|policy
init|=
name|JaxbAssertion
operator|.
name|cast
argument_list|(
name|ai
operator|.
name|getAssertion
argument_list|()
argument_list|,
name|policyCalculator
operator|.
name|getDataClass
argument_list|()
argument_list|)
operator|.
name|getData
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
name|policyCalculator
operator|.
name|isAsserted
argument_list|(
name|message
argument_list|,
name|policy
argument_list|,
name|refPolicy
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|getPolicy
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|policies
parameter_list|,
name|PolicyCalculator
argument_list|<
name|T
argument_list|>
name|intersector
parameter_list|)
block|{
name|T
name|compatible
init|=
literal|null
decl_stmt|;
for|for
control|(
name|T
name|p
range|:
name|policies
control|)
block|{
if|if
condition|(
literal|null
operator|==
name|compatible
condition|)
block|{
name|compatible
operator|=
name|p
expr_stmt|;
block|}
else|else
block|{
name|compatible
operator|=
name|intersector
operator|.
name|intersect
argument_list|(
name|compatible
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|compatible
condition|)
block|{
name|logAndThrowPolicyException
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|compatible
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|logAndThrowPolicyException
parameter_list|(
name|T
name|dataClass
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"INCOMPATIBLE_HTTPCLIENTPOLICY_ASSERTIONS"
argument_list|,
name|LOG
argument_list|,
name|dataClass
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PolicyException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

