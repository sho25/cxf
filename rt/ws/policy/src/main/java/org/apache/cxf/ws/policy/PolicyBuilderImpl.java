begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|injection
operator|.
name|NoJSR250Annotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|extension
operator|.
name|BusExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|All
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|ExactlyOne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyRegistry
import|;
end_import

begin_comment
comment|/**  * PolicyBuilderImpl is an implementation of the PolicyBuilder interface,  * provides methods to create Policy and PolicyReferenceObjects  * from DOM elements, but also from an input stream etc.  */
end_comment

begin_class
annotation|@
name|NoJSR250Annotations
specifier|public
class|class
name|PolicyBuilderImpl
implements|implements
name|PolicyBuilder
implements|,
name|BusExtension
block|{
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|PolicyBuilderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AssertionBuilderRegistry
name|assertionBuilderRegistry
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|public
name|PolicyBuilderImpl
parameter_list|()
block|{     }
specifier|public
name|PolicyBuilderImpl
parameter_list|(
name|Bus
name|theBus
parameter_list|)
block|{
name|bus
operator|=
name|theBus
expr_stmt|;
name|assertionBuilderRegistry
operator|=
name|theBus
operator|.
name|getExtension
argument_list|(
name|AssertionBuilderRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getRegistrationType
parameter_list|()
block|{
return|return
name|PolicyBuilder
operator|.
name|class
return|;
block|}
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|theBus
parameter_list|)
block|{
name|bus
operator|=
name|theBus
expr_stmt|;
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
specifier|public
name|void
name|setAssertionBuilderRegistry
parameter_list|(
name|AssertionBuilderRegistry
name|abr
parameter_list|)
block|{
name|assertionBuilderRegistry
operator|=
name|abr
expr_stmt|;
block|}
specifier|public
name|AssertionBuilderRegistry
name|getAssertionBuilderRegistry
parameter_list|()
block|{
return|return
name|assertionBuilderRegistry
return|;
block|}
comment|/**      * Creates a PolicyReference object from an InputStream.      *       * @param inputStream the input stream      * @return the PolicyReference constructed from the input stream      */
specifier|public
name|PolicyReference
name|getPolicyReference
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
block|{
name|Element
name|element
init|=
name|DOMUtils
operator|.
name|readXml
argument_list|(
name|is
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
return|return
name|getPolicyReference
argument_list|(
name|element
argument_list|)
return|;
block|}
comment|/**      * Creates a PolicyReference object from a DOM element.      *       * @param element the element      * @return the PolicyReference object constructed from the element      */
specifier|public
name|PolicyReference
name|getPolicyReference
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Constants
operator|.
name|ELEM_POLICY_REF
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PolicyException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"NOT_A_POLICYREF_ELEMENT_EXC"
argument_list|,
name|BUNDLE
argument_list|)
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|element
init|)
block|{
name|PolicyReference
name|reference
init|=
operator|new
name|PolicyReference
argument_list|()
decl_stmt|;
name|reference
operator|.
name|setURI
argument_list|(
name|element
operator|.
name|getAttribute
argument_list|(
literal|"URI"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|reference
return|;
block|}
block|}
comment|/**      * Creates a Policy object from an InputStream.      *       * @param inputStream the input stream      * @return the Policy object constructed from the input stream      */
specifier|public
name|Policy
name|getPolicy
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
block|{
name|Element
name|element
init|=
name|DOMUtils
operator|.
name|readXml
argument_list|(
name|is
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
return|return
name|getPolicy
argument_list|(
name|element
argument_list|)
return|;
block|}
comment|/**      * Creates a Policy object from a DOM element.      *       * @param element the element      * @retun the Policy object constructed from the element      */
specifier|public
name|Policy
name|getPolicy
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
return|return
name|getPolicyOperator
argument_list|(
name|element
argument_list|)
return|;
block|}
specifier|private
name|Policy
name|getPolicyOperator
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
return|return
operator|(
name|Policy
operator|)
name|processOperationElement
argument_list|(
name|element
argument_list|,
operator|new
name|Policy
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|ExactlyOne
name|getExactlyOneOperator
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
return|return
operator|(
name|ExactlyOne
operator|)
name|processOperationElement
argument_list|(
name|element
argument_list|,
operator|new
name|ExactlyOne
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|All
name|getAllOperator
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
return|return
operator|(
name|All
operator|)
name|processOperationElement
argument_list|(
name|element
argument_list|,
operator|new
name|All
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|PolicyOperator
name|processOperationElement
parameter_list|(
name|Element
name|operationElement
parameter_list|,
name|PolicyOperator
name|operator
parameter_list|)
block|{
synchronized|synchronized
init|(
name|operationElement
init|)
block|{
if|if
condition|(
name|Constants
operator|.
name|TYPE_POLICY
operator|==
name|operator
operator|.
name|getType
argument_list|()
condition|)
block|{
name|Policy
name|policyOperator
init|=
operator|(
name|Policy
operator|)
name|operator
decl_stmt|;
name|QName
name|key
decl_stmt|;
name|NamedNodeMap
name|nnm
init|=
name|operationElement
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nnm
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|nnm
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Node
operator|.
name|ATTRIBUTE_NODE
operator|==
name|n
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
name|String
name|namespace
init|=
name|n
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|key
operator|=
operator|new
name|QName
argument_list|(
name|n
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|.
name|getPrefix
argument_list|()
operator|==
literal|null
condition|)
block|{
name|key
operator|=
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|n
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|key
operator|=
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|n
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|n
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|policyOperator
operator|.
name|addAttribute
argument_list|(
name|key
argument_list|,
name|n
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Element
name|childElement
decl_stmt|;
for|for
control|(
name|Node
name|n
init|=
name|operationElement
operator|.
name|getFirstChild
argument_list|()
init|;
name|n
operator|!=
literal|null
condition|;
name|n
operator|=
name|n
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|!=
name|n
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|childElement
operator|=
operator|(
name|Element
operator|)
name|n
expr_stmt|;
name|String
name|namespaceURI
init|=
name|childElement
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|localName
init|=
name|childElement
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|QName
name|qn
init|=
operator|new
name|QName
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
decl_stmt|;
if|if
condition|(
name|PolicyConstants
operator|.
name|isPolicyElem
argument_list|(
name|qn
argument_list|)
condition|)
block|{
name|operator
operator|.
name|addPolicyComponent
argument_list|(
name|getPolicyOperator
argument_list|(
name|childElement
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PolicyConstants
operator|.
name|isAll
argument_list|(
name|qn
argument_list|)
condition|)
block|{
name|operator
operator|.
name|addPolicyComponent
argument_list|(
name|getAllOperator
argument_list|(
name|childElement
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PolicyConstants
operator|.
name|isExactlyOne
argument_list|(
name|qn
argument_list|)
condition|)
block|{
name|operator
operator|.
name|addPolicyComponent
argument_list|(
name|getExactlyOneOperator
argument_list|(
name|childElement
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PolicyConstants
operator|.
name|isPolicyRefElem
argument_list|(
name|qn
argument_list|)
condition|)
block|{
name|operator
operator|.
name|addPolicyComponent
argument_list|(
name|getPolicyReference
argument_list|(
name|childElement
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|assertionBuilderRegistry
condition|)
block|{
name|Assertion
name|a
init|=
name|assertionBuilderRegistry
operator|.
name|build
argument_list|(
name|childElement
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|a
condition|)
block|{
name|operator
operator|.
name|addPolicyComponent
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|operator
return|;
block|}
block|}
specifier|public
name|PolicyRegistry
name|getPolicyRegistry
parameter_list|()
block|{
name|PolicyEngine
name|e
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyEngine
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|e
operator|==
literal|null
condition|?
literal|null
else|:
name|e
operator|.
name|getRegistry
argument_list|()
return|;
block|}
block|}
end_class

end_unit

