begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingFaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyRegistry
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_interface
specifier|public
interface|interface
name|PolicyEngine
block|{
comment|// configuration
name|boolean
name|isEnabled
parameter_list|()
function_decl|;
name|void
name|setEnabled
parameter_list|(
name|boolean
name|e
parameter_list|)
function_decl|;
name|AlternativeSelector
name|getAlternativeSelector
parameter_list|()
function_decl|;
name|void
name|setAlternativeSelector
parameter_list|(
name|AlternativeSelector
name|selector
parameter_list|)
function_decl|;
name|boolean
name|isIgnoreUnknownAssertions
parameter_list|()
function_decl|;
name|void
name|setIgnoreUnknownAssertions
parameter_list|(
name|boolean
name|ignoreUnknownAssertions
parameter_list|)
function_decl|;
comment|//
name|boolean
name|supportsAlternative
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|PolicyComponent
argument_list|>
name|alterative
parameter_list|,
name|Assertor
name|assertor
parameter_list|,
name|Message
name|m
parameter_list|)
function_decl|;
comment|// available throughout the outbound path
name|EffectivePolicy
name|getEffectiveClientRequestPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|Conduit
name|c
parameter_list|,
name|Message
name|m
parameter_list|)
function_decl|;
name|void
name|setEffectiveClientRequestPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|EffectivePolicy
name|ep
parameter_list|)
function_decl|;
name|EffectivePolicy
name|getEffectiveServerResponsePolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|Destination
name|d
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|Assertion
argument_list|>
argument_list|>
name|incoming
parameter_list|,
name|Message
name|m
parameter_list|)
function_decl|;
name|void
name|setEffectiveServerResponsePolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|EffectivePolicy
name|ep
parameter_list|)
function_decl|;
name|EffectivePolicy
name|getEffectiveServerFaultPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|BindingFaultInfo
name|bfi
parameter_list|,
name|Destination
name|d
parameter_list|,
name|Message
name|m
parameter_list|)
function_decl|;
name|void
name|setEffectiveServerFaultPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingFaultInfo
name|bfi
parameter_list|,
name|EffectivePolicy
name|ep
parameter_list|)
function_decl|;
comment|// available throughout the inbound path
name|EndpointPolicy
name|getClientEndpointPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|Conduit
name|conduit
parameter_list|,
name|Message
name|msg
parameter_list|)
function_decl|;
name|EndpointPolicy
name|getServerEndpointPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|Destination
name|destination
parameter_list|,
name|Message
name|msg
parameter_list|)
function_decl|;
name|void
name|setServerEndpointPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|EndpointPolicy
name|ep
parameter_list|)
function_decl|;
name|void
name|setClientEndpointPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|EndpointPolicy
name|ep
parameter_list|)
function_decl|;
comment|// only available after message type has been determined
name|EffectivePolicy
name|getEffectiveServerRequestPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|Message
name|m
parameter_list|)
function_decl|;
name|void
name|setEffectiveServerRequestPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|EffectivePolicy
name|ep
parameter_list|)
function_decl|;
name|EffectivePolicy
name|getEffectiveClientResponsePolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|Message
name|m
parameter_list|)
function_decl|;
name|void
name|setEffectiveClientResponsePolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|EffectivePolicy
name|ep
parameter_list|)
function_decl|;
name|EffectivePolicy
name|getEffectiveClientFaultPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|BindingFaultInfo
name|bfi
parameter_list|,
name|Message
name|m
parameter_list|)
function_decl|;
name|void
name|setEffectiveClientFaultPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingFaultInfo
name|bfi
parameter_list|,
name|EffectivePolicy
name|ep
parameter_list|)
function_decl|;
name|void
name|addPolicy
parameter_list|(
name|Policy
name|p
parameter_list|)
function_decl|;
name|PolicyRegistry
name|getRegistry
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

