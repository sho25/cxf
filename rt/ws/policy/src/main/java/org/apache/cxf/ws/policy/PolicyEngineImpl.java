begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerLifeCycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerLifeCycleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|extension
operator|.
name|BusExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingFaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|selector
operator|.
name|MinimalAlternativeSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyRegistry
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|PolicyEngineImpl
implements|implements
name|PolicyEngine
implements|,
name|BusExtension
implements|,
name|ServerLifeCycleListener
block|{
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|PolicyRegistry
name|registry
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|PolicyProvider
argument_list|>
name|policyProviders
decl_stmt|;
specifier|private
name|boolean
name|enabled
decl_stmt|;
specifier|private
name|boolean
name|ignoreUnknownAssertions
decl_stmt|;
specifier|private
name|boolean
name|addedBusInterceptors
decl_stmt|;
specifier|private
name|AlternativeSelector
name|alternativeSelector
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|BindingOperation
argument_list|,
name|EffectivePolicy
argument_list|>
name|clientRequestInfo
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|BindingOperation
argument_list|,
name|EffectivePolicy
argument_list|>
name|clientResponseInfo
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|BindingFault
argument_list|,
name|EffectivePolicy
argument_list|>
name|clientFaultInfo
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|BindingOperation
argument_list|,
name|EffectivePolicy
argument_list|>
name|serverRequestInfo
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|BindingOperation
argument_list|,
name|EffectivePolicy
argument_list|>
name|serverResponseInfo
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|BindingFault
argument_list|,
name|EffectivePolicy
argument_list|>
name|serverFaultInfo
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|EndpointInfo
argument_list|,
name|EndpointPolicy
argument_list|>
name|serverEndpointInfo
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|EndpointInfo
argument_list|,
name|EndpointPolicy
argument_list|>
name|clientEndpointInfo
decl_stmt|;
specifier|public
name|PolicyEngineImpl
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
block|}
comment|// configuration
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
specifier|public
name|void
name|setPolicyProviders
parameter_list|(
name|Collection
argument_list|<
name|PolicyProvider
argument_list|>
name|p
parameter_list|)
block|{
name|policyProviders
operator|=
name|p
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|PolicyProvider
argument_list|>
name|getPolicyProviders
parameter_list|()
block|{
return|return
name|policyProviders
return|;
block|}
specifier|public
name|void
name|setRegistry
parameter_list|(
name|PolicyRegistry
name|r
parameter_list|)
block|{
name|registry
operator|=
name|r
expr_stmt|;
block|}
specifier|public
name|PolicyRegistry
name|getRegistry
parameter_list|()
block|{
return|return
name|registry
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|setEnabled
parameter_list|(
name|boolean
name|e
parameter_list|)
block|{
name|enabled
operator|=
name|e
expr_stmt|;
if|if
condition|(
operator|!
name|addedBusInterceptors
condition|)
block|{
name|addBusInterceptors
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|AlternativeSelector
name|getAlternativeSelector
parameter_list|()
block|{
return|return
name|alternativeSelector
return|;
block|}
specifier|public
name|void
name|setAlternativeSelector
parameter_list|(
name|AlternativeSelector
name|as
parameter_list|)
block|{
name|alternativeSelector
operator|=
name|as
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIgnoreUnknownAssertions
parameter_list|()
block|{
return|return
name|ignoreUnknownAssertions
return|;
block|}
specifier|public
name|void
name|setIgnoreUnknownAssertions
parameter_list|(
name|boolean
name|ignore
parameter_list|)
block|{
name|ignoreUnknownAssertions
operator|=
name|ignore
expr_stmt|;
block|}
comment|// BusExtension interface
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getRegistrationType
parameter_list|()
block|{
return|return
name|PolicyEngine
operator|.
name|class
return|;
block|}
comment|// PolicyEngine interface
specifier|public
name|EffectivePolicy
name|getEffectiveClientRequestPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|Conduit
name|c
parameter_list|)
block|{
name|BindingOperation
name|bo
init|=
operator|new
name|BindingOperation
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|)
decl_stmt|;
name|EffectivePolicy
name|effectivePolicy
init|=
name|clientRequestInfo
operator|.
name|get
argument_list|(
name|bo
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|effectivePolicy
condition|)
block|{
name|EffectivePolicyImpl
name|epi
init|=
name|createOutPolicyInfo
argument_list|()
decl_stmt|;
name|Assertor
name|assertor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|Assertor
condition|)
block|{
name|assertor
operator|=
operator|(
name|Assertor
operator|)
name|c
expr_stmt|;
block|}
name|epi
operator|.
name|initialise
argument_list|(
name|ei
argument_list|,
name|bo
operator|.
name|getBindingOperation
argument_list|()
argument_list|,
name|this
argument_list|,
name|assertor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|clientRequestInfo
operator|.
name|put
argument_list|(
name|bo
argument_list|,
name|epi
argument_list|)
expr_stmt|;
name|effectivePolicy
operator|=
name|epi
expr_stmt|;
block|}
return|return
name|effectivePolicy
return|;
block|}
specifier|public
name|void
name|setEffectiveClientRequestPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|EffectivePolicy
name|ep
parameter_list|)
block|{
name|BindingOperation
name|bo
init|=
operator|new
name|BindingOperation
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|)
decl_stmt|;
name|clientRequestInfo
operator|.
name|put
argument_list|(
name|bo
argument_list|,
name|ep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EffectivePolicy
name|getEffectiveServerResponsePolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|Destination
name|d
parameter_list|)
block|{
name|BindingOperation
name|bo
init|=
operator|new
name|BindingOperation
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|)
decl_stmt|;
name|EffectivePolicy
name|effectivePolicy
init|=
name|serverResponseInfo
operator|.
name|get
argument_list|(
name|bo
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|effectivePolicy
condition|)
block|{
name|EffectivePolicyImpl
name|epi
init|=
name|createOutPolicyInfo
argument_list|()
decl_stmt|;
name|Assertor
name|assertor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|d
operator|instanceof
name|Assertor
condition|)
block|{
name|assertor
operator|=
operator|(
name|Assertor
operator|)
name|d
expr_stmt|;
block|}
name|epi
operator|.
name|initialise
argument_list|(
name|ei
argument_list|,
name|bo
operator|.
name|getBindingOperation
argument_list|()
argument_list|,
name|this
argument_list|,
name|assertor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|serverResponseInfo
operator|.
name|put
argument_list|(
name|bo
argument_list|,
name|epi
argument_list|)
expr_stmt|;
name|effectivePolicy
operator|=
name|epi
expr_stmt|;
block|}
return|return
name|effectivePolicy
return|;
block|}
specifier|public
name|void
name|setEffectiveServerResponsePolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|EffectivePolicy
name|ep
parameter_list|)
block|{
name|BindingOperation
name|bo
init|=
operator|new
name|BindingOperation
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|)
decl_stmt|;
name|serverResponseInfo
operator|.
name|put
argument_list|(
name|bo
argument_list|,
name|ep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EffectivePolicy
name|getEffectiveServerFaultPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingFaultInfo
name|bfi
parameter_list|,
name|Destination
name|d
parameter_list|)
block|{
name|BindingFault
name|bf
init|=
operator|new
name|BindingFault
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|)
decl_stmt|;
name|EffectivePolicy
name|effectivePolicy
init|=
name|serverFaultInfo
operator|.
name|get
argument_list|(
name|bf
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|effectivePolicy
condition|)
block|{
name|EffectivePolicyImpl
name|epi
init|=
name|createOutPolicyInfo
argument_list|()
decl_stmt|;
name|Assertor
name|assertor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|d
operator|instanceof
name|Assertor
condition|)
block|{
name|assertor
operator|=
operator|(
name|Assertor
operator|)
name|d
expr_stmt|;
block|}
name|epi
operator|.
name|initialise
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|,
name|this
argument_list|,
name|assertor
argument_list|)
expr_stmt|;
name|serverFaultInfo
operator|.
name|put
argument_list|(
name|bf
argument_list|,
name|epi
argument_list|)
expr_stmt|;
name|effectivePolicy
operator|=
name|epi
expr_stmt|;
block|}
return|return
name|effectivePolicy
return|;
block|}
specifier|public
name|void
name|setEffectiveServerFaultPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingFaultInfo
name|bfi
parameter_list|,
name|EffectivePolicy
name|ep
parameter_list|)
block|{
name|BindingFault
name|bf
init|=
operator|new
name|BindingFault
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|)
decl_stmt|;
name|serverFaultInfo
operator|.
name|put
argument_list|(
name|bf
argument_list|,
name|ep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EndpointPolicy
name|getClientEndpointPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|Conduit
name|conduit
parameter_list|)
block|{
name|Assertor
name|assertor
init|=
name|conduit
operator|instanceof
name|Assertor
condition|?
operator|(
name|Assertor
operator|)
name|conduit
else|:
literal|null
decl_stmt|;
return|return
name|getEndpointPolicy
argument_list|(
name|ei
argument_list|,
name|clientEndpointInfo
operator|.
name|get
argument_list|(
name|ei
argument_list|)
argument_list|,
literal|true
argument_list|,
name|assertor
argument_list|)
return|;
block|}
specifier|public
name|EndpointPolicy
name|getServerEndpointPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|Destination
name|destination
parameter_list|)
block|{
name|Assertor
name|assertor
init|=
name|destination
operator|instanceof
name|Assertor
condition|?
operator|(
name|Assertor
operator|)
name|destination
else|:
literal|null
decl_stmt|;
return|return
name|getEndpointPolicy
argument_list|(
name|ei
argument_list|,
name|serverEndpointInfo
operator|.
name|get
argument_list|(
name|ei
argument_list|)
argument_list|,
literal|false
argument_list|,
name|assertor
argument_list|)
return|;
block|}
specifier|private
name|EndpointPolicy
name|getEndpointPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|EndpointPolicy
name|ep
parameter_list|,
name|boolean
name|isRequestor
parameter_list|,
name|Assertor
name|assertor
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|ep
condition|)
block|{
return|return
name|ep
return|;
block|}
return|return
name|createEndpointPolicyInfo
argument_list|(
name|ei
argument_list|,
name|isRequestor
argument_list|,
name|assertor
argument_list|)
return|;
block|}
specifier|public
name|void
name|setClientEndpointPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|EndpointPolicy
name|ep
parameter_list|)
block|{
name|clientEndpointInfo
operator|.
name|put
argument_list|(
name|ei
argument_list|,
name|ep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setServerEndpointPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|EndpointPolicy
name|ep
parameter_list|)
block|{
name|serverEndpointInfo
operator|.
name|put
argument_list|(
name|ei
argument_list|,
name|ep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EffectivePolicy
name|getEffectiveServerRequestPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
name|BindingOperation
name|bo
init|=
operator|new
name|BindingOperation
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|)
decl_stmt|;
name|EffectivePolicy
name|effectivePolicy
init|=
name|serverRequestInfo
operator|.
name|get
argument_list|(
name|bo
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|effectivePolicy
condition|)
block|{
name|EffectivePolicyImpl
name|epi
init|=
name|createOutPolicyInfo
argument_list|()
decl_stmt|;
name|epi
operator|.
name|initialisePolicy
argument_list|(
name|ei
argument_list|,
name|bo
operator|.
name|getBindingOperation
argument_list|()
argument_list|,
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|serverRequestInfo
operator|.
name|put
argument_list|(
name|bo
argument_list|,
name|epi
argument_list|)
expr_stmt|;
name|effectivePolicy
operator|=
name|epi
expr_stmt|;
block|}
return|return
name|effectivePolicy
return|;
block|}
specifier|public
name|void
name|setEffectiveServerRequestPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|EffectivePolicy
name|ep
parameter_list|)
block|{
name|BindingOperation
name|bo
init|=
operator|new
name|BindingOperation
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|)
decl_stmt|;
name|serverRequestInfo
operator|.
name|put
argument_list|(
name|bo
argument_list|,
name|ep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EffectivePolicy
name|getEffectiveClientResponsePolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
name|BindingOperation
name|bo
init|=
operator|new
name|BindingOperation
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|)
decl_stmt|;
name|EffectivePolicy
name|effectivePolicy
init|=
name|clientResponseInfo
operator|.
name|get
argument_list|(
name|bo
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|effectivePolicy
condition|)
block|{
name|EffectivePolicyImpl
name|epi
init|=
name|createOutPolicyInfo
argument_list|()
decl_stmt|;
name|epi
operator|.
name|initialisePolicy
argument_list|(
name|ei
argument_list|,
name|bo
operator|.
name|getBindingOperation
argument_list|()
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|clientResponseInfo
operator|.
name|put
argument_list|(
name|bo
argument_list|,
name|epi
argument_list|)
expr_stmt|;
name|effectivePolicy
operator|=
name|epi
expr_stmt|;
block|}
return|return
name|effectivePolicy
return|;
block|}
specifier|public
name|void
name|setEffectiveClientResponsePolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|,
name|EffectivePolicy
name|ep
parameter_list|)
block|{
name|BindingOperation
name|bo
init|=
operator|new
name|BindingOperation
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|)
decl_stmt|;
name|clientResponseInfo
operator|.
name|put
argument_list|(
name|bo
argument_list|,
name|ep
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EffectivePolicy
name|getEffectiveClientFaultPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingFaultInfo
name|bfi
parameter_list|)
block|{
name|BindingFault
name|bf
init|=
operator|new
name|BindingFault
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|)
decl_stmt|;
name|EffectivePolicy
name|effectivePolicy
init|=
name|clientFaultInfo
operator|.
name|get
argument_list|(
name|bf
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|effectivePolicy
condition|)
block|{
name|EffectivePolicyImpl
name|epi
init|=
name|createOutPolicyInfo
argument_list|()
decl_stmt|;
name|epi
operator|.
name|initialisePolicy
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|clientFaultInfo
operator|.
name|put
argument_list|(
name|bf
argument_list|,
name|epi
argument_list|)
expr_stmt|;
name|effectivePolicy
operator|=
name|epi
expr_stmt|;
block|}
return|return
name|effectivePolicy
return|;
block|}
specifier|public
name|void
name|setEffectiveClientFaultPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|BindingFaultInfo
name|bfi
parameter_list|,
name|EffectivePolicy
name|ep
parameter_list|)
block|{
name|BindingFault
name|bf
init|=
operator|new
name|BindingFault
argument_list|(
name|ei
argument_list|,
name|bfi
argument_list|)
decl_stmt|;
name|clientFaultInfo
operator|.
name|put
argument_list|(
name|bf
argument_list|,
name|ep
argument_list|)
expr_stmt|;
block|}
comment|// implementation
specifier|protected
specifier|final
name|void
name|init
parameter_list|()
block|{
name|registry
operator|=
operator|new
name|PolicyRegistryImpl
argument_list|()
expr_stmt|;
name|clientRequestInfo
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|BindingOperation
argument_list|,
name|EffectivePolicy
argument_list|>
argument_list|()
expr_stmt|;
name|clientResponseInfo
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|BindingOperation
argument_list|,
name|EffectivePolicy
argument_list|>
argument_list|()
expr_stmt|;
name|clientFaultInfo
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|BindingFault
argument_list|,
name|EffectivePolicy
argument_list|>
argument_list|()
expr_stmt|;
name|serverEndpointInfo
operator|=
operator|new
name|EndpointPolicyMap
argument_list|()
expr_stmt|;
name|clientEndpointInfo
operator|=
operator|new
name|EndpointPolicyMap
argument_list|()
expr_stmt|;
name|serverRequestInfo
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|BindingOperation
argument_list|,
name|EffectivePolicy
argument_list|>
argument_list|()
expr_stmt|;
name|serverResponseInfo
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|BindingOperation
argument_list|,
name|EffectivePolicy
argument_list|>
argument_list|()
expr_stmt|;
name|serverFaultInfo
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|BindingFault
argument_list|,
name|EffectivePolicy
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|addBusInterceptors
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|alternativeSelector
condition|)
block|{
name|alternativeSelector
operator|=
operator|new
name|MinimalAlternativeSelector
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|bus
operator|||
operator|!
name|enabled
condition|)
block|{
return|return;
block|}
name|AssertionBuilderRegistry
name|abr
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|AssertionBuilderRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|abr
condition|)
block|{
name|abr
operator|.
name|setIgnoreUnknownAssertions
argument_list|(
name|ignoreUnknownAssertions
argument_list|)
expr_stmt|;
block|}
name|ClientPolicyOutInterceptor
name|clientOut
init|=
operator|new
name|ClientPolicyOutInterceptor
argument_list|()
decl_stmt|;
name|clientOut
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|clientOut
argument_list|)
expr_stmt|;
name|ClientPolicyInInterceptor
name|clientIn
init|=
operator|new
name|ClientPolicyInInterceptor
argument_list|()
decl_stmt|;
name|clientIn
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|clientIn
argument_list|)
expr_stmt|;
name|ClientPolicyInFaultInterceptor
name|clientInFault
init|=
operator|new
name|ClientPolicyInFaultInterceptor
argument_list|()
decl_stmt|;
name|clientInFault
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getInFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|clientInFault
argument_list|)
expr_stmt|;
name|ServerPolicyInInterceptor
name|serverIn
init|=
operator|new
name|ServerPolicyInInterceptor
argument_list|()
decl_stmt|;
name|serverIn
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|serverIn
argument_list|)
expr_stmt|;
name|ServerPolicyOutInterceptor
name|serverOut
init|=
operator|new
name|ServerPolicyOutInterceptor
argument_list|()
decl_stmt|;
name|serverOut
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|serverOut
argument_list|)
expr_stmt|;
name|ServerPolicyOutFaultInterceptor
name|serverOutFault
init|=
operator|new
name|ServerPolicyOutFaultInterceptor
argument_list|()
decl_stmt|;
name|serverOutFault
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|serverOutFault
argument_list|)
expr_stmt|;
name|PolicyVerificationOutInterceptor
name|verifyOut
init|=
operator|new
name|PolicyVerificationOutInterceptor
argument_list|()
decl_stmt|;
name|verifyOut
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|verifyOut
argument_list|)
expr_stmt|;
name|PolicyVerificationInInterceptor
name|verifyIn
init|=
operator|new
name|PolicyVerificationInInterceptor
argument_list|()
decl_stmt|;
name|verifyIn
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|verifyIn
argument_list|)
expr_stmt|;
name|PolicyVerificationInFaultInterceptor
name|verifyInFault
init|=
operator|new
name|PolicyVerificationInFaultInterceptor
argument_list|()
decl_stmt|;
name|verifyInFault
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|bus
operator|.
name|getInFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|verifyInFault
argument_list|)
expr_stmt|;
name|addedBusInterceptors
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|PostConstruct
specifier|public
name|void
name|registerListener
parameter_list|()
block|{
name|ServerLifeCycleManager
name|slm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ServerLifeCycleManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|slm
operator|!=
literal|null
condition|)
block|{
name|slm
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
name|Policy
name|getAggregatedServicePolicy
parameter_list|(
name|ServiceInfo
name|si
parameter_list|)
block|{
name|Policy
name|aggregated
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PolicyProvider
name|pp
range|:
name|getPolicyProviders
argument_list|()
control|)
block|{
name|Policy
name|p
init|=
name|pp
operator|.
name|getEffectivePolicy
argument_list|(
name|si
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aggregated
condition|)
block|{
name|aggregated
operator|=
name|p
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|aggregated
operator|=
name|aggregated
operator|.
name|merge
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|aggregated
operator|==
literal|null
condition|?
operator|new
name|Policy
argument_list|()
else|:
name|aggregated
return|;
block|}
name|Policy
name|getAggregatedEndpointPolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|)
block|{
name|Policy
name|aggregated
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PolicyProvider
name|pp
range|:
name|getPolicyProviders
argument_list|()
control|)
block|{
name|Policy
name|p
init|=
name|pp
operator|.
name|getEffectivePolicy
argument_list|(
name|ei
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aggregated
condition|)
block|{
name|aggregated
operator|=
name|p
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|aggregated
operator|=
name|aggregated
operator|.
name|merge
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|aggregated
operator|==
literal|null
condition|?
operator|new
name|Policy
argument_list|()
else|:
name|aggregated
return|;
block|}
name|Policy
name|getAggregatedOperationPolicy
parameter_list|(
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
name|Policy
name|aggregated
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PolicyProvider
name|pp
range|:
name|getPolicyProviders
argument_list|()
control|)
block|{
name|Policy
name|p
init|=
name|pp
operator|.
name|getEffectivePolicy
argument_list|(
name|boi
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aggregated
condition|)
block|{
name|aggregated
operator|=
name|p
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|aggregated
operator|=
name|aggregated
operator|.
name|merge
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|aggregated
operator|==
literal|null
condition|?
operator|new
name|Policy
argument_list|()
else|:
name|aggregated
return|;
block|}
name|Policy
name|getAggregatedMessagePolicy
parameter_list|(
name|BindingMessageInfo
name|bmi
parameter_list|)
block|{
name|Policy
name|aggregated
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PolicyProvider
name|pp
range|:
name|getPolicyProviders
argument_list|()
control|)
block|{
name|Policy
name|p
init|=
name|pp
operator|.
name|getEffectivePolicy
argument_list|(
name|bmi
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aggregated
condition|)
block|{
name|aggregated
operator|=
name|p
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|aggregated
operator|=
name|aggregated
operator|.
name|merge
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|aggregated
operator|==
literal|null
condition|?
operator|new
name|Policy
argument_list|()
else|:
name|aggregated
return|;
block|}
name|Policy
name|getAggregatedFaultPolicy
parameter_list|(
name|BindingFaultInfo
name|bfi
parameter_list|)
block|{
name|Policy
name|aggregated
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PolicyProvider
name|pp
range|:
name|getPolicyProviders
argument_list|()
control|)
block|{
name|Policy
name|p
init|=
name|pp
operator|.
name|getEffectivePolicy
argument_list|(
name|bfi
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aggregated
condition|)
block|{
name|aggregated
operator|=
name|p
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|aggregated
operator|=
name|aggregated
operator|.
name|merge
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|aggregated
operator|==
literal|null
condition|?
operator|new
name|Policy
argument_list|()
else|:
name|aggregated
return|;
block|}
comment|/**      * Return a collection of all assertions used in the given policy component,      * optionally including optional assertions.      * The policy need not be normalised, so any policy references will have to be resolved.      * @param pc the policy component      * @param includeOptional flag indicating if optional assertions should be included      * @return the assertions      */
name|Collection
argument_list|<
name|PolicyAssertion
argument_list|>
name|getAssertions
parameter_list|(
name|PolicyComponent
name|pc
parameter_list|,
name|boolean
name|includeOptional
parameter_list|)
block|{
name|Collection
argument_list|<
name|PolicyAssertion
argument_list|>
name|assertions
init|=
operator|new
name|ArrayList
argument_list|<
name|PolicyAssertion
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|TYPE_ASSERTION
operator|==
name|pc
operator|.
name|getType
argument_list|()
condition|)
block|{
name|PolicyAssertion
name|a
init|=
operator|(
name|PolicyAssertion
operator|)
name|pc
decl_stmt|;
if|if
condition|(
name|includeOptional
operator|||
operator|!
name|a
operator|.
name|isOptional
argument_list|()
condition|)
block|{
name|assertions
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|addAssertions
argument_list|(
name|pc
argument_list|,
name|includeOptional
argument_list|,
name|assertions
argument_list|)
expr_stmt|;
block|}
return|return
name|assertions
return|;
block|}
name|void
name|addAssertions
parameter_list|(
name|PolicyComponent
name|pc
parameter_list|,
name|boolean
name|includeOptional
parameter_list|,
name|Collection
argument_list|<
name|PolicyAssertion
argument_list|>
name|assertions
parameter_list|)
block|{
if|if
condition|(
name|Constants
operator|.
name|TYPE_ASSERTION
operator|==
name|pc
operator|.
name|getType
argument_list|()
condition|)
block|{
name|PolicyAssertion
name|a
init|=
operator|(
name|PolicyAssertion
operator|)
name|pc
decl_stmt|;
if|if
condition|(
name|includeOptional
operator|||
operator|!
name|a
operator|.
name|isOptional
argument_list|()
condition|)
block|{
name|assertions
operator|.
name|add
argument_list|(
operator|(
name|PolicyAssertion
operator|)
name|pc
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|Constants
operator|.
name|TYPE_POLICY_REF
operator|==
name|pc
operator|.
name|getType
argument_list|()
condition|)
block|{
name|PolicyReference
name|pr
init|=
operator|(
name|PolicyReference
operator|)
name|pc
decl_stmt|;
name|pc
operator|=
name|pr
operator|.
name|normalize
argument_list|(
name|registry
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|PolicyOperator
name|po
init|=
operator|(
name|PolicyOperator
operator|)
name|pc
decl_stmt|;
name|List
argument_list|<
name|PolicyComponent
argument_list|>
name|pcs
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|po
operator|.
name|getPolicyComponents
argument_list|()
argument_list|,
name|PolicyComponent
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|PolicyComponent
name|child
range|:
name|pcs
control|)
block|{
name|addAssertions
argument_list|(
name|child
argument_list|,
name|includeOptional
argument_list|,
name|assertions
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Return the vocabulary of a policy component, i.e. the set of QNames of      * the assertions used in the componente, duplicates removed.      * @param pc the policy component      * @param includeOptional flag indicating if optional assertions should be included      * @return the vocabulary      */
name|Set
argument_list|<
name|QName
argument_list|>
name|getVocabulary
parameter_list|(
name|PolicyComponent
name|pc
parameter_list|,
name|boolean
name|includeOptional
parameter_list|)
block|{
name|Collection
argument_list|<
name|PolicyAssertion
argument_list|>
name|assertions
init|=
name|getAssertions
argument_list|(
name|pc
argument_list|,
name|includeOptional
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|QName
argument_list|>
name|vocabulary
init|=
operator|new
name|HashSet
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PolicyAssertion
name|a
range|:
name|assertions
control|)
block|{
name|vocabulary
operator|.
name|add
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|vocabulary
return|;
block|}
name|EndpointPolicyImpl
name|createEndpointPolicyInfo
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|boolean
name|isRequestor
parameter_list|,
name|Assertor
name|assertor
parameter_list|)
block|{
name|EndpointPolicyImpl
name|epi
init|=
operator|new
name|EndpointPolicyImpl
argument_list|(
name|ei
argument_list|,
name|this
argument_list|,
name|isRequestor
argument_list|,
name|assertor
argument_list|)
decl_stmt|;
name|epi
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|EndpointInfo
argument_list|,
name|EndpointPolicy
argument_list|>
name|map
init|=
name|isRequestor
condition|?
name|clientEndpointInfo
else|:
name|serverEndpointInfo
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|ei
argument_list|,
name|epi
argument_list|)
expr_stmt|;
return|return
name|epi
return|;
block|}
comment|/**      * Check if a given list of assertions can potentially be supported by      * interceptors or by an already installed assertor (a conduit or transport      * that implements the Assertor interface).      *       * @param alternative the policy alternative      * @param Assertor the assertor      * @return true iff the alternative can be supported      */
specifier|public
name|boolean
name|supportsAlternative
parameter_list|(
name|Collection
argument_list|<
name|PolicyAssertion
argument_list|>
name|alternative
parameter_list|,
name|Assertor
name|assertor
parameter_list|)
block|{
name|PolicyInterceptorProviderRegistry
name|pipr
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyInterceptorProviderRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|PolicyAssertion
name|a
range|:
name|alternative
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|a
operator|.
name|isOptional
argument_list|()
operator|||
operator|(
literal|null
operator|!=
name|pipr
operator|.
name|get
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
literal|null
operator|!=
name|assertor
operator|&&
name|assertor
operator|.
name|canAssert
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|startServer
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
comment|// empty
block|}
comment|/**      * Callback recieved while the server side endpoint is being undeployed.      *      * @param server      */
specifier|public
name|void
name|stopServer
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|EndpointInfo
name|ei
init|=
name|server
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
decl_stmt|;
name|serverEndpointInfo
operator|.
name|remove
argument_list|(
name|ei
argument_list|)
expr_stmt|;
comment|/**          * While cleaning up the entries of requestInfo's, responseInfo's and faultInfo's map, we create          * a temperory Set with all the keys. Later we iterate over the keys of this temp set,          * and if it's same as that of the endpoint being undeployed, we remove the corresponding          * entries from the client and server maps.          */
name|cleanupBindingOperations
argument_list|(
name|ei
argument_list|,
operator|new
name|HashSet
argument_list|<
name|BindingOperation
argument_list|>
argument_list|(
name|clientRequestInfo
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|clientRequestInfo
argument_list|)
expr_stmt|;
name|cleanupBindingOperations
argument_list|(
name|ei
argument_list|,
operator|new
name|HashSet
argument_list|<
name|BindingOperation
argument_list|>
argument_list|(
name|clientResponseInfo
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|clientResponseInfo
argument_list|)
expr_stmt|;
name|cleanupBindingOperations
argument_list|(
name|ei
argument_list|,
operator|new
name|HashSet
argument_list|<
name|BindingOperation
argument_list|>
argument_list|(
name|serverRequestInfo
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|serverRequestInfo
argument_list|)
expr_stmt|;
name|cleanupBindingOperations
argument_list|(
name|ei
argument_list|,
operator|new
name|HashSet
argument_list|<
name|BindingOperation
argument_list|>
argument_list|(
name|serverResponseInfo
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|serverResponseInfo
argument_list|)
expr_stmt|;
name|cleanupBindingFaults
argument_list|(
name|ei
argument_list|,
operator|new
name|HashSet
argument_list|<
name|BindingFault
argument_list|>
argument_list|(
name|clientFaultInfo
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|clientFaultInfo
argument_list|)
expr_stmt|;
name|cleanupBindingFaults
argument_list|(
name|ei
argument_list|,
operator|new
name|HashSet
argument_list|<
name|BindingFault
argument_list|>
argument_list|(
name|serverFaultInfo
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|serverFaultInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|cleanupBindingOperations
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|Set
argument_list|<
name|BindingOperation
argument_list|>
name|bindingOperations
parameter_list|,
name|Map
argument_list|<
name|BindingOperation
argument_list|,
name|EffectivePolicy
argument_list|>
name|originalMap
parameter_list|)
block|{
name|Iterator
argument_list|<
name|BindingOperation
argument_list|>
name|bindingOpsItr
init|=
name|bindingOperations
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bindingOpsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BindingOperation
name|bindingOperation
init|=
name|bindingOpsItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ei
operator|.
name|isSameAs
argument_list|(
name|bindingOperation
operator|.
name|getEndpoint
argument_list|()
argument_list|)
condition|)
block|{
name|originalMap
operator|.
name|remove
argument_list|(
name|bindingOperation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|cleanupBindingFaults
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|,
name|Set
argument_list|<
name|BindingFault
argument_list|>
name|bindingFaults
parameter_list|,
name|Map
argument_list|<
name|BindingFault
argument_list|,
name|EffectivePolicy
argument_list|>
name|originalMap
parameter_list|)
block|{
name|Iterator
argument_list|<
name|BindingFault
argument_list|>
name|bindingFaultsItr
init|=
name|bindingFaults
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bindingFaultsItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BindingFault
name|bindingFault
init|=
name|bindingFaultsItr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ei
operator|.
name|isSameAs
argument_list|(
name|bindingFault
operator|.
name|getEndpoint
argument_list|()
argument_list|)
condition|)
block|{
name|originalMap
operator|.
name|remove
argument_list|(
name|bindingFault
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Class used as key in the client request policy and server response policy maps.      */
class|class
name|BindingOperation
block|{
specifier|private
name|EndpointInfo
name|ei
decl_stmt|;
specifier|private
name|BindingOperationInfo
name|boi
decl_stmt|;
name|BindingOperation
parameter_list|(
name|EndpointInfo
name|e
parameter_list|,
name|BindingOperationInfo
name|b
parameter_list|)
block|{
name|ei
operator|=
name|e
expr_stmt|;
name|boi
operator|=
name|b
operator|.
name|isUnwrapped
argument_list|()
condition|?
name|b
operator|.
name|getWrappedOperation
argument_list|()
else|:
name|b
expr_stmt|;
block|}
name|EndpointInfo
name|getEndpoint
parameter_list|()
block|{
return|return
name|ei
return|;
block|}
name|BindingOperationInfo
name|getBindingOperation
parameter_list|()
block|{
return|return
name|boi
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|boi
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|BindingOperation
name|other
init|=
operator|(
name|BindingOperation
operator|)
name|obj
decl_stmt|;
return|return
name|boi
operator|.
name|equals
argument_list|(
name|other
operator|.
name|boi
argument_list|)
operator|&&
name|ei
operator|.
name|equals
argument_list|(
name|other
operator|.
name|ei
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|ei
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"."
operator|+
name|boi
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Class used as key in the server fault policy map.      */
class|class
name|BindingFault
block|{
specifier|private
name|EndpointInfo
name|ei
decl_stmt|;
specifier|private
name|BindingFaultInfo
name|bfi
decl_stmt|;
name|BindingFault
parameter_list|(
name|EndpointInfo
name|e
parameter_list|,
name|BindingFaultInfo
name|b
parameter_list|)
block|{
name|ei
operator|=
name|e
expr_stmt|;
name|bfi
operator|=
name|b
expr_stmt|;
block|}
name|EndpointInfo
name|getEndpoint
parameter_list|()
block|{
return|return
name|ei
return|;
block|}
name|BindingFaultInfo
name|getBindingFault
parameter_list|()
block|{
return|return
name|bfi
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|bfi
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|BindingFault
name|other
init|=
operator|(
name|BindingFault
operator|)
name|obj
decl_stmt|;
return|return
name|bfi
operator|.
name|equals
argument_list|(
name|other
operator|.
name|bfi
argument_list|)
operator|&&
name|ei
operator|.
name|equals
argument_list|(
name|other
operator|.
name|ei
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|ei
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"."
operator|+
name|bfi
operator|.
name|getFaultInfo
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|// for test
name|EffectivePolicyImpl
name|createOutPolicyInfo
parameter_list|()
block|{
return|return
operator|new
name|EffectivePolicyImpl
argument_list|()
return|;
block|}
specifier|private
class|class
name|EndpointPolicyMap
extends|extends
name|ConcurrentHashMap
argument_list|<
name|EndpointInfo
argument_list|,
name|EndpointPolicy
argument_list|>
block|{
specifier|public
name|EndpointPolicy
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|EndpointInfo
name|toRemove
init|=
operator|(
name|EndpointInfo
operator|)
name|key
decl_stmt|;
name|EndpointPolicy
name|pol
init|=
literal|null
decl_stmt|;
for|for
control|(
name|EndpointInfo
name|info
range|:
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|isSameAs
argument_list|(
name|toRemove
argument_list|)
condition|)
block|{
name|pol
operator|=
name|super
operator|.
name|remove
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pol
return|;
block|}
block|}
block|}
end_class

end_unit

