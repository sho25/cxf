begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingFaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|PolicyVerificationInFaultInterceptor
extends|extends
name|AbstractPolicyInterceptor
block|{
specifier|public
specifier|static
specifier|final
name|PolicyVerificationInFaultInterceptor
name|INSTANCE
init|=
operator|new
name|PolicyVerificationInFaultInterceptor
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|PolicyVerificationInFaultInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|PolicyVerificationInFaultInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_INVOKE
argument_list|)
expr_stmt|;
block|}
comment|/**       * Determines the effective policy, and checks if one of its alternatives        * is supported.      *        * @param message      * @throws PolicyException if none of the alternatives is supported      */
specifier|protected
name|void
name|handle
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aim
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Not a requestor."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
assert|assert
literal|null
operator|!=
name|exchange
assert|;
name|BindingOperationInfo
name|boi
init|=
name|exchange
operator|.
name|getBindingOperationInfo
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|boi
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"No binding operation info."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Endpoint
name|e
init|=
name|exchange
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|e
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"No endpoint."
argument_list|)
expr_stmt|;
return|return;
block|}
name|EndpointInfo
name|ei
init|=
name|e
operator|.
name|getEndpointInfo
argument_list|()
decl_stmt|;
name|Bus
name|bus
init|=
name|exchange
operator|.
name|getBus
argument_list|()
decl_stmt|;
name|PolicyEngine
name|pe
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyEngine
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|pe
condition|)
block|{
return|return;
block|}
name|Exception
name|ex
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ex
condition|)
block|{
name|ex
operator|=
name|exchange
operator|.
name|get
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|BindingFaultInfo
name|bfi
init|=
name|getBindingFaultInfo
argument_list|(
name|message
argument_list|,
name|ex
argument_list|,
name|boi
argument_list|)
decl_stmt|;
if|if
condition|(
name|bfi
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|getTransportAssertions
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EffectivePolicy
name|effectivePolicy
init|=
name|pe
operator|.
name|getEffectiveClientFaultPolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|bfi
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|effectivePolicy
operator|!=
literal|null
condition|)
block|{
name|aim
operator|.
name|checkEffectivePolicy
argument_list|(
name|effectivePolicy
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Verified policies for inbound message."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

