begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_comment
comment|/**  * Describes the policy of an inbound message. As the underlying message  * type is not known, only the effective endpoint policy is calculated.   * The total of all assertions that may apply to an inbound message for an endpoint  * (and hence the required interceptors) are available as vocabulary.  */
end_comment

begin_interface
specifier|public
interface|interface
name|EndpointPolicy
block|{
name|Policy
name|getPolicy
parameter_list|()
function_decl|;
name|EndpointPolicy
name|updatePolicy
parameter_list|(
name|Policy
name|p
parameter_list|,
name|Message
name|msg
parameter_list|)
function_decl|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|getChosenAlternative
parameter_list|()
function_decl|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|getVocabulary
parameter_list|(
name|Message
name|m
parameter_list|)
function_decl|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|getFaultVocabulary
parameter_list|(
name|Message
name|m
parameter_list|)
function_decl|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getInterceptors
parameter_list|(
name|Message
name|m
parameter_list|)
function_decl|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getFaultInterceptors
parameter_list|(
name|Message
name|m
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

