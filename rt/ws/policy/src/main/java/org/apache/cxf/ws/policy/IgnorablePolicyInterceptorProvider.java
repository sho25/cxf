begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_comment
comment|/**  * This policy interceptor provider can be used to implicitly handle unknown policy assertions.  */
end_comment

begin_class
specifier|public
class|class
name|IgnorablePolicyInterceptorProvider
extends|extends
name|AbstractPolicyInterceptorProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|IgnorablePolicyInterceptorProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|IgnorableAssertionsInterceptor
name|interceptor
init|=
operator|new
name|IgnorableAssertionsInterceptor
argument_list|()
decl_stmt|;
comment|/**      * @param type      */
specifier|public
name|IgnorablePolicyInterceptorProvider
parameter_list|(
name|QName
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param at      */
specifier|public
name|IgnorablePolicyInterceptorProvider
parameter_list|(
name|Collection
argument_list|<
name|QName
argument_list|>
name|at
parameter_list|)
block|{
name|super
argument_list|(
name|at
argument_list|)
expr_stmt|;
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
name|getInFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|IgnorableAssertionsInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|IgnorableAssertionsInterceptor
parameter_list|()
block|{
comment|// somewhat irrelevant
name|super
argument_list|(
name|Phase
operator|.
name|POST_LOGICAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|QName
name|an
range|:
name|getAssertionTypes
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|an
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Asserting for "
operator|+
name|an
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|ais
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

