begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|PolicyVerificationOutInterceptor
extends|extends
name|AbstractPolicyInterceptor
block|{
specifier|public
specifier|static
specifier|final
name|PolicyVerificationOutInterceptor
name|INSTANCE
init|=
operator|new
name|PolicyVerificationOutInterceptor
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|PolicyVerificationOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|PolicyVerificationOutInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|POST_STREAM
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks if all assertions in the chosen alternative have been asserted.      * Note that although the alternative was chosen in such a way that at least all      * interceptors necessary to assert the assertions are present, it is not possible      * to predict if these interceptors actually have asserted their assertions.      * @param message      * @throws PolicyException if none of the alternatives is supported      */
specifier|protected
name|void
name|handle
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|MessageUtils
operator|.
name|isPartialResponse
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Not verifying policies on outbound partial response."
argument_list|)
expr_stmt|;
return|return;
block|}
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aim
condition|)
block|{
return|return;
block|}
name|getTransportAssertions
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EffectivePolicy
name|policy
init|=
name|message
operator|.
name|get
argument_list|(
name|EffectivePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// CXF-1849 Log a message at FINE level if policy verification fails
comment|// on the outbound-server side of a response
try|try
block|{
name|aim
operator|.
name|checkEffectivePolicy
argument_list|(
name|policy
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PolicyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"An exception was thrown when verifying that the effective policy for "
operator|+
literal|"this request was satisfied.  However, this exception will not result in "
operator|+
literal|"a fault.  The exception raised is: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Verified policies for outbound message."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

