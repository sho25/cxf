begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|attachment
operator|.
name|external
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ExtendedURIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingFaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyException
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|Wsdl11XPointerDomainExpression
implements|implements
name|DomainExpression
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NAMESPACE
init|=
literal|"http://schemas.xmlsoap.org/wsdl/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_ELEM_NAME
init|=
literal|"service"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PORT_ELEM_NAME
init|=
literal|"port"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PORTTYPE_ELEM_NAME
init|=
literal|"portType"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BINDING_ELEM_NAME
init|=
literal|"binding"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OPERATION_ELEM_NAME
init|=
literal|"operation"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NAME_ATTR_NAME
init|=
literal|"name"
decl_stmt|;
specifier|private
name|String
name|baseURI
decl_stmt|;
specifier|private
name|NodeList
name|nodes
decl_stmt|;
name|Wsdl11XPointerDomainExpression
parameter_list|(
name|String
name|u
parameter_list|)
block|{
name|baseURI
operator|=
name|u
expr_stmt|;
block|}
specifier|public
name|boolean
name|appliesTo
parameter_list|(
name|BindingFaultInfo
name|bfi
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|appliesTo
parameter_list|(
name|BindingMessageInfo
name|bmi
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|appliesTo
parameter_list|(
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
if|if
condition|(
name|baseURI
operator|.
name|equals
argument_list|(
name|boi
operator|.
name|getBinding
argument_list|()
operator|.
name|getDescription
argument_list|()
operator|.
name|getBaseURI
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|!=
name|n
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|n
decl_stmt|;
if|if
condition|(
name|matchesBindingOperation
argument_list|(
name|e
argument_list|,
name|boi
argument_list|)
condition|)
block|{
name|Element
name|p
init|=
operator|(
name|Element
operator|)
name|e
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
return|return
name|matchesBinding
argument_list|(
name|p
argument_list|,
name|boi
operator|.
name|getBinding
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|matchesOperation
argument_list|(
name|e
argument_list|,
name|boi
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|appliesTo
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|)
block|{
if|if
condition|(
name|baseURI
operator|.
name|equals
argument_list|(
name|ei
operator|.
name|getDescription
argument_list|()
operator|.
name|getBaseURI
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|!=
name|n
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|n
decl_stmt|;
if|if
condition|(
name|matchesPort
argument_list|(
name|e
argument_list|,
name|ei
argument_list|)
condition|)
block|{
name|Element
name|p
init|=
operator|(
name|Element
operator|)
name|e
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
return|return
name|matchesService
argument_list|(
name|p
argument_list|,
name|ei
operator|.
name|getService
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|matchesPortType
argument_list|(
name|e
argument_list|,
name|ei
operator|.
name|getInterface
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|matchesBinding
argument_list|(
name|e
argument_list|,
name|ei
operator|.
name|getBinding
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|appliesTo
parameter_list|(
name|ServiceInfo
name|si
parameter_list|)
block|{
if|if
condition|(
name|baseURI
operator|.
name|equals
argument_list|(
name|si
operator|.
name|getDescription
argument_list|()
operator|.
name|getBaseURI
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|!=
name|n
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|n
decl_stmt|;
if|if
condition|(
name|matchesService
argument_list|(
name|e
argument_list|,
name|si
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
name|void
name|evaluate
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|int
name|pos
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
decl_stmt|;
name|String
name|documentURI
init|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|uri
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|ExtendedURIResolver
argument_list|()
operator|.
name|resolve
argument_list|(
name|documentURI
argument_list|,
name|baseURI
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|is
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to resolve: "
operator|+
name|documentURI
operator|+
literal|" w.r.t baseURI: "
operator|+
name|baseURI
argument_list|)
expr_stmt|;
return|return;
block|}
name|Document
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|DOMUtils
operator|.
name|readXml
argument_list|(
name|is
operator|.
name|getByteStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|PolicyException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|XPathUtils
name|xu
init|=
operator|new
name|XPathUtils
argument_list|()
decl_stmt|;
name|nodes
operator|=
operator|(
name|NodeList
operator|)
name|xu
operator|.
name|getValue
argument_list|(
name|path
argument_list|,
name|doc
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
expr_stmt|;
block|}
name|boolean
name|matchesService
parameter_list|(
name|Element
name|e
parameter_list|,
name|ServiceInfo
name|si
parameter_list|)
block|{
return|return
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|SERVICE_ELEM_NAME
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|si
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
name|NAME_ATTR_NAME
argument_list|)
argument_list|)
return|;
block|}
name|boolean
name|matchesPortType
parameter_list|(
name|Element
name|e
parameter_list|,
name|InterfaceInfo
name|ii
parameter_list|)
block|{
return|return
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|PORTTYPE_ELEM_NAME
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|ii
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
name|NAME_ATTR_NAME
argument_list|)
argument_list|)
return|;
block|}
name|boolean
name|matchesPort
parameter_list|(
name|Element
name|e
parameter_list|,
name|EndpointInfo
name|ei
parameter_list|)
block|{
return|return
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|PORT_ELEM_NAME
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|ei
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
name|NAME_ATTR_NAME
argument_list|)
argument_list|)
return|;
block|}
name|boolean
name|matchesBinding
parameter_list|(
name|Element
name|e
parameter_list|,
name|BindingInfo
name|ei
parameter_list|)
block|{
return|return
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|BINDING_ELEM_NAME
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|ei
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
name|NAME_ATTR_NAME
argument_list|)
argument_list|)
return|;
block|}
name|boolean
name|matchesBindingOperation
parameter_list|(
name|Element
name|e
parameter_list|,
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
return|return
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|OPERATION_ELEM_NAME
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|boi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
name|NAME_ATTR_NAME
argument_list|)
argument_list|)
return|;
block|}
name|boolean
name|matchesOperation
parameter_list|(
name|Element
name|e
parameter_list|,
name|OperationInfo
name|boi
parameter_list|)
block|{
return|return
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|OPERATION_ELEM_NAME
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|boi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getAttribute
argument_list|(
name|NAME_ATTR_NAME
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

