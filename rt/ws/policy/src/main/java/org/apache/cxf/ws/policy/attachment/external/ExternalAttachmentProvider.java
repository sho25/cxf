begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|attachment
operator|.
name|external
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|injection
operator|.
name|NoJSR250Annotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingFaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|attachment
operator|.
name|AbstractPolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|attachment
operator|.
name|reference
operator|.
name|LocalDocumentReferenceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|attachment
operator|.
name|reference
operator|.
name|ReferenceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
annotation|@
name|NoJSR250Annotations
specifier|public
class|class
name|ExternalAttachmentProvider
extends|extends
name|AbstractPolicyProvider
implements|implements
name|PolicyProvider
block|{
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|ExternalAttachmentProvider
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Use a Resource object here instead of a String so that the resource can be resolved when
comment|// this bean is created
specifier|private
name|Resource
name|location
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|PolicyAttachment
argument_list|>
name|attachments
decl_stmt|;
name|ExternalAttachmentProvider
parameter_list|()
block|{             }
name|ExternalAttachmentProvider
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|super
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLocation
parameter_list|(
name|Resource
name|u
parameter_list|)
block|{
name|location
operator|=
name|u
expr_stmt|;
block|}
specifier|public
name|Resource
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|Policy
name|getEffectivePolicy
parameter_list|(
name|BindingFaultInfo
name|bfi
parameter_list|)
block|{
name|readDocument
argument_list|()
expr_stmt|;
name|Policy
name|p
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
for|for
control|(
name|PolicyAttachment
name|pa
range|:
name|attachments
control|)
block|{
if|if
condition|(
name|pa
operator|.
name|appliesTo
argument_list|(
name|bfi
argument_list|)
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|merge
argument_list|(
name|pa
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|p
return|;
block|}
specifier|public
name|Policy
name|getEffectivePolicy
parameter_list|(
name|BindingMessageInfo
name|bmi
parameter_list|)
block|{
name|readDocument
argument_list|()
expr_stmt|;
name|Policy
name|p
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
for|for
control|(
name|PolicyAttachment
name|pa
range|:
name|attachments
control|)
block|{
if|if
condition|(
name|pa
operator|.
name|appliesTo
argument_list|(
name|bmi
argument_list|)
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|merge
argument_list|(
name|pa
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|p
return|;
block|}
specifier|public
name|Policy
name|getEffectivePolicy
parameter_list|(
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
name|readDocument
argument_list|()
expr_stmt|;
name|Policy
name|p
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
for|for
control|(
name|PolicyAttachment
name|pa
range|:
name|attachments
control|)
block|{
if|if
condition|(
name|pa
operator|.
name|appliesTo
argument_list|(
name|boi
argument_list|)
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|merge
argument_list|(
name|pa
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|p
return|;
block|}
specifier|public
name|Policy
name|getEffectivePolicy
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|)
block|{
name|readDocument
argument_list|()
expr_stmt|;
name|Policy
name|p
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
for|for
control|(
name|PolicyAttachment
name|pa
range|:
name|attachments
control|)
block|{
if|if
condition|(
name|pa
operator|.
name|appliesTo
argument_list|(
name|ei
argument_list|)
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|merge
argument_list|(
name|pa
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|p
return|;
block|}
specifier|public
name|Policy
name|getEffectivePolicy
parameter_list|(
name|ServiceInfo
name|si
parameter_list|)
block|{
name|readDocument
argument_list|()
expr_stmt|;
name|Policy
name|p
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
for|for
control|(
name|PolicyAttachment
name|pa
range|:
name|attachments
control|)
block|{
if|if
condition|(
name|pa
operator|.
name|appliesTo
argument_list|(
name|si
argument_list|)
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|merge
argument_list|(
name|pa
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|p
return|;
block|}
name|void
name|readDocument
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|attachments
condition|)
block|{
return|return;
block|}
comment|// read the document and build the attachments
name|attachments
operator|=
operator|new
name|ArrayList
argument_list|<
name|PolicyAttachment
argument_list|>
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
name|location
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|is
condition|)
block|{
throw|throw
operator|new
name|PolicyException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"COULD_NOT_OPEN_ATTACHMENT_DOC_EXC"
argument_list|,
name|BUNDLE
argument_list|,
name|location
argument_list|)
argument_list|)
throw|;
block|}
name|doc
operator|=
name|DOMUtils
operator|.
name|readXml
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|PolicyException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
for|for
control|(
name|Element
name|ae
range|:
name|PolicyConstants
operator|.
name|findAllPolicyElementsOfLocalName
argument_list|(
name|doc
argument_list|,
name|Constants
operator|.
name|ELEM_POLICY_ATTACHMENT
argument_list|)
control|)
block|{
name|PolicyAttachment
name|attachment
init|=
operator|new
name|PolicyAttachment
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|nd
init|=
name|ae
operator|.
name|getFirstChild
argument_list|()
init|;
name|nd
operator|!=
literal|null
condition|;
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|!=
name|nd
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|QName
name|qn
init|=
operator|new
name|QName
argument_list|(
name|nd
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|nd
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|isAppliesToElem
argument_list|(
name|qn
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|DomainExpression
argument_list|>
name|des
init|=
name|readDomainExpressions
argument_list|(
operator|(
name|Element
operator|)
name|nd
argument_list|)
decl_stmt|;
if|if
condition|(
name|des
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// forget about this attachment
continue|continue;
block|}
name|attachment
operator|.
name|setDomainExpressions
argument_list|(
name|des
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Constants
operator|.
name|isPolicyElement
argument_list|(
name|qn
argument_list|)
condition|)
block|{
name|Policy
name|p
init|=
name|builder
operator|.
name|getPolicy
argument_list|(
name|nd
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|attachment
operator|.
name|getPolicy
argument_list|()
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|merge
argument_list|(
name|attachment
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|attachment
operator|.
name|setPolicy
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Constants
operator|.
name|isPolicyRef
argument_list|(
name|qn
argument_list|)
condition|)
block|{
name|PolicyReference
name|ref
init|=
name|builder
operator|.
name|getPolicyReference
argument_list|(
name|nd
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ref
condition|)
block|{
name|Policy
name|p
init|=
name|resolveReference
argument_list|(
name|ref
argument_list|,
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|attachment
operator|.
name|getPolicy
argument_list|()
condition|)
block|{
name|p
operator|=
name|p
operator|.
name|merge
argument_list|(
name|attachment
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|attachment
operator|.
name|setPolicy
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: wsse:Security child element
block|}
if|if
condition|(
literal|null
operator|==
name|attachment
operator|.
name|getPolicy
argument_list|()
operator|||
literal|null
operator|==
name|attachment
operator|.
name|getDomainExpressions
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|attachments
operator|.
name|add
argument_list|(
name|attachment
argument_list|)
expr_stmt|;
block|}
block|}
name|Policy
name|resolveReference
parameter_list|(
name|PolicyReference
name|ref
parameter_list|,
name|Document
name|doc
parameter_list|)
block|{
name|Policy
name|p
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isExternal
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|p
operator|=
name|resolveExternal
argument_list|(
name|ref
argument_list|,
name|doc
operator|.
name|getBaseURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
name|resolveLocal
argument_list|(
name|ref
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
name|checkResolved
argument_list|(
name|ref
argument_list|,
name|p
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
name|Policy
name|resolveLocal
parameter_list|(
name|PolicyReference
name|ref
parameter_list|,
name|Document
name|doc
parameter_list|)
block|{
name|String
name|relativeURI
init|=
name|ref
operator|.
name|getURI
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|absoluteURI
init|=
name|doc
operator|.
name|getBaseURI
argument_list|()
operator|+
name|ref
operator|.
name|getURI
argument_list|()
decl_stmt|;
name|Policy
name|resolved
init|=
name|registry
operator|.
name|lookup
argument_list|(
name|absoluteURI
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|resolved
condition|)
block|{
return|return
name|resolved
return|;
block|}
name|ReferenceResolver
name|resolver
init|=
operator|new
name|LocalDocumentReferenceResolver
argument_list|(
name|doc
argument_list|,
name|builder
argument_list|)
decl_stmt|;
name|resolved
operator|=
name|resolver
operator|.
name|resolveReference
argument_list|(
name|relativeURI
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|resolved
condition|)
block|{
name|ref
operator|.
name|setURI
argument_list|(
name|absoluteURI
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|absoluteURI
argument_list|,
name|resolved
argument_list|)
expr_stmt|;
block|}
return|return
name|resolved
return|;
block|}
name|Collection
argument_list|<
name|DomainExpression
argument_list|>
name|readDomainExpressions
parameter_list|(
name|Element
name|appliesToElem
parameter_list|)
block|{
name|Collection
argument_list|<
name|DomainExpression
argument_list|>
name|des
init|=
operator|new
name|ArrayList
argument_list|<
name|DomainExpression
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|nd
init|=
name|appliesToElem
operator|.
name|getFirstChild
argument_list|()
init|;
name|nd
operator|!=
literal|null
condition|;
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|==
name|nd
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
name|DomainExpressionBuilderRegistry
name|debr
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|DomainExpressionBuilderRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
assert|assert
literal|null
operator|!=
name|debr
assert|;
name|DomainExpression
name|de
init|=
name|debr
operator|.
name|build
argument_list|(
operator|(
name|Element
operator|)
name|nd
argument_list|)
decl_stmt|;
name|des
operator|.
name|add
argument_list|(
name|de
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|des
return|;
block|}
comment|// for test
name|void
name|setAttachments
parameter_list|(
name|Collection
argument_list|<
name|PolicyAttachment
argument_list|>
name|a
parameter_list|)
block|{
name|attachments
operator|=
name|a
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|PolicyAttachment
argument_list|>
name|getAttachments
parameter_list|()
block|{
return|return
name|attachments
return|;
block|}
block|}
end_class

end_unit

