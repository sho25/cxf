begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|DeliveryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|ExpirationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|FilterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|Subscribe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|SubscribeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|base
operator|.
name|SimpleEventingIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|faults
operator|.
name|CannotProcessFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|faults
operator|.
name|NoDeliveryMechanismEstablished
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|utils
operator|.
name|DurationAndDateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SubscriptionGrantingTest
extends|extends
name|SimpleEventingIntegrationTest
block|{
comment|/*    */
comment|/**      * specification:      * The expiration time MAY be either a specific time or a duration but MUST      * be of the same type as the wse:Expires element of the corresponding request.      * If the corresponding request did not contain a wse:Expires element, this      * element MUST be a duration (xs:duration).      *      * @throws IOException      */
annotation|@
name|Test
specifier|public
name|void
name|testExpirationGrantingWithoutBestEffort
parameter_list|()
throws|throws
name|IOException
block|{
comment|// we specify a xs:duration
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"PT0S"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|DeliveryType
name|delivery
init|=
operator|new
name|DeliveryType
argument_list|()
decl_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|createDummyNotifyTo
argument_list|()
argument_list|)
expr_stmt|;
name|SubscribeResponse
name|resp
init|=
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Specification requires that EventSource return a xs:duration "
operator|+
literal|"expirationType if a xs:duration was requested by client"
argument_list|,
name|DurationAndDateUtil
operator|.
name|isDuration
argument_list|(
name|resp
operator|.
name|getGrantedExpires
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// we specify a xs:dateTime
name|subscribe
operator|=
operator|new
name|Subscribe
argument_list|()
expr_stmt|;
name|exp
operator|=
operator|new
name|ExpirationType
argument_list|()
expr_stmt|;
name|XMLGregorianCalendar
name|dateRequest
init|=
operator|(
name|XMLGregorianCalendar
operator|)
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"2138-06-26T12:23:12.000-01:00"
argument_list|)
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|dateRequest
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|delivery
operator|=
operator|new
name|DeliveryType
argument_list|()
expr_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|createDummyNotifyTo
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|=
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Specification requires that EventSource return a "
operator|+
literal|"xs:dateTime expirationType if a xs:dateTime was requested by client"
argument_list|,
name|DurationAndDateUtil
operator|.
name|isXMLGregorianCalendar
argument_list|(
name|resp
operator|.
name|getGrantedExpires
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|XMLGregorianCalendar
name|returned
init|=
name|DurationAndDateUtil
operator|.
name|parseXMLGregorianCalendar
argument_list|(
name|resp
operator|.
name|getGrantedExpires
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"granted expiration: "
operator|+
name|returned
operator|.
name|normalize
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"requested expiration: "
operator|+
name|dateRequest
operator|.
name|normalize
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Server should have returned exactly the same date as we requested"
argument_list|,
name|returned
operator|.
name|equals
argument_list|(
name|dateRequest
argument_list|)
argument_list|)
expr_stmt|;
comment|// we don't specify anything
name|subscribe
operator|=
operator|new
name|Subscribe
argument_list|()
expr_stmt|;
name|delivery
operator|=
operator|new
name|DeliveryType
argument_list|()
expr_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|createDummyNotifyTo
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|=
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Specification requires that EventSource return a xs:duration "
operator|+
literal|"expirationType if no specific expirationType was requested by client"
argument_list|,
name|DurationAndDateUtil
operator|.
name|isDuration
argument_list|(
name|resp
operator|.
name|getGrantedExpires
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * When BestEffort=true, the server doesn't have to grant exactly the date as we requested      * @throws IOException      */
annotation|@
name|Test
specifier|public
name|void
name|testExpirationGrantingWithBestEffort
parameter_list|()
throws|throws
name|IOException
block|{
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|DeliveryType
name|delivery
init|=
operator|new
name|DeliveryType
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|dateRequest
init|=
operator|(
name|XMLGregorianCalendar
operator|)
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"2138-06-26T12:23:12.000-01:00"
argument_list|)
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|dateRequest
argument_list|)
argument_list|)
expr_stmt|;
name|exp
operator|.
name|setBestEffort
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|createDummyNotifyTo
argument_list|()
argument_list|)
expr_stmt|;
name|SubscribeResponse
name|resp
init|=
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Specification requires that EventSource return a "
operator|+
literal|"xs:dateTime expirationType if a xs:dateTime was requested by client"
argument_list|,
name|DurationAndDateUtil
operator|.
name|isXMLGregorianCalendar
argument_list|(
name|resp
operator|.
name|getGrantedExpires
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noDeliveryMechanismSpecified
parameter_list|()
throws|throws
name|IOException
block|{
comment|// we specify a xs:duration
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"PT0S"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
try|try
block|{
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getFault
argument_list|()
operator|.
name|getFaultCode
argument_list|()
operator|.
name|contains
argument_list|(
name|NoDeliveryMechanismEstablished
operator|.
name|LOCAL_PART
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getFault
argument_list|()
operator|.
name|getTextContent
argument_list|()
operator|.
name|contains
argument_list|(
name|NoDeliveryMechanismEstablished
operator|.
name|REASON
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"Event source should have sent a NoDeliveryMechanismEstablished fault"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cannotProcessFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|DeliveryType
name|delivery
init|=
operator|new
name|DeliveryType
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|dateRequest
init|=
operator|(
name|XMLGregorianCalendar
operator|)
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"2138-06-26T12:23:12.000-01:00"
argument_list|)
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|dateRequest
argument_list|)
argument_list|)
expr_stmt|;
name|exp
operator|.
name|setBestEffort
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|createDummyNotifyTo
argument_list|()
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterType
argument_list|()
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getFilter
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
literal|"@^5this-is-not-a-valid-xpath-expression!!!*-/"
argument_list|)
expr_stmt|;
try|try
block|{
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getFault
argument_list|()
operator|.
name|getFaultCode
argument_list|()
operator|.
name|contains
argument_list|(
name|CannotProcessFilter
operator|.
name|LOCAL_PART
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getFault
argument_list|()
operator|.
name|getTextContent
argument_list|()
operator|.
name|contains
argument_list|(
name|CannotProcessFilter
operator|.
name|REASON
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"Event source should have sent a CannotProcessFilter fault"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

