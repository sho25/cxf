begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|DeliveryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|ExpirationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|GetStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|GetStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|Renew
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|Subscribe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|SubscribeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|Unsubscribe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|UnsubscribeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|base
operator|.
name|SimpleEventingIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|manager
operator|.
name|SubscriptionManagerEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|faults
operator|.
name|UnknownSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|utils
operator|.
name|DurationAndDateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests to verify that a Subscription Manager can be properly used to manage existing subscriptions.  * Typically, such test will create a subscription using the Event Source and then invoke  * possible operations on the Subscription Manager to manage it.  */
end_comment

begin_class
specifier|public
class|class
name|SubscriptionManagementTest
extends|extends
name|SimpleEventingIntegrationTest
block|{
comment|/**      * Creates a subscription and then retrieves its status from the Subscription Manager.      */
annotation|@
name|Test
specifier|public
name|void
name|getStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"PT0S"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|DeliveryType
name|delivery
init|=
operator|new
name|DeliveryType
argument_list|()
decl_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|createDummyNotifyTo
argument_list|()
argument_list|)
expr_stmt|;
name|SubscribeResponse
name|resp
init|=
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
decl_stmt|;
name|SubscriptionManagerEndpoint
name|client
init|=
name|createSubscriptionManagerClient
argument_list|(
name|resp
operator|.
name|getSubscriptionManager
argument_list|()
operator|.
name|getReferenceParameters
argument_list|()
argument_list|)
decl_stmt|;
name|GetStatusResponse
name|response
init|=
name|client
operator|.
name|getStatusOp
argument_list|(
operator|new
name|GetStatus
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"EXPIRES: "
operator|+
name|response
operator|.
name|getGrantedExpires
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"GetStatus operation should return a XMLGregorianCalendar"
argument_list|,
name|DurationAndDateUtil
operator|.
name|isXMLGregorianCalendar
argument_list|(
name|response
operator|.
name|getGrantedExpires
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tries to create a subscription, then cancel it, then obtain its status.      * The last mentioned operation should fail.      */
annotation|@
name|Test
specifier|public
name|void
name|unsubscribeAndThenGetStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"PT0S"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|DeliveryType
name|delivery
init|=
operator|new
name|DeliveryType
argument_list|()
decl_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|createDummyNotifyTo
argument_list|()
argument_list|)
expr_stmt|;
name|SubscribeResponse
name|subscribeResponse
init|=
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
decl_stmt|;
name|SubscriptionManagerEndpoint
name|client
init|=
name|createSubscriptionManagerClient
argument_list|(
name|subscribeResponse
operator|.
name|getSubscriptionManager
argument_list|()
operator|.
name|getReferenceParameters
argument_list|()
argument_list|)
decl_stmt|;
name|UnsubscribeResponse
name|unsubscribeResponse
init|=
name|client
operator|.
name|unsubscribeOp
argument_list|(
operator|new
name|Unsubscribe
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|unsubscribeResponse
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getStatusOp
argument_list|(
operator|new
name|GetStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|soap
operator|.
name|SOAPFaultException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getFault
argument_list|()
operator|.
name|getFaultCode
argument_list|()
operator|.
name|contains
argument_list|(
name|UnknownSubscription
operator|.
name|LOCAL_PART
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getFault
argument_list|()
operator|.
name|getTextContent
argument_list|()
operator|.
name|contains
argument_list|(
name|UnknownSubscription
operator|.
name|REASON
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"The subscription manager should have refused to send status of a cancelled subscription"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the Renew operation, while specifying an xs:dateTime in the renew request,      * eg. the subscriber requests to set the subscription expiration to a specific date/time.      */
annotation|@
name|Test
specifier|public
name|void
name|renewWithDateTime
parameter_list|()
throws|throws
name|IOException
block|{
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"2018-10-21T14:52:46.826+02:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5 minutes
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|DeliveryType
name|delivery
init|=
operator|new
name|DeliveryType
argument_list|()
decl_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|createDummyNotifyTo
argument_list|()
argument_list|)
expr_stmt|;
name|SubscribeResponse
name|resp
init|=
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
decl_stmt|;
name|SubscriptionManagerEndpoint
name|client
init|=
name|createSubscriptionManagerClient
argument_list|(
name|resp
operator|.
name|getSubscriptionManager
argument_list|()
operator|.
name|getReferenceParameters
argument_list|()
argument_list|)
decl_stmt|;
name|GetStatusResponse
name|response
init|=
name|client
operator|.
name|getStatusOp
argument_list|(
operator|new
name|GetStatus
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|expirationBefore
init|=
name|response
operator|.
name|getGrantedExpires
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"EXPIRES before renew: "
operator|+
name|expirationBefore
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|expirationBefore
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Renew
name|renewRequest
init|=
operator|new
name|Renew
argument_list|()
decl_stmt|;
name|ExpirationType
name|renewExp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|renewExp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"2056-10-21T14:54:46.826+02:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 10 minutes
name|renewRequest
operator|.
name|setExpires
argument_list|(
name|renewExp
argument_list|)
expr_stmt|;
name|client
operator|.
name|renewOp
argument_list|(
name|renewRequest
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|getStatusOp
argument_list|(
operator|new
name|GetStatus
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expirationAfter
init|=
name|response
operator|.
name|getGrantedExpires
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"EXPIRES after renew: "
operator|+
name|expirationAfter
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Renew request should change the expiration time at least a bit"
argument_list|,
name|expirationAfter
operator|.
name|equals
argument_list|(
name|expirationBefore
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the Renew operation, while specifying an xs:duration in the renew request,      * eg. the subscriber requests to prolong the subscription by a specific amount of time.      */
annotation|@
name|Test
specifier|public
name|void
name|renewWithDuration
parameter_list|()
throws|throws
name|IOException
block|{
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"PT5M0S"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5 minutes
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|DeliveryType
name|delivery
init|=
operator|new
name|DeliveryType
argument_list|()
decl_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|createDummyNotifyTo
argument_list|()
argument_list|)
expr_stmt|;
name|SubscribeResponse
name|resp
init|=
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
decl_stmt|;
name|SubscriptionManagerEndpoint
name|client
init|=
name|createSubscriptionManagerClient
argument_list|(
name|resp
operator|.
name|getSubscriptionManager
argument_list|()
operator|.
name|getReferenceParameters
argument_list|()
argument_list|)
decl_stmt|;
name|GetStatusResponse
name|response
init|=
name|client
operator|.
name|getStatusOp
argument_list|(
operator|new
name|GetStatus
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|expirationBefore
init|=
name|response
operator|.
name|getGrantedExpires
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"EXPIRES before renew: "
operator|+
name|expirationBefore
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|expirationBefore
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Renew
name|renewRequest
init|=
operator|new
name|Renew
argument_list|()
decl_stmt|;
name|ExpirationType
name|renewExp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|renewExp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"PT10M0S"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 10 minutes
name|renewRequest
operator|.
name|setExpires
argument_list|(
name|renewExp
argument_list|)
expr_stmt|;
name|client
operator|.
name|renewOp
argument_list|(
name|renewRequest
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|getStatusOp
argument_list|(
operator|new
name|GetStatus
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expirationAfter
init|=
name|response
operator|.
name|getGrantedExpires
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"EXPIRES after renew: "
operator|+
name|expirationAfter
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Renew request should change the expiration time at least a bit"
argument_list|,
name|expirationAfter
operator|.
name|equals
argument_list|(
name|expirationBefore
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

