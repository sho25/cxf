begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AttributedURIType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|ReferenceParametersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|DeliveryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|ExpirationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|FilterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|FormatType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|Subscribe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|notification
operator|.
name|NotificatorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|notification
operator|.
name|emitters
operator|.
name|Emitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|notification
operator|.
name|emitters
operator|.
name|EmitterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|base
operator|.
name|SimpleEventingIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|base
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|integration
operator|.
name|eventsink
operator|.
name|TestingEventSinkImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|integration
operator|.
name|eventsink
operator|.
name|TestingWrappedEventSinkImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|integration
operator|.
name|notificationapi
operator|.
name|EarthquakeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|integration
operator|.
name|notificationapi
operator|.
name|FireEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|EventingConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|utils
operator|.
name|DurationAndDateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|NotificationTest
extends|extends
name|SimpleEventingIntegrationTest
block|{
specifier|static
specifier|final
name|String
name|NOTIFICATION_TEST_PORT
init|=
name|allocatePort
argument_list|(
name|NotificationTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|basicReceptionOfEvents
parameter_list|()
throws|throws
name|IOException
block|{
name|NotificatorService
name|service
init|=
name|createNotificatorService
argument_list|()
decl_stmt|;
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"PT0S"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|eventSinkERT
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|AttributedURIType
name|eventSinkAddr
init|=
operator|new
name|AttributedURIType
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|TestUtil
operator|.
name|generateRandomURLWithHttpTransport
argument_list|(
name|NOTIFICATION_TEST_PORT
argument_list|)
decl_stmt|;
name|eventSinkAddr
operator|.
name|setValue
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|eventSinkERT
operator|.
name|setAddress
argument_list|(
name|eventSinkAddr
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
operator|new
name|DeliveryType
argument_list|()
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createNotifyTo
argument_list|(
name|eventSinkERT
argument_list|)
argument_list|)
expr_stmt|;
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|Server
name|eventSinkServer
init|=
name|createEventSink
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|Emitter
name|emitter
init|=
operator|new
name|EmitterImpl
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|emitter
operator|.
name|dispatch
argument_list|(
operator|new
name|FireEvent
argument_list|(
literal|"Canada"
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
operator|==
literal|3
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|eventSinkServer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
operator|!=
literal|3
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"TestingEventSinkImpl should have received 3 events but received "
operator|+
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|basicReceptionOfWrappedEvents
parameter_list|()
throws|throws
name|IOException
block|{
name|NotificatorService
name|service
init|=
name|createNotificatorService
argument_list|()
decl_stmt|;
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"PT0S"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|eventSinkERT
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|AttributedURIType
name|eventSinkAddr
init|=
operator|new
name|AttributedURIType
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|TestUtil
operator|.
name|generateRandomURLWithHttpTransport
argument_list|(
name|NOTIFICATION_TEST_PORT
argument_list|)
decl_stmt|;
name|eventSinkAddr
operator|.
name|setValue
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|eventSinkERT
operator|.
name|setAddress
argument_list|(
name|eventSinkAddr
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
operator|new
name|DeliveryType
argument_list|()
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createNotifyTo
argument_list|(
name|eventSinkERT
argument_list|)
argument_list|)
expr_stmt|;
name|FormatType
name|formatType
init|=
operator|new
name|FormatType
argument_list|()
decl_stmt|;
name|formatType
operator|.
name|setName
argument_list|(
name|EventingConstants
operator|.
name|DELIVERY_FORMAT_WRAPPED
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setFormat
argument_list|(
name|formatType
argument_list|)
expr_stmt|;
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|Server
name|eventSinkServer
init|=
name|createWrappedEventSink
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|TestingWrappedEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|Emitter
name|emitter
init|=
operator|new
name|EmitterImpl
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|emitter
operator|.
name|dispatch
argument_list|(
operator|new
name|FireEvent
argument_list|(
literal|"Canada"
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|TestingWrappedEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
operator|==
literal|3
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|eventSinkServer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|TestingWrappedEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
operator|!=
literal|3
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"TestingWrappedEventSinkImpl should have received 3 events but received "
operator|+
name|TestingWrappedEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|withWSAAction
parameter_list|()
throws|throws
name|Exception
block|{
name|NotificatorService
name|service
init|=
name|createNotificatorService
argument_list|()
decl_stmt|;
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"PT0S"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|eventSinkERT
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|AttributedURIType
name|eventSinkAddr
init|=
operator|new
name|AttributedURIType
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|TestUtil
operator|.
name|generateRandomURLWithHttpTransport
argument_list|(
name|NOTIFICATION_TEST_PORT
argument_list|)
decl_stmt|;
name|eventSinkAddr
operator|.
name|setValue
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|eventSinkERT
operator|.
name|setAddress
argument_list|(
name|eventSinkAddr
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
operator|new
name|DeliveryType
argument_list|()
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createNotifyTo
argument_list|(
name|eventSinkERT
argument_list|)
argument_list|)
expr_stmt|;
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|Server
name|eventSinkServer
init|=
name|createEventSinkWithWSAActionAssertion
argument_list|(
name|url
argument_list|,
literal|"http://www.fire.com"
argument_list|)
decl_stmt|;
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|Emitter
name|emitter
init|=
operator|new
name|EmitterImpl
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|emitter
operator|.
name|dispatch
argument_list|(
operator|new
name|FireEvent
argument_list|(
literal|"Canada"
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
operator|==
literal|1
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|eventSinkServer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"TestingEventSinkImpl should have received 1 events but received "
operator|+
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|withReferenceParameters
parameter_list|()
throws|throws
name|Exception
block|{
name|NotificatorService
name|service
init|=
name|createNotificatorService
argument_list|()
decl_stmt|;
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"PT0S"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|eventSinkERT
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|idqn
init|=
operator|new
name|JAXBElement
argument_list|<>
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://www.example.org"
argument_list|,
literal|"MyReferenceParameter"
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"380"
argument_list|)
decl_stmt|;
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|idqn2
init|=
operator|new
name|JAXBElement
argument_list|<>
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://www.example.org"
argument_list|,
literal|"MyReferenceParameter2"
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"381"
argument_list|)
decl_stmt|;
name|eventSinkERT
operator|.
name|setReferenceParameters
argument_list|(
operator|new
name|ReferenceParametersType
argument_list|()
argument_list|)
expr_stmt|;
name|eventSinkERT
operator|.
name|getReferenceParameters
argument_list|()
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|idqn
argument_list|)
expr_stmt|;
name|eventSinkERT
operator|.
name|getReferenceParameters
argument_list|()
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|idqn2
argument_list|)
expr_stmt|;
name|AttributedURIType
name|eventSinkAddr
init|=
operator|new
name|AttributedURIType
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|TestUtil
operator|.
name|generateRandomURLWithHttpTransport
argument_list|(
name|NOTIFICATION_TEST_PORT
argument_list|)
decl_stmt|;
name|eventSinkAddr
operator|.
name|setValue
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|eventSinkERT
operator|.
name|setAddress
argument_list|(
name|eventSinkAddr
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
operator|new
name|DeliveryType
argument_list|()
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createNotifyTo
argument_list|(
name|eventSinkERT
argument_list|)
argument_list|)
expr_stmt|;
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|Server
name|eventSinkServer
init|=
name|createEventSinkWithReferenceParametersAssertion
argument_list|(
name|url
argument_list|,
name|eventSinkERT
operator|.
name|getReferenceParameters
argument_list|()
argument_list|)
decl_stmt|;
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|Emitter
name|emitter
init|=
operator|new
name|EmitterImpl
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|emitter
operator|.
name|dispatch
argument_list|(
operator|new
name|FireEvent
argument_list|(
literal|"Canada"
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
operator|==
literal|1
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|eventSinkServer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|int
name|received
init|=
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|received
operator|!=
literal|1
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"TestingEventSinkImpl should have received 1 events but received "
operator|+
name|received
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * We request only to receive notifications about fires in Canada      * and there will be a fire in Canada. We should receive      * this notification.      */
annotation|@
name|Test
specifier|public
name|void
name|withFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|NotificatorService
name|service
init|=
name|createNotificatorService
argument_list|()
decl_stmt|;
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"PT0S"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|eventSinkERT
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|AttributedURIType
name|eventSinkAddr
init|=
operator|new
name|AttributedURIType
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|TestUtil
operator|.
name|generateRandomURLWithHttpTransport
argument_list|(
name|NOTIFICATION_TEST_PORT
argument_list|)
decl_stmt|;
name|eventSinkAddr
operator|.
name|setValue
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|eventSinkERT
operator|.
name|setAddress
argument_list|(
name|eventSinkAddr
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
operator|new
name|DeliveryType
argument_list|()
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createNotifyTo
argument_list|(
name|eventSinkERT
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterType
argument_list|()
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getFilter
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
literal|"//*[local-name()='fire' and "
operator|+
literal|"namespace-uri()='http://www.events.com']/location[text()='Canada']"
argument_list|)
expr_stmt|;
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|Server
name|eventSinkServer
init|=
name|createEventSink
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|Emitter
name|emitter
init|=
operator|new
name|EmitterImpl
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|emitter
operator|.
name|dispatch
argument_list|(
operator|new
name|FireEvent
argument_list|(
literal|"Canada"
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
operator|==
literal|1
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|eventSinkServer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"TestingEventSinkImpl should have received 1 events but received "
operator|+
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * We request only to receive notifications about fires in Russia      * and there will be only a fire in Canada. We should not receive      * this notification.      */
annotation|@
name|Test
specifier|public
name|void
name|withFilterNegative
parameter_list|()
throws|throws
name|IOException
block|{
name|NotificatorService
name|service
init|=
name|createNotificatorService
argument_list|()
decl_stmt|;
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"PT0S"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|eventSinkERT
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|AttributedURIType
name|eventSinkAddr
init|=
operator|new
name|AttributedURIType
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|TestUtil
operator|.
name|generateRandomURLWithHttpTransport
argument_list|(
name|NOTIFICATION_TEST_PORT
argument_list|)
decl_stmt|;
name|eventSinkAddr
operator|.
name|setValue
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|eventSinkERT
operator|.
name|setAddress
argument_list|(
name|eventSinkAddr
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
operator|new
name|DeliveryType
argument_list|()
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createNotifyTo
argument_list|(
name|eventSinkERT
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterType
argument_list|()
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getFilter
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
literal|"/*[local-name()='fire']/location[text()='Russia']"
argument_list|)
expr_stmt|;
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|Server
name|eventSinkServer
init|=
name|createEventSink
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|Emitter
name|emitter
init|=
operator|new
name|EmitterImpl
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|emitter
operator|.
name|dispatch
argument_list|(
operator|new
name|FireEvent
argument_list|(
literal|"Canada"
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|eventSinkServer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"TestingEventSinkImpl should have received 0 events but received "
operator|+
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * We request only to receive notifications about earthquakes in Russia with Richter scale equal to 3.5      * and there will be one fire in Canada and one earthquake in Russia. We should      * receive only one notification.      */
annotation|@
name|Test
specifier|public
name|void
name|withFilter2
parameter_list|()
throws|throws
name|IOException
block|{
name|NotificatorService
name|service
init|=
name|createNotificatorService
argument_list|()
decl_stmt|;
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"PT0S"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|eventSinkERT
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|AttributedURIType
name|eventSinkAddr
init|=
operator|new
name|AttributedURIType
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|TestUtil
operator|.
name|generateRandomURLWithHttpTransport
argument_list|(
name|NOTIFICATION_TEST_PORT
argument_list|)
decl_stmt|;
name|eventSinkAddr
operator|.
name|setValue
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|eventSinkERT
operator|.
name|setAddress
argument_list|(
name|eventSinkAddr
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
operator|new
name|DeliveryType
argument_list|()
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createNotifyTo
argument_list|(
name|eventSinkERT
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterType
argument_list|()
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getFilter
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
literal|"//*[local-name()='earthquake']/location[text()='Russia']/"
operator|+
literal|"../richterScale[contains(text(),'3.5')]"
argument_list|)
expr_stmt|;
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|Server
name|eventSinkServer
init|=
name|createEventSink
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|TestingEventSinkImpl
operator|.
name|RECEIVED_EARTHQUAKES
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|Emitter
name|emitter
init|=
operator|new
name|EmitterImpl
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|emitter
operator|.
name|dispatch
argument_list|(
operator|new
name|FireEvent
argument_list|(
literal|"Canada"
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|emitter
operator|.
name|dispatch
argument_list|(
operator|new
name|EarthquakeEvent
argument_list|(
literal|3.5f
argument_list|,
literal|"Russia"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|TestingEventSinkImpl
operator|.
name|RECEIVED_EARTHQUAKES
operator|.
name|get
argument_list|()
operator|==
literal|1
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|eventSinkServer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|TestingEventSinkImpl
operator|.
name|RECEIVED_EARTHQUAKES
operator|.
name|get
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"TestingEventSinkImpl should have received 1 earthquake event but received "
operator|+
name|TestingEventSinkImpl
operator|.
name|RECEIVED_EARTHQUAKES
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"TestingEventSinkImpl should have not received a fire event"
operator|+
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * request a subscription that expires soon      * an event will be emitted after the expiration      * we should not receive notification about the event      * @throws IOException      */
annotation|@
name|Test
specifier|public
name|void
name|expiration
parameter_list|()
throws|throws
name|IOException
block|{
name|NotificatorService
name|service
init|=
name|createNotificatorService
argument_list|()
decl_stmt|;
name|Subscribe
name|subscribe
init|=
operator|new
name|Subscribe
argument_list|()
decl_stmt|;
name|ExpirationType
name|exp
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|exp
operator|.
name|setValue
argument_list|(
name|DurationAndDateUtil
operator|.
name|convertToXMLString
argument_list|(
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
literal|"PT1S"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setExpires
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|eventSinkERT
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|AttributedURIType
name|eventSinkAddr
init|=
operator|new
name|AttributedURIType
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|TestUtil
operator|.
name|generateRandomURLWithHttpTransport
argument_list|(
name|NOTIFICATION_TEST_PORT
argument_list|)
decl_stmt|;
name|eventSinkAddr
operator|.
name|setValue
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|eventSinkERT
operator|.
name|setAddress
argument_list|(
name|eventSinkAddr
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|setDelivery
argument_list|(
operator|new
name|DeliveryType
argument_list|()
argument_list|)
expr_stmt|;
name|subscribe
operator|.
name|getDelivery
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|ObjectFactory
argument_list|()
operator|.
name|createNotifyTo
argument_list|(
name|eventSinkERT
argument_list|)
argument_list|)
expr_stmt|;
name|eventSourceClient
operator|.
name|subscribeOp
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|Server
name|eventSinkServer
init|=
name|createEventSink
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|Emitter
name|emitter
init|=
operator|new
name|EmitterImpl
argument_list|(
name|service
argument_list|)
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|emitter
operator|.
name|dispatch
argument_list|(
operator|new
name|FireEvent
argument_list|(
literal|"Canada"
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|eventSinkServer
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"TestingEventSinkImpl should not have received any events but received "
operator|+
name|TestingEventSinkImpl
operator|.
name|RECEIVED_FIRES
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

