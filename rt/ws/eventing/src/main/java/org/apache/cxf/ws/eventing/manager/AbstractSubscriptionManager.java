begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|manager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
operator|.
name|WrappedMessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|ExpirationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|GetStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|GetStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|Renew
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|RenewResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|Unsubscribe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|UnsubscribeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|database
operator|.
name|SubscriptionTicket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|manager
operator|.
name|SubscriptionManagerInterfaceForManagers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|faults
operator|.
name|UnknownSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|utils
operator|.
name|DurationAndDateUtil
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSubscriptionManager
implements|implements
name|SubscriptionManagerEndpoint
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|AbstractSubscriptionManager
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Resource
specifier|protected
name|WebServiceContext
name|context
decl_stmt|;
specifier|public
name|AbstractSubscriptionManager
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|RenewResponse
name|renewOp
parameter_list|(
name|Renew
name|body
parameter_list|)
block|{
name|RenewResponse
name|response
init|=
operator|new
name|RenewResponse
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
name|retrieveSubscriptionUUID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"received Renew message for UUID="
operator|+
name|uuid
argument_list|)
expr_stmt|;
name|ExpirationType
name|expiration
init|=
name|getSubscriptionManagerBackend
argument_list|()
operator|.
name|renew
argument_list|(
name|UUID
operator|.
name|fromString
argument_list|(
name|uuid
argument_list|)
argument_list|,
name|body
operator|.
name|getExpires
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|setGrantedExpires
argument_list|(
name|expiration
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Extended subscription for UUID="
operator|+
name|uuid
operator|+
literal|" to "
operator|+
name|expiration
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|GetStatusResponse
name|getStatusOp
parameter_list|(
name|GetStatus
name|body
parameter_list|)
block|{
name|String
name|uuid
init|=
name|retrieveSubscriptionUUID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"received GetStatus message for UUID="
operator|+
name|uuid
argument_list|)
expr_stmt|;
name|SubscriptionTicket
name|ticket
init|=
name|obtainTicketFromDatabaseOrThrowFault
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
name|GetStatusResponse
name|response
init|=
operator|new
name|GetStatusResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setGrantedExpires
argument_list|(
name|DurationAndDateUtil
operator|.
name|toExpirationTypeContainingGregorianCalendar
argument_list|(
name|ticket
operator|.
name|getExpires
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|UnsubscribeResponse
name|unsubscribeOp
parameter_list|(
name|Unsubscribe
name|body
parameter_list|)
block|{
name|String
name|uuid
init|=
name|retrieveSubscriptionUUID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"received Unsubscribe message for UUID="
operator|+
name|uuid
argument_list|)
expr_stmt|;
name|getSubscriptionManagerBackend
argument_list|()
operator|.
name|unsubscribeTicket
argument_list|(
name|UUID
operator|.
name|fromString
argument_list|(
name|uuid
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"successfully removed subscription with UUID "
operator|+
name|uuid
argument_list|)
expr_stmt|;
return|return
operator|new
name|UnsubscribeResponse
argument_list|()
return|;
block|}
specifier|protected
specifier|abstract
name|SubscriptionManagerInterfaceForManagers
name|getSubscriptionManagerBackend
parameter_list|()
function_decl|;
comment|/**      * Retrieves the subscription's uuid as it was specified in SOAP header.      * Messages sent to SubscriptionManager by clients always need to specify the uuid.      *      * @return the uuid of the subscription specified in this message's headers. Note:      *         obtaining this doesn't yet make sure that this subscription actually exists.      */
specifier|protected
name|String
name|retrieveSubscriptionUUID
parameter_list|()
block|{
name|Object
name|uuid
init|=
operator|(
operator|(
name|WrappedMessageContext
operator|)
name|context
operator|.
name|getMessageContext
argument_list|()
operator|)
operator|.
name|getWrappedMessage
argument_list|()
operator|.
name|getContextualProperty
argument_list|(
literal|"uuid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownSubscription
argument_list|()
throw|;
block|}
if|if
condition|(
name|uuid
operator|.
name|getClass
argument_list|()
operator|!=
name|String
operator|.
name|class
condition|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Subscription ID should be a String but is "
operator|+
name|uuid
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|(
name|String
operator|)
name|uuid
return|;
block|}
comment|/**      * searches the subscription database for a subscription by the given UUID      *      * @param uuid      * @return the SubscriptionTicket, or throws UnknownSubscription fault if no such subscription exists      */
specifier|protected
name|SubscriptionTicket
name|obtainTicketFromDatabaseOrThrowFault
parameter_list|(
name|String
name|uuid
parameter_list|)
block|{
name|SubscriptionTicket
name|ticket
init|=
name|getSubscriptionManagerBackend
argument_list|()
operator|.
name|findTicket
argument_list|(
name|UUID
operator|.
name|fromString
argument_list|(
name|uuid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ticket
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Unknown ticket UUID: "
operator|+
name|uuid
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnknownSubscription
argument_list|()
throw|;
block|}
return|return
name|ticket
return|;
block|}
block|}
end_class

end_unit

