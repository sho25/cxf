begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|database
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|faults
operator|.
name|UnknownSubscription
import|;
end_import

begin_comment
comment|/**  * Default implementation of a Subscription Database. Basically it is simply a wrapper  * around a List<SubscriptionTicket> with some convenience methods. The underlying List  * is a thread-safe CopyOnWriteArrayList.  */
end_comment

begin_class
specifier|public
class|class
name|SubscriptionDatabaseImpl
implements|implements
name|SubscriptionDatabase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|SubscriptionDatabaseImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|SubscriptionTicket
argument_list|>
name|ticketList
decl_stmt|;
specifier|public
name|SubscriptionDatabaseImpl
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Instantiating SubscriptionDatabaseImpl"
argument_list|)
expr_stmt|;
name|ticketList
operator|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|SubscriptionTicket
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addTicket
parameter_list|(
name|SubscriptionTicket
name|ticket
parameter_list|)
block|{
name|ticketList
operator|.
name|add
argument_list|(
name|ticket
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SubscriptionDatabaseImpl accepted ticket for subscription: "
operator|+
name|ticket
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SubscriptionTicket
argument_list|>
name|getTickets
parameter_list|()
block|{
return|return
name|ticketList
return|;
block|}
comment|/**      * Searches the database for a ticket with the specified UUID      *      * @param id the UUID which will be searched for      * @return the ticket, or null of no ticket with this UUID exists      */
annotation|@
name|Override
specifier|public
name|SubscriptionTicket
name|findById
parameter_list|(
name|UUID
name|id
parameter_list|)
block|{
for|for
control|(
name|SubscriptionTicket
name|ticket
range|:
name|ticketList
control|)
block|{
if|if
condition|(
name|ticket
operator|.
name|getUuid
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|ticket
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Removes a ticket by UUID from the database.      *      * @param id the UUID of the ticket to remove      * @throws UnknownSubscription if unknown UUID is supplied      */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|removeTicketByUUID
parameter_list|(
name|UUID
name|id
parameter_list|)
block|{
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SubscriptionTicket
name|ticket
range|:
name|ticketList
control|)
block|{
if|if
condition|(
name|ticket
operator|.
name|getUuid
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|ticketList
operator|.
name|remove
argument_list|(
name|ticket
argument_list|)
expr_stmt|;
name|removed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|removed
condition|)
block|{
throw|throw
operator|new
name|UnknownSubscription
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

