begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpression
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|FilterType
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|FilteringUtil
block|{
specifier|public
specifier|static
specifier|final
name|String
name|NAMESPACE_XPATH10
init|=
literal|"http://www.w3.org/2011/03/ws-evt/Dialects/XPath10"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAMESPACE_XPATH20
init|=
literal|"http://www.w3.org/2011/03/ws-evt/Dialects/XPath20"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|FilteringUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|XPathFactory
name|xPathFactory
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
specifier|private
name|FilteringUtil
parameter_list|()
block|{      }
specifier|public
specifier|static
name|boolean
name|isFilteringDialectSupported
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
return|return
name|namespace
operator|.
name|equals
argument_list|(
name|NAMESPACE_XPATH10
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|doesConformToFilter
parameter_list|(
name|Element
name|elm
parameter_list|,
name|FilterType
name|filter
parameter_list|)
block|{
if|if
condition|(
operator|(
name|filter
operator|==
literal|null
operator|)
operator|||
operator|(
name|filter
operator|.
name|getContent
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|xPathString
init|=
operator|(
name|String
operator|)
name|filter
operator|.
name|getContent
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|XPath
name|xPath
init|=
name|xPathFactory
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|XPathExpression
name|xPathExpression
init|=
name|xPath
operator|.
name|compile
argument_list|(
name|xPathString
argument_list|)
decl_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|xPathExpression
operator|.
name|evaluate
argument_list|(
name|elm
argument_list|,
name|XPathConstants
operator|.
name|BOOLEAN
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isValidFilter
parameter_list|(
name|String
name|xPathString
parameter_list|)
block|{
if|if
condition|(
name|xPathString
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|XPath
name|xPath
init|=
name|xPathFactory
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|xPath
operator|.
name|compile
argument_list|(
name|xPathString
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|runFilterOnMessage
parameter_list|(
name|SOAPMessage
name|msg
parameter_list|,
name|FilterType
name|filter
parameter_list|)
block|{
try|try
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|msg
operator|.
name|getSOAPBody
argument_list|()
operator|.
name|getChildElements
argument_list|()
decl_stmt|;
specifier|final
name|String
name|xPath
init|=
operator|(
name|String
operator|)
name|filter
operator|.
name|getContent
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Element
name|elm
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|FilteringUtil
operator|.
name|doesConformToFilter
argument_list|(
name|elm
argument_list|,
name|filter
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Message passed through filter: "
operator|+
name|xPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Filter "
operator|+
name|xPath
operator|+
literal|" filtered out this message."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"SOAPException in runFilterOnMessage: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

