begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|manager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|AttributedURIType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|DeliveryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|ExpirationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|FilterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|FormatType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|NotifyTo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|ReferenceParametersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|database
operator|.
name|SubscriptionDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|database
operator|.
name|SubscriptionDatabaseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|database
operator|.
name|SubscriptionTicket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|notification
operator|.
name|NotificatorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|notification
operator|.
name|SubscriptionEndStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|EventingConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|faults
operator|.
name|CannotProcessFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|faults
operator|.
name|DeliveryFormatRequestedUnavailable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|faults
operator|.
name|FilteringRequestedUnavailable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|faults
operator|.
name|NoDeliveryMechanismEstablished
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|faults
operator|.
name|UnknownSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|utils
operator|.
name|DurationAndDateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|utils
operator|.
name|EPRInspectionTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|utils
operator|.
name|FilteringUtil
import|;
end_import

begin_comment
comment|/**  * The core class representing WS-Eventing backend. It holds an instance of a database and  * acts as a layer for communicating with it.  */
end_comment

begin_class
specifier|public
class|class
name|SubscriptionManagerImpl
implements|implements
name|SubscriptionManager
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|SubscriptionManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|SubscriptionDatabase
name|database
decl_stmt|;
specifier|private
specifier|final
name|String
name|subscriptionIdNamespace
decl_stmt|;
specifier|private
specifier|final
name|String
name|subscriptionIdElementName
decl_stmt|;
specifier|private
name|String
name|url
decl_stmt|;
specifier|private
name|NotificatorService
name|notificator
decl_stmt|;
specifier|public
name|SubscriptionManagerImpl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|database
operator|=
operator|new
name|SubscriptionDatabaseImpl
argument_list|()
expr_stmt|;
name|this
operator|.
name|subscriptionIdNamespace
operator|=
name|EventingConstants
operator|.
name|SUBSCRIPTION_ID_DEFAULT_NAMESPACE
expr_stmt|;
name|this
operator|.
name|subscriptionIdElementName
operator|=
name|EventingConstants
operator|.
name|SUBSCRIPTION_ID_DEFAULT_ELEMENT_NAME
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
specifier|public
name|SubscriptionManagerImpl
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|elementName
parameter_list|)
block|{
name|database
operator|=
operator|new
name|SubscriptionDatabaseImpl
argument_list|()
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|subscriptionIdNamespace
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|subscriptionIdElementName
operator|=
name|elementName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SubscriptionTicketGrantingResponse
name|subscribe
parameter_list|(
name|DeliveryType
name|delivery
parameter_list|,
name|EndpointReferenceType
name|endTo
parameter_list|,
name|ExpirationType
name|expires
parameter_list|,
name|FilterType
name|filter
parameter_list|,
name|FormatType
name|format
parameter_list|)
block|{
name|SubscriptionTicket
name|ticket
init|=
operator|new
name|SubscriptionTicket
argument_list|()
decl_stmt|;
name|SubscriptionTicketGrantingResponse
name|response
init|=
operator|new
name|SubscriptionTicketGrantingResponse
argument_list|()
decl_stmt|;
name|grantSubscriptionManagerReference
argument_list|(
name|ticket
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|processDelivery
argument_list|(
name|delivery
argument_list|,
name|ticket
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|processEndTo
argument_list|(
name|endTo
argument_list|,
name|ticket
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|processExpiration
argument_list|(
name|expires
argument_list|,
name|ticket
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|processFilters
argument_list|(
name|filter
argument_list|,
name|ticket
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|processFormat
argument_list|(
name|format
argument_list|,
name|ticket
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|getDatabase
argument_list|()
operator|.
name|addTicket
argument_list|(
name|ticket
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SubscriptionTicket
argument_list|>
name|getTickets
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|database
operator|.
name|getTickets
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|SubscriptionDatabase
name|getDatabase
parameter_list|()
block|{
return|return
name|database
return|;
block|}
specifier|protected
name|void
name|processFormat
parameter_list|(
name|FormatType
name|format
parameter_list|,
name|SubscriptionTicket
name|ticket
parameter_list|,
name|SubscriptionTicketGrantingResponse
name|response
parameter_list|)
block|{
if|if
condition|(
name|format
operator|==
literal|null
condition|)
block|{
name|ticket
operator|.
name|setWrappedDelivery
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|format
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|EventingConstants
operator|.
name|DELIVERY_FORMAT_WRAPPED
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[subscription="
operator|+
name|ticket
operator|.
name|getUuid
argument_list|()
operator|+
literal|"] Wrapped delivery format was requested."
argument_list|)
expr_stmt|;
name|ticket
operator|.
name|setWrappedDelivery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|EventingConstants
operator|.
name|DELIVERY_FORMAT_UNWRAPPED
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[subscription="
operator|+
name|ticket
operator|.
name|getUuid
argument_list|()
operator|+
literal|"] Wrapped delivery format was NOT requested."
argument_list|)
expr_stmt|;
name|ticket
operator|.
name|setWrappedDelivery
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"[subscription="
operator|+
name|ticket
operator|.
name|getUuid
argument_list|()
operator|+
literal|"] Unknown delivery format: "
operator|+
name|format
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DeliveryFormatRequestedUnavailable
argument_list|()
throw|;
block|}
block|}
specifier|protected
name|void
name|processFilters
parameter_list|(
name|FilterType
name|request
parameter_list|,
name|SubscriptionTicket
name|ticket
parameter_list|,
name|SubscriptionTicketGrantingResponse
name|response
parameter_list|)
block|{
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
comment|// test if the requested filtering dialect is supported
if|if
condition|(
name|FilteringUtil
operator|.
name|isFilteringDialectSupported
argument_list|(
name|request
operator|.
name|getDialect
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|filter
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getContent
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found filter content: "
operator|+
name|filter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|FilteringUtil
operator|.
name|isValidFilter
argument_list|(
name|filter
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CannotProcessFilter
argument_list|()
throw|;
block|}
name|ticket
operator|.
name|setFilter
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|FilteringRequestedUnavailable
argument_list|()
throw|;
block|}
block|}
block|}
comment|/**      * process the stuff concerning expiration request (wse:Expires)      */
specifier|protected
name|void
name|processExpiration
parameter_list|(
name|ExpirationType
name|request
parameter_list|,
name|SubscriptionTicket
name|ticket
parameter_list|,
name|SubscriptionTicketGrantingResponse
name|response
parameter_list|)
block|{
name|XMLGregorianCalendar
name|granted
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|Object
name|expirationTypeValue
decl_stmt|;
try|try
block|{
name|expirationTypeValue
operator|=
name|DurationAndDateUtil
operator|.
name|parseDurationOrTimestamp
argument_list|(
name|request
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SoapFault
argument_list|(
literal|"Cannot parse expiration"
argument_list|,
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org/eventing"
argument_list|,
literal|"Error"
argument_list|)
argument_list|)
throw|;
block|}
name|Boolean
name|bestEffort
init|=
name|request
operator|.
name|isBestEffort
argument_list|()
decl_stmt|;
if|if
condition|(
name|bestEffort
operator|!=
literal|null
operator|&&
name|bestEffort
condition|)
block|{
if|if
condition|(
name|expirationTypeValue
operator|instanceof
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
condition|)
block|{
name|granted
operator|=
name|grantExpirationFor
argument_list|(
operator|(
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
operator|)
name|expirationTypeValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expirationTypeValue
operator|instanceof
name|XMLGregorianCalendar
condition|)
block|{
name|granted
operator|=
name|grantExpirationFor
argument_list|(
operator|(
name|XMLGregorianCalendar
operator|)
name|expirationTypeValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"expirationTypeValue of unexpected type: "
operator|+
name|expirationTypeValue
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// client did not specify BestEffort granting, so we must either follow their wish
comment|// or throw a UnsupportedExpirationValue fault
if|if
condition|(
name|expirationTypeValue
operator|instanceof
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
condition|)
block|{
try|try
block|{
if|if
condition|(
name|DurationAndDateUtil
operator|.
name|isPT0S
argument_list|(
operator|(
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
operator|)
name|expirationTypeValue
argument_list|)
condition|)
block|{
name|ticket
operator|.
name|setNonExpiring
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|granted
operator|=
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
operator|new
name|GregorianCalendar
argument_list|()
argument_list|)
expr_stmt|;
name|granted
operator|.
name|add
argument_list|(
operator|(
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
operator|)
name|expirationTypeValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|expirationTypeValue
operator|instanceof
name|XMLGregorianCalendar
condition|)
block|{
name|granted
operator|=
operator|(
name|XMLGregorianCalendar
operator|)
name|expirationTypeValue
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"expirationTypeValue of unexpected type: "
operator|+
name|expirationTypeValue
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|granted
operator|=
name|grantExpiration
argument_list|()
expr_stmt|;
block|}
name|ticket
operator|.
name|setExpires
argument_list|(
name|granted
argument_list|)
expr_stmt|;
name|response
operator|.
name|setExpires
argument_list|(
name|granted
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[subscription="
operator|+
name|ticket
operator|.
name|getUuid
argument_list|()
operator|+
literal|"] Granted Expiration date: "
operator|+
name|granted
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|processEndTo
parameter_list|(
name|EndpointReferenceType
name|request
parameter_list|,
name|SubscriptionTicket
name|ticket
parameter_list|,
name|SubscriptionTicketGrantingResponse
name|response
parameter_list|)
block|{
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|ticket
operator|.
name|setEndTo
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processDelivery
parameter_list|(
name|DeliveryType
name|request
parameter_list|,
name|SubscriptionTicket
name|ticket
parameter_list|,
name|SubscriptionTicketGrantingResponse
name|response
parameter_list|)
block|{
comment|// check if there is any usable EPR in the Delivery part
try|try
block|{
name|NotifyTo
name|notifyTo
init|=
operator|(
name|NotifyTo
operator|)
name|request
operator|.
name|getContent
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|EPRInspectionTool
operator|.
name|containsUsableEPR
argument_list|(
name|notifyTo
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoDeliveryMechanismEstablished
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
throw|throw
operator|new
name|NoDeliveryMechanismEstablished
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|ioobe
parameter_list|)
block|{
throw|throw
operator|new
name|NoDeliveryMechanismEstablished
argument_list|()
throw|;
block|}
name|ticket
operator|.
name|setDelivery
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|grantSubscriptionManagerReference
parameter_list|(
name|SubscriptionTicket
name|ticket
parameter_list|,
name|SubscriptionTicketGrantingResponse
name|response
parameter_list|)
block|{
name|EndpointReferenceType
name|subscriptionManagerReference
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|subscriptionManagerReference
operator|.
name|setAddress
argument_list|(
name|getSubscriptionManagerAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// generate a ID for this subscription
name|UUID
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|JAXBElement
name|idqn
init|=
operator|new
name|JAXBElement
argument_list|(
operator|new
name|QName
argument_list|(
name|subscriptionIdNamespace
argument_list|,
name|subscriptionIdElementName
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|uuid
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|subscriptionManagerReference
operator|.
name|setReferenceParameters
argument_list|(
operator|new
name|ReferenceParametersType
argument_list|()
argument_list|)
expr_stmt|;
name|subscriptionManagerReference
operator|.
name|getReferenceParameters
argument_list|()
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|idqn
argument_list|)
expr_stmt|;
name|ticket
operator|.
name|setUuid
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|response
operator|.
name|setSubscriptionManagerReference
argument_list|(
name|subscriptionManagerReference
argument_list|)
expr_stmt|;
name|response
operator|.
name|setUUID
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
comment|/**      * Decide what expiration time to grant to the subscription, if      * the client specified a calendar time in the request and did specify BestEffort=true.      */
specifier|public
name|XMLGregorianCalendar
name|grantExpirationFor
parameter_list|(
name|XMLGregorianCalendar
name|requested
parameter_list|)
block|{
return|return
name|requested
return|;
comment|// default
block|}
comment|/**      * Decide what expiration time to grant to the subscription, if      * the client specified a duration in the request and did specify BestEffort=true.      */
specifier|public
name|XMLGregorianCalendar
name|grantExpirationFor
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
name|requested
parameter_list|)
block|{
name|XMLGregorianCalendar
name|granted
decl_stmt|;
try|try
block|{
name|granted
operator|=
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
operator|new
name|GregorianCalendar
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|DurationAndDateUtil
operator|.
name|isPT0S
argument_list|(
name|requested
argument_list|)
condition|)
block|{
comment|// The client requested a non-expiring subscription.
comment|// We will give them 5 years.
name|granted
operator|.
name|add
argument_list|(
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDurationYearMonth
argument_list|(
literal|true
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|granted
operator|.
name|add
argument_list|(
name|requested
argument_list|)
expr_stmt|;
comment|// default
block|}
return|return
name|granted
return|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Decide what expiration time to grant to the subscription, if      * the client did not specify any particular wish for subscription length.      */
specifier|public
name|XMLGregorianCalendar
name|grantExpiration
parameter_list|()
block|{
try|try
block|{
comment|// by default, we grant an expiration time of 2 years
name|DatatypeFactory
name|factory
init|=
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|granted
init|=
name|factory
operator|.
name|newXMLGregorianCalendar
argument_list|(
operator|new
name|GregorianCalendar
argument_list|()
argument_list|)
decl_stmt|;
name|granted
operator|.
name|add
argument_list|(
name|factory
operator|.
name|newDurationYearMonth
argument_list|(
literal|true
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|granted
return|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AttributedURIType
name|getSubscriptionManagerAddress
parameter_list|()
block|{
name|AttributedURIType
name|ret
init|=
operator|new
name|AttributedURIType
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setValue
argument_list|(
name|url
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unsubscribeTicket
parameter_list|(
name|UUID
name|uuid
parameter_list|)
block|{
name|getDatabase
argument_list|()
operator|.
name|removeTicketByUUID
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SubscriptionTicket
name|findTicket
parameter_list|(
name|UUID
name|uuid
parameter_list|)
block|{
return|return
name|getDatabase
argument_list|()
operator|.
name|findById
argument_list|(
name|uuid
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExpirationType
name|renew
parameter_list|(
name|UUID
name|uuid
parameter_list|,
name|ExpirationType
name|requestedExpiration
parameter_list|)
block|{
name|SubscriptionTicket
name|ticket
init|=
name|getDatabase
argument_list|()
operator|.
name|findById
argument_list|(
name|uuid
argument_list|)
decl_stmt|;
if|if
condition|(
name|ticket
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownSubscription
argument_list|()
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"[subscription="
operator|+
name|ticket
operator|.
name|getUuid
argument_list|()
operator|+
literal|"] Requested renew expiration: "
operator|+
name|requestedExpiration
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"[subscription="
operator|+
name|ticket
operator|.
name|getUuid
argument_list|()
operator|+
literal|"] Current expiration: "
operator|+
name|ticket
operator|.
name|getExpires
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
name|ExpirationType
name|response
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|grantedExpires
decl_stmt|;
if|if
condition|(
name|DurationAndDateUtil
operator|.
name|isDuration
argument_list|(
name|requestedExpiration
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
comment|// duration was requested
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
name|requestedDuration
init|=
name|DurationAndDateUtil
operator|.
name|parseDuration
argument_list|(
name|requestedExpiration
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
name|grantedDuration
init|=
name|requestedDuration
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[subscription="
operator|+
name|ticket
operator|.
name|getUuid
argument_list|()
operator|+
literal|"] Granted renewal duration: "
operator|+
name|grantedDuration
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|grantedExpires
operator|=
name|getDatabase
argument_list|()
operator|.
name|findById
argument_list|(
name|uuid
argument_list|)
operator|.
name|getExpires
argument_list|()
expr_stmt|;
comment|// NOW() or current Expires() ????
name|grantedExpires
operator|.
name|add
argument_list|(
name|grantedDuration
argument_list|)
expr_stmt|;
name|response
operator|.
name|setValue
argument_list|(
name|grantedDuration
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// end-date was requested
name|grantedExpires
operator|=
name|DurationAndDateUtil
operator|.
name|parseXMLGregorianCalendar
argument_list|(
name|requestedExpiration
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"[subscription="
operator|+
name|ticket
operator|.
name|getUuid
argument_list|()
operator|+
literal|"] Granted expiration: "
operator|+
name|grantedExpires
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setValue
argument_list|(
name|grantedExpires
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getDatabase
argument_list|()
operator|.
name|findById
argument_list|(
name|uuid
argument_list|)
operator|.
name|setExpires
argument_list|(
name|grantedExpires
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|subscriptionEnd
parameter_list|(
name|UUID
name|subscriptionId
parameter_list|,
name|String
name|reason
parameter_list|,
name|SubscriptionEndStatus
name|status
parameter_list|)
block|{
synchronized|synchronized
init|(
name|database
init|)
block|{
name|SubscriptionTicket
name|ticket
init|=
name|database
operator|.
name|findById
argument_list|(
name|subscriptionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ticket
operator|!=
literal|null
condition|)
block|{
name|database
operator|.
name|removeTicketByUUID
argument_list|(
name|subscriptionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|ticket
operator|.
name|getEndToURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|notificator
operator|.
name|subscriptionEnd
argument_list|(
name|ticket
argument_list|,
name|reason
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"No such subscription: "
operator|+
name|subscriptionId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerNotificator
parameter_list|(
name|NotificatorService
name|service
parameter_list|)
block|{
name|this
operator|.
name|notificator
operator|=
name|service
expr_stmt|;
block|}
block|}
end_class

end_unit

