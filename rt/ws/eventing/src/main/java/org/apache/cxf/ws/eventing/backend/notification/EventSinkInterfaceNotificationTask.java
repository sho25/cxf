begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|notification
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ext
operator|.
name|logging
operator|.
name|LoggingOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|backend
operator|.
name|database
operator|.
name|SubscriptionTicket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|handlers
operator|.
name|ReferenceParametersAddingHandler
import|;
end_import

begin_comment
comment|/**  * Represents the task to send a notification about a particular event to a particular subscribed client.  * Dispatch is performed according to a provided endpoint interface.  */
end_comment

begin_class
class|class
name|EventSinkInterfaceNotificationTask
implements|implements
name|Runnable
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|EventSinkInterfaceNotificationTask
operator|.
name|class
argument_list|)
decl_stmt|;
name|SubscriptionTicket
name|target
decl_stmt|;
name|Object
name|event
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|endpointInterface
decl_stmt|;
name|EventSinkInterfaceNotificationTask
parameter_list|(
name|SubscriptionTicket
name|ticket
parameter_list|,
name|Object
name|event
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|endpointInterface
parameter_list|)
block|{
name|this
operator|.
name|target
operator|=
name|ticket
expr_stmt|;
name|this
operator|.
name|event
operator|=
name|event
expr_stmt|;
name|this
operator|.
name|endpointInterface
operator|=
name|endpointInterface
expr_stmt|;
block|}
comment|/**      * Logic needed to actually send the notification to the subscribed client.      */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting notification task for subscription UUID "
operator|+
name|target
operator|.
name|getUuid
argument_list|()
argument_list|)
expr_stmt|;
name|Method
name|method
init|=
literal|null
decl_stmt|;
specifier|final
name|Object
name|proxy
decl_stmt|;
specifier|final
name|Object
name|param
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|eventClass
init|=
name|event
operator|.
name|getClass
argument_list|()
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|eventClassArray
init|=
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|eventClass
block|}
empty_stmt|;
if|if
condition|(
name|target
operator|.
name|isWrappedDelivery
argument_list|()
condition|)
block|{
name|proxy
operator|=
name|getProxy
argument_list|(
name|WrappedSink
operator|.
name|class
argument_list|,
name|eventClassArray
argument_list|)
expr_stmt|;
name|param
operator|=
operator|new
name|EventType
argument_list|()
expr_stmt|;
operator|(
operator|(
name|EventType
operator|)
name|param
operator|)
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|eventClass
operator|.
name|isAnnotationPresent
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
condition|?
name|event
else|:
name|convertToJAXBElement
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|=
name|WrappedSink
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"notifyEvent"
argument_list|,
name|EventType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proxy
operator|=
name|getProxy
argument_list|(
name|endpointInterface
argument_list|)
expr_stmt|;
comment|// find the method to use
name|Method
index|[]
name|methods
init|=
name|endpointInterface
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
operator|&&
name|method
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|methods
index|[
name|i
index|]
operator|.
name|getParameterTypes
argument_list|()
argument_list|,
name|eventClassArray
argument_list|)
condition|)
block|{
name|method
operator|=
name|methods
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Couldn't find corresponding method for event of type "
operator|+
name|eventClass
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|" in event sink interface"
operator|+
name|endpointInterface
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|param
operator|=
name|event
expr_stmt|;
block|}
name|method
operator|.
name|invoke
argument_list|(
name|proxy
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|protected
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|convertToJAXBElement
parameter_list|(
name|Object
name|evt
parameter_list|)
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|eventClass
init|=
name|evt
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|String
name|tns
init|=
name|endpointInterface
operator|.
name|getAnnotation
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
operator|.
name|targetNamespace
argument_list|()
decl_stmt|;
return|return
operator|new
name|JAXBElement
argument_list|(
operator|new
name|QName
argument_list|(
name|tns
argument_list|,
name|eventClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|eventClass
argument_list|,
name|evt
argument_list|)
return|;
block|}
specifier|protected
name|Object
name|getProxy
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|sinkInterface
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|extraClasses
parameter_list|)
block|{
comment|//needed SOAP handlers
name|ReferenceParametersAddingHandler
name|handler
init|=
operator|new
name|ReferenceParametersAddingHandler
argument_list|(
name|target
operator|.
name|getNotificationReferenceParams
argument_list|()
argument_list|)
decl_stmt|;
name|JaxWsProxyFactoryBean
name|service
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
name|service
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|setServiceClass
argument_list|(
name|sinkInterface
argument_list|)
expr_stmt|;
name|service
operator|.
name|setAddress
argument_list|(
name|target
operator|.
name|getTargetURL
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|getHandlers
argument_list|()
operator|.
name|add
argument_list|(
name|handler
argument_list|)
expr_stmt|;
comment|// do we need to apply a filter?
if|if
condition|(
name|target
operator|.
name|getFilter
argument_list|()
operator|!=
literal|null
operator|&&
name|target
operator|.
name|getFilter
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|service
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FilteringInterceptor
argument_list|(
name|target
operator|.
name|getFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extraClasses
operator|!=
literal|null
operator|&&
name|extraClasses
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"jaxb.additionalContextClasses"
argument_list|,
name|extraClasses
argument_list|)
expr_stmt|;
name|service
operator|.
name|getClientFactoryBean
argument_list|()
operator|.
name|getServiceFactory
argument_list|()
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
return|return
name|service
operator|.
name|create
argument_list|()
return|;
block|}
block|}
end_class

end_unit

