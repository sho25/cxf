begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|shared
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|eventing
operator|.
name|ExpirationType
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|DurationAndDateUtil
block|{
specifier|private
specifier|static
name|DatatypeFactory
name|factory
decl_stmt|;
static|static
block|{
try|try
block|{
name|factory
operator|=
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot instantiate a DatatypeFactory required for unmarshalling "
operator|+
literal|"to XMLGregorianCalendar and Duration"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|DurationAndDateUtil
parameter_list|()
block|{      }
specifier|public
specifier|static
name|Duration
name|parseDuration
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|factory
operator|.
name|newDuration
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|XMLGregorianCalendar
name|parseXMLGregorianCalendar
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|factory
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|input
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isXMLGregorianCalendar
parameter_list|(
name|String
name|input
parameter_list|)
block|{
try|try
block|{
name|factory
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|input
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isDuration
parameter_list|(
name|String
name|input
parameter_list|)
block|{
try|try
block|{
name|factory
operator|.
name|newDuration
argument_list|(
name|input
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|Object
name|parseDurationOrTimestamp
parameter_list|(
name|String
name|input
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|Object
name|ret
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|factory
operator|.
name|newDuration
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ret
operator|=
name|factory
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|String
name|convertToXMLString
parameter_list|(
name|Object
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|instanceof
name|XMLGregorianCalendar
condition|)
block|{
return|return
operator|(
operator|(
name|XMLGregorianCalendar
operator|)
name|input
operator|)
operator|.
name|toXMLFormat
argument_list|()
return|;
block|}
if|if
condition|(
name|input
operator|instanceof
name|Duration
condition|)
block|{
return|return
operator|(
operator|(
name|Duration
operator|)
name|input
operator|)
operator|.
name|toString
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"convertToXMLString requires either an instance of XMLGregorianCalendar or Duration"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|ExpirationType
name|toExpirationTypeContainingGregorianCalendar
parameter_list|(
name|XMLGregorianCalendar
name|date
parameter_list|)
block|{
name|ExpirationType
name|et
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|et
operator|.
name|setValue
argument_list|(
name|date
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|et
return|;
block|}
specifier|public
specifier|static
name|ExpirationType
name|toExpirationTypeContainingDuration
parameter_list|(
name|XMLGregorianCalendar
name|date
parameter_list|)
block|{
name|ExpirationType
name|et
init|=
operator|new
name|ExpirationType
argument_list|()
decl_stmt|;
name|XMLGregorianCalendar
name|now
init|=
name|factory
operator|.
name|newXMLGregorianCalendar
argument_list|(
operator|new
name|GregorianCalendar
argument_list|()
argument_list|)
decl_stmt|;
name|XMLGregorianCalendar
name|then
init|=
name|factory
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|date
operator|.
name|toGregorianCalendar
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|durationMillis
init|=
name|then
operator|.
name|toGregorianCalendar
argument_list|()
operator|.
name|getTimeInMillis
argument_list|()
operator|-
name|now
operator|.
name|toGregorianCalendar
argument_list|()
operator|.
name|getTimeInMillis
argument_list|()
decl_stmt|;
name|Duration
name|duration
init|=
name|factory
operator|.
name|newDuration
argument_list|(
name|durationMillis
argument_list|)
decl_stmt|;
name|et
operator|.
name|setValue
argument_list|(
name|duration
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|et
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isPT0S
parameter_list|(
name|Duration
name|duration
parameter_list|)
block|{
return|return
name|duration
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"PT0S"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

