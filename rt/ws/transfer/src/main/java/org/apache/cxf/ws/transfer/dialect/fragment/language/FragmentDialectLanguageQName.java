begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|dialect
operator|.
name|fragment
operator|.
name|language
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|dialect
operator|.
name|fragment
operator|.
name|ExpressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|dialect
operator|.
name|fragment
operator|.
name|faults
operator|.
name|InvalidExpression
import|;
end_import

begin_comment
comment|/**  * Implementation of the QName language.  */
end_comment

begin_class
specifier|public
class|class
name|FragmentDialectLanguageQName
implements|implements
name|FragmentDialectLanguage
block|{
specifier|private
specifier|static
name|Pattern
name|qNamePattern
decl_stmt|;
specifier|public
name|FragmentDialectLanguageQName
parameter_list|()
block|{
if|if
condition|(
name|qNamePattern
operator|==
literal|null
condition|)
block|{
name|String
name|qName
init|=
name|getQNamePatternString
argument_list|()
decl_stmt|;
name|qNamePattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^"
operator|+
name|qName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns regex string, which describes QName format.      * @return      */
specifier|public
specifier|static
name|String
name|getQNamePatternString
parameter_list|()
block|{
comment|// See http://www.w3.org/TR/REC-xml-names/#NT-PrefixedName
comment|// NCNameStartChar
comment|// see http://www.w3.org/TR/REC-xml-names/#NT-NCName
comment|// and http://www.w3.org/TR/REC-xml/#NT-NameStartChar
name|String
name|ncNameStartChar
init|=
literal|"[A-Z]|_|[a-z]|[\\x{c0}-\\x{d6}]|[\\x{d8}-\\x{f6}]|[\\x{f8}-\\x{2ff}]|"
operator|+
literal|"[\\x{370}-\\x{37d}]|[\\x{37f}-\\x{1fff}]|[\\x{200c}-\\x{200d}]|"
operator|+
literal|"[\\x{2070}-\\x{218f}]|[\\x{2c00}-\\x{2fef}]|[\\x{3001}-\\x{d7ff}]|"
operator|+
literal|"[\\x{f900}-\\x{fdcf}]|[\\x{fdf0}-\\x{fffd}]|[\\x{10000}-\\x{effff}]"
decl_stmt|;
comment|// NCNameChar
comment|// see http://www.w3.org/TR/REC-xml/#NT-NameChar
name|String
name|ncNameChar
init|=
name|ncNameStartChar
operator|+
literal|"|-|\\.|[0-9]|\\x{b7}|[\\x{0300}-\\x{036f}]|[\\x{203f}-\\x{2040}]"
decl_stmt|;
comment|// NCName
comment|// see http://www.w3.org/TR/REC-xml/#NT-Name
name|String
name|ncName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(%s)(%s)*"
argument_list|,
name|ncNameStartChar
argument_list|,
name|ncNameChar
argument_list|)
decl_stmt|;
comment|// QName
comment|// see http://www.w3.org/TR/REC-xml-names/#NT-QName
return|return
name|String
operator|.
name|format
argument_list|(
literal|"((%s):)?(%s)"
argument_list|,
name|ncName
argument_list|,
name|ncName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getResourceFragment
parameter_list|(
specifier|final
name|Representation
name|representation
parameter_list|,
name|ExpressionType
name|expression
parameter_list|)
block|{
name|String
name|expressionStr
init|=
name|getXPathFromQNameExpression
argument_list|(
name|expression
argument_list|)
decl_stmt|;
comment|// Evaluate XPath
name|XPathUtils
name|xu
init|=
operator|new
name|XPathUtils
argument_list|(
operator|new
name|NamespaceContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|resource
init|=
operator|(
name|Element
operator|)
name|representation
operator|.
name|getAny
argument_list|()
decl_stmt|;
return|return
name|resource
operator|.
name|getAttribute
argument_list|(
literal|"xmlns:"
operator|+
name|prefix
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|s
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPrefixes
parameter_list|(
name|String
name|s
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Node
name|resource
init|=
operator|(
name|Node
operator|)
name|representation
operator|.
name|getAny
argument_list|()
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
comment|// Returns empty NodeList
return|return
operator|new
name|NodeList
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Node
name|item
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
return|;
block|}
return|return
name|xu
operator|.
name|getValueList
argument_list|(
name|expressionStr
argument_list|,
name|resource
argument_list|)
return|;
block|}
comment|/**      * Converts expression in QName language to XPath expression.      * @param expression Expression in QName language.      * @return Expression in XPath language.      */
specifier|private
name|String
name|getXPathFromQNameExpression
parameter_list|(
name|ExpressionType
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|.
name|getContent
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|String
name|expressionValue
init|=
operator|(
name|String
operator|)
name|expression
operator|.
name|getContent
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|qNamePattern
operator|.
name|matcher
argument_list|(
name|expressionValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|"/node()/"
operator|+
name|expressionValue
return|;
block|}
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

