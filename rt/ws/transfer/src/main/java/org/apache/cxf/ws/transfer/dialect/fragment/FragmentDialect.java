begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|dialect
operator|.
name|fragment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
operator|.
name|WrappedMessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|Create
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|dialect
operator|.
name|Dialect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|dialect
operator|.
name|fragment
operator|.
name|faults
operator|.
name|InvalidExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|dialect
operator|.
name|fragment
operator|.
name|faults
operator|.
name|UnsupportedLanguage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|dialect
operator|.
name|fragment
operator|.
name|faults
operator|.
name|UnsupportedMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|dialect
operator|.
name|fragment
operator|.
name|language
operator|.
name|FragmentDialectLanguage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|dialect
operator|.
name|fragment
operator|.
name|language
operator|.
name|FragmentDialectLanguageQName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|dialect
operator|.
name|fragment
operator|.
name|language
operator|.
name|FragmentDialectLanguageXPath10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|shared
operator|.
name|faults
operator|.
name|InvalidRepresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|shared
operator|.
name|faults
operator|.
name|UnknownDialect
import|;
end_import

begin_comment
comment|/**  * Implementation of the WS-Fragment dialect.  */
end_comment

begin_class
specifier|public
class|class
name|FragmentDialect
implements|implements
name|Dialect
block|{
annotation|@
name|Resource
name|WebServiceContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FragmentDialectLanguage
argument_list|>
name|languages
decl_stmt|;
specifier|private
name|Pattern
name|badXPathPattern
decl_stmt|;
specifier|private
name|Pattern
name|goodXPathPattern
decl_stmt|;
specifier|public
name|FragmentDialect
parameter_list|()
block|{
name|languages
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|languages
operator|.
name|put
argument_list|(
name|FragmentDialectConstants
operator|.
name|QNAME_LANGUAGE_IRI
argument_list|,
operator|new
name|FragmentDialectLanguageQName
argument_list|()
argument_list|)
expr_stmt|;
name|languages
operator|.
name|put
argument_list|(
name|FragmentDialectConstants
operator|.
name|XPATH10_LANGUAGE_IRI
argument_list|,
operator|new
name|FragmentDialectLanguageXPath10
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|badXPathPattern
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"//@?"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|FragmentDialectLanguageQName
operator|.
name|getQNamePatternString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'$'
argument_list|)
expr_stmt|;
name|badXPathPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|goodXPathPattern
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"/@?"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|FragmentDialectLanguageQName
operator|.
name|getQNamePatternString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'$'
argument_list|)
expr_stmt|;
name|goodXPathPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|JAXBElement
argument_list|<
name|ValueType
argument_list|>
name|processGet
parameter_list|(
name|Get
name|body
parameter_list|,
name|Representation
name|representation
parameter_list|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|body
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|&&
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|o
operator|)
operator|.
name|getDeclaredType
argument_list|()
operator|==
name|ExpressionType
operator|.
name|class
condition|)
block|{
name|ExpressionType
name|expression
init|=
call|(
name|ExpressionType
call|)
argument_list|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|languageIRI
init|=
name|expression
operator|.
name|getLanguage
argument_list|()
decl_stmt|;
name|languageIRI
operator|=
name|languageIRI
operator|==
literal|null
condition|?
name|FragmentDialectConstants
operator|.
name|XPATH10_LANGUAGE_IRI
else|:
name|languageIRI
expr_stmt|;
if|if
condition|(
name|languages
operator|.
name|containsKey
argument_list|(
name|languageIRI
argument_list|)
condition|)
block|{
name|FragmentDialectLanguage
name|language
init|=
name|languages
operator|.
name|get
argument_list|(
name|languageIRI
argument_list|)
decl_stmt|;
return|return
name|generateGetResponse
argument_list|(
name|language
operator|.
name|getResourceFragment
argument_list|(
name|representation
argument_list|,
name|expression
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|UnsupportedLanguage
argument_list|()
throw|;
block|}
block|}
throw|throw
operator|new
name|SoapFault
argument_list|(
literal|"wsf:Expression is not present."
argument_list|,
name|getSoapVersion
argument_list|()
operator|.
name|getSender
argument_list|()
argument_list|)
throw|;
block|}
end_class

begin_function
annotation|@
name|Override
specifier|public
name|Representation
name|processPut
parameter_list|(
name|Put
name|body
parameter_list|,
name|Representation
name|representation
parameter_list|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|body
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Fragment
condition|)
block|{
name|Fragment
name|fragment
init|=
operator|(
name|Fragment
operator|)
name|o
decl_stmt|;
name|ExpressionType
name|expression
init|=
name|fragment
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|ValueType
name|value
init|=
name|fragment
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SoapFault
argument_list|(
literal|"wsf:Expression is not present."
argument_list|,
name|getSoapVersion
argument_list|()
operator|.
name|getSender
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
operator|new
name|ValueType
argument_list|()
expr_stmt|;
block|}
name|String
name|languageIRI
init|=
name|expression
operator|.
name|getLanguage
argument_list|()
decl_stmt|;
name|languageIRI
operator|=
name|languageIRI
operator|==
literal|null
condition|?
name|FragmentDialectConstants
operator|.
name|XPATH10_LANGUAGE_IRI
else|:
name|languageIRI
expr_stmt|;
if|if
condition|(
name|languages
operator|.
name|containsKey
argument_list|(
name|languageIRI
argument_list|)
condition|)
block|{
name|FragmentDialectLanguage
name|language
init|=
name|languages
operator|.
name|get
argument_list|(
name|languageIRI
argument_list|)
decl_stmt|;
name|Object
name|resourceFragment
init|=
name|language
operator|.
name|getResourceFragment
argument_list|(
name|representation
argument_list|,
name|expression
argument_list|)
decl_stmt|;
name|String
name|mode
init|=
name|expression
operator|.
name|getMode
argument_list|()
decl_stmt|;
name|mode
operator|=
name|mode
operator|==
literal|null
condition|?
name|FragmentDialectConstants
operator|.
name|FRAGMENT_MODE_REPLACE
else|:
name|mode
expr_stmt|;
if|if
condition|(
name|resourceFragment
operator|==
literal|null
operator|&&
name|FragmentDialectConstants
operator|.
name|FRAGMENT_MODE_REPLACE
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
operator|&&
name|FragmentDialectConstants
operator|.
name|XPATH10_LANGUAGE_IRI
operator|.
name|equals
argument_list|(
name|languageIRI
argument_list|)
condition|)
block|{
name|resourceFragment
operator|=
name|language
operator|.
name|getResourceFragment
argument_list|(
name|representation
argument_list|,
name|getParentXPath
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
name|mode
operator|=
name|FragmentDialectConstants
operator|.
name|FRAGMENT_MODE_ADD
expr_stmt|;
block|}
return|return
name|modifyRepresentation
argument_list|(
name|resourceFragment
argument_list|,
name|mode
argument_list|,
name|value
argument_list|)
return|;
block|}
throw|throw
operator|new
name|UnsupportedLanguage
argument_list|()
throw|;
block|}
block|}
throw|throw
operator|new
name|SoapFault
argument_list|(
literal|"wsf:Fragment is not present."
argument_list|,
name|getSoapVersion
argument_list|()
operator|.
name|getSender
argument_list|()
argument_list|)
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|processDelete
parameter_list|(
name|Delete
name|body
parameter_list|,
name|Representation
name|representation
parameter_list|)
block|{
throw|throw
operator|new
name|UnknownDialect
argument_list|()
throw|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Representation
name|processCreate
parameter_list|(
name|Create
name|body
parameter_list|)
block|{
throw|throw
operator|new
name|UnknownDialect
argument_list|()
throw|;
block|}
end_function

begin_comment
comment|/**      * Register FragmentDialectLanguage object for IRI.      * @param iri      * @param language      */
end_comment

begin_function
specifier|public
name|void
name|registerLanguage
parameter_list|(
name|String
name|iri
parameter_list|,
name|FragmentDialectLanguage
name|language
parameter_list|)
block|{
if|if
condition|(
name|languages
operator|.
name|containsKey
argument_list|(
name|iri
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"IRI \"%s\" is already registered"
argument_list|,
name|iri
argument_list|)
argument_list|)
throw|;
block|}
name|languages
operator|.
name|put
argument_list|(
name|iri
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Unregister FragmentDialectLanguage object for IRI.      * @param iri      */
end_comment

begin_function
specifier|public
name|void
name|unregisterLanguage
parameter_list|(
name|String
name|iri
parameter_list|)
block|{
if|if
condition|(
operator|!
name|languages
operator|.
name|containsKey
argument_list|(
name|iri
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"IRI \"%s\" is not registered"
argument_list|,
name|iri
argument_list|)
argument_list|)
throw|;
block|}
name|languages
operator|.
name|remove
argument_list|(
name|iri
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Generates Value element, which is returned as response to Get request.      * @param value Result of the XPath evaluation.      * @return      */
end_comment

begin_function
specifier|private
name|JAXBElement
argument_list|<
name|ValueType
argument_list|>
name|generateGetResponse
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Node
condition|)
block|{
return|return
name|generateGetResponseNode
argument_list|(
operator|(
name|Node
operator|)
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|NodeList
condition|)
block|{
return|return
name|generateGetResponseNodeList
argument_list|(
operator|(
name|NodeList
operator|)
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
name|generateGetResponseString
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
return|;
block|}
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
return|return
name|objectFactory
operator|.
name|createValue
argument_list|(
operator|new
name|ValueType
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Generates Value element from NodeList.      * @param nodeList      * @return      */
end_comment

begin_function
specifier|private
name|JAXBElement
argument_list|<
name|ValueType
argument_list|>
name|generateGetResponseNodeList
parameter_list|(
name|NodeList
name|nodeList
parameter_list|)
block|{
name|ValueType
name|resultValue
init|=
operator|new
name|ValueType
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeList
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|resultValue
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|nodeList
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
return|return
name|objectFactory
operator|.
name|createValue
argument_list|(
name|resultValue
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Generates Value element from Node.      * @param node      * @return      */
end_comment

begin_function
specifier|private
name|JAXBElement
argument_list|<
name|ValueType
argument_list|>
name|generateGetResponseNode
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|getEmptyDocument
argument_list|()
decl_stmt|;
name|ValueType
name|resultValue
init|=
operator|new
name|ValueType
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
name|Element
name|attrNodeEl
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|FragmentDialectConstants
operator|.
name|FRAGMENT_2011_03_IRI
argument_list|,
name|FragmentDialectConstants
operator|.
name|FRAGMENT_ATTR_NODE_NAME
argument_list|)
decl_stmt|;
name|attrNodeEl
operator|.
name|setAttribute
argument_list|(
name|FragmentDialectConstants
operator|.
name|FRAGMENT_ATTR_NODE_NAME_ATTR
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|attrNodeEl
operator|.
name|setTextContent
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
name|resultValue
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|attrNodeEl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
condition|)
block|{
name|Element
name|textNodeEl
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|FragmentDialectConstants
operator|.
name|FRAGMENT_2011_03_IRI
argument_list|,
name|FragmentDialectConstants
operator|.
name|FRAGMENT_TEXT_NODE_NAME
argument_list|)
decl_stmt|;
name|textNodeEl
operator|.
name|setNodeValue
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
name|resultValue
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|textNodeEl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|resultValue
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
return|return
name|objectFactory
operator|.
name|createValue
argument_list|(
name|resultValue
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Generates Value element from String.      * @param value      * @return      */
end_comment

begin_function
specifier|private
name|JAXBElement
argument_list|<
name|ValueType
argument_list|>
name|generateGetResponseString
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|ValueType
name|resultValue
init|=
operator|new
name|ValueType
argument_list|()
decl_stmt|;
name|resultValue
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
return|return
name|objectFactory
operator|.
name|createValue
argument_list|(
name|resultValue
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Returns expression containing XPath, which refers to parent element.      * @param expression      * @return      */
end_comment

begin_function
specifier|private
name|ExpressionType
name|getParentXPath
parameter_list|(
name|ExpressionType
name|expression
parameter_list|)
block|{
name|String
name|expr
decl_stmt|;
if|if
condition|(
name|expression
operator|.
name|getContent
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|expr
operator|=
operator|(
name|String
operator|)
name|expression
operator|.
name|getContent
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
if|if
condition|(
name|badXPathPattern
operator|.
name|matcher
argument_list|(
name|expr
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
if|if
condition|(
name|goodXPathPattern
operator|.
name|matcher
argument_list|(
name|expr
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
name|expression
operator|.
name|getContent
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expr
operator|=
name|expr
operator|.
name|replaceFirst
argument_list|(
name|goodXPathPattern
operator|.
name|pattern
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|expr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|expr
operator|=
literal|"/"
expr_stmt|;
block|}
name|expression
operator|.
name|getContent
argument_list|()
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
return|return
name|expression
return|;
block|}
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
end_function

begin_comment
comment|/**      * Process Put requests.      * @param resourceFragment Result of the XPath evaluation. It can be Node or NodeList.      * @param mode Mode defined in the Mode attribute.      * @param value Value defined in the Value element.      * @return Representation element, which is returned as response.      */
end_comment

begin_function
specifier|private
name|Representation
name|modifyRepresentation
parameter_list|(
name|Object
name|resourceFragment
parameter_list|,
name|String
name|mode
parameter_list|,
name|ValueType
name|value
parameter_list|)
block|{
if|if
condition|(
name|resourceFragment
operator|instanceof
name|Node
condition|)
block|{
name|List
argument_list|<
name|Node
argument_list|>
name|nodeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeList
operator|.
name|add
argument_list|(
operator|(
name|Node
operator|)
name|resourceFragment
argument_list|)
expr_stmt|;
return|return
name|modifyRepresentationMode
argument_list|(
name|nodeList
argument_list|,
name|mode
argument_list|,
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|resourceFragment
operator|instanceof
name|NodeList
condition|)
block|{
name|NodeList
name|rfNodeList
init|=
operator|(
name|NodeList
operator|)
name|resourceFragment
decl_stmt|;
name|List
argument_list|<
name|Node
argument_list|>
name|nodeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rfNodeList
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|nodeList
operator|.
name|add
argument_list|(
name|rfNodeList
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|modifyRepresentationMode
argument_list|(
name|nodeList
argument_list|,
name|mode
argument_list|,
name|value
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
block|}
end_function

begin_comment
comment|/**      * Process Put requests.      * @param mode Mode defined in the Mode attribute.      * @param value Value defined in the Value element.      * @return Representation element, which is returned as response.      */
end_comment

begin_function
specifier|private
name|Representation
name|modifyRepresentationMode
parameter_list|(
name|List
argument_list|<
name|Node
argument_list|>
name|nodeList
parameter_list|,
name|String
name|mode
parameter_list|,
name|ValueType
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|FragmentDialectConstants
operator|.
name|FRAGMENT_MODE_REPLACE
case|:
return|return
name|modifyRepresentationModeReplace
argument_list|(
name|nodeList
argument_list|,
name|value
argument_list|)
return|;
case|case
name|FragmentDialectConstants
operator|.
name|FRAGMENT_MODE_ADD
case|:
return|return
name|modifyRepresentationModeAdd
argument_list|(
name|nodeList
argument_list|,
name|value
argument_list|)
return|;
case|case
name|FragmentDialectConstants
operator|.
name|FRAGMENT_MODE_INSERT_BEFORE
case|:
return|return
name|modifyRepresentationModeInsertBefore
argument_list|(
name|nodeList
argument_list|,
name|value
argument_list|)
return|;
case|case
name|FragmentDialectConstants
operator|.
name|FRAGMENT_MODE_INSERT_AFTER
case|:
return|return
name|modifyRepresentationModeInsertAfter
argument_list|(
name|nodeList
argument_list|,
name|value
argument_list|)
return|;
case|case
name|FragmentDialectConstants
operator|.
name|FRAGMENT_MODE_REMOVE
case|:
return|return
name|modifyRepresentationModeRemove
argument_list|(
name|nodeList
argument_list|,
name|value
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|UnsupportedMode
argument_list|()
throw|;
block|}
block|}
end_function

begin_comment
comment|/**      * Process Put requests for Replace mode.      * @param value Value defined in the Value element.      * @return Representation element, which is returned as response.      */
end_comment

begin_function
specifier|private
name|Representation
name|modifyRepresentationModeReplace
parameter_list|(
name|List
argument_list|<
name|Node
argument_list|>
name|nodeList
parameter_list|,
name|ValueType
name|value
parameter_list|)
block|{
if|if
condition|(
name|nodeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
name|Node
name|firstNode
init|=
name|nodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Document
name|ownerDocument
init|=
name|firstNode
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
comment|// if firstNode.getOwnerDocument == null the firstNode is ownerDocument
name|ownerDocument
operator|=
name|ownerDocument
operator|==
literal|null
condition|?
operator|(
name|Document
operator|)
name|firstNode
else|:
name|ownerDocument
expr_stmt|;
name|Node
name|nextSibling
init|=
literal|null
decl_stmt|;
name|Node
name|parent
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|nodeList
control|)
block|{
name|nextSibling
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|parent
operator|=
name|removeNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|addNode
argument_list|(
name|ownerDocument
argument_list|,
name|parent
argument_list|,
name|nextSibling
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Representation
name|representation
init|=
operator|new
name|Representation
argument_list|()
decl_stmt|;
name|representation
operator|.
name|setAny
argument_list|(
name|ownerDocument
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|representation
return|;
block|}
end_function

begin_comment
comment|/**      * Process Put requests for Add mode.      * @param value Value defined in the Value element.      * @return Representation element, which is returned as response.      */
end_comment

begin_function
specifier|private
name|Representation
name|modifyRepresentationModeAdd
parameter_list|(
name|List
argument_list|<
name|Node
argument_list|>
name|nodeList
parameter_list|,
name|ValueType
name|value
parameter_list|)
block|{
if|if
condition|(
name|nodeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
name|Node
name|firstNode
init|=
name|nodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Document
name|ownerDocument
init|=
name|firstNode
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
comment|// if firstNode.getOwnerDocument == null the firstNode is ownerDocument
name|ownerDocument
operator|=
name|ownerDocument
operator|==
literal|null
condition|?
operator|(
name|Document
operator|)
name|firstNode
else|:
name|ownerDocument
expr_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|nodeList
control|)
block|{
name|addNode
argument_list|(
name|ownerDocument
argument_list|,
name|node
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|Representation
name|representation
init|=
operator|new
name|Representation
argument_list|()
decl_stmt|;
name|representation
operator|.
name|setAny
argument_list|(
name|ownerDocument
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|representation
return|;
block|}
end_function

begin_comment
comment|/**      * Process Put requests for InsertBefore mode.      * @param value Value defined in the Value element.      * @return Representation element, which is returned as response.      */
end_comment

begin_function
specifier|private
name|Representation
name|modifyRepresentationModeInsertBefore
parameter_list|(
name|List
argument_list|<
name|Node
argument_list|>
name|nodeList
parameter_list|,
name|ValueType
name|value
parameter_list|)
block|{
if|if
condition|(
name|nodeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
name|Node
name|firstNode
init|=
name|nodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Document
name|ownerDocument
init|=
name|firstNode
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
comment|// if firstNode.getOwnerDocument == null the firstNode is ownerDocument
name|ownerDocument
operator|=
name|ownerDocument
operator|==
literal|null
condition|?
operator|(
name|Document
operator|)
name|firstNode
else|:
name|ownerDocument
expr_stmt|;
name|Node
name|parent
init|=
name|firstNode
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
operator|&&
name|firstNode
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|parent
operator|=
name|firstNode
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|Document
operator|)
name|parent
operator|)
operator|.
name|getDocumentElement
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
block|}
for|for
control|(
name|Node
name|node
range|:
name|nodeList
control|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
throw|throw
operator|new
name|InvalidRepresentation
argument_list|()
throw|;
block|}
name|insertBefore
argument_list|(
name|ownerDocument
argument_list|,
name|parent
argument_list|,
name|node
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|Representation
name|representation
init|=
operator|new
name|Representation
argument_list|()
decl_stmt|;
name|representation
operator|.
name|setAny
argument_list|(
name|ownerDocument
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|representation
return|;
block|}
end_function

begin_comment
comment|/**      * Process Put requests for InsertAfter mode.      * @param value Value defined in the Value element.      * @return Representation element, which is returned as response.      */
end_comment

begin_function
specifier|private
name|Representation
name|modifyRepresentationModeInsertAfter
parameter_list|(
name|List
argument_list|<
name|Node
argument_list|>
name|nodeList
parameter_list|,
name|ValueType
name|value
parameter_list|)
block|{
if|if
condition|(
name|nodeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
name|Node
name|firstNode
init|=
name|nodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Document
name|ownerDocument
init|=
name|firstNode
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
comment|// if firstNode.getOwnerDocument == null the firstNode is ownerDocument
name|ownerDocument
operator|=
name|ownerDocument
operator|==
literal|null
condition|?
operator|(
name|Document
operator|)
name|firstNode
else|:
name|ownerDocument
expr_stmt|;
name|Node
name|parent
init|=
name|firstNode
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
operator|&&
name|firstNode
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|parent
operator|=
name|firstNode
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|Document
operator|)
name|parent
operator|)
operator|.
name|getDocumentElement
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
block|}
for|for
control|(
name|Node
name|node
range|:
name|nodeList
control|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
throw|throw
operator|new
name|InvalidRepresentation
argument_list|()
throw|;
block|}
name|insertAfter
argument_list|(
name|ownerDocument
argument_list|,
name|parent
argument_list|,
name|node
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|Representation
name|representation
init|=
operator|new
name|Representation
argument_list|()
decl_stmt|;
name|representation
operator|.
name|setAny
argument_list|(
name|ownerDocument
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|representation
return|;
block|}
end_function

begin_comment
comment|/**      * Process Put requests for Remove mode.      * @param value Value defined in the Value element.      * @return Representation element, which is returned as response.      */
end_comment

begin_function
specifier|private
name|Representation
name|modifyRepresentationModeRemove
parameter_list|(
name|List
argument_list|<
name|Node
argument_list|>
name|nodeList
parameter_list|,
name|ValueType
name|value
parameter_list|)
block|{
if|if
condition|(
name|nodeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
name|Node
name|firstNode
init|=
name|nodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Document
name|ownerDocument
init|=
name|firstNode
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
comment|// if firstNode.getOwnerDocument == null the firstNode is ownerDocument
name|ownerDocument
operator|=
name|ownerDocument
operator|==
literal|null
condition|?
operator|(
name|Document
operator|)
name|firstNode
else|:
name|ownerDocument
expr_stmt|;
for|for
control|(
name|Node
name|node
range|:
name|nodeList
control|)
block|{
name|removeNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|Representation
name|representation
init|=
operator|new
name|Representation
argument_list|()
decl_stmt|;
name|representation
operator|.
name|setAny
argument_list|(
name|ownerDocument
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|representation
return|;
block|}
end_function

begin_comment
comment|/**      * Helper method. It removes Node and returns its parent.      * @param resourceFragment Node to remove.      * @return Parent of removed Node.      */
end_comment

begin_function
specifier|private
name|Node
name|removeNode
parameter_list|(
name|Node
name|resourceFragment
parameter_list|)
block|{
name|Node
name|parent
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|resourceFragment
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
name|parent
operator|=
operator|(
operator|(
name|Attr
operator|)
name|resourceFragment
operator|)
operator|.
name|getOwnerElement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|=
name|resourceFragment
operator|.
name|getParentNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
comment|// resourceFragment is Document Node
name|parent
operator|=
name|resourceFragment
expr_stmt|;
block|}
if|if
condition|(
name|resourceFragment
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
operator|(
operator|(
name|Element
operator|)
name|parent
operator|)
operator|.
name|removeAttributeNode
argument_list|(
operator|(
name|Attr
operator|)
name|resourceFragment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|parent
operator|!=
name|resourceFragment
condition|)
block|{
name|parent
operator|.
name|removeChild
argument_list|(
name|resourceFragment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Both parent and resourceFragment are Document
name|Document
name|doc
init|=
operator|(
name|Document
operator|)
name|parent
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|removeChild
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|parent
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|insertAfter
parameter_list|(
name|Document
name|ownerDocument
parameter_list|,
name|Node
name|parent
parameter_list|,
name|Node
name|refChild
parameter_list|,
name|ValueType
name|value
parameter_list|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|value
operator|.
name|getContent
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Node
condition|)
block|{
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|FragmentDialectConstants
operator|.
name|FRAGMENT_2011_03_IRI
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|FragmentDialectConstants
operator|.
name|FRAGMENT_ATTR_NODE_NAME
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidRepresentation
argument_list|()
throw|;
block|}
name|Node
name|importedNode
init|=
name|ownerDocument
operator|.
name|importNode
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
block|{
name|parent
operator|.
name|appendChild
argument_list|(
name|importedNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Node
name|nextSibling
init|=
name|refChild
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextSibling
operator|==
literal|null
condition|)
block|{
name|parent
operator|.
name|appendChild
argument_list|(
name|importedNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|insertBefore
argument_list|(
name|importedNode
argument_list|,
name|nextSibling
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|insertBefore
parameter_list|(
name|Document
name|ownerDocument
parameter_list|,
name|Node
name|parent
parameter_list|,
name|Node
name|refChild
parameter_list|,
name|ValueType
name|value
parameter_list|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|value
operator|.
name|getContent
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Node
condition|)
block|{
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|FragmentDialectConstants
operator|.
name|FRAGMENT_2011_03_IRI
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|FragmentDialectConstants
operator|.
name|FRAGMENT_ATTR_NODE_NAME
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidRepresentation
argument_list|()
throw|;
block|}
name|Node
name|importedNode
init|=
name|ownerDocument
operator|.
name|importNode
argument_list|(
name|node
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
block|{
name|parent
operator|.
name|appendChild
argument_list|(
name|importedNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|insertBefore
argument_list|(
name|importedNode
argument_list|,
name|refChild
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**      * Helper method. It adds new Node as the last child of parent.      * @param ownerDocument Document, where the Node is added.      * @param parent Parent, where the Node is added.      * @param value Value defined in the Value element. It represents newly added Node.      */
end_comment

begin_function
specifier|private
name|void
name|addNode
parameter_list|(
name|Document
name|ownerDocument
parameter_list|,
name|Node
name|parent
parameter_list|,
name|Node
name|nextSibling
parameter_list|,
name|ValueType
name|value
parameter_list|)
block|{
if|if
condition|(
name|ownerDocument
operator|==
name|parent
operator|&&
name|ownerDocument
operator|.
name|getDocumentElement
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidRepresentation
argument_list|()
throw|;
block|}
for|for
control|(
name|Object
name|o
range|:
name|value
operator|.
name|getContent
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|parent
operator|.
name|setTextContent
argument_list|(
name|parent
operator|.
name|getTextContent
argument_list|()
operator|+
operator|(
operator|(
name|String
operator|)
name|o
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Node
condition|)
block|{
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|FragmentDialectConstants
operator|.
name|FRAGMENT_2011_03_IRI
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|FragmentDialectConstants
operator|.
name|FRAGMENT_ATTR_NODE_NAME
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|attrName
init|=
operator|(
operator|(
name|Element
operator|)
name|node
operator|)
operator|.
name|getAttributeNS
argument_list|(
name|FragmentDialectConstants
operator|.
name|FRAGMENT_2011_03_IRI
argument_list|,
name|FragmentDialectConstants
operator|.
name|FRAGMENT_ATTR_NODE_NAME_ATTR
argument_list|)
decl_stmt|;
name|String
name|attrValue
init|=
name|node
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|attrName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SoapFault
argument_list|(
literal|"wsf:AttributeNode@name is not present."
argument_list|,
name|getSoapVersion
argument_list|()
operator|.
name|getSender
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
operator|(
name|Element
operator|)
name|parent
operator|)
operator|.
name|hasAttribute
argument_list|(
name|attrName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidRepresentation
argument_list|()
throw|;
block|}
operator|(
operator|(
name|Element
operator|)
name|parent
operator|)
operator|.
name|setAttribute
argument_list|(
name|attrName
argument_list|,
name|attrValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// import the node to the ownerDocument
name|Node
name|importedNode
init|=
name|ownerDocument
operator|.
name|importNode
argument_list|(
operator|(
name|Node
operator|)
name|o
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextSibling
operator|==
literal|null
condition|)
block|{
name|parent
operator|.
name|appendChild
argument_list|(
name|importedNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|insertBefore
argument_list|(
name|importedNode
argument_list|,
name|nextSibling
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|SoapVersion
name|getSoapVersion
parameter_list|()
block|{
name|WrappedMessageContext
name|wmc
init|=
operator|(
name|WrappedMessageContext
operator|)
name|context
operator|.
name|getMessageContext
argument_list|()
decl_stmt|;
name|SoapMessage
name|message
init|=
operator|(
name|SoapMessage
operator|)
name|wmc
operator|.
name|getWrappedMessage
argument_list|()
decl_stmt|;
return|return
name|message
operator|.
name|getVersion
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

