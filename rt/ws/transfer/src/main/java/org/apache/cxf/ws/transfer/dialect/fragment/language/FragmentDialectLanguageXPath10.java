begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|dialect
operator|.
name|fragment
operator|.
name|language
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|dialect
operator|.
name|fragment
operator|.
name|ExpressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|dialect
operator|.
name|fragment
operator|.
name|faults
operator|.
name|InvalidExpression
import|;
end_import

begin_comment
comment|/**  * Implementation of the XPath 1.0 language.  */
end_comment

begin_class
specifier|public
class|class
name|FragmentDialectLanguageXPath10
implements|implements
name|FragmentDialectLanguage
block|{
specifier|private
specifier|static
name|XPathFactory
name|xpathFactory
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|getResourceFragment
parameter_list|(
specifier|final
name|Representation
name|representation
parameter_list|,
name|ExpressionType
name|expression
parameter_list|)
block|{
name|String
name|expressionStr
init|=
name|getXPathFromExpression
argument_list|(
name|expression
argument_list|)
decl_stmt|;
comment|// Evaluate XPath
name|XPath
name|xPath
init|=
name|xpathFactory
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|xPath
operator|.
name|setNamespaceContext
argument_list|(
operator|new
name|NamespaceContext
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Element
name|resource
init|=
operator|(
name|Element
operator|)
name|representation
operator|.
name|getAny
argument_list|()
decl_stmt|;
return|return
name|resource
operator|.
name|getAttribute
argument_list|(
literal|"xmlns:"
operator|+
name|prefix
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|string
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPrefixes
parameter_list|(
name|String
name|string
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|Object
name|resource
init|=
name|representation
operator|.
name|getAny
argument_list|()
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|resource
operator|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
expr_stmt|;
block|}
name|NodeList
name|result
init|=
operator|(
name|NodeList
operator|)
name|xPath
operator|.
name|evaluate
argument_list|(
name|expressionStr
argument_list|,
name|resource
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkResultConstraints
argument_list|(
name|result
argument_list|)
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|result
return|;
block|}
block|}
else|else
block|{
return|return
name|result
operator|.
name|item
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|ex
parameter_list|)
block|{
comment|// See https://www.java.net/node/681793
block|}
try|try
block|{
return|return
operator|(
name|String
operator|)
name|xPath
operator|.
name|evaluate
argument_list|(
name|expressionStr
argument_list|,
name|representation
operator|.
name|getAny
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|STRING
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
block|}
comment|/**      * Get XPath from the Expression element.      * @param expression      * @return      */
specifier|private
name|String
name|getXPathFromExpression
parameter_list|(
name|ExpressionType
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|.
name|getContent
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|expression
operator|.
name|getContent
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidExpression
argument_list|()
throw|;
block|}
block|}
comment|/**      * Check if result from evaluation of XPath expression fullfils constraints      * defined in the specification.      * See http://www.w3.org/TR/ws-fragment/#IdResSubset      * @param result      * @return If the result is true, the server should return all sequence of elements,      *         otherwise it should return only the first element.      */
specifier|private
name|boolean
name|checkResultConstraints
parameter_list|(
name|NodeList
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Node
name|firstNode
init|=
name|result
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstNode
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|Element
name|firstEl
init|=
operator|(
name|Element
operator|)
name|firstNode
decl_stmt|;
comment|// QName attributes
name|String
name|localName
init|=
name|firstEl
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|firstEl
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|Node
name|parent
init|=
name|firstEl
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|result
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|result
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
if|if
condition|(
operator|!
name|stringEquals
argument_list|(
name|element
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|localName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|stringEquals
argument_list|(
name|element
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|namespace
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|element
operator|.
name|getParentNode
argument_list|()
operator|!=
name|parent
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Helper method for equation two strings, which can be nullable.      * @param str1      * @param str2      * @return      */
specifier|private
name|boolean
name|stringEquals
parameter_list|(
name|String
name|str1
parameter_list|,
name|String
name|str2
parameter_list|)
block|{
return|return
name|str1
operator|==
literal|null
condition|?
name|str2
operator|==
literal|null
else|:
name|str1
operator|.
name|equals
argument_list|(
name|str2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

