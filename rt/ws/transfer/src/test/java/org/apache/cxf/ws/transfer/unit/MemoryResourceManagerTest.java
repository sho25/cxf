begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|unit
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|ReferenceParametersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|manager
operator|.
name|MemoryResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|manager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|shared
operator|.
name|faults
operator|.
name|UnknownResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|MemoryResourceManagerTest
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ELEMENT_NAMESPACE
init|=
literal|"test"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ELEMENT_NAME
init|=
literal|"name1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ELEMENT_VALUE
init|=
literal|"value1"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ELEMENT_VALUE_NEW
init|=
literal|"value2"
decl_stmt|;
specifier|private
specifier|static
name|Document
name|document
decl_stmt|;
specifier|private
name|ResourceManager
name|resourceManager
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|ParserConfigurationException
block|{
name|document
operator|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
block|{
name|document
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|resourceManager
operator|=
operator|new
name|MemoryResourceManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
block|{
name|resourceManager
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnknownResource
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getEmptyReferenceParamsTest
parameter_list|()
block|{
name|resourceManager
operator|.
name|get
argument_list|(
operator|new
name|ReferenceParametersType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnknownResource
operator|.
name|class
argument_list|)
specifier|public
name|void
name|getUnknownReferenceParamsTest
parameter_list|()
block|{
name|ReferenceParametersType
name|refParams
init|=
operator|new
name|ReferenceParametersType
argument_list|()
decl_stmt|;
name|Element
name|uuid
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
operator|.
name|createElementNS
argument_list|(
name|MemoryResourceManager
operator|.
name|REF_NAMESPACE
argument_list|,
name|MemoryResourceManager
operator|.
name|REF_LOCAL_NAME
argument_list|)
decl_stmt|;
name|uuid
operator|.
name|setTextContent
argument_list|(
literal|"123456"
argument_list|)
expr_stmt|;
name|refParams
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|get
argument_list|(
name|refParams
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnknownResource
operator|.
name|class
argument_list|)
specifier|public
name|void
name|putEmptyReferenceParamsTest
parameter_list|()
block|{
name|resourceManager
operator|.
name|put
argument_list|(
operator|new
name|ReferenceParametersType
argument_list|()
argument_list|,
operator|new
name|Representation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnknownResource
operator|.
name|class
argument_list|)
specifier|public
name|void
name|putUnknownReferenceParamsTest
parameter_list|()
block|{
name|ReferenceParametersType
name|refParams
init|=
operator|new
name|ReferenceParametersType
argument_list|()
decl_stmt|;
name|Element
name|uuid
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
operator|.
name|createElementNS
argument_list|(
name|MemoryResourceManager
operator|.
name|REF_NAMESPACE
argument_list|,
name|MemoryResourceManager
operator|.
name|REF_LOCAL_NAME
argument_list|)
decl_stmt|;
name|uuid
operator|.
name|setTextContent
argument_list|(
literal|"123456"
argument_list|)
expr_stmt|;
name|refParams
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|put
argument_list|(
name|refParams
argument_list|,
operator|new
name|Representation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnknownResource
operator|.
name|class
argument_list|)
specifier|public
name|void
name|deleteEmptyReferenceParamsTest
parameter_list|()
block|{
name|resourceManager
operator|.
name|delete
argument_list|(
operator|new
name|ReferenceParametersType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnknownResource
operator|.
name|class
argument_list|)
specifier|public
name|void
name|deleteUnknownReferenceParamsTest
parameter_list|()
block|{
name|ReferenceParametersType
name|refParams
init|=
operator|new
name|ReferenceParametersType
argument_list|()
decl_stmt|;
name|Element
name|uuid
init|=
name|DOMUtils
operator|.
name|getEmptyDocument
argument_list|()
operator|.
name|createElementNS
argument_list|(
name|MemoryResourceManager
operator|.
name|REF_NAMESPACE
argument_list|,
name|MemoryResourceManager
operator|.
name|REF_LOCAL_NAME
argument_list|)
decl_stmt|;
name|uuid
operator|.
name|setTextContent
argument_list|(
literal|"123456"
argument_list|)
expr_stmt|;
name|refParams
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|delete
argument_list|(
name|refParams
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createTest
parameter_list|()
block|{
name|Element
name|representationEl
init|=
name|document
operator|.
name|createElementNS
argument_list|(
name|ELEMENT_NAMESPACE
argument_list|,
name|ELEMENT_NAME
argument_list|)
decl_stmt|;
name|representationEl
operator|.
name|setTextContent
argument_list|(
name|ELEMENT_VALUE
argument_list|)
expr_stmt|;
name|Representation
name|representation
init|=
operator|new
name|Representation
argument_list|()
decl_stmt|;
name|representation
operator|.
name|setAny
argument_list|(
name|representationEl
argument_list|)
expr_stmt|;
name|ReferenceParametersType
name|refParams
init|=
name|resourceManager
operator|.
name|create
argument_list|(
name|representation
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ResourceManager returned unexpected count of reference elements."
argument_list|,
name|refParams
operator|.
name|getAny
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getTest
parameter_list|()
block|{
name|Element
name|representationEl
init|=
name|document
operator|.
name|createElementNS
argument_list|(
name|ELEMENT_NAMESPACE
argument_list|,
name|ELEMENT_NAME
argument_list|)
decl_stmt|;
name|representationEl
operator|.
name|setTextContent
argument_list|(
name|ELEMENT_VALUE
argument_list|)
expr_stmt|;
name|Representation
name|representation
init|=
operator|new
name|Representation
argument_list|()
decl_stmt|;
name|representation
operator|.
name|setAny
argument_list|(
name|representationEl
argument_list|)
expr_stmt|;
name|ReferenceParametersType
name|refParams
init|=
name|resourceManager
operator|.
name|create
argument_list|(
name|representation
argument_list|)
decl_stmt|;
name|Representation
name|returnedRepresentation
init|=
name|resourceManager
operator|.
name|get
argument_list|(
name|refParams
argument_list|)
decl_stmt|;
name|Element
name|returnedEl
init|=
operator|(
name|Element
operator|)
name|returnedRepresentation
operator|.
name|getAny
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Namespace is other than expected."
argument_list|,
name|ELEMENT_NAMESPACE
argument_list|,
name|returnedEl
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Element name is other than expected"
argument_list|,
name|ELEMENT_NAME
argument_list|,
name|returnedEl
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Value is other than expected."
argument_list|,
name|ELEMENT_VALUE
argument_list|,
name|returnedEl
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putTest
parameter_list|()
block|{
name|Element
name|representationEl
init|=
name|document
operator|.
name|createElementNS
argument_list|(
name|ELEMENT_NAMESPACE
argument_list|,
name|ELEMENT_NAME
argument_list|)
decl_stmt|;
name|representationEl
operator|.
name|setTextContent
argument_list|(
name|ELEMENT_VALUE
argument_list|)
expr_stmt|;
name|Representation
name|representation
init|=
operator|new
name|Representation
argument_list|()
decl_stmt|;
name|representation
operator|.
name|setAny
argument_list|(
name|representationEl
argument_list|)
expr_stmt|;
name|Element
name|representationElNew
init|=
name|document
operator|.
name|createElementNS
argument_list|(
name|ELEMENT_NAMESPACE
argument_list|,
name|ELEMENT_NAME
argument_list|)
decl_stmt|;
name|representationElNew
operator|.
name|setTextContent
argument_list|(
name|ELEMENT_VALUE_NEW
argument_list|)
expr_stmt|;
name|Representation
name|representationNew
init|=
operator|new
name|Representation
argument_list|()
decl_stmt|;
name|representationNew
operator|.
name|setAny
argument_list|(
name|representationElNew
argument_list|)
expr_stmt|;
name|ReferenceParametersType
name|refParams
init|=
name|resourceManager
operator|.
name|create
argument_list|(
name|representation
argument_list|)
decl_stmt|;
name|resourceManager
operator|.
name|put
argument_list|(
name|refParams
argument_list|,
name|representationNew
argument_list|)
expr_stmt|;
name|Representation
name|returnedRepresentation
init|=
name|resourceManager
operator|.
name|get
argument_list|(
name|refParams
argument_list|)
decl_stmt|;
name|Element
name|returnedEl
init|=
operator|(
name|Element
operator|)
name|returnedRepresentation
operator|.
name|getAny
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Namespace is other than expected."
argument_list|,
name|ELEMENT_NAMESPACE
argument_list|,
name|returnedEl
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Element name is other than expected"
argument_list|,
name|ELEMENT_NAME
argument_list|,
name|returnedEl
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Value is other than expected."
argument_list|,
name|ELEMENT_VALUE_NEW
argument_list|,
name|returnedEl
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnknownResource
operator|.
name|class
argument_list|)
specifier|public
name|void
name|deleteTest
parameter_list|()
block|{
name|ReferenceParametersType
name|refParams
init|=
name|resourceManager
operator|.
name|create
argument_list|(
operator|new
name|Representation
argument_list|()
argument_list|)
decl_stmt|;
name|resourceManager
operator|.
name|delete
argument_list|(
name|refParams
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|get
argument_list|(
name|refParams
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createEmptyRepresentationTest
parameter_list|()
block|{
name|ReferenceParametersType
name|refParams
init|=
name|resourceManager
operator|.
name|create
argument_list|(
operator|new
name|Representation
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ResourceManager returned unexpected count of reference elements."
argument_list|,
name|refParams
operator|.
name|getAny
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putEmptyRepresentationTest
parameter_list|()
block|{
name|Element
name|representationEl
init|=
name|document
operator|.
name|createElementNS
argument_list|(
name|ELEMENT_NAMESPACE
argument_list|,
name|ELEMENT_NAME
argument_list|)
decl_stmt|;
name|representationEl
operator|.
name|setTextContent
argument_list|(
name|ELEMENT_VALUE
argument_list|)
expr_stmt|;
name|Representation
name|representation
init|=
operator|new
name|Representation
argument_list|()
decl_stmt|;
name|representation
operator|.
name|setAny
argument_list|(
name|representationEl
argument_list|)
expr_stmt|;
name|ReferenceParametersType
name|refParams
init|=
name|resourceManager
operator|.
name|create
argument_list|(
name|representation
argument_list|)
decl_stmt|;
name|resourceManager
operator|.
name|put
argument_list|(
name|refParams
argument_list|,
operator|new
name|Representation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getEmptyRepresentationTest
parameter_list|()
block|{
name|ReferenceParametersType
name|refParams
init|=
name|resourceManager
operator|.
name|create
argument_list|(
operator|new
name|Representation
argument_list|()
argument_list|)
decl_stmt|;
name|Representation
name|returnedRepresentation
init|=
name|resourceManager
operator|.
name|get
argument_list|(
name|refParams
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|returnedRepresentation
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

