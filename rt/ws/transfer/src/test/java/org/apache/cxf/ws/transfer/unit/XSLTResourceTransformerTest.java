begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|unit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|Representation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|validationtransformation
operator|.
name|ResourceTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|transfer
operator|.
name|validationtransformation
operator|.
name|XSLTResourceTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|XSLTResourceTransformerTest
block|{
specifier|private
name|Representation
name|loadRepresentation
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|Document
name|doc
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Representation
name|representation
init|=
operator|new
name|Representation
argument_list|()
decl_stmt|;
name|representation
operator|.
name|setAny
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|representation
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|transformTest
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|ResourceTransformer
name|transformer
init|=
operator|new
name|XSLTResourceTransformer
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/xml/xsltresourcetransformer/stylesheet.xsl"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Representation
name|representation
init|=
name|loadRepresentation
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/xml/xsltresourcetransformer/representation.xml"
argument_list|)
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|representation
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Element
name|representationEl
init|=
operator|(
name|Element
operator|)
name|representation
operator|.
name|getAny
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected root element with name \"person\"."
argument_list|,
literal|"person"
argument_list|,
name|representationEl
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected one element \"firstname\"."
argument_list|,
name|representationEl
operator|.
name|getElementsByTagName
argument_list|(
literal|"firstname"
argument_list|)
operator|.
name|getLength
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected one element \"lastname\"."
argument_list|,
name|representationEl
operator|.
name|getElementsByTagName
argument_list|(
literal|"lastname"
argument_list|)
operator|.
name|getLength
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

