begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBindingConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|FaultMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|UnwrappedOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|policy
operator|.
name|MetadataConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_comment
comment|/**  * Logical Handler responsible for aggregating the Message Addressing   * Properties for outgoing messages.  */
end_comment

begin_class
specifier|public
class|class
name|MAPAggregator
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|String
name|USING_ADDRESSING
init|=
name|MAPAggregator
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".usingAddressing"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|MAPAggregator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|LOG
operator|.
name|getResourceBundle
argument_list|()
decl_stmt|;
comment|/**      * REVISIT: map usage implies that the *same* interceptor instance       * is used in all chains.      */
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|messageIDs
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|usingAddressingAdvisory
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|addressingRequired
decl_stmt|;
specifier|private
name|boolean
name|allowDuplicates
init|=
literal|true
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|MAPAggregator
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_LOGICAL
argument_list|)
expr_stmt|;
block|}
comment|/**      * Indicates if duplicate messageIDs are allowed.      * @return true if duplicate messageIDs are allowed      */
specifier|public
name|boolean
name|allowDuplicates
parameter_list|()
block|{
return|return
name|allowDuplicates
return|;
block|}
comment|/**      * Allows/disallows duplicate messageIdDs.        * @param ad whether duplicate messageIDs are allowed      */
specifier|public
name|void
name|setAllowDuplicates
parameter_list|(
name|boolean
name|ad
parameter_list|)
block|{
name|allowDuplicates
operator|=
name|ad
expr_stmt|;
block|}
comment|/**      * Whether the presence of the<wsaw:UsingAddressing> element      * in the WSDL is purely advisory, i.e. its absence doesn't prevent      * the encoding of WS-A headers.      *      * @return true if the presence of the<wsaw:UsingAddressing> element is       * advisory      */
specifier|public
name|boolean
name|isUsingAddressingAdvisory
parameter_list|()
block|{
return|return
name|usingAddressingAdvisory
return|;
block|}
comment|/**      * Controls whether the presence of the<wsaw:UsingAddressing> element      * in the WSDL is purely advisory, i.e. its absence doesn't prevent      * the encoding of WS-A headers.      *      * @param advisory true if the presence of the<wsaw:UsingAddressing>      * element is to be advisory      */
specifier|public
name|void
name|setUsingAddressingAdvisory
parameter_list|(
name|boolean
name|advisory
parameter_list|)
block|{     }
comment|/**      * Whether the use of addressing is completely required for this endpoint      *      * @return true if addressing is required      */
specifier|public
name|boolean
name|isAddressingRequired
parameter_list|()
block|{
return|return
name|addressingRequired
return|;
block|}
comment|/**      * Sets whether the use of addressing is completely required for this endpoint      *      */
specifier|public
name|void
name|setAddressingRequired
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
name|addressingRequired
operator|=
name|required
expr_stmt|;
block|}
comment|/**      * Invoked for normal processing of inbound and outbound messages.      *      * @param message the current message      */
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|mediate
argument_list|(
name|message
argument_list|,
name|ContextUtils
operator|.
name|isFault
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Invoked when unwinding normal interceptor chain when a fault occurred.      *      * @param message the current message      */
specifier|public
name|void
name|handleFault
parameter_list|(
name|Message
name|message
parameter_list|)
block|{     }
comment|/**      * Determine if addressing is being used      *      * @param message the current message      * @pre message is outbound      */
specifier|private
name|boolean
name|usingAddressing
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|boolean
name|ret
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|ContextUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasUsingAddressing
argument_list|(
name|message
argument_list|)
operator|||
name|hasAddressingAssertion
argument_list|(
name|message
argument_list|)
operator|||
name|hasUsingAddressingAssertion
argument_list|(
name|message
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|usingAddressingAdvisory
operator|||
operator|!
name|WSAContextUtils
operator|.
name|retrieveUsingAddressing
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|=
name|getMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**     * Determine if the use of addressing is indicated by the presence of a     * the usingAddressing attribute.     *     * @param message the current message     * @pre message is outbound     * @pre requestor role     */
specifier|private
name|boolean
name|hasUsingAddressing
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|Endpoint
name|endpoint
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|endpoint
condition|)
block|{
name|Boolean
name|b
init|=
operator|(
name|Boolean
operator|)
name|endpoint
operator|.
name|get
argument_list|(
name|USING_ADDRESSING
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|b
condition|)
block|{
name|EndpointInfo
name|endpointInfo
init|=
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|endpointExts
init|=
name|endpointInfo
operator|!=
literal|null
condition|?
name|endpointInfo
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
else|:
literal|null
decl_stmt|;
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|bindingExts
init|=
name|endpointInfo
operator|!=
literal|null
operator|&&
name|endpointInfo
operator|.
name|getBinding
argument_list|()
operator|!=
literal|null
condition|?
name|endpointInfo
operator|.
name|getBinding
argument_list|()
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
else|:
literal|null
decl_stmt|;
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|serviceExts
init|=
name|endpointInfo
operator|!=
literal|null
operator|&&
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|!=
literal|null
condition|?
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
else|:
literal|null
decl_stmt|;
name|ret
operator|=
name|hasUsingAddressing
argument_list|(
name|endpointExts
argument_list|)
operator|||
name|hasUsingAddressing
argument_list|(
name|bindingExts
argument_list|)
operator|||
name|hasUsingAddressing
argument_list|(
name|serviceExts
argument_list|)
expr_stmt|;
name|b
operator|=
name|ret
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
expr_stmt|;
name|endpoint
operator|.
name|put
argument_list|(
name|USING_ADDRESSING
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|b
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Determine if the use of addressing is indicated by an Addressing assertion in the      * alternative chosen for the current message.      *       * @param message the current message      * @pre message is outbound      * @pre requestor role      */
specifier|private
name|boolean
name|hasAddressingAssertion
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aim
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
literal|null
operator|==
name|aim
operator|.
name|get
argument_list|(
name|MetadataConstants
operator|.
name|ADDRESSING_ASSERTION_QNAME
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// no need to analyse the content of the Addressing assertion here
return|return
literal|true
return|;
block|}
comment|/**      * Determine if the use of addressing is indicated by a UsingAddressing in the      * alternative chosen for the current message.      *       * @param message the current message      * @pre message is outbound      * @pre requestor role      */
specifier|private
name|boolean
name|hasUsingAddressingAssertion
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aim
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
literal|null
operator|!=
name|aim
operator|.
name|get
argument_list|(
name|MetadataConstants
operator|.
name|USING_ADDRESSING_2004_QNAME
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|null
operator|!=
name|aim
operator|.
name|get
argument_list|(
name|MetadataConstants
operator|.
name|USING_ADDRESSING_2005_QNAME
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|null
operator|!=
name|aim
operator|.
name|get
argument_list|(
name|MetadataConstants
operator|.
name|USING_ADDRESSING_2006_QNAME
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Asserts all Addressing assertions for the current message, regardless their nested       * Policies.      * @param message the current message      */
specifier|private
name|void
name|assertAddressing
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|anonymous
parameter_list|)
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|aim
condition|)
block|{
return|return;
block|}
name|QName
index|[]
name|types
init|=
operator|new
name|QName
index|[]
block|{
name|MetadataConstants
operator|.
name|ADDRESSING_ASSERTION_QNAME
block|,
name|MetadataConstants
operator|.
name|USING_ADDRESSING_2004_QNAME
block|,
name|MetadataConstants
operator|.
name|USING_ADDRESSING_2005_QNAME
block|,
name|MetadataConstants
operator|.
name|USING_ADDRESSING_2006_QNAME
block|}
decl_stmt|;
for|for
control|(
name|QName
name|type
range|:
name|types
control|)
block|{
name|assertAssertion
argument_list|(
name|aim
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|MetadataConstants
operator|.
name|ADDRESSING_ASSERTION_QNAME
argument_list|)
condition|)
block|{
if|if
condition|(
name|anonymous
condition|)
block|{
name|assertAssertion
argument_list|(
name|aim
argument_list|,
name|MetadataConstants
operator|.
name|ANON_RESPONSES_ASSERTION_QNAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertAssertion
argument_list|(
name|aim
argument_list|,
name|MetadataConstants
operator|.
name|NON_ANON_RESPONSES_ASSERTION_QNAME
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|assertAssertion
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|QName
name|type
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|aic
init|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|type
argument_list|)
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|aic
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param exts list of extension elements      * @return true iff the UsingAddressing element is found      */
specifier|private
name|boolean
name|hasUsingAddressing
parameter_list|(
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|exts
parameter_list|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|exts
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|ExtensibilityElement
argument_list|>
name|extensionElements
init|=
name|exts
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|extensionElements
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
condition|)
block|{
name|ExtensibilityElement
name|ext
init|=
operator|(
name|ExtensibilityElement
operator|)
name|extensionElements
operator|.
name|next
argument_list|()
decl_stmt|;
name|found
operator|=
name|Names
operator|.
name|WSAW_USING_ADDRESSING_QNAME
operator|.
name|equals
argument_list|(
name|ext
operator|.
name|getElementType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|found
return|;
block|}
comment|/**      * Mediate message flow.      *      * @param message the current message      * @param isFault true if a fault is being mediated      * @return true if processing should continue on dispatch path       */
specifier|protected
name|boolean
name|mediate
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|isFault
parameter_list|)
block|{
name|boolean
name|continueProcessing
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|ContextUtils
operator|.
name|isOutbound
argument_list|(
name|message
argument_list|)
condition|)
block|{
if|if
condition|(
name|usingAddressing
argument_list|(
name|message
argument_list|)
condition|)
block|{
comment|// request/response MAPs must be aggregated
name|aggregate
argument_list|(
name|message
argument_list|,
name|isFault
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|ContextUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
comment|// responder validates incoming MAPs
name|AddressingPropertiesImpl
name|maps
init|=
name|getMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|isOneway
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|isOneWay
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|maps
operator|&&
operator|!
name|addressingRequired
condition|)
block|{
return|return
literal|false
return|;
block|}
name|continueProcessing
operator|=
name|validateIncomingMAPs
argument_list|(
name|maps
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|maps
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isOneway
operator|||
operator|!
name|ContextUtils
operator|.
name|isGenericAddress
argument_list|(
name|maps
operator|.
name|getReplyTo
argument_list|()
argument_list|)
condition|)
block|{
name|ContextUtils
operator|.
name|rebaseResponse
argument_list|(
name|maps
operator|.
name|getReplyTo
argument_list|()
argument_list|,
name|maps
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isOneway
condition|)
block|{
comment|// ensure the inbound MAPs are available in both the full& fault
comment|// response messages (used to determine relatesTo etc.)
name|ContextUtils
operator|.
name|propogateReceivedMAPs
argument_list|(
name|maps
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|continueProcessing
condition|)
block|{
comment|// any faults thrown from here on can be correlated with this message
name|message
operator|.
name|put
argument_list|(
name|FaultMode
operator|.
name|class
argument_list|,
name|FaultMode
operator|.
name|LOGICAL_RUNTIME_FAULT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// validation failure => dispatch is aborted, response MAPs
comment|// must be aggregated
comment|//isFault = true;
comment|//aggregate(message, isFault);
throw|throw
operator|new
name|SoapFault
argument_list|(
name|ContextUtils
operator|.
name|retrieveMAPFaultReason
argument_list|(
name|message
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
name|Names
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|ContextUtils
operator|.
name|retrieveMAPFaultName
argument_list|(
name|message
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|AddressingPropertiesImpl
name|theMaps
init|=
name|ContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
name|ContextUtils
operator|.
name|isOutbound
argument_list|(
name|message
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|theMaps
condition|)
block|{
name|assertAddressing
argument_list|(
name|message
argument_list|,
name|ContextUtils
operator|.
name|isGenericAddress
argument_list|(
name|theMaps
operator|.
name|getReplyTo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|continueProcessing
return|;
block|}
comment|/**      * Perform MAP aggregation.      *      * @param message the current message      * @param isFault true if a fault is being mediated      */
specifier|private
name|void
name|aggregate
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|isFault
parameter_list|)
block|{
name|boolean
name|isRequestor
init|=
name|ContextUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|AddressingPropertiesImpl
name|maps
init|=
name|assembleGeneric
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|addRoleSpecific
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|isRequestor
argument_list|,
name|isFault
argument_list|)
expr_stmt|;
comment|// outbound property always used to store MAPs, as this handler
comment|// aggregates only when either:
comment|// a) message really is outbound
comment|// b) message is currently inbound, but we are about to abort dispatch
comment|//    due to an incoming MAPs validation failure, so the dispatch
comment|//    will shortly traverse the outbound path
name|ContextUtils
operator|.
name|storeMAPs
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
literal|true
argument_list|,
name|isRequestor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Assemble the generic MAPs (for both requests and responses).      *      * @param message the current message      * @return AddressingProperties containing the generic MAPs      */
specifier|private
name|AddressingPropertiesImpl
name|assembleGeneric
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|AddressingPropertiesImpl
name|maps
init|=
name|getMAPs
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// MessageID
if|if
condition|(
name|maps
operator|.
name|getMessageID
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|messageID
init|=
name|ContextUtils
operator|.
name|generateUUID
argument_list|()
decl_stmt|;
name|maps
operator|.
name|setMessageID
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|messageID
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Action
if|if
condition|(
name|ContextUtils
operator|.
name|hasEmptyAction
argument_list|(
name|maps
argument_list|)
condition|)
block|{
name|maps
operator|.
name|setAction
argument_list|(
name|ContextUtils
operator|.
name|getAction
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ContextUtils
operator|.
name|hasEmptyAction
argument_list|(
name|maps
argument_list|)
operator|&&
name|ContextUtils
operator|.
name|isOutbound
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|maps
operator|.
name|setAction
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|getActionUri
argument_list|(
name|message
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|maps
return|;
block|}
specifier|private
name|String
name|getActionFromInputMessage
parameter_list|(
specifier|final
name|OperationInfo
name|operation
parameter_list|)
block|{
name|MessageInfo
name|inputMessage
init|=
name|operation
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputMessage
operator|.
name|getExtensionAttributes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|inputAction
init|=
name|ContextUtils
operator|.
name|getAction
argument_list|(
name|inputMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputAction
operator|!=
literal|null
condition|)
block|{
return|return
name|inputAction
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|getActionFromOutputMessage
parameter_list|(
specifier|final
name|OperationInfo
name|operation
parameter_list|)
block|{
name|MessageInfo
name|outputMessage
init|=
name|operation
operator|.
name|getOutput
argument_list|()
decl_stmt|;
if|if
condition|(
name|outputMessage
operator|!=
literal|null
operator|&&
name|outputMessage
operator|.
name|getExtensionAttributes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|outputAction
init|=
name|ContextUtils
operator|.
name|getAction
argument_list|(
name|outputMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputAction
operator|!=
literal|null
condition|)
block|{
return|return
name|outputAction
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|isSameFault
parameter_list|(
specifier|final
name|FaultInfo
name|faultInfo
parameter_list|,
name|String
name|faultName
parameter_list|)
block|{
if|if
condition|(
name|faultInfo
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|faultName
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|faultInfoName
init|=
name|faultInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
return|return
name|faultInfoName
operator|.
name|equals
argument_list|(
name|faultName
argument_list|)
operator|||
name|faultInfoName
operator|.
name|equals
argument_list|(
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|faultName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|getActionBaseUri
parameter_list|(
specifier|final
name|OperationInfo
name|operation
parameter_list|)
block|{
name|String
name|interfaceName
init|=
name|operation
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
return|return
name|addPath
argument_list|(
name|operation
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|interfaceName
argument_list|)
return|;
block|}
specifier|private
name|String
name|getActionFromFaultMessage
parameter_list|(
specifier|final
name|OperationInfo
name|operation
parameter_list|,
specifier|final
name|String
name|faultName
parameter_list|)
block|{
if|if
condition|(
name|operation
operator|.
name|getFaults
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FaultInfo
name|faultInfo
range|:
name|operation
operator|.
name|getFaults
argument_list|()
control|)
block|{
if|if
condition|(
name|isSameFault
argument_list|(
name|faultInfo
argument_list|,
name|faultName
argument_list|)
condition|)
block|{
if|if
condition|(
name|faultInfo
operator|.
name|getExtensionAttributes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|faultAction
init|=
name|ContextUtils
operator|.
name|getAction
argument_list|(
name|faultInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|faultAction
operator|!=
literal|null
condition|)
block|{
return|return
name|faultAction
return|;
block|}
block|}
return|return
name|addPath
argument_list|(
name|addPath
argument_list|(
name|getActionBaseUri
argument_list|(
name|operation
argument_list|)
argument_list|,
literal|"Fault"
argument_list|)
argument_list|,
name|faultInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|addPath
argument_list|(
name|addPath
argument_list|(
name|getActionBaseUri
argument_list|(
name|operation
argument_list|)
argument_list|,
literal|"Fault"
argument_list|)
argument_list|,
name|faultName
argument_list|)
return|;
block|}
specifier|private
name|String
name|getFaultNameFromMessage
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
block|{
name|Exception
name|e
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|==
literal|null
condition|)
block|{
name|cause
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|Fault
condition|)
block|{
name|WebFault
name|t
init|=
name|cause
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|WebFault
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
return|return
name|t
operator|.
name|name
argument_list|()
return|;
block|}
block|}
return|return
name|cause
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getActionUri
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|BindingOperationInfo
name|bop
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bop
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|OperationInfo
name|op
init|=
name|bop
operator|.
name|getOperationInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|isUnwrapped
argument_list|()
condition|)
block|{
name|op
operator|=
operator|(
operator|(
name|UnwrappedOperationInfo
operator|)
name|op
operator|)
operator|.
name|getWrappedOperation
argument_list|()
expr_stmt|;
block|}
name|String
name|actionUri
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|SoapBindingConstants
operator|.
name|SOAP_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actionUri
operator|!=
literal|null
condition|)
block|{
return|return
name|actionUri
return|;
block|}
name|String
name|opNamespace
init|=
name|getActionBaseUri
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|ContextUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|String
name|explicitAction
init|=
name|getActionFromInputMessage
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|explicitAction
operator|!=
literal|null
condition|)
block|{
name|actionUri
operator|=
name|explicitAction
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|==
name|op
operator|.
name|getInputName
argument_list|()
condition|)
block|{
name|actionUri
operator|=
name|addPath
argument_list|(
name|opNamespace
argument_list|,
name|op
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Request"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actionUri
operator|=
name|addPath
argument_list|(
name|opNamespace
argument_list|,
name|op
operator|.
name|getInputName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ContextUtils
operator|.
name|isFault
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|String
name|faultName
init|=
name|getFaultNameFromMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|actionUri
operator|=
name|getActionFromFaultMessage
argument_list|(
name|op
argument_list|,
name|faultName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|explicitAction
init|=
name|getActionFromOutputMessage
argument_list|(
name|op
argument_list|)
decl_stmt|;
if|if
condition|(
name|explicitAction
operator|!=
literal|null
condition|)
block|{
name|actionUri
operator|=
name|explicitAction
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|==
name|op
operator|.
name|getOutputName
argument_list|()
condition|)
block|{
name|actionUri
operator|=
name|addPath
argument_list|(
name|opNamespace
argument_list|,
name|op
operator|.
name|getOutput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actionUri
operator|=
name|addPath
argument_list|(
name|opNamespace
argument_list|,
name|op
operator|.
name|getOutputName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|actionUri
return|;
block|}
specifier|private
name|String
name|getDelimiter
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"urn"
argument_list|)
condition|)
block|{
return|return
literal|":"
return|;
block|}
return|return
literal|"/"
return|;
block|}
specifier|private
name|String
name|addPath
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|String
name|delimiter
init|=
name|getDelimiter
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|uri
operator|.
name|endsWith
argument_list|(
name|delimiter
argument_list|)
operator|&&
operator|!
name|path
operator|.
name|startsWith
argument_list|(
name|delimiter
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Add MAPs which are specific to the requestor or responder role.      *      * @param maps the MAPs being assembled      * @param message the current message      * @param isRequestor true iff the current messaging role is that of       * requestor       * @param isFault true if a fault is being mediated      */
specifier|private
name|void
name|addRoleSpecific
parameter_list|(
name|AddressingPropertiesImpl
name|maps
parameter_list|,
name|Message
name|message
parameter_list|,
name|boolean
name|isRequestor
parameter_list|,
name|boolean
name|isFault
parameter_list|)
block|{
if|if
condition|(
name|isRequestor
condition|)
block|{
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
comment|// add request-specific MAPs
name|boolean
name|isOneway
init|=
name|exchange
operator|.
name|isOneWay
argument_list|()
decl_stmt|;
name|boolean
name|isOutbound
init|=
name|ContextUtils
operator|.
name|isOutbound
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Conduit
name|conduit
init|=
literal|null
decl_stmt|;
comment|// To
if|if
condition|(
name|maps
operator|.
name|getTo
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isOutbound
condition|)
block|{
name|conduit
operator|=
name|ContextUtils
operator|.
name|getConduit
argument_list|(
name|conduit
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|EndpointReferenceType
name|reference
init|=
name|conduit
operator|!=
literal|null
condition|?
name|conduit
operator|.
name|getTarget
argument_list|()
else|:
name|ContextUtils
operator|.
name|getNoneEndpointReference
argument_list|()
decl_stmt|;
name|maps
operator|.
name|setTo
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
comment|// ReplyTo, set if null in MAPs or if set to a generic address
comment|// (anonymous or none) that may not be appropriate for the
comment|// current invocation
name|EndpointReferenceType
name|replyTo
init|=
name|maps
operator|.
name|getReplyTo
argument_list|()
decl_stmt|;
if|if
condition|(
name|ContextUtils
operator|.
name|isGenericAddress
argument_list|(
name|replyTo
argument_list|)
condition|)
block|{
name|conduit
operator|=
name|ContextUtils
operator|.
name|getConduit
argument_list|(
name|conduit
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|conduit
operator|!=
literal|null
condition|)
block|{
name|Destination
name|backChannel
init|=
name|conduit
operator|.
name|getBackChannel
argument_list|()
decl_stmt|;
if|if
condition|(
name|backChannel
operator|!=
literal|null
condition|)
block|{
name|replyTo
operator|=
name|backChannel
operator|.
name|getAddress
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|replyTo
operator|==
literal|null
operator|||
operator|(
name|isOneway
operator|&&
operator|(
name|replyTo
operator|.
name|getAddress
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|Names
operator|.
name|WSA_NONE_ADDRESS
operator|.
name|equals
argument_list|(
name|replyTo
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
block|{
name|AttributedURIType
name|address
init|=
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|isOneway
condition|?
name|Names
operator|.
name|WSA_NONE_ADDRESS
else|:
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
argument_list|)
decl_stmt|;
name|replyTo
operator|=
name|ContextUtils
operator|.
name|WSA_OBJECT_FACTORY
operator|.
name|createEndpointReferenceType
argument_list|()
expr_stmt|;
name|replyTo
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
name|maps
operator|.
name|setReplyTo
argument_list|(
name|replyTo
argument_list|)
expr_stmt|;
block|}
comment|// FaultTo
if|if
condition|(
name|maps
operator|.
name|getFaultTo
argument_list|()
operator|==
literal|null
condition|)
block|{
name|maps
operator|.
name|setFaultTo
argument_list|(
name|maps
operator|.
name|getReplyTo
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maps
operator|.
name|getFaultTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|==
literal|null
condition|)
block|{
name|maps
operator|.
name|setFaultTo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// add response-specific MAPs
name|AddressingPropertiesImpl
name|inMAPs
init|=
name|getMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|maps
operator|.
name|exposeAs
argument_list|(
name|inMAPs
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
comment|// To taken from ReplyTo or FaultTo in incoming MAPs (depending
comment|// on the fault status of the response)
if|if
condition|(
name|isFault
operator|&&
name|inMAPs
operator|.
name|getFaultTo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|maps
operator|.
name|setTo
argument_list|(
name|inMAPs
operator|.
name|getFaultTo
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maps
operator|.
name|getTo
argument_list|()
operator|==
literal|null
operator|&&
name|inMAPs
operator|.
name|getReplyTo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|maps
operator|.
name|setTo
argument_list|(
name|inMAPs
operator|.
name|getReplyTo
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// RelatesTo taken from MessageID in incoming MAPs
if|if
condition|(
name|inMAPs
operator|.
name|getMessageID
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PARTIAL_RESPONSE_MESSAGE
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|inMessageID
init|=
name|inMAPs
operator|.
name|getMessageID
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|maps
operator|.
name|setRelatesTo
argument_list|(
name|ContextUtils
operator|.
name|getRelatesTo
argument_list|(
name|inMessageID
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// fallback fault action
if|if
condition|(
name|isFault
operator|&&
name|maps
operator|.
name|getAction
argument_list|()
operator|==
literal|null
condition|)
block|{
name|maps
operator|.
name|setAction
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|Names
operator|.
name|WSA_DEFAULT_FAULT_ACTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isFault
operator|&&
operator|!
name|ContextUtils
operator|.
name|isGenericAddress
argument_list|(
name|inMAPs
operator|.
name|getFaultTo
argument_list|()
argument_list|)
condition|)
block|{
name|ContextUtils
operator|.
name|rebaseResponse
argument_list|(
name|inMAPs
operator|.
name|getFaultTo
argument_list|()
argument_list|,
name|inMAPs
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Get the starting point MAPs (either empty or those set explicitly      * by the application on the binding provider request context).      *      * @param message the current message      * @param isProviderContext true if the binding provider request context      * available to the client application as opposed to the message context      * visible to handlers      * @param isOutbound true iff the message is outbound      * @return AddressingProperties retrieved MAPs      */
specifier|private
name|AddressingPropertiesImpl
name|getMAPs
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|isProviderContext
parameter_list|,
name|boolean
name|isOutbound
parameter_list|)
block|{
name|AddressingPropertiesImpl
name|maps
init|=
literal|null
decl_stmt|;
name|maps
operator|=
name|ContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
name|isProviderContext
argument_list|,
name|isOutbound
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"MAPs retrieved from message {0}"
argument_list|,
name|maps
argument_list|)
expr_stmt|;
if|if
condition|(
name|maps
operator|==
literal|null
operator|&&
name|isProviderContext
condition|)
block|{
name|maps
operator|=
operator|new
name|AddressingPropertiesImpl
argument_list|()
expr_stmt|;
block|}
return|return
name|maps
return|;
block|}
comment|/**      * Validate incoming MAPs      * @param maps the incoming MAPs      * @param message the current message      * @return true if incoming MAPs are valid      * @pre inbound message, not requestor      */
specifier|private
name|boolean
name|validateIncomingMAPs
parameter_list|(
name|AddressingProperties
name|maps
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|boolean
name|valid
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|maps
operator|!=
literal|null
condition|)
block|{
comment|//WSAB spec, section 4.2 validation (SOAPAction must match action
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|s
init|=
name|headers
operator|==
literal|null
condition|?
literal|null
else|:
name|headers
operator|.
name|get
argument_list|(
name|Names
operator|.
name|SOAP_ACTION_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
operator|&&
name|headers
operator|!=
literal|null
condition|)
block|{
name|s
operator|=
name|headers
operator|.
name|get
argument_list|(
name|Names
operator|.
name|SOAP_ACTION_HEADER
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|s
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|sa
init|=
name|s
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|sa
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|sa
operator|=
name|sa
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|sa
operator|.
name|lastIndexOf
argument_list|(
literal|'"'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|sa
argument_list|)
operator|&&
operator|!
name|sa
operator|.
name|equals
argument_list|(
name|maps
operator|.
name|getAction
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
comment|//don't match, must send fault back....
name|String
name|reason
init|=
name|BUNDLE
operator|.
name|getString
argument_list|(
literal|"INVALID_SOAPACTION_MESSAGE"
argument_list|)
decl_stmt|;
name|ContextUtils
operator|.
name|storeMAPFaultName
argument_list|(
name|Names
operator|.
name|ACTION_MISMATCH_NAME
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|ContextUtils
operator|.
name|storeMAPFaultReason
argument_list|(
name|reason
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|maps
operator|.
name|getAction
argument_list|()
operator|==
literal|null
operator|||
name|maps
operator|.
name|getAction
argument_list|()
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|reason
init|=
name|BUNDLE
operator|.
name|getString
argument_list|(
literal|"MISSING_ACTION_MESSAGE"
argument_list|)
decl_stmt|;
name|ContextUtils
operator|.
name|storeMAPFaultName
argument_list|(
name|Names
operator|.
name|HEADER_REQUIRED_NAME
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|ContextUtils
operator|.
name|storeMAPFaultReason
argument_list|(
name|reason
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|allowDuplicates
condition|)
block|{
name|AttributedURIType
name|messageID
init|=
name|maps
operator|.
name|getMessageID
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageID
operator|!=
literal|null
operator|&&
name|messageIDs
operator|.
name|put
argument_list|(
name|messageID
operator|.
name|getValue
argument_list|()
argument_list|,
name|messageID
operator|.
name|getValue
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"DUPLICATE_MESSAGE_ID_MSG"
argument_list|,
name|messageID
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|reason
init|=
name|BUNDLE
operator|.
name|getString
argument_list|(
literal|"DUPLICATE_MESSAGE_ID_MSG"
argument_list|)
decl_stmt|;
name|String
name|l7dReason
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|reason
argument_list|,
name|messageID
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|ContextUtils
operator|.
name|storeMAPFaultName
argument_list|(
name|Names
operator|.
name|DUPLICATE_MESSAGE_ID_NAME
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|ContextUtils
operator|.
name|storeMAPFaultReason
argument_list|(
name|l7dReason
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|usingAddressingAdvisory
condition|)
block|{
name|String
name|reason
init|=
name|BUNDLE
operator|.
name|getString
argument_list|(
literal|"MISSING_ACTION_MESSAGE"
argument_list|)
decl_stmt|;
name|ContextUtils
operator|.
name|storeMAPFaultName
argument_list|(
name|Names
operator|.
name|HEADER_REQUIRED_NAME
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|ContextUtils
operator|.
name|storeMAPFaultReason
argument_list|(
name|reason
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|valid
return|;
block|}
block|}
end_class

end_unit

