begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_comment
comment|// importation convention: if the same class name is used for
end_comment

begin_comment
comment|// 2005/08 and 2004/08, then the former version is imported
end_comment

begin_comment
comment|// and the latter is fully qualified when used
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AttributedURIType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|RelatesToType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200408
operator|.
name|AttributedURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200408
operator|.
name|Relationship
import|;
end_import

begin_comment
comment|/**  * This class is responsible for transforming between the native   * WS-Addressing schema version (i.e. 2005/08) and exposed  * version (currently may be 2005/08 or 2004/08).  *<p>  * The native version is that used throughout the stack, were the  * WS-A types are represented via the JAXB generated types for the  * 2005/08 schema.  *<p>  * The exposed version is that used when the WS-A types are   * externalized, i.e. are encoded in the headers of outgoing   * messages. For outgoing requests, the exposed version is   * determined from configuration. For outgoing responses, the  * exposed version is determined by the exposed version of  * the corresponding request.  *<p>  * The motivation for using different native and exposed types  * is usually to facilitate a WS-* standard based on an earlier   * version of WS-Adressing (for example WS-RM depends on the  * 2004/08 version).  */
end_comment

begin_class
specifier|public
class|class
name|VersionTransformer
extends|extends
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
block|{
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|QName
argument_list|>
name|HEADERS
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|VersionTransformer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|MAPCodec
name|codec
decl_stmt|;
comment|/**      * Constructor.      *       * @param mapCodec the MAPCodec to use      */
specifier|public
name|VersionTransformer
parameter_list|(
name|MAPCodec
name|mapCodec
parameter_list|)
block|{
name|codec
operator|=
name|mapCodec
expr_stmt|;
block|}
comment|/**      * Encode message in exposed version.      *       * @param exposeAs specifies the WS-Addressing version to expose      * @param value the value to encode      * @param localName the localName for the header       * @param clz the class      * @param header the SOAP header element      * @param marshaller the JAXB marshaller to use      */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|encodeAsExposed
parameter_list|(
name|String
name|exposeAs
parameter_list|,
name|T
name|value
parameter_list|,
name|String
name|localName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clz
parameter_list|,
name|Element
name|header
parameter_list|,
name|Marshaller
name|marshaller
parameter_list|)
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|NATIVE_VERSION
operator|.
name|equals
argument_list|(
name|exposeAs
argument_list|)
condition|)
block|{
name|codec
operator|.
name|encodeMAP
argument_list|(
name|value
argument_list|,
operator|new
name|QName
argument_list|(
name|exposeAs
argument_list|,
name|localName
argument_list|)
argument_list|,
name|clz
argument_list|,
name|header
argument_list|,
name|marshaller
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
operator|.
name|equals
argument_list|(
name|exposeAs
argument_list|)
condition|)
block|{
if|if
condition|(
name|AttributedURIType
operator|.
name|class
operator|.
name|equals
argument_list|(
name|clz
argument_list|)
condition|)
block|{
name|codec
operator|.
name|encodeMAP
argument_list|(
name|convert
argument_list|(
operator|(
name|AttributedURIType
operator|)
name|value
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
name|exposeAs
argument_list|,
name|localName
argument_list|)
argument_list|,
name|AttributedURI
operator|.
name|class
argument_list|,
name|header
argument_list|,
name|marshaller
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|EndpointReferenceType
operator|.
name|class
operator|.
name|equals
argument_list|(
name|clz
argument_list|)
condition|)
block|{
name|codec
operator|.
name|encodeMAP
argument_list|(
name|convert
argument_list|(
operator|(
name|EndpointReferenceType
operator|)
name|value
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
name|exposeAs
argument_list|,
name|localName
argument_list|)
argument_list|,
name|Names200408
operator|.
name|EPR_TYPE
argument_list|,
name|header
argument_list|,
name|marshaller
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RelatesToType
operator|.
name|class
operator|.
name|equals
argument_list|(
name|clz
argument_list|)
condition|)
block|{
name|codec
operator|.
name|encodeMAP
argument_list|(
name|convert
argument_list|(
operator|(
name|RelatesToType
operator|)
name|value
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
name|exposeAs
argument_list|,
name|localName
argument_list|)
argument_list|,
name|Relationship
operator|.
name|class
argument_list|,
name|header
argument_list|,
name|marshaller
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Decodes a MAP from a exposed version.      *      * @param encodedAs specifies the encoded version      * @param clz the class      * @param headerElement the SOAP header element      * @param marshaller the JAXB marshaller to use      * @return the decoded value      */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|decodeAsNative
parameter_list|(
name|String
name|encodedAs
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clz
parameter_list|,
name|Element
name|headerElement
parameter_list|,
name|Unmarshaller
name|unmarshaller
parameter_list|)
throws|throws
name|JAXBException
block|{
name|T
name|ret
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"decodeAsNative: encodedAs: "
operator|+
name|encodedAs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"                class: "
operator|+
name|clz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|NATIVE_VERSION
operator|.
name|equals
argument_list|(
name|encodedAs
argument_list|)
condition|)
block|{
name|ret
operator|=
name|codec
operator|.
name|decodeMAP
argument_list|(
name|clz
argument_list|,
name|headerElement
argument_list|,
name|unmarshaller
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
operator|.
name|equals
argument_list|(
name|encodedAs
argument_list|)
condition|)
block|{
if|if
condition|(
name|AttributedURIType
operator|.
name|class
operator|.
name|equals
argument_list|(
name|clz
argument_list|)
condition|)
block|{
return|return
name|clz
operator|.
name|cast
argument_list|(
name|convert
argument_list|(
name|codec
operator|.
name|decodeMAP
argument_list|(
name|AttributedURI
operator|.
name|class
argument_list|,
name|headerElement
argument_list|,
name|unmarshaller
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|EndpointReferenceType
operator|.
name|class
operator|.
name|equals
argument_list|(
name|clz
argument_list|)
condition|)
block|{
return|return
name|clz
operator|.
name|cast
argument_list|(
name|convert
argument_list|(
name|codec
operator|.
name|decodeMAP
argument_list|(
name|Names200408
operator|.
name|EPR_TYPE
argument_list|,
name|headerElement
argument_list|,
name|unmarshaller
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|RelatesToType
operator|.
name|class
operator|.
name|equals
argument_list|(
name|clz
argument_list|)
condition|)
block|{
return|return
name|clz
operator|.
name|cast
argument_list|(
name|convert
argument_list|(
name|codec
operator|.
name|decodeMAP
argument_list|(
name|Relationship
operator|.
name|class
argument_list|,
name|headerElement
argument_list|,
name|unmarshaller
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Augment the set of headers understood by the protocol binding      * with the 2004/08 header QNames.      */
static|static
block|{
name|Set
argument_list|<
name|QName
argument_list|>
name|headers
init|=
operator|new
name|HashSet
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|addAll
argument_list|(
name|Names
operator|.
name|HEADERS
argument_list|)
expr_stmt|;
name|Names200408
operator|.
name|addHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|HEADERS
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Holder for 2004/08 Names      */
specifier|public
specifier|static
specifier|final
class|class
name|Names200408
extends|extends
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|Names200408
block|{
specifier|protected
name|Names200408
parameter_list|()
block|{         }
comment|/**          * Adds 2004/08 headers to set.          *           * @param headers set of headers          */
specifier|private
specifier|static
name|void
name|addHeaders
parameter_list|(
name|Set
argument_list|<
name|QName
argument_list|>
name|headers
parameter_list|)
block|{
name|headers
operator|.
name|add
argument_list|(
operator|new
name|QName
argument_list|(
name|WSA_NAMESPACE_NAME
argument_list|,
name|Names
operator|.
name|WSA_FROM_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|new
name|QName
argument_list|(
name|WSA_NAMESPACE_NAME
argument_list|,
name|Names
operator|.
name|WSA_TO_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|new
name|QName
argument_list|(
name|WSA_NAMESPACE_NAME
argument_list|,
name|Names
operator|.
name|WSA_REPLYTO_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|new
name|QName
argument_list|(
name|WSA_NAMESPACE_NAME
argument_list|,
name|Names
operator|.
name|WSA_FAULTTO_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|new
name|QName
argument_list|(
name|WSA_NAMESPACE_NAME
argument_list|,
name|Names
operator|.
name|WSA_ACTION_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|new
name|QName
argument_list|(
name|WSA_NAMESPACE_NAME
argument_list|,
name|Names
operator|.
name|WSA_MESSAGEID_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

