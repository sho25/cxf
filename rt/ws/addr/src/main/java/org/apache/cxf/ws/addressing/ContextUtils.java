begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBindingConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|TwoStageMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ConduitSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|NullConduitSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|PreexistingConduitSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|OutgoingChainInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingFaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|Extensible
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|OneShotAsyncExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|SynchronousExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|WorkQueueManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|ASYNC_POST_RESPONSE_DISPATCH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|REQUESTOR_ROLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
operator|.
name|CLIENT_ADDRESSING_PROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
operator|.
name|CLIENT_ADDRESSING_PROPERTIES_INBOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
operator|.
name|CLIENT_ADDRESSING_PROPERTIES_OUTBOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
operator|.
name|SERVER_ADDRESSING_PROPERTIES_INBOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
operator|.
name|SERVER_ADDRESSING_PROPERTIES_OUTBOUND
import|;
end_import

begin_comment
comment|/**  * Holder for utility methods relating to contexts.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ContextUtils
block|{
specifier|public
specifier|static
specifier|final
name|ObjectFactory
name|WSA_OBJECT_FACTORY
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|EndpointReferenceType
name|NONE_ENDPOINT_REFERENCE
init|=
name|EndpointReferenceUtils
operator|.
name|getEndpointReference
argument_list|(
name|Names
operator|.
name|WSA_NONE_ADDRESS
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|MessageInfo
argument_list|,
name|String
argument_list|>
name|ACTION_MAP
init|=
operator|new
name|TwoStageMap
argument_list|<
name|MessageInfo
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ContextUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Used to fabricate a Uniform Resource Name from a UUID string      */
specifier|private
specifier|static
specifier|final
name|String
name|URN_UUID
init|=
literal|"urn:uuid:"
decl_stmt|;
specifier|private
specifier|static
name|JAXBContext
name|jaxbContext
decl_stmt|;
comment|/**      * Used by MAPAggregator to cache bad MAP fault name      */
specifier|private
specifier|static
specifier|final
name|String
name|MAP_FAULT_NAME_PROPERTY
init|=
literal|"org.apache.cxf.ws.addressing.map.fault.name"
decl_stmt|;
comment|/**      * Used by MAPAggregator to cache bad MAP fault reason      */
specifier|private
specifier|static
specifier|final
name|String
name|MAP_FAULT_REASON_PROPERTY
init|=
literal|"org.apache.cxf.ws.addressing.map.fault.reason"
decl_stmt|;
comment|/**      * Indicates a partial response has already been sent      */
specifier|private
specifier|static
specifier|final
name|String
name|PARTIAL_REPONSE_SENT_PROPERTY
init|=
literal|"org.apache.cxf.ws.addressing.partial.response.sent"
decl_stmt|;
comment|/**     * Prevents instantiation.     */
specifier|private
name|ContextUtils
parameter_list|()
block|{     }
comment|/**     * Determine if message is outbound.     *     * @param message the current Message     * @return true iff the message direction is outbound     */
specifier|public
specifier|static
name|boolean
name|isOutbound
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
return|return
name|message
operator|!=
literal|null
operator|&&
name|exchange
operator|!=
literal|null
operator|&&
operator|(
name|message
operator|==
name|exchange
operator|.
name|getOutMessage
argument_list|()
operator|||
name|message
operator|==
name|exchange
operator|.
name|getOutFaultMessage
argument_list|()
operator|)
return|;
block|}
comment|/**     * Determine if message is fault.     *     * @param message the current Message     * @return true iff the message is a fault     */
specifier|public
specifier|static
name|boolean
name|isFault
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|message
operator|!=
literal|null
operator|&&
name|message
operator|.
name|getExchange
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|message
operator|==
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getInFaultMessage
argument_list|()
operator|||
name|message
operator|==
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutFaultMessage
argument_list|()
operator|)
return|;
block|}
comment|/**     * Determine if current messaging role is that of requestor.     *     * @param message the current Message     * @return true if the current messaging role is that of requestor     */
specifier|public
specifier|static
name|boolean
name|isRequestor
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Boolean
name|requestor
init|=
operator|(
name|Boolean
operator|)
name|message
operator|.
name|get
argument_list|(
name|REQUESTOR_ROLE
argument_list|)
decl_stmt|;
return|return
name|requestor
operator|!=
literal|null
operator|&&
name|requestor
operator|.
name|booleanValue
argument_list|()
return|;
block|}
comment|/**      * Get appropriate property name for message addressing properties.      *      * @param isProviderContext true if the binding provider request context       * available to the client application as opposed to the message context       * visible to handlers      * @param isRequestor true if the current messaging role is that of      * requestor      * @param isOutbound true if the message is outbound      * @return the property name to use when caching the MAPs in the context      */
specifier|public
specifier|static
name|String
name|getMAPProperty
parameter_list|(
name|boolean
name|isRequestor
parameter_list|,
name|boolean
name|isProviderContext
parameter_list|,
name|boolean
name|isOutbound
parameter_list|)
block|{
return|return
name|isRequestor
condition|?
name|isProviderContext
condition|?
name|CLIENT_ADDRESSING_PROPERTIES
else|:
name|isOutbound
condition|?
name|CLIENT_ADDRESSING_PROPERTIES_OUTBOUND
else|:
name|CLIENT_ADDRESSING_PROPERTIES_INBOUND
else|:
name|isOutbound
condition|?
name|SERVER_ADDRESSING_PROPERTIES_OUTBOUND
else|:
name|SERVER_ADDRESSING_PROPERTIES_INBOUND
return|;
block|}
comment|/**      * Store MAPs in the message.      *      * @param message the current message      * @param isOutbound true if the message is outbound      */
specifier|public
specifier|static
name|void
name|storeMAPs
parameter_list|(
name|AddressingProperties
name|maps
parameter_list|,
name|Message
name|message
parameter_list|,
name|boolean
name|isOutbound
parameter_list|)
block|{
name|storeMAPs
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|isOutbound
argument_list|,
name|isRequestor
argument_list|(
name|message
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Store MAPs in the message.      *      * @param maps the MAPs to store      * @param message the current message      * @param isOutbound true if the message is outbound      * @param isRequestor true if the current messaging role is that of      * requestor      * @param handler true if HANDLER scope, APPLICATION scope otherwise      */
specifier|public
specifier|static
name|void
name|storeMAPs
parameter_list|(
name|AddressingProperties
name|maps
parameter_list|,
name|Message
name|message
parameter_list|,
name|boolean
name|isOutbound
parameter_list|,
name|boolean
name|isRequestor
parameter_list|)
block|{
name|storeMAPs
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|isOutbound
argument_list|,
name|isRequestor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Store MAPs in the message.      *      * @param maps the MAPs to store      * @param message the current message      * @param isOutbound true if the message is outbound      * @param isRequestor true if the current messaging role is that of      * requestor      * @param handler true if HANDLER scope, APPLICATION scope otherwise      * @param isProviderContext true if the binding provider request context       */
specifier|public
specifier|static
name|void
name|storeMAPs
parameter_list|(
name|AddressingProperties
name|maps
parameter_list|,
name|Message
name|message
parameter_list|,
name|boolean
name|isOutbound
parameter_list|,
name|boolean
name|isRequestor
parameter_list|,
name|boolean
name|isProviderContext
parameter_list|)
block|{
if|if
condition|(
name|maps
operator|!=
literal|null
condition|)
block|{
name|String
name|mapProperty
init|=
name|getMAPProperty
argument_list|(
name|isRequestor
argument_list|,
name|isProviderContext
argument_list|,
name|isOutbound
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"associating MAPs with context property {0}"
argument_list|,
name|mapProperty
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|mapProperty
argument_list|,
name|maps
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param message the current message      * @param isProviderContext true if the binding provider request context      * available to the client application as opposed to the message context      * visible to handlers      * @param isOutbound true if the message is outbound      * @return the current addressing properties      */
specifier|public
specifier|static
name|AddressingPropertiesImpl
name|retrieveMAPs
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|isProviderContext
parameter_list|,
name|boolean
name|isOutbound
parameter_list|)
block|{
return|return
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
name|isProviderContext
argument_list|,
name|isOutbound
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * @param message the current message      * @param isProviderContext true if the binding provider request context      * available to the client application as opposed to the message context      * visible to handlers      * @param isOutbound true if the message is outbound      * @param warnIfMissing log a warning  message if properties cannot be retrieved      * @return the current addressing properties      */
specifier|public
specifier|static
name|AddressingPropertiesImpl
name|retrieveMAPs
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|isProviderContext
parameter_list|,
name|boolean
name|isOutbound
parameter_list|,
name|boolean
name|warnIfMissing
parameter_list|)
block|{
name|boolean
name|isRequestor
init|=
name|ContextUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|String
name|mapProperty
init|=
name|ContextUtils
operator|.
name|getMAPProperty
argument_list|(
name|isProviderContext
argument_list|,
name|isRequestor
argument_list|,
name|isOutbound
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"retrieving MAPs from context property {0}"
argument_list|,
name|mapProperty
argument_list|)
expr_stmt|;
name|AddressingPropertiesImpl
name|maps
init|=
operator|(
name|AddressingPropertiesImpl
operator|)
name|message
operator|.
name|get
argument_list|(
name|mapProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|maps
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"current MAPs {0}"
argument_list|,
name|maps
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isProviderContext
condition|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|warnIfMissing
condition|?
name|Level
operator|.
name|WARNING
else|:
name|Level
operator|.
name|FINE
argument_list|,
literal|"MAPS_RETRIEVAL_FAILURE_MSG"
argument_list|)
expr_stmt|;
block|}
return|return
name|maps
return|;
block|}
comment|/**      * Helper method to get an attributed URI.      *      * @param uri the URI      * @return an AttributedURIType encapsulating the URI      */
specifier|public
specifier|static
name|AttributedURIType
name|getAttributedURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|AttributedURIType
name|attributedURI
init|=
name|WSA_OBJECT_FACTORY
operator|.
name|createAttributedURIType
argument_list|()
decl_stmt|;
name|attributedURI
operator|.
name|setValue
argument_list|(
name|uri
argument_list|)
expr_stmt|;
return|return
name|attributedURI
return|;
block|}
comment|/**      * Helper method to get a RealtesTo instance.      *      * @param uri the related URI      * @return a RelatesToType encapsulating the URI      */
specifier|public
specifier|static
name|RelatesToType
name|getRelatesTo
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|RelatesToType
name|relatesTo
init|=
name|WSA_OBJECT_FACTORY
operator|.
name|createRelatesToType
argument_list|()
decl_stmt|;
name|relatesTo
operator|.
name|setValue
argument_list|(
name|uri
argument_list|)
expr_stmt|;
return|return
name|relatesTo
return|;
block|}
comment|/**      * Helper method to determine if an EPR address is generic (either null,      * none or anonymous).      *      * @param ref the EPR under test      * @return true if the address is generic      */
specifier|public
specifier|static
name|boolean
name|isGenericAddress
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|)
block|{
return|return
name|ref
operator|==
literal|null
operator|||
name|ref
operator|.
name|getAddress
argument_list|()
operator|==
literal|null
operator|||
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
operator|.
name|equals
argument_list|(
name|ref
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|||
name|Names
operator|.
name|WSA_NONE_ADDRESS
operator|.
name|equals
argument_list|(
name|ref
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Helper method to determine if an MAPs Action is empty (a null action      * is considered empty, whereas a zero length action suppresses      * the propagation of the Action property).      *      * @param ref the MAPs Action under test      * @return true if the Action is empty      */
specifier|public
specifier|static
name|boolean
name|hasEmptyAction
parameter_list|(
name|AddressingProperties
name|maps
parameter_list|)
block|{
name|boolean
name|empty
init|=
name|maps
operator|.
name|getAction
argument_list|()
operator|==
literal|null
decl_stmt|;
if|if
condition|(
name|maps
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
operator|&&
name|maps
operator|.
name|getAction
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|maps
operator|.
name|setAction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|empty
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|empty
return|;
block|}
comment|/**      * Rebase response on replyTo      *       * @param reference the replyTo reference      * @param inMAPs the inbound MAPs      * @param inMessage the current message      */
specifier|public
specifier|static
name|void
name|rebaseResponse
parameter_list|(
name|EndpointReferenceType
name|reference
parameter_list|,
name|AddressingProperties
name|inMAPs
parameter_list|,
specifier|final
name|Message
name|inMessage
parameter_list|)
block|{
name|String
name|namespaceURI
init|=
name|inMAPs
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|retrievePartialResponseSent
argument_list|(
name|inMessage
argument_list|)
condition|)
block|{
name|storePartialResponseSent
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|inMessage
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|Message
name|fullResponse
init|=
name|exchange
operator|.
name|getOutMessage
argument_list|()
decl_stmt|;
name|Message
name|partialResponse
init|=
name|createMessage
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|ensurePartialResponseMAPs
argument_list|(
name|partialResponse
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
comment|// ensure the inbound MAPs are available in the partial response
comment|// message (used to determine relatesTo etc.)
name|propogateReceivedMAPs
argument_list|(
name|inMAPs
argument_list|,
name|partialResponse
argument_list|)
expr_stmt|;
name|partialResponse
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PARTIAL_RESPONSE_MESSAGE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|Destination
name|target
init|=
name|inMessage
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|exchange
operator|.
name|setOutMessage
argument_list|(
name|partialResponse
argument_list|)
expr_stmt|;
name|Conduit
name|backChannel
init|=
name|target
operator|.
name|getBackChannel
argument_list|(
name|inMessage
argument_list|,
name|partialResponse
argument_list|,
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|backChannel
operator|!=
literal|null
condition|)
block|{
comment|// set up interceptor chains and send message
name|InterceptorChain
name|chain
init|=
name|fullResponse
operator|!=
literal|null
condition|?
name|fullResponse
operator|.
name|getInterceptorChain
argument_list|()
else|:
name|OutgoingChainInterceptor
operator|.
name|getOutInterceptorChain
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|partialResponse
operator|.
name|setInterceptorChain
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|ConduitSelector
operator|.
name|class
argument_list|,
operator|new
name|PreexistingConduitSelector
argument_list|(
name|backChannel
argument_list|,
name|exchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|chain
operator|!=
literal|null
operator|&&
operator|!
name|chain
operator|.
name|doIntercept
argument_list|(
name|partialResponse
argument_list|)
operator|&&
name|partialResponse
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|partialResponse
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|instanceof
name|Fault
condition|)
block|{
throw|throw
operator|(
name|Fault
operator|)
name|partialResponse
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|partialResponse
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|chain
operator|!=
literal|null
condition|)
block|{
name|chain
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|exchange
operator|.
name|put
argument_list|(
name|ConduitSelector
operator|.
name|class
argument_list|,
operator|new
name|NullConduitSelector
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fullResponse
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setOutMessage
argument_list|(
name|fullResponse
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fullResponse
operator|=
name|createMessage
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setOutMessage
argument_list|(
name|fullResponse
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|retrieveAsyncPostResponseDispatch
argument_list|(
name|inMessage
argument_list|)
condition|)
block|{
comment|// async service invocation required *after* a response
comment|// has been sent (i.e. to a oneway, or a partial response
comment|// to a decoupled twoway)
comment|// pause dispatch on current thread ...
name|inMessage
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|pause
argument_list|()
expr_stmt|;
comment|// ... and resume on executor thread
name|getExecutor
argument_list|(
name|inMessage
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|inMessage
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|resume
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SERVER_TRANSPORT_REBASE_FAILURE_MSG"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Propogate inbound MAPs onto full reponse& fault messages.      *       * @param inMAPs the inbound MAPs      * @param exchange the current Exchange      */
specifier|public
specifier|static
name|void
name|propogateReceivedMAPs
parameter_list|(
name|AddressingProperties
name|inMAPs
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getOutMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
name|exchange
operator|.
name|setOutMessage
argument_list|(
name|createMessage
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|propogateReceivedMAPs
argument_list|(
name|inMAPs
argument_list|,
name|exchange
operator|.
name|getOutMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getOutFaultMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
name|exchange
operator|.
name|setOutFaultMessage
argument_list|(
name|createMessage
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|propogateReceivedMAPs
argument_list|(
name|inMAPs
argument_list|,
name|exchange
operator|.
name|getOutFaultMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Propogate inbound MAPs onto reponse message if applicable      * (not applicable for oneways).      *       * @param inMAPs the inbound MAPs      * @param responseMessage      */
specifier|private
specifier|static
name|void
name|propogateReceivedMAPs
parameter_list|(
name|AddressingProperties
name|inMAPs
parameter_list|,
name|Message
name|responseMessage
parameter_list|)
block|{
if|if
condition|(
name|responseMessage
operator|!=
literal|null
condition|)
block|{
name|storeMAPs
argument_list|(
name|inMAPs
argument_list|,
name|responseMessage
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Construct and store MAPs for partial response.      *       * @param partialResponse the partial response message      * @param namespaceURI the current namespace URI      */
specifier|private
specifier|static
name|void
name|ensurePartialResponseMAPs
parameter_list|(
name|Message
name|partialResponse
parameter_list|,
name|String
name|namespaceURI
parameter_list|)
block|{
comment|// ensure there is a MAPs instance available for the outbound
comment|// partial response that contains appropriate To and ReplyTo
comment|// properties (i.e. anonymous& none respectively)
name|AddressingPropertiesImpl
name|maps
init|=
operator|new
name|AddressingPropertiesImpl
argument_list|()
decl_stmt|;
name|maps
operator|.
name|setTo
argument_list|(
name|EndpointReferenceUtils
operator|.
name|getAnonymousEndpointReference
argument_list|()
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setReplyTo
argument_list|(
name|WSA_OBJECT_FACTORY
operator|.
name|createEndpointReferenceType
argument_list|()
argument_list|)
expr_stmt|;
name|maps
operator|.
name|getReplyTo
argument_list|()
operator|.
name|setAddress
argument_list|(
name|getAttributedURI
argument_list|(
name|Names
operator|.
name|WSA_NONE_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setAction
argument_list|(
name|getAttributedURI
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|maps
operator|.
name|exposeAs
argument_list|(
name|namespaceURI
argument_list|)
expr_stmt|;
name|storeMAPs
argument_list|(
name|maps
argument_list|,
name|partialResponse
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the Executor for this invocation.      * @param endpoint      * @return      */
specifier|private
specifier|static
name|Executor
name|getExecutor
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
block|{
name|Endpoint
name|endpoint
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Executor
name|executor
init|=
name|endpoint
operator|.
name|getService
argument_list|()
operator|.
name|getExecutor
argument_list|()
decl_stmt|;
if|if
condition|(
name|executor
operator|==
literal|null
operator|||
name|SynchronousExecutor
operator|.
name|isA
argument_list|(
name|executor
argument_list|)
condition|)
block|{
comment|// need true asynchrony
name|Bus
name|bus
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|WorkQueueManager
name|workQueueManager
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|WorkQueueManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Executor
name|autoWorkQueue
init|=
name|workQueueManager
operator|.
name|getNamedWorkQueue
argument_list|(
literal|"ws-addressing"
argument_list|)
decl_stmt|;
name|executor
operator|=
name|autoWorkQueue
operator|!=
literal|null
condition|?
name|autoWorkQueue
else|:
name|workQueueManager
operator|.
name|getAutomaticWorkQueue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|executor
operator|=
name|OneShotAsyncExecutor
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
block|}
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Executor
operator|.
name|class
argument_list|,
name|executor
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
comment|/**      * Store bad MAP fault name in the message.      *      * @param faultName the fault name to store      * @param message the current message      */
specifier|public
specifier|static
name|void
name|storeMAPFaultName
parameter_list|(
name|String
name|faultName
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|message
operator|.
name|put
argument_list|(
name|MAP_FAULT_NAME_PROPERTY
argument_list|,
name|faultName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieve MAP fault name from the message.      *      * @param message the current message      * @returned the retrieved fault name      */
specifier|public
specifier|static
name|String
name|retrieveMAPFaultName
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|MAP_FAULT_NAME_PROPERTY
argument_list|)
return|;
block|}
comment|/**      * Store MAP fault reason in the message.      *      * @param reason the fault reason to store      * @param message the current message      */
specifier|public
specifier|static
name|void
name|storeMAPFaultReason
parameter_list|(
name|String
name|reason
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|message
operator|.
name|put
argument_list|(
name|MAP_FAULT_REASON_PROPERTY
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieve MAP fault reason from the message.      *      * @param message the current message      * @returned the retrieved fault reason      */
specifier|public
specifier|static
name|String
name|retrieveMAPFaultReason
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|MAP_FAULT_REASON_PROPERTY
argument_list|)
return|;
block|}
comment|/**      * Store an indication that a partial response has been sent.      * Relavant if *both* the replyTo& faultTo are decoupled,      * and a fault occurs, then we would already have sent the      * partial response (pre-dispatch) for the replyTo, so      * no need to send again.      *      * @param message the current message      */
specifier|public
specifier|static
name|void
name|storePartialResponseSent
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|message
operator|.
name|put
argument_list|(
name|PARTIAL_REPONSE_SENT_PROPERTY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieve indication that a partial response has been sent.      *      * @param message the current message      * @returned the retrieved indication that a partial response      * has been sent      */
specifier|public
specifier|static
name|boolean
name|retrievePartialResponseSent
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Boolean
name|ret
init|=
operator|(
name|Boolean
operator|)
name|message
operator|.
name|get
argument_list|(
name|PARTIAL_REPONSE_SENT_PROPERTY
argument_list|)
decl_stmt|;
return|return
name|ret
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|booleanValue
argument_list|()
return|;
block|}
comment|/**      * Store indication that a deferred uncorrelated message abort is      * supported      *      * @param message the current message      */
specifier|public
specifier|static
name|void
name|storeDeferUncorrelatedMessageAbort
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|.
name|getExchange
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
literal|"defer.uncorrelated.message.abort"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Retrieve indication that a deferred uncorrelated message abort is      * supported      *      * @param message the current message      * @returned the retrieved indication       */
specifier|public
specifier|static
name|boolean
name|retrieveDeferUncorrelatedMessageAbort
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Boolean
name|ret
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|!=
literal|null
condition|?
operator|(
name|Boolean
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
literal|"defer.uncorrelated.message.abort"
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
name|ret
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|booleanValue
argument_list|()
return|;
block|}
comment|/**      * Store indication that a deferred uncorrelated message abort should      * occur      *      * @param message the current message      */
specifier|public
specifier|static
name|void
name|storeDeferredUncorrelatedMessageAbort
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|.
name|getExchange
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
literal|"deferred.uncorrelated.message.abort"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Retrieve indication that a deferred uncorrelated message abort should      * occur.      *      * @param message the current message      * @returned the retrieved indication       */
specifier|public
specifier|static
name|boolean
name|retrieveDeferredUncorrelatedMessageAbort
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Boolean
name|ret
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|!=
literal|null
condition|?
operator|(
name|Boolean
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
literal|"deferred.uncorrelated.message.abort"
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
name|ret
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|booleanValue
argument_list|()
return|;
block|}
comment|/**      * Retrieve indication that an async post-response service invocation      * is required.      *       * @param message the current message      * @returned the retrieved indication that an async post-response service      * invocation is required.      */
specifier|public
specifier|static
name|boolean
name|retrieveAsyncPostResponseDispatch
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Boolean
name|ret
init|=
operator|(
name|Boolean
operator|)
name|message
operator|.
name|get
argument_list|(
name|ASYNC_POST_RESPONSE_DISPATCH
argument_list|)
decl_stmt|;
return|return
name|ret
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|booleanValue
argument_list|()
return|;
block|}
comment|/**      * Retrieve a JAXBContext for marshalling and unmarshalling JAXB generated      * types.      *      * @return a JAXBContext       */
specifier|public
specifier|static
name|JAXBContext
name|getJAXBContext
parameter_list|()
throws|throws
name|JAXBException
block|{
synchronized|synchronized
init|(
name|ContextUtils
operator|.
name|class
init|)
block|{
if|if
condition|(
name|jaxbContext
operator|==
literal|null
condition|)
block|{
name|jaxbContext
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|WSA_OBJECT_FACTORY
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|WSA_OBJECT_FACTORY
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jaxbContext
return|;
block|}
comment|/**      * Set the encapsulated JAXBContext (used by unit tests).      *       * @param ctx JAXBContext       */
specifier|public
specifier|static
name|void
name|setJAXBContext
parameter_list|(
name|JAXBContext
name|ctx
parameter_list|)
throws|throws
name|JAXBException
block|{
synchronized|synchronized
init|(
name|ContextUtils
operator|.
name|class
init|)
block|{
name|jaxbContext
operator|=
name|ctx
expr_stmt|;
block|}
block|}
comment|/**      * @return a generated UUID      */
specifier|public
specifier|static
name|String
name|generateUUID
parameter_list|()
block|{
return|return
name|URN_UUID
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
return|;
block|}
comment|/**      * Retreive Conduit from Exchange if not already available      *       * @param conduit the current value for the Conduit      * @param message the current message      * @return the Conduit if available      */
specifier|public
specifier|static
name|Conduit
name|getConduit
parameter_list|(
name|Conduit
name|conduit
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|conduit
operator|==
literal|null
condition|)
block|{
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|conduit
operator|=
name|exchange
operator|!=
literal|null
condition|?
name|exchange
operator|.
name|getConduit
argument_list|(
name|message
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
return|return
name|conduit
return|;
block|}
comment|/**      * Construct the Action URI.      *       * @param message the current message      * @return the Action URI      */
specifier|public
specifier|static
name|AttributedURIType
name|getAction
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|String
name|action
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Determining action"
argument_list|)
expr_stmt|;
name|Exception
name|fault
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// REVISIT: add support for @{Fault}Action annotation (generated
comment|// from the wsaw:Action WSDL element). For the moment we just
comment|// pick up the wsaw:Action attribute by walking the WSDL model
comment|// directly
name|action
operator|=
name|getActionFromServiceModel
argument_list|(
name|message
argument_list|,
name|fault
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"action: "
operator|+
name|action
argument_list|)
expr_stmt|;
return|return
name|action
operator|!=
literal|null
condition|?
name|getAttributedURI
argument_list|(
name|action
argument_list|)
else|:
literal|null
return|;
block|}
comment|/**      * Get action from service model.      *      * @param message the current message      * @param fault the fault if one is set      */
specifier|private
specifier|static
name|String
name|getActionFromServiceModel
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exception
name|fault
parameter_list|)
block|{
name|String
name|action
init|=
literal|null
decl_stmt|;
name|BindingOperationInfo
name|bindingOpInfo
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindingOpInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|bindingOpInfo
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
name|bindingOpInfo
operator|=
name|bindingOpInfo
operator|.
name|getUnwrappedOperation
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fault
operator|==
literal|null
condition|)
block|{
name|action
operator|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|SoapBindingConstants
operator|.
name|SOAP_ACTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
name|SoapOperationInfo
name|soi
init|=
name|bindingOpInfo
operator|.
name|getExtensor
argument_list|(
name|SoapOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|soi
condition|)
block|{
name|action
operator|=
name|soi
operator|.
name|getAction
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|action
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|MessageInfo
name|msgInfo
init|=
name|ContextUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|?
name|bindingOpInfo
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
else|:
name|bindingOpInfo
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|String
name|cachedAction
init|=
name|ACTION_MAP
operator|.
name|get
argument_list|(
name|msgInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedAction
operator|==
literal|null
condition|)
block|{
name|action
operator|=
name|getActionFromMessageAttributes
argument_list|(
name|msgInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
name|cachedAction
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Throwable
name|t
init|=
name|fault
operator|.
name|getCause
argument_list|()
decl_stmt|;
comment|// FaultAction attribute is not defined in
comment|// http://www.w3.org/2005/02/addressing/wsdl schema
for|for
control|(
name|BindingFaultInfo
name|bfi
range|:
name|bindingOpInfo
operator|.
name|getFaults
argument_list|()
control|)
block|{
name|FaultInfo
name|fi
init|=
name|bfi
operator|.
name|getFaultInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|fi
operator|.
name|getMessagePart
argument_list|(
literal|0
argument_list|)
operator|.
name|getTypeClass
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|fi
operator|.
name|getExtensionAttributes
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|attr
init|=
operator|(
name|String
operator|)
name|fi
operator|.
name|getExtensionAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|Names
operator|.
name|WSAW_ACTION_QNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|==
literal|null
condition|)
block|{
name|attr
operator|=
operator|(
name|String
operator|)
name|fi
operator|.
name|getExtensionAttributes
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|QName
argument_list|(
name|Names
operator|.
name|WSA_NAMESPACE_WSDL_NAME_OLD
argument_list|,
name|Names
operator|.
name|WSAW_ACTION_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
name|action
operator|=
name|attr
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"action determined from service model: "
operator|+
name|action
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
comment|/**      * Get action from attributes on MessageInfo      *      * @param bindingOpInfo the current BindingOperationInfo      * @param msgInfo the current MessageInfo      * @return the action if set      */
specifier|private
specifier|static
name|String
name|getActionFromMessageAttributes
parameter_list|(
name|MessageInfo
name|msgInfo
parameter_list|)
block|{
name|String
name|action
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|msgInfo
operator|!=
literal|null
operator|&&
name|msgInfo
operator|.
name|getExtensionAttributes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|attr
init|=
name|getAction
argument_list|(
name|msgInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|!=
literal|null
condition|)
block|{
name|action
operator|=
name|attr
expr_stmt|;
name|ACTION_MAP
operator|.
name|put
argument_list|(
name|msgInfo
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|action
return|;
block|}
specifier|public
specifier|static
name|String
name|getAction
parameter_list|(
name|Extensible
name|ext
parameter_list|)
block|{
name|Object
name|o
init|=
name|ext
operator|.
name|getExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAW_ACTION_QNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|ext
operator|.
name|getExtensionAttributes
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|QName
argument_list|(
name|Names
operator|.
name|WSA_NAMESPACE_WSDL_NAME_OLD
argument_list|,
name|Names
operator|.
name|WSAW_ACTION_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|QName
condition|)
block|{
return|return
operator|(
operator|(
name|QName
operator|)
name|o
operator|)
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
return|return
name|o
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|EndpointReferenceType
name|getNoneEndpointReference
parameter_list|()
block|{
return|return
name|NONE_ENDPOINT_REFERENCE
return|;
block|}
specifier|public
specifier|static
name|void
name|applyReferenceParam
parameter_list|(
name|EndpointReferenceType
name|toEpr
parameter_list|,
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|el
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|toEpr
operator|.
name|getReferenceParameters
argument_list|()
condition|)
block|{
name|toEpr
operator|.
name|setReferenceParameters
argument_list|(
name|WSA_OBJECT_FACTORY
operator|.
name|createReferenceParametersType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toEpr
operator|.
name|getReferenceParameters
argument_list|()
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a Binding specific Message.      *       * @param message the current message      * @return the Method from the BindingOperationInfo      */
specifier|private
specifier|static
name|Message
name|createMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Endpoint
name|ep
init|=
name|exchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Message
name|msg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ep
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
operator|new
name|MessageImpl
argument_list|()
expr_stmt|;
name|msg
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|ep
operator|.
name|getBinding
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
name|ep
operator|.
name|getBinding
argument_list|()
operator|.
name|createMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|msg
return|;
block|}
block|}
end_class

end_unit

