begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|AbstractSoapInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|SoapActionInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AttributedURIType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|ContextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|MAPAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|ReferenceParametersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|RelatesToType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|Names200408
import|;
end_import

begin_comment
comment|/**  * SOAP interceptor responsible for {en|de}coding the Message Addressing   * Properties for {outgo|incom}ing messages.  */
end_comment

begin_class
specifier|public
class|class
name|MAPCodec
extends|extends
name|AbstractSoapInterceptor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|MAPCodec
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|IS_REFERENCE_PARAM_ATTR_NAME
init|=
literal|"IsReferenceParameter"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|LOG
operator|.
name|getResourceBundle
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DECOUPLED_FAULT_SUPPORT
init|=
literal|"org.apache.cxf.ws.addressing.decoupled_fault_support"
decl_stmt|;
comment|/**      * REVISIT: map usage that the *same* interceptor instance       * is used in all chains.      */
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Exchange
argument_list|>
name|uncorrelatedExchanges
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Exchange
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|VersionTransformer
name|transformer
decl_stmt|;
specifier|private
name|HeaderFactory
name|headerFactory
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|MAPCodec
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_PROTOCOL
argument_list|)
expr_stmt|;
name|transformer
operator|=
operator|new
name|VersionTransformer
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Exchange
argument_list|>
name|getUncorrelatedExchanges
parameter_list|()
block|{
return|return
name|uncorrelatedExchanges
return|;
block|}
comment|/**      * @return the set of SOAP headers understood by this handler       */
specifier|public
name|Set
argument_list|<
name|QName
argument_list|>
name|getUnderstoodHeaders
parameter_list|()
block|{
return|return
name|VersionTransformer
operator|.
name|HEADERS
return|;
block|}
comment|/**      * Invoked for normal processing of inbound and outbound messages.      *      * @param message the messsage      */
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
block|{
name|mediate
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|/**      * Invoked when unwinding normal interceptor chain when a fault occurred.      *      * @param message the messsage message      */
specifier|public
name|void
name|handleFault
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
name|AddressingProperties
name|maps
init|=
name|ContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|ContextUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
operator|&&
name|maps
operator|!=
literal|null
condition|)
block|{
comment|//fault occurred trying to send the message, remove it
name|uncorrelatedExchanges
operator|.
name|remove
argument_list|(
name|maps
operator|.
name|getMessageID
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|ContextUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
operator|&&
name|maps
operator|==
literal|null
operator|&&
operator|!
name|message
operator|.
name|containsKey
argument_list|(
name|MAPAggregator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|//fault occurred while processing the incoming message, but possibly
comment|//before the MAPAggregator was called.   We need to see if we can
comment|//try and map this if at all possible so a FaultTo/ReplyTo can
comment|//be properly determined to get the fault back to the rightful
comment|//place.
for|for
control|(
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|i
range|:
name|message
operator|.
name|getInterceptorChain
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|instanceof
name|MAPAggregator
condition|)
block|{
try|try
block|{
name|MAPAggregator
name|agg
init|=
operator|(
name|MAPAggregator
operator|)
name|i
decl_stmt|;
name|agg
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
return|return;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|DECOUPLED_FAULT_SUPPORT
argument_list|,
literal|false
argument_list|)
condition|)
block|{
operator|new
name|DecoupledFaultHandler
argument_list|()
operator|.
name|handleFault
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Mediate message flow, performing MAP {en|de}coding.      *       * @param message the message message      */
specifier|private
name|void
name|mediate
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|MAPAggregator
operator|.
name|ADDRESSING_DISABLED
argument_list|,
literal|false
argument_list|)
condition|)
block|{
if|if
condition|(
name|ContextUtils
operator|.
name|isOutbound
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|encode
argument_list|(
name|message
argument_list|,
name|ContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|==
name|ContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|AddressingProperties
name|maps
init|=
name|decode
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ContextUtils
operator|.
name|storeMAPs
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|markPartialResponse
argument_list|(
name|message
argument_list|,
name|maps
argument_list|)
expr_stmt|;
name|restoreExchange
argument_list|(
name|message
argument_list|,
name|maps
argument_list|)
expr_stmt|;
if|if
condition|(
name|maps
operator|!=
literal|null
operator|&&
operator|!
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
operator|&&
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getBindingOperationInfo
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|MessageUtils
operator|.
name|isOutbound
argument_list|(
name|message
argument_list|)
operator|&&
name|maps
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//try and use the Action from the maps to find the operation
name|String
name|action
init|=
name|maps
operator|.
name|getAction
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|SoapActionInInterceptor
operator|.
name|getAndSetOperation
argument_list|(
name|message
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Encode the current MAPs in protocol-specific headers.      *      * @param message the messsage message      * @param maps the MAPs to encode      */
specifier|private
name|void
name|encode
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|AddressingProperties
name|maps
parameter_list|)
block|{
if|if
condition|(
name|maps
operator|!=
literal|null
condition|)
block|{
name|cacheExchange
argument_list|(
name|message
argument_list|,
name|maps
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Outbound WS-Addressing headers"
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Header
argument_list|>
name|header
init|=
name|message
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|discardMAPs
argument_list|(
name|header
argument_list|,
name|maps
argument_list|)
expr_stmt|;
name|JAXBContext
name|jaxbContext
init|=
name|VersionTransformer
operator|.
name|getExposedJAXBContext
argument_list|(
name|maps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|QName
name|duplicate
init|=
name|maps
operator|.
name|getDuplicate
argument_list|()
decl_stmt|;
name|encodeAsExposed
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|maps
operator|.
name|getAction
argument_list|()
argument_list|,
name|Names
operator|.
name|WSA_ACTION_QNAME
argument_list|,
name|AttributedURIType
operator|.
name|class
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|Names
operator|.
name|WSA_ACTION_QNAME
operator|.
name|equals
argument_list|(
name|duplicate
argument_list|)
condition|)
block|{
name|encodeAsExposed
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|maps
operator|.
name|getAction
argument_list|()
argument_list|,
name|Names
operator|.
name|WSA_ACTION_QNAME
argument_list|,
name|AttributedURIType
operator|.
name|class
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
block|}
name|encodeAsExposed
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|maps
operator|.
name|getMessageID
argument_list|()
argument_list|,
name|Names
operator|.
name|WSA_MESSAGEID_QNAME
argument_list|,
name|AttributedURIType
operator|.
name|class
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|Names
operator|.
name|WSA_MESSAGEID_QNAME
operator|.
name|equals
argument_list|(
name|duplicate
argument_list|)
condition|)
block|{
name|encodeAsExposed
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|maps
operator|.
name|getMessageID
argument_list|()
argument_list|,
name|Names
operator|.
name|WSA_MESSAGEID_QNAME
argument_list|,
name|AttributedURIType
operator|.
name|class
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
block|}
name|encodeAsExposed
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|maps
operator|.
name|getTo
argument_list|()
argument_list|,
name|Names
operator|.
name|WSA_TO_QNAME
argument_list|,
name|AttributedURIType
operator|.
name|class
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|Names
operator|.
name|WSA_TO_QNAME
operator|.
name|equals
argument_list|(
name|duplicate
argument_list|)
condition|)
block|{
name|encodeAsExposed
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|maps
operator|.
name|getTo
argument_list|()
argument_list|,
name|Names
operator|.
name|WSA_TO_QNAME
argument_list|,
name|AttributedURIType
operator|.
name|class
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needsReplyTo
argument_list|(
name|maps
argument_list|,
name|message
argument_list|)
condition|)
block|{
name|encodeAsExposed
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|maps
operator|.
name|getReplyTo
argument_list|()
argument_list|,
name|Names
operator|.
name|WSA_REPLYTO_QNAME
argument_list|,
name|EndpointReferenceType
operator|.
name|class
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|Names
operator|.
name|WSA_REPLYTO_QNAME
operator|.
name|equals
argument_list|(
name|duplicate
argument_list|)
condition|)
block|{
name|encodeAsExposed
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|maps
operator|.
name|getReplyTo
argument_list|()
argument_list|,
name|Names
operator|.
name|WSA_REPLYTO_QNAME
argument_list|,
name|EndpointReferenceType
operator|.
name|class
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
block|}
block|}
name|encodeAsExposed
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|maps
operator|.
name|getRelatesTo
argument_list|()
argument_list|,
name|Names
operator|.
name|WSA_RELATESTO_QNAME
argument_list|,
name|RelatesToType
operator|.
name|class
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|Names
operator|.
name|WSA_RELATESTO_QNAME
operator|.
name|equals
argument_list|(
name|duplicate
argument_list|)
condition|)
block|{
name|encodeAsExposed
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|maps
operator|.
name|getRelatesTo
argument_list|()
argument_list|,
name|Names
operator|.
name|WSA_RELATESTO_QNAME
argument_list|,
name|RelatesToType
operator|.
name|class
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
block|}
name|encodeAsExposed
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|maps
operator|.
name|getFrom
argument_list|()
argument_list|,
name|Names
operator|.
name|WSA_FROM_QNAME
argument_list|,
name|EndpointReferenceType
operator|.
name|class
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|Names
operator|.
name|WSA_FROM_QNAME
operator|.
name|equals
argument_list|(
name|duplicate
argument_list|)
condition|)
block|{
name|encodeAsExposed
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|maps
operator|.
name|getFrom
argument_list|()
argument_list|,
name|Names
operator|.
name|WSA_FROM_QNAME
argument_list|,
name|EndpointReferenceType
operator|.
name|class
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needsFaultTo
argument_list|(
name|maps
argument_list|)
condition|)
block|{
name|encodeAsExposed
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|maps
operator|.
name|getFaultTo
argument_list|()
argument_list|,
name|Names
operator|.
name|WSA_FAULTTO_QNAME
argument_list|,
name|EndpointReferenceType
operator|.
name|class
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|Names
operator|.
name|WSA_FAULTTO_QNAME
operator|.
name|equals
argument_list|(
name|duplicate
argument_list|)
condition|)
block|{
name|encodeAsExposed
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|maps
operator|.
name|getFaultTo
argument_list|()
argument_list|,
name|Names
operator|.
name|WSA_FAULTTO_QNAME
argument_list|,
name|EndpointReferenceType
operator|.
name|class
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
block|}
block|}
name|encodeReferenceParameters
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
name|jaxbContext
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setDuplicate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|propogateAction
argument_list|(
name|maps
operator|.
name|getAction
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|applyMAPValidation
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|je
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SOAP_HEADER_ENCODE_FAILURE_MSG"
argument_list|,
name|je
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|needsReplyTo
parameter_list|(
name|AddressingProperties
name|maps
parameter_list|,
name|SoapMessage
name|m
parameter_list|)
block|{
if|if
condition|(
operator|!
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|m
argument_list|,
literal|"ws-addressing.write.optional.replyto"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|ContextUtils
operator|.
name|isNoneAddress
argument_list|(
name|maps
operator|.
name|getReplyTo
argument_list|()
argument_list|)
operator|&&
name|m
operator|.
name|getExchange
argument_list|()
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
comment|//one-way + none, not needed
return|return
literal|false
return|;
block|}
if|if
condition|(
name|ContextUtils
operator|.
name|isAnonymousAddress
argument_list|(
name|maps
operator|.
name|getReplyTo
argument_list|()
argument_list|)
condition|)
block|{
comment|//anonymous is the default if not specified, not needed
return|return
literal|false
return|;
block|}
block|}
return|return
name|maps
operator|.
name|getReplyTo
argument_list|()
operator|!=
literal|null
operator|&&
name|maps
operator|.
name|getReplyTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
operator|&&
name|maps
operator|.
name|getReplyTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|VersionTransformer
operator|.
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
operator|.
name|equals
argument_list|(
name|maps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|maps
operator|.
name|getReplyTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|ContextUtils
operator|.
name|getNoneEndpointReference
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|private
name|boolean
name|needsFaultTo
parameter_list|(
name|AddressingProperties
name|maps
parameter_list|)
block|{
return|return
name|maps
operator|.
name|getFaultTo
argument_list|()
operator|!=
literal|null
operator|&&
name|maps
operator|.
name|getFaultTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
operator|&&
name|maps
operator|.
name|getFaultTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|maps
operator|.
name|getFaultTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|maps
operator|.
name|getReplyTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|encodeReferenceParameters
parameter_list|(
name|AddressingProperties
name|maps
parameter_list|,
name|SoapMessage
name|msg
parameter_list|,
name|JAXBContext
name|ctx
parameter_list|)
throws|throws
name|JAXBException
block|{
name|Element
name|header
init|=
literal|null
decl_stmt|;
name|EndpointReferenceType
name|toEpr
init|=
name|maps
operator|.
name|getToEndpointReference
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|toEpr
condition|)
block|{
name|ReferenceParametersType
name|params
init|=
name|toEpr
operator|.
name|getReferenceParameters
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|params
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|params
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Element
operator|||
name|o
operator|instanceof
name|JAXBElement
condition|)
block|{
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
name|header
operator|=
name|getHeaderFactory
argument_list|()
operator|.
name|getHeader
argument_list|(
name|msg
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbEl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|o
decl_stmt|;
name|Node
name|importedNode
init|=
name|header
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|importNode
argument_list|(
name|e
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|header
operator|.
name|appendChild
argument_list|(
name|importedNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jaxbEl
operator|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|o
expr_stmt|;
name|ctx
operator|.
name|createMarshaller
argument_list|()
operator|.
name|marshal
argument_list|(
name|jaxbEl
argument_list|,
name|header
argument_list|)
expr_stmt|;
block|}
name|Element
name|lastAdded
init|=
operator|(
name|Element
operator|)
name|header
operator|.
name|getLastChild
argument_list|()
decl_stmt|;
name|header
operator|.
name|removeChild
argument_list|(
name|lastAdded
argument_list|)
expr_stmt|;
name|addIsReferenceParameterMarkerAttribute
argument_list|(
name|lastAdded
argument_list|,
name|maps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|Header
name|holder
init|=
operator|new
name|Header
argument_list|(
operator|new
name|QName
argument_list|(
name|lastAdded
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|lastAdded
operator|.
name|getLocalName
argument_list|()
argument_list|)
argument_list|,
name|lastAdded
argument_list|)
decl_stmt|;
name|msg
operator|.
name|getHeaders
argument_list|()
operator|.
name|add
argument_list|(
name|holder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"IGNORE_NON_ELEMENT_REF_PARAM_MSG"
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|addIsReferenceParameterMarkerAttribute
parameter_list|(
name|Element
name|lastAdded
parameter_list|,
name|String
name|namespaceURI
parameter_list|)
block|{
name|String
name|pfx
init|=
name|lastAdded
operator|.
name|lookupPrefix
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|pfx
argument_list|)
condition|)
block|{
comment|//attributes cannot be in empty namespace...
if|if
condition|(
name|lastAdded
operator|.
name|lookupNamespaceURI
argument_list|(
name|JAXWSAConstants
operator|.
name|WSA_PREFIX
argument_list|)
operator|==
literal|null
condition|)
block|{
name|pfx
operator|=
name|JAXWSAConstants
operator|.
name|WSA_PREFIX
expr_stmt|;
name|Attr
name|attr
init|=
name|lastAdded
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createAttributeNS
argument_list|(
literal|"http://www.w3.org/2000/xmlns/"
argument_list|,
literal|"xmlns:wsa"
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setValue
argument_list|(
name|namespaceURI
argument_list|)
expr_stmt|;
name|lastAdded
operator|.
name|setAttributeNodeNS
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastAdded
operator|.
name|lookupNamespaceURI
argument_list|(
name|JAXWSAConstants
operator|.
name|WSA_PREFIX
argument_list|)
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
name|pfx
operator|=
name|JAXWSAConstants
operator|.
name|WSA_PREFIX
expr_stmt|;
block|}
else|else
block|{
name|int
name|cnt
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|lastAdded
operator|.
name|lookupNamespaceURI
argument_list|(
name|JAXWSAConstants
operator|.
name|WSA_PREFIX
operator|+
name|cnt
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
block|}
name|pfx
operator|=
name|JAXWSAConstants
operator|.
name|WSA_PREFIX
operator|+
name|cnt
expr_stmt|;
name|Attr
name|attr
init|=
name|lastAdded
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createAttributeNS
argument_list|(
literal|"http://www.w3.org/2000/xmlns/"
argument_list|,
literal|"xmlns:wsa"
operator|+
name|cnt
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setValue
argument_list|(
name|namespaceURI
argument_list|)
expr_stmt|;
name|lastAdded
operator|.
name|setAttributeNodeNS
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
name|Attr
name|isRefParamAttr
init|=
name|lastAdded
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createAttributeNS
argument_list|(
name|namespaceURI
argument_list|,
name|pfx
operator|+
literal|":"
operator|+
name|IS_REFERENCE_PARAM_ATTR_NAME
argument_list|)
decl_stmt|;
name|isRefParamAttr
operator|.
name|setTextContent
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|lastAdded
operator|.
name|setAttributeNodeNS
argument_list|(
name|isRefParamAttr
argument_list|)
expr_stmt|;
block|}
comment|/**      * Encode message in exposed version.      *       * @param maps the MAPs, where getNamespceURI() specifies the WS-Addressing      *  version to expose      * @param value the value to encode      * @param name the QName for the header       * @param clz the class      * @param header the SOAP header element      * @param JAXBContext the JAXB context to use      */
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|encodeAsExposed
parameter_list|(
name|AddressingProperties
name|maps
parameter_list|,
name|SoapMessage
name|message
parameter_list|,
name|T
name|value
parameter_list|,
name|QName
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clz
parameter_list|,
name|JAXBContext
name|context
parameter_list|)
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"{0} : {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
operator|.
name|getLocalPart
argument_list|()
block|,
name|getLogText
argument_list|(
name|value
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|boolean
name|mu
init|=
name|maps
operator|.
name|getMustUnderstand
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|encodeAsExposed
argument_list|(
name|message
argument_list|,
name|maps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|value
argument_list|,
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|clz
argument_list|,
name|context
argument_list|,
name|mu
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Decode the MAPs from protocol-specific headers.      *        * @param message the SOAP message      * @param the decoded MAPs      * @exception SOAPFaultException if decoded MAPs are invalid       */
specifier|public
name|AddressingProperties
name|unmarshalMAPs
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
block|{
comment|// REVISIT generate MessageAddressingHeaderRequired fault if an
comment|// expected header is missing
name|AddressingProperties
name|maps
init|=
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Header
argument_list|>
name|header
init|=
name|message
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Inbound WS-Addressing headers"
argument_list|)
expr_stmt|;
name|Unmarshaller
name|unmarshaller
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|Element
argument_list|>
name|referenceParameterHeaders
init|=
literal|null
decl_stmt|;
name|QName
name|invalidCardinalityQName
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|Header
argument_list|>
name|iter
init|=
name|header
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Header
name|hdr
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|hdr
operator|.
name|getObject
argument_list|()
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|headerElement
init|=
operator|(
name|Element
operator|)
name|hdr
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|String
name|headerURI
init|=
name|headerElement
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
comment|// Need to check the uri before getting unmarshaller else
comment|// would get wrong unmarshaller and fail to process required
comment|// headers.
if|if
condition|(
name|VersionTransformer
operator|.
name|isSupported
argument_list|(
name|headerURI
argument_list|)
condition|)
block|{
if|if
condition|(
name|unmarshaller
operator|==
literal|null
condition|)
block|{
name|JAXBContext
name|jaxbContext
init|=
name|VersionTransformer
operator|.
name|getExposedJAXBContext
argument_list|(
name|headerURI
argument_list|)
decl_stmt|;
name|unmarshaller
operator|=
name|jaxbContext
operator|.
name|createUnmarshaller
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|maps
operator|==
literal|null
condition|)
block|{
name|maps
operator|=
operator|new
name|AddressingProperties
argument_list|()
expr_stmt|;
name|maps
operator|.
name|exposeAs
argument_list|(
name|headerURI
argument_list|)
expr_stmt|;
block|}
name|String
name|localName
init|=
name|headerElement
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Names
operator|.
name|WSA_MESSAGEID_NAME
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|invalidCardinalityQName
operator|=
name|maps
operator|.
name|getMessageID
argument_list|()
operator|!=
literal|null
condition|?
name|Names
operator|.
name|WSA_MESSAGEID_QNAME
else|:
literal|null
expr_stmt|;
name|maps
operator|.
name|setMessageID
argument_list|(
name|decodeAsNative
argument_list|(
name|headerURI
argument_list|,
name|AttributedURIType
operator|.
name|class
argument_list|,
name|headerElement
argument_list|,
name|unmarshaller
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Names
operator|.
name|WSA_TO_NAME
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|invalidCardinalityQName
operator|=
name|maps
operator|.
name|getTo
argument_list|()
operator|!=
literal|null
condition|?
name|Names
operator|.
name|WSA_TO_QNAME
else|:
literal|null
expr_stmt|;
name|AttributedURIType
name|addr
init|=
name|decodeAsNative
argument_list|(
name|headerURI
argument_list|,
name|AttributedURIType
operator|.
name|class
argument_list|,
name|headerElement
argument_list|,
name|unmarshaller
argument_list|)
decl_stmt|;
name|maps
operator|.
name|setTo
argument_list|(
name|EndpointReferenceUtils
operator|.
name|getEndpointReference
argument_list|(
name|addr
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Names
operator|.
name|WSA_FROM_NAME
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|invalidCardinalityQName
operator|=
name|maps
operator|.
name|getFrom
argument_list|()
operator|!=
literal|null
condition|?
name|Names
operator|.
name|WSA_FROM_QNAME
else|:
literal|null
expr_stmt|;
name|maps
operator|.
name|setFrom
argument_list|(
name|decodeAsNative
argument_list|(
name|headerURI
argument_list|,
name|EndpointReferenceType
operator|.
name|class
argument_list|,
name|headerElement
argument_list|,
name|unmarshaller
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Names
operator|.
name|WSA_REPLYTO_NAME
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|invalidCardinalityQName
operator|=
name|maps
operator|.
name|getReplyTo
argument_list|()
operator|!=
literal|null
condition|?
name|Names
operator|.
name|WSA_REPLYTO_QNAME
else|:
literal|null
expr_stmt|;
name|maps
operator|.
name|setReplyTo
argument_list|(
name|decodeAsNative
argument_list|(
name|headerURI
argument_list|,
name|EndpointReferenceType
operator|.
name|class
argument_list|,
name|headerElement
argument_list|,
name|unmarshaller
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Names
operator|.
name|WSA_FAULTTO_NAME
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|invalidCardinalityQName
operator|=
name|maps
operator|.
name|getFaultTo
argument_list|()
operator|!=
literal|null
condition|?
name|Names
operator|.
name|WSA_FAULTTO_QNAME
else|:
literal|null
expr_stmt|;
name|maps
operator|.
name|setFaultTo
argument_list|(
name|decodeAsNative
argument_list|(
name|headerURI
argument_list|,
name|EndpointReferenceType
operator|.
name|class
argument_list|,
name|headerElement
argument_list|,
name|unmarshaller
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Names
operator|.
name|WSA_RELATESTO_NAME
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|maps
operator|.
name|setRelatesTo
argument_list|(
name|decodeAsNative
argument_list|(
name|headerURI
argument_list|,
name|RelatesToType
operator|.
name|class
argument_list|,
name|headerElement
argument_list|,
name|unmarshaller
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Names
operator|.
name|WSA_ACTION_NAME
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|invalidCardinalityQName
operator|=
name|maps
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
condition|?
name|Names
operator|.
name|WSA_ACTION_QNAME
else|:
literal|null
expr_stmt|;
name|maps
operator|.
name|setAction
argument_list|(
name|decodeAsNative
argument_list|(
name|headerURI
argument_list|,
name|AttributedURIType
operator|.
name|class
argument_list|,
name|headerElement
argument_list|,
name|unmarshaller
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|headerElement
operator|.
name|getAttribute
argument_list|(
name|IS_REFERENCE_PARAM_ATTR_NAME
argument_list|)
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|referenceParameterHeaders
condition|)
block|{
name|referenceParameterHeaders
operator|=
operator|new
name|HashSet
argument_list|<
name|Element
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|referenceParameterHeaders
operator|.
name|add
argument_list|(
name|headerElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerURI
operator|.
name|contains
argument_list|(
name|Names
operator|.
name|WSA_NAMESPACE_PATTERN
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"UNSUPPORTED_VERSION_MSG"
argument_list|,
name|headerURI
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|maps
operator|!=
literal|null
operator|&&
operator|!
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
operator|&&
name|maps
operator|.
name|getReplyTo
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//per spec, if unspecified, replyTo is anon
name|AttributedURIType
name|address
init|=
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
argument_list|)
decl_stmt|;
name|EndpointReferenceType
name|replyTo
init|=
name|ContextUtils
operator|.
name|WSA_OBJECT_FACTORY
operator|.
name|createEndpointReferenceType
argument_list|()
decl_stmt|;
name|replyTo
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setReplyTo
argument_list|(
name|replyTo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|referenceParameterHeaders
operator|&&
literal|null
operator|!=
name|maps
condition|)
block|{
name|decodeReferenceParameters
argument_list|(
name|referenceParameterHeaders
argument_list|,
name|maps
argument_list|,
name|unmarshaller
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|invalidCardinalityQName
operator|!=
literal|null
condition|)
block|{
name|storeInvalidCardinalityFault
argument_list|(
name|message
argument_list|,
name|invalidCardinalityQName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JAXBException
name|je
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SOAP_HEADER_DECODE_FAILURE_MSG"
argument_list|,
name|je
argument_list|)
expr_stmt|;
block|}
return|return
name|maps
return|;
block|}
specifier|private
name|void
name|storeInvalidCardinalityFault
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|QName
name|wsaHeaderName
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"INVALID_CARDINALITY_MESSAGE"
argument_list|,
name|wsaHeaderName
argument_list|)
expr_stmt|;
name|String
name|reason
init|=
name|BUNDLE
operator|.
name|getString
argument_list|(
literal|"INVALID_ADDRESSING_PROPERTY_MESSAGE"
argument_list|)
decl_stmt|;
name|ContextUtils
operator|.
name|storeMAPFaultName
argument_list|(
name|Names
operator|.
name|INVALID_CARDINALITY_NAME
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|ContextUtils
operator|.
name|storeMAPFaultReason
argument_list|(
name|reason
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|decodeReferenceParameters
parameter_list|(
name|Set
argument_list|<
name|Element
argument_list|>
name|referenceParameterHeaders
parameter_list|,
name|AddressingProperties
name|maps
parameter_list|,
name|Unmarshaller
name|unmarshaller
parameter_list|)
throws|throws
name|JAXBException
block|{
name|EndpointReferenceType
name|toEpr
init|=
name|maps
operator|.
name|getToEndpointReference
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|toEpr
condition|)
block|{
for|for
control|(
name|Element
name|e
range|:
name|referenceParameterHeaders
control|)
block|{
if|if
condition|(
name|DOMUtils
operator|.
name|getChild
argument_list|(
name|e
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
operator|==
literal|null
condition|)
block|{
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|el
init|=
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|e
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContextUtils
operator|.
name|applyReferenceParam
argument_list|(
name|toEpr
argument_list|,
name|el
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ContextUtils
operator|.
name|applyReferenceParam
argument_list|(
name|toEpr
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Decodes a MAP from a exposed version.      *      * @param encodedAs specifies the encoded version      * @param clz the class      * @param headerElement the SOAP header element      * @param marshaller the JAXB marshaller to use      * @return the decoded value      */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|decodeAsNative
parameter_list|(
name|String
name|encodedAs
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clz
parameter_list|,
name|Element
name|headerElement
parameter_list|,
name|Unmarshaller
name|unmarshaller
parameter_list|)
throws|throws
name|JAXBException
block|{
name|T
name|value
init|=
name|clz
operator|.
name|cast
argument_list|(
name|transformer
operator|.
name|decodeAsNative
argument_list|(
name|encodedAs
argument_list|,
name|clz
argument_list|,
name|headerElement
argument_list|,
name|unmarshaller
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"{0} : {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|headerElement
operator|.
name|getLocalName
argument_list|()
block|,
name|getLogText
argument_list|(
name|value
argument_list|)
block|}
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
comment|/**      * Return a text representation of a header value for logging.      *       * @param<T> header type      * @param value header value      * @return      */
specifier|private
parameter_list|<
name|T
parameter_list|>
name|String
name|getLogText
parameter_list|(
name|T
name|value
parameter_list|)
block|{
name|String
name|text
init|=
literal|"unknown"
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|text
operator|=
literal|"null"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|AttributedURIType
condition|)
block|{
name|text
operator|=
operator|(
operator|(
name|AttributedURIType
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|EndpointReferenceType
condition|)
block|{
name|text
operator|=
operator|(
operator|(
name|EndpointReferenceType
operator|)
name|value
operator|)
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
condition|?
operator|(
operator|(
name|EndpointReferenceType
operator|)
name|value
operator|)
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
else|:
literal|"null"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|RelatesToType
condition|)
block|{
name|text
operator|=
operator|(
operator|(
name|RelatesToType
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|text
return|;
block|}
comment|/**      * Decode the MAPs from protocol-specific headers.      *        * @param message the messsage      * @param the decoded MAPs      * @exception SOAPFaultException if decoded MAPs are invalid       */
specifier|private
name|AddressingProperties
name|decode
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
block|{
comment|// REVISIT generate MessageAddressingHeaderRequired fault if an
comment|// expected header is missing
return|return
name|unmarshalMAPs
argument_list|(
name|message
argument_list|)
return|;
block|}
comment|/**      * Encodes an MAP as a SOAP header.      *      * @param message the message to store the headers on      * @param value the value to encode      * @param qname the QName for the header       * @param clz the class      * @param header the SOAP header element      * @param marshaller the JAXB context to use      */
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|void
name|encodeMAP
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|T
name|value
parameter_list|,
name|QName
name|qname
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clz
parameter_list|,
name|JAXBContext
name|ctx
parameter_list|,
name|boolean
name|mustUnderstand
parameter_list|)
throws|throws
name|JAXBException
block|{
name|SoapHeader
name|h
init|=
operator|new
name|SoapHeader
argument_list|(
name|qname
argument_list|,
operator|new
name|JAXBElement
argument_list|<
name|T
argument_list|>
argument_list|(
name|qname
argument_list|,
name|clz
argument_list|,
name|value
argument_list|)
argument_list|,
operator|new
name|JAXBDataBinding
argument_list|(
name|ctx
argument_list|)
argument_list|)
decl_stmt|;
name|h
operator|.
name|setMustUnderstand
argument_list|(
name|mustUnderstand
argument_list|)
expr_stmt|;
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
comment|/**      * Decodes a MAP from a SOAP header.      *      * @param clz the class      * @param headerElement the SOAP header element      * @param marshaller the JAXB marshaller to use      * @return the decoded value      */
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|decodeMAP
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clz
parameter_list|,
name|Element
name|headerElement
parameter_list|,
name|Unmarshaller
name|unmarshaller
parameter_list|)
throws|throws
name|JAXBException
block|{
name|JAXBElement
argument_list|<
name|T
argument_list|>
name|element
init|=
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|headerElement
argument_list|,
name|clz
argument_list|)
decl_stmt|;
return|return
name|element
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**      * Discard any pre-existing MAP headers - this may occur if the runtime      * re-uses a SOAP message.      *      * @param header the SOAP header      * @param maps the current MAPs      */
specifier|private
name|void
name|discardMAPs
parameter_list|(
name|List
argument_list|<
name|Header
argument_list|>
name|header
parameter_list|,
name|AddressingProperties
name|maps
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Header
argument_list|>
name|iter
init|=
name|header
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Header
name|hdr
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|Names
operator|.
name|WSA_NAMESPACE_NAME
operator|.
name|equals
argument_list|(
name|hdr
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|||
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
operator|.
name|equals
argument_list|(
name|hdr
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Propogate action to SOAPAction header      *      * @param action the Action property      * @param message the SOAP message      */
specifier|private
name|void
name|propogateAction
parameter_list|(
name|AttributedURIType
name|action
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|action
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|action
operator|.
name|getValue
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|mimeHeaders
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|MIME_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeHeaders
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|soapActionHeaders
init|=
name|mimeHeaders
operator|.
name|get
argument_list|(
literal|"SOAPAction"
argument_list|)
decl_stmt|;
comment|// only propogate to SOAPAction header if currently non-empty
if|if
condition|(
operator|!
operator|(
name|soapActionHeaders
operator|==
literal|null
operator|||
name|soapActionHeaders
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|soapActionHeaders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"encoding wsa:Action in SOAPAction header {0}"
argument_list|,
name|action
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|soapActionHeaders
operator|.
name|clear
argument_list|()
expr_stmt|;
name|soapActionHeaders
operator|.
name|add
argument_list|(
literal|"\""
operator|+
name|action
operator|.
name|getValue
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Apply results of validation of incoming MAPs.      *      * @param message the message      * @exception SOAPFaultException if the MAPs are invalid      * @exception SOAPException if SOAPFault cannot be constructed      */
specifier|private
name|void
name|applyMAPValidation
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
block|{
name|String
name|faultName
init|=
name|ContextUtils
operator|.
name|retrieveMAPFaultName
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|faultName
operator|!=
literal|null
condition|)
block|{
name|String
name|reason
init|=
name|ContextUtils
operator|.
name|retrieveMAPFaultReason
argument_list|(
name|message
argument_list|)
decl_stmt|;
throw|throw
name|createSOAPFaut
argument_list|(
name|faultName
argument_list|,
name|Names
operator|.
name|WSA_NAMESPACE_NAME
argument_list|,
name|reason
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create a SoapFault.      *      * @param localName the fault local name      * @param prefix the fault prefix      * @param namespace the fault namespace      * @param reason the fault reason      * @return a new SoapFault      */
specifier|private
name|SoapFault
name|createSOAPFaut
parameter_list|(
name|String
name|localName
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
return|return
operator|new
name|SoapFault
argument_list|(
name|reason
argument_list|,
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|localName
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Cache exchange for correlated response      *       * @param message the current message      * @param maps the addressing properties      */
specifier|private
name|void
name|cacheExchange
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|AddressingProperties
name|maps
parameter_list|)
block|{
if|if
condition|(
name|ContextUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
operator|&&
operator|!
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
name|uncorrelatedExchanges
operator|.
name|put
argument_list|(
name|maps
operator|.
name|getMessageID
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Restore exchange for correlated response      *       * @param message the current message      * @param maps the addressing properties      */
specifier|private
name|void
name|restoreExchange
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|AddressingProperties
name|maps
parameter_list|)
block|{
if|if
condition|(
name|maps
operator|!=
literal|null
operator|&&
name|maps
operator|.
name|getRelatesTo
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|Names
operator|.
name|WSA_UNSPECIFIED_RELATIONSHIP
operator|.
name|equals
argument_list|(
name|maps
operator|.
name|getRelatesTo
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|&&
name|isRelationshipReply
argument_list|(
name|maps
operator|.
name|getRelatesTo
argument_list|()
argument_list|)
condition|)
block|{
name|Exchange
name|correlatedExchange
init|=
name|uncorrelatedExchanges
operator|.
name|remove
argument_list|(
name|maps
operator|.
name|getRelatesTo
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|correlatedExchange
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|correlatedExchange
init|)
block|{
name|message
operator|.
name|setExchange
argument_list|(
name|correlatedExchange
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ContextUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
operator|&&
operator|!
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
if|if
condition|(
name|ContextUtils
operator|.
name|retrieveDeferUncorrelatedMessageAbort
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"deferring uncorrelated message abort"
argument_list|)
expr_stmt|;
name|ContextUtils
operator|.
name|storeDeferredUncorrelatedMessageAbort
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
literal|"org.apache.cxf.ws.addressing.MAPAggregator.addressingDisabled"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|//see if it can directly be correlated with the out message:
name|Message
name|outmsg
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
decl_stmt|;
name|AddressingProperties
name|outp
init|=
name|outmsg
operator|!=
literal|null
condition|?
name|ContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|outmsg
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|outp
operator|==
literal|null
operator|||
operator|!
name|outp
operator|.
name|getMessageID
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|maps
operator|.
name|getRelatesTo
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"CORRELATION_FAILURE_MSG"
argument_list|)
expr_stmt|;
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|maps
operator|==
literal|null
operator|&&
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|Message
name|m
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
decl_stmt|;
name|maps
operator|=
name|ContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|m
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|maps
operator|!=
literal|null
condition|)
block|{
name|Exchange
name|ex
init|=
name|uncorrelatedExchanges
operator|.
name|get
argument_list|(
name|maps
operator|.
name|getMessageID
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|==
name|message
operator|.
name|getExchange
argument_list|()
condition|)
block|{
name|uncorrelatedExchanges
operator|.
name|remove
argument_list|(
name|maps
operator|.
name|getMessageID
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"RESPONSE_NOT_USING_WSADDRESSING"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**       * @param relatesTo the current RelatesTo      * @return true iff the relationship type is reply      */
specifier|private
name|boolean
name|isRelationshipReply
parameter_list|(
name|RelatesToType
name|relatesTo
parameter_list|)
block|{
return|return
name|Names
operator|.
name|WSA_RELATIONSHIP_REPLY
operator|.
name|equals
argument_list|(
name|relatesTo
operator|.
name|getRelationshipType
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Marks a message as partial response      *       * @param message the current message      */
specifier|private
name|void
name|markPartialResponse
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|AddressingProperties
name|maps
parameter_list|)
block|{
if|if
condition|(
name|ContextUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
operator|&&
literal|null
operator|!=
name|maps
operator|&&
operator|(
literal|null
operator|==
name|maps
operator|.
name|getRelatesTo
argument_list|()
operator|||
operator|(
literal|null
operator|!=
name|maps
operator|.
name|getRelatesTo
argument_list|()
operator|&&
name|Names
operator|.
name|WSA_UNSPECIFIED_RELATIONSHIP
operator|.
name|equals
argument_list|(
name|maps
operator|.
name|getRelatesTo
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PARTIAL_RESPONSE_MESSAGE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|HeaderFactory
name|getHeaderFactory
parameter_list|()
block|{
if|if
condition|(
name|headerFactory
operator|==
literal|null
condition|)
block|{
name|headerFactory
operator|=
operator|new
name|HeaderFactory
argument_list|()
block|{
specifier|public
name|Element
name|getHeader
parameter_list|(
name|SoapVersion
name|soapversion
parameter_list|)
block|{
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
return|return
name|doc
operator|.
name|createElementNS
argument_list|(
name|soapversion
operator|.
name|getHeader
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|soapversion
operator|.
name|getHeader
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|headerFactory
return|;
block|}
specifier|protected
name|void
name|setHeaderFactory
parameter_list|(
name|HeaderFactory
name|factory
parameter_list|)
block|{
name|headerFactory
operator|=
name|factory
expr_stmt|;
block|}
specifier|public
interface|interface
name|HeaderFactory
block|{
name|Element
name|getHeader
parameter_list|(
name|SoapVersion
name|soapversion
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

