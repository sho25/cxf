begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBindingConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AttributedURIType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|ContextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|RelatesToType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|Names200403
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|Names200408
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200408
operator|.
name|AttributedURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200408
operator|.
name|Relationship
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|MIME_HEADERS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|REQUESTOR_ROLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
operator|.
name|ADDRESSING_PROPERTIES_INBOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
operator|.
name|ADDRESSING_PROPERTIES_OUTBOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|MAPCodecTest
block|{
specifier|private
name|MAPCodec
name|codec
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|QName
index|[]
name|expectedNames
decl_stmt|;
specifier|private
name|Object
index|[]
name|expectedValues
decl_stmt|;
specifier|private
name|String
name|expectedNamespaceURI
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|mimeHeaders
decl_stmt|;
specifier|private
name|Exchange
name|correlatedExchange
decl_stmt|;
specifier|private
name|boolean
name|expectRelatesTo
decl_stmt|;
specifier|private
name|String
name|nonReplyRelationship
decl_stmt|;
specifier|private
name|boolean
name|expectFaultTo
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|codec
operator|=
operator|new
name|MAPCodec
argument_list|()
expr_stmt|;
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedNames
operator|=
literal|null
expr_stmt|;
name|expectedValues
operator|=
literal|null
expr_stmt|;
name|expectedNamespaceURI
operator|=
literal|null
expr_stmt|;
name|mimeHeaders
operator|=
literal|null
expr_stmt|;
name|correlatedExchange
operator|=
literal|null
expr_stmt|;
name|ContextUtils
operator|.
name|setJAXBContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|nonReplyRelationship
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|QName
argument_list|>
name|headers
init|=
name|codec
operator|.
name|getUnderstoodHeaders
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected From header"
argument_list|,
name|headers
operator|.
name|contains
argument_list|(
name|Names
operator|.
name|WSA_FROM_QNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected To header"
argument_list|,
name|headers
operator|.
name|contains
argument_list|(
name|Names
operator|.
name|WSA_TO_QNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected ReplyTo header"
argument_list|,
name|headers
operator|.
name|contains
argument_list|(
name|Names
operator|.
name|WSA_REPLYTO_QNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected FaultTo header"
argument_list|,
name|headers
operator|.
name|contains
argument_list|(
name|Names
operator|.
name|WSA_FAULTTO_QNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected Action header"
argument_list|,
name|headers
operator|.
name|contains
argument_list|(
name|Names
operator|.
name|WSA_ACTION_QNAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected MessageID header"
argument_list|,
name|headers
operator|.
name|contains
argument_list|(
name|Names
operator|.
name|WSA_MESSAGEID_QNAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorInboundNonNative200403
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
name|Names200403
operator|.
name|WSA_NAMESPACE_NAME
decl_stmt|;
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderInboundNonNative200403
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
name|Names200403
operator|.
name|WSA_NAMESPACE_NAME
decl_stmt|;
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundNonNative200403
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
name|Names200403
operator|.
name|WSA_NAMESPACE_NAME
decl_stmt|;
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderOutboundNonNative200403
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
name|Names200403
operator|.
name|WSA_NAMESPACE_NAME
decl_stmt|;
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutbound
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundPreExistingSOAPAction
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|verifyAction
argument_list|()
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundNonNative
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
decl_stmt|;
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderInbound
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderOutbound
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderInboundWithRelatesTo
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|Names
operator|.
name|WSA_NAMESPACE_NAME
argument_list|)
decl_stmt|;
comment|//empty the uncorrelatedExchanges in responder
for|for
control|(
name|String
name|key
range|:
name|codec
operator|.
name|uncorrelatedExchanges
operator|.
name|keySet
argument_list|()
control|)
block|{
name|codec
operator|.
name|uncorrelatedExchanges
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderInboundNonNative
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
decl_stmt|;
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderOutboundInvalidMAP
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected SOAPFaultException on invalid MAP"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SoapFault
name|sfe
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"unexpected fault string"
argument_list|,
literal|"Duplicate Message ID urn:uuid:12345"
argument_list|,
name|sfe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderOutboundPreExistingSOAPAction
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|verifyAction
argument_list|()
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderOutboundNonNative
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
decl_stmt|;
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorInbound
parameter_list|()
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorInboundNonNative
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
decl_stmt|;
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorInboundNonReply
parameter_list|()
throws|throws
name|Exception
block|{
name|nonReplyRelationship
operator|=
literal|"wsat:correlatedOneway"
expr_stmt|;
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorInboundNonNativeNonReply
parameter_list|()
throws|throws
name|Exception
block|{
name|nonReplyRelationship
operator|=
literal|"wsat:correlatedOneway"
expr_stmt|;
name|String
name|uri
init|=
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
decl_stmt|;
name|SoapMessage
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|codec
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SoapMessage
name|setUpMessage
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|boolean
name|outbound
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|setUpMessage
argument_list|(
name|requestor
argument_list|,
name|outbound
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|SoapMessage
name|setUpMessage
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|invalidMAP
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|setUpMessage
argument_list|(
name|requestor
argument_list|,
name|outbound
argument_list|,
name|invalidMAP
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|SoapMessage
name|setUpMessage
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|invalidMAP
parameter_list|,
name|boolean
name|preExistingSOAPAction
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|setUpMessage
argument_list|(
name|requestor
argument_list|,
name|outbound
argument_list|,
name|invalidMAP
argument_list|,
name|preExistingSOAPAction
argument_list|,
name|Names
operator|.
name|WSA_NAMESPACE_NAME
argument_list|)
return|;
block|}
specifier|private
name|SoapMessage
name|setUpMessage
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|invalidMAP
parameter_list|,
name|boolean
name|preExistingSOAPAction
parameter_list|,
name|String
name|exposeAs
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|setUpMessage
argument_list|(
name|requestor
argument_list|,
name|outbound
argument_list|,
name|invalidMAP
argument_list|,
name|preExistingSOAPAction
argument_list|,
literal|null
argument_list|,
name|exposeAs
argument_list|)
return|;
block|}
specifier|private
name|SoapMessage
name|setUpMessage
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|invalidMAP
parameter_list|,
name|boolean
name|preExistingSOAPAction
parameter_list|,
name|Boolean
name|generateRelatesTo
parameter_list|,
name|String
name|exposeAs
parameter_list|)
throws|throws
name|Exception
block|{
name|SoapMessage
name|message
init|=
operator|new
name|SoapMessage
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|setUpOutbound
argument_list|(
name|message
argument_list|,
name|outbound
argument_list|)
expr_stmt|;
name|expectRelatesTo
operator|=
name|generateRelatesTo
operator|!=
literal|null
condition|?
name|generateRelatesTo
else|:
operator|(
name|requestor
operator|&&
operator|!
name|outbound
operator|)
operator|||
operator|(
operator|!
name|requestor
operator|&&
name|outbound
operator|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|requestor
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|mapProperty
init|=
name|getMAPProperty
argument_list|(
name|requestor
argument_list|,
name|outbound
argument_list|)
decl_stmt|;
name|AddressingProperties
name|maps
init|=
name|getMAPs
argument_list|(
name|requestor
argument_list|,
name|outbound
argument_list|,
name|exposeAs
argument_list|)
decl_stmt|;
specifier|final
name|Element
name|header
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Element
operator|.
name|class
argument_list|)
decl_stmt|;
name|codec
operator|.
name|setHeaderFactory
argument_list|(
operator|new
name|MAPCodec
operator|.
name|HeaderFactory
argument_list|()
block|{
specifier|public
name|Element
name|getHeader
parameter_list|(
name|SoapVersion
name|version
parameter_list|)
block|{
return|return
name|header
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Header
argument_list|>
name|headers
init|=
name|message
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|JAXBContext
name|jaxbContext
init|=
name|control
operator|.
name|createMock
argument_list|(
name|JAXBContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContextUtils
operator|.
name|setJAXBContext
argument_list|(
name|jaxbContext
argument_list|)
expr_stmt|;
name|Names200408
operator|.
name|setJAXBContext
argument_list|(
name|jaxbContext
argument_list|)
expr_stmt|;
name|Names200403
operator|.
name|setJAXBContext
argument_list|(
name|jaxbContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|outbound
condition|)
block|{
name|setUpEncode
argument_list|(
name|requestor
argument_list|,
name|message
argument_list|,
name|header
argument_list|,
name|maps
argument_list|,
name|mapProperty
argument_list|,
name|invalidMAP
argument_list|,
name|preExistingSOAPAction
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setUpDecode
argument_list|(
name|message
argument_list|,
name|headers
argument_list|,
name|maps
argument_list|,
name|mapProperty
argument_list|,
name|requestor
argument_list|)
expr_stmt|;
block|}
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
return|return
name|message
return|;
block|}
specifier|private
name|void
name|setUpEncode
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|SoapMessage
name|message
parameter_list|,
name|Element
name|header
parameter_list|,
name|AddressingProperties
name|maps
parameter_list|,
name|String
name|mapProperty
parameter_list|,
name|boolean
name|invalidMAP
parameter_list|,
name|boolean
name|preExistingSOAPAction
parameter_list|)
throws|throws
name|Exception
block|{
name|message
operator|.
name|put
argument_list|(
name|mapProperty
argument_list|,
name|maps
argument_list|)
expr_stmt|;
name|mimeHeaders
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|MIME_HEADERS
argument_list|,
name|mimeHeaders
argument_list|)
expr_stmt|;
if|if
condition|(
name|preExistingSOAPAction
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|soapAction
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|soapAction
operator|.
name|add
argument_list|(
literal|"\"foobar\""
argument_list|)
expr_stmt|;
name|mimeHeaders
operator|.
name|put
argument_list|(
name|SoapBindingConstants
operator|.
name|SOAP_ACTION
argument_list|,
name|soapAction
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|invalidMAP
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
literal|"org.apache.cxf.ws.addressing.map.fault.name"
argument_list|,
name|Names
operator|.
name|DUPLICATE_MESSAGE_ID_NAME
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"org.apache.cxf.ws.addressing.map.fault.reason"
argument_list|,
literal|"Duplicate Message ID urn:uuid:12345"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setUpDecode
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|List
argument_list|<
name|Header
argument_list|>
name|headers
parameter_list|,
name|AddressingProperties
name|maps
parameter_list|,
name|String
name|mapProperty
parameter_list|,
name|boolean
name|requestor
parameter_list|)
throws|throws
name|Exception
block|{
name|Unmarshaller
name|unmarshaller
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Unmarshaller
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContextUtils
operator|.
name|getJAXBContext
argument_list|()
operator|.
name|createUnmarshaller
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|unmarshaller
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|maps
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|boolean
name|exposedAsNative
init|=
name|Names
operator|.
name|WSA_NAMESPACE_NAME
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|boolean
name|exposedAs200408
init|=
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|boolean
name|exposedAs200403
init|=
name|Names200403
operator|.
name|WSA_NAMESPACE_NAME
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"unexpected namescape URI: "
operator|+
name|uri
argument_list|,
name|exposedAsNative
operator|||
name|exposedAs200408
operator|||
name|exposedAs200403
argument_list|)
expr_stmt|;
name|setUpHeaderDecode
argument_list|(
name|headers
argument_list|,
name|uri
argument_list|,
name|Names
operator|.
name|WSA_ACTION_NAME
argument_list|,
name|exposedAsNative
condition|?
name|AttributedURIType
operator|.
name|class
else|:
name|exposedAs200408
condition|?
name|AttributedURI
operator|.
name|class
else|:
name|exposedAs200403
condition|?
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200403
operator|.
name|AttributedURI
operator|.
name|class
else|:
literal|null
argument_list|,
literal|0
argument_list|,
name|unmarshaller
argument_list|)
expr_stmt|;
name|setUpHeaderDecode
argument_list|(
name|headers
argument_list|,
name|uri
argument_list|,
name|Names
operator|.
name|WSA_MESSAGEID_NAME
argument_list|,
name|exposedAsNative
condition|?
name|AttributedURIType
operator|.
name|class
else|:
name|exposedAs200408
condition|?
name|AttributedURI
operator|.
name|class
else|:
name|exposedAs200403
condition|?
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200403
operator|.
name|AttributedURI
operator|.
name|class
else|:
literal|null
argument_list|,
literal|1
argument_list|,
name|unmarshaller
argument_list|)
expr_stmt|;
name|setUpHeaderDecode
argument_list|(
name|headers
argument_list|,
name|uri
argument_list|,
name|Names
operator|.
name|WSA_TO_NAME
argument_list|,
name|exposedAsNative
condition|?
name|AttributedURIType
operator|.
name|class
else|:
name|exposedAs200408
condition|?
name|AttributedURI
operator|.
name|class
else|:
name|exposedAs200403
condition|?
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200403
operator|.
name|AttributedURI
operator|.
name|class
else|:
literal|null
argument_list|,
literal|2
argument_list|,
name|unmarshaller
argument_list|)
expr_stmt|;
name|setUpHeaderDecode
argument_list|(
name|headers
argument_list|,
name|uri
argument_list|,
name|Names
operator|.
name|WSA_REPLYTO_NAME
argument_list|,
name|exposedAsNative
condition|?
name|EndpointReferenceType
operator|.
name|class
else|:
name|exposedAs200408
condition|?
name|Names200408
operator|.
name|EPR_TYPE
else|:
name|exposedAs200403
condition|?
name|Names200403
operator|.
name|EPR_TYPE
else|:
literal|null
argument_list|,
literal|3
argument_list|,
name|unmarshaller
argument_list|)
expr_stmt|;
name|setUpHeaderDecode
argument_list|(
name|headers
argument_list|,
name|uri
argument_list|,
name|Names
operator|.
name|WSA_RELATESTO_NAME
argument_list|,
name|exposedAsNative
condition|?
name|RelatesToType
operator|.
name|class
else|:
name|exposedAs200408
condition|?
name|Relationship
operator|.
name|class
else|:
name|exposedAs200403
condition|?
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200403
operator|.
name|Relationship
operator|.
name|class
else|:
literal|null
argument_list|,
literal|4
argument_list|,
name|unmarshaller
argument_list|)
expr_stmt|;
name|setUpHeaderDecode
argument_list|(
name|headers
argument_list|,
name|uri
argument_list|,
name|Names
operator|.
name|WSA_FAULTTO_NAME
argument_list|,
name|exposedAsNative
condition|?
name|EndpointReferenceType
operator|.
name|class
else|:
name|exposedAs200408
condition|?
name|Names200408
operator|.
name|EPR_TYPE
else|:
name|exposedAs200403
condition|?
name|Names200403
operator|.
name|EPR_TYPE
else|:
literal|null
argument_list|,
literal|5
argument_list|,
name|unmarshaller
argument_list|)
expr_stmt|;
name|setUpHeaderDecode
argument_list|(
name|headers
argument_list|,
name|uri
argument_list|,
name|Names
operator|.
name|WSA_FROM_NAME
argument_list|,
name|exposedAsNative
condition|?
name|EndpointReferenceType
operator|.
name|class
else|:
name|exposedAs200408
condition|?
name|Names200408
operator|.
name|EPR_TYPE
else|:
name|exposedAs200403
condition|?
name|Names200403
operator|.
name|EPR_TYPE
else|:
literal|null
argument_list|,
literal|6
argument_list|,
name|unmarshaller
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|setUpHeaderDecode
parameter_list|(
name|List
argument_list|<
name|Header
argument_list|>
name|headers
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|,
name|int
name|index
parameter_list|,
name|Unmarshaller
name|unmarshaller
parameter_list|)
throws|throws
name|Exception
block|{
name|Element
name|headerElement
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Element
operator|.
name|class
argument_list|)
decl_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|new
name|Header
argument_list|(
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|name
argument_list|)
argument_list|,
name|headerElement
argument_list|)
argument_list|)
expr_stmt|;
name|headerElement
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|headerElement
operator|.
name|getLocalName
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Object
name|v
init|=
name|expectedValues
index|[
name|index
index|]
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|jaxbElement
init|=
operator|new
name|JAXBElement
argument_list|<>
argument_list|(
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|name
argument_list|)
argument_list|,
operator|(
name|Class
argument_list|<
name|Object
argument_list|>
operator|)
name|clz
argument_list|,
name|clz
operator|.
name|cast
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|headerElement
argument_list|,
name|clz
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|jaxbElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpOutbound
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|outbound
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setOutMessage
argument_list|(
name|outbound
condition|?
name|message
else|:
operator|new
name|MessageImpl
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getMAPProperty
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|boolean
name|outbound
parameter_list|)
block|{
return|return
name|outbound
condition|?
name|ADDRESSING_PROPERTIES_OUTBOUND
else|:
name|ADDRESSING_PROPERTIES_INBOUND
return|;
block|}
specifier|private
name|AddressingProperties
name|getMAPs
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|AddressingProperties
name|maps
init|=
operator|new
name|AddressingProperties
argument_list|()
decl_stmt|;
name|boolean
name|exposeAsNative
init|=
name|Names
operator|.
name|WSA_NAMESPACE_NAME
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|boolean
name|exposeAs200408
init|=
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|boolean
name|exposeAs200403
init|=
name|Names200403
operator|.
name|WSA_NAMESPACE_NAME
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|AttributedURIType
name|id
init|=
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
literal|"urn:uuid:12345"
argument_list|)
decl_stmt|;
name|maps
operator|.
name|setMessageID
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|AttributedURIType
name|to
init|=
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
literal|"foobar"
argument_list|)
decl_stmt|;
name|EndpointReferenceType
name|toEpr
init|=
name|EndpointReferenceUtils
operator|.
name|getEndpointReference
argument_list|(
name|to
argument_list|)
decl_stmt|;
name|maps
operator|.
name|setTo
argument_list|(
name|toEpr
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|replyTo
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|String
name|anonymous
init|=
name|exposeAsNative
condition|?
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
else|:
name|exposeAs200408
condition|?
name|Names200408
operator|.
name|WSA_ANONYMOUS_ADDRESS
else|:
name|Names200403
operator|.
name|WSA_ANONYMOUS_ADDRESS
decl_stmt|;
name|replyTo
operator|.
name|setAddress
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|anonymous
argument_list|)
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setReplyTo
argument_list|(
name|replyTo
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|from
init|=
name|EndpointReferenceUtils
operator|.
name|getEndpointReference
argument_list|(
literal|"snafu"
argument_list|)
decl_stmt|;
name|maps
operator|.
name|setFrom
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|faultTo
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|anonymous
operator|=
name|exposeAsNative
condition|?
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
else|:
name|exposeAs200408
condition|?
name|Names200408
operator|.
name|WSA_ANONYMOUS_ADDRESS
else|:
name|Names200403
operator|.
name|WSA_ANONYMOUS_ADDRESS
expr_stmt|;
name|faultTo
operator|.
name|setAddress
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|anonymous
argument_list|)
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setFaultTo
argument_list|(
name|faultTo
argument_list|)
expr_stmt|;
name|RelatesToType
name|relatesTo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|expectRelatesTo
condition|)
block|{
name|String
name|correlationID
init|=
literal|"urn:uuid:67890"
decl_stmt|;
name|relatesTo
operator|=
operator|new
name|RelatesToType
argument_list|()
expr_stmt|;
name|relatesTo
operator|.
name|setValue
argument_list|(
name|correlationID
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setRelatesTo
argument_list|(
name|relatesTo
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonReplyRelationship
operator|==
literal|null
condition|)
block|{
name|correlatedExchange
operator|=
operator|new
name|ExchangeImpl
argument_list|()
expr_stmt|;
name|codec
operator|.
name|uncorrelatedExchanges
operator|.
name|put
argument_list|(
name|correlationID
argument_list|,
name|correlatedExchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|relatesTo
operator|.
name|setRelationshipType
argument_list|(
name|nonReplyRelationship
argument_list|)
expr_stmt|;
block|}
block|}
name|AttributedURIType
name|action
init|=
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
literal|"http://foo/bar/SEI/opRequest"
argument_list|)
decl_stmt|;
name|maps
operator|.
name|setAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|maps
operator|.
name|exposeAs
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|expectedNamespaceURI
operator|=
name|uri
expr_stmt|;
name|expectedNames
operator|=
operator|new
name|QName
index|[]
block|{
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|Names
operator|.
name|WSA_ACTION_NAME
argument_list|)
block|,
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|Names
operator|.
name|WSA_MESSAGEID_NAME
argument_list|)
block|,
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|Names
operator|.
name|WSA_TO_NAME
argument_list|)
block|,
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|Names
operator|.
name|WSA_REPLYTO_NAME
argument_list|)
block|,
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|Names
operator|.
name|WSA_RELATESTO_NAME
argument_list|)
block|,
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|Names
operator|.
name|WSA_FROM_NAME
argument_list|)
block|,
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|Names
operator|.
name|WSA_FAULTTO_NAME
argument_list|)
block|,         }
expr_stmt|;
if|if
condition|(
name|exposeAsNative
condition|)
block|{
name|expectedValues
operator|=
operator|new
name|Object
index|[]
block|{
name|action
block|,
name|id
block|,
name|to
block|,
name|replyTo
block|,
name|relatesTo
block|,
name|from
block|,
name|faultTo
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exposeAs200408
condition|)
block|{
name|expectedValues
operator|=
operator|new
name|Object
index|[]
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convert
argument_list|(
name|action
argument_list|)
block|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convert
argument_list|(
name|id
argument_list|)
block|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convert
argument_list|(
name|to
argument_list|)
block|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convert
argument_list|(
name|replyTo
argument_list|)
block|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convert
argument_list|(
name|relatesTo
argument_list|)
block|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convert
argument_list|(
name|from
argument_list|)
block|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convert
argument_list|(
name|faultTo
argument_list|)
block|,             }
expr_stmt|;
if|if
condition|(
operator|!
name|outbound
condition|)
block|{
comment|// conversion from 2004/08 to 2005/08 anonymous address
comment|// occurs transparently in VersionTransformer
name|Names200408
operator|.
name|EPR_TYPE
operator|.
name|cast
argument_list|(
name|expectedValues
index|[
literal|3
index|]
argument_list|)
operator|.
name|getAddress
argument_list|()
operator|.
name|setValue
argument_list|(
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
argument_list|)
expr_stmt|;
name|Names200408
operator|.
name|EPR_TYPE
operator|.
name|cast
argument_list|(
name|expectedValues
index|[
literal|5
index|]
argument_list|)
operator|.
name|getAddress
argument_list|()
operator|.
name|setValue
argument_list|(
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|exposeAs200403
condition|)
block|{
name|expectedValues
operator|=
operator|new
name|Object
index|[]
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convertTo200403
argument_list|(
name|action
argument_list|)
block|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convertTo200403
argument_list|(
name|id
argument_list|)
block|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convertTo200403
argument_list|(
name|to
argument_list|)
block|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convertTo200403
argument_list|(
name|replyTo
argument_list|)
block|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convertTo200403
argument_list|(
name|relatesTo
argument_list|)
block|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convertTo200403
argument_list|(
name|from
argument_list|)
block|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convertTo200403
argument_list|(
name|faultTo
argument_list|)
block|,             }
expr_stmt|;
if|if
condition|(
operator|!
name|outbound
condition|)
block|{
comment|// conversion from 2004/03 to 2005/08 anonymous address
comment|// occurs transparently in VersionTransformer
name|Names200403
operator|.
name|EPR_TYPE
operator|.
name|cast
argument_list|(
name|expectedValues
index|[
literal|3
index|]
argument_list|)
operator|.
name|getAddress
argument_list|()
operator|.
name|setValue
argument_list|(
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
argument_list|)
expr_stmt|;
name|Names200403
operator|.
name|EPR_TYPE
operator|.
name|cast
argument_list|(
name|expectedValues
index|[
literal|5
index|]
argument_list|)
operator|.
name|getAddress
argument_list|()
operator|.
name|setValue
argument_list|(
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fail
argument_list|(
literal|"unexpected namespace URI: "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|maps
return|;
block|}
specifier|private
name|boolean
name|verifyMAPs
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|AddressingProperties
condition|)
block|{
name|AddressingProperties
name|other
init|=
operator|(
name|AddressingProperties
operator|)
name|obj
decl_stmt|;
return|return
name|compareExpected
argument_list|(
name|other
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|compareExpected
parameter_list|(
name|AddressingProperties
name|other
parameter_list|)
block|{
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|String
name|uri
init|=
name|other
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|boolean
name|exposedAsNative
init|=
name|Names
operator|.
name|WSA_NAMESPACE_NAME
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|boolean
name|exposedAs200408
init|=
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|boolean
name|exposedAs200403
init|=
name|Names200403
operator|.
name|WSA_NAMESPACE_NAME
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|exposedAsNative
operator|||
name|exposedAs200408
operator|||
name|exposedAs200403
condition|)
block|{
name|String
name|expectedMessageID
init|=
name|exposedAsNative
condition|?
operator|(
operator|(
name|AttributedURIType
operator|)
name|expectedValues
index|[
literal|1
index|]
operator|)
operator|.
name|getValue
argument_list|()
else|:
name|exposedAs200408
condition|?
operator|(
operator|(
name|AttributedURI
operator|)
name|expectedValues
index|[
literal|1
index|]
operator|)
operator|.
name|getValue
argument_list|()
else|:
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200403
operator|.
name|AttributedURI
operator|)
name|expectedValues
index|[
literal|1
index|]
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|expectedTo
init|=
name|exposedAsNative
condition|?
operator|(
operator|(
name|AttributedURIType
operator|)
name|expectedValues
index|[
literal|2
index|]
operator|)
operator|.
name|getValue
argument_list|()
else|:
name|exposedAs200408
condition|?
operator|(
operator|(
name|AttributedURI
operator|)
name|expectedValues
index|[
literal|2
index|]
operator|)
operator|.
name|getValue
argument_list|()
else|:
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200403
operator|.
name|AttributedURI
operator|)
name|expectedValues
index|[
literal|2
index|]
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|expectedReplyTo
init|=
name|exposedAsNative
condition|?
operator|(
operator|(
name|EndpointReferenceType
operator|)
name|expectedValues
index|[
literal|3
index|]
operator|)
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
else|:
name|exposedAs200408
condition|?
operator|(
name|Names200408
operator|.
name|EPR_TYPE
operator|.
name|cast
argument_list|(
name|expectedValues
index|[
literal|3
index|]
argument_list|)
operator|)
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
else|:
operator|(
name|Names200403
operator|.
name|EPR_TYPE
operator|.
name|cast
argument_list|(
name|expectedValues
index|[
literal|3
index|]
argument_list|)
operator|)
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|expectedAction
init|=
name|exposedAsNative
condition|?
operator|(
operator|(
name|AttributedURIType
operator|)
name|expectedValues
index|[
literal|0
index|]
operator|)
operator|.
name|getValue
argument_list|()
else|:
name|exposedAs200408
condition|?
operator|(
operator|(
name|AttributedURI
operator|)
name|expectedValues
index|[
literal|0
index|]
operator|)
operator|.
name|getValue
argument_list|()
else|:
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200403
operator|.
name|AttributedURI
operator|)
name|expectedValues
index|[
literal|0
index|]
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ret
operator|=
name|expectedMessageID
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getMessageID
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|&&
name|expectedTo
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getTo
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|&&
name|expectedReplyTo
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getReplyTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|&&
name|expectedAction
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getAction
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|&&
name|expectedNamespaceURI
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectRelatesTo
condition|)
block|{
name|String
name|expectedRelatesTo
init|=
name|exposedAsNative
condition|?
operator|(
operator|(
name|RelatesToType
operator|)
name|expectedValues
index|[
literal|4
index|]
operator|)
operator|.
name|getValue
argument_list|()
else|:
name|exposedAs200408
condition|?
operator|(
operator|(
name|Relationship
operator|)
name|expectedValues
index|[
literal|4
index|]
operator|)
operator|.
name|getValue
argument_list|()
else|:
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200403
operator|.
name|Relationship
operator|)
name|expectedValues
index|[
literal|4
index|]
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ret
operator|=
name|ret
operator|&&
name|expectedRelatesTo
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getRelatesTo
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|verifyAction
parameter_list|()
block|{
name|List
argument_list|<
name|?
argument_list|>
name|soapAction
init|=
name|mimeHeaders
operator|.
name|get
argument_list|(
literal|"SOAPAction"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expected propogated action"
argument_list|,
name|soapAction
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected single action"
argument_list|,
literal|1
argument_list|,
name|soapAction
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedAction
init|=
literal|"\""
operator|+
operator|(
operator|(
name|AttributedURIType
operator|)
name|expectedValues
index|[
literal|0
index|]
operator|)
operator|.
name|getValue
argument_list|()
operator|+
literal|"\""
decl_stmt|;
name|assertEquals
argument_list|(
literal|"expected propogated action"
argument_list|,
name|expectedAction
argument_list|,
name|soapAction
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyMessage
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|boolean
name|requestor
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|exposedAsNative
parameter_list|)
block|{
if|if
condition|(
name|requestor
condition|)
block|{
if|if
condition|(
name|outbound
condition|)
block|{
name|String
name|id
init|=
name|expectedValues
index|[
literal|1
index|]
operator|instanceof
name|AttributedURIType
condition|?
operator|(
operator|(
name|AttributedURIType
operator|)
name|expectedValues
index|[
literal|1
index|]
operator|)
operator|.
name|getValue
argument_list|()
else|:
name|expectedValues
index|[
literal|0
index|]
operator|instanceof
name|AttributedURI
condition|?
operator|(
operator|(
name|AttributedURI
operator|)
name|expectedValues
index|[
literal|1
index|]
operator|)
operator|.
name|getValue
argument_list|()
else|:
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200403
operator|.
name|AttributedURI
operator|)
name|expectedValues
index|[
literal|1
index|]
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
literal|"unexpected correlated exchange"
argument_list|,
name|codec
operator|.
name|uncorrelatedExchanges
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isReply
argument_list|(
name|exposedAsNative
argument_list|)
condition|)
block|{
name|assertSame
argument_list|(
literal|"unexpected correlated exchange"
argument_list|,
name|correlatedExchange
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotSame
argument_list|(
literal|"unexpected correlated exchange"
argument_list|,
name|correlatedExchange
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"expected empty uncorrelated exchange cache"
argument_list|,
literal|0
argument_list|,
name|codec
operator|.
name|uncorrelatedExchanges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|outbound
condition|)
block|{
name|int
name|expectedMarshals
init|=
name|requestor
condition|?
name|expectedValues
operator|.
name|length
operator|-
literal|1
else|:
name|expectedValues
operator|.
name|length
decl_stmt|;
if|if
condition|(
operator|!
name|expectFaultTo
condition|)
block|{
operator|--
name|expectedMarshals
expr_stmt|;
block|}
name|List
argument_list|<
name|Header
argument_list|>
name|headers
init|=
name|message
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected holders added to header list"
argument_list|,
name|headers
operator|.
name|size
argument_list|()
operator|>=
name|expectedMarshals
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|expectFaultTo
condition|?
name|expectedValues
operator|.
name|length
else|:
name|expectedValues
operator|.
name|length
operator|-
literal|1
operator|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|4
operator|&&
operator|!
name|expectRelatesTo
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"expected "
operator|+
name|expectedNames
index|[
name|i
index|]
operator|+
literal|" added to headers"
argument_list|,
name|message
operator|.
name|hasHeader
argument_list|(
name|expectedNames
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"unexpected MAPs"
argument_list|,
name|verifyMAPs
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|getMAPProperty
argument_list|(
name|requestor
argument_list|,
name|outbound
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isReply
parameter_list|(
name|boolean
name|exposedAsNative
parameter_list|)
block|{
name|boolean
name|isReply
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|exposedAsNative
condition|)
block|{
name|isReply
operator|=
name|Names
operator|.
name|WSA_RELATIONSHIP_REPLY
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RelatesToType
operator|)
name|expectedValues
index|[
literal|4
index|]
operator|)
operator|.
name|getRelationshipType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QName
name|relationship
init|=
name|expectedValues
index|[
literal|4
index|]
operator|instanceof
name|Relationship
condition|?
operator|(
operator|(
name|Relationship
operator|)
name|expectedValues
index|[
literal|4
index|]
operator|)
operator|.
name|getRelationshipType
argument_list|()
else|:
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200403
operator|.
name|Relationship
operator|)
name|expectedValues
index|[
literal|4
index|]
operator|)
operator|.
name|getRelationshipType
argument_list|()
decl_stmt|;
name|isReply
operator|=
name|relationship
operator|==
literal|null
operator|||
name|Names
operator|.
name|WSA_REPLY_NAME
operator|.
name|equalsIgnoreCase
argument_list|(
name|relationship
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|isReply
return|;
block|}
block|}
end_class

end_unit

