begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|Extensible
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|ContextUtilsTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|QName
name|WSA_ACTION_QNAME
init|=
operator|new
name|QName
argument_list|(
name|JAXWSAConstants
operator|.
name|NS_WSA
argument_list|,
name|Names
operator|.
name|WSAW_ACTION_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|OLD_WSDL_WSA_ACTION_QNAME
init|=
operator|new
name|QName
argument_list|(
name|Names
operator|.
name|WSA_NAMESPACE_WSDL_NAME_OLD
argument_list|,
name|Names
operator|.
name|WSAW_ACTION_NAME
argument_list|)
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetActionFromExtensible
parameter_list|()
block|{
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Extensible
name|ext
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Extensible
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ext
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|attributes
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|WSA_ACTION_QNAME
argument_list|,
literal|"urn:foo:test:2"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ext
operator|.
name|getExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAW_ACTION_QNAME
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"urn:foo:test:1"
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|String
name|action
init|=
name|ContextUtils
operator|.
name|getAction
argument_list|(
name|ext
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo:test:1"
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ext
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|attributes
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ext
operator|.
name|getExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAW_ACTION_QNAME
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|WSA_ACTION_QNAME
argument_list|,
literal|"urn:foo:test:2"
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|action
operator|=
name|ContextUtils
operator|.
name|getAction
argument_list|(
name|ext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo:test:2"
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ext
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|attributes
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ext
operator|.
name|getExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAW_ACTION_QNAME
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|OLD_WSDL_WSA_ACTION_QNAME
argument_list|,
literal|"urn:foo:test:3"
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|action
operator|=
name|ContextUtils
operator|.
name|getAction
argument_list|(
name|ext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo:test:3"
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ext
operator|.
name|getExtensionAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|attributes
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ext
operator|.
name|getExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAW_ACTION_QNAME
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|action
operator|=
name|ContextUtils
operator|.
name|getAction
argument_list|(
name|ext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

