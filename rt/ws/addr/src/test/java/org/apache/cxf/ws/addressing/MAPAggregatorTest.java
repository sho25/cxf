begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|RequestWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|ResponseWrapper
import|;
end_import

begin_comment
comment|//import javax.xml.ws.RequestWrapper;
end_comment

begin_comment
comment|//import javax.xml.ws.ResponseWrapper;
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingFaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
operator|.
name|SOAP_NAMESPACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|REQUESTOR_ROLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
operator|.
name|CLIENT_ADDRESSING_PROPERTIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
operator|.
name|CLIENT_ADDRESSING_PROPERTIES_INBOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
operator|.
name|CLIENT_ADDRESSING_PROPERTIES_OUTBOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
operator|.
name|SERVER_ADDRESSING_PROPERTIES_INBOUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
operator|.
name|SERVER_ADDRESSING_PROPERTIES_OUTBOUND
import|;
end_import

begin_class
specifier|public
class|class
name|MAPAggregatorTest
extends|extends
name|Assert
block|{
specifier|private
name|MAPAggregator
name|aggregator
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|AddressingPropertiesImpl
name|expectedMAPs
decl_stmt|;
specifier|private
name|String
name|expectedTo
decl_stmt|;
specifier|private
name|String
name|expectedReplyTo
decl_stmt|;
specifier|private
name|String
name|expectedRelatesTo
decl_stmt|;
specifier|private
name|String
name|expectedAction
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|aggregator
operator|=
operator|new
name|MAPAggregator
argument_list|()
expr_stmt|;
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|expectedMAPs
operator|=
literal|null
expr_stmt|;
name|expectedTo
operator|=
literal|null
expr_stmt|;
name|expectedReplyTo
operator|=
literal|null
expr_stmt|;
name|expectedRelatesTo
operator|=
literal|null
expr_stmt|;
name|expectedAction
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundUsingAddressingMAPsInContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundUsingAddressingMAPsInContextZeroLengthAction
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundUsingAddressingMAPsInContextFault
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundUsingAddressingNoMAPsInContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundUsingAddressingNoMAPsInContextFault
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundNotUsingAddressing
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundNotUsingAddressingFault
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundOnewayUsingAddressingMAPsInContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundOnewayUsingAddressingMAPsInContextFault
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundOnewayUsingAddressingNoMAPsInContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundOnewayUsingAddressingNoMAPsInContextFault
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundOnewayNotUsingAddressing
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorOutboundOnewayNotUsingAddressingFault
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderInboundValidMAPs
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderInboundDecoupled
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderInboundOneway
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderInboundValidMAPsFault
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SoapFault
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testResponderInboundInvalidMAPs
parameter_list|()
throws|throws
name|Exception
block|{
name|aggregator
operator|.
name|messageIDs
operator|.
name|put
argument_list|(
literal|"urn:uuid:12345"
argument_list|,
literal|"urn:uuid:12345"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|setAllowDuplicates
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
comment|/*check*/
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SoapFault
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testResponderInboundInvalidMAPsFault
parameter_list|()
throws|throws
name|Exception
block|{
name|aggregator
operator|.
name|messageIDs
operator|.
name|put
argument_list|(
literal|"urn:uuid:12345"
argument_list|,
literal|"urn:uuid:12345"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|setAllowDuplicates
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
comment|/*check*/
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderOutbound
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderOutboundZeroLengthAction
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResponderOutboundFault
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|false
block|,
literal|true
block|}
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorInbound
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
comment|/*check*/
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestorInboundFault
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|aggregator
operator|.
name|mediate
argument_list|(
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|verifyMessage
argument_list|(
name|message
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
comment|/*check*/
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Message
name|setUpMessage
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|oneway
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|setUpMessage
argument_list|(
name|requestor
argument_list|,
name|outbound
argument_list|,
name|oneway
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|Message
name|setUpMessage
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|oneway
parameter_list|,
name|boolean
name|usingAddressing
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|setUpMessage
argument_list|(
name|requestor
argument_list|,
name|outbound
argument_list|,
name|oneway
argument_list|,
name|usingAddressing
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|Message
name|setUpMessage
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|oneway
parameter_list|,
name|boolean
name|usingAddressing
parameter_list|,
name|boolean
name|mapsInContext
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|setUpMessage
argument_list|(
name|requestor
argument_list|,
name|outbound
argument_list|,
name|oneway
argument_list|,
name|usingAddressing
argument_list|,
name|mapsInContext
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|Message
name|setUpMessage
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|oneway
parameter_list|,
name|boolean
name|usingAddressing
parameter_list|,
name|boolean
name|mapsInContext
parameter_list|,
name|boolean
name|decoupled
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|setUpMessage
argument_list|(
name|requestor
argument_list|,
name|outbound
argument_list|,
name|oneway
argument_list|,
name|usingAddressing
argument_list|,
name|mapsInContext
argument_list|,
name|decoupled
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|Message
name|setUpMessage
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|oneway
parameter_list|,
name|boolean
name|usingAddressing
parameter_list|,
name|boolean
name|mapsInContext
parameter_list|,
name|boolean
name|decoupled
parameter_list|,
name|boolean
name|zeroLengthAction
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
index|[]
name|params
init|=
block|{
name|requestor
block|,
name|outbound
block|,
name|oneway
block|,
name|usingAddressing
block|,
name|mapsInContext
block|,
name|decoupled
block|,
name|zeroLengthAction
block|,
literal|false
block|}
decl_stmt|;
return|return
name|setUpMessage
argument_list|(
name|params
argument_list|)
return|;
block|}
comment|/**      * Boolean array is used to work around checkstyle rule limiting      * parameter cardinality to 7.       */
specifier|private
name|Message
name|setUpMessage
parameter_list|(
name|boolean
index|[]
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|requestor
init|=
name|params
index|[
literal|0
index|]
decl_stmt|;
name|boolean
name|outbound
init|=
name|params
index|[
literal|1
index|]
decl_stmt|;
name|boolean
name|oneway
init|=
name|params
index|[
literal|2
index|]
decl_stmt|;
name|boolean
name|usingAddressing
init|=
name|params
index|[
literal|3
index|]
decl_stmt|;
name|boolean
name|mapsInContext
init|=
name|params
index|[
literal|4
index|]
decl_stmt|;
name|boolean
name|decoupled
init|=
name|params
index|[
literal|5
index|]
decl_stmt|;
name|boolean
name|zeroLengthAction
init|=
name|params
index|[
literal|6
index|]
decl_stmt|;
name|boolean
name|fault
init|=
name|params
index|[
literal|7
index|]
decl_stmt|;
name|Message
name|message
init|=
name|getMessage
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
name|getExchange
argument_list|()
decl_stmt|;
name|setUpOutbound
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|,
name|outbound
argument_list|,
name|fault
argument_list|)
expr_stmt|;
name|setUpMessageProperty
argument_list|(
name|message
argument_list|,
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|requestor
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|outbound
operator|&&
name|requestor
condition|)
block|{
if|if
condition|(
name|usingAddressing
condition|)
block|{
name|setUpConduit
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
name|setUpUsingAddressing
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|,
name|usingAddressing
argument_list|)
expr_stmt|;
if|if
condition|(
name|usingAddressing
condition|)
block|{
name|setUpRequestor
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|,
name|oneway
argument_list|,
name|mapsInContext
argument_list|,
name|decoupled
argument_list|,
name|zeroLengthAction
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|requestor
condition|)
block|{
name|setUpResponder
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|,
name|oneway
argument_list|,
name|outbound
argument_list|,
name|decoupled
argument_list|,
name|zeroLengthAction
argument_list|,
name|fault
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|getOutInterceptors
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Service
name|serv
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|getService
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|serv
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|serv
operator|.
name|getOutInterceptors
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|exchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
return|return
name|message
return|;
block|}
specifier|private
name|void
name|setUpUsingAddressing
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|usingAddressing
parameter_list|)
block|{
name|setUpMessageExchange
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|getOutInterceptors
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|setUpExchangeGet
argument_list|(
name|exchange
argument_list|,
name|Endpoint
operator|.
name|class
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|EndpointInfo
name|endpointInfo
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|endpointInfo
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|endpointExts
init|=
operator|new
name|ArrayList
argument_list|<
name|ExtensibilityElement
argument_list|>
argument_list|()
decl_stmt|;
name|endpointInfo
operator|.
name|getExtensors
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|endpointExts
argument_list|)
expr_stmt|;
name|BindingInfo
name|bindingInfo
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpointInfo
operator|.
name|getBinding
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|bindingInfo
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|bindingInfo
operator|.
name|getExtensors
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|ServiceInfo
name|serviceInfo
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpointInfo
operator|.
name|getService
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|serviceInfo
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|serviceInfo
operator|.
name|getExtensors
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
expr_stmt|;
name|ExtensibilityElement
name|ext
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|usingAddressing
condition|)
block|{
name|QName
name|elementType
init|=
name|usingAddressing
condition|?
name|Names
operator|.
name|WSAW_USING_ADDRESSING_QNAME
else|:
operator|new
name|QName
argument_list|(
name|SOAP_NAMESPACE
argument_list|,
literal|"encodingStyle"
argument_list|)
decl_stmt|;
name|ext
operator|.
name|getElementType
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|elementType
argument_list|)
expr_stmt|;
name|endpointExts
operator|.
name|add
argument_list|(
name|ext
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setUpRequestor
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|oneway
parameter_list|,
name|boolean
name|mapsInContext
parameter_list|,
name|boolean
name|decoupled
parameter_list|,
name|boolean
name|zeroLengthAction
parameter_list|)
throws|throws
name|Exception
block|{
name|setUpMessageProperty
argument_list|(
name|message
argument_list|,
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|AddressingPropertiesImpl
name|maps
init|=
name|mapsInContext
condition|?
operator|new
name|AddressingPropertiesImpl
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|zeroLengthAction
condition|)
block|{
name|maps
operator|.
name|setAction
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setUpMessageProperty
argument_list|(
name|message
argument_list|,
name|CLIENT_ADDRESSING_PROPERTIES
argument_list|,
name|maps
argument_list|)
expr_stmt|;
name|Method
name|method
init|=
name|SEI
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"op"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|zeroLengthAction
condition|)
block|{
name|setUpMethod
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|setUpMessageProperty
argument_list|(
name|message
argument_list|,
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|expectedAction
operator|=
literal|"http://foo/bar/SEI/opRequest"
expr_stmt|;
block|}
name|setUpMessageProperty
argument_list|(
name|message
argument_list|,
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|setUpOneway
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|,
name|oneway
argument_list|)
expr_stmt|;
name|expectedMAPs
operator|=
name|maps
expr_stmt|;
name|expectedTo
operator|=
name|Names
operator|.
name|WSA_NONE_ADDRESS
expr_stmt|;
name|expectedReplyTo
operator|=
name|oneway
condition|?
name|Names
operator|.
name|WSA_NONE_ADDRESS
else|:
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
expr_stmt|;
comment|// Now verified via verifyMessage()
comment|//EasyMock.eq(CLIENT_ADDRESSING_PROPERTIES_OUTBOUND);
comment|//EasyMock.reportMatcher(new MAPMatcher());
comment|//message.put(CLIENT_ADDRESSING_PROPERTIES_OUTBOUND,
comment|//            mapsInContext
comment|//            ? maps
comment|//            : new AddressingPropertiesImpl());
comment|//EasyMock.expectLastCall().andReturn(null);
block|}
specifier|private
name|void
name|setUpResponder
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|oneway
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|decoupled
parameter_list|,
name|boolean
name|zeroLengthAction
parameter_list|,
name|boolean
name|fault
parameter_list|)
throws|throws
name|Exception
block|{
name|setUpMessageProperty
argument_list|(
name|message
argument_list|,
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|AddressingPropertiesImpl
name|maps
init|=
operator|new
name|AddressingPropertiesImpl
argument_list|()
decl_stmt|;
name|EndpointReferenceType
name|replyTo
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|replyTo
operator|.
name|setAddress
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|decoupled
condition|?
literal|"http://localhost:9999/decoupled"
else|:
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setReplyTo
argument_list|(
name|replyTo
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|faultTo
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|faultTo
operator|.
name|setAddress
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|decoupled
condition|?
literal|"http://localhost:9999/fault"
else|:
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setFaultTo
argument_list|(
name|faultTo
argument_list|)
expr_stmt|;
name|AttributedURIType
name|id
init|=
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
literal|"urn:uuid:12345"
argument_list|)
decl_stmt|;
name|maps
operator|.
name|setMessageID
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|zeroLengthAction
condition|)
block|{
name|maps
operator|.
name|setAction
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setUpMessageProperty
argument_list|(
name|message
argument_list|,
name|SERVER_ADDRESSING_PROPERTIES_INBOUND
argument_list|,
name|maps
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outbound
condition|)
block|{
name|setUpOneway
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|,
name|oneway
argument_list|)
expr_stmt|;
if|if
condition|(
name|oneway
operator|||
name|decoupled
condition|)
block|{
name|setUpRebase
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|outbound
operator|||
name|aggregator
operator|.
name|messageIDs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|zeroLengthAction
condition|)
block|{
name|Method
name|method
init|=
name|SEI
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"op"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|setUpMethod
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|setUpMessageProperty
argument_list|(
name|message
argument_list|,
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
if|if
condition|(
name|fault
condition|)
block|{
name|message
operator|.
name|setContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
operator|new
name|SoapFault
argument_list|(
literal|"blah"
argument_list|,
operator|(
name|Throwable
operator|)
operator|new
name|Exception
argument_list|()
argument_list|,
name|Fault
operator|.
name|FAULT_CODE_SERVER
argument_list|)
argument_list|)
expr_stmt|;
name|expectedAction
operator|=
literal|"http://foo/bar/SEI/Fault/Exception"
expr_stmt|;
block|}
else|else
block|{
name|expectedAction
operator|=
literal|"http://foo/bar/SEI/opResponse"
expr_stmt|;
block|}
block|}
name|setUpMessageProperty
argument_list|(
name|message
argument_list|,
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|setUpMessageProperty
argument_list|(
name|message
argument_list|,
name|SERVER_ADDRESSING_PROPERTIES_INBOUND
argument_list|,
name|maps
argument_list|)
expr_stmt|;
if|if
condition|(
name|fault
condition|)
block|{
comment|// REVISIT test double rebase does not occur
name|setUpRebase
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
name|expectedTo
operator|=
name|decoupled
condition|?
name|fault
condition|?
literal|"http://localhost:9999/fault"
else|:
literal|"http://localhost:9999/decoupled"
else|:
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
expr_stmt|;
name|expectedRelatesTo
operator|=
name|maps
operator|.
name|getMessageID
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
comment|// Now verified via verifyMessage()
comment|//EasyMock.eq(SERVER_ADDRESSING_PROPERTIES_OUTBOUND);
comment|//EasyMock.reportMatcher(new MAPMatcher());
comment|//message.put(SERVER_ADDRESSING_PROPERTIES_OUTBOUND,
comment|//            new AddressingPropertiesImpl());
comment|//EasyMock.expectLastCall().andReturn(null);
block|}
block|}
specifier|private
name|void
name|setUpRebase
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|setUpMessageProperty
argument_list|(
name|message
argument_list|,
literal|"org.apache.cxf.ws.addressing.partial.response.sent"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|Binding
name|binding
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Binding
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|getBinding
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|binding
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Message
name|partialResponse
init|=
name|getMessage
argument_list|()
decl_stmt|;
name|binding
operator|.
name|createMessage
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|partialResponse
argument_list|)
expr_stmt|;
name|Destination
name|target
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpMessageDestination
argument_list|(
name|message
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|Conduit
name|backChannel
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Conduit
operator|.
name|class
argument_list|)
decl_stmt|;
name|target
operator|.
name|getBackChannel
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|message
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|EndpointReferenceType
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|backChannel
argument_list|)
expr_stmt|;
comment|// REVISIT test interceptor chain setup& send
block|}
specifier|private
name|void
name|setUpOneway
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|oneway
parameter_list|)
block|{
name|setUpMessageExchange
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|setUpExchangeOneway
argument_list|(
name|exchange
argument_list|,
name|oneway
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpOutbound
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|fault
parameter_list|)
block|{
name|setUpMessageExchange
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|setUpExchangeOutbound
argument_list|(
name|exchange
argument_list|,
name|message
argument_list|,
name|outbound
argument_list|,
name|fault
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpConduit
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|setUpMessageExchange
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|Conduit
name|conduit
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Conduit
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpExchangeConduit
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|,
name|conduit
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|to
init|=
name|ContextUtils
operator|.
name|WSA_OBJECT_FACTORY
operator|.
name|createEndpointReferenceType
argument_list|()
decl_stmt|;
name|to
operator|.
name|setAddress
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|expectedTo
argument_list|)
argument_list|)
expr_stmt|;
name|conduit
operator|.
name|getTarget
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|to
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setUpMethod
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
name|setUpMessageExchange
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|ServiceInfo
name|si
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|InterfaceInfo
name|iinf
init|=
operator|new
name|InterfaceInfo
argument_list|(
name|si
argument_list|,
operator|new
name|QName
argument_list|(
literal|"http://foo/bar"
argument_list|,
literal|"SEI"
argument_list|)
argument_list|)
decl_stmt|;
name|OperationInfo
name|opInfo
init|=
name|iinf
operator|.
name|addOperation
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://foo/bar"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|opInfo
operator|.
name|setProperty
argument_list|(
name|Method
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|opInfo
operator|.
name|setInput
argument_list|(
literal|"opRequest"
argument_list|,
name|opInfo
operator|.
name|createMessage
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://foo/bar"
argument_list|,
literal|"opRequest"
argument_list|)
argument_list|,
name|Type
operator|.
name|INPUT
argument_list|)
argument_list|)
expr_stmt|;
name|opInfo
operator|.
name|setOutput
argument_list|(
literal|"opResponse"
argument_list|,
name|opInfo
operator|.
name|createMessage
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://foo/bar"
argument_list|,
literal|"opResponse"
argument_list|)
argument_list|,
name|Type
operator|.
name|INPUT
argument_list|)
argument_list|)
expr_stmt|;
name|FaultInfo
name|finfo
init|=
name|opInfo
operator|.
name|addFault
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://foo/bar"
argument_list|,
literal|"opFault"
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
literal|"http://foo/bar"
argument_list|,
literal|"opFault"
argument_list|)
argument_list|)
decl_stmt|;
name|finfo
operator|.
name|addMessagePart
argument_list|(
literal|"fault"
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|bindingOpInfo
init|=
operator|new
name|TestBindingOperationInfo
argument_list|(
name|opInfo
argument_list|)
decl_stmt|;
name|setUpExchangeGet
argument_list|(
name|exchange
argument_list|,
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|bindingOpInfo
argument_list|)
expr_stmt|;
comment|// Usual fun with EasyMock not always working as expected
comment|//BindingOperationInfo bindingOpInfo =
comment|//    EasyMock.createMock(BindingOperationInfo.class);
comment|//OperationInfo opInfo = EasyMock.createMock(OperationInfo.class);
comment|//bindingOpInfo.getOperationInfo();
comment|//EasyMock.expectLastCall().andReturn(opInfo);
comment|//opInfo.getProperty(EasyMock.eq(Method.class.getName()));
comment|//EasyMock.expectLastCall().andReturn(method);
block|}
specifier|private
name|Message
name|getMessage
parameter_list|()
block|{
comment|//return control.createMock(Message.class);
return|return
operator|new
name|MessageImpl
argument_list|()
return|;
block|}
specifier|private
name|Exchange
name|getExchange
parameter_list|()
block|{
name|Bus
name|bus
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|bus
operator|.
name|getExtension
argument_list|(
name|PhaseManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
operator|new
name|PhaseManagerImpl
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Exchange
name|exchange
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|bus
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
comment|//Exchange exchange = new ExchangeImpl();
return|return
name|exchange
return|;
block|}
specifier|private
name|void
name|setUpMessageProperty
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
comment|//message.get(key);
comment|//EasyMock.expectLastCall().andReturn(value);
name|message
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpMessageExchange
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
comment|//message.getExchange();
comment|//EasyMock.expectLastCall().andReturn(exchange);
name|message
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpMessageDestination
parameter_list|(
name|Message
name|message
parameter_list|,
name|Destination
name|target
parameter_list|)
block|{
comment|//message.getDestination();
comment|//EasyMock.expectLastCall().andReturn(target);
operator|(
operator|(
name|MessageImpl
operator|)
name|message
operator|)
operator|.
name|setDestination
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|setUpExchangeGet
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clz
parameter_list|,
name|T
name|value
parameter_list|)
block|{
name|exchange
operator|.
name|get
argument_list|(
name|clz
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|value
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
comment|//exchange.put(Endpoint.class, value);
block|}
specifier|private
name|void
name|setUpExchangeOneway
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|oneway
parameter_list|)
block|{
name|exchange
operator|.
name|isOneWay
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|oneway
argument_list|)
expr_stmt|;
comment|//exchange.setOneWay(oneway);
block|}
specifier|private
name|void
name|setUpExchangeOutbound
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Message
name|message
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|fault
parameter_list|)
block|{
if|if
condition|(
name|fault
condition|)
block|{
name|exchange
operator|.
name|getOutFaultMessage
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|getOutMessage
argument_list|()
expr_stmt|;
block|}
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|outbound
condition|?
name|message
else|:
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
comment|//exchange.setOutMessage(outbound ? message : new MessageImpl());
block|}
specifier|private
name|void
name|setUpExchangeConduit
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Conduit
name|conduit
parameter_list|)
block|{
comment|//exchange.getConduit(message);
comment|//EasyMock.expectLastCall().andReturn(conduit);
comment|//exchange.setConduit(conduit);
block|}
specifier|private
name|boolean
name|verifyMAPs
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|AddressingPropertiesImpl
condition|)
block|{
name|AddressingPropertiesImpl
name|other
init|=
operator|(
name|AddressingPropertiesImpl
operator|)
name|obj
decl_stmt|;
return|return
name|compareExpected
argument_list|(
name|other
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|compareExpected
parameter_list|(
name|AddressingPropertiesImpl
name|other
parameter_list|)
block|{
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|expectedMAPs
operator|==
literal|null
operator|||
name|expectedMAPs
operator|==
name|other
condition|)
block|{
name|boolean
name|toOK
init|=
name|expectedTo
operator|==
literal|null
operator|||
name|expectedTo
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getTo
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|replyToOK
init|=
name|expectedReplyTo
operator|==
literal|null
operator|||
name|expectedReplyTo
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getReplyTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|relatesToOK
init|=
name|expectedRelatesTo
operator|==
literal|null
operator|||
name|expectedRelatesTo
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getRelatesTo
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|actionOK
init|=
name|expectedAction
operator|==
literal|null
operator|||
name|expectedAction
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getAction
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|messageIdOK
init|=
name|other
operator|.
name|getMessageID
argument_list|()
operator|!=
literal|null
decl_stmt|;
name|ret
operator|=
name|toOK
operator|&&
name|replyToOK
operator|&&
name|relatesToOK
operator|&&
name|actionOK
operator|&&
name|messageIdOK
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|String
name|getMAPProperty
parameter_list|(
name|boolean
name|requestor
parameter_list|,
name|boolean
name|outbound
parameter_list|)
block|{
return|return
name|requestor
condition|?
name|outbound
condition|?
name|CLIENT_ADDRESSING_PROPERTIES_OUTBOUND
else|:
name|CLIENT_ADDRESSING_PROPERTIES_INBOUND
else|:
name|outbound
condition|?
name|SERVER_ADDRESSING_PROPERTIES_OUTBOUND
else|:
name|SERVER_ADDRESSING_PROPERTIES_INBOUND
return|;
block|}
specifier|private
name|void
name|verifyMessage
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|requestor
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|expectMapsInContext
parameter_list|)
block|{
if|if
condition|(
name|expectMapsInContext
condition|)
block|{
name|assertTrue
argument_list|(
literal|"unexpected MAPs"
argument_list|,
name|verifyMAPs
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|getMAPProperty
argument_list|(
name|requestor
argument_list|,
name|outbound
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
interface|interface
name|SEI
block|{
annotation|@
name|RequestWrapper
argument_list|(
name|targetNamespace
operator|=
literal|"http://foo/bar"
argument_list|,
name|className
operator|=
literal|"SEI"
argument_list|,
name|localName
operator|=
literal|"opRequest"
argument_list|)
annotation|@
name|ResponseWrapper
argument_list|(
name|targetNamespace
operator|=
literal|"http://foo/bar"
argument_list|,
name|className
operator|=
literal|"SEI"
argument_list|,
name|localName
operator|=
literal|"opResponse"
argument_list|)
name|String
name|op
parameter_list|()
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|TestBindingMessageInfo
extends|extends
name|BindingMessageInfo
block|{     }
specifier|private
specifier|static
class|class
name|TestBindingOperationInfo
extends|extends
name|BindingOperationInfo
block|{
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|BindingFaultInfo
argument_list|>
name|faults
decl_stmt|;
specifier|public
name|TestBindingOperationInfo
parameter_list|(
name|OperationInfo
name|oi
parameter_list|)
block|{
name|opInfo
operator|=
name|oi
expr_stmt|;
name|Collection
argument_list|<
name|FaultInfo
argument_list|>
name|of
init|=
name|opInfo
operator|.
name|getFaults
argument_list|()
decl_stmt|;
if|if
condition|(
name|of
operator|!=
literal|null
operator|&&
operator|!
name|of
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|faults
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|QName
argument_list|,
name|BindingFaultInfo
argument_list|>
argument_list|(
name|of
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FaultInfo
name|fault
range|:
name|of
control|)
block|{
name|faults
operator|.
name|put
argument_list|(
name|fault
operator|.
name|getFaultName
argument_list|()
argument_list|,
operator|new
name|BindingFaultInfo
argument_list|(
name|fault
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|BindingMessageInfo
name|getInput
parameter_list|()
block|{
return|return
operator|new
name|TestBindingMessageInfo
argument_list|()
return|;
block|}
specifier|public
name|BindingMessageInfo
name|getOutput
parameter_list|()
block|{
return|return
operator|new
name|TestBindingMessageInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|BindingFaultInfo
argument_list|>
name|getFaults
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|this
operator|.
name|faults
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

