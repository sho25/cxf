begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AttributedURIType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMConfiguration
operator|.
name|DeliveryAssurance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|AcksPolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|DestinationPolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceAcknowledgement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DestinationSequenceTest
extends|extends
name|Assert
block|{
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|ObjectFactory
name|factory
decl_stmt|;
specifier|private
name|Identifier
name|id
decl_stmt|;
specifier|private
name|EndpointReferenceType
name|ref
decl_stmt|;
specifier|private
name|Destination
name|destination
decl_stmt|;
specifier|private
name|RMManager
name|manager
decl_stmt|;
specifier|private
name|RMEndpoint
name|endpoint
decl_stmt|;
specifier|private
name|RMConfiguration
name|config
decl_stmt|;
specifier|private
name|AcksPolicyType
name|ap
decl_stmt|;
specifier|private
name|DestinationPolicyType
name|dp
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|control
operator|.
name|makeThreadSafe
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|=
operator|new
name|ObjectFactory
argument_list|()
expr_stmt|;
name|ref
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointReferenceType
operator|.
name|class
argument_list|)
expr_stmt|;
name|id
operator|=
name|factory
operator|.
name|createIdentifier
argument_list|()
expr_stmt|;
name|id
operator|.
name|setValue
argument_list|(
literal|"seq"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|ref
operator|=
literal|null
expr_stmt|;
name|destination
operator|=
literal|null
expr_stmt|;
name|manager
operator|=
literal|null
expr_stmt|;
name|config
operator|=
literal|null
expr_stmt|;
name|dp
operator|=
literal|null
expr_stmt|;
name|ap
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstructors
parameter_list|()
block|{
name|Identifier
name|otherId
init|=
name|factory
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|otherId
operator|.
name|setValue
argument_list|(
literal|"otherSeq"
argument_list|)
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getLastMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ref
argument_list|,
name|seq
operator|.
name|getAcksTo
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
operator|.
name|getAcknowledgment
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
operator|.
name|getMonitor
argument_list|()
argument_list|)
expr_stmt|;
name|SequenceAcknowledgement
name|ack
init|=
operator|new
name|SequenceAcknowledgement
argument_list|()
decl_stmt|;
name|seq
operator|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
literal|10
argument_list|,
name|ack
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|seq
operator|.
name|getLastMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ref
argument_list|,
name|seq
operator|.
name|getAcksTo
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ack
argument_list|,
name|seq
operator|.
name|getAcknowledgment
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
operator|.
name|getMonitor
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsAndHashCode
parameter_list|()
block|{
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|DestinationSequence
name|otherSeq
init|=
literal|null
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|seq
operator|.
name|equals
argument_list|(
name|otherSeq
argument_list|)
argument_list|)
expr_stmt|;
name|otherSeq
operator|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|seq
argument_list|,
name|otherSeq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|seq
operator|.
name|hashCode
argument_list|()
argument_list|,
name|otherSeq
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Identifier
name|otherId
init|=
name|factory
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|otherId
operator|.
name|setValue
argument_list|(
literal|"otherSeq"
argument_list|)
expr_stmt|;
name|otherSeq
operator|=
operator|new
name|DestinationSequence
argument_list|(
name|otherId
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|seq
operator|.
name|equals
argument_list|(
name|otherSeq
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|seq
operator|.
name|hashCode
argument_list|()
operator|!=
name|otherSeq
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|seq
operator|.
name|equals
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSetDestination
parameter_list|()
block|{
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|seq
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|destination
argument_list|,
name|seq
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEndpointIdentifier
parameter_list|()
block|{
name|setUpDestination
argument_list|()
expr_stmt|;
name|String
name|name
init|=
literal|"abc"
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destination
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected endpoint identifier"
argument_list|,
name|name
argument_list|,
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcknowledgeBasic
parameter_list|()
throws|throws
name|SequenceFault
block|{
name|Timer
name|timer
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Timer
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpDestination
argument_list|(
name|timer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Message
name|message1
init|=
name|setUpMessage
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|Message
name|message2
init|=
name|setUpMessage
argument_list|(
literal|"2"
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AcknowledgementRange
argument_list|>
name|ranges
init|=
name|seq
operator|.
name|getAcknowledgment
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|.
name|acknowledge
argument_list|(
name|message1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AcknowledgementRange
name|r1
init|=
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r1
operator|.
name|getLower
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r1
operator|.
name|getUpper
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|.
name|acknowledge
argument_list|(
name|message2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|r1
operator|=
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r1
operator|.
name|getLower
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r1
operator|.
name|getUpper
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
comment|/*    @Test     public void testAcknowledgeLastMessageNumberExceeded() throws SequenceFault {           Timer timer = control.createMock(Timer.class);         RMEndpoint rme = EasyMock.createMock(RMEndpoint.class);         EasyMock.expect(rme.getEncoderDecoder()).andReturn(EncoderDecoder10Impl.INSTANCE).anyTimes();         setUpDestination(timer, rme);         Message message1 = setUpMessage("1");         Message message2 = setUpMessage("2", true);         control.replay();                  DestinationSequence seq = new DestinationSequence(id, ref, destination);                  seq.acknowledge(message1);         seq.setLastMessageNumber(1);         try {             seq.acknowledge(message2);             fail("Expected SequenceFault not thrown.");         } catch (SequenceFault sf) {             assertEquals("SequenceTerminated", sf.getSequenceFault().getFaultCode().getLocalPart());         }                  control.verify();     }   */
annotation|@
name|Test
specifier|public
name|void
name|testAcknowledgeAppendRange
parameter_list|()
throws|throws
name|SequenceFault
block|{
name|Timer
name|timer
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Timer
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpDestination
argument_list|(
name|timer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Message
index|[]
name|messages
init|=
operator|new
name|Message
index|[]
block|{
name|setUpMessage
argument_list|(
literal|"1"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"2"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"5"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"4"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"6"
argument_list|)
block|}
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AcknowledgementRange
argument_list|>
name|ranges
init|=
name|seq
operator|.
name|getAcknowledgment
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|seq
operator|.
name|acknowledge
argument_list|(
name|messages
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AcknowledgementRange
name|r
init|=
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|getLower
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|getUpper
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|ranges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|r
operator|.
name|getLower
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|r
operator|.
name|getUpper
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcknowledgeInsertRange
parameter_list|()
throws|throws
name|SequenceFault
block|{
name|Timer
name|timer
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Timer
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpDestination
argument_list|(
name|timer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Message
index|[]
name|messages
init|=
operator|new
name|Message
index|[]
block|{
name|setUpMessage
argument_list|(
literal|"1"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"2"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"9"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"10"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"4"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"9"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"2"
argument_list|)
block|}
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AcknowledgementRange
argument_list|>
name|ranges
init|=
name|seq
operator|.
name|getAcknowledgment
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|seq
operator|.
name|acknowledge
argument_list|(
name|messages
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AcknowledgementRange
name|r
init|=
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|getLower
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|getUpper
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|ranges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|r
operator|.
name|getLower
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|r
operator|.
name|getUpper
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|ranges
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|r
operator|.
name|getLower
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|r
operator|.
name|getUpper
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcknowledgePrependRange
parameter_list|()
throws|throws
name|SequenceFault
block|{
name|Timer
name|timer
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Timer
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpDestination
argument_list|(
name|timer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Message
index|[]
name|messages
init|=
operator|new
name|Message
index|[]
block|{
name|setUpMessage
argument_list|(
literal|"4"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"5"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"6"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"4"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"2"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"2"
argument_list|)
block|}
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AcknowledgementRange
argument_list|>
name|ranges
init|=
name|seq
operator|.
name|getAcknowledgment
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|seq
operator|.
name|acknowledge
argument_list|(
name|messages
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AcknowledgementRange
name|r
init|=
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|getLower
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|getUpper
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|ranges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|r
operator|.
name|getLower
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|r
operator|.
name|getUpper
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMerge
parameter_list|()
block|{
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AcknowledgementRange
argument_list|>
name|ranges
init|=
name|seq
operator|.
name|getAcknowledgment
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
decl_stmt|;
name|AcknowledgementRange
name|r
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|r
operator|=
operator|new
name|AcknowledgementRange
argument_list|()
expr_stmt|;
name|r
operator|.
name|setLower
argument_list|(
operator|new
name|Long
argument_list|(
literal|3
operator|*
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUpper
argument_list|(
operator|new
name|Long
argument_list|(
literal|3
operator|*
name|i
operator|+
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|ranges
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|seq
operator|.
name|mergeRanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|1
argument_list|)
argument_list|,
name|r
operator|.
name|getLower
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|15
argument_list|)
argument_list|,
name|r
operator|.
name|getUpper
argument_list|()
argument_list|)
expr_stmt|;
name|ranges
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|r
operator|=
operator|new
name|AcknowledgementRange
argument_list|()
expr_stmt|;
name|r
operator|.
name|setLower
argument_list|(
operator|new
name|Long
argument_list|(
literal|3
operator|*
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUpper
argument_list|(
operator|new
name|Long
argument_list|(
literal|3
operator|*
name|i
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|ranges
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|seq
operator|.
name|mergeRanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ranges
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|2
condition|)
block|{
name|r
operator|=
operator|new
name|AcknowledgementRange
argument_list|()
expr_stmt|;
name|r
operator|.
name|setLower
argument_list|(
operator|new
name|Long
argument_list|(
literal|3
operator|*
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUpper
argument_list|(
operator|new
name|Long
argument_list|(
literal|3
operator|*
name|i
operator|+
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|ranges
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
name|seq
operator|.
name|mergeRanges
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|1
argument_list|)
argument_list|,
name|r
operator|.
name|getLower
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|6
argument_list|)
argument_list|,
name|r
operator|.
name|getUpper
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|ranges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|10
argument_list|)
argument_list|,
name|r
operator|.
name|getLower
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|15
argument_list|)
argument_list|,
name|r
operator|.
name|getUpper
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMonitor
parameter_list|()
throws|throws
name|SequenceFault
block|{
name|Timer
name|timer
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Timer
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpDestination
argument_list|(
name|timer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Message
index|[]
name|messages
init|=
operator|new
name|Message
index|[
literal|15
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|messages
index|[
name|i
index|]
operator|=
name|setUpMessage
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|SequenceMonitor
name|monitor
init|=
name|seq
operator|.
name|getMonitor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|setMonitorInterval
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|monitor
operator|.
name|getMPM
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|seq
operator|.
name|acknowledge
argument_list|(
name|messages
index|[
name|i
index|]
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|55
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|int
name|mpm1
init|=
name|monitor
operator|.
name|getMPM
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"unexpected MPM: "
operator|+
name|mpm1
argument_list|,
name|mpm1
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|<
name|messages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|seq
operator|.
name|acknowledge
argument_list|(
name|messages
index|[
name|i
index|]
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|110
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|int
name|mpm2
init|=
name|monitor
operator|.
name|getMPM
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|mpm2
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mpm1
operator|>
name|mpm2
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcknowledgeImmediate
parameter_list|()
throws|throws
name|SequenceFault
block|{
name|Timer
name|timer
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Timer
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpDestination
argument_list|(
name|timer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|seq
operator|.
name|sendAcknowledgement
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|.
name|acknowledge
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|seq
operator|.
name|sendAcknowledgement
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|.
name|acknowledgmentSent
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|sendAcknowledgement
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcknowledgeDeferred
parameter_list|()
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpDestination
argument_list|(
name|timer
argument_list|,
name|rme
argument_list|)
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|Proxy
name|proxy
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Proxy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getProxy
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|proxy
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|proxy
operator|.
name|acknowledge
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|Message
index|[]
name|messages
init|=
operator|new
name|Message
index|[]
block|{
name|setUpMessage
argument_list|(
literal|"1"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"2"
argument_list|)
block|,
name|setUpMessage
argument_list|(
literal|"3"
argument_list|)
block|}
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|ap
operator|.
name|setIntraMessageThreshold
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|config
operator|.
name|setAcknowledgementInterval
argument_list|(
operator|new
name|Long
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|seq
operator|.
name|sendAcknowledgement
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|seq
operator|.
name|acknowledge
argument_list|(
name|messages
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|seq
operator|.
name|sendAcknowledgement
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
name|assertTrue
argument_list|(
name|seq
operator|.
name|sendAcknowledgement
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|.
name|acknowledgmentSent
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|sendAcknowledgement
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCorrelationID
parameter_list|()
block|{
name|setUpDestination
argument_list|()
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|String
name|correlationID
init|=
literal|"abdc1234"
decl_stmt|;
name|assertNull
argument_list|(
literal|"unexpected correlation ID"
argument_list|,
name|seq
operator|.
name|getCorrelationID
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setCorrelationID
argument_list|(
name|correlationID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected correlation ID"
argument_list|,
name|correlationID
argument_list|,
name|seq
operator|.
name|getCorrelationID
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testApplyDeliveryAssuranceAtMostOnce
parameter_list|()
throws|throws
name|RMException
block|{
name|setUpDestination
argument_list|()
expr_stmt|;
name|long
name|mn
init|=
literal|10
decl_stmt|;
name|SequenceAcknowledgement
name|ack
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SequenceAcknowledgement
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AcknowledgementRange
argument_list|>
name|ranges
init|=
operator|new
name|ArrayList
argument_list|<
name|AcknowledgementRange
argument_list|>
argument_list|()
decl_stmt|;
name|AcknowledgementRange
name|r
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AcknowledgementRange
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ack
operator|.
name|getAcknowledgementRange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ranges
argument_list|)
expr_stmt|;
name|config
operator|.
name|setDeliveryAssurance
argument_list|(
name|DeliveryAssurance
operator|.
name|AT_MOST_ONCE
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|DestinationSequence
name|ds
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
literal|0
argument_list|,
name|ack
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|ds
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|ds
operator|.
name|applyDeliveryAssurance
argument_list|(
name|mn
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ranges
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destination
operator|.
name|getReliableEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|config
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ack
operator|.
name|getAcknowledgementRange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ranges
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|r
operator|.
name|getLower
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Long
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|r
operator|.
name|getUpper
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Long
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|ds
operator|.
name|applyDeliveryAssurance
argument_list|(
name|mn
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInOrderWait
parameter_list|()
block|{
name|setUpDestination
argument_list|()
expr_stmt|;
name|Message
index|[]
name|messages
init|=
operator|new
name|Message
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|messages
index|[
name|i
index|]
operator|=
name|setUpMessage
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|setDeliveryAssurance
argument_list|(
name|DeliveryAssurance
operator|.
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|SequenceAcknowledgement
name|ack
init|=
name|factory
operator|.
name|createSequenceAcknowledgement
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|AcknowledgementRange
argument_list|>
name|ranges
init|=
operator|new
name|ArrayList
argument_list|<
name|AcknowledgementRange
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AcknowledgementRange
name|r
init|=
name|factory
operator|.
name|createSequenceAcknowledgementAcknowledgementRange
argument_list|()
decl_stmt|;
name|r
operator|.
name|setUpper
argument_list|(
operator|new
name|Long
argument_list|(
name|messages
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|ranges
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
specifier|final
name|DestinationSequence
name|ds
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
literal|0
argument_list|,
name|ack
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|ds
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
class|class
name|Acknowledger
extends|extends
name|Thread
block|{
name|Message
name|message
decl_stmt|;
name|long
name|messageNr
decl_stmt|;
name|Acknowledger
parameter_list|(
name|Message
name|m
parameter_list|,
name|long
name|mn
parameter_list|)
block|{
name|message
operator|=
name|m
expr_stmt|;
name|messageNr
operator|=
name|mn
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ds
operator|.
name|acknowledge
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|ds
operator|.
name|applyDeliveryAssurance
argument_list|(
name|messageNr
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|messages
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|messages
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Acknowledger
argument_list|(
name|messages
index|[
name|i
index|]
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|boolean
name|timedOut
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|timedOut
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"timed out waiting for messages to be processed in order"
argument_list|,
operator|!
name|timedOut
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScheduleSequenceTermination
parameter_list|()
throws|throws
name|SequenceFault
block|{
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getProxy
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|control
operator|.
name|createMock
argument_list|(
name|Proxy
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|setUpDestination
argument_list|(
name|timer
argument_list|,
name|rme
argument_list|)
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|destination
operator|.
name|terminateSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|Message
name|message
init|=
name|setUpMessage
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|long
name|arrival
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getLastApplicationMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|arrival
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|config
operator|.
name|setInactivityTimeout
argument_list|(
operator|new
name|Long
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|seq
operator|.
name|acknowledge
argument_list|(
name|message
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequenceTermination
parameter_list|()
block|{
name|destination
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destination
operator|.
name|getReliableEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rme
argument_list|)
expr_stmt|;
name|DestinationSequence
operator|.
name|SequenceTermination
name|st
init|=
name|seq
operator|.
expr|new
name|SequenceTermination
argument_list|()
decl_stmt|;
name|st
operator|.
name|updateInactivityTimeout
argument_list|(
literal|30000L
argument_list|)
expr_stmt|;
name|long
name|lastAppMessage
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|30000L
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getLastControlMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getLastApplicationMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|lastAppMessage
argument_list|)
expr_stmt|;
name|destination
operator|.
name|terminateSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|st
operator|.
name|run
argument_list|()
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequenceTerminationNotNecessary
parameter_list|()
block|{
name|destination
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
expr_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destination
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|Timer
name|t
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getTimer
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destination
operator|.
name|getReliableEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rme
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|DestinationSequence
operator|.
name|SequenceTermination
name|st
init|=
name|seq
operator|.
expr|new
name|SequenceTermination
argument_list|()
decl_stmt|;
name|st
operator|.
name|updateInactivityTimeout
argument_list|(
literal|30000L
argument_list|)
expr_stmt|;
name|long
name|lastAppMessage
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|1000L
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getLastControlMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getLastApplicationMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|lastAppMessage
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|st
operator|.
name|run
argument_list|()
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCanPiggybackAckOnPartialResponse
parameter_list|()
block|{
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|AttributedURIType
name|uri
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AttributedURIType
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ref
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|String
name|addr
init|=
literal|"http://localhost:9999/reponses"
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|uri
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|seq
operator|.
name|canPiggybackAckOnPartialResponse
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ref
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|uri
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|seq
operator|.
name|canPiggybackAckOnPartialResponse
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPurgeAcknowledged
parameter_list|()
block|{
name|destination
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destination
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|RMStore
name|store
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getStore
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeMessages
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|id
argument_list|)
argument_list|,
name|CastUtils
operator|.
name|cast
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|Collection
operator|.
name|class
argument_list|)
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|seq
operator|.
name|purgeAcknowledged
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCancelDeferredAcknowledgements
parameter_list|()
block|{
name|destination
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
expr_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destination
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|Timer
name|t
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getTimer
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|seq
operator|.
name|scheduleDeferredAcknowledgement
argument_list|(
literal|30000L
argument_list|)
expr_stmt|;
name|seq
operator|.
name|cancelDeferredAcknowledgments
argument_list|()
expr_stmt|;
name|seq
operator|.
name|cancelDeferredAcknowledgments
argument_list|()
expr_stmt|;
name|t
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCancelTermination
parameter_list|()
block|{
name|destination
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
expr_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destination
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|Timer
name|t
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getTimer
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|id
argument_list|,
name|ref
argument_list|,
name|destination
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|seq
operator|.
name|scheduleSequenceTermination
argument_list|(
literal|30000L
argument_list|)
expr_stmt|;
name|seq
operator|.
name|cancelTermination
argument_list|()
expr_stmt|;
name|t
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setUpDestination
parameter_list|()
block|{
name|setUpDestination
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpDestination
parameter_list|(
name|Timer
name|timer
parameter_list|,
name|RMEndpoint
name|rme
parameter_list|)
block|{
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|ObjectFactory
name|cfgFactory
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|ObjectFactory
argument_list|()
decl_stmt|;
name|dp
operator|=
name|cfgFactory
operator|.
name|createDestinationPolicyType
argument_list|()
expr_stmt|;
name|ap
operator|=
name|cfgFactory
operator|.
name|createAcksPolicyType
argument_list|()
expr_stmt|;
name|dp
operator|.
name|setAcksPolicy
argument_list|(
name|ap
argument_list|)
expr_stmt|;
name|config
operator|=
operator|new
name|RMConfiguration
argument_list|()
expr_stmt|;
name|config
operator|.
name|setBaseRetransmissionInterval
argument_list|(
operator|new
name|Long
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|config
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|endpoint
operator|=
name|rme
expr_stmt|;
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
name|endpoint
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|config
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getDestinationPolicy
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dp
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getStore
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|destination
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destination
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|manager
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destination
operator|.
name|getReliableEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|timer
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getTimer
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|timer
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Message
name|setUpMessage
parameter_list|(
name|String
name|messageNr
parameter_list|)
block|{
return|return
name|setUpMessage
argument_list|(
name|messageNr
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|Message
name|setUpMessage
parameter_list|(
name|String
name|messageNr
parameter_list|,
name|boolean
name|useuri
parameter_list|)
block|{
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getOutMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getOutFaultMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|RMProperties
name|rmps
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMProperties
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|RMMessageConstants
operator|.
name|RM_PROPERTIES_INBOUND
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rmps
argument_list|)
expr_stmt|;
name|SequenceType
name|st
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SequenceType
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rmps
operator|.
name|getSequence
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|Long
name|val
init|=
operator|new
name|Long
argument_list|(
name|messageNr
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|st
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|useuri
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|rmps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
block|}
end_class

end_unit

