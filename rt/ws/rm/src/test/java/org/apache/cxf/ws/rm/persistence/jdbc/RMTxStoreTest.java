begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|ProtocolVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|SourceSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|RMTxStoreTest
extends|extends
name|RMTxStoreTestBase
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpOnce
parameter_list|()
block|{
name|RMTxStoreTestBase
operator|.
name|setUpOnce
argument_list|()
expr_stmt|;
name|RMTxStore
operator|.
name|deleteDatabaseFiles
argument_list|()
expr_stmt|;
name|store
operator|=
operator|new
name|RMTxStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setDriverClassName
argument_list|(
literal|"org.apache.derby.jdbc.EmbeddedDriver"
argument_list|)
expr_stmt|;
name|store
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownOnce
parameter_list|()
block|{
comment|/*         try {             store.getConnection().close();         } catch (SQLException ex) {             ex.printStackTrace();         }         */
name|RMTxStore
operator|.
name|deleteDatabaseFiles
argument_list|(
name|RMTxStore
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReconnect
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set the initial reconnect delay to 100 msec for testing
name|long
name|ird
init|=
name|store
operator|.
name|getInitialReconnectDelay
argument_list|()
decl_stmt|;
name|store
operator|.
name|setInitialReconnectDelay
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|SourceSequence
name|seq
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SourceSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|Identifier
name|sid1
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|sid1
operator|.
name|setValue
argument_list|(
literal|"sequence1"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getExpires
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getOfferingSequenceIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|CLIENT_ENDPOINT_ID
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getProtocol
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
comment|// intentionally invalidate the connection
try|try
block|{
name|store
operator|.
name|getConnection
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|store
operator|.
name|createSourceSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected RMStoreException was not thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RMStoreException
name|ex
parameter_list|)
block|{
name|SQLException
name|se
init|=
operator|(
name|SQLException
operator|)
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
comment|// expects a transient or non-transient connection exception
name|assertTrue
argument_list|(
name|se
operator|.
name|getSQLState
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"08"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// wait 200 msecs to make sure an reconnect is attempted
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getExpires
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getOfferingSequenceIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|CLIENT_ENDPOINT_ID
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getProtocol
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|createSourceSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
comment|// revert to the old initial reconnect delay
name|store
operator|.
name|setInitialReconnectDelay
argument_list|(
name|ird
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeSourceSequence
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|store
operator|.
name|verifyConnection
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|releaseConnection
parameter_list|(
name|Connection
name|con
parameter_list|)
block|{
comment|// the connection is held in the store, so not close it until the store is disposed.
block|}
block|}
end_class

end_unit

