begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|DestinationSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|ProtocolVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|SourceSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceAcknowledgement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|RMTxStoreTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CLIENT_ENDPOINT_ID
init|=
literal|"celtix.{http://celtix.objectweb.org/greeter_control}GreeterService/GreeterPort"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SERVER_ENDPOINT_ID
init|=
literal|"celtix.{http://celtix.objectweb.org/greeter_control}GreeterService"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NON_ANON_ACKS_TO
init|=
literal|"http://localhost:9999/decoupled_endpoint"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Long
name|ZERO
init|=
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Long
name|ONE
init|=
operator|new
name|Long
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Long
name|TEN
init|=
operator|new
name|Long
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|RMTxStore
name|store
decl_stmt|;
specifier|private
specifier|static
name|SequenceAcknowledgement
name|ack1
decl_stmt|;
specifier|private
specifier|static
name|SequenceAcknowledgement
name|ack2
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpOnce
parameter_list|()
block|{
name|RMTxStore
operator|.
name|deleteDatabaseFiles
argument_list|()
expr_stmt|;
name|store
operator|=
operator|new
name|RMTxStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setDriverClassName
argument_list|(
literal|"org.apache.derby.jdbc.EmbeddedDriver"
argument_list|)
expr_stmt|;
name|store
operator|.
name|init
argument_list|()
expr_stmt|;
name|ack1
operator|=
operator|new
name|SequenceAcknowledgement
argument_list|()
expr_stmt|;
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|range
init|=
operator|new
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
argument_list|()
decl_stmt|;
name|range
operator|.
name|setLower
argument_list|(
name|ONE
argument_list|)
expr_stmt|;
name|range
operator|.
name|setUpper
argument_list|(
name|ONE
argument_list|)
expr_stmt|;
name|ack1
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|ack2
operator|=
operator|new
name|SequenceAcknowledgement
argument_list|()
expr_stmt|;
name|range
operator|=
operator|new
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
argument_list|()
expr_stmt|;
name|range
operator|.
name|setLower
argument_list|(
name|ONE
argument_list|)
expr_stmt|;
name|range
operator|.
name|setUpper
argument_list|(
name|ONE
argument_list|)
expr_stmt|;
name|ack2
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|range
operator|=
operator|new
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
argument_list|()
expr_stmt|;
name|range
operator|.
name|setLower
argument_list|(
operator|new
name|Long
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|range
operator|.
name|setUpper
argument_list|(
name|TEN
argument_list|)
expr_stmt|;
name|ack2
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownOnce
parameter_list|()
block|{
comment|/*         try {             store.getConnection().close();         } catch (SQLException ex) {             ex.printStackTrace();         }         */
name|RMTxStore
operator|.
name|deleteDatabaseFiles
argument_list|(
name|RMTxStore
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTables
parameter_list|()
throws|throws
name|SQLException
block|{
comment|// tables should  have been created during initialisation
comment|// but verify the operation is idempotent
name|store
operator|.
name|createTables
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateDeleteSrcSequences
parameter_list|()
block|{
name|SourceSequence
name|seq
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SourceSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|Identifier
name|sid1
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid1
operator|.
name|setValue
argument_list|(
literal|"sequence1"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getExpires
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getOfferingSequenceIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|CLIENT_ENDPOINT_ID
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|createSourceSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getExpires
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getOfferingSequenceIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|CLIENT_ENDPOINT_ID
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|store
operator|.
name|createSourceSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected RMStoreException was not thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RMStoreException
name|ex
parameter_list|)
block|{
name|SQLException
name|se
init|=
operator|(
name|SQLException
operator|)
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
comment|// duplicate key value
name|assertEquals
argument_list|(
literal|"23505"
argument_list|,
name|se
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Identifier
name|sid2
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid2
operator|.
name|setValue
argument_list|(
literal|"sequence2"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getExpires
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|Identifier
name|sid3
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid3
operator|.
name|setValue
argument_list|(
literal|"offeringSequence3"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getOfferingSequenceIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid3
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|SERVER_ENDPOINT_ID
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|createSourceSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|store
operator|.
name|removeSourceSequence
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeSourceSequence
argument_list|(
name|sid2
argument_list|)
expr_stmt|;
comment|// deleting once again is a no-op
name|store
operator|.
name|removeSourceSequence
argument_list|(
name|sid2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateDeleteDestSequences
parameter_list|()
block|{
name|DestinationSequence
name|seq
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|Identifier
name|sid1
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid1
operator|.
name|setValue
argument_list|(
literal|"sequence1"
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|epr
init|=
name|RMUtils
operator|.
name|createAnonymousReference
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getAcksTo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epr
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|SERVER_ENDPOINT_ID
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|createDestinationSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getAcksTo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epr
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|SERVER_ENDPOINT_ID
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|store
operator|.
name|createDestinationSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected RMStoreException was not thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RMStoreException
name|ex
parameter_list|)
block|{
name|SQLException
name|se
init|=
operator|(
name|SQLException
operator|)
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
comment|// duplicate key value
name|assertEquals
argument_list|(
literal|"23505"
argument_list|,
name|se
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Identifier
name|sid2
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid2
operator|.
name|setValue
argument_list|(
literal|"sequence2"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid2
argument_list|)
expr_stmt|;
name|epr
operator|=
name|RMUtils
operator|.
name|createReference
argument_list|(
name|NON_ANON_ACKS_TO
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getAcksTo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epr
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|CLIENT_ENDPOINT_ID
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|createDestinationSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|store
operator|.
name|removeDestinationSequence
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeDestinationSequence
argument_list|(
name|sid2
argument_list|)
expr_stmt|;
comment|// deleting once again is a no-op
name|store
operator|.
name|removeDestinationSequence
argument_list|(
name|sid2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateDeleteMessages
parameter_list|()
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|RMMessage
name|msg1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMMessage
name|msg2
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Identifier
name|sid1
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid1
operator|.
name|setValue
argument_list|(
literal|"sequence1"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg1
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ONE
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg2
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ONE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|89
index|]
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg1
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg1
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|(
name|long
operator|)
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg2
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg2
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|(
name|long
operator|)
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|store
operator|.
name|storeMessage
argument_list|(
name|sid1
argument_list|,
name|msg1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeMessage
argument_list|(
name|sid1
argument_list|,
name|msg2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|commit
argument_list|()
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg1
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ONE
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg1
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg1
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|(
name|long
operator|)
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|store
operator|.
name|storeMessage
argument_list|(
name|sid1
argument_list|,
name|msg1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"23505"
argument_list|,
name|ex
operator|.
name|getSQLState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|abort
argument_list|()
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg1
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|TEN
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg2
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|TEN
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg1
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg1
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|(
name|long
operator|)
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg2
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg2
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|(
name|long
operator|)
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|store
operator|.
name|storeMessage
argument_list|(
name|sid1
argument_list|,
name|msg1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeMessage
argument_list|(
name|sid1
argument_list|,
name|msg2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|commit
argument_list|()
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|Long
argument_list|>
name|messageNrs
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|messageNrs
operator|.
name|add
argument_list|(
name|ZERO
argument_list|)
expr_stmt|;
name|messageNrs
operator|.
name|add
argument_list|(
name|TEN
argument_list|)
expr_stmt|;
name|messageNrs
operator|.
name|add
argument_list|(
name|ONE
argument_list|)
expr_stmt|;
name|messageNrs
operator|.
name|add
argument_list|(
name|TEN
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeMessages
argument_list|(
name|sid1
argument_list|,
name|messageNrs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeMessages
argument_list|(
name|sid1
argument_list|,
name|messageNrs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Identifier
name|sid2
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid1
operator|.
name|setValue
argument_list|(
literal|"sequence2"
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeMessages
argument_list|(
name|sid2
argument_list|,
name|messageNrs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateDestinationSequence
parameter_list|()
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|DestinationSequence
name|seq
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|Identifier
name|sid1
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid1
operator|.
name|setValue
argument_list|(
literal|"sequence1"
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|epr
init|=
name|RMUtils
operator|.
name|createAnonymousReference
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getAcksTo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epr
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|SERVER_ENDPOINT_ID
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|createDestinationSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getLastMessageNumber
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getAcknowledgment
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ack1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|store
operator|.
name|updateDestinationSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|store
operator|.
name|abort
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getLastMessageNumber
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|TEN
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getAcknowledgment
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ack1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|store
operator|.
name|updateDestinationSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|store
operator|.
name|abort
argument_list|()
expr_stmt|;
name|store
operator|.
name|removeDestinationSequence
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateSourceSequence
parameter_list|()
throws|throws
name|SQLException
block|{
name|SourceSequence
name|seq
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SourceSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|Identifier
name|sid1
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid1
operator|.
name|setValue
argument_list|(
literal|"sequence1"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getExpires
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getOfferingSequenceIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|CLIENT_ENDPOINT_ID
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|createSourceSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ONE
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|isLastMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|store
operator|.
name|updateSourceSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|store
operator|.
name|abort
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|TEN
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|isLastMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|store
operator|.
name|updateSourceSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|store
operator|.
name|abort
argument_list|()
expr_stmt|;
name|store
operator|.
name|removeSourceSequence
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDestinationSequences
parameter_list|()
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|Identifier
name|sid1
init|=
literal|null
decl_stmt|;
name|Identifier
name|sid2
init|=
literal|null
decl_stmt|;
name|Collection
argument_list|<
name|DestinationSequence
argument_list|>
name|seqs
init|=
name|store
operator|.
name|getDestinationSequences
argument_list|(
literal|"unknown"
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seqs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|sid1
operator|=
name|setupDestinationSequence
argument_list|(
literal|"sequence1"
argument_list|)
expr_stmt|;
name|seqs
operator|=
name|store
operator|.
name|getDestinationSequences
argument_list|(
name|SERVER_ENDPOINT_ID
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seqs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkRecoveredDestinationSequences
argument_list|(
name|seqs
argument_list|)
expr_stmt|;
name|sid2
operator|=
name|setupDestinationSequence
argument_list|(
literal|"sequence2"
argument_list|)
expr_stmt|;
name|seqs
operator|=
name|store
operator|.
name|getDestinationSequences
argument_list|(
name|SERVER_ENDPOINT_ID
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|seqs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkRecoveredDestinationSequences
argument_list|(
name|seqs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|sid1
condition|)
block|{
name|store
operator|.
name|removeDestinationSequence
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|sid2
condition|)
block|{
name|store
operator|.
name|removeDestinationSequence
argument_list|(
name|sid2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSourceSequences
parameter_list|()
throws|throws
name|SQLException
block|{
name|Identifier
name|sid1
init|=
literal|null
decl_stmt|;
name|Identifier
name|sid2
init|=
literal|null
decl_stmt|;
name|Collection
argument_list|<
name|SourceSequence
argument_list|>
name|seqs
init|=
name|store
operator|.
name|getSourceSequences
argument_list|(
literal|"unknown"
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seqs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|sid1
operator|=
name|setupSourceSequence
argument_list|(
literal|"sequence1"
argument_list|)
expr_stmt|;
name|seqs
operator|=
name|store
operator|.
name|getSourceSequences
argument_list|(
name|CLIENT_ENDPOINT_ID
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seqs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkRecoveredSourceSequences
argument_list|(
name|seqs
argument_list|)
expr_stmt|;
name|sid2
operator|=
name|setupSourceSequence
argument_list|(
literal|"sequence2"
argument_list|)
expr_stmt|;
name|seqs
operator|=
name|store
operator|.
name|getSourceSequences
argument_list|(
name|CLIENT_ENDPOINT_ID
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|seqs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkRecoveredSourceSequences
argument_list|(
name|seqs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|sid1
condition|)
block|{
name|store
operator|.
name|removeSourceSequence
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|sid2
condition|)
block|{
name|store
operator|.
name|removeSourceSequence
argument_list|(
name|sid2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDestinationSequence
parameter_list|()
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|Identifier
name|sid1
init|=
literal|null
decl_stmt|;
name|Identifier
name|sid2
init|=
literal|null
decl_stmt|;
name|DestinationSequence
name|seq
init|=
name|store
operator|.
name|getDestinationSequence
argument_list|(
operator|new
name|Identifier
argument_list|()
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
try|try
block|{
name|sid1
operator|=
name|setupDestinationSequence
argument_list|(
literal|"sequence1"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|store
operator|.
name|getDestinationSequence
argument_list|(
name|sid1
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|verifyDestinationSequence
argument_list|(
literal|"sequence1"
argument_list|,
name|seq
argument_list|)
expr_stmt|;
name|sid2
operator|=
name|setupDestinationSequence
argument_list|(
literal|"sequence2"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|store
operator|.
name|getDestinationSequence
argument_list|(
name|sid2
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|verifyDestinationSequence
argument_list|(
literal|"sequence2"
argument_list|,
name|seq
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|sid1
condition|)
block|{
name|store
operator|.
name|removeDestinationSequence
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|sid2
condition|)
block|{
name|store
operator|.
name|removeDestinationSequence
argument_list|(
name|sid2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSourceSequence
parameter_list|()
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|Identifier
name|sid1
init|=
literal|null
decl_stmt|;
name|Identifier
name|sid2
init|=
literal|null
decl_stmt|;
name|SourceSequence
name|seq
init|=
name|store
operator|.
name|getSourceSequence
argument_list|(
operator|new
name|Identifier
argument_list|()
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
try|try
block|{
name|sid1
operator|=
name|setupSourceSequence
argument_list|(
literal|"sequence1"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|store
operator|.
name|getSourceSequence
argument_list|(
name|sid1
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|verifySourceSequence
argument_list|(
literal|"sequence1"
argument_list|,
name|seq
argument_list|)
expr_stmt|;
name|sid2
operator|=
name|setupSourceSequence
argument_list|(
literal|"sequence2"
argument_list|)
expr_stmt|;
name|seq
operator|=
name|store
operator|.
name|getSourceSequence
argument_list|(
name|sid2
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|verifySourceSequence
argument_list|(
literal|"sequence2"
argument_list|,
name|seq
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|sid1
condition|)
block|{
name|store
operator|.
name|removeSourceSequence
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|sid2
condition|)
block|{
name|store
operator|.
name|removeSourceSequence
argument_list|(
name|sid2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMessages
parameter_list|()
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|Identifier
name|sid1
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid1
operator|.
name|setValue
argument_list|(
literal|"sequence1"
argument_list|)
expr_stmt|;
name|Identifier
name|sid2
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid2
operator|.
name|setValue
argument_list|(
literal|"sequence2"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|RMMessage
argument_list|>
name|out
init|=
name|store
operator|.
name|getMessages
argument_list|(
name|sid1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|RMMessage
argument_list|>
name|in
init|=
name|store
operator|.
name|getMessages
argument_list|(
name|sid1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|setupMessage
argument_list|(
name|sid1
argument_list|,
name|ONE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setupMessage
argument_list|(
name|sid1
argument_list|,
name|ONE
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|out
operator|=
name|store
operator|.
name|getMessages
argument_list|(
name|sid1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkRecoveredMessages
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|in
operator|=
name|store
operator|.
name|getMessages
argument_list|(
name|sid1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|in
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkRecoveredMessages
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|setupMessage
argument_list|(
name|sid1
argument_list|,
name|TEN
argument_list|,
name|NON_ANON_ACKS_TO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setupMessage
argument_list|(
name|sid1
argument_list|,
name|TEN
argument_list|,
name|NON_ANON_ACKS_TO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|out
operator|=
name|store
operator|.
name|getMessages
argument_list|(
name|sid1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|out
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkRecoveredMessages
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|in
operator|=
name|store
operator|.
name|getMessages
argument_list|(
name|sid1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|in
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkRecoveredMessages
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Collection
argument_list|<
name|Long
argument_list|>
name|msgNrs
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|msgNrs
operator|.
name|add
argument_list|(
name|ONE
argument_list|)
expr_stmt|;
name|msgNrs
operator|.
name|add
argument_list|(
name|TEN
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeMessages
argument_list|(
name|sid1
argument_list|,
name|msgNrs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeMessages
argument_list|(
name|sid1
argument_list|,
name|msgNrs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Identifier
name|setupDestinationSequence
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|DestinationSequence
name|seq
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|Identifier
name|sid
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid
operator|.
name|setValue
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|epr
init|=
name|RMUtils
operator|.
name|createAnonymousReference
argument_list|()
decl_stmt|;
name|SequenceAcknowledgement
name|ack
init|=
name|ack1
decl_stmt|;
name|Long
name|lmn
init|=
name|ZERO
decl_stmt|;
if|if
condition|(
literal|"sequence2"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|ack
operator|=
name|ack2
expr_stmt|;
name|lmn
operator|=
name|TEN
expr_stmt|;
block|}
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getAcksTo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epr
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|SERVER_ENDPOINT_ID
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getLastMessageNumber
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|lmn
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getAcknowledgment
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|createDestinationSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|store
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|store
operator|.
name|updateDestinationSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|store
operator|.
name|commit
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|sid
return|;
block|}
specifier|private
name|Identifier
name|setupSourceSequence
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|SQLException
block|{
name|SourceSequence
name|seq
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SourceSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|Identifier
name|sid
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid
operator|.
name|setValue
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Date
name|expiry
init|=
literal|null
decl_stmt|;
name|Identifier
name|osid
init|=
literal|null
decl_stmt|;
name|Long
name|cmn
init|=
name|ONE
decl_stmt|;
name|boolean
name|lm
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|"sequence2"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|expiry
operator|=
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|3600
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|osid
operator|=
operator|new
name|Identifier
argument_list|()
expr_stmt|;
name|osid
operator|.
name|setValue
argument_list|(
literal|"offeringSequence"
argument_list|)
expr_stmt|;
name|cmn
operator|=
name|TEN
expr_stmt|;
name|lm
operator|=
literal|true
expr_stmt|;
block|}
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getExpires
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|expiry
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getOfferingSequenceIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|osid
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|CLIENT_ENDPOINT_ID
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|cmn
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|isLastMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|lm
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|createSourceSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|store
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|store
operator|.
name|updateSourceSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|store
operator|.
name|commit
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|sid
return|;
block|}
specifier|private
name|void
name|verifyDestinationSequence
parameter_list|(
name|String
name|s
parameter_list|,
name|DestinationSequence
name|seq
parameter_list|)
block|{
name|Identifier
name|sid
init|=
name|seq
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
argument_list|,
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"sequence1"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getLastMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|SequenceAcknowledgement
name|sa
init|=
name|seq
operator|.
name|getAcknowledgment
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|sa
argument_list|)
expr_stmt|;
name|verifyAcknowledgementRanges
argument_list|(
name|sa
operator|.
name|getAcknowledgementRange
argument_list|()
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sequence2"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|seq
operator|.
name|getLastMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|SequenceAcknowledgement
name|sa
init|=
name|seq
operator|.
name|getAcknowledgment
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|sa
argument_list|)
expr_stmt|;
name|verifyAcknowledgementRanges
argument_list|(
name|sa
operator|.
name|getAcknowledgementRange
argument_list|()
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|3
block|,
literal|10
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifySourceSequence
parameter_list|(
name|String
name|s
parameter_list|,
name|SourceSequence
name|seq
parameter_list|)
block|{
name|Identifier
name|sid
init|=
name|seq
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
argument_list|,
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"sequence1"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
name|seq
operator|.
name|getExpires
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|isLastMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"sequence2"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|Date
name|expires
init|=
name|seq
operator|.
name|getExpires
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|expires
argument_list|)
expr_stmt|;
name|expires
operator|.
name|after
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|seq
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|seq
operator|.
name|isLastMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyAcknowledgementRanges
parameter_list|(
name|List
argument_list|<
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
argument_list|>
name|ranges
parameter_list|,
name|long
index|[]
name|values
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|ranges
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
operator|.
name|length
operator|/
literal|2
argument_list|,
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|v
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|range
range|:
name|ranges
control|)
block|{
name|assertEquals
argument_list|(
name|values
index|[
name|v
operator|++
index|]
argument_list|,
operator|(
name|long
operator|)
name|range
operator|.
name|getLower
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|values
index|[
name|v
operator|++
index|]
argument_list|,
operator|(
name|long
operator|)
name|range
operator|.
name|getUpper
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setupMessage
parameter_list|(
name|Identifier
name|sid
parameter_list|,
name|Long
name|mn
parameter_list|,
name|String
name|to
parameter_list|,
name|boolean
name|outbound
parameter_list|)
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|RMMessage
name|msg
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mn
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getTo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|to
argument_list|)
expr_stmt|;
name|byte
index|[]
name|value
init|=
operator|(
literal|"Message "
operator|+
name|mn
operator|.
name|longValue
argument_list|()
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getInputStream
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|msg
operator|.
name|getSize
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|(
name|long
operator|)
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|store
operator|.
name|storeMessage
argument_list|(
name|sid
argument_list|,
name|msg
argument_list|,
name|outbound
argument_list|)
expr_stmt|;
name|store
operator|.
name|commit
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|checkRecoveredDestinationSequences
parameter_list|(
name|Collection
argument_list|<
name|DestinationSequence
argument_list|>
name|seqs
parameter_list|)
block|{
for|for
control|(
name|DestinationSequence
name|recovered
range|:
name|seqs
control|)
block|{
name|assertTrue
argument_list|(
literal|"sequence1"
operator|.
name|equals
argument_list|(
name|recovered
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|||
literal|"sequence2"
operator|.
name|equals
argument_list|(
name|recovered
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
argument_list|,
name|recovered
operator|.
name|getAcksTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"sequence1"
operator|.
name|equals
argument_list|(
name|recovered
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|recovered
operator|.
name|getLastMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|recovered
operator|.
name|getAcknowledgment
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|r
init|=
name|recovered
operator|.
name|getAcknowledgment
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ONE
argument_list|,
name|r
operator|.
name|getLower
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE
argument_list|,
name|r
operator|.
name|getUpper
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|recovered
operator|.
name|getLastMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|recovered
operator|.
name|getAcknowledgment
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|r
init|=
name|recovered
operator|.
name|getAcknowledgment
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ONE
argument_list|,
name|r
operator|.
name|getLower
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE
argument_list|,
name|r
operator|.
name|getUpper
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|recovered
operator|.
name|getAcknowledgment
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|3
argument_list|)
argument_list|,
name|r
operator|.
name|getLower
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEN
argument_list|,
name|r
operator|.
name|getUpper
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkRecoveredSourceSequences
parameter_list|(
name|Collection
argument_list|<
name|SourceSequence
argument_list|>
name|seqs
parameter_list|)
block|{
for|for
control|(
name|SourceSequence
name|recovered
range|:
name|seqs
control|)
block|{
name|assertTrue
argument_list|(
literal|"sequence1"
operator|.
name|equals
argument_list|(
name|recovered
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|||
literal|"sequence2"
operator|.
name|equals
argument_list|(
name|recovered
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"sequence1"
operator|.
name|equals
argument_list|(
name|recovered
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
name|recovered
operator|.
name|isLastMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|recovered
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|recovered
operator|.
name|getExpires
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|recovered
operator|.
name|getOfferingSequenceIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|recovered
operator|.
name|isLastMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|recovered
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|recovered
operator|.
name|getExpires
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"offeringSequence"
argument_list|,
name|recovered
operator|.
name|getOfferingSequenceIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkRecoveredMessages
parameter_list|(
name|Collection
argument_list|<
name|RMMessage
argument_list|>
name|msgs
parameter_list|)
block|{
for|for
control|(
name|RMMessage
name|msg
range|:
name|msgs
control|)
block|{
name|long
name|mn
init|=
name|msg
operator|.
name|getMessageNumber
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|mn
operator|==
literal|1
operator|||
name|mn
operator|==
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|mn
operator|==
literal|10
condition|)
block|{
name|assertEquals
argument_list|(
name|NON_ANON_ACKS_TO
argument_list|,
name|msg
operator|.
name|getTo
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|msg
operator|.
name|getTo
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|InputStream
name|actual
init|=
name|msg
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
literal|"Message "
operator|+
name|mn
argument_list|)
argument_list|,
name|IOUtils
operator|.
name|readStringFromStream
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"failed to get the input stream"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

