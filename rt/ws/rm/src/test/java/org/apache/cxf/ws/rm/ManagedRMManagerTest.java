begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectInstance
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapBindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|InstrumentationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|ServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceAcknowledgement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ManagedRMManagerTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_URI
init|=
literal|"http://nowhere.com/bar/foo"
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|InstrumentationManager
name|im
decl_stmt|;
specifier|private
name|RMManager
name|manager
decl_stmt|;
specifier|private
name|Endpoint
name|endpoint
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testManagedRMManager
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SpringBusFactory
name|factory
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|bus
operator|=
name|factory
operator|.
name|createBus
argument_list|(
literal|"org/apache/cxf/ws/rm/managed-manager-bean.xml"
argument_list|)
expr_stmt|;
name|im
operator|=
name|bus
operator|.
name|getExtension
argument_list|(
name|InstrumentationManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|manager
operator|=
name|bus
operator|.
name|getExtension
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|endpoint
operator|=
name|createTestEndpoint
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Instrumentation Manager should not be null"
argument_list|,
name|im
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"RMManager should not be null"
argument_list|,
name|manager
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|MBeanServer
name|mbs
init|=
name|im
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"MBeanServer should be available."
argument_list|,
name|mbs
argument_list|)
expr_stmt|;
name|ObjectName
name|managerName
init|=
name|RMUtils
operator|.
name|getManagedObjectName
argument_list|(
name|manager
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ObjectInstance
argument_list|>
name|mbset
init|=
name|mbs
operator|.
name|queryMBeans
argument_list|(
name|managerName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ManagedRMManager should be found"
argument_list|,
literal|1
argument_list|,
name|mbset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|o
decl_stmt|;
name|o
operator|=
name|mbs
operator|.
name|getAttribute
argument_list|(
name|managerName
argument_list|,
literal|"UsingStore"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Boolean
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Store attribute is false"
argument_list|,
operator|(
name|Boolean
operator|)
name|o
argument_list|)
expr_stmt|;
name|o
operator|=
name|mbs
operator|.
name|invoke
argument_list|(
name|managerName
argument_list|,
literal|"getEndpointIdentifiers"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|String
index|[]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No Endpoint"
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|String
index|[]
operator|)
name|o
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|RMEndpoint
name|rme
init|=
name|createTestRMEndpoint
argument_list|()
decl_stmt|;
name|ObjectName
name|endpointName
init|=
name|RMUtils
operator|.
name|getManagedObjectName
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|mbset
operator|=
name|mbs
operator|.
name|queryMBeans
argument_list|(
name|endpointName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ManagedRMEndpoint should be found"
argument_list|,
literal|1
argument_list|,
name|mbset
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|=
name|mbs
operator|.
name|invoke
argument_list|(
name|managerName
argument_list|,
literal|"getEndpointIdentifiers"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"One Endpoint"
argument_list|,
literal|1
argument_list|,
operator|(
operator|(
name|String
index|[]
operator|)
name|o
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Endpoint identifier must match"
argument_list|,
name|RMUtils
operator|.
name|getEndpointIdentifier
argument_list|(
name|endpoint
argument_list|,
name|bus
argument_list|)
argument_list|,
operator|(
operator|(
name|String
index|[]
operator|)
name|o
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test some endpoint methods
name|o
operator|=
name|mbs
operator|.
name|getAttribute
argument_list|(
name|endpointName
argument_list|,
literal|"Address"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Endpoint address must match"
argument_list|,
name|TEST_URI
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|o
operator|=
name|mbs
operator|.
name|getAttribute
argument_list|(
name|endpointName
argument_list|,
literal|"LastApplicationMessage"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|o
operator|=
name|mbs
operator|.
name|getAttribute
argument_list|(
name|endpointName
argument_list|,
literal|"LastControlMessage"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|o
operator|=
name|mbs
operator|.
name|invoke
argument_list|(
name|endpointName
argument_list|,
literal|"getDestinationSequenceIds"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|String
index|[]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No sequence"
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|String
index|[]
operator|)
name|o
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|o
operator|=
name|mbs
operator|.
name|invoke
argument_list|(
name|endpointName
argument_list|,
literal|"getDestinationSequences"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|CompositeData
index|[]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No sequence"
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|CompositeData
index|[]
operator|)
name|o
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|o
operator|=
name|mbs
operator|.
name|invoke
argument_list|(
name|endpointName
argument_list|,
literal|"getSourceSequenceIds"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|true
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"boolean"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|String
index|[]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No sequence"
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|String
index|[]
operator|)
name|o
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|o
operator|=
name|mbs
operator|.
name|invoke
argument_list|(
name|endpointName
argument_list|,
literal|"getSourceSequences"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|true
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"boolean"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|CompositeData
index|[]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No sequence"
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|CompositeData
index|[]
operator|)
name|o
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|o
operator|=
name|mbs
operator|.
name|invoke
argument_list|(
name|endpointName
argument_list|,
literal|"getDeferredAcknowledgementTotalCount"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No deferred acks"
argument_list|,
literal|0
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|o
operator|=
name|mbs
operator|.
name|invoke
argument_list|(
name|endpointName
argument_list|,
literal|"getQueuedMessageTotalCount"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|true
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"boolean"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No queued messages"
argument_list|,
literal|0
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testManagedRMEndpointGetQueuedCount
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedRMEndpoint
name|managedEndpoint
init|=
name|createTestManagedRMEndpoint
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|managedEndpoint
operator|.
name|getQueuedMessageTotalCount
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|n
operator|=
name|managedEndpoint
operator|.
name|getQueuedMessageCount
argument_list|(
literal|"seq1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUnAcknowledgedMessageIdentifiers
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedRMEndpoint
name|managedEndpoint
init|=
name|createTestManagedRMEndpoint
argument_list|()
decl_stmt|;
name|Long
index|[]
name|numbers
init|=
name|managedEndpoint
operator|.
name|getUnAcknowledgedMessageIdentifiers
argument_list|(
literal|"seq1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|numbers
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|2L
operator|==
name|numbers
index|[
literal|0
index|]
operator|&&
literal|4L
operator|==
name|numbers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveSequence
parameter_list|()
throws|throws
name|Exception
block|{
name|manager
operator|=
operator|new
name|RMManager
argument_list|()
expr_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointReferenceType
name|ref
init|=
name|RMUtils
operator|.
name|createReference
argument_list|(
name|TEST_URI
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
operator|new
name|Source
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
operator|new
name|Destination
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|RetransmissionQueue
name|rq
init|=
operator|new
name|TestRetransmissionQueue
argument_list|()
decl_stmt|;
name|manager
operator|.
name|setRetransmissionQueue
argument_list|(
name|rq
argument_list|)
expr_stmt|;
name|manager
operator|.
name|initialise
argument_list|()
expr_stmt|;
name|SourceSequence
name|ss1
init|=
name|createTestSourceSequence
argument_list|(
name|source
argument_list|,
literal|"seq1"
argument_list|,
name|ref
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1L
block|,
literal|1L
block|,
literal|3L
block|,
literal|3L
block|}
argument_list|)
decl_stmt|;
name|SourceSequence
name|ss3
init|=
name|createTestSourceSequence
argument_list|(
name|source
argument_list|,
literal|"seq3"
argument_list|,
name|ref
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1L
block|,
literal|5L
block|}
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|manager
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getSource
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|source
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destination
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|setCurrentMessageNumber
argument_list|(
name|ss1
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
name|setCurrentMessageNumber
argument_list|(
name|ss3
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
name|source
operator|.
name|addSequence
argument_list|(
name|ss1
argument_list|)
expr_stmt|;
name|source
operator|.
name|addSequence
argument_list|(
name|ss3
argument_list|)
expr_stmt|;
name|source
operator|.
name|setCurrent
argument_list|(
name|ss3
argument_list|)
expr_stmt|;
name|ManagedRMEndpoint
name|managedEndpoint
init|=
operator|new
name|ManagedRMEndpoint
argument_list|(
name|rme
argument_list|)
decl_stmt|;
comment|// for those sequences without any unacknowledged messages
name|CompositeData
name|cd
init|=
name|managedEndpoint
operator|.
name|getSourceSequence
argument_list|(
literal|"seq3"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|managedEndpoint
operator|.
name|removeSourceSequence
argument_list|(
literal|"seq3"
argument_list|)
expr_stmt|;
try|try
block|{
name|cd
operator|=
name|managedEndpoint
operator|.
name|getSourceSequence
argument_list|(
literal|"seq3"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"sequnce not removed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ok
block|}
comment|// for those sequences with some unacknowledged messages
name|cd
operator|=
name|managedEndpoint
operator|.
name|getSourceSequence
argument_list|(
literal|"seq1"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cd
argument_list|)
expr_stmt|;
try|try
block|{
name|managedEndpoint
operator|.
name|removeSourceSequence
argument_list|(
literal|"seq1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"sequnce may not be removed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|cd
operator|=
name|managedEndpoint
operator|.
name|getSourceSequence
argument_list|(
literal|"seq1"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|managedEndpoint
operator|.
name|purgeUnAcknowledgedMessages
argument_list|(
literal|"seq1"
argument_list|)
expr_stmt|;
name|managedEndpoint
operator|.
name|removeSourceSequence
argument_list|(
literal|"seq1"
argument_list|)
expr_stmt|;
try|try
block|{
name|cd
operator|=
name|managedEndpoint
operator|.
name|getSourceSequence
argument_list|(
literal|"seq1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"sequnce not removed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSourceSequenceAcknowledgedRange
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedRMEndpoint
name|managedEndpoint
init|=
name|createTestManagedRMEndpoint
argument_list|()
decl_stmt|;
name|Long
index|[]
name|ranges
init|=
name|managedEndpoint
operator|.
name|getSourceSequenceAcknowledgedRange
argument_list|(
literal|"seq1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|ranges
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|1L
operator|==
name|ranges
index|[
literal|0
index|]
operator|&&
literal|1L
operator|==
name|ranges
index|[
literal|1
index|]
operator|&&
literal|3L
operator|==
name|ranges
index|[
literal|2
index|]
operator|&&
literal|3L
operator|==
name|ranges
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSourceSequences
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedRMEndpoint
name|managedEndpoint
init|=
name|createTestManagedRMEndpoint
argument_list|()
decl_stmt|;
name|String
index|[]
name|sids
init|=
name|managedEndpoint
operator|.
name|getSourceSequenceIds
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sids
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
literal|"seq1"
operator|.
name|equals
argument_list|(
name|sids
index|[
literal|0
index|]
argument_list|)
operator|||
literal|"seq1"
operator|.
name|equals
argument_list|(
name|sids
index|[
literal|1
index|]
argument_list|)
operator|)
operator|&&
operator|(
literal|"seq2"
operator|.
name|equals
argument_list|(
name|sids
index|[
literal|0
index|]
argument_list|)
operator|||
literal|"seq2"
operator|.
name|equals
argument_list|(
name|sids
index|[
literal|1
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|String
name|sid
init|=
name|managedEndpoint
operator|.
name|getCurrentSourceSequenceId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"seq2"
argument_list|,
name|sid
argument_list|)
expr_stmt|;
name|CompositeData
index|[]
name|sequences
init|=
name|managedEndpoint
operator|.
name|getSourceSequences
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sequences
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifySourceSequence
argument_list|(
name|sequences
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifySourceSequence
argument_list|(
name|sequences
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDestinationSequences
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedRMEndpoint
name|managedEndpoint
init|=
name|createTestManagedRMEndpoint
argument_list|()
decl_stmt|;
name|String
index|[]
name|sids
init|=
name|managedEndpoint
operator|.
name|getDestinationSequenceIds
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sids
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
literal|"seq3"
operator|.
name|equals
argument_list|(
name|sids
index|[
literal|0
index|]
argument_list|)
operator|||
literal|"seq3"
operator|.
name|equals
argument_list|(
name|sids
index|[
literal|1
index|]
argument_list|)
operator|)
operator|&&
operator|(
literal|"seq4"
operator|.
name|equals
argument_list|(
name|sids
index|[
literal|0
index|]
argument_list|)
operator|||
literal|"seq4"
operator|.
name|equals
argument_list|(
name|sids
index|[
literal|1
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|CompositeData
index|[]
name|sequences
init|=
name|managedEndpoint
operator|.
name|getDestinationSequences
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sequences
operator|.
name|length
argument_list|)
expr_stmt|;
name|verifyDestinationSequence
argument_list|(
name|sequences
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyDestinationSequence
argument_list|(
name|sequences
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRetransmissionStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedRMEndpoint
name|managedEndpoint
init|=
name|createTestManagedRMEndpoint
argument_list|()
decl_stmt|;
name|TestRetransmissionQueue
name|rq
init|=
operator|(
name|TestRetransmissionQueue
operator|)
name|manager
operator|.
name|getRetransmissionQueue
argument_list|()
decl_stmt|;
name|CompositeData
name|status
init|=
name|managedEndpoint
operator|.
name|getRetransmissionStatus
argument_list|(
literal|"seq1"
argument_list|,
literal|3L
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|status
operator|=
name|managedEndpoint
operator|.
name|getRetransmissionStatus
argument_list|(
literal|"seq1"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|verifyRetransmissionStatus
argument_list|(
name|status
argument_list|,
literal|2L
argument_list|,
name|rq
operator|.
name|getRetransmissionStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuspendAndResumeSourceQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedRMEndpoint
name|managedEndpoint
init|=
name|createTestManagedRMEndpoint
argument_list|()
decl_stmt|;
name|TestRetransmissionQueue
name|rq
init|=
operator|(
name|TestRetransmissionQueue
operator|)
name|manager
operator|.
name|getRetransmissionQueue
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|rq
operator|.
name|isSuspended
argument_list|(
literal|"seq1"
argument_list|)
argument_list|)
expr_stmt|;
name|managedEndpoint
operator|.
name|suspendSourceQueue
argument_list|(
literal|"seq1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rq
operator|.
name|isSuspended
argument_list|(
literal|"seq1"
argument_list|)
argument_list|)
expr_stmt|;
name|managedEndpoint
operator|.
name|resumeSourceQueue
argument_list|(
literal|"seq1"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rq
operator|.
name|isSuspended
argument_list|(
literal|"seq1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifySourceSequence
parameter_list|(
name|CompositeData
name|cd
parameter_list|)
block|{
name|Object
name|key
init|=
name|cd
operator|.
name|get
argument_list|(
literal|"sequenceId"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"seq1"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|verifySourceSequence
argument_list|(
name|cd
argument_list|,
literal|"seq1"
argument_list|,
literal|5L
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"seq2"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|verifySourceSequence
argument_list|(
name|cd
argument_list|,
literal|"seq2"
argument_list|,
literal|4L
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unexpected sequence: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifySourceSequence
parameter_list|(
name|CompositeData
name|cd
parameter_list|,
name|String
name|sid
parameter_list|,
name|long
name|num
parameter_list|,
name|int
name|qsize
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|sid
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|get
argument_list|(
literal|"sequenceId"
argument_list|)
argument_list|)
operator|&&
name|num
operator|==
operator|(
operator|(
name|Long
operator|)
name|cd
operator|.
name|get
argument_list|(
literal|"currentMessageNumber"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
operator|&&
name|qsize
operator|==
operator|(
operator|(
name|Integer
operator|)
name|cd
operator|.
name|get
argument_list|(
literal|"queuedMessageCount"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyDestinationSequence
parameter_list|(
name|CompositeData
name|cd
parameter_list|)
block|{
name|Object
name|key
init|=
name|cd
operator|.
name|get
argument_list|(
literal|"sequenceId"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"seq3"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|||
literal|"seq4"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyRetransmissionStatus
parameter_list|(
name|CompositeData
name|cd
parameter_list|,
name|long
name|num
parameter_list|,
name|RetryStatus
name|status
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|num
argument_list|,
name|cd
operator|.
name|get
argument_list|(
literal|"messageNumber"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status
operator|.
name|getRetries
argument_list|()
argument_list|,
name|cd
operator|.
name|get
argument_list|(
literal|"retries"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status
operator|.
name|getNext
argument_list|()
argument_list|,
name|cd
operator|.
name|get
argument_list|(
literal|"next"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status
operator|.
name|getPrevious
argument_list|()
argument_list|,
name|cd
operator|.
name|get
argument_list|(
literal|"previous"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status
operator|.
name|getNextInterval
argument_list|()
argument_list|,
name|cd
operator|.
name|get
argument_list|(
literal|"nextInterval"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status
operator|.
name|getBackoff
argument_list|()
argument_list|,
name|cd
operator|.
name|get
argument_list|(
literal|"backOff"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ManagedRMEndpoint
name|createTestManagedRMEndpoint
parameter_list|()
block|{
name|manager
operator|=
operator|new
name|RMManager
argument_list|()
expr_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointReferenceType
name|ref
init|=
name|RMUtils
operator|.
name|createReference
argument_list|(
name|TEST_URI
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
operator|new
name|Source
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
operator|new
name|Destination
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|RetransmissionQueue
name|rq
init|=
operator|new
name|TestRetransmissionQueue
argument_list|()
decl_stmt|;
name|manager
operator|.
name|setRetransmissionQueue
argument_list|(
name|rq
argument_list|)
expr_stmt|;
name|manager
operator|.
name|initialise
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|SourceSequence
argument_list|>
name|sss
init|=
name|createTestSourceSequences
argument_list|(
name|source
argument_list|,
name|ref
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DestinationSequence
argument_list|>
name|dss
init|=
name|createTestDestinationSequences
argument_list|(
name|destination
argument_list|,
name|ref
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|manager
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getSource
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|source
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destination
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|setCurrentMessageNumber
argument_list|(
name|sss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
name|setCurrentMessageNumber
argument_list|(
name|sss
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
name|source
operator|.
name|addSequence
argument_list|(
name|sss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|.
name|addSequence
argument_list|(
name|sss
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|source
operator|.
name|setCurrent
argument_list|(
name|sss
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|destination
operator|.
name|addSequence
argument_list|(
name|dss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|destination
operator|.
name|addSequence
argument_list|(
name|dss
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|ManagedRMEndpoint
argument_list|(
name|rme
argument_list|)
return|;
block|}
specifier|private
name|void
name|setCurrentMessageNumber
parameter_list|(
name|SourceSequence
name|ss
parameter_list|,
name|long
name|num
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|ss
operator|.
name|nextMessageNumber
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|SourceSequence
argument_list|>
name|createTestSourceSequences
parameter_list|(
name|Source
name|source
parameter_list|,
name|EndpointReferenceType
name|to
parameter_list|)
block|{
name|List
argument_list|<
name|SourceSequence
argument_list|>
name|sss
init|=
operator|new
name|ArrayList
argument_list|<
name|SourceSequence
argument_list|>
argument_list|()
decl_stmt|;
name|sss
operator|.
name|add
argument_list|(
name|createTestSourceSequence
argument_list|(
name|source
argument_list|,
literal|"seq1"
argument_list|,
name|to
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1L
block|,
literal|1L
block|,
literal|3L
block|,
literal|3L
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|sss
operator|.
name|add
argument_list|(
name|createTestSourceSequence
argument_list|(
name|source
argument_list|,
literal|"seq2"
argument_list|,
name|to
argument_list|,
name|ProtocolVariation
operator|.
name|RM11WSA200508
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1L
block|,
literal|1L
block|,
literal|3L
block|,
literal|3L
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sss
return|;
block|}
specifier|private
name|List
argument_list|<
name|DestinationSequence
argument_list|>
name|createTestDestinationSequences
parameter_list|(
name|Destination
name|destination
parameter_list|,
name|EndpointReferenceType
name|to
parameter_list|)
block|{
name|List
argument_list|<
name|DestinationSequence
argument_list|>
name|dss
init|=
operator|new
name|ArrayList
argument_list|<
name|DestinationSequence
argument_list|>
argument_list|()
decl_stmt|;
name|dss
operator|.
name|add
argument_list|(
name|createTestDestinationSequence
argument_list|(
name|destination
argument_list|,
literal|"seq3"
argument_list|,
name|to
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1L
block|,
literal|1L
block|,
literal|3L
block|,
literal|3L
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|dss
operator|.
name|add
argument_list|(
name|createTestDestinationSequence
argument_list|(
name|destination
argument_list|,
literal|"seq4"
argument_list|,
name|to
argument_list|,
name|ProtocolVariation
operator|.
name|RM11WSA200508
argument_list|,
operator|new
name|long
index|[]
block|{
literal|1L
block|,
literal|1L
block|,
literal|3L
block|,
literal|3L
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dss
return|;
block|}
specifier|private
name|SourceSequence
name|createTestSourceSequence
parameter_list|(
name|Source
name|source
parameter_list|,
name|String
name|sid
parameter_list|,
name|EndpointReferenceType
name|to
parameter_list|,
name|ProtocolVariation
name|protocol
parameter_list|,
name|long
index|[]
name|acked
parameter_list|)
block|{
name|Identifier
name|identifier
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|setValue
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|SourceSequence
name|ss
init|=
operator|new
name|SourceSequence
argument_list|(
name|identifier
argument_list|,
name|protocol
argument_list|)
decl_stmt|;
name|ss
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setTarget
argument_list|(
name|to
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
argument_list|>
name|ranges
init|=
name|ss
operator|.
name|getAcknowledgement
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|acked
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|ranges
operator|.
name|add
argument_list|(
name|createAcknowledgementRange
argument_list|(
name|acked
index|[
name|i
index|]
argument_list|,
name|acked
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ss
return|;
block|}
specifier|private
name|DestinationSequence
name|createTestDestinationSequence
parameter_list|(
name|Destination
name|destination
parameter_list|,
name|String
name|sid
parameter_list|,
name|EndpointReferenceType
name|to
parameter_list|,
name|ProtocolVariation
name|protocol
parameter_list|,
name|long
index|[]
name|acked
parameter_list|)
block|{
name|Identifier
name|identifier
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|setValue
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|DestinationSequence
name|ds
init|=
operator|new
name|DestinationSequence
argument_list|(
name|identifier
argument_list|,
name|to
argument_list|,
literal|null
argument_list|,
name|protocol
argument_list|)
decl_stmt|;
name|ds
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
argument_list|>
name|ranges
init|=
name|ds
operator|.
name|getAcknowledgment
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|acked
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|ranges
operator|.
name|add
argument_list|(
name|createAcknowledgementRange
argument_list|(
name|acked
index|[
name|i
index|]
argument_list|,
name|acked
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ds
return|;
block|}
specifier|private
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|createAcknowledgementRange
parameter_list|(
name|long
name|l
parameter_list|,
name|long
name|u
parameter_list|)
block|{
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|range
init|=
operator|new
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
argument_list|()
decl_stmt|;
name|range
operator|.
name|setLower
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|range
operator|.
name|setUpper
argument_list|(
name|u
argument_list|)
expr_stmt|;
return|return
name|range
return|;
block|}
specifier|private
name|Endpoint
name|createTestEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceInfo
name|svci
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|svci
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
name|TEST_URI
argument_list|,
literal|"testService"
argument_list|)
argument_list|)
expr_stmt|;
name|Service
name|svc
init|=
operator|new
name|ServiceImpl
argument_list|(
name|svci
argument_list|)
decl_stmt|;
name|SoapBindingInfo
name|binding
init|=
operator|new
name|SoapBindingInfo
argument_list|(
name|svci
argument_list|,
name|WSDLConstants
operator|.
name|NS_SOAP11
argument_list|)
decl_stmt|;
name|binding
operator|.
name|setTransportURI
argument_list|(
name|WSDLConstants
operator|.
name|NS_SOAP_HTTP_TRANSPORT
argument_list|)
expr_stmt|;
name|EndpointInfo
name|ei
init|=
operator|new
name|EndpointInfo
argument_list|()
decl_stmt|;
name|ei
operator|.
name|setAddress
argument_list|(
name|TEST_URI
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
name|TEST_URI
argument_list|,
literal|"testPort"
argument_list|)
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setBinding
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setService
argument_list|(
name|svci
argument_list|)
expr_stmt|;
return|return
operator|new
name|EndpointImpl
argument_list|(
name|bus
argument_list|,
name|svc
argument_list|,
name|ei
argument_list|)
return|;
block|}
specifier|private
name|RMEndpoint
name|createTestRMEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
return|return
name|manager
operator|.
name|getReliableEndpoint
argument_list|(
name|message
argument_list|)
return|;
block|}
specifier|private
class|class
name|TestRetransmissionQueue
implements|implements
name|RetransmissionQueue
block|{
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|suspended
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|RetryStatus
name|status
init|=
operator|new
name|TestRetransmissionStatus
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|numlists
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TestRetransmissionQueue
parameter_list|()
block|{
name|numlists
operator|.
name|put
argument_list|(
literal|"seq1"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|numlists
operator|.
name|put
argument_list|(
literal|"seq2"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|numlists
operator|.
name|get
argument_list|(
literal|"seq1"
argument_list|)
argument_list|,
literal|2L
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|numlists
operator|.
name|get
argument_list|(
literal|"seq2"
argument_list|)
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|countUnacknowledged
parameter_list|(
name|SourceSequence
name|seq
parameter_list|)
block|{
specifier|final
name|String
name|key
init|=
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|list
init|=
name|numlists
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|list
operator|!=
literal|null
condition|?
name|list
operator|.
name|size
argument_list|()
else|:
literal|0
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|addUnacknowledged
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|void
name|purgeAcknowledged
parameter_list|(
name|SourceSequence
name|seq
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|void
name|purgeAll
parameter_list|(
name|SourceSequence
name|seq
parameter_list|)
block|{
specifier|final
name|String
name|key
init|=
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|list
init|=
name|numlists
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|getUnacknowledgedMessageNumbers
parameter_list|(
name|SourceSequence
name|seq
parameter_list|)
block|{
specifier|final
name|String
name|key
init|=
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|list
init|=
name|numlists
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|list
operator|!=
literal|null
condition|?
name|list
else|:
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
return|;
block|}
specifier|public
name|RetryStatus
name|getRetransmissionStatus
parameter_list|(
name|SourceSequence
name|seq
parameter_list|,
name|long
name|num
parameter_list|)
block|{
specifier|final
name|String
name|key
init|=
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|list
init|=
name|numlists
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|list
operator|.
name|contains
argument_list|(
name|num
argument_list|)
condition|?
name|status
else|:
literal|null
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|RetryStatus
argument_list|>
name|getRetransmissionStatuses
parameter_list|(
name|SourceSequence
name|seq
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|SourceSequence
name|seq
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|void
name|suspend
parameter_list|(
name|SourceSequence
name|seq
parameter_list|)
block|{
name|suspended
operator|.
name|add
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|resume
parameter_list|(
name|SourceSequence
name|seq
parameter_list|)
block|{
name|suspended
operator|.
name|remove
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isSuspended
parameter_list|(
name|String
name|sid
parameter_list|)
block|{
return|return
name|suspended
operator|.
name|contains
argument_list|(
name|sid
argument_list|)
return|;
block|}
name|RetryStatus
name|getRetransmissionStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
specifier|public
name|int
name|countUnacknowledged
parameter_list|()
block|{
return|return
name|numlists
operator|.
name|get
argument_list|(
literal|"seq1"
argument_list|)
operator|.
name|size
argument_list|()
operator|+
name|numlists
operator|.
name|get
argument_list|(
literal|"seq2"
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestRetransmissionStatus
implements|implements
name|RetryStatus
block|{
specifier|private
name|long
name|interval
init|=
literal|300000L
decl_stmt|;
specifier|private
name|Date
name|next
init|=
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|interval
operator|/
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|Date
name|previous
init|=
operator|new
name|Date
argument_list|(
name|next
operator|.
name|getTime
argument_list|()
operator|-
name|interval
argument_list|)
decl_stmt|;
specifier|public
name|Date
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
specifier|public
name|Date
name|getPrevious
parameter_list|()
block|{
return|return
name|previous
return|;
block|}
specifier|public
name|int
name|getRetries
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
specifier|public
name|int
name|getMaxRetries
parameter_list|()
block|{
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|long
name|getNextInterval
parameter_list|()
block|{
return|return
name|interval
return|;
block|}
specifier|public
name|long
name|getBackoff
parameter_list|()
block|{
return|return
literal|1L
return|;
block|}
specifier|public
name|boolean
name|isPending
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isSuspended
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

