begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapBindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|EffectivePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|EndpointPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyInterceptorProviderRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|RMEndpointTest
extends|extends
name|Assert
block|{
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|RMManager
name|manager
decl_stmt|;
specifier|private
name|Endpoint
name|ae
decl_stmt|;
specifier|private
name|RMEndpoint
name|rme
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|ae
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|rme
operator|=
operator|new
name|RMEndpoint
argument_list|(
name|manager
argument_list|,
name|ae
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstructor
parameter_list|()
block|{
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|rme
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rme
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rme
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rme
operator|.
name|getConduit
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rme
operator|.
name|getReplyTo
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetManager
parameter_list|()
block|{
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|manager
argument_list|,
name|rme
operator|.
name|getManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicationEndpoint
parameter_list|()
block|{
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|ae
argument_list|,
name|rme
operator|.
name|getApplicationEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProxy
parameter_list|()
block|{
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|rme
argument_list|,
name|rme
operator|.
name|getProxy
argument_list|()
operator|.
name|getReliableEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetServant
parameter_list|()
block|{
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|rme
operator|.
name|getServant
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSetDestination
parameter_list|()
block|{
name|Destination
name|d
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|rme
argument_list|,
name|rme
operator|.
name|getDestination
argument_list|()
operator|.
name|getReliableEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|rme
operator|.
name|setDestination
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|d
argument_list|,
name|rme
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSetSource
parameter_list|()
block|{
name|Source
name|s
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Source
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|rme
argument_list|,
name|rme
operator|.
name|getSource
argument_list|()
operator|.
name|getReliableEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|rme
operator|.
name|setSource
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|s
argument_list|,
name|rme
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitialise
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Method
name|m1
init|=
name|RMEndpoint
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createService"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|Method
name|m2
init|=
name|RMEndpoint
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createEndpoint"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Method
name|m3
init|=
name|RMEndpoint
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setPolicies"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|rme
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m1
block|,
name|m2
block|,
name|m3
block|}
argument_list|)
expr_stmt|;
name|rme
operator|.
name|createService
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|rme
operator|.
name|createEndpoint
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|rme
operator|.
name|setPolicies
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|Conduit
name|c
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Conduit
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
name|epr
init|=
name|control
operator|.
name|createMock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|rme
operator|.
name|initialise
argument_list|(
name|c
argument_list|,
name|epr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|c
argument_list|,
name|rme
operator|.
name|getConduit
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|epr
argument_list|,
name|rme
operator|.
name|getReplyTo
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateService
parameter_list|()
block|{
name|Service
name|as
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ae
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|as
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|rme
operator|.
name|createService
argument_list|()
expr_stmt|;
name|Service
name|s
init|=
name|rme
operator|.
name|getService
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|WrappedService
name|ws
init|=
operator|(
name|WrappedService
operator|)
name|s
decl_stmt|;
name|assertSame
argument_list|(
name|as
argument_list|,
name|ws
operator|.
name|getWrappedService
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|rme
operator|.
name|getServant
argument_list|()
argument_list|,
name|s
operator|.
name|getInvoker
argument_list|()
argument_list|)
expr_stmt|;
name|verifyService
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateEndpoint
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Method
name|m
init|=
name|RMEndpoint
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getUsingAddressing"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|EndpointInfo
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|rme
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|rme
operator|.
name|setAplicationEndpoint
argument_list|(
name|ae
argument_list|)
expr_stmt|;
name|rme
operator|.
name|setManager
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|Service
name|as
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ae
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|as
argument_list|)
expr_stmt|;
name|EndpointInfo
name|aei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ae
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|aei
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|SoapBindingInfo
name|bi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SoapBindingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|aei
operator|.
name|getBinding
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bi
argument_list|)
expr_stmt|;
name|SoapVersion
name|sv
init|=
name|Soap11
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bi
operator|.
name|getSoapVersion
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sv
argument_list|)
expr_stmt|;
name|String
name|ns
init|=
literal|"http://schemas.xmlsoap.org/wsdl/soap/"
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bi
operator|.
name|getBindingId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|aei
operator|.
name|getTransportId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|String
name|addr
init|=
literal|"addr"
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|aei
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|Object
name|ua
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getUsingAddressing
argument_list|(
name|aei
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ua
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|rme
operator|.
name|createService
argument_list|()
expr_stmt|;
name|rme
operator|.
name|createEndpoint
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Endpoint
name|e
init|=
name|rme
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|WrappedEndpoint
name|we
init|=
operator|(
name|WrappedEndpoint
operator|)
name|e
decl_stmt|;
name|assertSame
argument_list|(
name|ae
argument_list|,
name|we
operator|.
name|getWrappedEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|Service
name|s
init|=
name|rme
operator|.
name|getService
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|getEndpoints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|e
argument_list|,
name|s
operator|.
name|getEndpoints
argument_list|()
operator|.
name|get
argument_list|(
name|RMConstants
operator|.
name|getPortName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUsingAddressing
parameter_list|()
block|{
name|EndpointInfo
name|ei
init|=
literal|null
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|rme
operator|.
name|getUsingAddressing
argument_list|(
name|ei
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ExtensibilityElement
name|ua
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
decl_stmt|;
name|ei
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|noExts
init|=
operator|new
name|ArrayList
argument_list|<
name|ExtensibilityElement
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|exts
init|=
operator|new
name|ArrayList
argument_list|<
name|ExtensibilityElement
argument_list|>
argument_list|()
decl_stmt|;
name|exts
operator|.
name|add
argument_list|(
name|ua
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ei
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|noExts
argument_list|)
expr_stmt|;
name|BindingInfo
name|bi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ei
operator|.
name|getBinding
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bi
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bi
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|noExts
argument_list|)
expr_stmt|;
name|ServiceInfo
name|si
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ei
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|si
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|si
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exts
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ua
operator|.
name|getElementType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Names
operator|.
name|WSAW_USING_ADDRESSING_QNAME
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|ua
argument_list|,
name|rme
operator|.
name|getUsingAddressing
argument_list|(
name|ei
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetUsingAddressingFromExtensions
parameter_list|()
block|{
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|exts
init|=
operator|new
name|ArrayList
argument_list|<
name|ExtensibilityElement
argument_list|>
argument_list|()
decl_stmt|;
name|ExtensibilityElement
name|ua
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
decl_stmt|;
name|exts
operator|.
name|add
argument_list|(
name|ua
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ua
operator|.
name|getElementType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Names
operator|.
name|WSAW_USING_ADDRESSING_QNAME
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|ua
argument_list|,
name|rme
operator|.
name|getUsingAddressing
argument_list|(
name|exts
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMessageArrivals
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|rme
operator|.
name|getLastApplicationMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|rme
operator|.
name|getLastControlMessage
argument_list|()
argument_list|)
expr_stmt|;
name|rme
operator|.
name|receivedControlMessage
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|rme
operator|.
name|getLastApplicationMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rme
operator|.
name|getLastControlMessage
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|rme
operator|.
name|receivedApplicationMessage
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|rme
operator|.
name|getLastApplicationMessage
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rme
operator|.
name|getLastControlMessage
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPoliciesNoEngine
parameter_list|()
block|{
name|Bus
name|bus
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getBus
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyEngine
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|rme
operator|.
name|setPolicies
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPoliciesEngineDisabled
parameter_list|()
block|{
name|Bus
name|bus
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getBus
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|PolicyEngine
name|pe
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyEngine
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyEngine
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|pe
operator|.
name|isEnabled
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|rme
operator|.
name|setPolicies
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicies
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Method
name|m
init|=
name|RMEndpoint
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getEndpoint"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|rme
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|rme
operator|.
name|setAplicationEndpoint
argument_list|(
name|ae
argument_list|)
expr_stmt|;
name|rme
operator|.
name|setManager
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|Endpoint
name|e
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|e
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ei
argument_list|)
expr_stmt|;
name|Bus
name|bus
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getBus
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bus
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|PolicyEngine
name|pe
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyEngine
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyEngine
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|pe
operator|.
name|isEnabled
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PolicyInterceptorProviderRegistry
name|reg
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyInterceptorProviderRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyInterceptorProviderRegistry
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|reg
argument_list|)
expr_stmt|;
name|EndpointInfo
name|aei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ae
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|aei
argument_list|)
expr_stmt|;
name|EndpointPolicy
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|pe
operator|.
name|getServerEndpointPolicy
argument_list|(
name|aei
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|epi
operator|.
name|getChosenAlternative
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Assertion
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|pe
operator|.
name|setServerEndpointPolicy
argument_list|(
name|ei
argument_list|,
name|epi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|BindingInfo
name|bi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ei
operator|.
name|getBinding
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bi
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bi
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|boi
argument_list|)
argument_list|)
expr_stmt|;
name|pe
operator|.
name|setEffectiveServerRequestPolicy
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|ei
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
name|boi
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|EffectivePolicy
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|pe
operator|.
name|setEffectiveServerResponsePolicy
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|ei
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
name|boi
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|EffectivePolicy
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|pe
operator|.
name|setEffectiveClientRequestPolicy
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|ei
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
name|boi
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|EffectivePolicy
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|pe
operator|.
name|setEffectiveClientResponsePolicy
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|ei
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
name|boi
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|EffectivePolicy
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|rme
operator|.
name|setPolicies
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdown
parameter_list|()
block|{
name|DestinationSequence
name|ds
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|Identifier
name|did
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Identifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ds
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|did
argument_list|)
expr_stmt|;
name|String
name|d
init|=
literal|"d"
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|did
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|SourceSequence
name|ss
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SourceSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|Identifier
name|sid
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Identifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ss
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|String
name|s
init|=
literal|"s"
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|ds
operator|.
name|cancelDeferredAcknowledgments
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|ds
operator|.
name|cancelTermination
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|RetransmissionQueue
name|queue
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RetransmissionQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getRetransmissionQueue
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|queue
operator|.
name|stop
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|rme
operator|.
name|getDestination
argument_list|()
operator|.
name|addSequence
argument_list|(
name|ds
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rme
operator|.
name|getSource
argument_list|()
operator|.
name|addSequence
argument_list|(
name|ss
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rme
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEffectivePolicyImpl
parameter_list|()
block|{
name|EndpointPolicy
name|ep
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|alt
init|=
operator|new
name|ArrayList
argument_list|<
name|Assertion
argument_list|>
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ep
operator|.
name|getChosenAlternative
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|alt
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|PolicyInterceptorProviderRegistry
name|reg
init|=
name|control
operator|.
name|createMock
argument_list|(
name|PolicyInterceptorProviderRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|li
init|=
operator|new
name|ArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|reg
operator|.
name|getInterceptors
argument_list|(
name|alt
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|li
argument_list|)
expr_stmt|;
name|Policy
name|p
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Policy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ep
operator|.
name|getPolicy
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|EffectivePolicy
name|effective
init|=
name|rme
operator|.
expr|new
name|EffectivePolicyImpl
argument_list|(
name|ep
argument_list|,
name|reg
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|alt
argument_list|,
name|effective
operator|.
name|getChosenAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|li
argument_list|,
name|effective
operator|.
name|getInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|p
argument_list|,
name|effective
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyService
parameter_list|()
block|{
name|Service
name|service
init|=
name|rme
operator|.
name|getService
argument_list|()
decl_stmt|;
name|ServiceInfo
name|si
init|=
name|service
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"service info is null"
argument_list|,
name|si
argument_list|)
expr_stmt|;
name|InterfaceInfo
name|intf
init|=
name|si
operator|.
name|getInterface
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|intf
operator|.
name|getOperations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ns
init|=
name|si
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|ns
operator|=
name|RMConstants
operator|.
name|getNamespace
argument_list|()
expr_stmt|;
name|OperationInfo
name|oi
init|=
name|intf
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"CreateSequence"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No operation info."
argument_list|,
name|oi
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Operation is oneway."
argument_list|,
operator|!
name|oi
operator|.
name|isOneWay
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Operation is unwrapped."
argument_list|,
operator|!
name|oi
operator|.
name|isUnwrapped
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Operation is unwrappedCapable."
argument_list|,
operator|!
name|oi
operator|.
name|isUnwrappedCapable
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected unwrapped operation."
argument_list|,
name|oi
operator|.
name|getUnwrappedOperation
argument_list|()
argument_list|)
expr_stmt|;
name|oi
operator|=
name|intf
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"TerminateSequence"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No operation info."
argument_list|,
name|oi
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Operation is toway."
argument_list|,
name|oi
operator|.
name|isOneWay
argument_list|()
argument_list|)
expr_stmt|;
name|oi
operator|=
name|intf
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"SequenceAcknowledgement"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No operation info."
argument_list|,
name|oi
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Operation is toway."
argument_list|,
name|oi
operator|.
name|isOneWay
argument_list|()
argument_list|)
expr_stmt|;
name|oi
operator|=
name|intf
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"LastMessage"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No operation info."
argument_list|,
name|oi
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Operation is toway."
argument_list|,
name|oi
operator|.
name|isOneWay
argument_list|()
argument_list|)
expr_stmt|;
name|oi
operator|=
name|intf
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"AckRequested"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No operation info."
argument_list|,
name|oi
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Operation is toway."
argument_list|,
name|oi
operator|.
name|isOneWay
argument_list|()
argument_list|)
expr_stmt|;
name|oi
operator|=
name|intf
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"CreateSequenceOneway"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No operation info."
argument_list|,
name|oi
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Operation is toway."
argument_list|,
name|oi
operator|.
name|isOneWay
argument_list|()
argument_list|)
expr_stmt|;
name|oi
operator|=
name|intf
operator|.
name|getOperation
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
literal|"CreateSequenceResponseOneway"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No operation info."
argument_list|,
name|oi
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Operation is toway."
argument_list|,
name|oi
operator|.
name|isOneWay
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

