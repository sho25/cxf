begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ConduitSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|DatatypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|SynchronousExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AttributedURIType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|RelatesToType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|WSAddressingFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|WSAddressingFeature
operator|.
name|WSAddressingFeatureApplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|SourcePolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|OfferType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|ProxyTest
block|{
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|RMEndpoint
name|rme
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|rme
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCtor
parameter_list|()
block|{
name|Proxy
name|proxy
init|=
operator|new
name|Proxy
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|rme
argument_list|,
name|proxy
operator|.
name|getReliableEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOfferedIdentifier
parameter_list|()
block|{
name|OfferType
name|offer
init|=
name|control
operator|.
name|createMock
argument_list|(
name|OfferType
operator|.
name|class
argument_list|)
decl_stmt|;
name|Identifier
name|id
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Identifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|offer
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|id
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Proxy
name|proxy
init|=
operator|new
name|Proxy
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|proxy
operator|.
name|getOfferedIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setOfferedIdentifier
argument_list|(
name|offer
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|id
argument_list|,
name|proxy
operator|.
name|getOfferedIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcknowledgeNotSupported
parameter_list|()
throws|throws
name|RMException
block|{
name|DestinationSequence
name|ds
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointReferenceType
name|acksToEPR
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointReferenceType
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ds
operator|.
name|getAcksTo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|acksToEPR
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|AttributedURIType
name|acksToURI
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AttributedURIType
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|acksToEPR
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|acksToURI
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|String
name|acksToAddress
init|=
name|Names
operator|.
name|WSA_ANONYMOUS_ADDRESS
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|acksToURI
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|acksToAddress
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Proxy
name|proxy
init|=
operator|new
name|Proxy
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|acknowledge
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAcknowledge
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|RMException
block|{
name|Method
name|m
init|=
name|Proxy
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"invoke"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|OperationInfo
operator|.
name|class
block|,
name|ProtocolVariation
operator|.
name|class
block|,
name|Object
index|[]
operator|.
expr|class
block|,
name|Map
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Proxy
name|proxy
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|Proxy
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
name|m
argument_list|)
operator|.
name|createMock
argument_list|(
name|control
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|setReliableEndpoint
argument_list|(
name|rme
argument_list|)
expr_stmt|;
name|DestinationSequence
name|ds
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ds
operator|.
name|getProtocol
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EndpointReferenceType
name|acksToEPR
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointReferenceType
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ds
operator|.
name|getAcksTo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|acksToEPR
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|AttributedURIType
name|acksToURI
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AttributedURIType
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|acksToEPR
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|acksToURI
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|String
name|acksToAddress
init|=
literal|"acksTo"
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|acksToURI
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|acksToAddress
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getEndpoint
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EndpointInfo
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|ServiceInfo
name|si
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|epi
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|si
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|InterfaceInfo
name|ii
init|=
name|control
operator|.
name|createMock
argument_list|(
name|InterfaceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|si
operator|.
name|getInterface
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ii
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|OperationInfo
name|oi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|OperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ii
operator|.
name|getOperation
argument_list|(
name|RM10Constants
operator|.
name|SEQUENCE_ACK_QNAME
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|oi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expectInvoke
argument_list|(
name|proxy
argument_list|,
name|oi
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|proxy
operator|.
name|acknowledge
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLastMessage
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|RMException
block|{
name|Method
name|m
init|=
name|Proxy
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"invoke"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|OperationInfo
operator|.
name|class
block|,
name|ProtocolVariation
operator|.
name|class
block|,
name|Object
index|[]
operator|.
expr|class
block|,
name|Map
operator|.
name|class
block|,
name|Level
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Proxy
name|proxy
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|Proxy
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
name|m
argument_list|)
operator|.
name|createMock
argument_list|(
name|control
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|setReliableEndpoint
argument_list|(
name|rme
argument_list|)
expr_stmt|;
name|SourceSequence
name|ss
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SourceSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ss
operator|.
name|getProtocol
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ss
operator|.
name|getTarget
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|proxy
operator|.
name|lastMessage
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
name|target
init|=
name|RMUtils
operator|.
name|createAnonymousReference
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ss
operator|.
name|getTarget
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|target
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|proxy
operator|.
name|lastMessage
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|target
operator|=
name|RMUtils
operator|.
name|createReference
argument_list|(
literal|"http://localhost:9000/greeterPort"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ss
operator|.
name|getTarget
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|target
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ss
operator|.
name|getProtocol
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getEndpoint
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EndpointInfo
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|ServiceInfo
name|si
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|epi
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|si
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|InterfaceInfo
name|ii
init|=
name|control
operator|.
name|createMock
argument_list|(
name|InterfaceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|si
operator|.
name|getInterface
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ii
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|OperationInfo
name|oi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|OperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ii
operator|.
name|getOperation
argument_list|(
name|RM10Constants
operator|.
name|CLOSE_SEQUENCE_QNAME
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|oi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expectInvokeWithContext
argument_list|(
name|proxy
argument_list|,
name|oi
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|proxy
operator|.
name|lastMessage
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTerminate
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|RMException
block|{
name|Method
name|m
init|=
name|Proxy
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"invoke"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|OperationInfo
operator|.
name|class
block|,
name|ProtocolVariation
operator|.
name|class
block|,
name|Object
index|[]
operator|.
expr|class
block|,
name|Map
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Proxy
name|proxy
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|Proxy
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
name|m
argument_list|)
operator|.
name|createMock
argument_list|(
name|control
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|setReliableEndpoint
argument_list|(
name|rme
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getEndpoint
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EndpointInfo
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|ServiceInfo
name|si
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|epi
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|si
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|InterfaceInfo
name|ii
init|=
name|control
operator|.
name|createMock
argument_list|(
name|InterfaceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|si
operator|.
name|getInterface
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ii
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|OperationInfo
name|oi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|OperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ii
operator|.
name|getOperation
argument_list|(
name|RM10Constants
operator|.
name|TERMINATE_SEQUENCE_QNAME
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|oi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|SourceSequence
name|ss
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SourceSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|Identifier
name|id
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Identifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ss
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|id
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ss
operator|.
name|getProtocol
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expectInvoke
argument_list|(
name|proxy
argument_list|,
name|oi
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|proxy
operator|.
name|terminate
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSequenceResponse
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|RMException
block|{
name|Method
name|m
init|=
name|Proxy
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"invoke"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|OperationInfo
operator|.
name|class
block|,
name|ProtocolVariation
operator|.
name|class
block|,
name|Object
index|[]
operator|.
expr|class
block|,
name|Map
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Proxy
name|proxy
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|Proxy
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
name|m
argument_list|)
operator|.
name|createMock
argument_list|(
name|control
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|setReliableEndpoint
argument_list|(
name|rme
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getEndpoint
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EndpointInfo
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|ServiceInfo
name|si
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|epi
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|si
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|InterfaceInfo
name|ii
init|=
name|control
operator|.
name|createMock
argument_list|(
name|InterfaceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|si
operator|.
name|getInterface
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ii
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|OperationInfo
name|oi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|OperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ii
operator|.
name|getOperation
argument_list|(
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_RESPONSE_ONEWAY_QNAME
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|oi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|CreateSequenceResponseType
name|csr
init|=
name|control
operator|.
name|createMock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|CreateSequenceResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|expectInvoke
argument_list|(
name|proxy
argument_list|,
name|oi
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|proxy
operator|.
name|createSequenceResponse
argument_list|(
name|csr
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSequenceOnClient
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|RMException
block|{
name|testCreateSequence
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSequenceOnServer
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|RMException
block|{
name|testCreateSequence
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvoke
parameter_list|()
throws|throws
name|Exception
block|{
name|Method
name|m
init|=
name|Proxy
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createClient"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Bus
operator|.
name|class
block|,
name|Endpoint
operator|.
name|class
block|,
name|ProtocolVariation
operator|.
name|class
block|,
name|Conduit
operator|.
name|class
block|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Proxy
name|proxy
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|Proxy
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
name|m
argument_list|)
operator|.
name|createMock
argument_list|(
name|control
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|setReliableEndpoint
argument_list|(
name|rme
argument_list|)
expr_stmt|;
name|RMManager
name|manager
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|manager
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Bus
name|bus
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getBus
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bus
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getEndpoint
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|BindingInfo
name|bi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getBindingInfo
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Conduit
name|conduit
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Conduit
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getConduit
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|conduit
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
name|replyTo
init|=
name|control
operator|.
name|createMock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getReplyTo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|replyTo
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|OperationInfo
name|oi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|OperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bi
operator|.
name|getOperation
argument_list|(
name|oi
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|boi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Client
name|client
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Client
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|client
operator|.
name|getRequestContext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|proxy
operator|.
name|createClient
argument_list|(
name|bus
argument_list|,
name|endpoint
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|,
name|conduit
argument_list|,
name|replyTo
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|client
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[]
block|{}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
decl_stmt|;
name|Exchange
name|exchange
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|client
operator|.
name|invoke
argument_list|(
name|boi
argument_list|,
name|args
argument_list|,
name|context
argument_list|,
name|exchange
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|results
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|proxy
operator|.
name|invoke
argument_list|(
name|oi
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|,
name|args
argument_list|,
name|context
argument_list|,
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRMClientConstruction
parameter_list|()
block|{
name|Proxy
name|proxy
init|=
operator|new
name|Proxy
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|WSAddressingFeatureApplier
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|WSAddressingFeatureApplier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|initializeProvider
parameter_list|(
name|WSAddressingFeature
name|feature
parameter_list|,
name|InterceptorProvider
name|provider
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{                 }
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Conduit
name|conduit
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Conduit
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
name|address
init|=
name|control
operator|.
name|createMock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|proxy
operator|.
name|createClient
argument_list|(
name|bus
argument_list|,
name|endpoint
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|,
name|conduit
argument_list|,
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRMClientGetConduit
parameter_list|()
throws|throws
name|Exception
block|{
name|Proxy
name|proxy
init|=
operator|new
name|Proxy
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|Bus
name|bus
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Conduit
name|conduit
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Conduit
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConduitSelector
name|cs
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ConduitSelector
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|cs
operator|.
name|selectConduit
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|conduit
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Proxy
operator|.
name|RMClient
name|client
init|=
name|proxy
operator|.
expr|new
name|RMClient
argument_list|(
name|bus
argument_list|,
name|endpoint
argument_list|,
name|cs
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|conduit
argument_list|,
name|client
operator|.
name|getConduit
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|testCreateSequence
parameter_list|(
name|boolean
name|isServer
parameter_list|)
throws|throws
name|NoSuchMethodException
throws|,
name|RMException
block|{
name|Method
name|m
init|=
name|Proxy
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"invoke"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|OperationInfo
operator|.
name|class
block|,
name|ProtocolVariation
operator|.
name|class
block|,
name|Object
index|[]
operator|.
expr|class
block|,
name|Map
operator|.
name|class
block|,
name|Exchange
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Proxy
name|proxy
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|Proxy
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
name|m
argument_list|)
operator|.
name|createMock
argument_list|(
name|control
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|setReliableEndpoint
argument_list|(
name|rme
argument_list|)
expr_stmt|;
name|RMManager
name|manager
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|manager
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|SourcePolicyType
name|sp
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SourcePolicyType
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getSourcePolicy
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sp
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sp
operator|.
name|getAcksTo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Duration
name|d
init|=
name|DatatypeFactory
operator|.
name|createDuration
argument_list|(
literal|"PT12H"
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sp
operator|.
name|getSequenceExpiration
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|d
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sp
operator|.
name|isIncludeOffer
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Duration
name|dOffered
init|=
name|DatatypeFactory
operator|.
name|createDuration
argument_list|(
literal|"PT24H"
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sp
operator|.
name|getOfferedSequenceExpiration
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dOffered
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Source
name|source
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Source
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getSource
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|source
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Identifier
name|offeredId
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Identifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|source
operator|.
name|generateSequenceIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|offeredId
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getEndpoint
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EndpointInfo
name|epi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|ServiceInfo
name|si
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|epi
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|si
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|InterfaceInfo
name|ii
init|=
name|control
operator|.
name|createMock
argument_list|(
name|InterfaceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|si
operator|.
name|getInterface
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ii
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|OperationInfo
name|oi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|OperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|CreateSequenceResponseType
name|csr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isServer
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|ii
operator|.
name|getOperation
argument_list|(
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ONEWAY_QNAME
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|oi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Endpoint
name|ae
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getApplicationEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ae
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ae
operator|.
name|getExecutor
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|SynchronousExecutor
operator|.
name|getInstance
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|ii
operator|.
name|getOperation
argument_list|(
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_QNAME
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|oi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|csr
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|CreateSequenceResponseType
argument_list|()
expr_stmt|;
block|}
name|ExchangeImpl
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|proxy
operator|.
name|invoke
argument_list|(
name|EasyMock
operator|.
name|same
argument_list|(
name|oi
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|ProtocolVariation
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|csr
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EndpointReferenceType
name|defaultAcksTo
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointReferenceType
operator|.
name|class
argument_list|)
decl_stmt|;
name|AttributedURIType
name|aut
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AttributedURIType
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|aut
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"here"
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|defaultAcksTo
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|aut
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|RelatesToType
name|relatesTo
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RelatesToType
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isServer
condition|)
block|{
name|assertNull
argument_list|(
name|proxy
operator|.
name|createSequence
argument_list|(
name|defaultAcksTo
argument_list|,
name|relatesTo
argument_list|,
name|isServer
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|,
name|exchange
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|proxy
operator|.
name|createSequence
argument_list|(
name|defaultAcksTo
argument_list|,
name|relatesTo
argument_list|,
name|isServer
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|,
name|exchange
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|expectInvoke
parameter_list|(
name|Proxy
name|proxy
parameter_list|,
name|OperationInfo
name|oi
parameter_list|,
name|Object
name|expectedReturn
parameter_list|)
throws|throws
name|RMException
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|proxy
operator|.
name|invoke
argument_list|(
name|EasyMock
operator|.
name|same
argument_list|(
name|oi
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|ProtocolVariation
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|EasyMock
operator|.
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|expectedReturn
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|expectInvokeWithContext
parameter_list|(
name|Proxy
name|proxy
parameter_list|,
name|OperationInfo
name|oi
parameter_list|,
name|Object
name|expectedReturn
parameter_list|)
throws|throws
name|RMException
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|proxy
operator|.
name|invoke
argument_list|(
name|EasyMock
operator|.
name|same
argument_list|(
name|oi
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|ProtocolVariation
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|same
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|expectedReturn
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

