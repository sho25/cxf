begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|FaultMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingPropertiesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|MAPAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200408
operator|.
name|AttributedURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|RMOutInterceptorTest
extends|extends
name|Assert
block|{
specifier|private
name|IMocksControl
name|control
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrdering
parameter_list|()
block|{
name|Phase
name|p
init|=
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|PRE_LOGICAL
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|phases
init|=
operator|new
name|TreeSet
argument_list|<
name|Phase
argument_list|>
argument_list|()
decl_stmt|;
name|phases
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|PhaseInterceptorChain
name|chain
init|=
operator|new
name|PhaseInterceptorChain
argument_list|(
name|phases
argument_list|)
decl_stmt|;
name|MAPAggregator
name|map
init|=
operator|new
name|MAPAggregator
argument_list|()
decl_stmt|;
name|RMOutInterceptor
name|rmi
init|=
operator|new
name|RMOutInterceptor
argument_list|()
decl_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|rmi
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|chain
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
literal|"Unexpected order."
argument_list|,
name|map
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Unexpected order."
argument_list|,
name|rmi
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleRuntimeFault
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|SequenceFault
throws|,
name|RMException
block|{
name|Method
index|[]
name|mocked
init|=
operator|new
name|Method
index|[]
block|{
name|RMOutInterceptor
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"isRuntimeFault"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Message
operator|.
name|class
block|}
argument_list|)
block|}
decl_stmt|;
name|RMOutInterceptor
name|interceptor
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMOutInterceptor
operator|.
name|class
argument_list|,
name|mocked
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|interceptor
operator|.
name|isRuntimeFault
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|handle
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleNoMAPs
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|SequenceFault
throws|,
name|RMException
block|{
name|Method
index|[]
name|mocked
init|=
operator|new
name|Method
index|[]
block|{
name|RMOutInterceptor
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"isRuntimeFault"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Message
operator|.
name|class
block|}
argument_list|)
block|}
decl_stmt|;
name|RMOutInterceptor
name|interceptor
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMOutInterceptor
operator|.
name|class
argument_list|,
name|mocked
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|interceptor
operator|.
name|isRuntimeFault
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|JAXWSAConstants
operator|.
name|SERVER_ADDRESSING_PROPERTIES_OUTBOUND
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|handle
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleApplicationMessage
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|SequenceFault
throws|,
name|RMException
block|{
name|AddressingPropertiesImpl
name|maps
init|=
name|createMAPs
argument_list|(
literal|"greetMe"
argument_list|,
literal|"localhost:9000/GreeterPort"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|Names
operator|.
name|WSA_NONE_ADDRESS
argument_list|)
decl_stmt|;
name|Method
index|[]
name|mocked
init|=
operator|new
name|Method
index|[]
block|{
name|AbstractRMInterceptor
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getManager"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
block|,
name|RMOutInterceptor
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"isRuntimeFault"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Message
operator|.
name|class
block|}
argument_list|)
block|,
name|RMOutInterceptor
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"addAcknowledgements"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Destination
operator|.
name|class
block|,
name|RMProperties
operator|.
name|class
block|,
name|Identifier
operator|.
name|class
block|,
name|AttributedURI
operator|.
name|class
block|}
argument_list|)
block|}
decl_stmt|;
name|RMOutInterceptor
name|interceptor
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMOutInterceptor
operator|.
name|class
argument_list|,
name|mocked
argument_list|)
decl_stmt|;
name|RMManager
name|manager
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|interceptor
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|manager
argument_list|)
operator|.
name|times
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|interceptor
operator|.
name|isRuntimeFault
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Exchange
name|ex
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ex
argument_list|)
operator|.
name|times
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ex
operator|.
name|getOutMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|message
argument_list|)
operator|.
name|times
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|JAXWSAConstants
operator|.
name|CLIENT_ADDRESSING_PROPERTIES_OUTBOUND
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|maps
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|RMProperties
name|rmpsOut
init|=
operator|new
name|RMProperties
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|RMMessageConstants
operator|.
name|RM_PROPERTIES_OUTBOUND
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rmpsOut
argument_list|)
expr_stmt|;
name|InterceptorChain
name|chain
init|=
name|control
operator|.
name|createMock
argument_list|(
name|InterceptorChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getInterceptorChain
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|RetransmissionInterceptor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|RetransmissionQueue
name|queue
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RetransmissionQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getRetransmissionQueue
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|queue
operator|.
name|start
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|Source
name|source
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Source
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getSource
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|Destination
name|destination
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getDestination
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|SourceSequence
name|sseq
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SourceSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getSequence
argument_list|(
operator|(
name|Identifier
operator|)
name|EasyMock
operator|.
name|isNull
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|same
argument_list|(
name|message
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|same
argument_list|(
name|maps
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sseq
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sseq
operator|.
name|nextMessageNumber
argument_list|(
operator|(
name|Identifier
operator|)
name|EasyMock
operator|.
name|isNull
argument_list|()
argument_list|,
operator|(
name|BigInteger
operator|)
name|EasyMock
operator|.
name|isNull
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|BigInteger
operator|.
name|TEN
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sseq
operator|.
name|isLastMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|addAcknowledgements
argument_list|(
name|EasyMock
operator|.
name|same
argument_list|(
name|destination
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|same
argument_list|(
name|rmpsOut
argument_list|)
argument_list|,
operator|(
name|Identifier
operator|)
name|EasyMock
operator|.
name|isNull
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|AttributedURI
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|Identifier
name|sid
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Identifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sseq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sseq
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|BigInteger
operator|.
name|TEN
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|handle
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|sid
argument_list|,
name|rmpsOut
operator|.
name|getSequence
argument_list|()
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BigInteger
operator|.
name|TEN
argument_list|,
name|rmpsOut
operator|.
name|getSequence
argument_list|()
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rmpsOut
operator|.
name|getSequence
argument_list|()
operator|.
name|getLastMessage
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsRuntimeFault
parameter_list|()
block|{
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getOutFaultMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|FaultMode
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|FaultMode
operator|.
name|RUNTIME_FAULT
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|RMOutInterceptor
name|rmi
init|=
operator|new
name|RMOutInterceptor
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rmi
operator|.
name|isRuntimeFault
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getOutFaultMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|rmi
operator|.
name|isRuntimeFault
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|private
name|AddressingPropertiesImpl
name|createMAPs
parameter_list|(
name|String
name|action
parameter_list|,
name|String
name|to
parameter_list|,
name|String
name|replyTo
parameter_list|)
block|{
name|AddressingPropertiesImpl
name|maps
init|=
operator|new
name|AddressingPropertiesImpl
argument_list|()
decl_stmt|;
name|maps
operator|.
name|setTo
argument_list|(
name|RMUtils
operator|.
name|createReference
argument_list|(
name|to
argument_list|)
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|epr
init|=
name|RMUtils
operator|.
name|createReference
argument_list|(
name|replyTo
argument_list|)
decl_stmt|;
name|maps
operator|.
name|setReplyTo
argument_list|(
name|epr
argument_list|)
expr_stmt|;
return|return
name|maps
return|;
block|}
block|}
end_class

end_unit

