begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AttributedURIType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|MAPAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|Names200408
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|impl
operator|.
name|AddressingPropertiesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|CreateSequenceResponseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceAcknowledgement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|RMInInterceptorTest
extends|extends
name|Assert
block|{
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|RMInInterceptor
name|interceptor
decl_stmt|;
specifier|private
name|RMManager
name|manager
decl_stmt|;
specifier|private
name|RMEndpoint
name|rme
decl_stmt|;
specifier|private
name|RMProperties
name|rmps
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|rmps
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMProperties
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrdering
parameter_list|()
block|{
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Phase
name|p
init|=
operator|new
name|Phase
argument_list|(
name|Phase
operator|.
name|PRE_LOGICAL
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|phases
init|=
operator|new
name|TreeSet
argument_list|<
name|Phase
argument_list|>
argument_list|()
decl_stmt|;
name|phases
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|PhaseInterceptorChain
name|chain
init|=
operator|new
name|PhaseInterceptorChain
argument_list|(
name|phases
argument_list|)
decl_stmt|;
name|MAPAggregator
name|map
init|=
operator|new
name|MAPAggregator
argument_list|()
decl_stmt|;
name|RMInInterceptor
name|rmi
init|=
operator|new
name|RMInInterceptor
argument_list|()
decl_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|rmi
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|it
init|=
name|chain
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
literal|"Unexpected order."
argument_list|,
name|rmi
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Unexpected order."
argument_list|,
name|map
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleCreateSequenceOnServer
parameter_list|()
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
name|interceptor
operator|=
operator|new
name|RMInInterceptor
argument_list|()
expr_stmt|;
name|Message
name|message
init|=
name|setupInboundMessage
argument_list|(
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|rme
operator|.
name|receivedControlMessage
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|handle
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleCreateSequenceOnClient
parameter_list|()
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
name|interceptor
operator|=
operator|new
name|RMInInterceptor
argument_list|()
expr_stmt|;
name|Message
name|message
init|=
name|setupInboundMessage
argument_list|(
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|rme
operator|.
name|receivedControlMessage
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|Servant
name|servant
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Servant
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getServant
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|servant
argument_list|)
expr_stmt|;
name|CreateSequenceResponseType
name|csr
init|=
name|control
operator|.
name|createMock
argument_list|(
name|CreateSequenceResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|servant
operator|.
name|createSequence
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|csr
argument_list|)
expr_stmt|;
name|Proxy
name|proxy
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Proxy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getProxy
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|createSequenceResponse
argument_list|(
name|csr
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|handle
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleSequenceAckOnClient
parameter_list|()
throws|throws
name|SequenceFault
throws|,
name|RMException
throws|,
name|NoSuchMethodException
block|{
name|testHandleSequenceAck
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleSequenceAckOnServer
parameter_list|()
throws|throws
name|SequenceFault
throws|,
name|RMException
throws|,
name|NoSuchMethodException
block|{
name|testHandleSequenceAck
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testHandleSequenceAck
parameter_list|(
name|boolean
name|onServer
parameter_list|)
throws|throws
name|SequenceFault
throws|,
name|RMException
throws|,
name|NoSuchMethodException
block|{
name|Method
name|m
init|=
name|RMInInterceptor
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"processAcknowledgments"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|RMEndpoint
operator|.
name|class
block|,
name|RMProperties
operator|.
name|class
block|,
name|ProtocolVariation
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|interceptor
operator|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|RMInInterceptor
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethod
argument_list|(
name|m
argument_list|)
operator|.
name|createMock
argument_list|(
name|control
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|setupInboundMessage
argument_list|(
name|RM10Constants
operator|.
name|SEQUENCE_ACKNOWLEDGMENT_ACTION
argument_list|,
name|onServer
argument_list|)
decl_stmt|;
name|rme
operator|.
name|receivedControlMessage
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|processAcknowledgments
argument_list|(
name|rme
argument_list|,
name|rmps
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|handle
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleTerminateSequenceOnServer
parameter_list|()
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
name|testHandleTerminateSequence
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleTerminateSequenceOnClient
parameter_list|()
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
name|testHandleTerminateSequence
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testHandleTerminateSequence
parameter_list|(
name|boolean
name|onServer
parameter_list|)
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
name|interceptor
operator|=
operator|new
name|RMInInterceptor
argument_list|()
expr_stmt|;
name|Message
name|message
init|=
name|setupInboundMessage
argument_list|(
name|RM10Constants
operator|.
name|TERMINATE_SEQUENCE_ACTION
argument_list|,
name|onServer
argument_list|)
decl_stmt|;
name|rme
operator|.
name|receivedControlMessage
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|handle
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppRequest
parameter_list|()
throws|throws
name|SequenceFault
throws|,
name|RMException
throws|,
name|NoSuchMethodException
block|{
name|testAppMessage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppResponse
parameter_list|()
throws|throws
name|SequenceFault
throws|,
name|RMException
throws|,
name|NoSuchMethodException
block|{
name|testAppMessage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefferedAbort
parameter_list|()
throws|throws
name|SequenceFault
throws|,
name|RMException
throws|,
name|NoSuchMethodException
block|{
name|testAppMessage
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testAppMessage
parameter_list|(
name|boolean
name|onServer
parameter_list|)
throws|throws
name|SequenceFault
throws|,
name|RMException
throws|,
name|NoSuchMethodException
block|{
name|testAppMessage
argument_list|(
name|onServer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testAppMessage
parameter_list|(
name|boolean
name|onServer
parameter_list|,
name|boolean
name|deferredAbort
parameter_list|)
throws|throws
name|SequenceFault
throws|,
name|RMException
throws|,
name|NoSuchMethodException
block|{
name|Method
name|m1
init|=
name|RMInInterceptor
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"processAcknowledgments"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|RMEndpoint
operator|.
name|class
block|,
name|RMProperties
operator|.
name|class
block|,
name|ProtocolVariation
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Method
name|m2
init|=
name|RMInInterceptor
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"processAcknowledgmentRequests"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Destination
operator|.
name|class
block|,
name|Message
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Method
name|m3
init|=
name|RMInInterceptor
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"processSequence"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Destination
operator|.
name|class
block|,
name|Message
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Method
name|m4
init|=
name|RMInInterceptor
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"processDeliveryAssurance"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|RMProperties
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|interceptor
operator|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|RMInInterceptor
operator|.
name|class
argument_list|)
operator|.
name|addMockedMethods
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|,
name|m3
argument_list|,
name|m4
argument_list|)
operator|.
name|createMock
argument_list|(
name|control
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|setupInboundMessage
argument_list|(
literal|"greetMe"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Destination
name|d
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getDestination
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|interceptor
operator|.
name|processAcknowledgments
argument_list|(
name|rme
argument_list|,
name|rmps
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|processAcknowledgmentRequests
argument_list|(
name|d
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|processSequence
argument_list|(
name|d
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|processDeliveryAssurance
argument_list|(
name|rmps
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Exchange
name|ex
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|ex
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|ex
operator|.
name|get
argument_list|(
literal|"deferred.uncorrelated.message.abort"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|InterceptorChain
name|chain
init|=
name|control
operator|.
name|createMock
argument_list|(
name|InterceptorChain
operator|.
name|class
argument_list|)
decl_stmt|;
name|message
operator|.
name|getInterceptorChain
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|chain
operator|.
name|abort
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|handle
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessAcknowledgments
parameter_list|()
throws|throws
name|RMException
block|{
name|interceptor
operator|=
operator|new
name|RMInInterceptor
argument_list|()
expr_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|Source
name|source
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Source
operator|.
name|class
argument_list|)
decl_stmt|;
name|rme
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getSource
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|source
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|setManager
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|SequenceAcknowledgement
name|ack1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SequenceAcknowledgement
operator|.
name|class
argument_list|)
decl_stmt|;
name|SequenceAcknowledgement
name|ack2
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SequenceAcknowledgement
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|SequenceAcknowledgement
argument_list|>
name|acks
init|=
operator|new
name|ArrayList
argument_list|<
name|SequenceAcknowledgement
argument_list|>
argument_list|()
decl_stmt|;
name|acks
operator|.
name|add
argument_list|(
name|ack1
argument_list|)
expr_stmt|;
name|acks
operator|.
name|add
argument_list|(
name|ack2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rmps
operator|.
name|getAcks
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|acks
argument_list|)
expr_stmt|;
name|Identifier
name|id1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Identifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ack1
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|id1
argument_list|)
expr_stmt|;
name|SourceSequence
name|ss1
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SourceSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|source
operator|.
name|getSequence
argument_list|(
name|id1
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ss1
argument_list|)
expr_stmt|;
name|ss1
operator|.
name|setAcknowledged
argument_list|(
name|ack1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|Identifier
name|id2
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Identifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ack2
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|source
operator|.
name|getSequence
argument_list|(
name|id2
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
try|try
block|{
name|interceptor
operator|.
name|processAcknowledgments
argument_list|(
name|rme
argument_list|,
name|rmps
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected SequenceFault not thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SequenceFault
name|sf
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|RM10Constants
operator|.
name|UNKNOWN_SEQUENCE_FAULT_QNAME
argument_list|,
name|sf
operator|.
name|getFaultCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessAcknowledgmentRequests
parameter_list|()
block|{
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
comment|// TODI
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessSequence
parameter_list|()
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
name|Destination
name|destination
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|destination
operator|.
name|acknowledge
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|interceptor
operator|=
operator|new
name|RMInInterceptor
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|processSequence
argument_list|(
name|destination
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessDeliveryAssurance
parameter_list|()
block|{
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
comment|// TODO
block|}
specifier|private
name|Message
name|setupInboundMessage
parameter_list|(
name|String
name|action
parameter_list|,
name|boolean
name|serverSide
parameter_list|)
throws|throws
name|RMException
block|{
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getOutMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getOutFaultMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|RMMessageConstants
operator|.
name|RM_PROPERTIES_INBOUND
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rmps
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|!
name|serverSide
argument_list|)
expr_stmt|;
name|AddressingPropertiesImpl
name|maps
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AddressingPropertiesImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|maps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|JAXWSAConstants
operator|.
name|SERVER_ADDRESSING_PROPERTIES_INBOUND
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|maps
argument_list|)
expr_stmt|;
name|AttributedURIType
name|actionURI
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AttributedURIType
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|maps
operator|.
name|getAction
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|actionURI
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|actionURI
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|RMMessageConstants
operator|.
name|ORIGINAL_REQUESTOR_ROLE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
name|td
init|=
name|serverSide
condition|?
name|control
operator|.
name|createMock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
operator|.
name|class
argument_list|)
else|:
literal|null
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|td
argument_list|)
expr_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getRMNamespace
argument_list|(
name|EasyMock
operator|.
name|same
argument_list|(
name|message
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getAddressingNamespace
argument_list|(
name|EasyMock
operator|.
name|same
argument_list|(
name|message
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Names200408
operator|.
name|WSA_NAMESPACE_NAME
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|interceptor
operator|.
name|setManager
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|rme
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getReliableEndpoint
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rme
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rmps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
return|return
name|message
return|;
block|}
block|}
end_class

end_unit

