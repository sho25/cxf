begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|DatatypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|SequenceTerminationPolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|SourcePolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Expires
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceAcknowledgement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|SourceSequenceTest
block|{
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|ObjectFactory
name|factory
decl_stmt|;
specifier|private
name|Identifier
name|id
decl_stmt|;
specifier|private
name|Source
name|source
decl_stmt|;
specifier|private
name|RMManager
name|manager
decl_stmt|;
specifier|private
name|SourcePolicyType
name|sp
decl_stmt|;
specifier|private
name|SequenceTerminationPolicyType
name|stp
decl_stmt|;
specifier|private
name|RetransmissionQueue
name|rq
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|factory
operator|=
operator|new
name|ObjectFactory
argument_list|()
expr_stmt|;
name|id
operator|=
name|factory
operator|.
name|createIdentifier
argument_list|()
expr_stmt|;
name|id
operator|.
name|setValue
argument_list|(
literal|"seq"
argument_list|)
expr_stmt|;
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|source
operator|=
literal|null
expr_stmt|;
name|manager
operator|=
literal|null
expr_stmt|;
name|sp
operator|=
literal|null
expr_stmt|;
name|stp
operator|=
literal|null
expr_stmt|;
name|rq
operator|=
literal|null
expr_stmt|;
block|}
name|void
name|setUpSource
parameter_list|()
block|{
name|source
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Source
operator|.
name|class
argument_list|)
expr_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|source
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|manager
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|rq
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RetransmissionQueue
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getRetransmissionQueue
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rq
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
comment|// default termination policy
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|ObjectFactory
name|cfgFactory
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|ObjectFactory
argument_list|()
decl_stmt|;
name|sp
operator|=
name|cfgFactory
operator|.
name|createSourcePolicyType
argument_list|()
expr_stmt|;
name|stp
operator|=
name|cfgFactory
operator|.
name|createSequenceTerminationPolicyType
argument_list|()
expr_stmt|;
name|sp
operator|.
name|setSequenceTerminationPolicy
argument_list|(
name|stp
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getSourcePolicy
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sp
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstructors
parameter_list|()
block|{
name|Identifier
name|otherId
init|=
name|factory
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|otherId
operator|.
name|setValue
argument_list|(
literal|"otherSeq"
argument_list|)
expr_stmt|;
name|SourceSequence
name|seq
init|=
literal|null
decl_stmt|;
name|seq
operator|=
operator|new
name|SourceSequence
argument_list|(
name|id
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|isLastMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
operator|.
name|getAcknowledgement
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getAcknowledgement
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|allAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|offeredBy
argument_list|(
name|otherId
argument_list|)
argument_list|)
expr_stmt|;
name|Date
name|expiry
init|=
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|3600
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|seq
operator|=
operator|new
name|SourceSequence
argument_list|(
name|id
argument_list|,
name|expiry
argument_list|,
literal|null
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|isLastMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seq
operator|.
name|getAcknowledgement
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|seq
operator|.
name|getAcknowledgement
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|allAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|offeredBy
argument_list|(
name|otherId
argument_list|)
argument_list|)
expr_stmt|;
name|seq
operator|=
operator|new
name|SourceSequence
argument_list|(
name|id
argument_list|,
name|expiry
argument_list|,
name|otherId
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|seq
operator|.
name|offeredBy
argument_list|(
name|otherId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|offeredBy
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetExpires
parameter_list|()
block|{
name|SourceSequence
name|seq
init|=
operator|new
name|SourceSequence
argument_list|(
name|id
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|Expires
name|expires
init|=
name|factory
operator|.
name|createExpires
argument_list|()
decl_stmt|;
name|seq
operator|.
name|setExpires
argument_list|(
name|expires
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
name|Duration
name|d
init|=
name|DatatypeFactory
operator|.
name|PT0S
decl_stmt|;
name|expires
operator|.
name|setValue
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setExpires
argument_list|(
name|expires
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|seq
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|d
operator|=
name|DatatypeFactory
operator|.
name|createDuration
argument_list|(
literal|"PT1S"
argument_list|)
expr_stmt|;
name|expires
operator|.
name|setValue
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setExpires
argument_list|(
name|expires
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|=
name|DatatypeFactory
operator|.
name|createDuration
argument_list|(
literal|"-PT1S"
argument_list|)
expr_stmt|;
name|expires
operator|.
name|setValue
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setExpires
argument_list|(
name|expires
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|seq
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsAndHashCode
parameter_list|()
block|{
name|SourceSequence
name|seq
init|=
operator|new
name|SourceSequence
argument_list|(
name|id
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|SourceSequence
name|otherSeq
init|=
literal|null
decl_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|equals
argument_list|(
name|otherSeq
argument_list|)
argument_list|)
expr_stmt|;
name|otherSeq
operator|=
operator|new
name|SourceSequence
argument_list|(
name|id
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|seq
argument_list|,
name|otherSeq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|seq
operator|.
name|hashCode
argument_list|()
argument_list|,
name|otherSeq
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Identifier
name|otherId
init|=
name|factory
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|otherId
operator|.
name|setValue
argument_list|(
literal|"otherSeq"
argument_list|)
expr_stmt|;
name|otherSeq
operator|=
operator|new
name|SourceSequence
argument_list|(
name|otherId
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|equals
argument_list|(
name|otherSeq
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|seq
operator|.
name|hashCode
argument_list|()
operator|!=
name|otherSeq
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetAcknowledged
parameter_list|()
throws|throws
name|RMException
block|{
name|SourceSequence
name|seq
init|=
operator|new
name|SourceSequence
argument_list|(
name|id
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|setUpSource
argument_list|()
expr_stmt|;
name|seq
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|SequenceAcknowledgement
name|ack
init|=
name|seq
operator|.
name|getAcknowledgement
argument_list|()
decl_stmt|;
name|ack
operator|=
name|factory
operator|.
name|createSequenceAcknowledgement
argument_list|()
expr_stmt|;
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|r
init|=
name|factory
operator|.
name|createSequenceAcknowledgementAcknowledgementRange
argument_list|()
decl_stmt|;
name|r
operator|.
name|setLower
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUpper
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|ack
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|factory
operator|.
name|createSequenceAcknowledgementAcknowledgementRange
argument_list|()
expr_stmt|;
name|r
operator|.
name|setLower
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUpper
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|ack
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|factory
operator|.
name|createSequenceAcknowledgementAcknowledgementRange
argument_list|()
expr_stmt|;
name|r
operator|.
name|setLower
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUpper
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|ack
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|rq
operator|.
name|purgeAcknowledged
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|seq
operator|.
name|setAcknowledged
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ack
argument_list|,
name|seq
operator|.
name|getAcknowledgement
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ack
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|isAcknowledged
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|seq
operator|.
name|isAcknowledged
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllAcknowledged
parameter_list|()
throws|throws
name|RMException
block|{
name|SourceSequence
name|seq
init|=
operator|new
name|SourceSequence
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|setUpSource
argument_list|()
expr_stmt|;
name|seq
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|allAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setLastMessage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|allAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|SequenceAcknowledgement
name|ack
init|=
name|factory
operator|.
name|createSequenceAcknowledgement
argument_list|()
decl_stmt|;
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|r
init|=
name|factory
operator|.
name|createSequenceAcknowledgementAcknowledgementRange
argument_list|()
decl_stmt|;
name|r
operator|.
name|setLower
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUpper
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|ack
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|rq
operator|.
name|purgeAcknowledged
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|seq
operator|.
name|setAcknowledged
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|seq
operator|.
name|allAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUpper
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|seq
operator|.
name|allAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNextMessageNumber
parameter_list|()
throws|throws
name|RMException
block|{
name|SourceSequence
name|seq
init|=
literal|null
decl_stmt|;
name|setUpSource
argument_list|()
expr_stmt|;
name|rq
operator|.
name|purgeAcknowledged
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|SourceSequence
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
comment|// default termination policy
name|seq
operator|=
operator|new
name|SourceSequence
argument_list|(
name|id
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nextMessages
argument_list|(
name|seq
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
comment|// termination policy max length = 1
name|seq
operator|=
operator|new
name|SourceSequence
argument_list|(
name|id
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|stp
operator|.
name|setMaxLength
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nextMessages
argument_list|(
name|seq
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
comment|// termination policy max length = 5
name|seq
operator|=
operator|new
name|SourceSequence
argument_list|(
name|id
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|stp
operator|.
name|setMaxLength
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nextMessages
argument_list|(
name|seq
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
comment|// termination policy max range exceeded
name|seq
operator|=
operator|new
name|SourceSequence
argument_list|(
name|id
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|stp
operator|.
name|setMaxLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|stp
operator|.
name|setMaxRanges
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|acknowledge
argument_list|(
name|seq
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nextMessages
argument_list|(
name|seq
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
comment|// termination policy max range not exceeded
name|seq
operator|=
operator|new
name|SourceSequence
argument_list|(
name|id
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|stp
operator|.
name|setMaxLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|stp
operator|.
name|setMaxRanges
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|acknowledge
argument_list|(
name|seq
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nextMessages
argument_list|(
name|seq
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
comment|// termination policy max unacknowledged
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEndpointIdentfier
parameter_list|()
block|{
name|setUpSource
argument_list|()
expr_stmt|;
name|String
name|name
init|=
literal|"abc"
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|source
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|SourceSequence
name|seq
init|=
operator|new
name|SourceSequence
argument_list|(
name|id
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
decl_stmt|;
name|seq
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected endpoint identifier"
argument_list|,
name|name
argument_list|,
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckOfferingSequenceClosed
parameter_list|()
block|{
name|SourceSequence
name|seq
init|=
literal|null
decl_stmt|;
name|setUpSource
argument_list|()
expr_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|source
operator|.
name|getReliableEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rme
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Destination
name|destination
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destination
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|DestinationSequence
name|dseq
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|Identifier
name|did
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Identifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|destination
operator|.
name|getSequence
argument_list|(
name|did
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dseq
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|dseq
operator|.
name|getLastMessageNumber
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|did
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"dseq"
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|seq
operator|=
operator|new
name|SourceSequence
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
name|did
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|seq
operator|.
name|nextMessageNumber
argument_list|(
name|did
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|seq
operator|.
name|isLastMessage
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|nextMessages
parameter_list|(
name|SourceSequence
name|seq
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|i
operator|<
name|n
operator|)
operator|&&
operator|!
name|seq
operator|.
name|isLastMessage
argument_list|()
condition|)
block|{
name|seq
operator|.
name|nextMessageNumber
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|seq
operator|.
name|isLastMessage
argument_list|()
return|;
block|}
specifier|protected
name|void
name|acknowledge
parameter_list|(
name|SourceSequence
name|seq
parameter_list|,
name|int
modifier|...
name|messageNumbers
parameter_list|)
throws|throws
name|RMException
block|{
name|SequenceAcknowledgement
name|ack
init|=
name|factory
operator|.
name|createSequenceAcknowledgement
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|messageNumbers
operator|.
name|length
condition|)
block|{
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|r
init|=
name|factory
operator|.
name|createSequenceAcknowledgementAcknowledgementRange
argument_list|()
decl_stmt|;
name|Long
name|l
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|messageNumbers
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|r
operator|.
name|setLower
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
while|while
condition|(
name|i
operator|<
name|messageNumbers
operator|.
name|length
operator|&&
operator|(
name|messageNumbers
index|[
name|i
index|]
operator|-
name|messageNumbers
index|[
name|i
operator|-
literal|1
index|]
operator|)
operator|==
literal|1
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|Long
name|u
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|messageNumbers
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
name|r
operator|.
name|setUpper
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|ack
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|seq
operator|.
name|setAcknowledged
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

