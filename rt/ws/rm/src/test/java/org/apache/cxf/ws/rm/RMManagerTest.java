begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AttributedURIType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|RelatesToType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|DestinationPolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|SequenceTerminationPolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|SourcePolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|CreateSequenceResponseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|Capture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|RMManagerTest
extends|extends
name|Assert
block|{
specifier|private
name|MyControl
name|control
decl_stmt|;
specifier|private
name|RMManager
name|manager
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
comment|// control = EasyMock.createNiceControl();
name|control
operator|=
operator|new
name|MyControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessors
parameter_list|()
block|{
name|manager
operator|=
operator|new
name|RMManager
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|manager
operator|.
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|manager
operator|.
name|getStore
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|manager
operator|.
name|getRetransmissionQueue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|manager
operator|.
name|getTimer
argument_list|()
argument_list|)
expr_stmt|;
name|Bus
name|bus
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMStore
name|store
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|RetransmissionQueue
name|queue
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RetransmissionQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|manager
operator|.
name|setBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setStore
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setRetransmissionQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|bus
argument_list|,
name|manager
operator|.
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|store
argument_list|,
name|manager
operator|.
name|getStore
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|queue
argument_list|,
name|manager
operator|.
name|getRetransmissionQueue
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitialisation
parameter_list|()
block|{
name|manager
operator|=
operator|new
name|RMManager
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"sourcePolicy is set."
argument_list|,
name|manager
operator|.
name|getSourcePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"destinationPolicy is set."
argument_list|,
name|manager
operator|.
name|getDestinationPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|initialise
argument_list|()
expr_stmt|;
name|RMConfiguration
name|cfg
init|=
name|manager
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"RMConfiguration is not set."
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"sourcePolicy is not set."
argument_list|,
name|manager
operator|.
name|getSourcePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"destinationPolicy is not set."
argument_list|,
name|manager
operator|.
name|getDestinationPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"deliveryAssirance is not set."
argument_list|,
name|cfg
operator|.
name|getDeliveryAssurance
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cfg
operator|.
name|isExponentialBackoff
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3000L
argument_list|,
name|cfg
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cfg
operator|.
name|getAcknowledgementInterval
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cfg
operator|.
name|getInactivityTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|SourcePolicyType
name|sp
init|=
name|manager
operator|.
name|getSourcePolicy
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|sp
operator|.
name|getSequenceExpiration
argument_list|()
operator|.
name|getTimeInMillis
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|sp
operator|.
name|getOfferedSequenceExpiration
argument_list|()
operator|.
name|getTimeInMillis
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|sp
operator|.
name|getAcksTo
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sp
operator|.
name|isIncludeOffer
argument_list|()
argument_list|)
expr_stmt|;
name|SequenceTerminationPolicyType
name|stp
init|=
name|sp
operator|.
name|getSequenceTerminationPolicy
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stp
operator|.
name|getMaxRanges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stp
operator|.
name|getMaxUnacknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stp
operator|.
name|isTerminateOnShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stp
operator|.
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
name|DestinationPolicyType
name|dp
init|=
name|manager
operator|.
name|getDestinationPolicy
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dp
operator|.
name|getAcksPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dp
operator|.
name|getAcksPolicy
argument_list|()
operator|.
name|getIntraMessageThreshold
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustom
parameter_list|()
block|{
name|Bus
name|bus
init|=
operator|new
name|SpringBusFactory
argument_list|()
operator|.
name|createBus
argument_list|(
literal|"org/apache/cxf/ws/rm/custom-rmmanager.xml"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|manager
operator|=
name|bus
operator|.
name|getExtension
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"sourcePolicy is not set."
argument_list|,
name|manager
operator|.
name|getSourcePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"destinationPolicy is not set."
argument_list|,
name|manager
operator|.
name|getDestinationPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|initialise
argument_list|()
expr_stmt|;
name|RMConfiguration
name|cfg
init|=
name|manager
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"RMConfiguration is not set."
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"deliveryAssurance is not set."
argument_list|,
name|cfg
operator|.
name|getDeliveryAssurance
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cfg
operator|.
name|isExponentialBackoff
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000L
argument_list|,
name|cfg
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000L
argument_list|,
name|cfg
operator|.
name|getAcknowledgementIntervalTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cfg
operator|.
name|getInactivityTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|SourcePolicyType
name|sp
init|=
name|manager
operator|.
name|getSourcePolicy
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|sp
operator|.
name|getSequenceExpiration
argument_list|()
operator|.
name|getTimeInMillis
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|sp
operator|.
name|getOfferedSequenceExpiration
argument_list|()
operator|.
name|getTimeInMillis
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|sp
operator|.
name|getAcksTo
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sp
operator|.
name|isIncludeOffer
argument_list|()
argument_list|)
expr_stmt|;
name|SequenceTerminationPolicyType
name|stp
init|=
name|sp
operator|.
name|getSequenceTerminationPolicy
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stp
operator|.
name|getMaxRanges
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stp
operator|.
name|getMaxUnacknowledged
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|stp
operator|.
name|isTerminateOnShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stp
operator|.
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
name|DestinationPolicyType
name|dp
init|=
name|manager
operator|.
name|getDestinationPolicy
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dp
operator|.
name|getAcksPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dp
operator|.
name|getAcksPolicy
argument_list|()
operator|.
name|getIntraMessageThreshold
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartServer
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Method
name|m
init|=
name|RMManager
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"recoverReliableEndpoint"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Endpoint
operator|.
name|class
block|,
name|Conduit
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|Server
name|s
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|Endpoint
name|e
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|s
operator|.
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|manager
operator|.
name|recoverReliableEndpoint
argument_list|(
name|e
argument_list|,
operator|(
name|Conduit
operator|)
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|manager
operator|.
name|startServer
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopServer
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Method
name|m
init|=
name|RMManager
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"shutdownReliableEndpoint"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Endpoint
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|Server
name|s
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Server
operator|.
name|class
argument_list|)
decl_stmt|;
name|Endpoint
name|e
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|s
operator|.
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|manager
operator|.
name|shutdownReliableEndpoint
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|manager
operator|.
name|stopServer
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientCreated
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Method
name|m
init|=
name|RMManager
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"recoverReliableEndpoint"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Endpoint
operator|.
name|class
block|,
name|Conduit
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Client
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//none of this is called if no store
comment|//Endpoint endpoint = control.createMock(Endpoint.class);
comment|//EasyMock.expect(client.getEndpoint()).andReturn(endpoint);
comment|//Conduit conduit = control.createMock(Conduit.class);
comment|//EasyMock.expect(client.getConduit()).andReturn(conduit).anyTimes();
comment|//manager.recoverReliableEndpoint(endpoint, conduit);
comment|//EasyMock.expectLastCall();
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|manager
operator|.
name|clientCreated
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientDestroyed
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Method
name|m
init|=
name|RMManager
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"shutdownReliableEndpoint"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Endpoint
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|Client
name|c
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Client
operator|.
name|class
argument_list|)
decl_stmt|;
name|Endpoint
name|e
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|c
operator|.
name|getEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|manager
operator|.
name|shutdownReliableEndpoint
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|manager
operator|.
name|clientDestroyed
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBindingFaultFactory
parameter_list|()
block|{
name|SoapBinding
name|binding
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SoapBinding
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
operator|new
name|RMManager
argument_list|()
operator|.
name|getBindingFaultFactory
argument_list|(
name|binding
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetReliableEndpointServerSideCreate
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|RMException
block|{
name|Method
name|m1
init|=
name|RMManager
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createReliableEndpoint"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Endpoint
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m1
block|}
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setReliableEndpointsMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Endpoint
argument_list|,
name|RMEndpoint
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|WrappedEndpoint
name|wre
init|=
name|control
operator|.
name|createMock
argument_list|(
name|WrappedEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|wre
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|wre
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ei
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|QName
name|name
init|=
name|RM10Constants
operator|.
name|PORT_NAME
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|name
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Endpoint
name|e
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|wre
operator|.
name|getWrappedEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|e
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|createReliableEndpoint
argument_list|(
name|e
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rme
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
name|destination
init|=
name|control
operator|.
name|createMock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destination
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|AddressingProperties
name|maps
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AddressingProperties
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|JAXWSAConstants
operator|.
name|SERVER_ADDRESSING_PROPERTIES_INBOUND
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|maps
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EndpointReferenceType
name|replyTo
init|=
name|RMUtils
operator|.
name|createAnonymousReference
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|maps
operator|.
name|getReplyTo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|replyTo
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getConduit
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|rme
operator|.
name|initialise
argument_list|(
name|manager
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
name|replyTo
argument_list|,
literal|null
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|rme
argument_list|,
name|manager
operator|.
name|getReliableEndpoint
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|wre
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|wre
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ei
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|wre
operator|.
name|getWrappedEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|rme
argument_list|,
name|manager
operator|.
name|getReliableEndpoint
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetReliableEndpointClientSideCreate
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|RMException
block|{
name|Method
name|m1
init|=
name|RMManager
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createReliableEndpoint"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Endpoint
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m1
block|}
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setReliableEndpointsMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Endpoint
argument_list|,
name|RMEndpoint
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ei
argument_list|)
expr_stmt|;
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
literal|"http://x.y.z/a"
argument_list|,
literal|"GreeterPort"
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|createReliableEndpoint
argument_list|(
name|endpoint
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rme
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Conduit
name|conduit
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Conduit
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getConduit
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|conduit
argument_list|)
expr_stmt|;
name|rme
operator|.
name|initialise
argument_list|(
name|manager
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|conduit
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|rme
argument_list|,
name|manager
operator|.
name|getReliableEndpoint
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ei
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|rme
argument_list|,
name|manager
operator|.
name|getReliableEndpoint
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetReliableEndpointExisting
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|RMException
block|{
name|Method
name|m1
init|=
name|RMManager
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createReliableEndpoint"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Endpoint
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m1
block|}
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setReliableEndpointsMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Endpoint
argument_list|,
name|RMEndpoint
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMConfiguration
name|config
init|=
operator|new
name|RMConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setRMNamespace
argument_list|(
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
expr_stmt|;
name|config
operator|.
name|setRM10AddressingNamespace
argument_list|(
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getEffectiveConfiguration
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|config
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Exchange
name|exchange
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ei
argument_list|)
expr_stmt|;
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
literal|"http://x.y.z/a"
argument_list|,
literal|"GreeterPort"
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|manager
operator|.
name|getReliableEndpointsMap
argument_list|()
operator|.
name|put
argument_list|(
name|endpoint
argument_list|,
name|rme
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|rme
argument_list|,
name|manager
operator|.
name|getReliableEndpoint
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDestination
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|RMException
block|{
name|Method
name|m
init|=
name|RMManager
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getReliableEndpoint"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Message
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getReliableEndpoint
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rme
argument_list|)
expr_stmt|;
name|Destination
name|destination
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|destination
argument_list|,
name|manager
operator|.
name|getDestination
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getReliableEndpoint
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|manager
operator|.
name|getDestination
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSource
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|RMException
block|{
name|Method
name|m
init|=
name|RMManager
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getReliableEndpoint"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Message
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getReliableEndpoint
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rme
argument_list|)
expr_stmt|;
name|Source
name|source
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Source
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getSource
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|source
argument_list|,
name|manager
operator|.
name|getSource
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getReliableEndpoint
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|manager
operator|.
name|getSource
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetExistingSequence
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|SequenceFault
throws|,
name|RMException
block|{
name|Method
name|m
init|=
name|RMManager
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getSource"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Message
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|Identifier
name|inSid
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Identifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Source
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getSource
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|SourceSequence
name|sseq
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SourceSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|source
operator|.
name|getCurrent
argument_list|(
name|inSid
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sseq
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|sseq
argument_list|,
name|manager
operator|.
name|getSequence
argument_list|(
name|inSid
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNewSequence
parameter_list|()
throws|throws
name|NoSuchMethodException
throws|,
name|SequenceFault
throws|,
name|RMException
block|{
name|Method
name|m
init|=
name|RMManager
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getSource"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Message
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|m
block|}
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|exchange
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getOutMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|message
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getInMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getOutFaultMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Conduit
name|conduit
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Conduit
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|exchange
operator|.
name|getConduit
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|conduit
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Identifier
name|inSid
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Identifier
operator|.
name|class
argument_list|)
decl_stmt|;
name|AddressingProperties
name|maps
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AddressingProperties
operator|.
name|class
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Source
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|getSource
argument_list|(
name|message
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|source
operator|.
name|getCurrent
argument_list|(
name|inSid
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|AttributedURIType
name|uri
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AttributedURIType
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|maps
operator|.
name|getTo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|uri
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"http://localhost:9001/TestPort"
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|epr
init|=
name|RMUtils
operator|.
name|createNoneReference
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|maps
operator|.
name|getReplyTo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|epr
argument_list|)
expr_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|source
operator|.
name|getReliableEndpoint
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rme
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Proxy
name|proxy
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Proxy
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getProxy
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|CreateSequenceResponseType
name|createResponse
init|=
name|control
operator|.
name|createMock
argument_list|(
name|CreateSequenceResponseType
operator|.
name|class
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|createSequence
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|EndpointReferenceType
operator|.
name|class
argument_list|)
argument_list|,
operator|(
name|RelatesToType
operator|)
name|EasyMock
operator|.
name|isNull
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|ProtocolVariation
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|createResponse
argument_list|)
expr_stmt|;
name|Servant
name|servant
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Servant
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getServant
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|servant
argument_list|)
expr_stmt|;
name|servant
operator|.
name|createSequenceResponse
argument_list|(
name|createResponse
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|SourceSequence
name|sseq
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SourceSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|source
operator|.
name|awaitCurrent
argument_list|(
name|inSid
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sseq
argument_list|)
expr_stmt|;
name|sseq
operator|.
name|setTarget
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|EndpointReferenceType
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|sseq
argument_list|,
name|manager
operator|.
name|getSequence
argument_list|(
name|inSid
argument_list|,
name|message
argument_list|,
name|maps
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdown
parameter_list|()
block|{
name|Bus
name|bus
init|=
operator|new
name|SpringBusFactory
argument_list|()
operator|.
name|createBus
argument_list|(
literal|"org/apache/cxf/ws/rm/rmmanager.xml"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|manager
operator|=
name|bus
operator|.
name|getExtension
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|Endpoint
name|e
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|manager
operator|.
name|getReliableEndpointsMap
argument_list|()
operator|.
name|put
argument_list|(
name|e
argument_list|,
name|rme
argument_list|)
expr_stmt|;
name|manager
operator|.
name|getTimer
argument_list|()
expr_stmt|;
comment|//start the timer
name|rme
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|manager
argument_list|)
expr_stmt|;
class|class
name|TestTask
extends|extends
name|TimerTask
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{             }
block|}
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|bus
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|getTimer
argument_list|()
operator|.
name|schedule
argument_list|(
operator|new
name|TestTask
argument_list|()
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Timer has not been cancelled."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdownReliableEndpoint
parameter_list|()
block|{
name|manager
operator|=
operator|new
name|RMManager
argument_list|()
expr_stmt|;
name|Endpoint
name|e
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|manager
operator|.
name|shutdownReliableEndpoint
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|manager
operator|.
name|getReliableEndpointsMap
argument_list|()
operator|.
name|put
argument_list|(
name|e
argument_list|,
name|rme
argument_list|)
expr_stmt|;
name|rme
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|manager
operator|.
name|shutdownReliableEndpoint
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|manager
operator|.
name|getReliableEndpointsMap
argument_list|()
operator|.
name|get
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecoverReliableEndpoint
parameter_list|()
block|{
name|manager
operator|=
operator|new
name|RMManager
argument_list|()
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Conduit
name|conduit
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Conduit
operator|.
name|class
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|manager
operator|.
name|recoverReliableEndpoint
argument_list|(
name|endpoint
argument_list|,
name|conduit
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|RMStore
name|store
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|manager
operator|.
name|setStore
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|manager
operator|.
name|recoverReliableEndpoint
argument_list|(
name|endpoint
argument_list|,
name|conduit
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecoverReliableClientEndpoint
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
name|Method
name|method
init|=
name|RMManager
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"createReliableEndpoint"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Endpoint
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|manager
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|RMManager
operator|.
name|class
argument_list|,
operator|new
name|Method
index|[]
block|{
name|method
block|}
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setReliableEndpointsMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Endpoint
argument_list|,
name|RMEndpoint
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointInfo
name|ei
init|=
name|control
operator|.
name|createMock
argument_list|(
name|EndpointInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceInfo
name|si
init|=
name|control
operator|.
name|createMock
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingInfo
name|bi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|InterfaceInfo
name|ii
init|=
name|control
operator|.
name|createMock
argument_list|(
name|InterfaceInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpEndpointForRecovery
argument_list|(
name|endpoint
argument_list|,
name|ei
argument_list|,
name|si
argument_list|,
name|bi
argument_list|,
name|ii
argument_list|)
expr_stmt|;
name|Conduit
name|conduit
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Conduit
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpRecoverReliableEndpoint
argument_list|(
name|endpoint
argument_list|,
name|conduit
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|manager
operator|.
name|recoverReliableEndpoint
argument_list|(
name|endpoint
argument_list|,
name|conduit
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|setUpEndpointForRecovery
argument_list|(
name|endpoint
argument_list|,
name|ei
argument_list|,
name|si
argument_list|,
name|bi
argument_list|,
name|ii
argument_list|)
expr_stmt|;
name|SourceSequence
name|ss
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SourceSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|DestinationSequence
name|ds
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|setUpRecoverReliableEndpoint
argument_list|(
name|endpoint
argument_list|,
name|conduit
argument_list|,
name|ss
argument_list|,
name|ds
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|manager
operator|.
name|recoverReliableEndpoint
argument_list|(
name|endpoint
argument_list|,
name|conduit
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|setUpEndpointForRecovery
argument_list|(
name|endpoint
argument_list|,
name|ei
argument_list|,
name|si
argument_list|,
name|bi
argument_list|,
name|ii
argument_list|)
expr_stmt|;
name|RMMessage
name|m
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Capture
argument_list|<
name|Message
argument_list|>
name|mc
init|=
operator|new
name|Capture
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
name|setUpRecoverReliableEndpoint
argument_list|(
name|endpoint
argument_list|,
name|conduit
argument_list|,
name|ss
argument_list|,
name|ds
argument_list|,
name|m
argument_list|,
name|mc
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|manager
operator|.
name|recoverReliableEndpoint
argument_list|(
name|endpoint
argument_list|,
name|conduit
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|Message
name|msg
init|=
name|mc
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|msg
argument_list|,
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Endpoint
name|setUpEndpointForRecovery
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|EndpointInfo
name|ei
parameter_list|,
name|ServiceInfo
name|si
parameter_list|,
name|BindingInfo
name|bi
parameter_list|,
name|InterfaceInfo
name|ii
parameter_list|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ei
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ei
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|si
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|si
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"S"
argument_list|,
literal|"s"
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ei
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"P"
argument_list|,
literal|"p"
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|si
operator|.
name|getInterface
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ii
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
return|return
name|endpoint
return|;
block|}
name|void
name|setUpRecoverReliableEndpoint
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|Conduit
name|conduit
parameter_list|,
name|SourceSequence
name|ss
parameter_list|,
name|DestinationSequence
name|ds
parameter_list|,
name|RMMessage
name|m
parameter_list|,
name|Capture
argument_list|<
name|Message
argument_list|>
name|mc
parameter_list|)
block|{
name|RMStore
name|store
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|RetransmissionQueue
name|queue
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RetransmissionQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|manager
operator|.
name|setStore
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setRetransmissionQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|SourceSequence
argument_list|>
name|sss
init|=
operator|new
name|ArrayList
argument_list|<
name|SourceSequence
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ss
condition|)
block|{
name|sss
operator|.
name|add
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|expect
argument_list|(
name|store
operator|.
name|getSourceSequences
argument_list|(
literal|"{S}s.{P}p@cxf"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sss
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|ss
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|DestinationSequence
argument_list|>
name|dss
init|=
operator|new
name|ArrayList
argument_list|<
name|DestinationSequence
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ds
condition|)
block|{
name|dss
operator|.
name|add
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|expect
argument_list|(
name|store
operator|.
name|getDestinationSequences
argument_list|(
literal|"{S}s.{P}p@cxf"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dss
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|ds
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|RMMessage
argument_list|>
name|ms
init|=
operator|new
name|ArrayList
argument_list|<
name|RMMessage
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|m
condition|)
block|{
name|ms
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|Identifier
name|id
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|id
operator|.
name|setValue
argument_list|(
literal|"S1"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ss
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|id
argument_list|)
operator|.
name|times
argument_list|(
literal|null
operator|==
name|m
condition|?
literal|1
else|:
literal|2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ss
operator|.
name|getProtocol
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|store
operator|.
name|getMessages
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|manager
operator|.
name|createReliableEndpoint
argument_list|(
name|endpoint
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rme
argument_list|)
expr_stmt|;
name|Source
name|source
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Source
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getSource
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|source
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Destination
name|destination
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|destination
operator|.
name|addSequence
argument_list|(
name|ds
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|Service
name|service
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|service
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Binding
name|binding
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Binding
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|endpoint
operator|.
name|getBinding
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|binding
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ss
operator|.
name|isLastMessage
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ss
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Long
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|m
condition|)
block|{
return|return;
block|}
name|EasyMock
operator|.
name|expect
argument_list|(
name|m
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Long
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|conduit
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|m
operator|.
name|getTo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"toAddress"
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|m
operator|.
name|getContent
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|is
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
if|if
condition|(
name|mc
operator|!=
literal|null
condition|)
block|{
name|queue
operator|.
name|addUnacknowledged
argument_list|(
name|EasyMock
operator|.
name|capture
argument_list|(
name|mc
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queue
operator|.
name|addUnacknowledged
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|queue
operator|.
name|start
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultSequenceIdentifierGenerator
parameter_list|()
block|{
name|manager
operator|=
operator|new
name|RMManager
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|manager
operator|.
name|getIdGenerator
argument_list|()
argument_list|)
expr_stmt|;
name|SequenceIdentifierGenerator
name|generator
init|=
name|manager
operator|.
expr|new
name|DefaultSequenceIdentifierGenerator
argument_list|()
decl_stmt|;
name|manager
operator|.
name|setIdGenerator
argument_list|(
name|generator
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|generator
argument_list|,
name|manager
operator|.
name|getIdGenerator
argument_list|()
argument_list|)
expr_stmt|;
name|Identifier
name|id1
init|=
name|generator
operator|.
name|generateSequenceIdentifier
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|id1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|id1
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Identifier
name|id2
init|=
name|generator
operator|.
name|generateSequenceIdentifier
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|id1
operator|!=
name|id2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|id1
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|id2
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
block|}
class|class
name|MyControl
block|{
specifier|private
name|IMocksControl
name|c
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|mocks
decl_stmt|;
name|MyControl
parameter_list|()
block|{
name|c
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|mocks
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|void
name|replay
parameter_list|()
block|{
name|c
operator|.
name|replay
argument_list|()
expr_stmt|;
block|}
name|void
name|reset
parameter_list|()
block|{
name|c
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|void
name|verify
parameter_list|()
block|{
name|c
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
parameter_list|<
name|T
parameter_list|>
name|T
name|createMock
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
name|T
name|mock
init|=
name|c
operator|.
name|createMock
argument_list|(
name|cls
argument_list|)
decl_stmt|;
name|mocks
operator|.
name|add
argument_list|(
name|mock
argument_list|)
expr_stmt|;
return|return
name|mock
return|;
block|}
parameter_list|<
name|T
parameter_list|>
name|T
name|createMock
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|,
name|Method
index|[]
name|m
parameter_list|)
block|{
name|T
name|mock
init|=
name|EasyMock
operator|.
name|createMockBuilder
argument_list|(
name|cls
argument_list|)
operator|.
name|addMockedMethods
argument_list|(
name|m
argument_list|)
operator|.
name|createMock
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|mocks
operator|.
name|add
argument_list|(
name|mock
argument_list|)
expr_stmt|;
return|return
name|mock
return|;
block|}
block|}
block|}
end_class

end_unit

