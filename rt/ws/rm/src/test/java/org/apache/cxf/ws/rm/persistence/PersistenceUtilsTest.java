begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceAcknowledgement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|PersistenceUtilsTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSerialiseDeserialiseAcknowledgement
parameter_list|()
block|{
name|SequenceAcknowledgement
name|ack
init|=
operator|new
name|SequenceAcknowledgement
argument_list|()
decl_stmt|;
name|AcknowledgementRange
name|range
init|=
operator|new
name|AcknowledgementRange
argument_list|()
decl_stmt|;
name|range
operator|.
name|setLower
argument_list|(
operator|new
name|Long
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|range
operator|.
name|setUpper
argument_list|(
operator|new
name|Long
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|ack
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|PersistenceUtils
name|utils
init|=
name|PersistenceUtils
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
name|utils
operator|.
name|serialiseAcknowledgment
argument_list|(
name|ack
argument_list|)
decl_stmt|;
name|SequenceAcknowledgement
name|refAck
init|=
name|utils
operator|.
name|deserialiseAcknowledgment
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|refAck
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|refAck
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AcknowledgementRange
name|refRange
init|=
name|refAck
operator|.
name|getAcknowledgementRange
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|range
operator|.
name|getLower
argument_list|()
argument_list|,
name|refRange
operator|.
name|getLower
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|range
operator|.
name|getUpper
argument_list|()
argument_list|,
name|refRange
operator|.
name|getUpper
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

