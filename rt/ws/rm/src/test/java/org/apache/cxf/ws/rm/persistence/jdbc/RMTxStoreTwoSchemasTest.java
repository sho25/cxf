begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|ProtocolVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|SourceSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|RMTxStoreTwoSchemasTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DB_NAME
init|=
literal|"rmdbts"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CLIENT_ENDPOINT_ID
init|=
literal|"{http://apache.org/greeter_control}GreeterService/GreeterPort"
decl_stmt|;
specifier|private
specifier|static
name|RMTxStore
name|store1
decl_stmt|;
specifier|private
specifier|static
name|RMTxStore
name|store2
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpOnce
parameter_list|()
block|{
name|RMTxStore
operator|.
name|deleteDatabaseFiles
argument_list|(
name|TEST_DB_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store1
operator|=
name|createStore
argument_list|(
literal|"ONE"
argument_list|)
expr_stmt|;
name|store2
operator|=
name|createStore
argument_list|(
literal|"TWO"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownOnce
parameter_list|()
block|{
name|RMTxStore
operator|.
name|deleteDatabaseFiles
argument_list|(
name|TEST_DB_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|RMTxStore
name|createStore
parameter_list|(
name|String
name|sn
parameter_list|)
block|{
name|RMTxStore
name|store
init|=
operator|new
name|RMTxStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setDriverClassName
argument_list|(
literal|"org.apache.derby.jdbc.EmbeddedDriver"
argument_list|)
expr_stmt|;
comment|// workaround for the db file deletion problem during the tests
name|store
operator|.
name|setUrl
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"jdbc:derby:{0};create=true"
argument_list|,
name|TEST_DB_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// use the specified schema
name|store
operator|.
name|setSchemaName
argument_list|(
name|sn
argument_list|)
expr_stmt|;
name|store
operator|.
name|init
argument_list|()
expr_stmt|;
return|return
name|store
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetCurrentSchema
parameter_list|()
throws|throws
name|Exception
block|{
comment|// schema should  have been set during initialisation
comment|// but verify the operation is idempotent
name|store1
operator|.
name|setCurrentSchema
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoreIsolation
parameter_list|()
throws|throws
name|Exception
block|{
name|SourceSequence
name|seq
init|=
name|control
operator|.
name|createMock
argument_list|(
name|SourceSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|Identifier
name|sid1
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid1
operator|.
name|setValue
argument_list|(
literal|"sequence1"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getExpires
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getOfferingSequenceIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|CLIENT_ENDPOINT_ID
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getProtocol
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store1
operator|.
name|createSourceSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|SourceSequence
name|rseq
init|=
name|store1
operator|.
name|getSourceSequence
argument_list|(
name|sid1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rseq
argument_list|)
expr_stmt|;
name|rseq
operator|=
name|store2
operator|.
name|getSourceSequence
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rseq
argument_list|)
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getExpires
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getOfferingSequenceIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|CLIENT_ENDPOINT_ID
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getProtocol
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|store2
operator|.
name|createSourceSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|rseq
operator|=
name|store2
operator|.
name|getSourceSequence
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rseq
argument_list|)
expr_stmt|;
comment|// create another store
name|RMTxStore
name|store3
init|=
name|createStore
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|store3
operator|.
name|init
argument_list|()
expr_stmt|;
name|rseq
operator|=
name|store3
operator|.
name|getSourceSequence
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rseq
argument_list|)
expr_stmt|;
comment|// switch to the store1's schema
name|store3
operator|.
name|setSchemaName
argument_list|(
name|store1
operator|.
name|getSchemaName
argument_list|()
argument_list|)
expr_stmt|;
name|store3
operator|.
name|init
argument_list|()
expr_stmt|;
name|rseq
operator|=
name|store3
operator|.
name|getSourceSequence
argument_list|(
name|sid1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|rseq
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

