begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|DatatypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AttributedURIType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|ContextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|AcksPolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|DestinationPolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|CreateSequenceResponseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|CreateSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|Expires
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|OfferType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|TerminateSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|CloseSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|TerminateSequenceResponseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|ServantTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_URL
init|=
literal|"http://localhost:9000/SoapContext/GreeterPort"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DECOUPLED_URL
init|=
literal|"http://localhost:9990/decoupled_endpoint"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|ObjectFactory
name|RMMANGER_FACTORY
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|ObjectFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Duration
name|DURATION_SHORT
init|=
name|DatatypeFactory
operator|.
name|createDuration
argument_list|(
literal|"PT5S"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Duration
name|DURATION_VERY_SHORT
init|=
name|DatatypeFactory
operator|.
name|createDuration
argument_list|(
literal|"PT2S"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Duration
name|DURATION_DEFAULT
init|=
name|DatatypeFactory
operator|.
name|createDuration
argument_list|(
literal|"P0Y0M0DT0H0M0.0S"
argument_list|)
decl_stmt|;
specifier|private
name|IMocksControl
name|control
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateSequence
parameter_list|()
throws|throws
name|SequenceFault
block|{
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMManager
name|manager
init|=
operator|new
name|RMManager
argument_list|()
decl_stmt|;
name|Destination
name|destination
init|=
operator|new
name|Destination
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|SequenceIdentifierGenerator
name|generator
init|=
name|manager
operator|.
expr|new
name|DefaultSequenceIdentifierGenerator
argument_list|()
decl_stmt|;
name|manager
operator|.
name|setIdGenerator
argument_list|(
name|generator
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destination
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|manager
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Servant
name|servant
init|=
operator|new
name|Servant
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|verifyCreateSequenceDefault
argument_list|(
name|servant
argument_list|,
name|manager
argument_list|)
expr_stmt|;
name|verifyCreateSequenceExpiresSetAtDestination
argument_list|(
name|servant
argument_list|,
name|manager
argument_list|)
expr_stmt|;
name|verifyCreateSequenceExpiresSetAtSource
argument_list|(
name|servant
argument_list|,
name|manager
argument_list|)
expr_stmt|;
name|verifyCreateSequenceExpiresSetAtBoth
argument_list|(
name|servant
argument_list|,
name|manager
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyCreateSequenceDefault
parameter_list|(
name|Servant
name|servant
parameter_list|,
name|RMManager
name|manager
parameter_list|)
throws|throws
name|SequenceFault
block|{
name|DestinationPolicyType
name|dp
init|=
name|RMMANGER_FACTORY
operator|.
name|createDestinationPolicyType
argument_list|()
decl_stmt|;
name|AcksPolicyType
name|ap
init|=
name|RMMANGER_FACTORY
operator|.
name|createAcksPolicyType
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setAcksPolicy
argument_list|(
name|ap
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setDestinationPolicy
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|Expires
name|expires
init|=
operator|new
name|Expires
argument_list|()
decl_stmt|;
name|expires
operator|.
name|setValue
argument_list|(
name|DatatypeFactory
operator|.
name|createDuration
argument_list|(
literal|"P0Y0M0DT0H0M0.0S"
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|createTestCreateSequenceMessage
argument_list|(
name|expires
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CreateSequenceResponseType
name|csr
init|=
operator|(
name|CreateSequenceResponseType
operator|)
name|servant
operator|.
name|createSequence
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Expires
name|expires2
init|=
name|csr
operator|.
name|getExpires
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|expires2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DatatypeFactory
operator|.
name|PT0S
argument_list|,
name|expires2
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyCreateSequenceExpiresSetAtDestination
parameter_list|(
name|Servant
name|servant
parameter_list|,
name|RMManager
name|manager
parameter_list|)
throws|throws
name|SequenceFault
block|{
name|DestinationPolicyType
name|dp
init|=
name|RMMANGER_FACTORY
operator|.
name|createDestinationPolicyType
argument_list|()
decl_stmt|;
name|AcksPolicyType
name|ap
init|=
name|RMMANGER_FACTORY
operator|.
name|createAcksPolicyType
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setAcksPolicy
argument_list|(
name|ap
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setSequenceExpiration
argument_list|(
name|DURATION_SHORT
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setDestinationPolicy
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|Expires
name|expires
init|=
operator|new
name|Expires
argument_list|()
decl_stmt|;
name|expires
operator|.
name|setValue
argument_list|(
name|DURATION_DEFAULT
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|createTestCreateSequenceMessage
argument_list|(
name|expires
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CreateSequenceResponseType
name|csr
init|=
operator|(
name|CreateSequenceResponseType
operator|)
name|servant
operator|.
name|createSequence
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Expires
name|expires2
init|=
name|csr
operator|.
name|getExpires
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|expires2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DURATION_SHORT
argument_list|,
name|expires2
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyCreateSequenceExpiresSetAtSource
parameter_list|(
name|Servant
name|servant
parameter_list|,
name|RMManager
name|manager
parameter_list|)
throws|throws
name|SequenceFault
block|{
name|DestinationPolicyType
name|dp
init|=
name|RMMANGER_FACTORY
operator|.
name|createDestinationPolicyType
argument_list|()
decl_stmt|;
name|AcksPolicyType
name|ap
init|=
name|RMMANGER_FACTORY
operator|.
name|createAcksPolicyType
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setAcksPolicy
argument_list|(
name|ap
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setDestinationPolicy
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|Expires
name|expires
init|=
operator|new
name|Expires
argument_list|()
decl_stmt|;
name|expires
operator|.
name|setValue
argument_list|(
name|DURATION_SHORT
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|createTestCreateSequenceMessage
argument_list|(
name|expires
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CreateSequenceResponseType
name|csr
init|=
operator|(
name|CreateSequenceResponseType
operator|)
name|servant
operator|.
name|createSequence
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Expires
name|expires2
init|=
name|csr
operator|.
name|getExpires
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|expires2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DURATION_SHORT
argument_list|,
name|expires2
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyCreateSequenceExpiresSetAtBoth
parameter_list|(
name|Servant
name|servant
parameter_list|,
name|RMManager
name|manager
parameter_list|)
throws|throws
name|SequenceFault
block|{
name|DestinationPolicyType
name|dp
init|=
name|RMMANGER_FACTORY
operator|.
name|createDestinationPolicyType
argument_list|()
decl_stmt|;
name|AcksPolicyType
name|ap
init|=
name|RMMANGER_FACTORY
operator|.
name|createAcksPolicyType
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setAcksPolicy
argument_list|(
name|ap
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setSequenceExpiration
argument_list|(
name|DURATION_SHORT
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setDestinationPolicy
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|Expires
name|expires
init|=
operator|new
name|Expires
argument_list|()
decl_stmt|;
name|expires
operator|.
name|setValue
argument_list|(
name|DURATION_VERY_SHORT
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|createTestCreateSequenceMessage
argument_list|(
name|expires
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CreateSequenceResponseType
name|csr
init|=
operator|(
name|CreateSequenceResponseType
operator|)
name|servant
operator|.
name|createSequence
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Expires
name|expires2
init|=
name|csr
operator|.
name|getExpires
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|expires2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DURATION_VERY_SHORT
argument_list|,
name|expires2
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Message
name|createTestCreateSequenceMessage
parameter_list|(
name|Expires
name|expires
parameter_list|,
name|OfferType
name|offer
parameter_list|)
block|{
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setInMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|//        exchange.setOutMessage(new MessageImpl());
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|AddressingProperties
name|maps
init|=
operator|new
name|AddressingProperties
argument_list|()
decl_stmt|;
name|String
name|msgId
init|=
literal|"urn:uuid:12345-"
operator|+
name|Math
operator|.
name|random
argument_list|()
decl_stmt|;
name|AttributedURIType
name|id
init|=
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|msgId
argument_list|)
decl_stmt|;
name|maps
operator|.
name|setMessageID
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setAction
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|RM10Constants
operator|.
name|INSTANCE
operator|.
name|getCreateSequenceAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setTo
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|SERVICE_URL
argument_list|)
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setReplyTo
argument_list|(
name|RMUtils
operator|.
name|createReference
argument_list|(
name|DECOUPLED_URL
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|JAXWSAConstants
operator|.
name|ADDRESSING_PROPERTIES_INBOUND
argument_list|,
name|maps
argument_list|)
expr_stmt|;
name|CreateSequenceType
name|cs
init|=
operator|new
name|CreateSequenceType
argument_list|()
decl_stmt|;
name|cs
operator|.
name|setAcksTo
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convert
argument_list|(
name|RMUtils
operator|.
name|createReference
argument_list|(
name|DECOUPLED_URL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setExpires
argument_list|(
name|expires
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setOffer
argument_list|(
name|offer
argument_list|)
expr_stmt|;
name|MessageContentsList
name|contents
init|=
operator|new
name|MessageContentsList
argument_list|()
decl_stmt|;
name|contents
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|RMContextUtils
operator|.
name|setProtocolVariation
argument_list|(
name|message
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTerminateSequence
parameter_list|()
throws|throws
name|SequenceFault
block|{
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMManager
name|manager
init|=
operator|new
name|RMManager
argument_list|()
decl_stmt|;
name|Destination
name|destination
init|=
operator|new
name|Destination
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
operator|new
name|Source
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|DestinationSequence
name|seq
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
name|sid
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
argument_list|()
decl_stmt|;
name|sid
operator|.
name|setValue
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destination
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|manager
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getSource
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|source
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Servant
name|servant
init|=
operator|new
name|Servant
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|destination
operator|.
name|addSequence
argument_list|(
name|seq
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyTerminateSequenceDefault
argument_list|(
name|servant
argument_list|,
name|manager
argument_list|,
literal|"123"
argument_list|,
name|ProtocolVariation
operator|.
name|RM10WSA200408
argument_list|)
expr_stmt|;
name|destination
operator|.
name|addSequence
argument_list|(
name|seq
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyTerminateSequenceDefault
argument_list|(
name|servant
argument_list|,
name|manager
argument_list|,
literal|"123"
argument_list|,
name|ProtocolVariation
operator|.
name|RM11WSA200508
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Message
name|createTestTerminateSequenceMessage
parameter_list|(
name|String
name|sidstr
parameter_list|,
name|ProtocolVariation
name|protocol
parameter_list|)
block|{
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setInMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|AddressingProperties
name|maps
init|=
operator|new
name|AddressingProperties
argument_list|()
decl_stmt|;
name|String
name|msgId
init|=
literal|"urn:uuid:12345-"
operator|+
name|Math
operator|.
name|random
argument_list|()
decl_stmt|;
name|AttributedURIType
name|id
init|=
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|msgId
argument_list|)
decl_stmt|;
name|maps
operator|.
name|setMessageID
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setAction
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|RM10Constants
operator|.
name|INSTANCE
operator|.
name|getTerminateSequenceAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setTo
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|SERVICE_URL
argument_list|)
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setReplyTo
argument_list|(
name|RMUtils
operator|.
name|createReference
argument_list|(
name|DECOUPLED_URL
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|JAXWSAConstants
operator|.
name|ADDRESSING_PROPERTIES_INBOUND
argument_list|,
name|maps
argument_list|)
expr_stmt|;
name|TerminateSequenceType
name|ts
init|=
operator|new
name|TerminateSequenceType
argument_list|()
decl_stmt|;
name|Identifier
name|sid
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid
operator|.
name|setValue
argument_list|(
name|sidstr
argument_list|)
expr_stmt|;
name|ts
operator|.
name|setIdentifier
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|Object
name|tst
init|=
name|ProtocolVariation
operator|.
name|RM10WSA200408
operator|.
name|getWSRMNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|protocol
operator|.
name|getWSRMNamespace
argument_list|()
argument_list|)
condition|?
name|ts
else|:
name|ProtocolVariation
operator|.
name|RM10WSA200408
operator|.
name|getCodec
argument_list|()
operator|.
name|convertReceivedTerminateSequence
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|MessageContentsList
name|contents
init|=
operator|new
name|MessageContentsList
argument_list|()
decl_stmt|;
name|contents
operator|.
name|add
argument_list|(
name|tst
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|RMContextUtils
operator|.
name|setProtocolVariation
argument_list|(
name|message
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
specifier|private
specifier|static
name|Message
name|createTestCloseSequenceMessage
parameter_list|(
name|String
name|sidstr
parameter_list|)
block|{
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setInMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|AddressingProperties
name|maps
init|=
operator|new
name|AddressingProperties
argument_list|()
decl_stmt|;
name|String
name|msgId
init|=
literal|"urn:uuid:12345-"
operator|+
name|Math
operator|.
name|random
argument_list|()
decl_stmt|;
name|AttributedURIType
name|id
init|=
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|msgId
argument_list|)
decl_stmt|;
name|maps
operator|.
name|setMessageID
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setAction
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|RM10Constants
operator|.
name|INSTANCE
operator|.
name|getTerminateSequenceAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setTo
argument_list|(
name|ContextUtils
operator|.
name|getAttributedURI
argument_list|(
name|SERVICE_URL
argument_list|)
argument_list|)
expr_stmt|;
name|maps
operator|.
name|setReplyTo
argument_list|(
name|RMUtils
operator|.
name|createReference
argument_list|(
name|DECOUPLED_URL
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|JAXWSAConstants
operator|.
name|ADDRESSING_PROPERTIES_INBOUND
argument_list|,
name|maps
argument_list|)
expr_stmt|;
name|CloseSequenceType
name|cs
init|=
operator|new
name|CloseSequenceType
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
name|sid
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
argument_list|()
decl_stmt|;
name|sid
operator|.
name|setValue
argument_list|(
name|sidstr
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setIdentifier
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|MessageContentsList
name|contents
init|=
operator|new
name|MessageContentsList
argument_list|()
decl_stmt|;
name|contents
operator|.
name|add
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|contents
argument_list|)
expr_stmt|;
name|RMContextUtils
operator|.
name|setProtocolVariation
argument_list|(
name|message
argument_list|,
name|ProtocolVariation
operator|.
name|RM11WSA200508
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
specifier|private
name|void
name|verifyTerminateSequenceDefault
parameter_list|(
name|Servant
name|servant
parameter_list|,
name|RMManager
name|manager
parameter_list|,
name|String
name|sidstr
parameter_list|,
name|ProtocolVariation
name|protocol
parameter_list|)
throws|throws
name|SequenceFault
block|{
name|DestinationPolicyType
name|dp
init|=
name|RMMANGER_FACTORY
operator|.
name|createDestinationPolicyType
argument_list|()
decl_stmt|;
name|AcksPolicyType
name|ap
init|=
name|RMMANGER_FACTORY
operator|.
name|createAcksPolicyType
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setAcksPolicy
argument_list|(
name|ap
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setDestinationPolicy
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|createTestTerminateSequenceMessage
argument_list|(
name|sidstr
argument_list|,
name|protocol
argument_list|)
decl_stmt|;
name|Object
name|tsr
init|=
name|servant
operator|.
name|terminateSequence
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|ProtocolVariation
operator|.
name|RM10WSA200408
operator|.
name|getWSRMNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|protocol
operator|.
name|getWSRMNamespace
argument_list|()
argument_list|)
condition|)
block|{
comment|// rm 1.0
name|assertNull
argument_list|(
name|tsr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// rm 1.1
name|assertTrue
argument_list|(
name|tsr
operator|instanceof
name|TerminateSequenceResponseType
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
name|sid
init|=
operator|(
operator|(
name|TerminateSequenceResponseType
operator|)
name|tsr
operator|)
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sidstr
argument_list|,
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvokeForCloseSequence
parameter_list|()
block|{
name|RMEndpoint
name|rme
init|=
name|control
operator|.
name|createMock
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMManager
name|manager
init|=
operator|new
name|RMManager
argument_list|()
decl_stmt|;
name|Destination
name|destination
init|=
operator|new
name|Destination
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
operator|new
name|Source
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|DestinationSequence
name|seq
init|=
name|control
operator|.
name|createMock
argument_list|(
name|DestinationSequence
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
name|sid
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
argument_list|()
decl_stmt|;
name|sid
operator|.
name|setValue
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sid
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|destination
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|manager
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|rme
operator|.
name|getSource
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|source
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Message
name|message
init|=
name|createTestCloseSequenceMessage
argument_list|(
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|OperationInfo
name|oi
init|=
name|control
operator|.
name|createMock
argument_list|(
name|OperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|boi
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|oi
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|oi
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|RM11Constants
operator|.
name|INSTANCE
operator|.
name|getCloseSequenceOperationName
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|boi
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|TestServant
name|servant
init|=
operator|new
name|TestServant
argument_list|(
name|rme
argument_list|)
decl_stmt|;
name|servant
operator|.
name|invoke
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|,
name|message
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|servant
operator|.
name|called
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TestServant
extends|extends
name|Servant
block|{
name|boolean
name|called
decl_stmt|;
name|TestServant
parameter_list|(
name|RMEndpoint
name|rme
parameter_list|)
block|{
name|super
argument_list|(
name|rme
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|closeSequence
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|called
operator|=
literal|true
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

