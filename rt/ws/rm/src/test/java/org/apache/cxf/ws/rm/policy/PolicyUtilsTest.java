begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|jaxb
operator|.
name|JaxbAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|policy
operator|.
name|RMAssertion
operator|.
name|AcknowledgementInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|policy
operator|.
name|RMAssertion
operator|.
name|BaseRetransmissionInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|policy
operator|.
name|RMAssertion
operator|.
name|ExponentialBackoff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|policy
operator|.
name|RMAssertion
operator|.
name|InactivityTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|PolicyUtilsTest
extends|extends
name|Assert
block|{
specifier|private
name|IMocksControl
name|control
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRMAssertionEquals
parameter_list|()
block|{
name|RMAssertion
name|a
init|=
operator|new
name|RMAssertion
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|PolicyUtils
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|RMAssertion
name|b
init|=
operator|new
name|RMAssertion
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|PolicyUtils
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|InactivityTimeout
name|iat
init|=
operator|new
name|RMAssertion
operator|.
name|InactivityTimeout
argument_list|()
decl_stmt|;
name|iat
operator|.
name|setMilliseconds
argument_list|(
name|BigInteger
operator|.
name|TEN
argument_list|)
expr_stmt|;
name|a
operator|.
name|setInactivityTimeout
argument_list|(
name|iat
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|PolicyUtils
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|setInactivityTimeout
argument_list|(
name|iat
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PolicyUtils
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|ExponentialBackoff
name|eb
init|=
operator|new
name|RMAssertion
operator|.
name|ExponentialBackoff
argument_list|()
decl_stmt|;
name|a
operator|.
name|setExponentialBackoff
argument_list|(
name|eb
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|PolicyUtils
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|setExponentialBackoff
argument_list|(
name|eb
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|PolicyUtils
operator|.
name|equals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIntersect
parameter_list|()
block|{
name|RMAssertion
name|a
init|=
operator|new
name|RMAssertion
argument_list|()
decl_stmt|;
name|RMAssertion
name|b
init|=
operator|new
name|RMAssertion
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|a
argument_list|,
name|PolicyUtils
operator|.
name|intersect
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|InactivityTimeout
name|aiat
init|=
operator|new
name|RMAssertion
operator|.
name|InactivityTimeout
argument_list|()
decl_stmt|;
name|aiat
operator|.
name|setMilliseconds
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"3600000"
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setInactivityTimeout
argument_list|(
name|aiat
argument_list|)
expr_stmt|;
name|InactivityTimeout
name|biat
init|=
operator|new
name|RMAssertion
operator|.
name|InactivityTimeout
argument_list|()
decl_stmt|;
name|biat
operator|.
name|setMilliseconds
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"7200000"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|setInactivityTimeout
argument_list|(
name|biat
argument_list|)
expr_stmt|;
name|RMAssertion
name|c
init|=
name|PolicyUtils
operator|.
name|intersect
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|7200000L
argument_list|,
name|c
operator|.
name|getInactivityTimeout
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getBaseRetransmissionInterval
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getAcknowledgementInterval
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getExponentialBackoff
argument_list|()
argument_list|)
expr_stmt|;
name|BaseRetransmissionInterval
name|abri
init|=
operator|new
name|RMAssertion
operator|.
name|BaseRetransmissionInterval
argument_list|()
decl_stmt|;
name|abri
operator|.
name|setMilliseconds
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"10000"
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBaseRetransmissionInterval
argument_list|(
name|abri
argument_list|)
expr_stmt|;
name|BaseRetransmissionInterval
name|bbri
init|=
operator|new
name|RMAssertion
operator|.
name|BaseRetransmissionInterval
argument_list|()
decl_stmt|;
name|bbri
operator|.
name|setMilliseconds
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"20000"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|setBaseRetransmissionInterval
argument_list|(
name|bbri
argument_list|)
expr_stmt|;
name|c
operator|=
name|PolicyUtils
operator|.
name|intersect
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7200000L
argument_list|,
name|c
operator|.
name|getInactivityTimeout
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20000L
argument_list|,
name|c
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getAcknowledgementInterval
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getExponentialBackoff
argument_list|()
argument_list|)
expr_stmt|;
name|AcknowledgementInterval
name|aai
init|=
operator|new
name|RMAssertion
operator|.
name|AcknowledgementInterval
argument_list|()
decl_stmt|;
name|aai
operator|.
name|setMilliseconds
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"2000"
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setAcknowledgementInterval
argument_list|(
name|aai
argument_list|)
expr_stmt|;
name|c
operator|=
name|PolicyUtils
operator|.
name|intersect
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7200000L
argument_list|,
name|c
operator|.
name|getInactivityTimeout
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20000L
argument_list|,
name|c
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2000L
argument_list|,
name|c
operator|.
name|getAcknowledgementInterval
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getExponentialBackoff
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|setExponentialBackoff
argument_list|(
operator|new
name|RMAssertion
operator|.
name|ExponentialBackoff
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|=
name|PolicyUtils
operator|.
name|intersect
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7200000L
argument_list|,
name|c
operator|.
name|getInactivityTimeout
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20000L
argument_list|,
name|c
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2000L
argument_list|,
name|c
operator|.
name|getAcknowledgementInterval
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|c
operator|.
name|getExponentialBackoff
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRMAssertion
parameter_list|()
block|{
name|RMAssertion
name|a
init|=
operator|new
name|RMAssertion
argument_list|()
decl_stmt|;
name|BaseRetransmissionInterval
name|abri
init|=
operator|new
name|RMAssertion
operator|.
name|BaseRetransmissionInterval
argument_list|()
decl_stmt|;
name|abri
operator|.
name|setMilliseconds
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"3000"
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBaseRetransmissionInterval
argument_list|(
name|abri
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExponentialBackoff
argument_list|(
operator|new
name|RMAssertion
operator|.
name|ExponentialBackoff
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|a
argument_list|,
name|PolicyUtils
operator|.
name|getRMAssertion
argument_list|(
name|a
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|AssertionInfoMap
name|aim
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|aim
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
operator|new
name|ArrayList
argument_list|<
name|AssertionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|aim
operator|.
name|get
argument_list|(
name|RMConstants
operator|.
name|getRMAssertionQName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ais
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|a
argument_list|,
name|PolicyUtils
operator|.
name|getRMAssertion
argument_list|(
name|a
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
name|control
operator|.
name|reset
argument_list|()
expr_stmt|;
name|RMAssertion
name|b
init|=
operator|new
name|RMAssertion
argument_list|()
decl_stmt|;
name|BaseRetransmissionInterval
name|bbri
init|=
operator|new
name|RMAssertion
operator|.
name|BaseRetransmissionInterval
argument_list|()
decl_stmt|;
name|bbri
operator|.
name|setMilliseconds
argument_list|(
operator|new
name|BigInteger
argument_list|(
literal|"2000"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|setBaseRetransmissionInterval
argument_list|(
name|bbri
argument_list|)
expr_stmt|;
name|JaxbAssertion
argument_list|<
name|RMAssertion
argument_list|>
name|assertion
init|=
operator|new
name|JaxbAssertion
argument_list|<
name|RMAssertion
argument_list|>
argument_list|()
decl_stmt|;
name|assertion
operator|.
name|setName
argument_list|(
name|RMConstants
operator|.
name|getRMAssertionQName
argument_list|()
argument_list|)
expr_stmt|;
name|assertion
operator|.
name|setData
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|AssertionInfo
name|ai
init|=
operator|new
name|AssertionInfo
argument_list|(
name|assertion
argument_list|)
decl_stmt|;
name|ais
operator|.
name|add
argument_list|(
name|ai
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|aim
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|aim
operator|.
name|get
argument_list|(
name|RMConstants
operator|.
name|getRMAssertionQName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ais
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|RMAssertion
name|c
init|=
name|PolicyUtils
operator|.
name|getRMAssertion
argument_list|(
name|a
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getAcknowledgementInterval
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getInactivityTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2000L
argument_list|,
name|c
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|c
operator|.
name|getExponentialBackoff
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

