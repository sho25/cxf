begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RM11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|policy
operator|.
name|RM12Assertion
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|AssertionBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|builders
operator|.
name|AssertionBuilder
import|;
end_import

begin_comment
comment|/**  * Builds a WS-RMP 1.2 assertion from the raw XML. Unlike WS-RMP 1.0, in WS-RMP 1.2 the actual assertions are  * nested within layers of<wsp:Policy> operators so need to be handled directly (not by JAXB).  */
end_comment

begin_class
specifier|public
class|class
name|RM12AssertionBuilder
implements|implements
name|AssertionBuilder
argument_list|<
name|Element
argument_list|>
block|{
comment|/**      * @see org.apache.neethi.builders.AssertionBuilder#getKnownElements()      */
specifier|public
name|QName
index|[]
name|getKnownElements
parameter_list|()
block|{
return|return
operator|new
name|QName
index|[]
block|{
name|RM11Constants
operator|.
name|WSRMP_RMASSERTION_QNAME
block|}
return|;
block|}
comment|/**      * @see org.apache.neethi.builders.AssertionBuilder#build(java.lang.Object,      *  org.apache.neethi.AssertionBuilderFactory)      */
specifier|public
name|Assertion
name|build
parameter_list|(
name|Element
name|element
parameter_list|,
name|AssertionBuilderFactory
name|factory
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|RM12Assertion
name|assertion
init|=
operator|new
name|RM12Assertion
argument_list|()
decl_stmt|;
name|assertion
operator|.
name|setOptional
argument_list|(
name|PolicyConstants
operator|.
name|isOptional
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
name|assertion
operator|.
name|setIgnorable
argument_list|(
name|PolicyConstants
operator|.
name|isIgnorable
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
comment|// dig into the nested structure to set property values
name|Element
name|elem
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|element
argument_list|)
decl_stmt|;
while|while
condition|(
name|elem
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|elem
argument_list|,
name|RM11Constants
operator|.
name|WSRMP_NAMESPACE_URI
argument_list|,
name|RM12Assertion
operator|.
name|DELIVERYASSURANCE_NAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// find nested policy and definitions within (note this won't handle nested policy operators)
name|Element
name|childEl
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|elem
argument_list|)
decl_stmt|;
while|while
condition|(
name|childEl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Constants
operator|.
name|isPolicyElement
argument_list|(
name|childEl
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|childEl
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|handlePolicy
argument_list|(
name|childEl
argument_list|,
name|assertion
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|elem
argument_list|,
name|RM11Constants
operator|.
name|WSRMP_NAMESPACE_URI
argument_list|,
name|RM12Assertion
operator|.
name|SEQUENCESTR_NAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|assertion
operator|.
name|setSequenceSTR
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|elem
argument_list|,
name|RM11Constants
operator|.
name|WSRMP_NAMESPACE_URI
argument_list|,
name|RM12Assertion
operator|.
name|SEQUENCETRANSEC_NAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|assertion
operator|.
name|setSequenceTransportSecurity
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|elem
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
return|return
name|assertion
return|;
block|}
comment|/**      * @param childEl      * @param assertion      */
specifier|private
name|void
name|handlePolicy
parameter_list|(
name|Element
name|childEl
parameter_list|,
name|RM12Assertion
name|assertion
parameter_list|)
block|{
comment|// don't check for conflicts or repeats, just use the last values supplied
name|Element
name|innerEl
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|childEl
argument_list|)
decl_stmt|;
if|if
condition|(
name|RM11Constants
operator|.
name|WSRMP_NAMESPACE_URI
operator|.
name|equals
argument_list|(
name|innerEl
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|lname
init|=
name|innerEl
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|RM12Assertion
operator|.
name|INORDER_NAME
operator|.
name|equals
argument_list|(
name|lname
argument_list|)
condition|)
block|{
name|assertion
operator|.
name|setInOrder
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Order
name|order
init|=
name|RM12Assertion
operator|.
name|Order
operator|.
name|valueOf
argument_list|(
name|lname
argument_list|)
decl_stmt|;
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
block|{
name|assertion
operator|.
name|setOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

