begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PreDestroy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientLifeCycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientLifeCycleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerLifeCycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerLifeCycleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|InstrumentationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|ContextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|MAPAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|RelatesToType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|impl
operator|.
name|AddressingPropertiesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMConfiguration
operator|.
name|DeliveryAssurance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|AcksPolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|DeliveryAssuranceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|DestinationPolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|RM10AddressingNamespaceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|SourcePolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|policy
operator|.
name|RMPolicyUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|soap
operator|.
name|RetransmissionQueueImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|soap
operator|.
name|SoapFaultFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|CloseSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|CreateSequenceResponseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceType
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|RMManager
block|{
comment|/** Message contextual property giving WS-ReliableMessaging namespace. */
specifier|public
specifier|static
specifier|final
name|String
name|WSRM_VERSION_PROPERTY
init|=
literal|"org.apache.cxf.ws.rm.namespace"
decl_stmt|;
comment|/** Message contextual property giving addressing namespace to be used by WS-RM implementation. */
specifier|public
specifier|static
specifier|final
name|String
name|WSRM_WSA_VERSION_PROPERTY
init|=
literal|"org.apache.cxf.ws.rm.wsa-namespace"
decl_stmt|;
comment|/** Message contextual property giving the last message flag (Boolean). */
specifier|public
specifier|static
specifier|final
name|String
name|WSRM_LAST_MESSAGE_PROPERTY
init|=
literal|"org.apache.cxf.ws.rm.last-message"
decl_stmt|;
comment|/** Message contextual property giving WS-ReliableMessaging inactivity timeout (Long). */
specifier|public
specifier|static
specifier|final
name|String
name|WSRM_INACTIVITY_TIMEOUT_PROPERTY
init|=
literal|"org.apache.cxf.ws.rm.inactivity-timeout"
decl_stmt|;
comment|/** Message contextual property giving WS-ReliableMessaging base retransmission interval (Long). */
specifier|public
specifier|static
specifier|final
name|String
name|WSRM_RETRANSMISSION_INTERVAL_PROPERTY
init|=
literal|"org.apache.cxf.ws.rm.retransmission-interval"
decl_stmt|;
comment|/** Message contextual property giving WS-ReliableMessaging exponential backoff flag (Boolean). */
specifier|public
specifier|static
specifier|final
name|String
name|WSRM_EXPONENTIAL_BACKOFF_PROPERTY
init|=
literal|"org.apache.cxf.ws.rm.exponential-backoff"
decl_stmt|;
comment|/** Message contextual property giving WS-ReliableMessaging acknowledgement interval (Long). */
specifier|public
specifier|static
specifier|final
name|String
name|WSRM_ACKNOWLEDGEMENT_INTERVAL_PROPERTY
init|=
literal|"org.apache.cxf.ws.rm.acknowledgement-interval"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|RMManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|RMStore
name|store
decl_stmt|;
specifier|private
name|SequenceIdentifierGenerator
name|idGenerator
decl_stmt|;
specifier|private
name|RetransmissionQueue
name|retransmissionQueue
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Endpoint
argument_list|,
name|RMEndpoint
argument_list|>
name|reliableEndpoints
init|=
operator|new
name|HashMap
argument_list|<
name|Endpoint
argument_list|,
name|RMEndpoint
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicReference
argument_list|<
name|Timer
argument_list|>
name|timer
init|=
operator|new
name|AtomicReference
argument_list|<
name|Timer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|RMConfiguration
name|configuration
decl_stmt|;
specifier|private
name|SourcePolicyType
name|sourcePolicy
decl_stmt|;
specifier|private
name|DestinationPolicyType
name|destinationPolicy
decl_stmt|;
specifier|private
name|InstrumentationManager
name|instrumentationManager
decl_stmt|;
specifier|private
name|ManagedRMManager
name|managedManager
decl_stmt|;
comment|// ServerLifeCycleListener
specifier|public
name|void
name|startServer
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|recoverReliableEndpoint
argument_list|(
name|server
operator|.
name|getEndpoint
argument_list|()
argument_list|,
operator|(
name|Conduit
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stopServer
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|shutdownReliableEndpoint
argument_list|(
name|server
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ClientLifeCycleListener
specifier|public
name|void
name|clientCreated
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|store
operator|||
literal|null
operator|==
name|retransmissionQueue
condition|)
block|{
return|return;
block|}
name|String
name|id
init|=
name|RMUtils
operator|.
name|getEndpointIdentifier
argument_list|(
name|client
operator|.
name|getEndpoint
argument_list|()
argument_list|,
name|getBus
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|SourceSequence
argument_list|>
name|sss
init|=
name|store
operator|.
name|getSourceSequences
argument_list|(
name|id
comment|/*, protocol*/
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|sss
operator|||
literal|0
operator|==
name|sss
operator|.
name|size
argument_list|()
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Number of source sequences: {0}"
argument_list|,
name|sss
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|recoverReliableEndpoint
argument_list|(
name|client
operator|.
name|getEndpoint
argument_list|()
argument_list|,
name|client
operator|.
name|getConduit
argument_list|()
comment|/*, protocol*/
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clientDestroyed
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|shutdownReliableEndpoint
argument_list|(
name|client
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Configuration
specifier|public
name|void
name|setRMNamespace
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setRMNamespace
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setRM10AddressingNamespace
parameter_list|(
name|RM10AddressingNamespaceType
name|addrns
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setRM10AddressingNamespace
argument_list|(
name|addrns
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
annotation|@
name|Resource
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|bus
condition|)
block|{
name|bus
operator|.
name|setExtension
argument_list|(
name|this
argument_list|,
name|RMManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|RMStore
name|getStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
specifier|public
name|void
name|setStore
parameter_list|(
name|RMStore
name|s
parameter_list|)
block|{
name|store
operator|=
name|s
expr_stmt|;
block|}
specifier|public
name|RetransmissionQueue
name|getRetransmissionQueue
parameter_list|()
block|{
return|return
name|retransmissionQueue
return|;
block|}
specifier|public
name|void
name|setRetransmissionQueue
parameter_list|(
name|RetransmissionQueue
name|rq
parameter_list|)
block|{
name|retransmissionQueue
operator|=
name|rq
expr_stmt|;
block|}
specifier|public
name|SequenceIdentifierGenerator
name|getIdGenerator
parameter_list|()
block|{
return|return
name|idGenerator
return|;
block|}
specifier|public
name|void
name|setIdGenerator
parameter_list|(
name|SequenceIdentifierGenerator
name|generator
parameter_list|)
block|{
name|idGenerator
operator|=
name|generator
expr_stmt|;
block|}
specifier|private
name|Timer
name|getTimer
parameter_list|(
name|boolean
name|create
parameter_list|)
block|{
name|Timer
name|ret
init|=
name|timer
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
operator|&&
name|create
condition|)
block|{
name|Timer
name|newt
init|=
operator|new
name|Timer
argument_list|(
literal|"RMManager-Timer-"
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|timer
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|newt
argument_list|)
condition|)
block|{
name|newt
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|timer
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|Timer
name|getTimer
parameter_list|()
block|{
return|return
name|getTimer
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|BindingFaultFactory
name|getBindingFaultFactory
parameter_list|(
name|Binding
name|binding
parameter_list|)
block|{
return|return
operator|new
name|SoapFaultFactory
argument_list|(
name|binding
argument_list|)
return|;
block|}
comment|/**      * @param dat The deliveryAssurance to set.      */
specifier|public
name|void
name|setDeliveryAssurance
parameter_list|(
name|DeliveryAssuranceType
name|dat
parameter_list|)
block|{
name|RMConfiguration
name|cfg
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|setInOrder
argument_list|(
name|dat
operator|.
name|isSetInOrder
argument_list|()
argument_list|)
expr_stmt|;
name|DeliveryAssurance
name|da
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dat
operator|.
name|isSetExactlyOnce
argument_list|()
operator|||
operator|(
name|dat
operator|.
name|isSetAtLeastOnce
argument_list|()
operator|&&
name|dat
operator|.
name|isSetAtMostOnce
argument_list|()
operator|)
condition|)
block|{
name|da
operator|=
name|DeliveryAssurance
operator|.
name|EXACTLY_ONCE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dat
operator|.
name|isSetAtLeastOnce
argument_list|()
condition|)
block|{
name|da
operator|=
name|DeliveryAssurance
operator|.
name|AT_LEAST_ONCE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dat
operator|.
name|isSetAtMostOnce
argument_list|()
condition|)
block|{
name|da
operator|=
name|DeliveryAssurance
operator|.
name|AT_MOST_ONCE
expr_stmt|;
block|}
name|cfg
operator|.
name|setDeliveryAssurance
argument_list|(
name|da
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return Returns the destinationPolicy.      */
specifier|public
name|DestinationPolicyType
name|getDestinationPolicy
parameter_list|()
block|{
return|return
name|destinationPolicy
return|;
block|}
comment|/**      * @param destinationPolicy The destinationPolicy to set.      */
specifier|public
name|void
name|setDestinationPolicy
parameter_list|(
name|DestinationPolicyType
name|destinationPolicy
parameter_list|)
block|{
name|this
operator|.
name|destinationPolicy
operator|=
name|destinationPolicy
expr_stmt|;
block|}
comment|/**      * Get base configuration for manager. This needs to be modified by endpoint policies to get the effective      * configuration.      * @return configuration (non-<code>null</code>)      */
specifier|public
name|RMConfiguration
name|getConfiguration
parameter_list|()
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
name|setConfiguration
argument_list|(
operator|new
name|RMConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|configuration
return|;
block|}
comment|/**      * @param configuration (non-<code>null</code>)      */
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|RMConfiguration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Long
name|value
init|=
operator|new
name|Long
argument_list|(
name|RetransmissionQueue
operator|.
name|DEFAULT_BASE_RETRANSMISSION_INTERVAL
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|setBaseRetransmissionInterval
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getRMNamespace
argument_list|()
operator|==
literal|null
condition|)
block|{
name|configuration
operator|.
name|setRMNamespace
argument_list|(
name|RM10Constants
operator|.
name|NAMESPACE_URI
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
comment|/**      * Get configuration after applying policies.      *       * @param msg      * @return configuration (non-<code>null</code>)      */
specifier|public
name|RMConfiguration
name|getEffectiveConfiguration
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
return|return
name|RMPolicyUtilities
operator|.
name|getRMConfiguration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|msg
argument_list|)
return|;
block|}
comment|/**      * @param rma The rmAssertion to set.      */
specifier|public
name|void
name|setRMAssertion
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rmp
operator|.
name|v200502
operator|.
name|RMAssertion
name|rma
parameter_list|)
block|{
name|setConfiguration
argument_list|(
name|RMPolicyUtilities
operator|.
name|intersect
argument_list|(
name|rma
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**       * @return Returns the sourcePolicy.      */
specifier|public
name|SourcePolicyType
name|getSourcePolicy
parameter_list|()
block|{
return|return
name|sourcePolicy
return|;
block|}
comment|/**      * @param sp The sourcePolicy to set.      */
specifier|public
name|void
name|setSourcePolicy
parameter_list|(
name|SourcePolicyType
name|sp
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|ObjectFactory
name|factory
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|ObjectFactory
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|sp
condition|)
block|{
name|sp
operator|=
name|factory
operator|.
name|createSourcePolicyType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sp
operator|.
name|getSequenceTerminationPolicy
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sp
operator|.
name|setSequenceTerminationPolicy
argument_list|(
name|factory
operator|.
name|createSequenceTerminationPolicyType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sourcePolicy
operator|=
name|sp
expr_stmt|;
block|}
comment|// The real stuff ...
specifier|public
specifier|synchronized
name|RMEndpoint
name|getReliableEndpoint
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|RMException
block|{
name|Endpoint
name|endpoint
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|QName
name|name
init|=
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Getting RMEndpoint for endpoint with info: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|RM10Constants
operator|.
name|PORT_NAME
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
name|RM11Constants
operator|.
name|PORT_NAME
argument_list|)
condition|)
block|{
name|WrappedEndpoint
name|wrappedEndpoint
init|=
operator|(
name|WrappedEndpoint
operator|)
name|endpoint
decl_stmt|;
name|endpoint
operator|=
name|wrappedEndpoint
operator|.
name|getWrappedEndpoint
argument_list|()
expr_stmt|;
block|}
name|String
name|rmUri
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|WSRM_VERSION_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmUri
operator|==
literal|null
condition|)
block|{
name|RMProperties
name|rmps
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmps
operator|!=
literal|null
condition|)
block|{
name|rmUri
operator|=
name|rmps
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|addrUri
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|WSRM_WSA_VERSION_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|addrUri
operator|==
literal|null
condition|)
block|{
name|AddressingProperties
name|maps
init|=
name|ContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|maps
operator|!=
literal|null
condition|)
block|{
name|addrUri
operator|=
name|maps
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
block|}
name|RMConfiguration
name|config
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmUri
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|setRMNamespace
argument_list|(
name|rmUri
argument_list|)
expr_stmt|;
name|ProtocolVariation
name|protocol
init|=
name|ProtocolVariation
operator|.
name|findVariant
argument_list|(
name|rmUri
argument_list|,
name|addrUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|protocol
operator|==
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"UNSUPPORTED_NAMESPACE"
argument_list|,
name|LOG
argument_list|,
name|addrUri
argument_list|,
name|rmUri
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|addrUri
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|setRM10AddressingNamespace
argument_list|(
name|addrUri
argument_list|)
expr_stmt|;
block|}
name|Long
name|timeout
init|=
operator|(
name|Long
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|WSRM_INACTIVITY_TIMEOUT_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|setInactivityTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
name|Long
name|interval
init|=
operator|(
name|Long
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|WSRM_RETRANSMISSION_INTERVAL_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|interval
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|setBaseRetransmissionInterval
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|exponential
init|=
operator|(
name|Boolean
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|WSRM_EXPONENTIAL_BACKOFF_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|exponential
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|setExponentialBackoff
argument_list|(
name|exponential
argument_list|)
expr_stmt|;
block|}
name|interval
operator|=
operator|(
name|Long
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|WSRM_ACKNOWLEDGEMENT_INTERVAL_PROPERTY
argument_list|)
expr_stmt|;
if|if
condition|(
name|interval
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|setAcknowledgementInterval
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
name|RMEndpoint
name|rme
init|=
name|reliableEndpoints
operator|.
name|get
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|rme
condition|)
block|{
name|rme
operator|=
name|createReliableEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
name|destination
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|EndpointReferenceType
name|replyTo
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|destination
condition|)
block|{
name|AddressingProperties
name|maps
init|=
name|RMContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|replyTo
operator|=
name|maps
operator|.
name|getReplyTo
argument_list|()
expr_stmt|;
block|}
name|Endpoint
name|ei
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
name|dest
init|=
name|ei
operator|==
literal|null
condition|?
literal|null
else|:
name|ei
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getProperty
argument_list|(
name|MAPAggregator
operator|.
name|DECOUPLED_DESTINATION
argument_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
operator|.
name|class
argument_list|)
decl_stmt|;
name|config
operator|=
name|RMPolicyUtilities
operator|.
name|getRMConfiguration
argument_list|(
name|config
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|rme
operator|.
name|initialise
argument_list|(
name|config
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getConduit
argument_list|(
name|message
argument_list|)
argument_list|,
name|replyTo
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|reliableEndpoints
operator|.
name|put
argument_list|(
name|endpoint
argument_list|,
name|rme
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Created new RMEndpoint."
argument_list|)
expr_stmt|;
block|}
return|return
name|rme
return|;
block|}
specifier|public
name|Destination
name|getDestination
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|RMException
block|{
name|RMEndpoint
name|rme
init|=
name|getReliableEndpoint
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|rme
condition|)
block|{
return|return
name|rme
operator|.
name|getDestination
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Source
name|getSource
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|RMException
block|{
name|RMEndpoint
name|rme
init|=
name|getReliableEndpoint
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|rme
condition|)
block|{
return|return
name|rme
operator|.
name|getSource
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|SourceSequence
name|getSequence
parameter_list|(
name|Identifier
name|inSeqId
parameter_list|,
name|Message
name|message
parameter_list|,
name|AddressingProperties
name|maps
parameter_list|)
throws|throws
name|RMException
block|{
name|Source
name|source
init|=
name|getSource
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|SourceSequence
name|seq
init|=
name|source
operator|.
name|getCurrent
argument_list|(
name|inSeqId
argument_list|)
decl_stmt|;
name|RMConfiguration
name|config
init|=
name|getEffectiveConfiguration
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|seq
operator|||
name|seq
operator|.
name|isExpired
argument_list|()
condition|)
block|{
comment|// TODO: better error handling
name|EndpointReferenceType
name|to
init|=
literal|null
decl_stmt|;
name|boolean
name|isServer
init|=
name|RMContextUtils
operator|.
name|isServerSide
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|EndpointReferenceType
name|acksTo
init|=
literal|null
decl_stmt|;
name|RelatesToType
name|relatesTo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isServer
condition|)
block|{
name|AddressingProperties
name|inMaps
init|=
name|RMContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|inMaps
operator|.
name|exposeAs
argument_list|(
name|config
operator|.
name|getAddressingNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|acksTo
operator|=
name|RMUtils
operator|.
name|createReference
argument_list|(
name|inMaps
operator|.
name|getTo
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|to
operator|=
name|inMaps
operator|.
name|getReplyTo
argument_list|()
expr_stmt|;
name|source
operator|.
name|getReliableEndpoint
argument_list|()
operator|.
name|getServant
argument_list|()
operator|.
name|setUnattachedIdentifier
argument_list|(
name|inSeqId
argument_list|)
expr_stmt|;
name|relatesTo
operator|=
operator|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|ObjectFactory
argument_list|()
operator|)
operator|.
name|createRelatesToType
argument_list|()
expr_stmt|;
name|Destination
name|destination
init|=
name|getDestination
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|DestinationSequence
name|inSeq
init|=
name|inSeqId
operator|==
literal|null
condition|?
literal|null
else|:
name|destination
operator|.
name|getSequence
argument_list|(
name|inSeqId
argument_list|)
decl_stmt|;
name|relatesTo
operator|.
name|setValue
argument_list|(
name|inSeq
operator|!=
literal|null
condition|?
name|inSeq
operator|.
name|getCorrelationID
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|to
operator|=
name|RMUtils
operator|.
name|createReference
argument_list|(
name|maps
operator|.
name|getTo
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|acksTo
operator|=
name|maps
operator|.
name|getReplyTo
argument_list|()
expr_stmt|;
if|if
condition|(
name|RMUtils
operator|.
name|getAddressingConstants
argument_list|()
operator|.
name|getNoneURI
argument_list|()
operator|.
name|equals
argument_list|(
name|acksTo
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|Endpoint
name|ei
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
name|dest
init|=
name|ei
operator|==
literal|null
condition|?
literal|null
else|:
name|ei
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getProperty
argument_list|(
name|MAPAggregator
operator|.
name|DECOUPLED_DESTINATION
argument_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|dest
condition|)
block|{
name|acksTo
operator|=
name|RMUtils
operator|.
name|createAnonymousReference
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|acksTo
operator|=
name|dest
operator|.
name|getAddress
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ContextUtils
operator|.
name|isGenericAddress
argument_list|(
name|to
argument_list|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"CREATE_SEQ_ANON_TARGET"
argument_list|,
name|LOG
argument_list|,
name|to
operator|!=
literal|null
operator|&&
name|to
operator|.
name|getAddress
argument_list|()
operator|!=
literal|null
condition|?
name|to
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
else|:
literal|null
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|Proxy
name|proxy
init|=
name|source
operator|.
name|getReliableEndpoint
argument_list|()
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|ProtocolVariation
name|protocol
init|=
name|config
operator|.
name|getProtocolVariation
argument_list|()
decl_stmt|;
name|CreateSequenceResponseType
name|createResponse
init|=
name|proxy
operator|.
name|createSequence
argument_list|(
name|acksTo
argument_list|,
name|relatesTo
argument_list|,
name|isServer
argument_list|,
name|protocol
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isServer
condition|)
block|{
name|Servant
name|servant
init|=
name|source
operator|.
name|getReliableEndpoint
argument_list|()
operator|.
name|getServant
argument_list|()
decl_stmt|;
name|servant
operator|.
name|createSequenceResponse
argument_list|(
name|createResponse
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
block|}
name|seq
operator|=
name|source
operator|.
name|awaitCurrent
argument_list|(
name|inSeqId
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setTarget
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
return|return
name|seq
return|;
block|}
annotation|@
name|PreDestroy
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
comment|// shutdown remaining endpoints
if|if
condition|(
name|reliableEndpoints
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Shutting down RMManager with {0} remaining endpoints."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|reliableEndpoints
operator|.
name|size
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|RMEndpoint
name|rme
range|:
name|reliableEndpoints
operator|.
name|values
argument_list|()
control|)
block|{
name|rme
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// remove references to timer tasks cancelled above to make them
comment|// eligible for garbage collection
name|Timer
name|t
init|=
name|getTimer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|purge
argument_list|()
expr_stmt|;
name|t
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
comment|// unregistring of this managed bean from the server is done by the bus itself
block|}
specifier|synchronized
name|void
name|shutdownReliableEndpoint
parameter_list|(
name|Endpoint
name|e
parameter_list|)
block|{
name|RMEndpoint
name|rme
init|=
literal|null
decl_stmt|;
name|rme
operator|=
name|reliableEndpoints
operator|.
name|get
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|rme
operator|==
literal|null
condition|)
block|{
comment|// not found
return|return;
block|}
name|rme
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// remove references to timer tasks cancelled above to make them
comment|// eligible for garbage collection
name|Timer
name|t
init|=
name|getTimer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|purge
argument_list|()
expr_stmt|;
block|}
name|reliableEndpoints
operator|.
name|remove
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|void
name|recoverReliableEndpoint
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|Conduit
name|conduit
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|store
operator|||
literal|null
operator|==
name|retransmissionQueue
condition|)
block|{
return|return;
block|}
name|String
name|id
init|=
name|RMUtils
operator|.
name|getEndpointIdentifier
argument_list|(
name|endpoint
argument_list|,
name|getBus
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|SourceSequence
argument_list|>
name|sss
init|=
name|store
operator|.
name|getSourceSequences
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|DestinationSequence
argument_list|>
name|dss
init|=
name|store
operator|.
name|getDestinationSequences
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
literal|null
operator|==
name|sss
operator|||
literal|0
operator|==
name|sss
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|(
literal|null
operator|==
name|dss
operator|||
literal|0
operator|==
name|dss
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Number of source sequences: {0}"
argument_list|,
name|sss
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Number of destination sequences: {0}"
argument_list|,
name|dss
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Recovering {0} endpoint with id: {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|null
operator|==
name|conduit
condition|?
literal|"client"
else|:
literal|"server"
block|,
name|id
block|}
argument_list|)
expr_stmt|;
name|RMEndpoint
name|rme
init|=
name|createReliableEndpoint
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|rme
operator|.
name|initialise
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|conduit
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|reliableEndpoints
operator|.
name|put
argument_list|(
name|endpoint
argument_list|,
name|rme
argument_list|)
expr_stmt|;
for|for
control|(
name|SourceSequence
name|ss
range|:
name|sss
control|)
block|{
name|recoverSourceSequence
argument_list|(
name|endpoint
argument_list|,
name|conduit
argument_list|,
name|rme
operator|.
name|getSource
argument_list|()
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DestinationSequence
name|ds
range|:
name|dss
control|)
block|{
name|reconverDestinationSequence
argument_list|(
name|endpoint
argument_list|,
name|conduit
argument_list|,
name|rme
operator|.
name|getDestination
argument_list|()
argument_list|,
name|ds
argument_list|)
expr_stmt|;
block|}
name|retransmissionQueue
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|recoverSourceSequence
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|Conduit
name|conduit
parameter_list|,
name|Source
name|s
parameter_list|,
name|SourceSequence
name|ss
parameter_list|)
block|{
name|Collection
argument_list|<
name|RMMessage
argument_list|>
name|ms
init|=
name|store
operator|.
name|getMessages
argument_list|(
name|ss
operator|.
name|getIdentifier
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ms
operator|||
literal|0
operator|==
name|ms
operator|.
name|size
argument_list|()
condition|)
block|{
name|store
operator|.
name|removeSourceSequence
argument_list|(
name|ss
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Number of messages in sequence: {0}"
argument_list|,
name|ms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|addSequence
argument_list|(
name|ss
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// choosing an arbitrary valid source sequence as the current source sequence
if|if
condition|(
name|s
operator|.
name|getAssociatedSequence
argument_list|(
literal|null
argument_list|)
operator|==
literal|null
operator|&&
operator|!
name|ss
operator|.
name|isExpired
argument_list|()
operator|&&
operator|!
name|ss
operator|.
name|isLastMessage
argument_list|()
condition|)
block|{
name|s
operator|.
name|setCurrent
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RMMessage
name|m
range|:
name|ms
control|)
block|{
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|message
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setOutMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|conduit
condition|)
block|{
name|exchange
operator|.
name|setConduit
argument_list|(
name|conduit
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Service
operator|.
name|class
argument_list|,
name|endpoint
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getService
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|put
argument_list|(
name|ServiceInfo
operator|.
name|class
argument_list|,
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|InterfaceInfo
operator|.
name|class
argument_list|,
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getInterface
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|put
argument_list|(
name|Binding
operator|.
name|class
argument_list|,
name|endpoint
operator|.
name|getBinding
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|,
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Bus
operator|.
name|class
argument_list|,
name|bus
argument_list|)
expr_stmt|;
name|SequenceType
name|st
init|=
operator|new
name|SequenceType
argument_list|()
decl_stmt|;
name|st
operator|.
name|setIdentifier
argument_list|(
name|ss
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setMessageNumber
argument_list|(
name|m
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|RMProperties
name|rmps
init|=
operator|new
name|RMProperties
argument_list|()
decl_stmt|;
name|rmps
operator|.
name|setSequence
argument_list|(
name|st
argument_list|)
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|isLastMessage
argument_list|()
operator|&&
name|ss
operator|.
name|getCurrentMessageNr
argument_list|()
operator|==
name|m
operator|.
name|getMessageNumber
argument_list|()
condition|)
block|{
name|CloseSequenceType
name|close
init|=
operator|new
name|CloseSequenceType
argument_list|()
decl_stmt|;
name|close
operator|.
name|setIdentifier
argument_list|(
name|ss
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|rmps
operator|.
name|setCloseSequence
argument_list|(
name|close
argument_list|)
expr_stmt|;
block|}
name|RMContextUtils
operator|.
name|storeRMProperties
argument_list|(
name|message
argument_list|,
name|rmps
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|conduit
condition|)
block|{
name|String
name|to
init|=
name|m
operator|.
name|getTo
argument_list|()
decl_stmt|;
name|AddressingProperties
name|maps
init|=
operator|new
name|AddressingPropertiesImpl
argument_list|()
decl_stmt|;
name|maps
operator|.
name|setTo
argument_list|(
name|RMUtils
operator|.
name|createReference
argument_list|(
name|to
argument_list|)
argument_list|)
expr_stmt|;
name|RMContextUtils
operator|.
name|storeMAPs
argument_list|(
name|maps
argument_list|,
name|message
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|put
argument_list|(
name|RMMessageConstants
operator|.
name|SAVED_CONTENT
argument_list|,
name|m
operator|.
name|getCachedOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|RMContextUtils
operator|.
name|setProtocolVariation
argument_list|(
name|message
argument_list|,
name|ss
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|retransmissionQueue
operator|.
name|addUnacknowledged
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|reconverDestinationSequence
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|Conduit
name|conduit
parameter_list|,
name|Destination
name|d
parameter_list|,
name|DestinationSequence
name|ds
parameter_list|)
block|{
name|d
operator|.
name|addSequence
argument_list|(
name|ds
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//TODO add the redelivery code
block|}
name|RMEndpoint
name|createReliableEndpoint
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
return|return
operator|new
name|RMEndpoint
argument_list|(
name|this
argument_list|,
name|endpoint
argument_list|)
return|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|setBus
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|initialise
argument_list|()
expr_stmt|;
name|registerListeners
argument_list|()
expr_stmt|;
block|}
annotation|@
name|PostConstruct
name|void
name|initialise
parameter_list|()
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setExponentialBackoff
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|DeliveryAssurance
name|da
init|=
name|configuration
operator|.
name|getDeliveryAssurance
argument_list|()
decl_stmt|;
if|if
condition|(
name|da
operator|==
literal|null
condition|)
block|{
name|configuration
operator|.
name|setDeliveryAssurance
argument_list|(
name|DeliveryAssurance
operator|.
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|sourcePolicy
condition|)
block|{
name|setSourcePolicy
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|destinationPolicy
condition|)
block|{
name|DestinationPolicyType
name|dp
init|=
operator|new
name|DestinationPolicyType
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setAcksPolicy
argument_list|(
operator|new
name|AcksPolicyType
argument_list|()
argument_list|)
expr_stmt|;
name|setDestinationPolicy
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|retransmissionQueue
condition|)
block|{
name|retransmissionQueue
operator|=
operator|new
name|RetransmissionQueueImpl
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|idGenerator
condition|)
block|{
name|idGenerator
operator|=
operator|new
name|DefaultSequenceIdentifierGenerator
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|bus
condition|)
block|{
name|managedManager
operator|=
operator|new
name|ManagedRMManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|instrumentationManager
operator|=
name|bus
operator|.
name|getExtension
argument_list|(
name|InstrumentationManager
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|instrumentationManager
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|instrumentationManager
operator|.
name|register
argument_list|(
name|managedManager
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMException
name|jmex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Registering ManagedRMManager failed."
argument_list|,
name|jmex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|PostConstruct
name|void
name|registerListeners
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|bus
condition|)
block|{
return|return;
block|}
name|ServerLifeCycleManager
name|slm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ServerLifeCycleManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|slm
condition|)
block|{
name|slm
operator|.
name|registerListener
argument_list|(
operator|new
name|ServerLifeCycleListener
argument_list|()
block|{
specifier|public
name|void
name|startServer
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|RMManager
operator|.
name|this
operator|.
name|startServer
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stopServer
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|RMManager
operator|.
name|this
operator|.
name|stopServer
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|ClientLifeCycleManager
name|clm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ClientLifeCycleManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|clm
condition|)
block|{
name|clm
operator|.
name|registerListener
argument_list|(
operator|new
name|ClientLifeCycleListener
argument_list|()
block|{
specifier|public
name|void
name|clientCreated
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|RMManager
operator|.
name|this
operator|.
name|clientCreated
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clientDestroyed
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|RMManager
operator|.
name|this
operator|.
name|clientDestroyed
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|Endpoint
argument_list|,
name|RMEndpoint
argument_list|>
name|getReliableEndpointsMap
parameter_list|()
block|{
return|return
name|reliableEndpoints
return|;
block|}
name|void
name|setReliableEndpointsMap
parameter_list|(
name|Map
argument_list|<
name|Endpoint
argument_list|,
name|RMEndpoint
argument_list|>
name|map
parameter_list|)
block|{
name|reliableEndpoints
operator|=
name|map
expr_stmt|;
block|}
class|class
name|DefaultSequenceIdentifierGenerator
implements|implements
name|SequenceIdentifierGenerator
block|{
specifier|public
name|Identifier
name|generateSequenceIdentifier
parameter_list|()
block|{
name|String
name|sequenceID
init|=
name|RMContextUtils
operator|.
name|generateUUID
argument_list|()
decl_stmt|;
name|Identifier
name|sid
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid
operator|.
name|setValue
argument_list|(
name|sequenceID
argument_list|)
expr_stmt|;
return|return
name|sid
return|;
block|}
block|}
block|}
end_class

end_unit

