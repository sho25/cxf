begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|jaxb
operator|.
name|JaxbAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RM10Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RM11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rmp
operator|.
name|v200502
operator|.
name|RMAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rmp
operator|.
name|v200502
operator|.
name|RMAssertion
operator|.
name|AcknowledgementInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rmp
operator|.
name|v200502
operator|.
name|RMAssertion
operator|.
name|BaseRetransmissionInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rmp
operator|.
name|v200502
operator|.
name|RMAssertion
operator|.
name|InactivityTimeout
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|RM10PolicyUtils
block|{
comment|/**      * Prevents instantiation.      *      */
specifier|private
name|RM10PolicyUtils
parameter_list|()
block|{             }
comment|/**      * Collect RMAssertions from map. This checks both namespaces defined for WS-RM policy assertions.      *       * @param aim map, may be<code>null</code>      * @return merged collection, never<code>null</code>      */
specifier|public
specifier|static
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|collectRMAssertions
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|mergedAsserts
init|=
operator|new
name|ArrayList
argument_list|<
name|AssertionInfo
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|aim
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|RM10Constants
operator|.
name|WSRMP_RMASSERTION_QNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
name|mergedAsserts
operator|.
name|addAll
argument_list|(
name|ais
argument_list|)
expr_stmt|;
block|}
name|ais
operator|=
name|aim
operator|.
name|get
argument_list|(
name|RM11Constants
operator|.
name|WSRMP_RMASSERTION_QNAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
name|mergedAsserts
operator|.
name|addAll
argument_list|(
name|ais
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mergedAsserts
return|;
block|}
comment|/**      * Returns an RMAssertion that is compatible with the default value      * and all RMAssertions pertaining to the message (can never be null).      *       * @param rma the default value      * @param message the message      * @return the compatible RMAssertion      */
specifier|public
specifier|static
name|RMAssertion
name|getRMAssertion
parameter_list|(
name|RMAssertion
name|defaultValue
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|RMAssertion
name|compatible
init|=
name|defaultValue
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|collectRMAssertions
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|JaxbAssertion
argument_list|<
name|RMAssertion
argument_list|>
name|ja
init|=
name|getAssertion
argument_list|(
name|ai
argument_list|)
decl_stmt|;
name|RMAssertion
name|rma
init|=
name|ja
operator|.
name|getData
argument_list|()
decl_stmt|;
name|compatible
operator|=
literal|null
operator|==
name|defaultValue
condition|?
name|rma
else|:
name|intersect
argument_list|(
name|compatible
argument_list|,
name|rma
argument_list|)
expr_stmt|;
block|}
return|return
name|compatible
return|;
block|}
specifier|public
specifier|static
name|RMAssertion
name|intersect
parameter_list|(
name|RMAssertion
name|a
parameter_list|,
name|RMAssertion
name|b
parameter_list|)
block|{
if|if
condition|(
name|equals
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
block|{
return|return
name|a
return|;
block|}
name|RMAssertion
name|compatible
init|=
operator|new
name|RMAssertion
argument_list|()
decl_stmt|;
comment|// use maximum of inactivity timeout
name|Long
name|aval
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|a
operator|.
name|getInactivityTimeout
argument_list|()
condition|)
block|{
name|aval
operator|=
name|a
operator|.
name|getInactivityTimeout
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
expr_stmt|;
block|}
name|Long
name|bval
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|b
operator|.
name|getInactivityTimeout
argument_list|()
condition|)
block|{
name|bval
operator|=
name|b
operator|.
name|getInactivityTimeout
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|aval
operator|||
literal|null
operator|!=
name|bval
condition|)
block|{
name|InactivityTimeout
name|ia
init|=
operator|new
name|RMAssertion
operator|.
name|InactivityTimeout
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|aval
operator|&&
literal|null
operator|!=
name|bval
condition|)
block|{
name|ia
operator|.
name|setMilliseconds
argument_list|(
name|bval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ia
operator|.
name|setMilliseconds
argument_list|(
name|aval
operator|!=
literal|null
condition|?
name|aval
else|:
name|bval
argument_list|)
expr_stmt|;
block|}
name|compatible
operator|.
name|setInactivityTimeout
argument_list|(
name|ia
argument_list|)
expr_stmt|;
block|}
comment|// use minimum of base retransmission interval
name|aval
operator|=
literal|null
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|a
operator|.
name|getBaseRetransmissionInterval
argument_list|()
condition|)
block|{
name|aval
operator|=
name|a
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
expr_stmt|;
block|}
name|bval
operator|=
literal|null
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|b
operator|.
name|getBaseRetransmissionInterval
argument_list|()
condition|)
block|{
name|bval
operator|=
name|b
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|aval
operator|||
literal|null
operator|!=
name|bval
condition|)
block|{
name|BaseRetransmissionInterval
name|bri
init|=
operator|new
name|RMAssertion
operator|.
name|BaseRetransmissionInterval
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|aval
operator|&&
literal|null
operator|!=
name|bval
condition|)
block|{
name|bri
operator|.
name|setMilliseconds
argument_list|(
name|bval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bri
operator|.
name|setMilliseconds
argument_list|(
name|aval
operator|!=
literal|null
condition|?
name|aval
else|:
name|bval
argument_list|)
expr_stmt|;
block|}
name|compatible
operator|.
name|setBaseRetransmissionInterval
argument_list|(
name|bri
argument_list|)
expr_stmt|;
block|}
comment|// use minimum of acknowledgement interval
name|aval
operator|=
literal|null
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|a
operator|.
name|getAcknowledgementInterval
argument_list|()
condition|)
block|{
name|aval
operator|=
name|a
operator|.
name|getAcknowledgementInterval
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
expr_stmt|;
block|}
name|bval
operator|=
literal|null
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|b
operator|.
name|getAcknowledgementInterval
argument_list|()
condition|)
block|{
name|bval
operator|=
name|b
operator|.
name|getAcknowledgementInterval
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|aval
operator|||
literal|null
operator|!=
name|bval
condition|)
block|{
name|AcknowledgementInterval
name|ai
init|=
operator|new
name|RMAssertion
operator|.
name|AcknowledgementInterval
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|aval
operator|&&
literal|null
operator|!=
name|bval
condition|)
block|{
name|ai
operator|.
name|setMilliseconds
argument_list|(
name|bval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ai
operator|.
name|setMilliseconds
argument_list|(
name|aval
operator|!=
literal|null
condition|?
name|aval
else|:
name|bval
argument_list|)
expr_stmt|;
block|}
name|compatible
operator|.
name|setAcknowledgementInterval
argument_list|(
name|ai
argument_list|)
expr_stmt|;
block|}
comment|// backoff parameter
if|if
condition|(
literal|null
operator|!=
name|a
operator|.
name|getExponentialBackoff
argument_list|()
operator|||
literal|null
operator|!=
name|b
operator|.
name|getExponentialBackoff
argument_list|()
condition|)
block|{
name|compatible
operator|.
name|setExponentialBackoff
argument_list|(
operator|new
name|RMAssertion
operator|.
name|ExponentialBackoff
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|compatible
return|;
block|}
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|RMAssertion
name|a
parameter_list|,
name|RMAssertion
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
name|b
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Long
name|aval
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|a
operator|.
name|getInactivityTimeout
argument_list|()
condition|)
block|{
name|aval
operator|=
name|a
operator|.
name|getInactivityTimeout
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
expr_stmt|;
block|}
name|Long
name|bval
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|b
operator|.
name|getInactivityTimeout
argument_list|()
condition|)
block|{
name|bval
operator|=
name|b
operator|.
name|getInactivityTimeout
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|equals
argument_list|(
name|aval
argument_list|,
name|bval
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|aval
operator|=
literal|null
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|a
operator|.
name|getBaseRetransmissionInterval
argument_list|()
condition|)
block|{
name|aval
operator|=
name|a
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
expr_stmt|;
block|}
name|bval
operator|=
literal|null
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|b
operator|.
name|getBaseRetransmissionInterval
argument_list|()
condition|)
block|{
name|bval
operator|=
name|b
operator|.
name|getBaseRetransmissionInterval
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|equals
argument_list|(
name|aval
argument_list|,
name|bval
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|aval
operator|=
literal|null
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|a
operator|.
name|getAcknowledgementInterval
argument_list|()
condition|)
block|{
name|aval
operator|=
name|a
operator|.
name|getAcknowledgementInterval
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
expr_stmt|;
block|}
name|bval
operator|=
literal|null
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|b
operator|.
name|getAcknowledgementInterval
argument_list|()
condition|)
block|{
name|bval
operator|=
name|b
operator|.
name|getAcknowledgementInterval
argument_list|()
operator|.
name|getMilliseconds
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|equals
argument_list|(
name|aval
argument_list|,
name|bval
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|null
operator|==
name|a
operator|.
name|getExponentialBackoff
argument_list|()
condition|?
literal|null
operator|==
name|b
operator|.
name|getExponentialBackoff
argument_list|()
else|:
literal|null
operator|!=
name|b
operator|.
name|getExponentialBackoff
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|equals
parameter_list|(
name|Long
name|aval
parameter_list|,
name|Long
name|bval
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|aval
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|bval
condition|)
block|{
if|if
condition|(
operator|!
name|aval
operator|.
name|equals
argument_list|(
name|bval
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
literal|null
operator|!=
name|bval
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|JaxbAssertion
argument_list|<
name|RMAssertion
argument_list|>
name|getAssertion
parameter_list|(
name|AssertionInfo
name|ai
parameter_list|)
block|{
return|return
operator|(
name|JaxbAssertion
argument_list|<
name|RMAssertion
argument_list|>
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
return|;
block|}
block|}
end_class

end_unit

