begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|ManagedComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedOperationParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedOperationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|DestinationSequence
operator|.
name|DeferredAcknowledgment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
import|;
end_import

begin_comment
comment|/**  * The ManagedRMEndpoint is a JMX managed bean for RMEndpoint.  *  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|componentName
operator|=
literal|"RMEndpoint"
argument_list|,
name|description
operator|=
literal|"Responsible for Sources and Destinations."
argument_list|)
annotation|@
name|ManagedNotifications
argument_list|(
block|{
annotation|@
name|ManagedNotification
argument_list|(
name|name
operator|=
literal|"org.apache.ws.rm.acknowledgement"
argument_list|,
name|notificationTypes
operator|=
block|{
literal|"org.apache.cxf.ws.rm.AcknowledgementNotification"
block|}
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|ManagedRMEndpoint
implements|implements
name|ManagedComponent
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ACKNOWLEDGEMENT_NOTIFICATION
init|=
literal|"org.apache.ws.rm.acknowledgement"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SOURCE_SEQUENCE_NAMES
init|=
block|{
literal|"sequenceId"
block|,
literal|"currentMessageNumber"
block|,
literal|"expires"
block|,
literal|"lastMessage"
block|,
literal|"queuedMessageCount"
block|,
literal|"target"
block|,
literal|"wsrm"
block|,
literal|"wsa"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SOURCE_SEQUENCE_DESCRIPTIONS
init|=
name|SOURCE_SEQUENCE_NAMES
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// needed as OpenType isn't generic on Java5
specifier|private
specifier|static
specifier|final
name|OpenType
index|[]
name|SOURCE_SEQUENCE_TYPES
init|=
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|DATE
block|,
name|SimpleType
operator|.
name|BOOLEAN
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DESTINATION_SEQUENCE_NAMES
init|=
block|{
literal|"sequenceId"
block|,
literal|"lastMessageNumber"
block|,
literal|"correlationId"
block|,
literal|"ackTo"
block|,
literal|"wsrm"
block|,
literal|"wsa"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DESTINATION_SEQUENCE_DESCRIPTIONS
init|=
name|DESTINATION_SEQUENCE_NAMES
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// needed as OpenType isn't generic on Java5
specifier|private
specifier|static
specifier|final
name|OpenType
index|[]
name|DESTINATION_SEQUENCE_TYPES
init|=
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|RETRY_STATUS_NAMES
init|=
block|{
literal|"messageNumber"
block|,
literal|"retries"
block|,
literal|"maxRetries"
block|,
literal|"previous"
block|,
literal|"next"
block|,
literal|"nextInterval"
block|,
literal|"backOff"
block|,
literal|"pending"
block|,
literal|"suspended"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|RETRY_STATUS_DESCRIPTIONS
init|=
name|RETRY_STATUS_NAMES
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
comment|// needed as OpenType isn't generic on Java5
specifier|private
specifier|static
specifier|final
name|OpenType
index|[]
name|RETRY_STATUS_TYPES
init|=
block|{
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|DATE
block|,
name|SimpleType
operator|.
name|DATE
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|BOOLEAN
block|,
name|SimpleType
operator|.
name|BOOLEAN
block|}
decl_stmt|;
specifier|private
specifier|static
name|CompositeType
name|sourceSequenceType
decl_stmt|;
specifier|private
specifier|static
name|CompositeType
name|destinationSequenceType
decl_stmt|;
specifier|private
specifier|static
name|CompositeType
name|retryStatusType
decl_stmt|;
specifier|private
name|RMEndpoint
name|endpoint
decl_stmt|;
static|static
block|{
try|try
block|{
name|sourceSequenceType
operator|=
operator|new
name|CompositeType
argument_list|(
literal|"sourceSequence"
argument_list|,
literal|"sourceSequence"
argument_list|,
name|SOURCE_SEQUENCE_NAMES
argument_list|,
name|SOURCE_SEQUENCE_DESCRIPTIONS
argument_list|,
name|SOURCE_SEQUENCE_TYPES
argument_list|)
expr_stmt|;
name|destinationSequenceType
operator|=
operator|new
name|CompositeType
argument_list|(
literal|"destinationSequence"
argument_list|,
literal|"destinationSequence"
argument_list|,
name|DESTINATION_SEQUENCE_NAMES
argument_list|,
name|DESTINATION_SEQUENCE_DESCRIPTIONS
argument_list|,
name|DESTINATION_SEQUENCE_TYPES
argument_list|)
expr_stmt|;
name|retryStatusType
operator|=
operator|new
name|CompositeType
argument_list|(
literal|"retryStatus"
argument_list|,
literal|"retryStatus"
argument_list|,
name|RETRY_STATUS_NAMES
argument_list|,
name|RETRY_STATUS_DESCRIPTIONS
argument_list|,
name|RETRY_STATUS_TYPES
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
comment|// ignore and handle it later
block|}
block|}
specifier|public
name|ManagedRMEndpoint
parameter_list|(
name|RMEndpoint
name|endpoint
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.cxf.management.ManagedComponent#getObjectName()      */
specifier|public
name|ObjectName
name|getObjectName
parameter_list|()
throws|throws
name|JMException
block|{
return|return
name|RMUtils
operator|.
name|getManagedObjectName
argument_list|(
name|endpoint
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Total Number of Queued Messages"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"outbound"
argument_list|,
name|description
operator|=
literal|"The outbound direction"
argument_list|)
block|}
argument_list|)
specifier|public
name|int
name|getQueuedMessageTotalCount
parameter_list|(
name|boolean
name|outbound
parameter_list|)
block|{
if|if
condition|(
name|outbound
condition|)
block|{
return|return
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRetransmissionQueue
argument_list|()
operator|.
name|countUnacknowledged
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRedeliveryQueue
argument_list|()
operator|.
name|countUndelivered
argument_list|()
return|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Number of Queued Messages"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|,
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"outbound"
argument_list|,
name|description
operator|=
literal|"The outbound direction"
argument_list|)
block|}
argument_list|)
specifier|public
name|int
name|getQueuedMessageCount
parameter_list|(
name|String
name|sid
parameter_list|,
name|boolean
name|outbound
parameter_list|)
block|{
name|RMManager
name|manager
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|outbound
condition|)
block|{
name|SourceSequence
name|ss
init|=
name|getSourceSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ss
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
return|return
name|manager
operator|.
name|getRetransmissionQueue
argument_list|()
operator|.
name|countUnacknowledged
argument_list|(
name|ss
argument_list|)
return|;
block|}
else|else
block|{
name|DestinationSequence
name|ds
init|=
name|getDestinationSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ds
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
return|return
name|manager
operator|.
name|getRedeliveryQueue
argument_list|()
operator|.
name|countUndelivered
argument_list|(
name|ds
argument_list|)
return|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"List of UnAcknowledged Message Numbers"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|Long
index|[]
name|getUnAcknowledgedMessageIdentifiers
parameter_list|(
name|String
name|sid
parameter_list|)
block|{
name|RetransmissionQueue
name|rq
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRetransmissionQueue
argument_list|()
decl_stmt|;
name|SourceSequence
name|ss
init|=
name|getSourceSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ss
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|numbers
init|=
name|rq
operator|.
name|getUnacknowledgedMessageNumbers
argument_list|(
name|ss
argument_list|)
decl_stmt|;
return|return
name|numbers
operator|.
name|toArray
argument_list|(
operator|new
name|Long
index|[
name|numbers
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Total Number of Deferred Acknowledgements"
argument_list|)
specifier|public
name|int
name|getDeferredAcknowledgementTotalCount
parameter_list|()
block|{
name|Destination
name|destination
init|=
name|endpoint
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DestinationSequence
name|ds
range|:
name|destination
operator|.
name|getAllSequences
argument_list|()
control|)
block|{
name|List
argument_list|<
name|DeferredAcknowledgment
argument_list|>
name|das
init|=
name|ds
operator|.
name|getDeferredAcknowledgements
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|das
condition|)
block|{
name|count
operator|+=
name|das
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Number of Deferred Acknowledgements"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|int
name|getDeferredAcknowledgementCount
parameter_list|(
name|String
name|sid
parameter_list|)
block|{
name|DestinationSequence
name|ds
init|=
name|getDestinationSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ds
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
return|return
name|ds
operator|.
name|getDeferredAcknowledgements
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Source Sequence Acknowledged Range"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|Long
index|[]
name|getSourceSequenceAcknowledgedRange
parameter_list|(
name|String
name|sid
parameter_list|)
block|{
name|SourceSequence
name|ss
init|=
name|getSourceSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ss
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcknowledgementRange
name|r
range|:
name|ss
operator|.
name|getAcknowledgement
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|r
operator|.
name|getLower
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|r
operator|.
name|getUpper
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|Long
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Destination Sequence Acknowledged Range"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|Long
index|[]
name|getDestinationSequenceAcknowledgedRange
parameter_list|(
name|String
name|sid
parameter_list|)
block|{
name|DestinationSequence
name|ds
init|=
name|getDestinationSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ds
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcknowledgementRange
name|r
range|:
name|ds
operator|.
name|getAcknowledgment
argument_list|()
operator|.
name|getAcknowledgementRange
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|r
operator|.
name|getLower
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|r
operator|.
name|getUpper
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|Long
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Retransmission Status"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|,
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"messageNumber"
argument_list|,
name|description
operator|=
literal|"The message number"
argument_list|)
block|}
argument_list|)
specifier|public
name|CompositeData
name|getRetransmissionStatus
parameter_list|(
name|String
name|sid
parameter_list|,
name|long
name|num
parameter_list|)
throws|throws
name|JMException
block|{
name|SourceSequence
name|ss
init|=
name|getSourceSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ss
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
name|RetransmissionQueue
name|rq
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRetransmissionQueue
argument_list|()
decl_stmt|;
name|RetryStatus
name|rs
init|=
name|rq
operator|.
name|getRetransmissionStatus
argument_list|(
name|ss
argument_list|,
name|num
argument_list|)
decl_stmt|;
return|return
name|getRetryStatusProperties
argument_list|(
name|num
argument_list|,
name|rs
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Retransmission Statuses"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|CompositeData
index|[]
name|getRetransmissionStatuses
parameter_list|(
name|String
name|sid
parameter_list|)
throws|throws
name|JMException
block|{
name|SourceSequence
name|ss
init|=
name|getSourceSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ss
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
name|RetransmissionQueue
name|rq
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRetransmissionQueue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|RetryStatus
argument_list|>
name|rsmap
init|=
name|rq
operator|.
name|getRetransmissionStatuses
argument_list|(
name|ss
argument_list|)
decl_stmt|;
name|CompositeData
index|[]
name|rsps
init|=
operator|new
name|CompositeData
index|[
name|rsmap
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|RetryStatus
argument_list|>
name|rs
range|:
name|rsmap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|rsps
index|[
name|i
operator|++
index|]
operator|=
name|getRetryStatusProperties
argument_list|(
name|rs
operator|.
name|getKey
argument_list|()
argument_list|,
name|rs
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rsps
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Redelivery Status"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|,
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"messageNumber"
argument_list|,
name|description
operator|=
literal|"The message number"
argument_list|)
block|}
argument_list|)
specifier|public
name|CompositeData
name|getRedeliveryStatus
parameter_list|(
name|String
name|sid
parameter_list|,
name|long
name|num
parameter_list|)
throws|throws
name|JMException
block|{
name|DestinationSequence
name|ds
init|=
name|getDestinationSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ds
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
name|RedeliveryQueue
name|rq
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRedeliveryQueue
argument_list|()
decl_stmt|;
name|RetryStatus
name|rs
init|=
name|rq
operator|.
name|getRedeliveryStatus
argument_list|(
name|ds
argument_list|,
name|num
argument_list|)
decl_stmt|;
return|return
name|getRetryStatusProperties
argument_list|(
name|num
argument_list|,
name|rs
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Redelivery Statuses"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|CompositeData
index|[]
name|getRedeliveryStatuses
parameter_list|(
name|String
name|sid
parameter_list|)
throws|throws
name|JMException
block|{
name|DestinationSequence
name|ds
init|=
name|getDestinationSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ds
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
name|RedeliveryQueue
name|rq
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRedeliveryQueue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|RetryStatus
argument_list|>
name|rsmap
init|=
name|rq
operator|.
name|getRedeliveryStatuses
argument_list|(
name|ds
argument_list|)
decl_stmt|;
name|CompositeData
index|[]
name|rsps
init|=
operator|new
name|CompositeData
index|[
name|rsmap
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|RetryStatus
argument_list|>
name|rs
range|:
name|rsmap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|rsps
index|[
name|i
operator|++
index|]
operator|=
name|getRetryStatusProperties
argument_list|(
name|rs
operator|.
name|getKey
argument_list|()
argument_list|,
name|rs
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rsps
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"List of UnDelivered Message Numbers"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|Long
index|[]
name|getUnDeliveredMessageIdentifiers
parameter_list|(
name|String
name|sid
parameter_list|)
block|{
name|RedeliveryQueue
name|rq
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRedeliveryQueue
argument_list|()
decl_stmt|;
name|DestinationSequence
name|ds
init|=
name|getDestinationSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ds
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|numbers
init|=
name|rq
operator|.
name|getUndeliveredMessageNumbers
argument_list|(
name|ds
argument_list|)
decl_stmt|;
return|return
name|numbers
operator|.
name|toArray
argument_list|(
operator|new
name|Long
index|[
name|numbers
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"List of Source Sequence IDs"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"expired"
argument_list|,
name|description
operator|=
literal|"The expired sequences included"
argument_list|)
block|}
argument_list|)
specifier|public
name|String
index|[]
name|getSourceSequenceIds
parameter_list|(
name|boolean
name|expired
parameter_list|)
block|{
name|Source
name|source
init|=
name|endpoint
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SourceSequence
name|ss
range|:
name|source
operator|.
name|getAllSequences
argument_list|()
control|)
block|{
if|if
condition|(
name|expired
operator|||
operator|!
name|ss
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|ss
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"List of Destination Sequence IDs"
argument_list|)
specifier|public
name|String
index|[]
name|getDestinationSequenceIds
parameter_list|()
block|{
name|Destination
name|destination
init|=
name|endpoint
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DestinationSequence
name|ds
range|:
name|destination
operator|.
name|getAllSequences
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|ds
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Suspend Retransmission Queue"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|void
name|suspendSourceQueue
parameter_list|(
name|String
name|sid
parameter_list|)
throws|throws
name|JMException
block|{
name|SourceSequence
name|ss
init|=
name|getSourceSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ss
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
name|RetransmissionQueue
name|rq
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRetransmissionQueue
argument_list|()
decl_stmt|;
name|rq
operator|.
name|suspend
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Resume Retransmission Queue"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|void
name|resumeSourceQueue
parameter_list|(
name|String
name|sid
parameter_list|)
throws|throws
name|JMException
block|{
name|SourceSequence
name|ss
init|=
name|getSourceSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ss
condition|)
block|{
throw|throw
operator|new
name|JMException
argument_list|(
literal|"no source sequence"
argument_list|)
throw|;
block|}
name|RetransmissionQueue
name|rq
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRetransmissionQueue
argument_list|()
decl_stmt|;
name|rq
operator|.
name|resume
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Suspend Redelivery Queue"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|void
name|suspendDestinationQueue
parameter_list|(
name|String
name|sid
parameter_list|)
throws|throws
name|JMException
block|{
name|DestinationSequence
name|ds
init|=
name|getDestinationSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ds
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
name|RedeliveryQueue
name|rq
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRedeliveryQueue
argument_list|()
decl_stmt|;
name|rq
operator|.
name|suspend
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Resume Redelivery Queue"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|void
name|resumeDestinationQueue
parameter_list|(
name|String
name|sid
parameter_list|)
throws|throws
name|JMException
block|{
name|DestinationSequence
name|ds
init|=
name|getDestinationSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ds
condition|)
block|{
throw|throw
operator|new
name|JMException
argument_list|(
literal|"no source sequence"
argument_list|)
throw|;
block|}
name|RedeliveryQueue
name|rq
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRedeliveryQueue
argument_list|()
decl_stmt|;
name|rq
operator|.
name|resume
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Current Source Sequence Properties"
argument_list|)
specifier|public
name|CompositeData
name|getCurrentSourceSequence
parameter_list|()
throws|throws
name|JMException
block|{
name|Source
name|source
init|=
name|endpoint
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|SourceSequence
name|ss
init|=
name|source
operator|.
name|getCurrent
argument_list|()
decl_stmt|;
return|return
name|getSourceSequenceProperties
argument_list|(
name|ss
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Current Source Sequence Identifier"
argument_list|)
specifier|public
name|String
name|getCurrentSourceSequenceId
parameter_list|()
throws|throws
name|JMException
block|{
name|Source
name|source
init|=
name|endpoint
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|SourceSequence
name|ss
init|=
name|source
operator|.
name|getCurrent
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ss
condition|)
block|{
throw|throw
operator|new
name|JMException
argument_list|(
literal|"no source sequence"
argument_list|)
throw|;
block|}
return|return
name|ss
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Source Sequence Properties"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|CompositeData
name|getSourceSequence
parameter_list|(
name|String
name|sid
parameter_list|)
throws|throws
name|JMException
block|{
name|SourceSequence
name|ss
init|=
name|getSourceSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
return|return
name|getSourceSequenceProperties
argument_list|(
name|ss
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Source Sequences Properties"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"expired"
argument_list|,
name|description
operator|=
literal|"The expired sequences included"
argument_list|)
block|}
argument_list|)
specifier|public
name|CompositeData
index|[]
name|getSourceSequences
parameter_list|(
name|boolean
name|expired
parameter_list|)
throws|throws
name|JMException
block|{
name|List
argument_list|<
name|CompositeData
argument_list|>
name|sps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Source
name|source
init|=
name|endpoint
operator|.
name|getSource
argument_list|()
decl_stmt|;
for|for
control|(
name|SourceSequence
name|ss
range|:
name|source
operator|.
name|getAllSequences
argument_list|()
control|)
block|{
if|if
condition|(
name|expired
operator|||
operator|!
name|ss
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|sps
operator|.
name|add
argument_list|(
name|getSourceSequenceProperties
argument_list|(
name|ss
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sps
operator|.
name|toArray
argument_list|(
operator|new
name|CompositeData
index|[
name|sps
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Destination Sequence Properties"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The destination identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|CompositeData
name|getDestinationSequence
parameter_list|(
name|String
name|sid
parameter_list|)
throws|throws
name|JMException
block|{
name|DestinationSequence
name|ds
init|=
name|getDestinationSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
return|return
name|getDestinationSequenceProperties
argument_list|(
name|ds
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Destination Sequences Properties"
argument_list|)
specifier|public
name|CompositeData
index|[]
name|getDestinationSequences
parameter_list|()
throws|throws
name|JMException
block|{
name|List
argument_list|<
name|CompositeData
argument_list|>
name|sps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Destination
name|destination
init|=
name|endpoint
operator|.
name|getDestination
argument_list|()
decl_stmt|;
for|for
control|(
name|DestinationSequence
name|ds
range|:
name|destination
operator|.
name|getAllSequences
argument_list|()
control|)
block|{
name|sps
operator|.
name|add
argument_list|(
name|getDestinationSequenceProperties
argument_list|(
name|ds
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sps
operator|.
name|toArray
argument_list|(
operator|new
name|CompositeData
index|[
name|sps
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|SourceSequence
name|getSourceSeq
parameter_list|(
name|String
name|sid
parameter_list|)
block|{
name|Source
name|source
init|=
name|endpoint
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Identifier
name|identifier
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|setValue
argument_list|(
name|sid
argument_list|)
expr_stmt|;
return|return
name|source
operator|.
name|getSequence
argument_list|(
name|identifier
argument_list|)
return|;
block|}
specifier|private
name|DestinationSequence
name|getDestinationSeq
parameter_list|(
name|String
name|sid
parameter_list|)
block|{
name|Destination
name|destination
init|=
name|endpoint
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|Identifier
name|identifier
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|setValue
argument_list|(
name|sid
argument_list|)
expr_stmt|;
return|return
name|destination
operator|.
name|getSequence
argument_list|(
name|identifier
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Close Source Sequence"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|void
name|closeSourceSequence
parameter_list|(
name|String
name|sid
parameter_list|)
throws|throws
name|JMException
block|{
name|SourceSequence
name|ss
init|=
name|getSourceSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ss
condition|)
block|{
throw|throw
operator|new
name|JMException
argument_list|(
literal|"no source sequence"
argument_list|)
throw|;
block|}
name|RetransmissionQueue
name|rq
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRetransmissionQueue
argument_list|()
decl_stmt|;
name|rq
operator|.
name|stop
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|Proxy
name|proxy
init|=
name|endpoint
operator|.
name|getProxy
argument_list|()
decl_stmt|;
try|try
block|{
name|proxy
operator|.
name|lastMessage
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RMException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|JMException
argument_list|(
literal|"Error closing sequence: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Terminate Source Sequence"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|void
name|terminateSourceSequence
parameter_list|(
name|String
name|sid
parameter_list|)
throws|throws
name|JMException
block|{
name|SourceSequence
name|ss
init|=
name|getSourceSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ss
condition|)
block|{
throw|throw
operator|new
name|JMException
argument_list|(
literal|"no source sequence"
argument_list|)
throw|;
block|}
name|Proxy
name|proxy
init|=
name|endpoint
operator|.
name|getProxy
argument_list|()
decl_stmt|;
try|try
block|{
name|proxy
operator|.
name|terminate
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|ss
operator|.
name|getSource
argument_list|()
operator|.
name|removeSequence
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RMException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMException
argument_list|(
literal|"Error terminating sequence: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Terminate Destination Sequence"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|void
name|terminateDestinationSequence
parameter_list|(
name|String
name|sid
parameter_list|)
throws|throws
name|JMException
block|{
name|DestinationSequence
name|ds
init|=
name|getDestinationSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ds
condition|)
block|{
throw|throw
operator|new
name|JMException
argument_list|(
literal|"no destination sequence"
argument_list|)
throw|;
block|}
name|Proxy
name|proxy
init|=
name|endpoint
operator|.
name|getProxy
argument_list|()
decl_stmt|;
try|try
block|{
name|proxy
operator|.
name|terminate
argument_list|(
name|ds
argument_list|)
expr_stmt|;
name|ds
operator|.
name|getDestination
argument_list|()
operator|.
name|removeSequence
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RMException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMException
argument_list|(
literal|"Error terminating sequence: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Remove Source Sequence"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The destination identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|void
name|removeSourceSequence
parameter_list|(
name|String
name|sid
parameter_list|)
throws|throws
name|JMException
block|{
name|SourceSequence
name|ss
init|=
name|getSourceSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ss
condition|)
block|{
throw|throw
operator|new
name|JMException
argument_list|(
literal|"no source sequence"
argument_list|)
throw|;
block|}
name|RetransmissionQueue
name|rq
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRetransmissionQueue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rq
operator|.
name|countUnacknowledged
argument_list|(
name|ss
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|JMException
argument_list|(
literal|"sequence not empty"
argument_list|)
throw|;
block|}
name|rq
operator|.
name|stop
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|ss
operator|.
name|getSource
argument_list|()
operator|.
name|removeSequence
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Remove Destination Sequence"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The destination identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|void
name|removeDestinationSequence
parameter_list|(
name|String
name|sid
parameter_list|)
throws|throws
name|JMException
block|{
name|DestinationSequence
name|ds
init|=
name|getDestinationSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ds
condition|)
block|{
throw|throw
operator|new
name|JMException
argument_list|(
literal|"no destination sequence"
argument_list|)
throw|;
block|}
name|RedeliveryQueue
name|rq
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRedeliveryQueue
argument_list|()
decl_stmt|;
if|if
condition|(
name|rq
operator|.
name|countUndelivered
argument_list|(
name|ds
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|JMException
argument_list|(
literal|"sequence not empty"
argument_list|)
throw|;
block|}
name|rq
operator|.
name|stop
argument_list|(
name|ds
argument_list|)
expr_stmt|;
name|ds
operator|.
name|getDestination
argument_list|()
operator|.
name|removeSequence
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Purge UnAcknowledged Messages"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|void
name|purgeUnAcknowledgedMessages
parameter_list|(
name|String
name|sid
parameter_list|)
block|{
name|SourceSequence
name|ss
init|=
name|getSourceSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ss
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
name|RetransmissionQueue
name|rq
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRetransmissionQueue
argument_list|()
decl_stmt|;
name|rq
operator|.
name|purgeAll
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Purge UnDelivered Messages"
argument_list|)
annotation|@
name|ManagedOperationParameters
argument_list|(
block|{
annotation|@
name|ManagedOperationParameter
argument_list|(
name|name
operator|=
literal|"sequenceId"
argument_list|,
name|description
operator|=
literal|"The sequence identifier"
argument_list|)
block|}
argument_list|)
specifier|public
name|void
name|purgeUnDeliverededMessages
parameter_list|(
name|String
name|sid
parameter_list|)
block|{
name|DestinationSequence
name|ds
init|=
name|getDestinationSeq
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ds
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
name|RedeliveryQueue
name|rq
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRedeliveryQueue
argument_list|()
decl_stmt|;
name|rq
operator|.
name|purgeAll
argument_list|(
name|ds
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getAddressValue
parameter_list|(
name|EndpointReferenceType
name|epr
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|epr
operator|&&
literal|null
operator|!=
name|epr
operator|.
name|getAddress
argument_list|()
condition|)
block|{
return|return
name|epr
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|CompositeData
name|getSourceSequenceProperties
parameter_list|(
name|SourceSequence
name|ss
parameter_list|)
throws|throws
name|JMException
block|{
if|if
condition|(
literal|null
operator|==
name|ss
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
name|RMManager
name|manager
init|=
name|endpoint
operator|.
name|getManager
argument_list|()
decl_stmt|;
name|Object
index|[]
name|ssv
init|=
operator|new
name|Object
index|[]
block|{
name|ss
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
block|,
name|ss
operator|.
name|getCurrentMessageNr
argument_list|()
block|,
name|ss
operator|.
name|getExpires
argument_list|()
block|,
name|ss
operator|.
name|isLastMessage
argument_list|()
block|,
name|manager
operator|.
name|getRetransmissionQueue
argument_list|()
operator|.
name|countUnacknowledged
argument_list|(
name|ss
argument_list|)
block|,
name|getAddressValue
argument_list|(
name|ss
operator|.
name|getTarget
argument_list|()
argument_list|)
block|,
name|ss
operator|.
name|getProtocol
argument_list|()
operator|.
name|getWSRMNamespace
argument_list|()
block|,
name|ss
operator|.
name|getProtocol
argument_list|()
operator|.
name|getWSANamespace
argument_list|()
block|}
decl_stmt|;
name|CompositeData
name|ssps
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|sourceSequenceType
argument_list|,
name|SOURCE_SEQUENCE_NAMES
argument_list|,
name|ssv
argument_list|)
decl_stmt|;
return|return
name|ssps
return|;
block|}
specifier|private
name|CompositeData
name|getDestinationSequenceProperties
parameter_list|(
name|DestinationSequence
name|ds
parameter_list|)
throws|throws
name|JMException
block|{
if|if
condition|(
literal|null
operator|==
name|ds
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no sequence"
argument_list|)
throw|;
block|}
name|Object
index|[]
name|dsv
init|=
operator|new
name|Object
index|[]
block|{
name|ds
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
block|,
name|ds
operator|.
name|getLastMessageNumber
argument_list|()
block|,
name|ds
operator|.
name|getCorrelationID
argument_list|()
block|,
name|getAddressValue
argument_list|(
name|ds
operator|.
name|getAcksTo
argument_list|()
argument_list|)
block|,
name|ds
operator|.
name|getProtocol
argument_list|()
operator|.
name|getWSRMNamespace
argument_list|()
block|,
name|ds
operator|.
name|getProtocol
argument_list|()
operator|.
name|getWSANamespace
argument_list|()
block|}
decl_stmt|;
name|CompositeData
name|dsps
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|destinationSequenceType
argument_list|,
name|DESTINATION_SEQUENCE_NAMES
argument_list|,
name|dsv
argument_list|)
decl_stmt|;
return|return
name|dsps
return|;
block|}
specifier|private
name|CompositeData
name|getRetryStatusProperties
parameter_list|(
name|long
name|num
parameter_list|,
name|RetryStatus
name|rs
parameter_list|)
throws|throws
name|JMException
block|{
name|CompositeData
name|rsps
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|rs
condition|)
block|{
name|Object
index|[]
name|rsv
init|=
operator|new
name|Object
index|[]
block|{
name|num
block|,
name|rs
operator|.
name|getRetries
argument_list|()
block|,
name|rs
operator|.
name|getMaxRetries
argument_list|()
block|,
name|rs
operator|.
name|getPrevious
argument_list|()
block|,
name|rs
operator|.
name|getNext
argument_list|()
block|,
name|rs
operator|.
name|getNextInterval
argument_list|()
block|,
name|rs
operator|.
name|getBackoff
argument_list|()
block|,
name|rs
operator|.
name|isPending
argument_list|()
block|,
name|rs
operator|.
name|isSuspended
argument_list|()
block|}
decl_stmt|;
name|rsps
operator|=
operator|new
name|CompositeDataSupport
argument_list|(
name|retryStatusType
argument_list|,
name|RETRY_STATUS_NAMES
argument_list|,
name|rsv
argument_list|)
expr_stmt|;
block|}
return|return
name|rsps
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Address Attribute"
argument_list|,
name|currencyTimeLimit
operator|=
literal|60
argument_list|)
specifier|public
name|String
name|getAddress
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getApplicationEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
return|;
block|}
comment|//Not relevant unless ws-rm is used for non-http protocols
comment|//    @ManagedAttribute(description = "TransportId Attribute", currencyTimeLimit = 60)
comment|//    public String getTransportId() {
comment|//        return endpoint.getApplicationEndpoint().getEndpointInfo().getTransportId();
comment|//    }
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Application Message Last Received"
argument_list|,
name|currencyTimeLimit
operator|=
literal|60
argument_list|)
specifier|public
name|Date
name|getLastApplicationMessage
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getLastApplicationMessage
argument_list|()
operator|==
literal|0L
condition|?
literal|null
else|:
operator|new
name|Date
argument_list|(
name|endpoint
operator|.
name|getLastApplicationMessage
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Protocol Message Last Received"
argument_list|,
name|currencyTimeLimit
operator|=
literal|60
argument_list|)
specifier|public
name|Date
name|getLastControlMessage
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getLastControlMessage
argument_list|()
operator|==
literal|0L
condition|?
literal|null
else|:
operator|new
name|Date
argument_list|(
name|endpoint
operator|.
name|getLastControlMessage
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of Outbound Queued Messages"
argument_list|,
name|currencyTimeLimit
operator|=
literal|10
argument_list|)
specifier|public
name|int
name|getQueuedMessagesOutboundCount
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRetransmissionQueue
argument_list|()
operator|.
name|countUnacknowledged
argument_list|()
return|;
block|}
comment|//    @ManagedAttribute(description = "Number of Outbound Completed Messages", currencyTimeLimit = 10)
comment|//    public int getCompletedMessagesOutboundCount() {
comment|//        return endpoint.getManager().countCompleted();
comment|//    }
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of Inbound Queued Messages"
argument_list|,
name|currencyTimeLimit
operator|=
literal|10
argument_list|)
specifier|public
name|int
name|getQueuedMessagesInboundCount
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getManager
argument_list|()
operator|.
name|getRedeliveryQueue
argument_list|()
operator|.
name|countUndelivered
argument_list|()
return|;
block|}
comment|//    @ManagedAttribute(description = "Number of Inbound Completed Messages", currencyTimeLimit = 10)
comment|//    public int getCompletedMessagesInboundCount() {
comment|//        return endpoint.getManager().countCompleted();
comment|//    }
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of Processing Source Sequences"
argument_list|,
name|currencyTimeLimit
operator|=
literal|10
argument_list|)
specifier|public
name|int
name|getProcessingSourceSequenceCount
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getProcessingSourceSequenceCount
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of Completed Source Sequences"
argument_list|,
name|currencyTimeLimit
operator|=
literal|10
argument_list|)
specifier|public
name|int
name|getCompletedSourceSequenceCount
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getCompletedSourceSequenceCount
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of Processing Destination Sequences"
argument_list|,
name|currencyTimeLimit
operator|=
literal|10
argument_list|)
specifier|public
name|int
name|getProcessingDestinationSequenceCount
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getProcessingDestinationSequenceCount
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Number of Completed Destination Sequences"
argument_list|,
name|currencyTimeLimit
operator|=
literal|10
argument_list|)
specifier|public
name|int
name|getCompletedDestinationSequenceCount
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getCompletedDestinationSequenceCount
argument_list|()
return|;
block|}
block|}
end_class

end_unit

