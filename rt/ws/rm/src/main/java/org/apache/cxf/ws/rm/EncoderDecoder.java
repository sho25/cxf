begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|AckRequestedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|CloseSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|CreateSequenceResponseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|CreateSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceAcknowledgement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|TerminateSequenceType
import|;
end_import

begin_comment
comment|/**  * Base class for converting WS-ReliableMessaging structures to and from XML. Subclasses provide version-specific  * encoding and decoding.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|EncoderDecoder
block|{
comment|/**      * Get context for JAXB marshalling/unmarshalling.      *       * @return context      * @throws JAXBException      */
specifier|protected
specifier|abstract
name|JAXBContext
name|getContext
parameter_list|()
throws|throws
name|JAXBException
function_decl|;
comment|/**      * Get the WS-ReliableMessaging namespace used by this encoder/decoder.      *       * @return URI      */
specifier|public
specifier|abstract
name|String
name|getWSRMNamespace
parameter_list|()
function_decl|;
comment|/**      * Get the WS-Addressing namespace used by this encoder/decoder.      *       * @return URI      */
specifier|public
specifier|abstract
name|String
name|getWSANamespace
parameter_list|()
function_decl|;
comment|/**      * Get the WS-ReliableMessaging constants used by this encoder/decoder.      *       * @return      */
specifier|public
specifier|abstract
name|RMConstants
name|getConstants
parameter_list|()
function_decl|;
comment|/**      * Get the class used for the CreateSequenceType.      *       * @return class      */
specifier|public
specifier|abstract
name|Class
argument_list|<
name|?
argument_list|>
name|getCreateSequenceType
parameter_list|()
function_decl|;
comment|/**      * Get the class used for the CreateSequenceResponseType.      *       * @return class      */
specifier|public
specifier|abstract
name|Class
argument_list|<
name|?
argument_list|>
name|getCreateSequenceResponseType
parameter_list|()
function_decl|;
comment|/**      * Get the class used for the TerminateSequenceType.      *       * @return class      */
specifier|public
specifier|abstract
name|Class
argument_list|<
name|?
argument_list|>
name|getTerminateSequenceType
parameter_list|()
function_decl|;
comment|/**      * Get the class used for the TerminateSequenceResponseType.      *       * @return class      */
specifier|public
specifier|abstract
name|Class
argument_list|<
name|?
argument_list|>
name|getTerminateSequenceResponseType
parameter_list|()
function_decl|;
comment|/**      * Builds an element containing WS-RM headers. This adds the appropriate WS-RM namespace declaration to the element,      * and then adds any WS-RM headers set in the supplied properties as child elements.      *       * @param rmps      * @param qname constructed element name      * @return element (<code>null</code> if none)      */
specifier|public
name|Element
name|buildHeaders
parameter_list|(
name|RMProperties
name|rmps
parameter_list|,
name|QName
name|qname
parameter_list|)
throws|throws
name|JAXBException
block|{
comment|// check if there's anything to insert
name|SequenceType
name|seq
init|=
name|rmps
operator|.
name|getSequence
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|SequenceAcknowledgement
argument_list|>
name|acks
init|=
name|rmps
operator|.
name|getAcks
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|AckRequestedType
argument_list|>
name|reqs
init|=
name|rmps
operator|.
name|getAcksRequested
argument_list|()
decl_stmt|;
if|if
condition|(
name|seq
operator|==
literal|null
operator|&&
name|acks
operator|==
literal|null
operator|&&
name|reqs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// create element with namespace declaration included
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|header
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|addNamespaceDecl
argument_list|(
name|header
argument_list|)
expr_stmt|;
comment|// build individual headers
name|Marshaller
name|marshaller
init|=
name|getContext
argument_list|()
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|setProperty
argument_list|(
name|Marshaller
operator|.
name|JAXB_FRAGMENT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|buildHeaders
argument_list|(
name|seq
argument_list|,
name|acks
argument_list|,
name|reqs
argument_list|,
name|rmps
operator|.
name|isLastMessage
argument_list|()
argument_list|,
name|header
argument_list|,
name|marshaller
argument_list|)
expr_stmt|;
return|return
name|header
return|;
block|}
comment|/**      * Add WS-RM namespace declaration to element.      *       * @param element      */
specifier|protected
name|void
name|addNamespaceDecl
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|Attr
name|attr
init|=
name|element
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createAttributeNS
argument_list|(
literal|"http://www.w3.org/2000/xmlns/"
argument_list|,
literal|"xmlns:"
operator|+
name|RMConstants
operator|.
name|NAMESPACE_PREFIX
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setValue
argument_list|(
name|getWSRMNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|element
operator|.
name|setAttributeNodeNS
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
comment|/**      * Builds an element containing a WS-RM Fault. This adds the appropriate WS-RM namespace declaration to      * the element, and then adds the Fault as a child element.      *       * @param sf      * @param qname constructed element name      * @return element      */
specifier|public
name|Element
name|buildHeaderFault
parameter_list|(
name|SequenceFault
name|sf
parameter_list|,
name|QName
name|qname
parameter_list|)
throws|throws
name|JAXBException
block|{
comment|// create element with namespace declaration included
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|Element
name|header
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|addNamespaceDecl
argument_list|(
name|header
argument_list|)
expr_stmt|;
comment|// insert the actual fault
name|Marshaller
name|marshaller
init|=
name|getContext
argument_list|()
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|setProperty
argument_list|(
name|Marshaller
operator|.
name|JAXB_FRAGMENT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|buildHeaderFault
argument_list|(
name|sf
argument_list|,
name|header
argument_list|,
name|marshaller
argument_list|)
expr_stmt|;
return|return
name|header
return|;
block|}
comment|/**      * Build all required headers, using the correct protocol variation.      *       * @param seq      * @param acks      * @param reqs      * @param last      * @param header      * @param marshaller      * @throws JAXBException      */
specifier|protected
specifier|abstract
name|void
name|buildHeaders
parameter_list|(
name|SequenceType
name|seq
parameter_list|,
name|Collection
argument_list|<
name|SequenceAcknowledgement
argument_list|>
name|acks
parameter_list|,
name|Collection
argument_list|<
name|AckRequestedType
argument_list|>
name|reqs
parameter_list|,
name|boolean
name|last
parameter_list|,
name|Element
name|header
parameter_list|,
name|Marshaller
name|marshaller
parameter_list|)
throws|throws
name|JAXBException
function_decl|;
comment|/**      * Build a header fault, using the correct protocol variation.      *       * @param sf      * @param header      * @param marshaller      * @throws JAXBException      */
specifier|protected
specifier|abstract
name|void
name|buildHeaderFault
parameter_list|(
name|SequenceFault
name|sf
parameter_list|,
name|Element
name|header
parameter_list|,
name|Marshaller
name|marshaller
parameter_list|)
throws|throws
name|JAXBException
function_decl|;
comment|/**      * Marshals a SequenceAcknowledgement to the appropriate external form.      *       * @param ack      * @return element      * @throws JAXBException      */
specifier|public
specifier|abstract
name|Element
name|encodeSequenceAcknowledgement
parameter_list|(
name|SequenceAcknowledgement
name|ack
parameter_list|)
throws|throws
name|JAXBException
function_decl|;
comment|/**      * Marshals an Identifier to the appropriate external form.      *       * @param id      * @return element      * @throws JAXBException      */
specifier|public
specifier|abstract
name|Element
name|encodeIdentifier
parameter_list|(
name|Identifier
name|id
parameter_list|)
throws|throws
name|JAXBException
function_decl|;
comment|/**      * Unmarshals a SequenceType, converting it if necessary to the internal form.      *       * @param elem      * @return      * @throws JAXBException      */
specifier|public
specifier|abstract
name|SequenceType
name|decodeSequenceType
parameter_list|(
name|Element
name|elem
parameter_list|)
throws|throws
name|JAXBException
function_decl|;
comment|/**      * Generates a CloseSequenceType if a SequenceType represents a last message state.      *       * @param elem      * @return CloseSequenceType if last message state, else<code>null</code>      * @throws JAXBException      */
specifier|public
specifier|abstract
name|CloseSequenceType
name|decodeSequenceTypeCloseSequence
parameter_list|(
name|Element
name|elem
parameter_list|)
throws|throws
name|JAXBException
function_decl|;
comment|/**      * Unmarshals a SequenceAcknowledgement, converting it if necessary to the internal form.      *       * @param elem      * @return      * @throws JAXBException      */
specifier|public
specifier|abstract
name|SequenceAcknowledgement
name|decodeSequenceAcknowledgement
parameter_list|(
name|Element
name|elem
parameter_list|)
throws|throws
name|JAXBException
function_decl|;
comment|/**      * Unmarshals a AckRequestedType, converting it if necessary to the internal form.      *       * @param elem      * @return      * @throws JAXBException      */
specifier|public
specifier|abstract
name|AckRequestedType
name|decodeAckRequestedType
parameter_list|(
name|Element
name|elem
parameter_list|)
throws|throws
name|JAXBException
function_decl|;
comment|/**      * Convert a CreateSequence message to the correct format for transmission.      *       * @param create      * @return converted      */
specifier|public
specifier|abstract
name|Object
name|convertToSend
parameter_list|(
name|CreateSequenceType
name|create
parameter_list|)
function_decl|;
comment|/**      * Convert a CreateSequenceResponse message to the correct format for transmission.      *       * @param create      * @return converted      */
specifier|public
specifier|abstract
name|Object
name|convertToSend
parameter_list|(
name|CreateSequenceResponseType
name|create
parameter_list|)
function_decl|;
comment|/**      * Convert a TerminateSequence message to the correct format for transmission.      *       * @param term      * @return converted      */
specifier|public
specifier|abstract
name|Object
name|convertToSend
parameter_list|(
name|TerminateSequenceType
name|term
parameter_list|)
function_decl|;
comment|/**      * Convert a received TerminateSequence message to internal form.      *       * @param term      * @return converted      */
specifier|public
specifier|abstract
name|TerminateSequenceType
name|convertReceivedTerminateSequence
parameter_list|(
name|Object
name|term
parameter_list|)
function_decl|;
comment|/**      * Convert a received CreateSequence message to internal form.      *       * @param create      * @return converted      */
specifier|public
specifier|abstract
name|CreateSequenceType
name|convertReceivedCreateSequence
parameter_list|(
name|Object
name|create
parameter_list|)
function_decl|;
comment|/**      * Convert a received CreateSequenceResponse message to internal form.      *       * @param create      * @return converted      */
specifier|public
specifier|abstract
name|CreateSequenceResponseType
name|convertReceivedCreateSequenceResponse
parameter_list|(
name|Object
name|create
parameter_list|)
function_decl|;
block|}
end_class

end_unit

