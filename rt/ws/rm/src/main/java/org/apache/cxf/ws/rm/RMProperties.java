begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_class
specifier|public
class|class
name|RMProperties
block|{
specifier|private
name|SequenceType
name|sequence
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|SequenceAcknowledgement
argument_list|>
name|acks
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|AckRequestedType
argument_list|>
name|acksRequested
decl_stmt|;
specifier|public
name|Collection
argument_list|<
name|SequenceAcknowledgement
argument_list|>
name|getAcks
parameter_list|()
block|{
return|return
name|acks
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|AckRequestedType
argument_list|>
name|getAcksRequested
parameter_list|()
block|{
return|return
name|acksRequested
return|;
block|}
specifier|public
name|SequenceType
name|getSequence
parameter_list|()
block|{
return|return
name|sequence
return|;
block|}
specifier|public
name|void
name|setAcks
parameter_list|(
name|Collection
argument_list|<
name|SequenceAcknowledgement
argument_list|>
name|a
parameter_list|)
block|{
synchronized|synchronized
init|(
name|a
init|)
block|{
name|acks
operator|=
name|a
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setAcksRequested
parameter_list|(
name|Collection
argument_list|<
name|AckRequestedType
argument_list|>
name|ar
parameter_list|)
block|{
synchronized|synchronized
init|(
name|ar
init|)
block|{
name|acksRequested
operator|=
name|ar
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setSequence
parameter_list|(
name|SequenceType
name|s
parameter_list|)
block|{
name|sequence
operator|=
name|s
expr_stmt|;
block|}
specifier|public
name|void
name|setSequence
parameter_list|(
name|SourceSequence
name|seq
parameter_list|)
block|{
name|SequenceType
name|s
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createSequenceType
argument_list|()
decl_stmt|;
name|s
operator|.
name|setIdentifier
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMessageNumber
argument_list|(
name|seq
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|seq
operator|.
name|isLastMessage
argument_list|()
condition|)
block|{
name|s
operator|.
name|setLastMessage
argument_list|(
operator|new
name|SequenceType
operator|.
name|LastMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setSequence
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAck
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|acks
condition|)
block|{
name|acks
operator|=
operator|new
name|ArrayList
argument_list|<
name|SequenceAcknowledgement
argument_list|>
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|acks
init|)
block|{
name|SequenceAcknowledgement
name|ack
init|=
name|seq
operator|.
name|getAcknowledgment
argument_list|()
decl_stmt|;
name|acks
operator|.
name|add
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|seq
operator|.
name|acknowledgmentSent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

