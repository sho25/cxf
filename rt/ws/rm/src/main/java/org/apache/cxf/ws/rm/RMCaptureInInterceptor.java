begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|StaxInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|transform
operator|.
name|OutTransformWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingProperties
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|RMCaptureInInterceptor
extends|extends
name|AbstractRMInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getLogger
argument_list|(
name|RMCaptureInInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|RMCaptureInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|POST_STREAM
argument_list|)
expr_stmt|;
name|addAfter
argument_list|(
name|StaxInInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|handle
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
comment|// all messages are initially captured as they cannot be distinguished at this phase
comment|// Non application messages temp files are released (cos.releaseTempFileHold()) in RMInInterceptor
if|if
condition|(
operator|!
name|isGET
argument_list|(
name|message
argument_list|)
operator|&&
operator|!
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|getContextualProperty
argument_list|(
name|Message
operator|.
name|ROBUST_ONEWAY
argument_list|)
argument_list|)
operator|&&
operator|(
name|getManager
argument_list|()
operator|.
name|getStore
argument_list|()
operator|!=
literal|null
operator|||
operator|(
name|getManager
argument_list|()
operator|.
name|getDestinationPolicy
argument_list|()
operator|!=
literal|null
operator|&&
name|getManager
argument_list|()
operator|.
name|getDestinationPolicy
argument_list|()
operator|.
name|getRetryPolicy
argument_list|()
operator|!=
literal|null
operator|)
operator|)
condition|)
block|{
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RMCaptureInEnd
argument_list|()
argument_list|)
expr_stmt|;
name|XMLStreamReader
name|reader
init|=
name|message
operator|.
name|getContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|reader
condition|)
block|{
name|CachedOutputStream
name|saved
init|=
operator|new
name|CachedOutputStream
argument_list|()
decl_stmt|;
comment|// REVISIT check factory for READER
try|try
block|{
name|StaxUtils
operator|.
name|copy
argument_list|(
name|reader
argument_list|,
name|saved
argument_list|)
expr_stmt|;
name|saved
operator|.
name|flush
argument_list|()
expr_stmt|;
name|saved
operator|.
name|holdTempFile
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Create new XMLStreamReader"
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|saved
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
comment|// keep References to clean-up tmp files in RMDeliveryInterceptor
name|setCloseable
argument_list|(
name|message
argument_list|,
name|saved
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|XMLStreamReader
name|newReader
init|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|StaxUtils
operator|.
name|configureReader
argument_list|(
name|reader
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|,
name|newReader
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Capturing the original RM message"
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|RMMessageConstants
operator|.
name|SAVED_CONTENT
argument_list|,
name|saved
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"No message found for redeliver"
argument_list|,
name|LOG
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|RMException
name|ex
init|=
operator|new
name|RMException
argument_list|(
name|msg
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|boolean
name|isApplicationMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|AddressingProperties
name|maps
init|=
name|RMContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|maps
operator|&&
literal|null
operator|!=
name|maps
operator|.
name|getAction
argument_list|()
condition|)
block|{
return|return
operator|!
name|RMContextUtils
operator|.
name|isRMProtocolMessage
argument_list|(
name|maps
operator|.
name|getAction
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|setCloseable
parameter_list|(
name|Message
name|message
parameter_list|,
name|CachedOutputStream
name|cos
parameter_list|,
name|InputStream
name|is
parameter_list|)
block|{
name|message
operator|.
name|put
argument_list|(
literal|"org.apache.cxf.ws.rm.content.closeable"
argument_list|,
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
try|try
block|{
name|cos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * RMCaptureInEnd interceptor is used to switch saved_content, in case WSS is activated.      */
specifier|private
class|class
name|RMCaptureInEnd
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
name|RMCaptureInEnd
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_LOGICAL
argument_list|)
expr_stmt|;
name|addBefore
argument_list|(
name|RMInInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleFault
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
comment|// in case of a SequenceFault SAVED_CONTENT must be released
name|Exception
name|ex
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|SequenceFault
condition|)
block|{
name|Closeable
name|closable
init|=
operator|(
name|Closeable
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.ws.rm.content.closeable"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|closable
condition|)
block|{
try|try
block|{
name|closable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
name|CachedOutputStream
name|saved
init|=
operator|(
name|CachedOutputStream
operator|)
name|message
operator|.
name|get
argument_list|(
name|RMMessageConstants
operator|.
name|SAVED_CONTENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|saved
operator|!=
literal|null
condition|)
block|{
name|saved
operator|.
name|releaseTempFileHold
argument_list|()
expr_stmt|;
try|try
block|{
name|saved
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|LOG
operator|.
name|entering
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"handleMessage"
argument_list|)
expr_stmt|;
comment|// Capturing the soap envelope. In case of WSS was activated, decrypted envelope is captured.
if|if
condition|(
operator|!
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|getContextualProperty
argument_list|(
name|Message
operator|.
name|ROBUST_ONEWAY
argument_list|)
argument_list|)
operator|&&
name|isApplicationMessage
argument_list|(
name|message
argument_list|)
operator|&&
operator|(
name|getManager
argument_list|()
operator|.
name|getStore
argument_list|()
operator|!=
literal|null
operator|||
operator|(
name|getManager
argument_list|()
operator|.
name|getDestinationPolicy
argument_list|()
operator|!=
literal|null
operator|&&
name|getManager
argument_list|()
operator|.
name|getDestinationPolicy
argument_list|()
operator|.
name|getRetryPolicy
argument_list|()
operator|!=
literal|null
operator|)
operator|)
condition|)
block|{
name|CachedOutputStream
name|saved
init|=
operator|new
name|CachedOutputStream
argument_list|()
decl_stmt|;
name|SOAPMessage
name|soapMessage
init|=
name|message
operator|.
name|getContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|soapMessage
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
name|envelope
init|=
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
name|envelope
argument_list|,
name|saved
argument_list|)
expr_stmt|;
name|saved
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// create a new source part from cos
name|InputStream
name|is
init|=
name|saved
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
comment|// close old saved content
name|closeOldSavedContent
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// keep References to clean-up tmp files in RMDeliveryInterceptor
name|setCloseable
argument_list|(
name|message
argument_list|,
name|saved
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|StreamSource
name|source
init|=
operator|new
name|StreamSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|setContent
argument_list|(
name|source
argument_list|)
expr_stmt|;
comment|// when WSS was activated, saved content still contains soap headers to be removed
name|message
operator|.
name|put
argument_list|(
name|RMMessageConstants
operator|.
name|SAVED_CONTENT
argument_list|,
name|removeUnnecessarySoapHeaders
argument_list|(
name|saved
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPException
decl||
name|IOException
decl||
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|closeOldSavedContent
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|CachedOutputStream
name|saved
init|=
operator|(
name|CachedOutputStream
operator|)
name|message
operator|.
name|get
argument_list|(
name|RMMessageConstants
operator|.
name|SAVED_CONTENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|saved
operator|!=
literal|null
condition|)
block|{
name|saved
operator|.
name|releaseTempFileHold
argument_list|()
expr_stmt|;
try|try
block|{
name|saved
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|Closeable
name|closable
init|=
operator|(
name|Closeable
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.ws.rm.content.closeable"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|closable
condition|)
block|{
try|try
block|{
name|closable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
specifier|private
name|CachedOutputStream
name|removeUnnecessarySoapHeaders
parameter_list|(
name|CachedOutputStream
name|saved
parameter_list|)
block|{
name|CachedOutputStream
name|newSaved
init|=
operator|new
name|CachedOutputStream
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|saved
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|XMLStreamWriter
name|capture
init|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|newSaved
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"{http://schemas.xmlsoap.org/ws/2005/02/rm}Sequence"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"{http://schemas.xmlsoap.org/ws/2005/02/rm}SequenceAcknowledgement"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"{http://docs.oasis-open.org/ws-rx/wsrm/200702}Sequence"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"{http://docs.oasis-open.org/ws-rx/wsrm/200702}SequenceAcknowledgement"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd}Security"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// attributes to be removed
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|amap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|amap
operator|.
name|put
argument_list|(
literal|"{http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd}Id"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|capture
operator|=
operator|new
name|OutTransformWriter
argument_list|(
name|capture
argument_list|,
name|map
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
name|amap
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|is
argument_list|)
argument_list|,
name|capture
argument_list|)
expr_stmt|;
name|capture
operator|.
name|flush
argument_list|()
expr_stmt|;
name|capture
operator|.
name|close
argument_list|()
expr_stmt|;
name|newSaved
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// hold temp file, otherwise it will be deleted in case msg was written to RMTxStore
comment|// or resend was executed
name|newSaved
operator|.
name|holdTempFile
argument_list|()
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|is
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
return|return
name|newSaved
return|;
block|}
block|}
block|}
end_class

end_unit

