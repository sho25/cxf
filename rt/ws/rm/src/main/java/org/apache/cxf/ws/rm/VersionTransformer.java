begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|AcceptType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|AckRequestedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|CreateSequenceResponseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|CreateSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Expires
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|OfferType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceAcknowledgement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|TerminateSequenceType
import|;
end_import

begin_comment
comment|// Importation convention: only the 200702 namespace versions of classes (the standard version used throughout
end_comment

begin_comment
comment|// the code) are imported directly. All other versions are fully qualified.
end_comment

begin_comment
comment|/**  * This class is responsible for transforming between the native WS-ReliableMessaging schema version  * (currently http://docs.oasis-open.org/ws-rx/wsrm/200702) and exposed version (which may be the 200702  * namespace, the http://schemas.xmlsoap.org/ws/2005/02/rm namespace using the old  * http://schemas.xmlsoap.org/ws/2004/08/addressing WS-Addressing namespace, or 2005/02 namespace with the  * newer http://www.w3.org/2005/08/addressing WS-Addressing namespace).  *<p>  * The native version is that used throughout the stack, where the WS-RM types are represented via the JAXB  * generated types.  *<p>  * The exposed version is that used when the WS-RM types are externalized, i.e. are encoded in the headers of  * outgoing messages. For outgoing requests, the exposed version is  determined from configuration. For  * outgoing responses, the exposed version is determined by the exposed version of the corresponding request.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|VersionTransformer
block|{
comment|/**      * Constructor.      */
specifier|private
name|VersionTransformer
parameter_list|()
block|{     }
comment|/**      * Check if a namespace URI represents a supported version of WS-ReliableMessaging.      *       * @param uri      * @return<code>true</code> if supported,<code>false</code> if not      */
specifier|public
specifier|static
name|boolean
name|isSupported
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|RM10Constants
operator|.
name|NAMESPACE_URI
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|||
name|RM11Constants
operator|.
name|NAMESPACE_URI
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
return|;
block|}
comment|/**      * Get the encoder/decoder for a supported version of WS-ReliableMessaging and WS-Addressing.      *       * @param wsrm WS-RM namespace URI      * @param wsa WS-A namespace URI      * @return instance (<code>null</code> if not a supported version)      */
specifier|public
specifier|static
name|EncoderDecoder
name|getEncoderDecoder
parameter_list|(
name|String
name|wsrm
parameter_list|,
name|String
name|wsa
parameter_list|)
block|{
if|if
condition|(
name|EncoderDecoder10Impl
operator|.
name|INSTANCE
operator|.
name|getWSRMNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|wsrm
argument_list|)
operator|&&
name|EncoderDecoder10Impl
operator|.
name|INSTANCE
operator|.
name|getWSANamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|wsa
argument_list|)
condition|)
block|{
return|return
name|EncoderDecoder10Impl
operator|.
name|INSTANCE
return|;
block|}
elseif|else
if|if
condition|(
name|EncoderDecoder10AImpl
operator|.
name|INSTANCE
operator|.
name|getWSRMNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|wsrm
argument_list|)
operator|&&
name|EncoderDecoder10AImpl
operator|.
name|INSTANCE
operator|.
name|getWSANamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|wsa
argument_list|)
condition|)
block|{
return|return
name|EncoderDecoder10AImpl
operator|.
name|INSTANCE
return|;
block|}
elseif|else
if|if
condition|(
name|EncoderDecoder11Impl
operator|.
name|INSTANCE
operator|.
name|getWSRMNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|wsrm
argument_list|)
operator|&&
name|EncoderDecoder11Impl
operator|.
name|INSTANCE
operator|.
name|getWSANamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|wsa
argument_list|)
condition|)
block|{
return|return
name|EncoderDecoder11Impl
operator|.
name|INSTANCE
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Convert CreateSequenceType to 200502 version with 200508 WS-Addressing namespace.      *       * @param internal (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|CreateSequenceType
name|convert200502wsa15
parameter_list|(
name|CreateSequenceType
name|internal
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|CreateSequenceType
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502WSA200508Factory
argument_list|()
operator|.
name|createCreateSequenceType
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setAcksTo
argument_list|(
name|internal
operator|.
name|getAcksTo
argument_list|()
argument_list|)
expr_stmt|;
name|exposed
operator|.
name|setExpires
argument_list|(
name|convert200502wsa15
argument_list|(
name|internal
operator|.
name|getExpires
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exposed
operator|.
name|setOffer
argument_list|(
name|convert200502wsa15
argument_list|(
name|internal
operator|.
name|getOffer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert CreateSequenceType to 200502 version with 200408 WS-Addressing namespace.      *       * @param internal (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|CreateSequenceType
name|convert200502
parameter_list|(
name|CreateSequenceType
name|internal
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|CreateSequenceType
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502Factory
argument_list|()
operator|.
name|createCreateSequenceType
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setAcksTo
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convert
argument_list|(
name|internal
operator|.
name|getAcksTo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exposed
operator|.
name|setExpires
argument_list|(
name|convert200502
argument_list|(
name|internal
operator|.
name|getExpires
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exposed
operator|.
name|setOffer
argument_list|(
name|convert200502
argument_list|(
name|internal
operator|.
name|getOffer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert wsrm:Expires to 200502 version with 200508 WS-Addressing namespace.      *       * @param internal (may be<code>null</code>)      * @return converted (<code>null</code> if internal is<code>null</code>)      */
specifier|private
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|Expires
name|convert200502wsa15
parameter_list|(
name|Expires
name|internal
parameter_list|)
block|{
if|if
condition|(
name|internal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|Expires
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502WSA200508Factory
argument_list|()
operator|.
name|createExpires
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setValue
argument_list|(
name|internal
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert wsrm:Expires to 200502 version with 200408 WS-Addressing namespace.      *       * @param internal (may be<code>null</code>)      * @return converted (<code>null</code> if internal is<code>null</code>)      */
specifier|private
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|Expires
name|convert200502
parameter_list|(
name|Expires
name|internal
parameter_list|)
block|{
if|if
condition|(
name|internal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|Expires
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502Factory
argument_list|()
operator|.
name|createExpires
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setValue
argument_list|(
name|internal
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert wsrm:Identifier to 200502 version with 200508 WS-Addressing namespace.      *       * @param internal (may be<code>null</code>)      * @return converted (<code>null</code> if internal is<code>null</code>)      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|Identifier
name|convert200502wsa15
parameter_list|(
name|Identifier
name|internal
parameter_list|)
block|{
if|if
condition|(
name|internal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|Identifier
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502WSA200508Factory
argument_list|()
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setValue
argument_list|(
name|internal
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert wsrm:Identifier to 200502 version with 200408 WS-Addressing namespace.      *       * @param internal (may be<code>null</code>)      * @return converted (<code>null</code> if internal is<code>null</code>)      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|Identifier
name|convert200502
parameter_list|(
name|Identifier
name|internal
parameter_list|)
block|{
if|if
condition|(
name|internal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|Identifier
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502Factory
argument_list|()
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setValue
argument_list|(
name|internal
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert 200502 wsrm:Identifier with 200508 WS-Addressing namespace to internal form.      *       * @param exposed (may be<code>null</code>)      * @return converted (<code>null</code> if exposed is<code>null</code>)      */
specifier|public
specifier|static
name|Identifier
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|Identifier
name|exposed
parameter_list|)
block|{
if|if
condition|(
name|exposed
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Identifier
name|internal
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setValue
argument_list|(
name|exposed
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 wsrm:Identifier with 200408 WS-Addressing namespace to internal form.      *       * @param exposed (may be<code>null</code>)      * @return converted (<code>null</code> if exposed is<code>null</code>)      */
specifier|public
specifier|static
name|Identifier
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|Identifier
name|exposed
parameter_list|)
block|{
if|if
condition|(
name|exposed
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Identifier
name|internal
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setValue
argument_list|(
name|exposed
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 wsrm:CreateSequenceType with 200508 WS-Addressing namespace to internal form.      *       * @param exposed (may be<code>null</code>)      * @return converted (<code>null</code> if exposed is<code>null</code>)      */
specifier|public
specifier|static
name|CreateSequenceType
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|CreateSequenceType
name|exposed
parameter_list|)
block|{
if|if
condition|(
name|exposed
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|CreateSequenceType
name|internal
init|=
operator|new
name|CreateSequenceType
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setAcksTo
argument_list|(
name|exposed
operator|.
name|getAcksTo
argument_list|()
argument_list|)
expr_stmt|;
name|internal
operator|.
name|setExpires
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getExpires
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|internal
operator|.
name|setOffer
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getOffer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|,
name|internal
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 wsrm:CreateSequenceType with 200408 WS-Addressing namespace to internal form.      *       * @param exposed (may be<code>null</code>)      * @return converted (<code>null</code> if exposed is<code>null</code>)      */
specifier|public
specifier|static
name|CreateSequenceType
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|CreateSequenceType
name|exposed
parameter_list|)
block|{
if|if
condition|(
name|exposed
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|CreateSequenceType
name|internal
init|=
operator|new
name|CreateSequenceType
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setAcksTo
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convert
argument_list|(
name|exposed
operator|.
name|getAcksTo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|internal
operator|.
name|setExpires
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getExpires
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|internal
operator|.
name|setOffer
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getOffer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|,
name|internal
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 wsrm:CreateSequenceResponseType with 200508 WS-Addressing namespace to internal form.      *       * @param exposed (may be<code>null</code>)      * @return converted (<code>null</code> if exposed is<code>null</code>)      */
specifier|public
specifier|static
name|CreateSequenceResponseType
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|CreateSequenceResponseType
name|exposed
parameter_list|)
block|{
if|if
condition|(
name|exposed
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|CreateSequenceResponseType
name|internal
init|=
operator|new
name|CreateSequenceResponseType
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setAccept
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getAccept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|internal
operator|.
name|setExpires
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getExpires
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|internal
operator|.
name|setIdentifier
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|,
name|internal
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 wsrm:CreateSequenceResponseType with 200408 WS-Addressing namespace to internal form.      *       * @param exposed (may be<code>null</code>)      * @return converted (<code>null</code> if exposed is<code>null</code>)      */
specifier|public
specifier|static
name|CreateSequenceResponseType
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|CreateSequenceResponseType
name|exposed
parameter_list|)
block|{
if|if
condition|(
name|exposed
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|CreateSequenceResponseType
name|internal
init|=
operator|new
name|CreateSequenceResponseType
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setAccept
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getAccept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|internal
operator|.
name|setExpires
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getExpires
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|internal
operator|.
name|setIdentifier
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|,
name|internal
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert wsrm:Offer to 200502 version with 200508 WS-Addressing namespace.      *       * @param internal (may be<code>null</code>)      * @return converted (<code>null</code> if internal is<code>null</code>)      */
specifier|private
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|OfferType
name|convert200502wsa15
parameter_list|(
name|OfferType
name|internal
parameter_list|)
block|{
if|if
condition|(
name|internal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|OfferType
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502WSA200508Factory
argument_list|()
operator|.
name|createOfferType
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setExpires
argument_list|(
name|convert200502wsa15
argument_list|(
name|internal
operator|.
name|getExpires
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exposed
operator|.
name|setIdentifier
argument_list|(
name|convert200502wsa15
argument_list|(
name|internal
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert wsrm:Offer to 200502 version with 200408 WS-Addressing namespace.      *       * @param internal (may be<code>null</code>)      * @return converted (<code>null</code> if internal is<code>null</code>)      */
specifier|private
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|OfferType
name|convert200502
parameter_list|(
name|OfferType
name|internal
parameter_list|)
block|{
if|if
condition|(
name|internal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|OfferType
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502Factory
argument_list|()
operator|.
name|createOfferType
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setExpires
argument_list|(
name|convert200502
argument_list|(
name|internal
operator|.
name|getExpires
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exposed
operator|.
name|setIdentifier
argument_list|(
name|convert200502
argument_list|(
name|internal
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert wsrm:CreateSequenceResponseType to 200502 version with 200508 WS-Addressing namespace.      *       * @param internal (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|CreateSequenceResponseType
name|convert200502wsa15
parameter_list|(
name|CreateSequenceResponseType
name|internal
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|CreateSequenceResponseType
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502WSA200508Factory
argument_list|()
operator|.
name|createCreateSequenceResponseType
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setIdentifier
argument_list|(
name|convert200502wsa15
argument_list|(
name|internal
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exposed
operator|.
name|setExpires
argument_list|(
name|convert200502wsa15
argument_list|(
name|internal
operator|.
name|getExpires
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exposed
operator|.
name|setAccept
argument_list|(
name|convert200502wsa15
argument_list|(
name|internal
operator|.
name|getAccept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert wsrm:CreateSequenceResponseType to 200502 version with 200408 WS-Addressing namespace.      *       * @param internal (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|CreateSequenceResponseType
name|convert200502
parameter_list|(
name|CreateSequenceResponseType
name|internal
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|CreateSequenceResponseType
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502Factory
argument_list|()
operator|.
name|createCreateSequenceResponseType
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setIdentifier
argument_list|(
name|convert200502
argument_list|(
name|internal
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exposed
operator|.
name|setExpires
argument_list|(
name|convert200502
argument_list|(
name|internal
operator|.
name|getExpires
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exposed
operator|.
name|setAccept
argument_list|(
name|convert200502
argument_list|(
name|internal
operator|.
name|getAccept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert wsrm:AcceptType to 200502 version with 200508 WS-Addressing namespace.      *       * @param internal (may be<code>null</code>)      * @return converted (<code>null</code> if internal is<code>null</code>)      */
specifier|private
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|AcceptType
name|convert200502wsa15
parameter_list|(
name|AcceptType
name|internal
parameter_list|)
block|{
if|if
condition|(
name|internal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|AcceptType
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502WSA200508Factory
argument_list|()
operator|.
name|createAcceptType
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setAcksTo
argument_list|(
name|internal
operator|.
name|getAcksTo
argument_list|()
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert wsrm:AcceptType to 200502 version with 200408 WS-Addressing namespace.      *       * @param internal (may be<code>null</code>)      * @return converted (<code>null</code> if internal is<code>null</code>)      */
specifier|private
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|AcceptType
name|convert200502
parameter_list|(
name|AcceptType
name|internal
parameter_list|)
block|{
if|if
condition|(
name|internal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|AcceptType
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502Factory
argument_list|()
operator|.
name|createAcceptType
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setAcksTo
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convert
argument_list|(
name|internal
operator|.
name|getAcksTo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert wsrm:SequenceType to 200502 version with 200508 WS-Addressing namespace.      *       * @param internal (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|SequenceType
name|convert200502wsa15
parameter_list|(
name|SequenceType
name|internal
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|SequenceType
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502WSA200508Factory
argument_list|()
operator|.
name|createSequenceType
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setIdentifier
argument_list|(
name|convert200502wsa15
argument_list|(
name|internal
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exposed
operator|.
name|setMessageNumber
argument_list|(
name|internal
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert 200502 wsrm:SequenceType with 200408 WS-Addressing namespace to internal form.      *       * @param exposed (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|SequenceType
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|SequenceType
name|exposed
parameter_list|)
block|{
name|SequenceType
name|internal
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createSequenceType
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setIdentifier
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|internal
operator|.
name|setMessageNumber
argument_list|(
name|exposed
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|,
name|internal
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 wsrm:SequenceType with 200508 WS-Addressing namespace to internal form.      *       * @param exposed (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|SequenceType
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|SequenceType
name|exposed
parameter_list|)
block|{
name|SequenceType
name|internal
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createSequenceType
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setIdentifier
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|internal
operator|.
name|setMessageNumber
argument_list|(
name|exposed
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|,
name|internal
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 Expires with 200408 WS-Addressing namespace to internal form.      *       * @param exposed (may be<code>null</code>)      * @return converted (<code>null</code> if internal is<code>null</code>)      */
specifier|public
specifier|static
name|Expires
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|Expires
name|exposed
parameter_list|)
block|{
if|if
condition|(
name|exposed
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Expires
name|internal
init|=
operator|new
name|Expires
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setValue
argument_list|(
name|exposed
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 Expires with 200508 WS-Addressing namespace to internal form.      *       * @param exposed (may be<code>null</code>)      * @return converted (<code>null</code> if internal is<code>null</code>)      */
specifier|public
specifier|static
name|Expires
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|Expires
name|exposed
parameter_list|)
block|{
if|if
condition|(
name|exposed
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Expires
name|internal
init|=
operator|new
name|Expires
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setValue
argument_list|(
name|exposed
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 AcceptType with 200408 WS-Addressing namespace to internal form.      *       * @param exposed (may be<code>null</code>)      * @return converted (<code>null</code> if internal is<code>null</code>)      */
specifier|public
specifier|static
name|AcceptType
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|AcceptType
name|exposed
parameter_list|)
block|{
if|if
condition|(
name|exposed
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|AcceptType
name|internal
init|=
operator|new
name|AcceptType
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setAcksTo
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
operator|.
name|convert
argument_list|(
name|exposed
operator|.
name|getAcksTo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 AcceptType with 200508 WS-Addressing namespace to internal form.      *       * @param exposed (may be<code>null</code>)      * @return converted (<code>null</code> if internal is<code>null</code>)      */
specifier|public
specifier|static
name|AcceptType
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|AcceptType
name|exposed
parameter_list|)
block|{
if|if
condition|(
name|exposed
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|AcceptType
name|internal
init|=
operator|new
name|AcceptType
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setAcksTo
argument_list|(
name|exposed
operator|.
name|getAcksTo
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 OfferType with 200408 WS-Addressing namespace to internal form.      *       * @param exposed (may be<code>null</code>)      * @return converted (<code>null</code> if internal is<code>null</code>)      */
specifier|public
specifier|static
name|OfferType
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|OfferType
name|exposed
parameter_list|)
block|{
if|if
condition|(
name|exposed
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|OfferType
name|internal
init|=
operator|new
name|OfferType
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setExpires
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getExpires
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|internal
operator|.
name|setIdentifier
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 Expires with 200508 WS-Addressing namespace to internal form.      *       * @param exposed (may be<code>null</code>)      * @return converted (<code>null</code> if internal is<code>null</code>)      */
specifier|public
specifier|static
name|OfferType
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|OfferType
name|exposed
parameter_list|)
block|{
if|if
condition|(
name|exposed
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|OfferType
name|internal
init|=
operator|new
name|OfferType
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setExpires
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getExpires
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|internal
operator|.
name|setIdentifier
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert wsrm:SequenceType to 200502 version with 200408 WS-Addressing namespace.      *       * @param internal (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|SequenceType
name|convert200502
parameter_list|(
name|SequenceType
name|internal
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|SequenceType
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502Factory
argument_list|()
operator|.
name|createSequenceType
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setIdentifier
argument_list|(
name|convert200502
argument_list|(
name|internal
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exposed
operator|.
name|setMessageNumber
argument_list|(
name|internal
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert TerminateSequenceType to 200502 version with 200408 WS-Addressing namespace.      *       * @param internal (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|TerminateSequenceType
name|convert200502
parameter_list|(
name|TerminateSequenceType
name|internal
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|TerminateSequenceType
name|exposed
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|TerminateSequenceType
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setIdentifier
argument_list|(
name|convert200502
argument_list|(
name|internal
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert TerminateSequenceType to 200502 version with 200508 WS-Addressing namespace.      *       * @param internal (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|TerminateSequenceType
name|convert200502wsa15
parameter_list|(
name|TerminateSequenceType
name|internal
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|TerminateSequenceType
name|exposed
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|TerminateSequenceType
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setIdentifier
argument_list|(
name|convert200502wsa15
argument_list|(
name|internal
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert wsrm:SequenceAcknowledgement to 200502 version with 200508 WS-Addressing namespace.      *       * @param internal (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|SequenceAcknowledgement
name|convert200502wsa15
parameter_list|(
name|SequenceAcknowledgement
name|internal
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|SequenceAcknowledgement
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502WSA200508Factory
argument_list|()
operator|.
name|createSequenceAcknowledgement
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setIdentifier
argument_list|(
name|convert200502wsa15
argument_list|(
name|internal
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
argument_list|>
name|exposedRanges
init|=
name|exposed
operator|.
name|getAcknowledgementRange
argument_list|()
decl_stmt|;
for|for
control|(
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|range
range|:
name|internal
operator|.
name|getAcknowledgementRange
argument_list|()
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|exposedRange
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
argument_list|()
decl_stmt|;
name|exposedRange
operator|.
name|setLower
argument_list|(
name|range
operator|.
name|getLower
argument_list|()
argument_list|)
expr_stmt|;
name|exposedRange
operator|.
name|setUpper
argument_list|(
name|range
operator|.
name|getUpper
argument_list|()
argument_list|)
expr_stmt|;
name|exposedRanges
operator|.
name|add
argument_list|(
name|exposedRange
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|range
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposedRange
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert wsrm:SequenceAcknowledgement to 200502 version with 200408 WS-Addressing namespace.      *       * @param internal (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|SequenceAcknowledgement
name|convert200502
parameter_list|(
name|SequenceAcknowledgement
name|internal
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|SequenceAcknowledgement
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502Factory
argument_list|()
operator|.
name|createSequenceAcknowledgement
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setIdentifier
argument_list|(
name|convert200502
argument_list|(
name|internal
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
argument_list|>
name|exposedRanges
init|=
name|exposed
operator|.
name|getAcknowledgementRange
argument_list|()
decl_stmt|;
for|for
control|(
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|range
range|:
name|internal
operator|.
name|getAcknowledgementRange
argument_list|()
control|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|exposedRange
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
argument_list|()
decl_stmt|;
name|exposedRange
operator|.
name|setLower
argument_list|(
name|range
operator|.
name|getLower
argument_list|()
argument_list|)
expr_stmt|;
name|exposedRange
operator|.
name|setUpper
argument_list|(
name|range
operator|.
name|getUpper
argument_list|()
argument_list|)
expr_stmt|;
name|exposedRanges
operator|.
name|add
argument_list|(
name|exposedRange
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|range
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposedRange
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert 200502 wsrm:SequenceAcknowledgement with 200508 WS-Addressing namespace to internal form.      *       * @param exposed (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|SequenceAcknowledgement
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|SequenceAcknowledgement
name|exposed
parameter_list|)
block|{
name|SequenceAcknowledgement
name|internal
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createSequenceAcknowledgement
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setIdentifier
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
argument_list|>
name|internalRanges
init|=
name|internal
operator|.
name|getAcknowledgementRange
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|range
range|:
name|exposed
operator|.
name|getAcknowledgementRange
argument_list|()
control|)
block|{
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|internalRange
init|=
operator|new
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
argument_list|()
decl_stmt|;
name|internalRange
operator|.
name|setLower
argument_list|(
name|range
operator|.
name|getLower
argument_list|()
argument_list|)
expr_stmt|;
name|internalRange
operator|.
name|setUpper
argument_list|(
name|range
operator|.
name|getUpper
argument_list|()
argument_list|)
expr_stmt|;
name|internalRanges
operator|.
name|add
argument_list|(
name|internalRange
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|range
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internalRange
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addAll
argument_list|(
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|,
name|internal
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 wsrm:SequenceAcknowledgement with 200408 WS-Addressing namespace to internal form.      *       * @param exposed (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|SequenceAcknowledgement
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|SequenceAcknowledgement
name|exposed
parameter_list|)
block|{
name|SequenceAcknowledgement
name|internal
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createSequenceAcknowledgement
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setIdentifier
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
argument_list|>
name|internalRanges
init|=
name|internal
operator|.
name|getAcknowledgementRange
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|range
range|:
name|exposed
operator|.
name|getAcknowledgementRange
argument_list|()
control|)
block|{
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
name|internalRange
init|=
operator|new
name|SequenceAcknowledgement
operator|.
name|AcknowledgementRange
argument_list|()
decl_stmt|;
name|internalRange
operator|.
name|setLower
argument_list|(
name|range
operator|.
name|getLower
argument_list|()
argument_list|)
expr_stmt|;
name|internalRange
operator|.
name|setUpper
argument_list|(
name|range
operator|.
name|getUpper
argument_list|()
argument_list|)
expr_stmt|;
name|internalRanges
operator|.
name|add
argument_list|(
name|internalRange
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|range
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internalRange
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addAll
argument_list|(
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|,
name|internal
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert wsrm:SequenceAcknowledgement to 200502 version with 200508 WS-Addressing namespace.      *       * @param internal (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|AckRequestedType
name|convert200502wsa15
parameter_list|(
name|AckRequestedType
name|internal
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|AckRequestedType
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502WSA200508Factory
argument_list|()
operator|.
name|createAckRequestedType
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setIdentifier
argument_list|(
name|convert200502wsa15
argument_list|(
name|internal
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert wsrm:SequenceAcknowledgement to 200502 version with 200408 WS-Addressing namespace.      *       * @param internal (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|AckRequestedType
name|convert200502
parameter_list|(
name|AckRequestedType
name|internal
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|AckRequestedType
name|exposed
init|=
name|RMUtils
operator|.
name|getWSRM200502Factory
argument_list|()
operator|.
name|createAckRequestedType
argument_list|()
decl_stmt|;
name|exposed
operator|.
name|setIdentifier
argument_list|(
name|convert200502
argument_list|(
name|internal
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|internal
operator|.
name|getAny
argument_list|()
argument_list|,
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exposed
return|;
block|}
comment|/**      * Convert 200502 wsrm:SequenceAcknowledgement with 200508 WS-Addressing namespace to internal form.      *       * @param exposed (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|AckRequestedType
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|AckRequestedType
name|exposed
parameter_list|)
block|{
name|AckRequestedType
name|internal
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createAckRequestedType
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setIdentifier
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|,
name|internal
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 wsrm:SequenceAcknowledgement with 200408 WS-Addressing namespace to internal form.      *       * @param exposed (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|AckRequestedType
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|AckRequestedType
name|exposed
parameter_list|)
block|{
name|AckRequestedType
name|internal
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createAckRequestedType
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setIdentifier
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|,
name|internal
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 TerminateSequenceType with 200508 WS-Addressing namespace to internal form.      *       * @param exposed (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|TerminateSequenceType
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502wsa15
operator|.
name|TerminateSequenceType
name|exposed
parameter_list|)
block|{
name|TerminateSequenceType
name|internal
init|=
operator|new
name|TerminateSequenceType
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setIdentifier
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|,
name|internal
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Convert 200502 TerminateSequenceType with 200408 WS-Addressing namespace to internal form.      *       * @param exposed (non-<code>null</code>)      * @return converted      */
specifier|public
specifier|static
name|TerminateSequenceType
name|convert
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200502
operator|.
name|TerminateSequenceType
name|exposed
parameter_list|)
block|{
name|TerminateSequenceType
name|internal
init|=
operator|new
name|TerminateSequenceType
argument_list|()
decl_stmt|;
name|internal
operator|.
name|setIdentifier
argument_list|(
name|convert
argument_list|(
name|exposed
operator|.
name|getIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|exposed
operator|.
name|getAny
argument_list|()
argument_list|,
name|internal
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|exposed
operator|.
name|getOtherAttributes
argument_list|()
argument_list|,
name|internal
operator|.
name|getOtherAttributes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|internal
return|;
block|}
comment|/**      * Put all entries from one map into another.      * @param from source map      * @param to target map      */
specifier|private
specifier|static
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|QName
argument_list|,
name|String
argument_list|>
name|from
parameter_list|,
name|Map
argument_list|<
name|QName
argument_list|,
name|String
argument_list|>
name|to
parameter_list|)
block|{
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
block|{
name|to
operator|.
name|putAll
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add all entries from one list into another.      * @param from source list      * @param to target list      */
specifier|private
specifier|static
name|void
name|addAll
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|from
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|to
parameter_list|)
block|{
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
block|{
name|to
operator|.
name|addAll
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

