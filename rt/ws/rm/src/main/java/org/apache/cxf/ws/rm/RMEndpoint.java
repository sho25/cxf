begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapBindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PackageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|ServiceConstructionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|Names
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|EffectivePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|EndpointPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyInterceptorProviderRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|SequenceTerminationPolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|SourcePolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_class
specifier|public
class|class
name|RMEndpoint
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|RMEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|SERVICE_NAME
init|=
operator|new
name|QName
argument_list|(
name|RMConstants
operator|.
name|getWsdlNamespace
argument_list|()
argument_list|,
literal|"SequenceAbstractService"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|INTERFACE_NAME
init|=
operator|new
name|QName
argument_list|(
name|RMConstants
operator|.
name|getWsdlNamespace
argument_list|()
argument_list|,
literal|"SequenceAbstractPortType"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|BINDING_NAME
init|=
operator|new
name|QName
argument_list|(
name|RMConstants
operator|.
name|getWsdlNamespace
argument_list|()
argument_list|,
literal|"SequenceAbstractSoapBinding"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|CREATE_PART_NAME
init|=
operator|new
name|QName
argument_list|(
name|RMConstants
operator|.
name|getWsdlNamespace
argument_list|()
argument_list|,
literal|"create"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|CREATE_RESPONSE_PART_NAME
init|=
operator|new
name|QName
argument_list|(
name|RMConstants
operator|.
name|getWsdlNamespace
argument_list|()
argument_list|,
literal|"createResponse"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|TERMINATE_PART_NAME
init|=
operator|new
name|QName
argument_list|(
name|RMConstants
operator|.
name|getWsdlNamespace
argument_list|()
argument_list|,
literal|"terminate"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Schema
name|rmSchema
decl_stmt|;
specifier|private
name|RMManager
name|manager
decl_stmt|;
specifier|private
name|Endpoint
name|applicationEndpoint
decl_stmt|;
specifier|private
name|Conduit
name|conduit
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
name|replyTo
decl_stmt|;
specifier|private
name|Source
name|source
decl_stmt|;
specifier|private
name|Destination
name|destination
decl_stmt|;
specifier|private
name|WrappedService
name|service
decl_stmt|;
specifier|private
name|Endpoint
name|endpoint
decl_stmt|;
specifier|private
name|Proxy
name|proxy
decl_stmt|;
specifier|private
name|Servant
name|servant
decl_stmt|;
specifier|private
name|long
name|lastApplicationMessage
decl_stmt|;
specifier|private
name|long
name|lastControlMessage
decl_stmt|;
specifier|public
name|RMEndpoint
parameter_list|(
name|RMManager
name|m
parameter_list|,
name|Endpoint
name|ae
parameter_list|)
block|{
name|manager
operator|=
name|m
expr_stmt|;
name|applicationEndpoint
operator|=
name|ae
expr_stmt|;
name|source
operator|=
operator|new
name|Source
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|destination
operator|=
operator|new
name|Destination
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|proxy
operator|=
operator|new
name|Proxy
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|servant
operator|=
operator|new
name|Servant
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return Returns the bus.      */
specifier|public
name|RMManager
name|getManager
parameter_list|()
block|{
return|return
name|manager
return|;
block|}
comment|/**      * @return Returns the application endpoint.      */
specifier|public
name|Endpoint
name|getApplicationEndpoint
parameter_list|()
block|{
return|return
name|applicationEndpoint
return|;
block|}
comment|/**      * @return Returns the RM protocol endpoint.      */
specifier|public
name|Endpoint
name|getEndpoint
parameter_list|()
block|{
return|return
name|endpoint
return|;
block|}
comment|/**      * @return Returns the RM protocol service.      */
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
name|service
return|;
block|}
comment|/**      * @return Returns the RM protocol binding info.      */
specifier|public
name|BindingInfo
name|getBindingInfo
parameter_list|()
block|{
return|return
name|service
operator|.
name|getServiceInfo
argument_list|()
operator|.
name|getBinding
argument_list|(
name|BINDING_NAME
argument_list|)
return|;
block|}
comment|/**      * @return Returns the proxy.      */
specifier|public
name|Proxy
name|getProxy
parameter_list|()
block|{
return|return
name|proxy
return|;
block|}
comment|/**      * @return Returns the servant.      */
specifier|public
name|Servant
name|getServant
parameter_list|()
block|{
return|return
name|servant
return|;
block|}
comment|/**      * @return Returns the destination.      */
specifier|public
name|Destination
name|getDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
comment|/**      * @param destination The destination to set.      */
specifier|public
name|void
name|setDestination
parameter_list|(
name|Destination
name|destination
parameter_list|)
block|{
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
block|}
comment|/**      * @return Returns the source.      */
specifier|public
name|Source
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
comment|/**      * @param source The source to set.      */
specifier|public
name|void
name|setSource
parameter_list|(
name|Source
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
comment|/**      * @return The time when last application message was received.      */
specifier|public
name|long
name|getLastApplicationMessage
parameter_list|()
block|{
return|return
name|lastApplicationMessage
return|;
block|}
comment|/**      * Indicates that an application message has been received.      */
specifier|public
name|void
name|receivedApplicationMessage
parameter_list|()
block|{
name|lastApplicationMessage
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return The time when last RM protocol message was received.      */
specifier|public
name|long
name|getLastControlMessage
parameter_list|()
block|{
return|return
name|lastControlMessage
return|;
block|}
comment|/**      * Indicates that an RM protocol message has been received.      */
specifier|public
name|void
name|receivedControlMessage
parameter_list|()
block|{
name|lastControlMessage
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return Returns the conduit.      */
specifier|public
name|Conduit
name|getConduit
parameter_list|()
block|{
return|return
name|conduit
return|;
block|}
comment|/**      * Returns the replyTo address of the first application request, i.e. the      * target address to which to send CreateSequence, CreateSequenceResponse      * and TerminateSequence messages originating from the from the server.      *       * @return the replyTo address      */
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
name|getReplyTo
parameter_list|()
block|{
return|return
name|replyTo
return|;
block|}
name|void
name|initialise
parameter_list|(
name|Conduit
name|c
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
name|r
parameter_list|)
block|{
name|conduit
operator|=
name|c
expr_stmt|;
name|replyTo
operator|=
name|r
expr_stmt|;
name|createService
argument_list|()
expr_stmt|;
name|createEndpoint
argument_list|()
expr_stmt|;
name|setPolicies
argument_list|()
expr_stmt|;
block|}
name|void
name|createService
parameter_list|()
block|{
name|ServiceInfo
name|si
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|si
operator|.
name|setProperty
argument_list|(
name|Schema
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|setName
argument_list|(
name|SERVICE_NAME
argument_list|)
expr_stmt|;
name|buildInterfaceInfo
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|service
operator|=
operator|new
name|WrappedService
argument_list|(
name|applicationEndpoint
operator|.
name|getService
argument_list|()
argument_list|,
name|SERVICE_NAME
argument_list|,
name|si
argument_list|)
expr_stmt|;
name|DataBinding
name|dataBinding
init|=
literal|null
decl_stmt|;
try|try
block|{
name|JAXBContext
name|ctx
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|PackageUtils
operator|.
name|getPackageName
argument_list|(
name|CreateSequenceType
operator|.
name|class
argument_list|)
argument_list|,
name|CreateSequenceType
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|dataBinding
operator|=
operator|new
name|JAXBDataBinding
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|service
operator|.
name|setDataBinding
argument_list|(
name|dataBinding
argument_list|)
expr_stmt|;
name|service
operator|.
name|setInvoker
argument_list|(
name|servant
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|synchronized
name|Schema
name|getSchema
parameter_list|()
block|{
if|if
condition|(
name|rmSchema
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|SchemaFactory
name|factory
init|=
name|SchemaFactory
operator|.
name|newInstance
argument_list|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
argument_list|)
decl_stmt|;
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
name|ad
init|=
operator|new
name|StreamSource
argument_list|(
name|RMEndpoint
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/schemas/wsdl/addressing.xsd"
argument_list|)
operator|.
name|openStream
argument_list|()
argument_list|,
literal|"http://schemas.xmlsoap.org/ws/2004/08/addressing"
argument_list|)
decl_stmt|;
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
name|rm
init|=
operator|new
name|StreamSource
argument_list|(
name|RMEndpoint
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/schemas/wsdl/wsrm.xsd"
argument_list|)
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
name|schemas
index|[]
init|=
operator|new
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
index|[]
block|{
name|ad
block|,
name|rm
block|}
decl_stmt|;
name|rmSchema
operator|=
name|factory
operator|.
name|newSchema
argument_list|(
name|schemas
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
return|return
name|rmSchema
return|;
block|}
name|void
name|createEndpoint
parameter_list|()
block|{
name|ServiceInfo
name|si
init|=
name|service
operator|.
name|getServiceInfo
argument_list|()
decl_stmt|;
name|buildBindingInfo
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|EndpointInfo
name|aei
init|=
name|applicationEndpoint
operator|.
name|getEndpointInfo
argument_list|()
decl_stmt|;
name|String
name|transportId
init|=
name|aei
operator|.
name|getTransportId
argument_list|()
decl_stmt|;
name|EndpointInfo
name|ei
init|=
operator|new
name|EndpointInfo
argument_list|(
name|si
argument_list|,
name|transportId
argument_list|)
decl_stmt|;
name|ei
operator|.
name|setAddress
argument_list|(
name|aei
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setName
argument_list|(
name|RMConstants
operator|.
name|getPortName
argument_list|()
argument_list|)
expr_stmt|;
name|ei
operator|.
name|setBinding
argument_list|(
name|si
operator|.
name|getBinding
argument_list|(
name|BINDING_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// if addressing was enabled on the application endpoint by means
comment|// of the UsingAddressing element extensor, use this for the
comment|// RM endpoint also
name|Object
name|ua
init|=
name|getUsingAddressing
argument_list|(
name|aei
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ua
condition|)
block|{
name|ei
operator|.
name|addExtensor
argument_list|(
name|ua
argument_list|)
expr_stmt|;
block|}
name|si
operator|.
name|addEndpoint
argument_list|(
name|ei
argument_list|)
expr_stmt|;
name|endpoint
operator|=
operator|new
name|WrappedEndpoint
argument_list|(
name|applicationEndpoint
argument_list|,
name|ei
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|service
operator|.
name|setEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
name|void
name|setPolicies
parameter_list|()
block|{
comment|// use same WS-policies as for application endpoint
name|PolicyEngine
name|engine
init|=
name|manager
operator|.
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|PolicyEngine
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|engine
operator|||
operator|!
name|engine
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|EndpointInfo
name|ei
init|=
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
decl_stmt|;
name|PolicyInterceptorProviderRegistry
name|reg
init|=
name|manager
operator|.
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|PolicyInterceptorProviderRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|EndpointPolicy
name|ep
init|=
literal|null
operator|==
name|conduit
condition|?
name|engine
operator|.
name|getServerEndpointPolicy
argument_list|(
name|applicationEndpoint
operator|.
name|getEndpointInfo
argument_list|()
argument_list|,
literal|null
argument_list|)
else|:
name|engine
operator|.
name|getClientEndpointPolicy
argument_list|(
name|applicationEndpoint
operator|.
name|getEndpointInfo
argument_list|()
argument_list|,
name|conduit
argument_list|)
decl_stmt|;
if|if
condition|(
name|conduit
operator|!=
literal|null
condition|)
block|{
name|engine
operator|.
name|setClientEndpointPolicy
argument_list|(
name|ei
argument_list|,
name|ep
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|engine
operator|.
name|setServerEndpointPolicy
argument_list|(
name|ei
argument_list|,
name|ep
argument_list|)
expr_stmt|;
block|}
name|EffectivePolicy
name|effectiveOutbound
init|=
operator|new
name|EffectivePolicyImpl
argument_list|(
name|ep
argument_list|,
name|reg
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|EffectivePolicy
name|effectiveInbound
init|=
operator|new
name|EffectivePolicyImpl
argument_list|(
name|ep
argument_list|,
name|reg
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BindingInfo
name|bi
init|=
name|ei
operator|.
name|getBinding
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|BindingOperationInfo
argument_list|>
name|bois
init|=
name|bi
operator|.
name|getOperations
argument_list|()
decl_stmt|;
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|bois
control|)
block|{
name|engine
operator|.
name|setEffectiveServerRequestPolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|effectiveInbound
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setEffectiveServerResponsePolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|effectiveOutbound
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setEffectiveClientRequestPolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|effectiveOutbound
argument_list|)
expr_stmt|;
name|engine
operator|.
name|setEffectiveClientResponsePolicy
argument_list|(
name|ei
argument_list|,
name|boi
argument_list|,
name|effectiveInbound
argument_list|)
expr_stmt|;
block|}
comment|// TODO: FaultPolicy (SequenceFault)
block|}
name|void
name|buildInterfaceInfo
parameter_list|(
name|ServiceInfo
name|si
parameter_list|)
block|{
name|InterfaceInfo
name|ii
init|=
operator|new
name|InterfaceInfo
argument_list|(
name|si
argument_list|,
name|INTERFACE_NAME
argument_list|)
decl_stmt|;
name|buildOperationInfo
argument_list|(
name|ii
argument_list|)
expr_stmt|;
block|}
name|void
name|buildOperationInfo
parameter_list|(
name|InterfaceInfo
name|ii
parameter_list|)
block|{
name|buildCreateSequenceOperationInfo
argument_list|(
name|ii
argument_list|)
expr_stmt|;
name|buildTerminateSequenceOperationInfo
argument_list|(
name|ii
argument_list|)
expr_stmt|;
name|buildSequenceAckOperationInfo
argument_list|(
name|ii
argument_list|)
expr_stmt|;
name|buildLastMessageOperationInfo
argument_list|(
name|ii
argument_list|)
expr_stmt|;
name|buildAckRequestedOperationInfo
argument_list|(
name|ii
argument_list|)
expr_stmt|;
comment|// TODO: FaultInfo (SequenceFault)
block|}
name|void
name|buildCreateSequenceOperationInfo
parameter_list|(
name|InterfaceInfo
name|ii
parameter_list|)
block|{
name|OperationInfo
name|operationInfo
init|=
literal|null
decl_stmt|;
name|MessagePartInfo
name|partInfo
init|=
literal|null
decl_stmt|;
name|MessageInfo
name|messageInfo
init|=
literal|null
decl_stmt|;
name|operationInfo
operator|=
name|ii
operator|.
name|addOperation
argument_list|(
name|RMConstants
operator|.
name|getCreateSequenceOperationName
argument_list|()
argument_list|)
expr_stmt|;
name|messageInfo
operator|=
name|operationInfo
operator|.
name|createMessage
argument_list|(
name|RMConstants
operator|.
name|getCreateSequenceOperationName
argument_list|()
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|)
expr_stmt|;
name|operationInfo
operator|.
name|setInput
argument_list|(
name|messageInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|messageInfo
argument_list|)
expr_stmt|;
name|partInfo
operator|=
name|messageInfo
operator|.
name|addMessagePart
argument_list|(
name|CREATE_PART_NAME
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setElementQName
argument_list|(
name|RMConstants
operator|.
name|getCreateSequenceOperationName
argument_list|()
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setTypeClass
argument_list|(
name|CreateSequenceType
operator|.
name|class
argument_list|)
expr_stmt|;
name|messageInfo
operator|=
name|operationInfo
operator|.
name|createMessage
argument_list|(
name|RMConstants
operator|.
name|getCreateSequenceResponseOperationName
argument_list|()
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|OUTPUT
argument_list|)
expr_stmt|;
name|operationInfo
operator|.
name|setOutput
argument_list|(
name|messageInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|messageInfo
argument_list|)
expr_stmt|;
name|partInfo
operator|=
name|messageInfo
operator|.
name|addMessagePart
argument_list|(
name|CREATE_RESPONSE_PART_NAME
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setElementQName
argument_list|(
name|RMConstants
operator|.
name|getCreateSequenceResponseOperationName
argument_list|()
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setTypeClass
argument_list|(
name|CreateSequenceResponseType
operator|.
name|class
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|operationInfo
operator|=
name|ii
operator|.
name|addOperation
argument_list|(
name|RMConstants
operator|.
name|getCreateSequenceOnewayOperationName
argument_list|()
argument_list|)
expr_stmt|;
name|messageInfo
operator|=
name|operationInfo
operator|.
name|createMessage
argument_list|(
name|RMConstants
operator|.
name|getCreateSequenceOperationName
argument_list|()
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|)
expr_stmt|;
name|operationInfo
operator|.
name|setInput
argument_list|(
name|messageInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|messageInfo
argument_list|)
expr_stmt|;
name|partInfo
operator|=
name|messageInfo
operator|.
name|addMessagePart
argument_list|(
name|CREATE_PART_NAME
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setElementQName
argument_list|(
name|RMConstants
operator|.
name|getCreateSequenceOperationName
argument_list|()
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setTypeClass
argument_list|(
name|CreateSequenceType
operator|.
name|class
argument_list|)
expr_stmt|;
name|operationInfo
operator|=
name|ii
operator|.
name|addOperation
argument_list|(
name|RMConstants
operator|.
name|getCreateSequenceResponseOnewayOperationName
argument_list|()
argument_list|)
expr_stmt|;
name|messageInfo
operator|=
name|operationInfo
operator|.
name|createMessage
argument_list|(
name|RMConstants
operator|.
name|getCreateSequenceResponseOperationName
argument_list|()
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|)
expr_stmt|;
name|operationInfo
operator|.
name|setInput
argument_list|(
name|messageInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|messageInfo
argument_list|)
expr_stmt|;
name|partInfo
operator|=
name|messageInfo
operator|.
name|addMessagePart
argument_list|(
name|CREATE_RESPONSE_PART_NAME
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setElementQName
argument_list|(
name|RMConstants
operator|.
name|getCreateSequenceResponseOperationName
argument_list|()
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setTypeClass
argument_list|(
name|CreateSequenceResponseType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|void
name|buildTerminateSequenceOperationInfo
parameter_list|(
name|InterfaceInfo
name|ii
parameter_list|)
block|{
name|OperationInfo
name|operationInfo
init|=
literal|null
decl_stmt|;
name|MessagePartInfo
name|partInfo
init|=
literal|null
decl_stmt|;
name|MessageInfo
name|messageInfo
init|=
literal|null
decl_stmt|;
name|operationInfo
operator|=
name|ii
operator|.
name|addOperation
argument_list|(
name|RMConstants
operator|.
name|getTerminateSequenceOperationName
argument_list|()
argument_list|)
expr_stmt|;
name|messageInfo
operator|=
name|operationInfo
operator|.
name|createMessage
argument_list|(
name|RMConstants
operator|.
name|getTerminateSequenceOperationName
argument_list|()
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|)
expr_stmt|;
name|operationInfo
operator|.
name|setInput
argument_list|(
name|messageInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|messageInfo
argument_list|)
expr_stmt|;
name|partInfo
operator|=
name|messageInfo
operator|.
name|addMessagePart
argument_list|(
name|TERMINATE_PART_NAME
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setElementQName
argument_list|(
name|RMConstants
operator|.
name|getTerminateSequenceOperationName
argument_list|()
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|partInfo
operator|.
name|setTypeClass
argument_list|(
name|TerminateSequenceType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|void
name|buildSequenceAckOperationInfo
parameter_list|(
name|InterfaceInfo
name|ii
parameter_list|)
block|{
name|OperationInfo
name|operationInfo
init|=
literal|null
decl_stmt|;
name|MessageInfo
name|messageInfo
init|=
literal|null
decl_stmt|;
name|operationInfo
operator|=
name|ii
operator|.
name|addOperation
argument_list|(
name|RMConstants
operator|.
name|getSequenceAckOperationName
argument_list|()
argument_list|)
expr_stmt|;
name|messageInfo
operator|=
name|operationInfo
operator|.
name|createMessage
argument_list|(
name|RMConstants
operator|.
name|getSequenceAckOperationName
argument_list|()
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|)
expr_stmt|;
name|operationInfo
operator|.
name|setInput
argument_list|(
name|messageInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|messageInfo
argument_list|)
expr_stmt|;
block|}
name|void
name|buildLastMessageOperationInfo
parameter_list|(
name|InterfaceInfo
name|ii
parameter_list|)
block|{
name|OperationInfo
name|operationInfo
init|=
literal|null
decl_stmt|;
name|MessageInfo
name|messageInfo
init|=
literal|null
decl_stmt|;
name|operationInfo
operator|=
name|ii
operator|.
name|addOperation
argument_list|(
name|RMConstants
operator|.
name|getLastMessageOperationName
argument_list|()
argument_list|)
expr_stmt|;
name|messageInfo
operator|=
name|operationInfo
operator|.
name|createMessage
argument_list|(
name|RMConstants
operator|.
name|getLastMessageOperationName
argument_list|()
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|)
expr_stmt|;
name|operationInfo
operator|.
name|setInput
argument_list|(
name|messageInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|messageInfo
argument_list|)
expr_stmt|;
block|}
name|void
name|buildAckRequestedOperationInfo
parameter_list|(
name|InterfaceInfo
name|ii
parameter_list|)
block|{
name|OperationInfo
name|operationInfo
init|=
literal|null
decl_stmt|;
name|MessageInfo
name|messageInfo
init|=
literal|null
decl_stmt|;
name|operationInfo
operator|=
name|ii
operator|.
name|addOperation
argument_list|(
name|RMConstants
operator|.
name|getAckRequestedOperationName
argument_list|()
argument_list|)
expr_stmt|;
name|messageInfo
operator|=
name|operationInfo
operator|.
name|createMessage
argument_list|(
name|RMConstants
operator|.
name|getAckRequestedOperationName
argument_list|()
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|)
expr_stmt|;
name|operationInfo
operator|.
name|setInput
argument_list|(
name|messageInfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|messageInfo
argument_list|)
expr_stmt|;
block|}
name|void
name|buildBindingInfo
parameter_list|(
name|ServiceInfo
name|si
parameter_list|)
block|{
comment|// use same binding id as for application endpoint
comment|// also, to workaround the problem that it may not be possible to determine
comment|// the soap version depending on the bindingId, speciffy the soap version
comment|// explicitly
if|if
condition|(
literal|null
operator|!=
name|applicationEndpoint
condition|)
block|{
name|SoapBindingInfo
name|sbi
init|=
operator|(
name|SoapBindingInfo
operator|)
name|applicationEndpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
decl_stmt|;
name|SoapVersion
name|sv
init|=
name|sbi
operator|.
name|getSoapVersion
argument_list|()
decl_stmt|;
name|String
name|bindingId
init|=
name|sbi
operator|.
name|getBindingId
argument_list|()
decl_stmt|;
name|SoapBindingInfo
name|bi
init|=
operator|new
name|SoapBindingInfo
argument_list|(
name|si
argument_list|,
name|bindingId
argument_list|,
name|sv
argument_list|)
decl_stmt|;
name|bi
operator|.
name|setName
argument_list|(
name|BINDING_NAME
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|boi
init|=
literal|null
decl_stmt|;
name|boi
operator|=
name|bi
operator|.
name|buildOperation
argument_list|(
name|RMConstants
operator|.
name|getCreateSequenceOperationName
argument_list|()
argument_list|,
name|RMConstants
operator|.
name|getCreateSequenceOperationName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|boi
argument_list|,
name|RMConstants
operator|.
name|getCreateSequenceAction
argument_list|()
argument_list|,
name|RMConstants
operator|.
name|getCreateSequenceResponseAction
argument_list|()
argument_list|)
expr_stmt|;
name|bi
operator|.
name|addOperation
argument_list|(
name|boi
argument_list|)
expr_stmt|;
name|boi
operator|=
name|bi
operator|.
name|buildOperation
argument_list|(
name|RMConstants
operator|.
name|getTerminateSequenceOperationName
argument_list|()
argument_list|,
name|RMConstants
operator|.
name|getTerminateSequenceOperationName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|boi
argument_list|,
name|RMConstants
operator|.
name|getTerminateSequenceAction
argument_list|()
argument_list|)
expr_stmt|;
name|bi
operator|.
name|addOperation
argument_list|(
name|boi
argument_list|)
expr_stmt|;
name|boi
operator|=
name|bi
operator|.
name|buildOperation
argument_list|(
name|RMConstants
operator|.
name|getSequenceAckOperationName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|boi
argument_list|,
name|RMConstants
operator|.
name|getSequenceAckAction
argument_list|()
argument_list|)
expr_stmt|;
name|bi
operator|.
name|addOperation
argument_list|(
name|boi
argument_list|)
expr_stmt|;
name|boi
operator|=
name|bi
operator|.
name|buildOperation
argument_list|(
name|RMConstants
operator|.
name|getLastMessageOperationName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|boi
argument_list|,
name|RMConstants
operator|.
name|getLastMessageAction
argument_list|()
argument_list|)
expr_stmt|;
name|bi
operator|.
name|addOperation
argument_list|(
name|boi
argument_list|)
expr_stmt|;
name|boi
operator|=
name|bi
operator|.
name|buildOperation
argument_list|(
name|RMConstants
operator|.
name|getAckRequestedOperationName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|boi
argument_list|,
name|RMConstants
operator|.
name|getAckRequestedAction
argument_list|()
argument_list|)
expr_stmt|;
name|bi
operator|.
name|addOperation
argument_list|(
name|boi
argument_list|)
expr_stmt|;
name|boi
operator|=
name|bi
operator|.
name|buildOperation
argument_list|(
name|RMConstants
operator|.
name|getCreateSequenceOnewayOperationName
argument_list|()
argument_list|,
name|RMConstants
operator|.
name|getCreateSequenceOperationName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|boi
argument_list|,
name|RMConstants
operator|.
name|getCreateSequenceAction
argument_list|()
argument_list|)
expr_stmt|;
name|bi
operator|.
name|addOperation
argument_list|(
name|boi
argument_list|)
expr_stmt|;
name|boi
operator|=
name|bi
operator|.
name|buildOperation
argument_list|(
name|RMConstants
operator|.
name|getCreateSequenceResponseOnewayOperationName
argument_list|()
argument_list|,
name|RMConstants
operator|.
name|getCreateSequenceResponseOperationName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addAction
argument_list|(
name|boi
argument_list|,
name|RMConstants
operator|.
name|getCreateSequenceResponseAction
argument_list|()
argument_list|)
expr_stmt|;
name|bi
operator|.
name|addOperation
argument_list|(
name|boi
argument_list|)
expr_stmt|;
name|si
operator|.
name|addBinding
argument_list|(
name|bi
argument_list|)
expr_stmt|;
block|}
comment|// TODO: BindingFaultInfo (SequenceFault)
block|}
specifier|private
name|void
name|addAction
parameter_list|(
name|BindingOperationInfo
name|boi
parameter_list|,
name|String
name|action
parameter_list|)
block|{
name|addAction
argument_list|(
name|boi
argument_list|,
name|action
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addAction
parameter_list|(
name|BindingOperationInfo
name|boi
parameter_list|,
name|String
name|action
parameter_list|,
name|String
name|outputAction
parameter_list|)
block|{
name|SoapOperationInfo
name|soi
init|=
operator|new
name|SoapOperationInfo
argument_list|()
decl_stmt|;
name|soi
operator|.
name|setAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|boi
operator|.
name|addExtensor
argument_list|(
name|soi
argument_list|)
expr_stmt|;
name|MessageInfo
name|info
init|=
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
decl_stmt|;
name|info
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAW_ACTION_QNAME
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|info
operator|=
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
expr_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|addExtensionAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAW_ACTION_QNAME
argument_list|,
name|outputAction
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
name|getUsingAddressing
parameter_list|(
name|EndpointInfo
name|endpointInfo
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|endpointInfo
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|ua
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|exts
init|=
name|endpointInfo
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
decl_stmt|;
name|ua
operator|=
name|getUsingAddressing
argument_list|(
name|exts
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ua
condition|)
block|{
return|return
name|ua
return|;
block|}
name|exts
operator|=
name|endpointInfo
operator|.
name|getBinding
argument_list|()
operator|!=
literal|null
condition|?
name|endpointInfo
operator|.
name|getBinding
argument_list|()
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
else|:
literal|null
expr_stmt|;
name|ua
operator|=
name|getUsingAddressing
argument_list|(
name|exts
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ua
condition|)
block|{
return|return
name|ua
return|;
block|}
name|exts
operator|=
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|!=
literal|null
condition|?
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
else|:
literal|null
expr_stmt|;
name|ua
operator|=
name|getUsingAddressing
argument_list|(
name|exts
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ua
condition|)
block|{
return|return
name|ua
return|;
block|}
return|return
name|ua
return|;
block|}
name|Object
name|getUsingAddressing
parameter_list|(
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|exts
parameter_list|)
block|{
name|Object
name|ua
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|exts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExtensibilityElement
name|ext
range|:
name|exts
control|)
block|{
if|if
condition|(
name|Names
operator|.
name|WSAW_USING_ADDRESSING_QNAME
operator|.
name|equals
argument_list|(
name|ext
operator|.
name|getElementType
argument_list|()
argument_list|)
condition|)
block|{
name|ua
operator|=
name|ext
expr_stmt|;
block|}
block|}
block|}
return|return
name|ua
return|;
block|}
name|void
name|setAplicationEndpoint
parameter_list|(
name|Endpoint
name|ae
parameter_list|)
block|{
name|applicationEndpoint
operator|=
name|ae
expr_stmt|;
block|}
name|void
name|setManager
parameter_list|(
name|RMManager
name|m
parameter_list|)
block|{
name|manager
operator|=
name|m
expr_stmt|;
block|}
name|void
name|shutdown
parameter_list|()
block|{
comment|// cancel outstanding timer tasks (deferred acknowledgements)
comment|// and scheduled termination for all
comment|// destination sequences of this endpoint
for|for
control|(
name|DestinationSequence
name|ds
range|:
name|getDestination
argument_list|()
operator|.
name|getAllSequences
argument_list|()
control|)
block|{
name|ds
operator|.
name|cancelDeferredAcknowledgments
argument_list|()
expr_stmt|;
name|ds
operator|.
name|cancelTermination
argument_list|()
expr_stmt|;
block|}
comment|// try terminating sequences
name|SourcePolicyType
name|sp
init|=
name|manager
operator|.
name|getSourcePolicy
argument_list|()
decl_stmt|;
name|SequenceTerminationPolicyType
name|stp
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|sp
condition|)
block|{
name|stp
operator|=
name|sp
operator|.
name|getSequenceTerminationPolicy
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|stp
operator|&&
name|stp
operator|.
name|isTerminateOnShutdown
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|SourceSequence
argument_list|>
name|seqs
init|=
name|source
operator|.
name|getAllUnacknowledgedSequences
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Trying to terminate {0} sequences"
argument_list|,
name|seqs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SourceSequence
name|seq
range|:
name|seqs
control|)
block|{
try|try
block|{
comment|// destination MUST respond with a
comment|// sequence acknowledgement
if|if
condition|(
name|seq
operator|.
name|isLastMessage
argument_list|()
condition|)
block|{
comment|// REVISIT: this may be non-standard
comment|// getProxy().ackRequested(seq);
block|}
else|else
block|{
name|getProxy
argument_list|()
operator|.
name|lastMessage
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RMException
name|ex
parameter_list|)
block|{
comment|// already logged
block|}
block|}
block|}
comment|// cancel outstanding resends for all source sequences
comment|// of this endpoint
for|for
control|(
name|SourceSequence
name|ss
range|:
name|getSource
argument_list|()
operator|.
name|getAllSequences
argument_list|()
control|)
block|{
name|manager
operator|.
name|getRetransmissionQueue
argument_list|()
operator|.
name|stop
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|EffectivePolicyImpl
implements|implements
name|EffectivePolicy
block|{
specifier|private
name|EndpointPolicy
name|endpointPolicy
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
decl_stmt|;
name|EffectivePolicyImpl
parameter_list|(
name|EndpointPolicy
name|ep
parameter_list|,
name|PolicyInterceptorProviderRegistry
name|reg
parameter_list|,
name|boolean
name|outbound
parameter_list|,
name|boolean
name|fault
parameter_list|)
block|{
name|endpointPolicy
operator|=
name|ep
expr_stmt|;
name|interceptors
operator|=
name|reg
operator|.
name|getInterceptors
argument_list|(
name|endpointPolicy
operator|.
name|getChosenAlternative
argument_list|()
argument_list|,
name|outbound
argument_list|,
name|fault
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|PolicyAssertion
argument_list|>
name|getChosenAlternative
parameter_list|()
block|{
return|return
name|endpointPolicy
operator|.
name|getChosenAlternative
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getInterceptors
parameter_list|()
block|{
return|return
name|interceptors
return|;
block|}
specifier|public
name|Policy
name|getPolicy
parameter_list|()
block|{
return|return
name|endpointPolicy
operator|.
name|getPolicy
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

