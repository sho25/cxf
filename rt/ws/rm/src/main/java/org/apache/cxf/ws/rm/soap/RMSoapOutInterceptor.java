begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|AbstractSoapInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|soap
operator|.
name|MAPCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|ProtocolVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RM10Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RM11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMContextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|SequenceFault
import|;
end_import

begin_comment
comment|/**  * Protocol Handler responsible for {en|de}coding the RM   * Properties for {outgo|incom}ing messages.  */
end_comment

begin_class
specifier|public
class|class
name|RMSoapOutInterceptor
extends|extends
name|AbstractSoapInterceptor
block|{
specifier|protected
specifier|static
name|JAXBContext
name|jaxbContext
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|QName
argument_list|>
name|HEADERS
decl_stmt|;
static|static
block|{
name|Set
argument_list|<
name|QName
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|RM10Constants
operator|.
name|HEADERS
argument_list|)
expr_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|RM11Constants
operator|.
name|HEADERS
argument_list|)
expr_stmt|;
name|HEADERS
operator|=
name|set
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|RMSoapOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|RMSoapOutInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_PROTOCOL
argument_list|)
expr_stmt|;
name|addAfter
argument_list|(
name|MAPCodec
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// AbstractSoapInterceptor interface
comment|/**      * @return the set of SOAP headers understood by this handler       */
specifier|public
name|Set
argument_list|<
name|QName
argument_list|>
name|getUnderstoodHeaders
parameter_list|()
block|{
return|return
name|HEADERS
return|;
block|}
comment|// Interceptor interface
comment|/* (non-Javadoc)      * @see org.apache.cxf.interceptor.Interceptor#handleMessage(org.apache.cxf.message.Message)      */
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|encode
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|/**      * Encode the current RM properties in protocol-specific headers.      *      * @param message the SOAP message      */
name|void
name|encode
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
block|{
name|RMProperties
name|rmps
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|message
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|rmps
condition|)
block|{
name|encode
argument_list|(
name|message
argument_list|,
name|rmps
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MessageUtils
operator|.
name|isFault
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|Exception
name|ex
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|SoapFault
operator|&&
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SequenceFault
condition|)
block|{
name|encodeFault
argument_list|(
name|message
argument_list|,
operator|(
name|SequenceFault
operator|)
name|ex
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Encode the current RM properties in protocol-specific headers.      *      * @param message the SOAP message.      * @param rmps the current RM properties.      */
specifier|public
specifier|static
name|void
name|encode
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|RMProperties
name|rmps
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|rmps
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"encoding RMPs in SOAP headers"
argument_list|)
expr_stmt|;
try|try
block|{
name|AddressingProperties
name|maps
init|=
name|RMContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ProtocolVariation
name|protocol
init|=
name|ProtocolVariation
operator|.
name|findVariant
argument_list|(
name|rmps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|maps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|Element
name|header
init|=
name|protocol
operator|.
name|getCodec
argument_list|()
operator|.
name|buildHeaders
argument_list|(
name|rmps
argument_list|,
name|message
operator|.
name|getVersion
argument_list|()
operator|.
name|getHeader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
name|Node
name|node
init|=
name|header
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
operator|&&
name|MessageUtils
operator|.
name|isPartialResponse
argument_list|(
name|message
argument_list|)
condition|)
block|{
comment|// make sure the response is returned as HTTP 200 and not 202
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|Header
name|holder
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Sequence"
argument_list|)
condition|)
block|{
name|holder
operator|=
operator|new
name|SoapHeader
argument_list|(
operator|new
name|QName
argument_list|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
argument_list|,
name|node
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SoapHeader
operator|)
name|holder
operator|)
operator|.
name|setMustUnderstand
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|holder
operator|=
operator|new
name|Header
argument_list|(
operator|new
name|QName
argument_list|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|add
argument_list|(
name|holder
argument_list|)
expr_stmt|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JAXBException
name|je
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SOAP_HEADER_ENCODE_FAILURE_MSG"
argument_list|,
name|je
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Encode the SequenceFault in protocol-specific header.      *      * @param message the SOAP message.      * @param sf the SequenceFault.      */
specifier|public
specifier|static
name|void
name|encodeFault
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|SequenceFault
name|sf
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Encoding SequenceFault in SOAP header"
argument_list|)
expr_stmt|;
try|try
block|{
name|Message
name|inmsg
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
decl_stmt|;
name|RMProperties
name|rmps
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|inmsg
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AddressingProperties
name|maps
init|=
name|RMContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|inmsg
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ProtocolVariation
name|protocol
init|=
name|ProtocolVariation
operator|.
name|findVariant
argument_list|(
name|rmps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|maps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|Element
name|header
init|=
name|protocol
operator|.
name|getCodec
argument_list|()
operator|.
name|buildHeaderFault
argument_list|(
name|sf
argument_list|,
name|message
operator|.
name|getVersion
argument_list|()
operator|.
name|getHeader
argument_list|()
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|header
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
block|{
name|Attr
name|attr
init|=
name|header
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createAttributeNS
argument_list|(
literal|"http://www.w3.org/2000/xmlns/"
argument_list|,
literal|"xmlns:"
operator|+
name|RMConstants
operator|.
name|NAMESPACE_PREFIX
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setValue
argument_list|(
name|rmps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Element
operator|)
name|node
operator|)
operator|.
name|setAttributeNodeNS
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Header
argument_list|>
name|headers
init|=
name|message
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|new
name|Header
argument_list|(
operator|new
name|QName
argument_list|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|je
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SOAP_HEADER_ENCODE_FAILURE_MSG"
argument_list|,
name|je
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

