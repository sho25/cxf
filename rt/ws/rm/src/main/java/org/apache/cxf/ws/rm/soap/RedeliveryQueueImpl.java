begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|DestinationSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMCaptureInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMContextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMMessageConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RedeliveryQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RetryStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|manager
operator|.
name|RetryPolicyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceType
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|RedeliveryQueueImpl
implements|implements
name|RedeliveryQueue
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|RedeliveryQueueImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
argument_list|>
name|candidates
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
argument_list|>
name|suspendedCandidates
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|RMManager
name|manager
decl_stmt|;
specifier|private
name|int
name|undeliveredCount
decl_stmt|;
specifier|public
name|RedeliveryQueueImpl
parameter_list|(
name|RMManager
name|m
parameter_list|)
block|{
name|manager
operator|=
name|m
expr_stmt|;
block|}
specifier|public
name|RMManager
name|getManager
parameter_list|()
block|{
return|return
name|manager
return|;
block|}
specifier|public
name|void
name|setManager
parameter_list|(
name|RMManager
name|m
parameter_list|)
block|{
name|manager
operator|=
name|m
expr_stmt|;
block|}
specifier|public
name|void
name|addUndelivered
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|cacheUndelivered
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param seq the sequence under consideration      * @return the number of undelivered messages for that sequence      */
specifier|public
specifier|synchronized
name|int
name|countUndelivered
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
block|{
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
name|sequenceCandidates
init|=
name|getSequenceCandidates
argument_list|(
name|seq
argument_list|)
decl_stmt|;
return|return
name|sequenceCandidates
operator|==
literal|null
condition|?
literal|0
else|:
name|sequenceCandidates
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|countUndelivered
parameter_list|()
block|{
return|return
name|undeliveredCount
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
literal|0
operator|==
name|getUndelivered
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|purgeAll
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
block|{
name|Collection
argument_list|<
name|Long
argument_list|>
name|purged
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Start purging redeliver candidates."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
name|sequenceCandidates
init|=
name|getSequenceCandidates
argument_list|(
name|seq
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|sequenceCandidates
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|sequenceCandidates
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|RedeliverCandidate
name|candidate
init|=
name|sequenceCandidates
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|m
init|=
name|candidate
operator|.
name|getNumber
argument_list|()
decl_stmt|;
name|sequenceCandidates
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|candidate
operator|.
name|resolved
argument_list|()
expr_stmt|;
name|undeliveredCount
operator|--
expr_stmt|;
name|purged
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sequenceCandidates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|candidates
operator|.
name|remove
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Completed purging redeliver candidates."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|purged
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RMStore
name|store
init|=
name|manager
operator|.
name|getStore
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|store
condition|)
block|{
name|store
operator|.
name|removeMessages
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|purged
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|getUndeliveredMessageNumbers
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|undelivered
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
name|sequenceCandidates
init|=
name|getSequenceCandidates
argument_list|(
name|seq
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|sequenceCandidates
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sequenceCandidates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RedeliverCandidate
name|candidate
init|=
name|sequenceCandidates
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RMProperties
name|properties
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|candidate
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SequenceType
name|st
init|=
name|properties
operator|.
name|getSequence
argument_list|()
decl_stmt|;
name|undelivered
operator|.
name|add
argument_list|(
name|st
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|undelivered
return|;
block|}
comment|/**      * @param seq the sequence under consideration      * @return the list of resend candidates for that sequence      * @pre called with mutex held      */
specifier|protected
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
name|getSequenceCandidates
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
block|{
return|return
name|getSequenceCandidates
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @param key the sequence identifier under consideration      * @return the list of resend candidates for that sequence      * @pre called with mutex held      */
specifier|protected
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
name|getSequenceCandidates
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
name|sc
init|=
name|candidates
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|sc
condition|)
block|{
name|sc
operator|=
name|suspendedCandidates
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|sc
return|;
block|}
comment|/**      * @param key the sequence identifier under consideration      * @return true if the sequence is currently suspended; false otherwise      * @pre called with mutex held      */
specifier|protected
name|boolean
name|isSequenceSuspended
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|suspendedCandidates
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|RetryStatus
name|getRedeliveryStatus
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|,
name|long
name|num
parameter_list|)
block|{
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
name|sequenceCandidates
init|=
name|getSequenceCandidates
argument_list|(
name|seq
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|sequenceCandidates
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sequenceCandidates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RedeliverCandidate
name|candidate
init|=
name|sequenceCandidates
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RMProperties
name|properties
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|candidate
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SequenceType
name|st
init|=
name|properties
operator|.
name|getSequence
argument_list|()
decl_stmt|;
if|if
condition|(
name|num
operator|==
name|st
operator|.
name|getMessageNumber
argument_list|()
condition|)
block|{
return|return
name|candidate
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|RetryStatus
argument_list|>
name|getRedeliveryStatuses
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|RetryStatus
argument_list|>
name|cp
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
name|sequenceCandidates
init|=
name|getSequenceCandidates
argument_list|(
name|seq
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|sequenceCandidates
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sequenceCandidates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RedeliverCandidate
name|candidate
init|=
name|sequenceCandidates
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RMProperties
name|properties
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|candidate
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SequenceType
name|st
init|=
name|properties
operator|.
name|getSequence
argument_list|()
decl_stmt|;
name|cp
operator|.
name|put
argument_list|(
name|st
operator|.
name|getMessageNumber
argument_list|()
argument_list|,
name|candidate
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cp
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
block|{      }
specifier|public
name|void
name|stop
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
name|sequenceCandidates
init|=
name|getSequenceCandidates
argument_list|(
name|seq
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|sequenceCandidates
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|sequenceCandidates
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|RedeliverCandidate
name|candidate
init|=
name|sequenceCandidates
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|candidate
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Cancelled redeliveriss for sequence {0}."
argument_list|,
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|suspend
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|String
name|key
init|=
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
name|sequenceCandidates
init|=
name|candidates
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|sequenceCandidates
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|sequenceCandidates
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|RedeliverCandidate
name|candidate
init|=
name|sequenceCandidates
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|candidate
operator|.
name|suspend
argument_list|()
expr_stmt|;
block|}
name|suspendedCandidates
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|sequenceCandidates
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Suspended redeliveris for sequence {0}."
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|resume
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|String
name|key
init|=
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
name|sequenceCandidates
init|=
name|suspendedCandidates
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|sequenceCandidates
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sequenceCandidates
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RedeliverCandidate
name|candidate
init|=
name|sequenceCandidates
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|candidate
operator|.
name|resume
argument_list|()
expr_stmt|;
block|}
name|candidates
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|sequenceCandidates
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Resumed redeliveries for sequence {0}."
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Accepts a new resend candidate.      *      * @param ctx the message context.      * @return ResendCandidate      */
specifier|protected
name|RedeliverCandidate
name|cacheUndelivered
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|RMProperties
name|rmps
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SequenceType
name|st
init|=
name|rmps
operator|.
name|getSequence
argument_list|()
decl_stmt|;
name|Identifier
name|sid
init|=
name|st
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|sid
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|RedeliverCandidate
name|candidate
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
name|sequenceCandidates
init|=
name|getSequenceCandidates
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|sequenceCandidates
condition|)
block|{
name|sequenceCandidates
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|candidates
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|sequenceCandidates
argument_list|)
expr_stmt|;
block|}
name|candidate
operator|=
name|getRedeliverCandidate
argument_list|(
name|st
argument_list|,
name|sequenceCandidates
argument_list|)
expr_stmt|;
if|if
condition|(
name|candidate
operator|==
literal|null
condition|)
block|{
name|candidate
operator|=
operator|new
name|RedeliverCandidate
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSequenceSuspended
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|candidate
operator|.
name|suspend
argument_list|()
expr_stmt|;
block|}
name|sequenceCandidates
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
name|undeliveredCount
operator|++
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Cached undelivered message."
argument_list|)
expr_stmt|;
return|return
name|candidate
return|;
block|}
specifier|private
name|RedeliverCandidate
name|getRedeliverCandidate
parameter_list|(
name|SequenceType
name|st
parameter_list|,
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
name|rcs
parameter_list|)
block|{
comment|// assume the size of candidates to be relatively small; otherwise we should use message numbers as keys
for|for
control|(
name|RedeliverCandidate
name|rc
range|:
name|rcs
control|)
block|{
if|if
condition|(
name|st
operator|.
name|getMessageNumber
argument_list|()
operator|==
name|rc
operator|.
name|getNumber
argument_list|()
condition|)
block|{
return|return
name|rc
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|purgeDelivered
parameter_list|(
name|RedeliverCandidate
name|candidate
parameter_list|)
block|{
name|RMProperties
name|rmps
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|candidate
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SequenceType
name|st
init|=
name|rmps
operator|.
name|getSequence
argument_list|()
decl_stmt|;
name|Identifier
name|sid
init|=
name|st
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|sid
operator|.
name|getValue
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
name|sequenceCandidates
init|=
name|getSequenceCandidates
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|sequenceCandidates
condition|)
block|{
comment|// TODO use a constant op instead of this inefficient linear op
name|sequenceCandidates
operator|.
name|remove
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
name|undeliveredCount
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|sequenceCandidates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|candidates
operator|.
name|remove
argument_list|(
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Purged delivered message."
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return a map relating sequence ID to a lists of un-acknowledged messages      *         for that sequence      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RedeliverCandidate
argument_list|>
argument_list|>
name|getUndelivered
parameter_list|()
block|{
return|return
name|candidates
return|;
block|}
specifier|private
specifier|static
name|InterceptorChain
name|getRedeliveryInterceptorChain
parameter_list|(
name|Message
name|m
parameter_list|,
name|String
name|phase
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|m
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|Endpoint
name|ep
init|=
name|exchange
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|Bus
name|bus
init|=
name|exchange
operator|.
name|getBus
argument_list|()
decl_stmt|;
name|PhaseManager
name|pm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PhaseManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|phases
init|=
operator|new
name|TreeSet
argument_list|<
name|Phase
argument_list|>
argument_list|(
name|pm
operator|.
name|getInPhases
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Phase
argument_list|>
name|it
init|=
name|phases
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Phase
name|p
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|phase
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|PhaseInterceptorChain
name|chain
init|=
operator|new
name|PhaseInterceptorChain
argument_list|(
name|phases
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|il
init|=
name|ep
operator|.
name|getInInterceptors
argument_list|()
decl_stmt|;
name|addInterceptors
argument_list|(
name|chain
argument_list|,
name|il
argument_list|)
expr_stmt|;
name|il
operator|=
name|ep
operator|.
name|getService
argument_list|()
operator|.
name|getInInterceptors
argument_list|()
expr_stmt|;
name|addInterceptors
argument_list|(
name|chain
argument_list|,
name|il
argument_list|)
expr_stmt|;
name|il
operator|=
name|ep
operator|.
name|getBinding
argument_list|()
operator|.
name|getInInterceptors
argument_list|()
expr_stmt|;
name|addInterceptors
argument_list|(
name|chain
argument_list|,
name|il
argument_list|)
expr_stmt|;
name|il
operator|=
name|bus
operator|.
name|getInInterceptors
argument_list|()
expr_stmt|;
name|addInterceptors
argument_list|(
name|chain
argument_list|,
name|il
argument_list|)
expr_stmt|;
if|if
condition|(
name|ep
operator|.
name|getService
argument_list|()
operator|.
name|getDataBinding
argument_list|()
operator|instanceof
name|InterceptorProvider
condition|)
block|{
name|il
operator|=
operator|(
operator|(
name|InterceptorProvider
operator|)
name|ep
operator|.
name|getService
argument_list|()
operator|.
name|getDataBinding
argument_list|()
operator|)
operator|.
name|getInInterceptors
argument_list|()
expr_stmt|;
name|addInterceptors
argument_list|(
name|chain
argument_list|,
name|il
argument_list|)
expr_stmt|;
block|}
return|return
name|chain
return|;
block|}
specifier|private
specifier|static
name|void
name|addInterceptors
parameter_list|(
name|PhaseInterceptorChain
name|chain
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|il
parameter_list|)
block|{
for|for
control|(
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|i
range|:
name|il
control|)
block|{
specifier|final
name|String
name|iname
init|=
name|i
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"OneWayProcessorInterceptor"
operator|.
name|equals
argument_list|(
name|iname
argument_list|)
operator|||
literal|"MAPAggregatorImpl"
operator|.
name|equals
argument_list|(
name|iname
argument_list|)
operator|||
literal|"RMInInterceptor"
operator|.
name|equals
argument_list|(
name|iname
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|chain
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|//TODO refactor this class to unify its functionality with that of ResendCandidate
specifier|protected
class|class
name|RedeliverCandidate
implements|implements
name|Runnable
implements|,
name|RetryStatus
block|{
specifier|private
name|Message
name|message
decl_stmt|;
specifier|private
name|long
name|number
decl_stmt|;
specifier|private
name|Date
name|next
decl_stmt|;
specifier|private
name|TimerTask
name|nextTask
decl_stmt|;
specifier|private
name|int
name|retries
decl_stmt|;
specifier|private
name|int
name|maxRetries
decl_stmt|;
specifier|private
name|long
name|nextInterval
decl_stmt|;
specifier|private
name|long
name|backoff
decl_stmt|;
specifier|private
name|boolean
name|pending
decl_stmt|;
specifier|private
name|boolean
name|suspended
decl_stmt|;
specifier|protected
name|RedeliverCandidate
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|message
operator|=
name|m
expr_stmt|;
if|if
condition|(
name|message
operator|instanceof
name|SoapMessage
condition|)
block|{
comment|// remove old message headers like WSS headers
operator|(
operator|(
name|SoapMessage
operator|)
name|message
operator|)
operator|.
name|getHeaders
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|RetryPolicyType
name|rmrp
init|=
literal|null
operator|!=
name|manager
operator|.
name|getDestinationPolicy
argument_list|()
condition|?
name|manager
operator|.
name|getDestinationPolicy
argument_list|()
operator|.
name|getRetryPolicy
argument_list|()
else|:
literal|null
decl_stmt|;
name|long
name|baseRedeliveryInterval
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|DEFAULT_BASE_REDELIVERY_INTERVAL
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|rmrp
operator|&&
name|rmrp
operator|.
name|getInterval
argument_list|()
operator|>
literal|0L
condition|)
block|{
name|baseRedeliveryInterval
operator|=
name|rmrp
operator|.
name|getInterval
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rmrp
operator|==
literal|null
operator|||
literal|"ExponentialBackoff"
operator|.
name|equals
argument_list|(
name|rmrp
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
condition|)
block|{
name|backoff
operator|=
name|RedeliveryQueue
operator|.
name|DEFAULT_EXPONENTIAL_BACKOFF
expr_stmt|;
block|}
else|else
block|{
name|backoff
operator|=
literal|1
expr_stmt|;
block|}
name|next
operator|=
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|baseRedeliveryInterval
argument_list|)
expr_stmt|;
name|nextInterval
operator|=
name|baseRedeliveryInterval
operator|*
name|backoff
expr_stmt|;
name|maxRetries
operator|=
literal|null
operator|!=
name|rmrp
condition|?
name|rmrp
operator|.
name|getMaxRetries
argument_list|()
else|:
literal|0
expr_stmt|;
name|RMProperties
name|rmprops
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|rmprops
condition|)
block|{
name|number
operator|=
name|rmprops
operator|.
name|getSequence
argument_list|()
operator|.
name|getMessageNumber
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|manager
operator|.
name|getTimer
argument_list|()
operator|&&
name|maxRetries
operator|!=
literal|0
condition|)
block|{
name|schedule
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Initiate redelivery asynchronsly.          *          */
specifier|protected
name|void
name|initiate
parameter_list|()
block|{
name|pending
operator|=
literal|true
expr_stmt|;
name|Endpoint
name|ep
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Executor
name|executor
init|=
name|ep
operator|.
name|getExecutor
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|executor
condition|)
block|{
name|executor
operator|=
name|ep
operator|.
name|getService
argument_list|()
operator|.
name|getExecutor
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Using service executor {0}"
argument_list|,
name|executor
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Using endpoint executor {0}"
argument_list|,
name|executor
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|executor
operator|.
name|execute
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"RESEND_INITIATION_FAILED_MSG"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|isPending
argument_list|()
condition|)
block|{
comment|// redeliver
name|redeliver
argument_list|()
expr_stmt|;
name|purgeDelivered
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|resolved
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"redelivery failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|attempted
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|redeliver
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"Redelivering ... for "
operator|+
operator|(
literal|1
operator|+
name|retries
operator|)
argument_list|)
expr_stmt|;
name|String
name|restartingPhase
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|removeContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// clean-up message for redelivery
name|closeStreamResources
argument_list|()
expr_stmt|;
name|message
operator|.
name|removeContent
argument_list|(
name|Node
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|CachedOutputStream
name|cos
init|=
operator|(
name|CachedOutputStream
operator|)
name|message
operator|.
name|get
argument_list|(
name|RMMessageConstants
operator|.
name|SAVED_CONTENT
argument_list|)
decl_stmt|;
name|is
operator|=
name|cos
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|message
operator|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|createMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|restartingPhase
operator|=
name|Phase
operator|.
name|POST_STREAM
expr_stmt|;
comment|// skip some interceptor chain phases for redelivery
name|InterceptorChain
name|chain
init|=
name|getRedeliveryInterceptorChain
argument_list|(
name|message
argument_list|,
name|restartingPhase
argument_list|)
decl_stmt|;
name|ListIterator
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|iterator
init|=
name|chain
operator|.
name|getIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|incept
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|incept
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RMCaptureInInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|chain
operator|.
name|remove
argument_list|(
name|incept
argument_list|)
expr_stmt|;
block|}
block|}
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|setInMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|setInterceptorChain
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ex
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
specifier|public
name|long
name|getNumber
parameter_list|()
block|{
return|return
name|number
return|;
block|}
specifier|public
name|Date
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
specifier|public
name|Date
name|getPrevious
parameter_list|()
block|{
if|if
condition|(
name|retries
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|Date
argument_list|(
name|next
operator|.
name|getTime
argument_list|()
operator|-
name|nextInterval
operator|/
name|backoff
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|getRetries
parameter_list|()
block|{
return|return
name|retries
return|;
block|}
specifier|public
name|int
name|getMaxRetries
parameter_list|()
block|{
return|return
name|maxRetries
return|;
block|}
specifier|public
name|long
name|getNextInterval
parameter_list|()
block|{
return|return
name|nextInterval
return|;
block|}
specifier|public
name|long
name|getBackoff
parameter_list|()
block|{
return|return
name|backoff
return|;
block|}
specifier|public
name|boolean
name|isPending
parameter_list|()
block|{
return|return
name|pending
return|;
block|}
specifier|public
name|boolean
name|isSuspended
parameter_list|()
block|{
return|return
name|suspended
return|;
block|}
comment|/**          * the message has been delivered to the application          */
specifier|protected
specifier|synchronized
name|void
name|resolved
parameter_list|()
block|{
name|pending
operator|=
literal|false
expr_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|nextTask
condition|)
block|{
name|nextTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Cancel further redelivery (although not successfully delivered).          */
specifier|protected
name|void
name|cancel
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|!=
name|nextTask
condition|)
block|{
name|nextTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|closeStreamResources
argument_list|()
expr_stmt|;
name|releaseSavedMessage
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|suspend
parameter_list|()
block|{
name|suspended
operator|=
literal|true
expr_stmt|;
name|pending
operator|=
literal|false
expr_stmt|;
comment|//TODO release the message and later reload it upon resume
comment|//cancel();
if|if
condition|(
literal|null
operator|!=
name|nextTask
condition|)
block|{
name|nextTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|resume
parameter_list|()
block|{
name|suspended
operator|=
literal|false
expr_stmt|;
name|next
operator|=
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|attempted
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|releaseSavedMessage
parameter_list|()
block|{
name|CachedOutputStream
name|saved
init|=
operator|(
name|CachedOutputStream
operator|)
name|message
operator|.
name|remove
argument_list|(
name|RMMessageConstants
operator|.
name|SAVED_CONTENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|saved
operator|!=
literal|null
condition|)
block|{
name|saved
operator|.
name|releaseTempFileHold
argument_list|()
expr_stmt|;
try|try
block|{
name|saved
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|// Any unclosed resources must be closed to release the temp files.
name|Closeable
name|closeable
init|=
operator|(
name|Closeable
operator|)
name|message
operator|.
name|get
argument_list|(
name|RMMessageConstants
operator|.
name|ATTACHMENTS_CLOSEABLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|closeable
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
comment|/*          * Close all stream-like resources stored in the message          */
specifier|private
name|void
name|closeStreamResources
parameter_list|()
block|{
name|InputStream
name|oin
init|=
name|message
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|oin
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|oin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|message
operator|.
name|removeContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|XMLStreamReader
name|oreader
init|=
name|message
operator|.
name|getContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|oreader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|oreader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|message
operator|.
name|removeContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|?
argument_list|>
name|olist
init|=
name|message
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|olist
operator|!=
literal|null
operator|&&
name|olist
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Object
name|o
init|=
name|olist
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|XMLStreamReader
condition|)
block|{
name|oreader
operator|=
operator|(
name|XMLStreamReader
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|StaxSource
condition|)
block|{
name|oreader
operator|=
operator|(
operator|(
name|StaxSource
operator|)
name|o
operator|)
operator|.
name|getXMLStreamReader
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|oreader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|oreader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|message
operator|.
name|removeContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * @return associated message context          */
specifier|protected
name|Message
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
comment|/**          * A resend has been attempted. Schedule the next attempt.          */
specifier|protected
specifier|synchronized
name|void
name|attempted
parameter_list|()
block|{
name|pending
operator|=
literal|false
expr_stmt|;
name|retries
operator|++
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|next
operator|&&
name|maxRetries
operator|!=
name|retries
condition|)
block|{
name|next
operator|=
operator|new
name|Date
argument_list|(
name|next
operator|.
name|getTime
argument_list|()
operator|+
name|nextInterval
argument_list|)
expr_stmt|;
name|nextInterval
operator|*=
name|backoff
expr_stmt|;
name|schedule
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|final
specifier|synchronized
name|void
name|schedule
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|manager
operator|.
name|getTimer
argument_list|()
condition|)
block|{
return|return;
block|}
class|class
name|RedeliverTask
extends|extends
name|TimerTask
block|{
name|RedeliverCandidate
name|candidate
decl_stmt|;
name|RedeliverTask
parameter_list|(
name|RedeliverCandidate
name|c
parameter_list|)
block|{
name|candidate
operator|=
name|c
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|candidate
operator|.
name|isPending
argument_list|()
condition|)
block|{
name|candidate
operator|.
name|initiate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|nextTask
operator|=
operator|new
name|RedeliverTask
argument_list|(
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|getTimer
argument_list|()
operator|.
name|schedule
argument_list|(
name|nextTask
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SCHEDULE_RESEND_FAILED_MSG"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

