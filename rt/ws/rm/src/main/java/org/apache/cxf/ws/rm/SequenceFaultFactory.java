begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceAcknowledgement
import|;
end_import

begin_comment
comment|/**  * Utility class to construct SequenceFaults.  */
end_comment

begin_class
class|class
name|SequenceFaultFactory
block|{
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|SequenceFaultFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RMConstants
name|constants
decl_stmt|;
name|SequenceFaultFactory
parameter_list|(
name|RMConstants
name|consts
parameter_list|)
block|{
name|constants
operator|=
name|consts
expr_stmt|;
block|}
name|SequenceFault
name|createUnknownSequenceFault
parameter_list|(
name|Identifier
name|sid
parameter_list|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"UNKNOWN_SEQ_EXC"
argument_list|,
name|BUNDLE
argument_list|)
decl_stmt|;
name|SequenceFault
name|fault
init|=
operator|new
name|SequenceFault
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|fault
operator|.
name|setDetail
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setSender
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setFaultCode
argument_list|(
name|constants
operator|.
name|getUnknownSequenceFaultCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fault
return|;
block|}
name|SequenceFault
name|createSequenceTerminatedFault
parameter_list|(
name|Identifier
name|sid
parameter_list|,
name|boolean
name|sender
parameter_list|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"SEQ_TERMINATED_EXC"
argument_list|,
name|BUNDLE
argument_list|)
decl_stmt|;
name|SequenceFault
name|fault
init|=
operator|new
name|SequenceFault
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|fault
operator|.
name|setDetail
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setSender
argument_list|(
name|sender
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setFaultCode
argument_list|(
name|constants
operator|.
name|getSequenceTerminatedFaultCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fault
return|;
block|}
name|SequenceFault
name|createInvalidAcknowledgementFault
parameter_list|(
name|SequenceAcknowledgement
name|ack
parameter_list|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"INVALID_ACK_EXC"
argument_list|,
name|BUNDLE
argument_list|)
decl_stmt|;
name|SequenceFault
name|fault
init|=
operator|new
name|SequenceFault
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|fault
operator|.
name|setDetail
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setSender
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setFaultCode
argument_list|(
name|constants
operator|.
name|getInvalidAcknowledgmentFaultCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fault
return|;
block|}
name|SequenceFault
name|createMessageNumberRolloverFault
parameter_list|(
name|Identifier
name|sid
parameter_list|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"MESSAGE_NR_ROLLOVER_EXC"
argument_list|,
name|BUNDLE
argument_list|)
decl_stmt|;
name|SequenceFault
name|fault
init|=
operator|new
name|SequenceFault
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|fault
operator|.
name|setDetail
argument_list|(
name|sid
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setSender
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setFaultCode
argument_list|(
name|constants
operator|.
name|getMessageNumberRolloverFaultCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fault
return|;
block|}
name|SequenceFault
name|createCreateSequenceRefusedFault
parameter_list|()
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"CREATE_SEQ_REFUSED"
argument_list|,
name|BUNDLE
argument_list|)
decl_stmt|;
name|SequenceFault
name|fault
init|=
operator|new
name|SequenceFault
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|fault
operator|.
name|setSender
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setFaultCode
argument_list|(
name|constants
operator|.
name|getCreateSequenceRefusedFaultCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fault
return|;
block|}
block|}
end_class

end_unit

