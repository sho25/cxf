begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_comment
comment|/**  * Supported protocol variations.  */
end_comment

begin_enum
specifier|public
enum|enum
name|ProtocolVariation
block|{
name|RM10WSA200408
parameter_list|(
name|EncoderDecoder10Impl
operator|.
name|INSTANCE
parameter_list|,
name|RM10Constants
operator|.
name|INSTANCE
parameter_list|)
operator|,
constructor|RM10WSA200508(EncoderDecoder10AImpl.INSTANCE
operator|,
constructor|RM10Constants.INSTANCE
block|)
enum|,
name|RM11WSA200508
argument_list|(
name|EncoderDecoder11Impl
operator|.
name|INSTANCE
argument_list|,
name|RM11Constants
operator|.
name|INSTANCE
argument_list|)
enum|;
end_enum

begin_decl_stmt
specifier|private
specifier|final
name|EncoderDecoder
name|codec
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|private
specifier|final
name|RMConstants
name|constants
decl_stmt|;
end_decl_stmt

begin_constructor
specifier|private
name|ProtocolVariation
parameter_list|(
name|EncoderDecoder
name|ed
parameter_list|,
name|RMConstants
name|rmc
parameter_list|)
block|{
name|codec
operator|=
name|ed
expr_stmt|;
name|constants
operator|=
name|rmc
expr_stmt|;
block|}
end_constructor

begin_function
specifier|public
name|EncoderDecoder
name|getCodec
parameter_list|()
block|{
return|return
name|codec
return|;
block|}
end_function

begin_function
specifier|public
name|RMConstants
name|getConstants
parameter_list|()
block|{
return|return
name|constants
return|;
block|}
end_function

begin_function
specifier|public
name|String
name|getWSRMNamespace
parameter_list|()
block|{
return|return
name|codec
operator|.
name|getWSRMNamespace
argument_list|()
return|;
block|}
end_function

begin_function
specifier|public
name|String
name|getWSANamespace
parameter_list|()
block|{
return|return
name|codec
operator|.
name|getWSANamespace
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**      * Get the information for a supported version of WS-ReliableMessaging and WS-Addressing.      *       * @param wsrm WS-RM namespace URI      * @param wsa WS-A namespace URI      * @return variant (<code>null</code> if not a supported version)      */
end_comment

begin_function
specifier|public
specifier|static
name|ProtocolVariation
name|findVariant
parameter_list|(
name|String
name|wsrm
parameter_list|,
name|String
name|wsa
parameter_list|)
block|{
for|for
control|(
name|ProtocolVariation
name|variant
range|:
name|ProtocolVariation
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|variant
operator|.
name|getWSRMNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|wsrm
argument_list|)
operator|&&
name|variant
operator|.
name|getWSANamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|wsa
argument_list|)
condition|)
block|{
return|return
name|variant
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

unit|}
end_unit

