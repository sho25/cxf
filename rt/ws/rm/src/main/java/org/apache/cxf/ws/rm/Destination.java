begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingPropertiesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMStore
import|;
end_import

begin_class
specifier|public
class|class
name|Destination
extends|extends
name|AbstractEndpoint
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DestinationSequence
argument_list|>
name|map
decl_stmt|;
name|Destination
parameter_list|(
name|RMEndpoint
name|reliableEndpoint
parameter_list|)
block|{
name|super
argument_list|(
name|reliableEndpoint
argument_list|)
expr_stmt|;
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DestinationSequence
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DestinationSequence
name|getSequence
parameter_list|(
name|Identifier
name|id
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|id
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|DestinationSequence
argument_list|>
name|getAllSequences
parameter_list|()
block|{
return|return
name|CastUtils
operator|.
name|cast
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|addSequence
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
block|{
name|addSequence
argument_list|(
name|seq
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addSequence
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|,
name|boolean
name|persist
parameter_list|)
block|{
name|seq
operator|.
name|setDestination
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|seq
argument_list|)
expr_stmt|;
if|if
condition|(
name|persist
condition|)
block|{
name|RMStore
name|store
init|=
name|getReliableEndpoint
argument_list|()
operator|.
name|getManager
argument_list|()
operator|.
name|getStore
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|store
condition|)
block|{
name|store
operator|.
name|createDestinationSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|removeSequence
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|RMStore
name|store
init|=
name|getReliableEndpoint
argument_list|()
operator|.
name|getManager
argument_list|()
operator|.
name|getStore
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|store
condition|)
block|{
name|store
operator|.
name|removeDestinationSequence
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Acknowledges receipt of a message. If the message is the last in the      * sequence, sends an out-of-band SequenceAcknowledgement unless there a      * response will be sent to the acksTo address onto which the acknowldegment      * can be piggybacked.      *       * @param sequenceType the sequenceType object that includes identifier and      *            message number (and possibly a lastMessage element) for the      *            message to be acknowledged)      * @param replyToAddress the replyTo address of the message that carried      *            this sequence information      * @throws SequenceFault if the sequence specified in      *<code>sequenceType</code> does not exist      */
specifier|public
name|void
name|acknowledge
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
name|SequenceType
name|sequenceType
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
operator|.
name|getSequence
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|sequenceType
condition|)
block|{
return|return;
block|}
name|DestinationSequence
name|seq
init|=
name|getSequence
argument_list|(
name|sequenceType
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|seq
condition|)
block|{
name|seq
operator|.
name|applyDeliveryAssurance
argument_list|(
name|sequenceType
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|.
name|acknowledge
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|sequenceType
operator|.
name|getLastMessage
argument_list|()
condition|)
block|{
name|seq
operator|.
name|setLastMessageNumber
argument_list|(
name|sequenceType
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|ackImmediately
argument_list|(
name|seq
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SequenceFaultFactory
name|sff
init|=
operator|new
name|SequenceFaultFactory
argument_list|()
decl_stmt|;
throw|throw
name|sff
operator|.
name|createUnknownSequenceFault
argument_list|(
name|sequenceType
operator|.
name|getIdentifier
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|void
name|ackRequested
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
comment|// TODO
name|Collection
argument_list|<
name|AckRequestedType
argument_list|>
name|ars
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
operator|.
name|getAcksRequested
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ars
condition|)
block|{
return|return;
block|}
for|for
control|(
name|AckRequestedType
name|ar
range|:
name|ars
control|)
block|{
name|Identifier
name|id
init|=
name|ar
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|DestinationSequence
name|seq
init|=
name|getSequence
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|seq
condition|)
block|{
continue|continue;
block|}
name|ackImmediately
argument_list|(
name|seq
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|ackImmediately
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|RMException
block|{
name|seq
operator|.
name|scheduleImmediateAcknowledgement
argument_list|()
expr_stmt|;
comment|// if we cannot expect an outgoing message to which the
comment|// acknowledgement
comment|// can be added we need to send an out-of-band
comment|// SequenceAcknowledgement message
name|AddressingPropertiesImpl
name|maps
init|=
name|RMContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|replyToAddress
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|maps
operator|.
name|getReplyTo
argument_list|()
condition|)
block|{
name|replyToAddress
operator|=
name|maps
operator|.
name|getReplyTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|seq
operator|.
name|getAcksTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|replyToAddress
argument_list|)
operator|||
name|seq
operator|.
name|canPiggybackAckOnPartialResponse
argument_list|()
operator|)
condition|)
block|{
name|getReliableEndpoint
argument_list|()
operator|.
name|getProxy
argument_list|()
operator|.
name|acknowledge
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

