begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingPropertiesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|AckRequestedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceType
import|;
end_import

begin_class
specifier|public
class|class
name|Destination
extends|extends
name|AbstractEndpoint
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DestinationSequence
argument_list|>
name|map
decl_stmt|;
name|Destination
parameter_list|(
name|RMEndpoint
name|reliableEndpoint
parameter_list|)
block|{
name|super
argument_list|(
name|reliableEndpoint
argument_list|)
expr_stmt|;
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DestinationSequence
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DestinationSequence
name|getSequence
parameter_list|(
name|Identifier
name|id
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|id
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|DestinationSequence
argument_list|>
name|getAllSequences
parameter_list|()
block|{
return|return
name|CastUtils
operator|.
name|cast
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|addSequence
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
block|{
name|addSequence
argument_list|(
name|seq
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addSequence
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|,
name|boolean
name|persist
parameter_list|)
block|{
name|seq
operator|.
name|setDestination
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|seq
argument_list|)
expr_stmt|;
if|if
condition|(
name|persist
condition|)
block|{
name|RMStore
name|store
init|=
name|getReliableEndpoint
argument_list|()
operator|.
name|getManager
argument_list|()
operator|.
name|getStore
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|store
condition|)
block|{
name|store
operator|.
name|createDestinationSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|removeSequence
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|RMStore
name|store
init|=
name|getReliableEndpoint
argument_list|()
operator|.
name|getManager
argument_list|()
operator|.
name|getStore
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|store
condition|)
block|{
name|store
operator|.
name|removeDestinationSequence
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Acknowledges receipt of a message. If the message is the last in the      * sequence, sends an out-of-band SequenceAcknowledgement unless there a      * response will be sent to the acksTo address onto which the acknowldegment      * can be piggybacked.      *       * @param sequenceType the sequenceType object that includes identifier and      *            message number (and possibly a lastMessage element) for the      *            message to be acknowledged)      * @param replyToAddress the replyTo address of the message that carried      *            this sequence information      * @throws SequenceFault if the sequence specified in      *<code>sequenceType</code> does not exist      */
specifier|public
name|void
name|acknowledge
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
name|RMProperties
name|rmps
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SequenceType
name|sequenceType
init|=
name|rmps
operator|.
name|getSequence
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|sequenceType
condition|)
block|{
return|return;
block|}
name|DestinationSequence
name|seq
init|=
name|getSequence
argument_list|(
name|sequenceType
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|seq
condition|)
block|{
if|if
condition|(
name|seq
operator|.
name|applyDeliveryAssurance
argument_list|(
name|sequenceType
operator|.
name|getMessageNumber
argument_list|()
argument_list|,
name|message
argument_list|)
condition|)
block|{
name|seq
operator|.
name|acknowledge
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|rmps
operator|.
name|getCloseSequence
argument_list|()
condition|)
block|{
name|seq
operator|.
name|setLastMessageNumber
argument_list|(
name|sequenceType
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|ackImmediately
argument_list|(
name|seq
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|abort
argument_list|()
expr_stmt|;
name|Conduit
name|conduit
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getDestination
argument_list|()
operator|.
name|getBackChannel
argument_list|(
name|message
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|conduit
operator|!=
literal|null
condition|)
block|{
comment|//for a one-way, the back channel could be
comment|//null if it knows it cannot send anything.
name|Message
name|partial
init|=
name|createMessage
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
decl_stmt|;
name|partial
operator|.
name|remove
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
expr_stmt|;
name|partial
operator|.
name|setExchange
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
name|conduit
operator|.
name|prepare
argument_list|(
name|partial
argument_list|)
expr_stmt|;
name|conduit
operator|.
name|close
argument_list|(
name|partial
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|RMConstants
name|consts
init|=
name|getReliableEndpoint
argument_list|()
operator|.
name|getEncoderDecoder
argument_list|()
operator|.
name|getConstants
argument_list|()
decl_stmt|;
name|SequenceFaultFactory
name|sff
init|=
operator|new
name|SequenceFaultFactory
argument_list|(
name|consts
argument_list|)
decl_stmt|;
throw|throw
name|sff
operator|.
name|createUnknownSequenceFault
argument_list|(
name|sequenceType
operator|.
name|getIdentifier
argument_list|()
argument_list|)
throw|;
block|}
name|RMStore
name|store
init|=
name|getReliableEndpoint
argument_list|()
operator|.
name|getManager
argument_list|()
operator|.
name|getStore
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|store
condition|)
block|{
name|CachedOutputStream
name|saved
init|=
operator|(
name|CachedOutputStream
operator|)
name|message
operator|.
name|get
argument_list|(
name|RMMessageConstants
operator|.
name|SAVED_CONTENT
argument_list|)
decl_stmt|;
name|RMMessage
name|msg
init|=
operator|new
name|RMMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setMessageNumber
argument_list|(
name|sequenceType
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setContent
argument_list|(
name|saved
argument_list|)
expr_stmt|;
name|store
operator|.
name|persistIncoming
argument_list|(
name|seq
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|ackRequested
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
comment|// TODO
name|Collection
argument_list|<
name|AckRequestedType
argument_list|>
name|ars
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
operator|.
name|getAcksRequested
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ars
condition|)
block|{
return|return;
block|}
for|for
control|(
name|AckRequestedType
name|ar
range|:
name|ars
control|)
block|{
name|Identifier
name|id
init|=
name|ar
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|DestinationSequence
name|seq
init|=
name|getSequence
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|seq
condition|)
block|{
continue|continue;
block|}
name|ackImmediately
argument_list|(
name|seq
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|ackImmediately
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|RMException
block|{
name|seq
operator|.
name|scheduleImmediateAcknowledgement
argument_list|()
expr_stmt|;
comment|// if we cannot expect an outgoing message to which the
comment|// acknowledgement
comment|// can be added we need to send an out-of-band
comment|// SequenceAcknowledgement message
name|AddressingPropertiesImpl
name|maps
init|=
name|RMContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|replyToAddress
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|maps
operator|.
name|getReplyTo
argument_list|()
condition|)
block|{
name|replyToAddress
operator|=
name|maps
operator|.
name|getReplyTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|seq
operator|.
name|getAcksTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|replyToAddress
argument_list|)
operator|||
name|seq
operator|.
name|canPiggybackAckOnPartialResponse
argument_list|()
operator|)
condition|)
block|{
name|getReliableEndpoint
argument_list|()
operator|.
name|getProxy
argument_list|()
operator|.
name|acknowledge
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|processingComplete
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|SequenceType
name|sequenceType
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
operator|.
name|getSequence
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|sequenceType
condition|)
block|{
return|return;
block|}
name|DestinationSequence
name|seq
init|=
name|getSequence
argument_list|(
name|sequenceType
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|seq
condition|)
block|{
name|seq
operator|.
name|processingComplete
argument_list|(
name|sequenceType
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|.
name|purgeAcknowledged
argument_list|(
name|sequenceType
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Message
name|createMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Endpoint
name|ep
init|=
name|exchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Message
name|msg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ep
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
operator|new
name|MessageImpl
argument_list|()
expr_stmt|;
name|msg
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|msg
operator|=
name|ep
operator|.
name|getBinding
argument_list|()
operator|.
name|createMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
return|return
name|msg
return|;
block|}
block|}
end_class

end_unit

