begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|ContextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|MAPAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceAcknowledgement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSUtils
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|RMInInterceptor
extends|extends
name|AbstractRMInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|RMInInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|RMInInterceptor
parameter_list|()
block|{
name|addBefore
argument_list|(
name|MAPAggregator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleFault
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|message
operator|.
name|put
argument_list|(
name|MAPAggregator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|RMContextUtils
operator|.
name|getProtocolVariation
argument_list|(
name|message
argument_list|)
operator|!=
literal|null
operator|&&
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|RMMessageConstants
operator|.
name|DELIVERING_ROBUST_ONEWAY
argument_list|)
argument_list|)
condition|)
block|{
comment|// revert the delivering entry from the destination sequence
try|try
block|{
name|Destination
name|destination
init|=
name|getManager
argument_list|()
operator|.
name|getDestination
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
name|destination
operator|.
name|releaseDeliveringStatus
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RMException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Failed to revert the delivering status"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// make sure the fault is returned for an ws-rm related fault or an invalid ws-rm message
comment|// note that OneWayProcessingInterceptor handles the robust case, hence not handled here.
if|if
condition|(
name|isProtocolFault
argument_list|(
name|message
argument_list|)
operator|&&
operator|!
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|RMMessageConstants
operator|.
name|DELIVERING_ROBUST_ONEWAY
argument_list|)
argument_list|)
condition|)
block|{
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setOneWay
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|AddressingProperties
name|maps
init|=
name|ContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|maps
operator|!=
literal|null
operator|&&
operator|!
name|ContextUtils
operator|.
name|isGenericAddress
argument_list|(
name|maps
operator|.
name|getFaultTo
argument_list|()
argument_list|)
condition|)
block|{
comment|//TODO look at how we can refactor all these decoupled faultTo stuff
name|exchange
operator|.
name|setDestination
argument_list|(
name|ContextUtils
operator|.
name|createDecoupledDestination
argument_list|(
name|exchange
argument_list|,
name|maps
operator|.
name|getFaultTo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|isProtocolFault
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
operator|!
name|ContextUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
operator|&&
operator|(
name|RMContextUtils
operator|.
name|getProtocolVariation
argument_list|(
name|message
argument_list|)
operator|==
literal|null
operator|||
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|instanceof
name|SequenceFault
operator|)
return|;
block|}
specifier|protected
name|void
name|handle
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
name|LOG
operator|.
name|entering
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"handleMessage"
argument_list|)
expr_stmt|;
name|boolean
name|isServer
init|=
name|RMContextUtils
operator|.
name|isServerSide
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"isServerSide: "
operator|+
name|isServer
argument_list|)
expr_stmt|;
name|RMProperties
name|rmps
init|=
name|RMContextUtils
operator|.
name|retrieveRMProperties
argument_list|(
name|message
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// message addressing properties may be null, e.g. in case of a runtime fault
comment|// on the server side
specifier|final
name|AddressingProperties
name|maps
init|=
name|ContextUtils
operator|.
name|retrieveMAPs
argument_list|(
name|message
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|maps
condition|)
block|{
comment|//if wsrmp:RMAssertion and addressing is optional
if|if
condition|(
name|isServer
operator|&&
operator|!
name|isRMPolicyEnabled
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"WSA_REQUIRED_EXC"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
else|else
block|{
return|return;
block|}
block|}
name|String
name|action
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|maps
operator|.
name|getAction
argument_list|()
condition|)
block|{
name|action
operator|=
name|maps
operator|.
name|getAction
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Action: "
operator|+
name|action
argument_list|)
expr_stmt|;
block|}
comment|// RM does not apply to WS-Trust messages, as used by WS-SecureConversation
if|if
condition|(
name|action
operator|!=
literal|null
operator|&&
name|action
operator|.
name|contains
argument_list|(
literal|"/RST/SCT"
argument_list|)
operator|&&
operator|(
name|action
operator|.
name|startsWith
argument_list|(
name|STSUtils
operator|.
name|WST_NS_05_02
argument_list|)
operator|||
name|action
operator|.
name|startsWith
argument_list|(
name|STSUtils
operator|.
name|WST_NS_05_12
argument_list|)
operator|)
condition|)
block|{
return|return;
block|}
name|Object
name|originalRequestor
init|=
name|message
operator|.
name|get
argument_list|(
name|RMMessageConstants
operator|.
name|ORIGINAL_REQUESTOR_ROLE
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|originalRequestor
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Restoring original requestor role to: "
operator|+
name|originalRequestor
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|originalRequestor
argument_list|)
expr_stmt|;
block|}
comment|// get the wsa and wsrm namespaces from the message
name|String
name|rmUri
init|=
name|rmps
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|addrUri
init|=
name|maps
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|ProtocolVariation
name|protocol
init|=
name|ProtocolVariation
operator|.
name|findVariant
argument_list|(
name|rmUri
argument_list|,
name|addrUri
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|protocol
operator|&&
operator|!
name|MessageUtils
operator|.
name|isFault
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"WSRM_REQUIRED_EXC"
argument_list|,
name|LOG
argument_list|,
name|rmUri
argument_list|,
name|addrUri
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|RMContextUtils
operator|.
name|setProtocolVariation
argument_list|(
name|message
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
comment|// Destination destination = getManager().getDestination(message);
comment|// RMEndpoint rme = getManager().getReliableEndpoint(message);
comment|// Servant servant = new Servant(rme);
name|boolean
name|isApplicationMessage
init|=
operator|!
name|RMContextUtils
operator|.
name|isRMProtocolMessage
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"isApplicationMessage: "
operator|+
name|isApplicationMessage
argument_list|)
expr_stmt|;
comment|// for application AND out of band messages
name|RMEndpoint
name|rme
init|=
name|getManager
argument_list|()
operator|.
name|getReliableEndpoint
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|getManager
argument_list|()
operator|.
name|getDestination
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplicationMessage
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|rmps
condition|)
block|{
name|processAcknowledgments
argument_list|(
name|rme
argument_list|,
name|rmps
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|processAcknowledgmentRequests
argument_list|(
name|destination
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|processSequence
argument_list|(
name|destination
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|processDeliveryAssurance
argument_list|(
name|rmps
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ContextUtils
operator|.
name|retrieveDeferredUncorrelatedMessageAbort
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"deferred uncorrelated message abort"
argument_list|)
expr_stmt|;
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rme
operator|.
name|receivedApplicationMessage
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|rme
operator|.
name|receivedControlMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|RM10Constants
operator|.
name|SEQUENCE_ACKNOWLEDGMENT_ACTION
operator|.
name|equals
argument_list|(
name|action
argument_list|)
operator|||
name|RM11Constants
operator|.
name|SEQUENCE_ACKNOWLEDGMENT_ACTION
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|processAcknowledgments
argument_list|(
name|rme
argument_list|,
name|rmps
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RM10Constants
operator|.
name|CLOSE_SEQUENCE_ACTION
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
comment|// RM10 out-of-band CloseSequence/lastMessage is a special case; RM11 needs no special handling
name|processSequence
argument_list|(
name|destination
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|RM10Constants
operator|.
name|CREATE_SEQUENCE_ACTION
operator|.
name|equals
argument_list|(
name|action
argument_list|)
operator|||
name|RM11Constants
operator|.
name|CREATE_SEQUENCE_ACTION
operator|.
name|equals
argument_list|(
name|action
argument_list|)
operator|)
operator|&&
operator|!
name|isServer
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Processing inbound CreateSequence on client side."
argument_list|)
expr_stmt|;
name|Servant
name|servant
init|=
name|rme
operator|.
name|getServant
argument_list|()
decl_stmt|;
name|Object
name|csr
init|=
name|servant
operator|.
name|createSequence
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Proxy
name|proxy
init|=
name|rme
operator|.
name|getProxy
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|createSequenceResponse
argument_list|(
name|csr
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|assertReliability
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|void
name|processAcknowledgments
parameter_list|(
name|RMEndpoint
name|rme
parameter_list|,
name|RMProperties
name|rmps
parameter_list|,
name|ProtocolVariation
name|protocol
parameter_list|)
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
name|Collection
argument_list|<
name|SequenceAcknowledgement
argument_list|>
name|acks
init|=
name|rmps
operator|.
name|getAcks
argument_list|()
decl_stmt|;
name|Source
name|source
init|=
name|rme
operator|.
name|getSource
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|acks
condition|)
block|{
for|for
control|(
name|SequenceAcknowledgement
name|ack
range|:
name|acks
control|)
block|{
name|Identifier
name|id
init|=
name|ack
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|SourceSequence
name|ss
init|=
name|source
operator|.
name|getSequence
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|ss
condition|)
block|{
name|ss
operator|.
name|setAcknowledged
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RMConstants
name|consts
init|=
name|protocol
operator|.
name|getConstants
argument_list|()
decl_stmt|;
name|SequenceFaultFactory
name|sff
init|=
operator|new
name|SequenceFaultFactory
argument_list|(
name|consts
argument_list|)
decl_stmt|;
throw|throw
name|sff
operator|.
name|createUnknownSequenceFault
argument_list|(
name|id
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|void
name|processAcknowledgmentRequests
parameter_list|(
name|Destination
name|destination
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
name|destination
operator|.
name|ackRequested
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|void
name|processSequence
parameter_list|(
name|Destination
name|destination
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|SequenceFault
throws|,
name|RMException
block|{
specifier|final
name|boolean
name|robust
init|=
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|getContextualProperty
argument_list|(
name|Message
operator|.
name|ROBUST_ONEWAY
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|robust
condition|)
block|{
comment|// set this property to change the acknlowledging behavior
name|message
operator|.
name|put
argument_list|(
name|RMMessageConstants
operator|.
name|DELIVERING_ROBUST_ONEWAY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
name|destination
operator|.
name|acknowledge
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|void
name|processDeliveryAssurance
parameter_list|(
name|RMProperties
name|rmps
parameter_list|)
block|{              }
block|}
end_class

end_unit

