begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RM11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyComponent
import|;
end_import

begin_comment
comment|/**  * Representation of WS-RMP 1.2 assertion data.  */
end_comment

begin_class
specifier|public
class|class
name|RM12Assertion
implements|implements
name|Assertion
block|{
specifier|public
specifier|static
specifier|final
name|String
name|POLICY_NS
init|=
literal|"http://www.w3.org/ns/ws-policy"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POLICY_LOCAL
init|=
literal|"Policy"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POLICY_PREFIX
init|=
literal|"wsp"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SEQUENCESTR_NAME
init|=
literal|"SequenceSTR"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SEQUENCETRANSEC_NAME
init|=
literal|"SequenceTransportSecurity"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DELIVERYASSURANCE_NAME
init|=
literal|"DeliveryAssurance"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INORDER_NAME
init|=
literal|"InOrder"
decl_stmt|;
enum|enum
name|Order
block|{
name|ExactlyOnce
block|,
name|AtLeastOnce
block|,
name|AtMostOnce
block|}
empty_stmt|;
specifier|private
name|boolean
name|isOptional
decl_stmt|;
specifier|private
name|boolean
name|ignorable
decl_stmt|;
specifier|private
name|boolean
name|normalized
decl_stmt|;
specifier|private
name|boolean
name|isSequenceSTR
decl_stmt|;
specifier|private
name|boolean
name|isSequenceTransportSecurity
decl_stmt|;
specifier|private
name|Order
name|order
decl_stmt|;
specifier|private
name|boolean
name|inOrder
decl_stmt|;
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
name|RM11Constants
operator|.
name|WSRMP_RMASSERTION_QNAME
return|;
block|}
specifier|public
name|boolean
name|isOptional
parameter_list|()
block|{
return|return
name|isOptional
return|;
block|}
specifier|public
name|void
name|setOptional
parameter_list|(
name|boolean
name|optional
parameter_list|)
block|{
name|this
operator|.
name|isOptional
operator|=
name|optional
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIgnorable
parameter_list|()
block|{
return|return
name|ignorable
return|;
block|}
specifier|public
name|void
name|setIgnorable
parameter_list|(
name|boolean
name|ignorable
parameter_list|)
block|{
name|this
operator|.
name|ignorable
operator|=
name|ignorable
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSequenceSTR
parameter_list|()
block|{
return|return
name|isSequenceSTR
return|;
block|}
specifier|public
name|void
name|setSequenceSTR
parameter_list|(
name|boolean
name|str
parameter_list|)
block|{
name|isSequenceSTR
operator|=
name|str
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSequenceTransportSecurity
parameter_list|()
block|{
return|return
name|isSequenceTransportSecurity
return|;
block|}
specifier|public
name|void
name|setSequenceTransportSecurity
parameter_list|(
name|boolean
name|sts
parameter_list|)
block|{
name|isSequenceTransportSecurity
operator|=
name|sts
expr_stmt|;
block|}
specifier|public
name|Order
name|getOrder
parameter_list|()
block|{
return|return
name|order
return|;
block|}
specifier|public
name|void
name|setOrder
parameter_list|(
name|Order
name|order
parameter_list|)
block|{
name|this
operator|.
name|order
operator|=
name|order
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInOrder
parameter_list|()
block|{
return|return
name|inOrder
return|;
block|}
specifier|public
name|void
name|setInOrder
parameter_list|(
name|boolean
name|inOrder
parameter_list|)
block|{
name|this
operator|.
name|inOrder
operator|=
name|inOrder
expr_stmt|;
block|}
specifier|public
name|short
name|getType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Constants
operator|.
name|TYPE_ASSERTION
return|;
block|}
specifier|public
name|boolean
name|equal
parameter_list|(
name|PolicyComponent
name|policyComponent
parameter_list|)
block|{
return|return
name|policyComponent
operator|==
name|this
return|;
block|}
specifier|public
name|void
name|setNormalized
parameter_list|(
name|boolean
name|normalized
parameter_list|)
block|{
name|this
operator|.
name|normalized
operator|=
name|normalized
expr_stmt|;
block|}
specifier|public
name|boolean
name|isNormalized
parameter_list|()
block|{
return|return
name|normalized
return|;
block|}
specifier|public
name|boolean
name|isAssuranceSet
parameter_list|()
block|{
return|return
name|order
operator|!=
literal|null
operator|||
name|inOrder
return|;
block|}
specifier|public
name|PolicyComponent
name|normalize
parameter_list|()
block|{
return|return
name|this
return|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|String
name|localName
init|=
name|RM11Constants
operator|.
name|RMASSERTION_NAME
decl_stmt|;
name|String
name|namespaceURI
init|=
name|RM11Constants
operator|.
name|WSRMP_NAMESPACE_URI
decl_stmt|;
name|String
name|prefix
init|=
name|writer
operator|.
name|getPrefix
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
literal|"rmp12"
expr_stmt|;
name|writer
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
comment|//<rmp12:RMAssertion>
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
name|localName
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
name|String
name|wspPrefix
init|=
name|writer
operator|.
name|getPrefix
argument_list|(
name|POLICY_NS
argument_list|)
decl_stmt|;
if|if
condition|(
name|wspPrefix
operator|==
literal|null
condition|)
block|{
name|wspPrefix
operator|=
name|POLICY_PREFIX
expr_stmt|;
name|writer
operator|.
name|setPrefix
argument_list|(
name|wspPrefix
argument_list|,
name|POLICY_NS
argument_list|)
expr_stmt|;
block|}
comment|//<wsp:Policy>
name|writer
operator|.
name|writeStartElement
argument_list|(
name|wspPrefix
argument_list|,
name|POLICY_LOCAL
argument_list|,
name|POLICY_NS
argument_list|)
expr_stmt|;
comment|//<rmp12:SequenceSTR>
if|if
condition|(
name|isSequenceSTR
condition|)
block|{
name|writer
operator|.
name|writeEmptyElement
argument_list|(
name|prefix
argument_list|,
name|SEQUENCESTR_NAME
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
comment|//<rmp12:SequenceTransportSecurity>
if|if
condition|(
name|isSequenceTransportSecurity
condition|)
block|{
name|writer
operator|.
name|writeEmptyElement
argument_list|(
name|prefix
argument_list|,
name|SEQUENCETRANSEC_NAME
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
comment|//<rmp12:DeliveryAssurance><wsp:Policy> ...</wsp:Policy></rmp12:DeliveryAssurance>
if|if
condition|(
name|isAssuranceSet
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
name|DELIVERYASSURANCE_NAME
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|wspPrefix
argument_list|,
name|POLICY_LOCAL
argument_list|,
name|POLICY_NS
argument_list|)
expr_stmt|;
if|if
condition|(
name|order
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeEmptyElement
argument_list|(
name|prefix
argument_list|,
name|order
operator|.
name|name
argument_list|()
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inOrder
condition|)
block|{
name|writer
operator|.
name|writeEmptyElement
argument_list|(
name|prefix
argument_list|,
name|INORDER_NAME
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
comment|//</wsp:Policy>
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|//</rmp12:RMAssertion>
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

