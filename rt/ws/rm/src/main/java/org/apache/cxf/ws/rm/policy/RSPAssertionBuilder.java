begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|primitive
operator|.
name|PrimitiveAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|AssertionBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|builders
operator|.
name|AssertionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|builders
operator|.
name|xml
operator|.
name|XMLPrimitiveAssertionBuilder
import|;
end_import

begin_comment
comment|/**  * Builds a WS-I RSP Conformant assertion.  */
end_comment

begin_class
specifier|public
class|class
name|RSPAssertionBuilder
implements|implements
name|AssertionBuilder
argument_list|<
name|Element
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CONFORMANT_NAME
init|=
literal|"Conformant"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RSP_NAMESPACE
init|=
literal|"http://ws-i.org/profiles/rsp/1.0/"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|CONFORMANT_QNAME
init|=
operator|new
name|QName
argument_list|(
name|RSP_NAMESPACE
argument_list|,
name|CONFORMANT_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
index|[]
name|KNOWN_ELEMENTS
init|=
block|{
name|CONFORMANT_QNAME
block|}
decl_stmt|;
comment|/**      * @see org.apache.neethi.builders.AssertionBuilder#getKnownElements()      */
specifier|public
name|QName
index|[]
name|getKnownElements
parameter_list|()
block|{
return|return
name|KNOWN_ELEMENTS
return|;
block|}
comment|/**      * @see org.apache.neethi.builders.AssertionBuilder#build(org.w3c.dom.Element,      *  org.apache.neethi.AssertionBuilderFactory)      */
specifier|public
name|Assertion
name|build
parameter_list|(
name|Element
name|elem
parameter_list|,
name|AssertionBuilderFactory
name|factory
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|Assertion
name|assertion
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|RSP_NAMESPACE
operator|.
name|equals
argument_list|(
name|elem
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|CONFORMANT_NAME
operator|.
name|equals
argument_list|(
name|elem
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|optional
init|=
name|XMLPrimitiveAssertionBuilder
operator|.
name|isOptional
argument_list|(
name|elem
argument_list|)
decl_stmt|;
name|assertion
operator|=
operator|new
name|PrimitiveAssertion
argument_list|(
name|CONFORMANT_QNAME
argument_list|,
name|optional
argument_list|)
expr_stmt|;
block|}
return|return
name|assertion
return|;
block|}
block|}
end_class

end_unit

