begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|v200408
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|DestinationSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|SequenceAcknowledgement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|SourceSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|PersistenceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMStoreException
import|;
end_import

begin_class
specifier|public
class|class
name|RMTxStore
implements|implements
name|RMStore
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DATABASE_NAME
init|=
literal|"rmdb"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_DEST_SEQUENCES_TABLE_STMT
init|=
literal|"CREATE TABLE CXF_RM_DEST_SEQUENCES "
operator|+
literal|"(SEQ_ID VARCHAR(256) NOT NULL, "
operator|+
literal|"ACKS_TO VARCHAR(1024) NOT NULL, "
operator|+
literal|"LAST_MSG_NO BIGINT, "
operator|+
literal|"ENDPOINT_ID VARCHAR(1024), "
operator|+
literal|"ACKNOWLEDGED BLOB, "
operator|+
literal|"PRIMARY KEY (SEQ_ID))"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_SRC_SEQUENCES_TABLE_STMT
init|=
literal|"CREATE TABLE CXF_RM_SRC_SEQUENCES "
operator|+
literal|"(SEQ_ID VARCHAR(256) NOT NULL, "
operator|+
literal|"CUR_MSG_NO BIGINT DEFAULT 1 NOT NULL, "
operator|+
literal|"LAST_MSG CHAR(1), "
operator|+
literal|"EXPIRY BIGINT, "
operator|+
literal|"OFFERING_SEQ_ID VARCHAR(256), "
operator|+
literal|"ENDPOINT_ID VARCHAR(1024), "
operator|+
literal|"PRIMARY KEY (SEQ_ID))"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_MESSAGES_TABLE_STMT
init|=
literal|"CREATE TABLE {0} "
operator|+
literal|"(SEQ_ID VARCHAR(256) NOT NULL, "
operator|+
literal|"MSG_NO BIGINT NOT NULL, "
operator|+
literal|"SEND_TO VARCHAR(256), "
operator|+
literal|"CONTENT BLOB, "
operator|+
literal|"PRIMARY KEY (SEQ_ID, MSG_NO))"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INBOUND_MSGS_TABLE_NAME
init|=
literal|"CXF_RM_INBOUND_MESSAGES"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OUTBOUND_MSGS_TABLE_NAME
init|=
literal|"CXF_RM_OUTBOUND_MESSAGES"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_DEST_SEQUENCE_STMT_STR
init|=
literal|"INSERT INTO CXF_RM_DEST_SEQUENCES (SEQ_ID, ACKS_TO, ENDPOINT_ID) VALUES(?, ?, ?)"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_SRC_SEQUENCE_STMT_STR
init|=
literal|"INSERT INTO CXF_RM_SRC_SEQUENCES VALUES(?, 1, '0', ?, ?, ?)"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELETE_DEST_SEQUENCE_STMT_STR
init|=
literal|"DELETE FROM CXF_RM_DEST_SEQUENCES WHERE SEQ_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELETE_SRC_SEQUENCE_STMT_STR
init|=
literal|"DELETE FROM CXF_RM_SRC_SEQUENCES WHERE SEQ_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UPDATE_DEST_SEQUENCE_STMT_STR
init|=
literal|"UPDATE CXF_RM_DEST_SEQUENCES SET LAST_MSG_NO = ?, ACKNOWLEDGED = ? WHERE SEQ_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UPDATE_SRC_SEQUENCE_STMT_STR
init|=
literal|"UPDATE CXF_RM_SRC_SEQUENCES SET CUR_MSG_NO = ?, LAST_MSG = ? WHERE SEQ_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_MESSAGE_STMT_STR
init|=
literal|"INSERT INTO {0} VALUES(?, ?, ?, ?)"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELETE_MESSAGE_STMT_STR
init|=
literal|"DELETE FROM {0} WHERE SEQ_ID = ? AND MSG_NO = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SELECT_DEST_SEQUENCES_STMT_STR
init|=
literal|"SELECT SEQ_ID, ACKS_TO, LAST_MSG_NO, ACKNOWLEDGED FROM CXF_RM_DEST_SEQUENCES "
operator|+
literal|"WHERE ENDPOINT_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SELECT_SRC_SEQUENCES_STMT_STR
init|=
literal|"SELECT SEQ_ID, CUR_MSG_NO, LAST_MSG, EXPIRY, OFFERING_SEQ_ID FROM CXF_RM_SRC_SEQUENCES "
operator|+
literal|"WHERE ENDPOINT_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SELECT_MESSAGES_STMT_STR
init|=
literal|"SELECT MSG_NO, SEND_TO, CONTENT FROM {0} WHERE SEQ_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DERBY_TABLE_EXISTS_STATE
init|=
literal|"X0Y32"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ORACLE_TABLE_EXISTS_CODE
init|=
literal|955
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|RMTxStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|Lock
name|writeLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
name|PreparedStatement
name|createDestSequenceStmt
decl_stmt|;
specifier|private
name|PreparedStatement
name|createSrcSequenceStmt
decl_stmt|;
specifier|private
name|PreparedStatement
name|deleteDestSequenceStmt
decl_stmt|;
specifier|private
name|PreparedStatement
name|deleteSrcSequenceStmt
decl_stmt|;
specifier|private
name|PreparedStatement
name|updateDestSequenceStmt
decl_stmt|;
specifier|private
name|PreparedStatement
name|updateSrcSequenceStmt
decl_stmt|;
specifier|private
name|PreparedStatement
name|selectDestSequencesStmt
decl_stmt|;
specifier|private
name|PreparedStatement
name|selectSrcSequencesStmt
decl_stmt|;
specifier|private
name|PreparedStatement
name|createInboundMessageStmt
decl_stmt|;
specifier|private
name|PreparedStatement
name|createOutboundMessageStmt
decl_stmt|;
specifier|private
name|PreparedStatement
name|deleteInboundMessageStmt
decl_stmt|;
specifier|private
name|PreparedStatement
name|deleteOutboundMessageStmt
decl_stmt|;
specifier|private
name|PreparedStatement
name|selectInboundMessagesStmt
decl_stmt|;
specifier|private
name|PreparedStatement
name|selectOutboundMessagesStmt
decl_stmt|;
specifier|private
name|String
name|driverClassName
init|=
literal|"org.apache.derby.jdbc.EmbeddedDriver"
decl_stmt|;
specifier|private
name|String
name|url
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"jdbc:derby:{0};create=true"
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|)
decl_stmt|;
specifier|private
name|String
name|userName
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
comment|// configuration
specifier|public
name|void
name|setDriverClassName
parameter_list|(
name|String
name|dcn
parameter_list|)
block|{
name|driverClassName
operator|=
name|dcn
expr_stmt|;
block|}
specifier|public
name|String
name|getDriverClassName
parameter_list|()
block|{
return|return
name|driverClassName
return|;
block|}
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|password
operator|=
name|p
expr_stmt|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
specifier|public
name|void
name|setUrl
parameter_list|(
name|String
name|u
parameter_list|)
block|{
name|url
operator|=
name|u
expr_stmt|;
block|}
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
name|url
return|;
block|}
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|un
parameter_list|)
block|{
name|userName
operator|=
name|un
expr_stmt|;
block|}
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
specifier|public
name|void
name|setConnection
parameter_list|(
name|Connection
name|c
parameter_list|)
block|{
name|connection
operator|=
name|c
expr_stmt|;
block|}
comment|// RMStore interface
specifier|public
name|void
name|createDestinationSequence
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
block|{
name|String
name|sequenceIdentifier
init|=
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|endpointIdentifier
init|=
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating destination sequence: "
operator|+
name|sequenceIdentifier
operator|+
literal|", (endpoint: "
operator|+
name|endpointIdentifier
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|createDestSequenceStmt
condition|)
block|{
name|createDestSequenceStmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|CREATE_DEST_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
block|}
name|createDestSequenceStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|sequenceIdentifier
argument_list|)
expr_stmt|;
name|String
name|addr
init|=
name|seq
operator|.
name|getAcksTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|createDestSequenceStmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|createDestSequenceStmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|endpointIdentifier
argument_list|)
expr_stmt|;
name|createDestSequenceStmt
operator|.
name|execute
argument_list|()
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|abort
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|createSourceSequence
parameter_list|(
name|SourceSequence
name|seq
parameter_list|)
block|{
name|String
name|sequenceIdentifier
init|=
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|endpointIdentifier
init|=
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Creating source sequence: "
operator|+
name|sequenceIdentifier
operator|+
literal|", (endpoint: "
operator|+
name|endpointIdentifier
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|createSrcSequenceStmt
condition|)
block|{
name|createSrcSequenceStmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|CREATE_SRC_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
block|}
assert|assert
literal|null
operator|!=
name|createSrcSequenceStmt
assert|;
name|createSrcSequenceStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|sequenceIdentifier
argument_list|)
expr_stmt|;
name|Date
name|expiry
init|=
name|seq
operator|.
name|getExpires
argument_list|()
decl_stmt|;
name|createSrcSequenceStmt
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|expiry
operator|==
literal|null
condition|?
literal|0
else|:
name|expiry
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|Identifier
name|osid
init|=
name|seq
operator|.
name|getOfferingSequenceIdentifier
argument_list|()
decl_stmt|;
name|createSrcSequenceStmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|osid
operator|==
literal|null
condition|?
literal|null
else|:
name|osid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|createSrcSequenceStmt
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|endpointIdentifier
argument_list|)
expr_stmt|;
name|createSrcSequenceStmt
operator|.
name|execute
argument_list|()
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|abort
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|removeDestinationSequence
parameter_list|(
name|Identifier
name|sid
parameter_list|)
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|deleteDestSequenceStmt
condition|)
block|{
name|deleteDestSequenceStmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|DELETE_DEST_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
block|}
name|deleteDestSequenceStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|deleteDestSequenceStmt
operator|.
name|execute
argument_list|()
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|abort
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|removeSourceSequence
parameter_list|(
name|Identifier
name|sid
parameter_list|)
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|deleteSrcSequenceStmt
condition|)
block|{
name|deleteSrcSequenceStmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|DELETE_SRC_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
block|}
name|deleteSrcSequenceStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|deleteSrcSequenceStmt
operator|.
name|execute
argument_list|()
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|abort
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|DestinationSequence
argument_list|>
name|getDestinationSequences
parameter_list|(
name|String
name|endpointIdentifier
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting destination sequences for endpoint: "
operator|+
name|endpointIdentifier
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|DestinationSequence
argument_list|>
name|seqs
init|=
operator|new
name|ArrayList
argument_list|<
name|DestinationSequence
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
literal|null
operator|==
name|selectDestSequencesStmt
condition|)
block|{
name|selectDestSequencesStmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|SELECT_DEST_SEQUENCES_STMT_STR
argument_list|)
expr_stmt|;
block|}
name|selectDestSequencesStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|endpointIdentifier
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|selectDestSequencesStmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|Identifier
name|sid
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|sid
operator|.
name|setValue
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|acksTo
init|=
name|RMUtils
operator|.
name|createReference2004
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|lm
init|=
name|res
operator|.
name|getLong
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|res
operator|.
name|getBinaryStream
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|SequenceAcknowledgement
name|ack
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|is
condition|)
block|{
name|ack
operator|=
name|PersistenceUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|deserialiseAcknowledgment
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|sid
argument_list|,
name|acksTo
argument_list|,
name|lm
argument_list|,
name|ack
argument_list|)
decl_stmt|;
name|seqs
operator|.
name|add
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SELECT_DEST_SEQ_FAILED_MSG"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|seqs
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|SourceSequence
argument_list|>
name|getSourceSequences
parameter_list|(
name|String
name|endpointIdentifier
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting source sequences for endpoint: "
operator|+
name|endpointIdentifier
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|SourceSequence
argument_list|>
name|seqs
init|=
operator|new
name|ArrayList
argument_list|<
name|SourceSequence
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
literal|null
operator|==
name|selectSrcSequencesStmt
condition|)
block|{
name|selectSrcSequencesStmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|SELECT_SRC_SEQUENCES_STMT_STR
argument_list|)
expr_stmt|;
block|}
name|selectSrcSequencesStmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|endpointIdentifier
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|selectSrcSequencesStmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|Identifier
name|sid
init|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createIdentifier
argument_list|()
decl_stmt|;
name|sid
operator|.
name|setValue
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|cmn
init|=
name|res
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|boolean
name|lm
init|=
name|res
operator|.
name|getBoolean
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|long
name|lval
init|=
name|res
operator|.
name|getLong
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|Date
name|expiry
init|=
literal|0
operator|==
name|lval
condition|?
literal|null
else|:
operator|new
name|Date
argument_list|(
name|lval
argument_list|)
decl_stmt|;
name|String
name|oidValue
init|=
name|res
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Identifier
name|oi
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|oidValue
condition|)
block|{
name|oi
operator|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createIdentifier
argument_list|()
expr_stmt|;
name|oi
operator|.
name|setValue
argument_list|(
name|oidValue
argument_list|)
expr_stmt|;
block|}
name|SourceSequence
name|seq
init|=
operator|new
name|SourceSequence
argument_list|(
name|sid
argument_list|,
name|expiry
argument_list|,
name|oi
argument_list|,
name|cmn
argument_list|,
name|lm
argument_list|)
decl_stmt|;
name|seqs
operator|.
name|add
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
comment|// ignore
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SELECT_SRC_SEQ_FAILED_MSG"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|seqs
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|RMMessage
argument_list|>
name|getMessages
parameter_list|(
name|Identifier
name|sid
parameter_list|,
name|boolean
name|outbound
parameter_list|)
block|{
name|Collection
argument_list|<
name|RMMessage
argument_list|>
name|msgs
init|=
operator|new
name|ArrayList
argument_list|<
name|RMMessage
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|PreparedStatement
name|stmt
init|=
name|outbound
condition|?
name|selectOutboundMessagesStmt
else|:
name|selectInboundMessagesStmt
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|stmt
condition|)
block|{
name|stmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|SELECT_MESSAGES_STMT_STR
argument_list|,
name|outbound
condition|?
name|OUTBOUND_MSGS_TABLE_NAME
else|:
name|INBOUND_MSGS_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|outbound
condition|)
block|{
name|selectOutboundMessagesStmt
operator|=
name|stmt
expr_stmt|;
block|}
else|else
block|{
name|selectInboundMessagesStmt
operator|=
name|stmt
expr_stmt|;
block|}
block|}
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|ResultSet
name|res
init|=
name|stmt
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|long
name|mn
init|=
name|res
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|to
init|=
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Blob
name|blob
init|=
name|res
operator|.
name|getBlob
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|blob
operator|.
name|getBytes
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|blob
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|RMMessage
name|msg
init|=
operator|new
name|RMMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setMessageNumber
argument_list|(
name|mn
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setTo
argument_list|(
name|to
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setContent
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|msgs
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
operator|new
name|Message
argument_list|(
name|outbound
condition|?
literal|"SELECT_OUTBOUND_MSGS_FAILED_MSG"
else|:
literal|"SELECT_INBOUND_MSGS_FAILED_MSG"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|msgs
return|;
block|}
specifier|public
name|void
name|persistIncoming
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|,
name|RMMessage
name|msg
parameter_list|)
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|updateDestinationSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|storeMessage
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|msg
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|abort
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|abort
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|persistOutgoing
parameter_list|(
name|SourceSequence
name|seq
parameter_list|,
name|RMMessage
name|msg
parameter_list|)
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|updateSourceSequence
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|storeMessage
argument_list|(
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|msg
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|abort
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|abort
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|removeMessages
parameter_list|(
name|Identifier
name|sid
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|messageNrs
parameter_list|,
name|boolean
name|outbound
parameter_list|)
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|PreparedStatement
name|stmt
init|=
name|outbound
condition|?
name|deleteOutboundMessageStmt
else|:
name|deleteInboundMessageStmt
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|stmt
condition|)
block|{
name|stmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|DELETE_MESSAGE_STMT_STR
argument_list|,
name|outbound
condition|?
name|OUTBOUND_MSGS_TABLE_NAME
else|:
name|INBOUND_MSGS_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|outbound
condition|)
block|{
name|deleteOutboundMessageStmt
operator|=
name|stmt
expr_stmt|;
block|}
else|else
block|{
name|deleteInboundMessageStmt
operator|=
name|stmt
expr_stmt|;
block|}
block|}
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|messageNr
range|:
name|messageNrs
control|)
block|{
name|stmt
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|messageNr
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|abort
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|// transaction demarcation
comment|//
specifier|protected
name|void
name|beginTransaction
parameter_list|()
block|{
comment|// avoid sharing of statements and result sets
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|commit
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|abort
parameter_list|()
block|{
try|try
block|{
name|connection
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"ABORT_FAILED_MSG"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// helpers
specifier|protected
name|void
name|storeMessage
parameter_list|(
name|Identifier
name|sid
parameter_list|,
name|RMMessage
name|msg
parameter_list|,
name|boolean
name|outbound
parameter_list|)
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|String
name|id
init|=
name|sid
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|nr
init|=
name|msg
operator|.
name|getMessageNumber
argument_list|()
decl_stmt|;
name|String
name|to
init|=
name|msg
operator|.
name|getTo
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Storing {0} message number {1} for sequence {2}, to = {3}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|outbound
condition|?
literal|"outbound"
else|:
literal|"inbound"
block|,
name|nr
block|,
name|id
block|,
name|to
block|}
argument_list|)
expr_stmt|;
name|PreparedStatement
name|stmt
init|=
name|outbound
condition|?
name|createOutboundMessageStmt
else|:
name|createInboundMessageStmt
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|stmt
condition|)
block|{
name|stmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|CREATE_MESSAGE_STMT_STR
argument_list|,
name|outbound
condition|?
name|OUTBOUND_MSGS_TABLE_NAME
else|:
name|INBOUND_MSGS_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|outbound
condition|)
block|{
name|createOutboundMessageStmt
operator|=
name|stmt
expr_stmt|;
block|}
else|else
block|{
name|createInboundMessageStmt
operator|=
name|stmt
expr_stmt|;
block|}
block|}
name|int
name|i
init|=
literal|1
decl_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
name|i
operator|++
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setBigDecimal
argument_list|(
name|i
operator|++
argument_list|,
operator|new
name|BigDecimal
argument_list|(
name|nr
argument_list|)
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
name|i
operator|++
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|msg
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|setBinaryStream
argument_list|(
name|i
operator|++
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
block|{
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|IOUtils
operator|.
name|newStringFromBytes
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
return|;
block|}
block|}
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Successfully stored {0} message number {1} for sequence {2}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|outbound
condition|?
literal|"outbound"
else|:
literal|"inbound"
block|,
name|nr
block|,
name|id
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|updateSourceSequence
parameter_list|(
name|SourceSequence
name|seq
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
literal|null
operator|==
name|updateSrcSequenceStmt
condition|)
block|{
name|updateSrcSequenceStmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|UPDATE_SRC_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
block|}
name|updateSrcSequenceStmt
operator|.
name|setBigDecimal
argument_list|(
literal|1
argument_list|,
operator|new
name|BigDecimal
argument_list|(
name|seq
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|updateSrcSequenceStmt
operator|.
name|setBoolean
argument_list|(
literal|2
argument_list|,
name|seq
operator|.
name|isLastMessage
argument_list|()
argument_list|)
expr_stmt|;
name|updateSrcSequenceStmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|updateSrcSequenceStmt
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|updateDestinationSequence
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|updateDestSequenceStmt
condition|)
block|{
name|updateDestSequenceStmt
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|UPDATE_DEST_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
block|}
name|long
name|lastMessageNr
init|=
name|seq
operator|.
name|getLastMessageNumber
argument_list|()
decl_stmt|;
name|updateDestSequenceStmt
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|lastMessageNr
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|PersistenceUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|serialiseAcknowledgment
argument_list|(
name|seq
operator|.
name|getAcknowledgment
argument_list|()
argument_list|)
decl_stmt|;
name|updateDestSequenceStmt
operator|.
name|setBinaryStream
argument_list|(
literal|2
argument_list|,
name|is
argument_list|,
name|is
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|updateDestSequenceStmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|updateDestSequenceStmt
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|createTables
parameter_list|()
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
literal|null
decl_stmt|;
name|stmt
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
try|try
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|CREATE_SRC_SEQUENCES_TABLE_STMT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isTableExistsError
argument_list|(
name|ex
argument_list|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Table CXF_RM_SRC_SEQUENCES already exists."
argument_list|)
expr_stmt|;
block|}
block|}
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
name|stmt
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
try|try
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|CREATE_DEST_SEQUENCES_TABLE_STMT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isTableExistsError
argument_list|(
name|ex
argument_list|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Table CXF_RM_DEST_SEQUENCES already exists."
argument_list|)
expr_stmt|;
block|}
block|}
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|tableName
range|:
operator|new
name|String
index|[]
block|{
name|OUTBOUND_MSGS_TABLE_NAME
block|,
name|INBOUND_MSGS_TABLE_NAME
block|}
control|)
block|{
name|stmt
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
try|try
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|CREATE_MESSAGES_TABLE_STMT
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isTableExistsError
argument_list|(
name|ex
argument_list|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" already exists."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|PostConstruct
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|connection
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Using derby.system.home: {0}"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"derby.system.home"
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
literal|null
operator|!=
name|url
assert|;
assert|assert
literal|null
operator|!=
name|driverClassName
assert|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|driverClassName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CONNECT_EXC"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Using url: "
operator|+
name|url
argument_list|)
expr_stmt|;
name|connection
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|,
name|userName
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CONNECT_EXC"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
try|try
block|{
name|connection
operator|.
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|createTables
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CONNECT_EXC"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|SQLException
name|se
init|=
name|ex
decl_stmt|;
while|while
condition|(
name|se
operator|.
name|getNextException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|se
operator|=
name|se
operator|.
name|getNextException
argument_list|()
expr_stmt|;
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CONNECT_EXC"
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|connection
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CONNECT_EXC"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
specifier|public
specifier|static
name|void
name|deleteDatabaseFiles
parameter_list|()
block|{
name|deleteDatabaseFiles
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|deleteDatabaseFiles
parameter_list|(
name|String
name|dbName
parameter_list|,
name|boolean
name|now
parameter_list|)
block|{
name|String
name|dsh
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"derby.system.home"
argument_list|)
decl_stmt|;
name|File
name|root
init|=
literal|null
decl_stmt|;
name|File
name|log
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|dsh
condition|)
block|{
name|log
operator|=
operator|new
name|File
argument_list|(
literal|"derby.log"
argument_list|)
expr_stmt|;
name|root
operator|=
operator|new
name|File
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|=
operator|new
name|File
argument_list|(
name|dsh
argument_list|,
literal|"derby.log"
argument_list|)
expr_stmt|;
name|root
operator|=
operator|new
name|File
argument_list|(
name|dsh
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|now
condition|)
block|{
name|boolean
name|deleted
init|=
name|log
operator|.
name|delete
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Deleted log file {0}: {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|log
block|,
name|deleted
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|root
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Trying to delete directory {0}"
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|recursiveDelete
argument_list|(
name|root
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|recursiveDelete
parameter_list|(
name|File
name|dir
parameter_list|,
name|boolean
name|now
parameter_list|)
block|{
for|for
control|(
name|File
name|f
range|:
name|dir
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|recursiveDelete
argument_list|(
name|f
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|now
condition|)
block|{
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|f
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|now
condition|)
block|{
name|dir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isTableExistsError
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
return|return
name|DERBY_TABLE_EXISTS_STATE
operator|.
name|equals
argument_list|(
name|ex
operator|.
name|getSQLState
argument_list|()
argument_list|)
operator|||
name|ORACLE_TABLE_EXISTS_CODE
operator|==
name|ex
operator|.
name|getErrorCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

