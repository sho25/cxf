begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|injection
operator|.
name|NoJSR250Annotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SystemPropertyAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|DestinationSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|ProtocolVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|RMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|SourceSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|PersistenceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|persistence
operator|.
name|RMStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|Identifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
operator|.
name|v200702
operator|.
name|SequenceAcknowledgement
import|;
end_import

begin_class
annotation|@
name|NoJSR250Annotations
specifier|public
class|class
name|RMTxStore
implements|implements
name|RMStore
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DATABASE_NAME
init|=
literal|"rmdb"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
index|[]
name|DEST_SEQUENCES_TABLE_COLS
init|=
block|{
block|{
literal|"SEQ_ID"
block|,
literal|"VARCHAR(256) NOT NULL"
block|}
block|,
block|{
literal|"ACKS_TO"
block|,
literal|"VARCHAR(1024) NOT NULL"
block|}
block|,
block|{
literal|"LAST_MSG_NO"
block|,
literal|"DECIMAL(19, 0)"
block|}
block|,
block|{
literal|"ENDPOINT_ID"
block|,
literal|"VARCHAR(1024)"
block|}
block|,
block|{
literal|"ACKNOWLEDGED"
block|,
literal|"BLOB"
block|}
block|,
block|{
literal|"PROTOCOL_VERSION"
block|,
literal|"VARCHAR(256)"
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DEST_SEQUENCES_TABLE_KEYS
init|=
block|{
literal|"SEQ_ID"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
index|[]
name|SRC_SEQUENCES_TABLE_COLS
init|=
block|{
block|{
literal|"SEQ_ID"
block|,
literal|"VARCHAR(256) NOT NULL"
block|}
block|,
block|{
literal|"CUR_MSG_NO"
block|,
literal|"DECIMAL(19, 0) DEFAULT 1 NOT NULL"
block|}
block|,
block|{
literal|"LAST_MSG"
block|,
literal|"CHAR(1)"
block|}
block|,
block|{
literal|"EXPIRY"
block|,
literal|"DECIMAL(19, 0)"
block|}
block|,
block|{
literal|"OFFERING_SEQ_ID"
block|,
literal|"VARCHAR(256)"
block|}
block|,
block|{
literal|"ENDPOINT_ID"
block|,
literal|"VARCHAR(1024)"
block|}
block|,
block|{
literal|"PROTOCOL_VERSION"
block|,
literal|"VARCHAR(256)"
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SRC_SEQUENCES_TABLE_KEYS
init|=
block|{
literal|"SEQ_ID"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
index|[]
name|MESSAGES_TABLE_COLS
init|=
block|{
block|{
literal|"SEQ_ID"
block|,
literal|"VARCHAR(256) NOT NULL"
block|}
block|,
block|{
literal|"MSG_NO"
block|,
literal|"DECIMAL(19, 0) NOT NULL"
block|}
block|,
block|{
literal|"SEND_TO"
block|,
literal|"VARCHAR(256)"
block|}
block|,
block|{
literal|"CONTENT"
block|,
literal|"BLOB"
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|MESSAGES_TABLE_KEYS
init|=
block|{
literal|"SEQ_ID"
block|,
literal|"MSG_NO"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEST_SEQUENCES_TABLE_NAME
init|=
literal|"CXF_RM_DEST_SEQUENCES"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SRC_SEQUENCES_TABLE_NAME
init|=
literal|"CXF_RM_SRC_SEQUENCES"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INBOUND_MSGS_TABLE_NAME
init|=
literal|"CXF_RM_INBOUND_MESSAGES"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OUTBOUND_MSGS_TABLE_NAME
init|=
literal|"CXF_RM_OUTBOUND_MESSAGES"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_DEST_SEQUENCES_TABLE_STMT
init|=
name|buildCreateTableStatement
argument_list|(
name|DEST_SEQUENCES_TABLE_NAME
argument_list|,
name|DEST_SEQUENCES_TABLE_COLS
argument_list|,
name|DEST_SEQUENCES_TABLE_KEYS
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_SRC_SEQUENCES_TABLE_STMT
init|=
name|buildCreateTableStatement
argument_list|(
name|SRC_SEQUENCES_TABLE_NAME
argument_list|,
name|SRC_SEQUENCES_TABLE_COLS
argument_list|,
name|SRC_SEQUENCES_TABLE_KEYS
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_MESSAGES_TABLE_STMT
init|=
name|buildCreateTableStatement
argument_list|(
literal|"{0}"
argument_list|,
name|MESSAGES_TABLE_COLS
argument_list|,
name|MESSAGES_TABLE_KEYS
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_DEST_SEQUENCE_STMT_STR
init|=
literal|"INSERT INTO CXF_RM_DEST_SEQUENCES "
operator|+
literal|"(SEQ_ID, ACKS_TO, ENDPOINT_ID, PROTOCOL_VERSION) "
operator|+
literal|"VALUES(?, ?, ?, ?)"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_SRC_SEQUENCE_STMT_STR
init|=
literal|"INSERT INTO CXF_RM_SRC_SEQUENCES "
operator|+
literal|"(SEQ_ID, CUR_MSG_NO, LAST_MSG, EXPIRY, OFFERING_SEQ_ID, ENDPOINT_ID, PROTOCOL_VERSION) "
operator|+
literal|"VALUES(?, 1, '0', ?, ?, ?, ?)"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELETE_DEST_SEQUENCE_STMT_STR
init|=
literal|"DELETE FROM CXF_RM_DEST_SEQUENCES WHERE SEQ_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELETE_SRC_SEQUENCE_STMT_STR
init|=
literal|"DELETE FROM CXF_RM_SRC_SEQUENCES WHERE SEQ_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UPDATE_DEST_SEQUENCE_STMT_STR
init|=
literal|"UPDATE CXF_RM_DEST_SEQUENCES SET LAST_MSG_NO = ?, ACKNOWLEDGED = ? WHERE SEQ_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UPDATE_SRC_SEQUENCE_STMT_STR
init|=
literal|"UPDATE CXF_RM_SRC_SEQUENCES SET CUR_MSG_NO = ?, LAST_MSG = ? WHERE SEQ_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_MESSAGE_STMT_STR
init|=
literal|"INSERT INTO {0} (SEQ_ID, MSG_NO, SEND_TO, CONTENT) VALUES(?, ?, ?, ?)"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELETE_MESSAGE_STMT_STR
init|=
literal|"DELETE FROM {0} WHERE SEQ_ID = ? AND MSG_NO = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SELECT_DEST_SEQUENCE_STMT_STR
init|=
literal|"SELECT ACKS_TO, LAST_MSG_NO, PROTOCOL_VERSION, ACKNOWLEDGED FROM CXF_RM_DEST_SEQUENCES "
operator|+
literal|"WHERE SEQ_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SELECT_SRC_SEQUENCE_STMT_STR
init|=
literal|"SELECT CUR_MSG_NO, LAST_MSG, EXPIRY, OFFERING_SEQ_ID, PROTOCOL_VERSION FROM CXF_RM_SRC_SEQUENCES "
operator|+
literal|"WHERE SEQ_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SELECT_DEST_SEQUENCES_STMT_STR
init|=
literal|"SELECT SEQ_ID, ACKS_TO, LAST_MSG_NO, PROTOCOL_VERSION, ACKNOWLEDGED FROM CXF_RM_DEST_SEQUENCES "
operator|+
literal|"WHERE ENDPOINT_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SELECT_SRC_SEQUENCES_STMT_STR
init|=
literal|"SELECT SEQ_ID, CUR_MSG_NO, LAST_MSG, EXPIRY, OFFERING_SEQ_ID, PROTOCOL_VERSION "
operator|+
literal|"FROM CXF_RM_SRC_SEQUENCES WHERE ENDPOINT_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SELECT_MESSAGES_STMT_STR
init|=
literal|"SELECT MSG_NO, SEND_TO, CONTENT FROM {0} WHERE SEQ_ID = ?"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ALTER_TABLE_STMT_STR
init|=
literal|"ALTER TABLE {0} ADD {1} {2}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_INBOUND_MESSAGE_STMT_STR
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|CREATE_MESSAGE_STMT_STR
argument_list|,
name|INBOUND_MSGS_TABLE_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_OUTBOUND_MESSAGE_STMT_STR
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|CREATE_MESSAGE_STMT_STR
argument_list|,
name|OUTBOUND_MSGS_TABLE_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELETE_INBOUND_MESSAGE_STMT_STR
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|DELETE_MESSAGE_STMT_STR
argument_list|,
name|INBOUND_MSGS_TABLE_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELETE_OUTBOUND_MESSAGE_STMT_STR
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|DELETE_MESSAGE_STMT_STR
argument_list|,
name|OUTBOUND_MSGS_TABLE_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SELECT_INBOUND_MESSAGES_STMT_STR
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|SELECT_MESSAGES_STMT_STR
argument_list|,
name|INBOUND_MSGS_TABLE_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SELECT_OUTBOUND_MESSAGES_STMT_STR
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
name|SELECT_MESSAGES_STMT_STR
argument_list|,
name|OUTBOUND_MSGS_TABLE_NAME
argument_list|)
decl_stmt|;
comment|// create_schema may not work for several reasons, if so, create one manually
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_SCHEMA_STMT_STR
init|=
literal|"CREATE SCHEMA {0}"
decl_stmt|;
comment|// given the schema, try these standard statements to switch to the schema
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SET_SCHEMA_STMT_STRS
init|=
block|{
literal|"SET SCHEMA {0}"
block|,
literal|"SET CURRENT_SCHEMA = {0}"
block|,
literal|"ALTER SESSION SET CURRENT_SCHEMA = {0}"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DERBY_TABLE_EXISTS_STATE
init|=
literal|"X0Y32"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ORACLE_TABLE_EXISTS_CODE
init|=
literal|955
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|RMTxStore
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// the connection and statements are cached only if
specifier|private
name|boolean
name|keepConnection
init|=
literal|true
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|boolean
name|createdConnection
init|=
literal|true
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Statement
argument_list|,
name|Lock
argument_list|>
name|statementLocks
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PreparedStatement
argument_list|>
name|cachedStatements
decl_stmt|;
specifier|private
name|DataSource
name|dataSource
decl_stmt|;
specifier|private
name|String
name|driverClassName
init|=
literal|"org.apache.derby.jdbc.EmbeddedDriver"
decl_stmt|;
specifier|private
name|String
name|url
init|=
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"jdbc:derby:{0};create=true"
argument_list|,
name|DEFAULT_DATABASE_NAME
argument_list|)
decl_stmt|;
specifier|private
name|String
name|userName
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|private
name|String
name|schemaName
decl_stmt|;
specifier|private
name|long
name|initialReconnectDelay
init|=
literal|60000L
decl_stmt|;
specifier|private
name|int
name|useExponentialBackOff
init|=
literal|2
decl_stmt|;
specifier|private
name|int
name|maxReconnectAttempts
init|=
literal|10
decl_stmt|;
specifier|private
name|long
name|reconnectDelay
decl_stmt|;
specifier|private
name|int
name|reconnectAttempts
decl_stmt|;
specifier|private
name|long
name|nextReconnectAttempt
decl_stmt|;
specifier|private
name|String
name|tableExistsState
init|=
name|DERBY_TABLE_EXISTS_STATE
decl_stmt|;
specifier|private
name|int
name|tableExistsCode
init|=
name|ORACLE_TABLE_EXISTS_CODE
decl_stmt|;
specifier|public
name|RMTxStore
parameter_list|()
block|{     }
specifier|public
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
operator|&&
name|createdConnection
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
name|connection
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// configuration
specifier|public
name|void
name|setDriverClassName
parameter_list|(
name|String
name|dcn
parameter_list|)
block|{
name|driverClassName
operator|=
name|dcn
expr_stmt|;
block|}
specifier|public
name|String
name|getDriverClassName
parameter_list|()
block|{
return|return
name|driverClassName
return|;
block|}
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|password
operator|=
name|p
expr_stmt|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
specifier|public
name|void
name|setUrl
parameter_list|(
name|String
name|u
parameter_list|)
block|{
name|url
operator|=
name|u
expr_stmt|;
block|}
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
name|url
return|;
block|}
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|un
parameter_list|)
block|{
name|userName
operator|=
name|un
expr_stmt|;
block|}
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
specifier|public
name|String
name|getSchemaName
parameter_list|()
block|{
return|return
name|schemaName
return|;
block|}
specifier|public
name|void
name|setSchemaName
parameter_list|(
name|String
name|sn
parameter_list|)
block|{
if|if
condition|(
name|sn
operator|==
literal|null
operator|||
name|Pattern
operator|.
name|matches
argument_list|(
literal|"[a-zA-Z\\d]{1,32}"
argument_list|,
name|sn
argument_list|)
condition|)
block|{
name|schemaName
operator|=
name|sn
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid schema name: "
operator|+
name|sn
argument_list|)
throw|;
block|}
block|}
specifier|public
name|DataSource
name|getDataSource
parameter_list|()
block|{
return|return
name|dataSource
return|;
block|}
specifier|public
name|void
name|setDataSource
parameter_list|(
name|DataSource
name|ds
parameter_list|)
block|{
name|dataSource
operator|=
name|ds
expr_stmt|;
block|}
specifier|public
name|String
name|getTableExistsState
parameter_list|()
block|{
return|return
name|tableExistsState
return|;
block|}
specifier|public
name|void
name|setTableExistsState
parameter_list|(
name|String
name|tableExistsState
parameter_list|)
block|{
name|this
operator|.
name|tableExistsState
operator|=
name|tableExistsState
expr_stmt|;
block|}
specifier|public
name|int
name|getTableExistsCode
parameter_list|()
block|{
return|return
name|tableExistsCode
return|;
block|}
specifier|public
name|void
name|setTableExistsCode
parameter_list|(
name|int
name|tableExistsCode
parameter_list|)
block|{
name|this
operator|.
name|tableExistsCode
operator|=
name|tableExistsCode
expr_stmt|;
block|}
specifier|public
name|boolean
name|isKeepConnection
parameter_list|()
block|{
return|return
name|keepConnection
return|;
block|}
specifier|public
name|void
name|setKeepConnection
parameter_list|(
name|boolean
name|keepConnection
parameter_list|)
block|{
name|this
operator|.
name|keepConnection
operator|=
name|keepConnection
expr_stmt|;
block|}
specifier|public
name|long
name|getInitialReconnectDelay
parameter_list|()
block|{
return|return
name|initialReconnectDelay
return|;
block|}
specifier|public
name|void
name|setInitialReconnectDelay
parameter_list|(
name|long
name|initialReconnectDelay
parameter_list|)
block|{
name|this
operator|.
name|initialReconnectDelay
operator|=
name|initialReconnectDelay
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxReconnectAttempts
parameter_list|()
block|{
return|return
name|maxReconnectAttempts
return|;
block|}
specifier|public
name|void
name|setMaxReconnectAttempts
parameter_list|(
name|int
name|maxReconnectAttempts
parameter_list|)
block|{
name|this
operator|.
name|maxReconnectAttempts
operator|=
name|maxReconnectAttempts
expr_stmt|;
block|}
specifier|public
name|void
name|setConnection
parameter_list|(
name|Connection
name|c
parameter_list|)
block|{
name|connection
operator|=
name|c
expr_stmt|;
name|createdConnection
operator|=
literal|false
expr_stmt|;
block|}
comment|// RMStore interface
specifier|public
name|void
name|createDestinationSequence
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
block|{
name|String
name|sequenceIdentifier
init|=
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|endpointIdentifier
init|=
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
decl_stmt|;
name|String
name|protocolVersion
init|=
name|encodeProtocolVersion
argument_list|(
name|seq
operator|.
name|getProtocol
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating destination sequence: "
operator|+
name|sequenceIdentifier
operator|+
literal|", (endpoint: "
operator|+
name|endpointIdentifier
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|Connection
name|con
init|=
name|verifyConnection
argument_list|()
decl_stmt|;
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
name|SQLException
name|conex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|stmt
operator|=
name|getStatement
argument_list|(
name|con
argument_list|,
name|CREATE_DEST_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|sequenceIdentifier
argument_list|)
expr_stmt|;
name|String
name|addr
init|=
name|seq
operator|.
name|getAcksTo
argument_list|()
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|endpointIdentifier
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|protocolVersion
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|()
expr_stmt|;
name|commit
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|abort
argument_list|(
name|con
argument_list|)
expr_stmt|;
name|conex
operator|=
name|ex
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|releaseResources
argument_list|(
name|stmt
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|updateConnectionState
argument_list|(
name|con
argument_list|,
name|conex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|createSourceSequence
parameter_list|(
name|SourceSequence
name|seq
parameter_list|)
block|{
name|String
name|sequenceIdentifier
init|=
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|endpointIdentifier
init|=
name|seq
operator|.
name|getEndpointIdentifier
argument_list|()
decl_stmt|;
name|String
name|protocolVersion
init|=
name|encodeProtocolVersion
argument_list|(
name|seq
operator|.
name|getProtocol
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Creating source sequence: "
operator|+
name|sequenceIdentifier
operator|+
literal|", (endpoint: "
operator|+
name|endpointIdentifier
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|Connection
name|con
init|=
name|verifyConnection
argument_list|()
decl_stmt|;
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
name|SQLException
name|conex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|stmt
operator|=
name|getStatement
argument_list|(
name|con
argument_list|,
name|CREATE_SRC_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|sequenceIdentifier
argument_list|)
expr_stmt|;
name|Date
name|expiry
init|=
name|seq
operator|.
name|getExpires
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|expiry
operator|==
literal|null
condition|?
literal|0
else|:
name|expiry
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|Identifier
name|osid
init|=
name|seq
operator|.
name|getOfferingSequenceIdentifier
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|osid
operator|==
literal|null
condition|?
literal|null
else|:
name|osid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|endpointIdentifier
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|5
argument_list|,
name|protocolVersion
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|()
expr_stmt|;
name|commit
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|conex
operator|=
name|ex
expr_stmt|;
name|abort
argument_list|(
name|con
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|releaseResources
argument_list|(
name|stmt
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|updateConnectionState
argument_list|(
name|con
argument_list|,
name|conex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DestinationSequence
name|getDestinationSequence
parameter_list|(
name|Identifier
name|sid
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting destination sequence for id: "
operator|+
name|sid
argument_list|)
expr_stmt|;
block|}
name|Connection
name|con
init|=
name|verifyConnection
argument_list|()
decl_stmt|;
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
name|SQLException
name|conex
init|=
literal|null
decl_stmt|;
name|ResultSet
name|res
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stmt
operator|=
name|getStatement
argument_list|(
name|con
argument_list|,
name|SELECT_DEST_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|EndpointReferenceType
name|acksTo
init|=
name|RMUtils
operator|.
name|createReference
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|lm
init|=
name|res
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ProtocolVariation
name|pv
init|=
name|decodeProtocolVersion
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|res
operator|.
name|getBinaryStream
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|SequenceAcknowledgement
name|ack
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|is
condition|)
block|{
name|ack
operator|=
name|PersistenceUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|deserialiseAcknowledgment
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|DestinationSequence
argument_list|(
name|sid
argument_list|,
name|acksTo
argument_list|,
name|lm
argument_list|,
name|ack
argument_list|,
name|pv
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|conex
operator|=
name|ex
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SELECT_DEST_SEQ_FAILED_MSG"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|releaseResources
argument_list|(
name|stmt
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|updateConnectionState
argument_list|(
name|con
argument_list|,
name|conex
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|SourceSequence
name|getSourceSequence
parameter_list|(
name|Identifier
name|sid
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting source sequences for id: "
operator|+
name|sid
argument_list|)
expr_stmt|;
block|}
name|Connection
name|con
init|=
name|verifyConnection
argument_list|()
decl_stmt|;
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
name|SQLException
name|conex
init|=
literal|null
decl_stmt|;
name|ResultSet
name|res
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stmt
operator|=
name|getStatement
argument_list|(
name|con
argument_list|,
name|SELECT_SRC_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|long
name|cmn
init|=
name|res
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|lm
init|=
name|res
operator|.
name|getBoolean
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|long
name|lval
init|=
name|res
operator|.
name|getLong
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Date
name|expiry
init|=
literal|0
operator|==
name|lval
condition|?
literal|null
else|:
operator|new
name|Date
argument_list|(
name|lval
argument_list|)
decl_stmt|;
name|String
name|oidValue
init|=
name|res
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|Identifier
name|oi
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|oidValue
condition|)
block|{
name|oi
operator|=
name|RMUtils
operator|.
name|getWSRMFactory
argument_list|()
operator|.
name|createIdentifier
argument_list|()
expr_stmt|;
name|oi
operator|.
name|setValue
argument_list|(
name|oidValue
argument_list|)
expr_stmt|;
block|}
name|ProtocolVariation
name|pv
init|=
name|decodeProtocolVersion
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SourceSequence
argument_list|(
name|sid
argument_list|,
name|expiry
argument_list|,
name|oi
argument_list|,
name|cmn
argument_list|,
name|lm
argument_list|,
name|pv
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|conex
operator|=
name|ex
expr_stmt|;
comment|// ignore
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SELECT_SRC_SEQ_FAILED_MSG"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|releaseResources
argument_list|(
name|stmt
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|updateConnectionState
argument_list|(
name|con
argument_list|,
name|conex
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|removeDestinationSequence
parameter_list|(
name|Identifier
name|sid
parameter_list|)
block|{
name|Connection
name|con
init|=
name|verifyConnection
argument_list|()
decl_stmt|;
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
name|SQLException
name|conex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|stmt
operator|=
name|getStatement
argument_list|(
name|con
argument_list|,
name|DELETE_DEST_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|()
expr_stmt|;
name|commit
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|conex
operator|=
name|ex
expr_stmt|;
name|abort
argument_list|(
name|con
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|releaseResources
argument_list|(
name|stmt
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|updateConnectionState
argument_list|(
name|con
argument_list|,
name|conex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeSourceSequence
parameter_list|(
name|Identifier
name|sid
parameter_list|)
block|{
name|Connection
name|con
init|=
name|verifyConnection
argument_list|()
decl_stmt|;
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
name|SQLException
name|conex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|stmt
operator|=
name|getStatement
argument_list|(
name|con
argument_list|,
name|DELETE_SRC_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|()
expr_stmt|;
name|commit
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|conex
operator|=
name|ex
expr_stmt|;
name|abort
argument_list|(
name|con
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|releaseResources
argument_list|(
name|stmt
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|updateConnectionState
argument_list|(
name|con
argument_list|,
name|conex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|DestinationSequence
argument_list|>
name|getDestinationSequences
parameter_list|(
name|String
name|endpointIdentifier
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting destination sequences for endpoint: "
operator|+
name|endpointIdentifier
argument_list|)
expr_stmt|;
block|}
name|Connection
name|con
init|=
name|verifyConnection
argument_list|()
decl_stmt|;
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
name|SQLException
name|conex
init|=
literal|null
decl_stmt|;
name|Collection
argument_list|<
name|DestinationSequence
argument_list|>
name|seqs
init|=
operator|new
name|ArrayList
argument_list|<
name|DestinationSequence
argument_list|>
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stmt
operator|=
name|getStatement
argument_list|(
name|con
argument_list|,
name|SELECT_DEST_SEQUENCES_STMT_STR
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|endpointIdentifier
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|Identifier
name|sid
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid
operator|.
name|setValue
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|EndpointReferenceType
name|acksTo
init|=
name|RMUtils
operator|.
name|createReference
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|lm
init|=
name|res
operator|.
name|getLong
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|ProtocolVariation
name|pv
init|=
name|decodeProtocolVersion
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|res
operator|.
name|getBinaryStream
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|SequenceAcknowledgement
name|ack
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|is
condition|)
block|{
name|ack
operator|=
name|PersistenceUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|deserialiseAcknowledgment
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|DestinationSequence
name|seq
init|=
operator|new
name|DestinationSequence
argument_list|(
name|sid
argument_list|,
name|acksTo
argument_list|,
name|lm
argument_list|,
name|ack
argument_list|,
name|pv
argument_list|)
decl_stmt|;
name|seqs
operator|.
name|add
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|conex
operator|=
name|ex
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SELECT_DEST_SEQ_FAILED_MSG"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|releaseResources
argument_list|(
name|stmt
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|updateConnectionState
argument_list|(
name|con
argument_list|,
name|conex
argument_list|)
expr_stmt|;
block|}
return|return
name|seqs
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|SourceSequence
argument_list|>
name|getSourceSequences
parameter_list|(
name|String
name|endpointIdentifier
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Getting source sequences for endpoint: "
operator|+
name|endpointIdentifier
argument_list|)
expr_stmt|;
block|}
name|Connection
name|con
init|=
name|verifyConnection
argument_list|()
decl_stmt|;
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
name|SQLException
name|conex
init|=
literal|null
decl_stmt|;
name|Collection
argument_list|<
name|SourceSequence
argument_list|>
name|seqs
init|=
operator|new
name|ArrayList
argument_list|<
name|SourceSequence
argument_list|>
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stmt
operator|=
name|getStatement
argument_list|(
name|con
argument_list|,
name|SELECT_SRC_SEQUENCES_STMT_STR
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|endpointIdentifier
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|Identifier
name|sid
init|=
operator|new
name|Identifier
argument_list|()
decl_stmt|;
name|sid
operator|.
name|setValue
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|cmn
init|=
name|res
operator|.
name|getLong
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|boolean
name|lm
init|=
name|res
operator|.
name|getBoolean
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|long
name|lval
init|=
name|res
operator|.
name|getLong
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|Date
name|expiry
init|=
literal|0
operator|==
name|lval
condition|?
literal|null
else|:
operator|new
name|Date
argument_list|(
name|lval
argument_list|)
decl_stmt|;
name|String
name|oidValue
init|=
name|res
operator|.
name|getString
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Identifier
name|oi
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|oidValue
condition|)
block|{
name|oi
operator|=
operator|new
name|Identifier
argument_list|()
expr_stmt|;
name|oi
operator|.
name|setValue
argument_list|(
name|oidValue
argument_list|)
expr_stmt|;
block|}
name|ProtocolVariation
name|pv
init|=
name|decodeProtocolVersion
argument_list|(
name|res
operator|.
name|getString
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|SourceSequence
name|seq
init|=
operator|new
name|SourceSequence
argument_list|(
name|sid
argument_list|,
name|expiry
argument_list|,
name|oi
argument_list|,
name|cmn
argument_list|,
name|lm
argument_list|,
name|pv
argument_list|)
decl_stmt|;
name|seqs
operator|.
name|add
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|conex
operator|=
name|ex
expr_stmt|;
comment|// ignore
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SELECT_SRC_SEQ_FAILED_MSG"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|releaseResources
argument_list|(
name|stmt
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|updateConnectionState
argument_list|(
name|con
argument_list|,
name|conex
argument_list|)
expr_stmt|;
block|}
return|return
name|seqs
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|RMMessage
argument_list|>
name|getMessages
parameter_list|(
name|Identifier
name|sid
parameter_list|,
name|boolean
name|outbound
parameter_list|)
block|{
name|Connection
name|con
init|=
name|verifyConnection
argument_list|()
decl_stmt|;
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
name|SQLException
name|conex
init|=
literal|null
decl_stmt|;
name|Collection
argument_list|<
name|RMMessage
argument_list|>
name|msgs
init|=
operator|new
name|ArrayList
argument_list|<
name|RMMessage
argument_list|>
argument_list|()
decl_stmt|;
name|ResultSet
name|res
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stmt
operator|=
name|getStatement
argument_list|(
name|con
argument_list|,
name|outbound
condition|?
name|SELECT_OUTBOUND_MESSAGES_STMT_STR
else|:
name|SELECT_INBOUND_MESSAGES_STMT_STR
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
while|while
condition|(
name|res
operator|.
name|next
argument_list|()
condition|)
block|{
name|long
name|mn
init|=
name|res
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|to
init|=
name|res
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Blob
name|blob
init|=
name|res
operator|.
name|getBlob
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|RMMessage
name|msg
init|=
operator|new
name|RMMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setMessageNumber
argument_list|(
name|mn
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setTo
argument_list|(
name|to
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setContent
argument_list|(
name|blob
operator|.
name|getBinaryStream
argument_list|()
argument_list|)
expr_stmt|;
name|msgs
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|conex
operator|=
name|ex
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
operator|new
name|Message
argument_list|(
name|outbound
condition|?
literal|"SELECT_OUTBOUND_MSGS_FAILED_MSG"
else|:
literal|"SELECT_INBOUND_MSGS_FAILED_MSG"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
operator|new
name|Message
argument_list|(
name|outbound
condition|?
literal|"SELECT_OUTBOUND_MSGS_FAILED_MSG"
else|:
literal|"SELECT_INBOUND_MSGS_FAILED_MSG"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|releaseResources
argument_list|(
name|stmt
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|updateConnectionState
argument_list|(
name|con
argument_list|,
name|conex
argument_list|)
expr_stmt|;
block|}
return|return
name|msgs
return|;
block|}
specifier|public
name|void
name|persistIncoming
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|,
name|RMMessage
name|msg
parameter_list|)
block|{
name|Connection
name|con
init|=
name|verifyConnection
argument_list|()
decl_stmt|;
name|SQLException
name|conex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|updateDestinationSequence
argument_list|(
name|con
argument_list|,
name|seq
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
operator|&&
name|msg
operator|.
name|getCachedOutputStream
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|storeMessage
argument_list|(
name|con
argument_list|,
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|msg
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|conex
operator|=
name|ex
expr_stmt|;
name|abort
argument_list|(
name|con
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|abort
argument_list|(
name|con
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|updateConnectionState
argument_list|(
name|con
argument_list|,
name|conex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|persistOutgoing
parameter_list|(
name|SourceSequence
name|seq
parameter_list|,
name|RMMessage
name|msg
parameter_list|)
block|{
name|Connection
name|con
init|=
name|verifyConnection
argument_list|()
decl_stmt|;
name|SQLException
name|conex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|updateSourceSequence
argument_list|(
name|con
argument_list|,
name|seq
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
operator|&&
name|msg
operator|.
name|getCachedOutputStream
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|storeMessage
argument_list|(
name|con
argument_list|,
name|seq
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|msg
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|commit
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|conex
operator|=
name|ex
expr_stmt|;
name|abort
argument_list|(
name|con
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|abort
argument_list|(
name|con
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|updateConnectionState
argument_list|(
name|con
argument_list|,
name|conex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeMessages
parameter_list|(
name|Identifier
name|sid
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|messageNrs
parameter_list|,
name|boolean
name|outbound
parameter_list|)
block|{
name|Connection
name|con
init|=
name|verifyConnection
argument_list|()
decl_stmt|;
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
name|SQLException
name|conex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stmt
operator|=
name|getStatement
argument_list|(
name|con
argument_list|,
name|outbound
condition|?
name|DELETE_OUTBOUND_MESSAGE_STMT_STR
else|:
name|DELETE_INBOUND_MESSAGE_STMT_STR
argument_list|)
expr_stmt|;
name|beginTransaction
argument_list|()
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|sid
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|messageNr
range|:
name|messageNrs
control|)
block|{
name|stmt
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|messageNr
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
name|commit
argument_list|(
name|con
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|conex
operator|=
name|ex
expr_stmt|;
name|abort
argument_list|(
name|con
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|releaseResources
argument_list|(
name|stmt
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|updateConnectionState
argument_list|(
name|con
argument_list|,
name|conex
argument_list|)
expr_stmt|;
block|}
block|}
comment|// transaction demarcation
comment|//
specifier|protected
name|void
name|beginTransaction
parameter_list|()
block|{     }
specifier|protected
name|void
name|commit
parameter_list|(
name|Connection
name|con
parameter_list|)
throws|throws
name|SQLException
block|{
name|con
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|/**      * This method assumes that the connection is held and reused.      * Otherwise, use commit(Connection con)      */
specifier|protected
name|void
name|commit
parameter_list|()
throws|throws
name|SQLException
block|{
name|commit
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|abort
parameter_list|(
name|Connection
name|con
parameter_list|)
block|{
try|try
block|{
name|con
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"ABORT_FAILED_MSG"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|abort
parameter_list|()
block|{
name|abort
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
comment|// helpers
specifier|protected
name|void
name|storeMessage
parameter_list|(
name|Connection
name|con
parameter_list|,
name|Identifier
name|sid
parameter_list|,
name|RMMessage
name|msg
parameter_list|,
name|boolean
name|outbound
parameter_list|)
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|String
name|id
init|=
name|sid
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|nr
init|=
name|msg
operator|.
name|getMessageNumber
argument_list|()
decl_stmt|;
name|String
name|to
init|=
name|msg
operator|.
name|getTo
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Storing {0} message number {1} for sequence {2}, to = {3}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|outbound
condition|?
literal|"outbound"
else|:
literal|"inbound"
block|,
name|nr
block|,
name|id
block|,
name|to
block|}
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|msgin
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
try|try
block|{
name|msgin
operator|=
name|msg
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|stmt
operator|=
name|getStatement
argument_list|(
name|con
argument_list|,
name|outbound
condition|?
name|CREATE_OUTBOUND_MESSAGE_STMT_STR
else|:
name|CREATE_INBOUND_MESSAGE_STMT_STR
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
name|i
operator|++
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setLong
argument_list|(
name|i
operator|++
argument_list|,
name|nr
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
name|i
operator|++
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setBinaryStream
argument_list|(
name|i
operator|++
argument_list|,
name|msgin
argument_list|,
operator|(
name|int
operator|)
name|msg
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Successfully stored {0} message number {1} for sequence {2}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|outbound
condition|?
literal|"outbound"
else|:
literal|"inbound"
block|,
name|nr
block|,
name|id
block|}
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|msgin
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|msgin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|releaseResources
argument_list|(
name|stmt
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * this method is only useful when keepConnection is set to true      */
specifier|protected
name|void
name|storeMessage
parameter_list|(
name|Identifier
name|sid
parameter_list|,
name|RMMessage
name|msg
parameter_list|,
name|boolean
name|outbound
parameter_list|)
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|storeMessage
argument_list|(
name|connection
argument_list|,
name|sid
argument_list|,
name|msg
argument_list|,
name|outbound
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|updateSourceSequence
parameter_list|(
name|Connection
name|con
parameter_list|,
name|SourceSequence
name|seq
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stmt
operator|=
name|getStatement
argument_list|(
name|con
argument_list|,
name|UPDATE_SRC_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|seq
operator|.
name|getCurrentMessageNr
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|seq
operator|.
name|isLastMessage
argument_list|()
condition|?
literal|"1"
else|:
literal|"0"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|releaseResources
argument_list|(
name|stmt
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @throws SQLException       */
specifier|protected
name|void
name|updateSourceSequence
parameter_list|(
name|SourceSequence
name|seq
parameter_list|)
throws|throws
name|SQLException
block|{
name|updateSourceSequence
argument_list|(
name|connection
argument_list|,
name|seq
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|updateDestinationSequence
parameter_list|(
name|Connection
name|con
parameter_list|,
name|DestinationSequence
name|seq
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|stmt
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stmt
operator|=
name|getStatement
argument_list|(
name|con
argument_list|,
name|UPDATE_DEST_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|long
name|lastMessageNr
init|=
name|seq
operator|.
name|getLastMessageNumber
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|lastMessageNr
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|PersistenceUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|serialiseAcknowledgment
argument_list|(
name|seq
operator|.
name|getAcknowledgment
argument_list|()
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|setBinaryStream
argument_list|(
literal|2
argument_list|,
name|is
argument_list|,
name|is
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|setString
argument_list|(
literal|3
argument_list|,
name|seq
operator|.
name|getIdentifier
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|releaseResources
argument_list|(
name|stmt
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @throws IOException       * @throws SQLException      */
specifier|protected
name|void
name|updateDestinationSequence
parameter_list|(
name|DestinationSequence
name|seq
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|updateDestinationSequence
argument_list|(
name|connection
argument_list|,
name|seq
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createTables
parameter_list|()
throws|throws
name|SQLException
block|{
name|Connection
name|con
init|=
name|verifyConnection
argument_list|()
decl_stmt|;
name|Statement
name|stmt
init|=
literal|null
decl_stmt|;
try|try
block|{
name|con
operator|.
name|setAutoCommit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stmt
operator|=
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
try|try
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|CREATE_SRC_SEQUENCES_TABLE_STMT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isTableExistsError
argument_list|(
name|ex
argument_list|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Table CXF_RM_SRC_SEQUENCES already exists."
argument_list|)
expr_stmt|;
name|verifyTable
argument_list|(
name|con
argument_list|,
name|SRC_SEQUENCES_TABLE_NAME
argument_list|,
name|SRC_SEQUENCES_TABLE_COLS
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|stmt
operator|=
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
try|try
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|CREATE_DEST_SEQUENCES_TABLE_STMT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isTableExistsError
argument_list|(
name|ex
argument_list|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Table CXF_RM_DEST_SEQUENCES already exists."
argument_list|)
expr_stmt|;
name|verifyTable
argument_list|(
name|con
argument_list|,
name|DEST_SEQUENCES_TABLE_NAME
argument_list|,
name|DEST_SEQUENCES_TABLE_COLS
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|tableName
range|:
operator|new
name|String
index|[]
block|{
name|OUTBOUND_MSGS_TABLE_NAME
block|,
name|INBOUND_MSGS_TABLE_NAME
block|}
control|)
block|{
name|stmt
operator|=
name|con
operator|.
name|createStatement
argument_list|()
expr_stmt|;
try|try
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|CREATE_MESSAGES_TABLE_STMT
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isTableExistsError
argument_list|(
name|ex
argument_list|)
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" already exists."
argument_list|)
expr_stmt|;
block|}
name|verifyTable
argument_list|(
name|con
argument_list|,
name|tableName
argument_list|,
name|MESSAGES_TABLE_COLS
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|==
literal|null
operator|&&
name|con
operator|!=
literal|null
condition|)
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|verifyTable
parameter_list|(
name|Connection
name|con
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
index|[]
index|[]
name|tableCols
parameter_list|)
block|{
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|newCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DatabaseMetaData
name|metadata
init|=
name|con
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|rs
operator|=
name|metadata
operator|.
name|getColumns
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
literal|"%"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dbCols
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|dbCols
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
index|[]
name|col
range|:
name|tableCols
control|)
block|{
if|if
condition|(
operator|!
name|dbCols
operator|.
name|contains
argument_list|(
name|col
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|newCols
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Table "
operator|+
name|tableName
operator|+
literal|" cannot be verified."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
if|if
condition|(
name|newCols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// need to add the new columns
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Table "
operator|+
name|tableName
operator|+
literal|" needs additional columns"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|String
index|[]
name|newCol
range|:
name|newCols
control|)
block|{
name|Statement
name|st
init|=
name|con
operator|.
name|createStatement
argument_list|()
decl_stmt|;
try|try
block|{
name|st
operator|.
name|executeUpdate
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|ALTER_TABLE_STMT_STR
argument_list|,
name|tableName
argument_list|,
name|newCol
index|[
literal|0
index|]
argument_list|,
name|newCol
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Successfully added column {0} to table {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|tableName
block|,
name|newCol
index|[
literal|0
index|]
block|}
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|st
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Table "
operator|+
name|tableName
operator|+
literal|" cannot be altered."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|verifyTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
index|[]
index|[]
name|tableCols
parameter_list|)
block|{
name|verifyTable
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|tableCols
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the current schema associated with the connection.      * If the connection is not set (e.g., keepConnection is false, it has no effect.      * @throws SQLException      */
specifier|protected
name|void
name|setCurrentSchema
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|schemaName
operator|==
literal|null
operator|||
name|connection
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Statement
name|stmt
init|=
name|connection
operator|.
name|createStatement
argument_list|()
decl_stmt|;
comment|// schemaName has been verified at setSchemaName(String)
try|try
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|CREATE_SCHEMA_STMT_STR
argument_list|,
name|schemaName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
comment|// assume it is already created or no authorization is provided (create one manually)
block|}
finally|finally
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|stmt
operator|=
name|connection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|SQLException
name|ex0
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SET_SCHEMA_STMT_STRS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|stmt
operator|.
name|executeUpdate
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
name|SET_SCHEMA_STMT_STRS
index|[
name|i
index|]
argument_list|,
name|schemaName
argument_list|)
argument_list|)
expr_stmt|;
name|ex0
operator|=
literal|null
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|setNextException
argument_list|(
name|ex0
argument_list|)
expr_stmt|;
name|ex0
operator|=
name|ex
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|SET_SCHEMA_STMT_STRS
operator|.
name|length
operator|-
literal|1
condition|)
block|{
throw|throw
name|ex0
throw|;
block|}
comment|// continue
block|}
finally|finally
block|{
comment|// close the statement after its last use
if|if
condition|(
name|ex0
operator|==
literal|null
operator|||
name|i
operator|==
name|SET_SCHEMA_STMT_STRS
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Returns either the locally cached statement or the one from the specified connection       * depending on whether the connection is held by this store. If the statement retrieved from      * the local cache, it is locked until it is released. The retrieved statement must be       * released using releaseResources(PreparedStatement stmt, ResultSet rs).      *       * @param con      * @param sql      * @return      * @throws SQLException      */
specifier|protected
name|PreparedStatement
name|getStatement
parameter_list|(
name|Connection
name|con
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|PreparedStatement
name|stmt
init|=
name|cachedStatements
operator|.
name|get
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|statementLocks
operator|.
name|get
argument_list|(
name|stmt
argument_list|)
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|stmt
return|;
block|}
else|else
block|{
return|return
name|con
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
return|;
block|}
block|}
comment|/**      * Releases the statement and any result set.       *        * @param stmt      * @param rs      */
specifier|protected
name|void
name|releaseResources
parameter_list|(
name|PreparedStatement
name|stmt
parameter_list|,
name|ResultSet
name|rs
parameter_list|)
block|{
if|if
condition|(
name|rs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|stmt
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|statementLocks
operator|.
name|get
argument_list|(
name|stmt
argument_list|)
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|stmt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|cacheStatement
parameter_list|(
name|Connection
name|con
parameter_list|,
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
name|PreparedStatement
name|stmt
init|=
name|con
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
decl_stmt|;
name|cachedStatements
operator|.
name|put
argument_list|(
name|sql
argument_list|,
name|stmt
argument_list|)
expr_stmt|;
name|statementLocks
operator|.
name|put
argument_list|(
name|stmt
argument_list|,
operator|new
name|ReentrantLock
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|cacheStatements
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
comment|// if the connection is not held, no statement is cached.
return|return;
block|}
comment|// create a statement specific lock table
name|statementLocks
operator|=
operator|new
name|HashMap
argument_list|<
name|Statement
argument_list|,
name|Lock
argument_list|>
argument_list|()
expr_stmt|;
name|cachedStatements
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PreparedStatement
argument_list|>
argument_list|()
expr_stmt|;
comment|// create the statements in advance if the connection is to be kept
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|CREATE_DEST_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|CREATE_SRC_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|DELETE_DEST_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|DELETE_SRC_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|UPDATE_DEST_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|UPDATE_SRC_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|SELECT_DEST_SEQUENCES_STMT_STR
argument_list|)
expr_stmt|;
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|SELECT_SRC_SEQUENCES_STMT_STR
argument_list|)
expr_stmt|;
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|SELECT_DEST_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|SELECT_SRC_SEQUENCE_STMT_STR
argument_list|)
expr_stmt|;
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|CREATE_INBOUND_MESSAGE_STMT_STR
argument_list|)
expr_stmt|;
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|CREATE_OUTBOUND_MESSAGE_STMT_STR
argument_list|)
expr_stmt|;
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|DELETE_INBOUND_MESSAGE_STMT_STR
argument_list|)
expr_stmt|;
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|DELETE_OUTBOUND_MESSAGE_STMT_STR
argument_list|)
expr_stmt|;
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|SELECT_INBOUND_MESSAGES_STMT_STR
argument_list|)
expr_stmt|;
name|cacheStatement
argument_list|(
name|connection
argument_list|,
name|SELECT_OUTBOUND_MESSAGES_STMT_STR
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|keepConnection
operator|&&
name|connection
operator|==
literal|null
condition|)
block|{
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
operator|&&
name|schemaName
operator|!=
literal|null
condition|)
block|{
name|setCurrentSchema
argument_list|()
expr_stmt|;
block|}
name|createTables
argument_list|()
expr_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|cacheStatements
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CONNECT_EXC"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|SQLException
name|se
init|=
name|ex
decl_stmt|;
while|while
condition|(
name|se
operator|.
name|getNextException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|se
operator|=
name|se
operator|.
name|getNextException
argument_list|()
expr_stmt|;
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CONNECT_EXC"
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RMStoreException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"INITIALIZATION_FAILED_MSG"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
specifier|protected
name|Connection
name|createConnection
parameter_list|()
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Using derby.system.home: {0}"
argument_list|,
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
literal|"derby.system.home"
argument_list|)
argument_list|)
expr_stmt|;
name|Connection
name|con
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|dataSource
condition|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Using dataSource: "
operator|+
name|dataSource
argument_list|)
expr_stmt|;
block|}
name|con
operator|=
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CONNECT_EXC"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
assert|assert
literal|null
operator|!=
name|url
assert|;
assert|assert
literal|null
operator|!=
name|driverClassName
assert|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Using url: "
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
name|Class
operator|.
name|forName
argument_list|(
name|driverClassName
argument_list|)
expr_stmt|;
name|con
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|,
name|userName
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CONNECT_EXC"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"CONNECT_EXC"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|con
return|;
block|}
specifier|protected
name|Connection
name|verifyConnection
parameter_list|()
block|{
name|Connection
name|con
decl_stmt|;
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
comment|// return a new connection
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// return the cached connection or create and cache a new one if the old one is dead
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|createdConnection
operator|&&
name|nextReconnectAttempt
operator|>
literal|0
operator|&&
operator|(
name|maxReconnectAttempts
argument_list|<
literal|0
operator|||
name|maxReconnectAttempts
argument_list|>
name|reconnectAttempts
operator|)
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|nextReconnectAttempt
condition|)
block|{
comment|// destroy the broken connection
name|destroy
argument_list|()
expr_stmt|;
comment|// try to reconnect
name|reconnectAttempts
operator|++
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
comment|// reset the next reconnect attempt time
name|nextReconnectAttempt
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|INFO
argument_list|,
literal|"WAIT_RECONNECT_MSG"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|con
operator|=
name|connection
expr_stmt|;
block|}
return|return
name|con
return|;
block|}
specifier|protected
name|void
name|updateConnectionState
parameter_list|(
name|Connection
name|con
parameter_list|,
name|SQLException
name|e
parameter_list|)
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
comment|// close the locally created connection
try|try
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// update the status of the cached connection
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
comment|// reset the previous error status
name|reconnectDelay
operator|=
literal|0
expr_stmt|;
name|reconnectAttempts
operator|=
literal|0
expr_stmt|;
name|nextReconnectAttempt
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|createdConnection
operator|&&
name|isRecoverableError
argument_list|(
name|e
argument_list|)
condition|)
block|{
comment|// update the next reconnect schedule
if|if
condition|(
name|reconnectDelay
operator|==
literal|0
condition|)
block|{
name|reconnectDelay
operator|=
name|initialReconnectDelay
expr_stmt|;
block|}
if|if
condition|(
name|nextReconnectAttempt
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
name|nextReconnectAttempt
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|reconnectDelay
expr_stmt|;
name|reconnectDelay
operator|=
name|reconnectDelay
operator|*
name|useExponentialBackOff
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|deleteDatabaseFiles
parameter_list|()
block|{
name|deleteDatabaseFiles
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|deleteDatabaseFiles
parameter_list|(
name|String
name|dbName
parameter_list|,
name|boolean
name|now
parameter_list|)
block|{
name|String
name|dsh
init|=
name|SystemPropertyAction
operator|.
name|getPropertyOrNull
argument_list|(
literal|"derby.system.home"
argument_list|)
decl_stmt|;
name|File
name|root
init|=
literal|null
decl_stmt|;
name|File
name|log
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|dsh
condition|)
block|{
name|log
operator|=
operator|new
name|File
argument_list|(
literal|"derby.log"
argument_list|)
expr_stmt|;
name|root
operator|=
operator|new
name|File
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|=
operator|new
name|File
argument_list|(
name|dsh
argument_list|,
literal|"derby.log"
argument_list|)
expr_stmt|;
name|root
operator|=
operator|new
name|File
argument_list|(
name|dsh
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|now
condition|)
block|{
name|boolean
name|deleted
init|=
name|log
operator|.
name|delete
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Deleted log file {0}: {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|log
block|,
name|deleted
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|root
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Trying to delete directory {0}"
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|recursiveDelete
argument_list|(
name|root
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|String
name|encodeProtocolVersion
parameter_list|(
name|ProtocolVariation
name|pv
parameter_list|)
block|{
return|return
name|pv
operator|.
name|getCodec
argument_list|()
operator|.
name|getWSRMNamespace
argument_list|()
operator|+
literal|' '
operator|+
name|pv
operator|.
name|getCodec
argument_list|()
operator|.
name|getWSANamespace
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|ProtocolVariation
name|decodeProtocolVersion
parameter_list|(
name|String
name|pv
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|pv
condition|)
block|{
name|int
name|d
init|=
name|pv
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>
literal|0
condition|)
block|{
return|return
name|ProtocolVariation
operator|.
name|findVariant
argument_list|(
name|pv
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|d
argument_list|)
argument_list|,
name|pv
operator|.
name|substring
argument_list|(
name|d
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
name|ProtocolVariation
operator|.
name|RM10WSA200408
return|;
block|}
specifier|private
specifier|static
name|void
name|recursiveDelete
parameter_list|(
name|File
name|dir
parameter_list|,
name|boolean
name|now
parameter_list|)
block|{
for|for
control|(
name|File
name|f
range|:
name|dir
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|recursiveDelete
argument_list|(
name|f
argument_list|,
name|now
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|now
condition|)
block|{
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|f
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|now
condition|)
block|{
name|dir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|buildCreateTableStatement
parameter_list|(
name|String
name|name
parameter_list|,
name|String
index|[]
index|[]
name|cols
parameter_list|,
name|String
index|[]
name|keys
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"CREATE TABLE "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
for|for
control|(
name|String
index|[]
name|col
range|:
name|cols
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|col
index|[
literal|0
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|col
index|[
literal|1
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"PRIMARY KEY ("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"))"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|boolean
name|isTableExistsError
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
comment|// we could be deriving the state/code from the driver url to avoid explicit setting of them
return|return
operator|(
literal|null
operator|!=
name|tableExistsState
operator|&&
name|tableExistsState
operator|.
name|equals
argument_list|(
name|ex
operator|.
name|getSQLState
argument_list|()
argument_list|)
operator|)
operator|||
name|tableExistsCode
operator|==
name|ex
operator|.
name|getErrorCode
argument_list|()
return|;
block|}
specifier|protected
name|boolean
name|isRecoverableError
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
comment|// check for a transient or non-transient connection exception
return|return
name|ex
operator|.
name|getSQLState
argument_list|()
operator|!=
literal|null
operator|&&
name|ex
operator|.
name|getSQLState
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"08"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

