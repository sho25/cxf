begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|rm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_comment
comment|//import org.apache.cxf.endpoint.Endpoint;
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|ManagedComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedResource
import|;
end_import

begin_comment
comment|/**  * The ManagedRMManager is a JMX managed bean for RMManager.  *  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|componentName
operator|=
literal|"RMManager"
argument_list|,
name|description
operator|=
literal|"Responsible for managing RMEndpoints."
argument_list|)
specifier|public
class|class
name|ManagedRMManager
implements|implements
name|ManagedComponent
block|{
specifier|private
name|RMManager
name|manager
decl_stmt|;
specifier|public
name|ManagedRMManager
parameter_list|(
name|RMManager
name|manager
parameter_list|)
block|{
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.apache.cxf.management.ManagedComponent#getObjectName()      */
specifier|public
name|ObjectName
name|getObjectName
parameter_list|()
throws|throws
name|JMException
block|{
return|return
name|RMUtils
operator|.
name|getManagedObjectName
argument_list|(
name|manager
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|manager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|ManagedOperation
specifier|public
name|String
index|[]
name|getEndpointIdentifiers
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|identifiers
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//FIXME find this method for 2.5
comment|//        for (Endpoint ep : manager.getReliableEndpointsMap().keySet()) {
for|for
control|(
name|Endpoint
name|ep
range|:
name|getReliableEndpointsMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|identifiers
operator|.
name|add
argument_list|(
name|RMUtils
operator|.
name|getEndpointIdentifier
argument_list|(
name|ep
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|identifiers
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|identifiers
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|//TODO see the comment above
specifier|private
name|Map
argument_list|<
name|Endpoint
argument_list|,
name|RMEndpoint
argument_list|>
name|getReliableEndpointsMap
parameter_list|()
block|{
name|Map
argument_list|<
name|Endpoint
argument_list|,
name|RMEndpoint
argument_list|>
name|epmap
init|=
operator|new
name|HashMap
argument_list|<
name|Endpoint
argument_list|,
name|RMEndpoint
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ProtocolVariation
name|pv
range|:
name|manager
operator|.
name|getEndpointMaps
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|epmap
operator|.
name|putAll
argument_list|(
name|manager
operator|.
name|getEndpointMaps
argument_list|()
operator|.
name|get
argument_list|(
name|pv
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|epmap
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Using Store"
argument_list|)
specifier|public
name|boolean
name|isUsingStore
parameter_list|()
block|{
return|return
name|manager
operator|.
name|getStore
argument_list|()
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

