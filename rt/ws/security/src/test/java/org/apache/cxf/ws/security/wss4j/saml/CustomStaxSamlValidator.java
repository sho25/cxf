begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|saml
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|OpenSAMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|impl
operator|.
name|securityToken
operator|.
name|SamlSecurityTokenImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SamlSecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|validate
operator|.
name|SamlTokenValidatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|validate
operator|.
name|TokenContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|InboundSecurityToken
import|;
end_import

begin_comment
comment|/**  * A trivial custom Validator for a SAML Assertion. It makes sure that the issuer is  * "www.example.com", checks the version of the assertion, and checks the subject confirmation  * method.  */
end_comment

begin_class
specifier|public
class|class
name|CustomStaxSamlValidator
extends|extends
name|SamlTokenValidatorImpl
block|{
specifier|private
name|boolean
name|requireSAML1Assertion
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|requireSenderVouches
init|=
literal|true
decl_stmt|;
specifier|public
name|void
name|setRequireSAML1Assertion
parameter_list|(
name|boolean
name|requireSAML1Assertion
parameter_list|)
block|{
name|this
operator|.
name|requireSAML1Assertion
operator|=
name|requireSAML1Assertion
expr_stmt|;
block|}
specifier|public
name|void
name|setRequireSenderVouches
parameter_list|(
name|boolean
name|requireSenderVouches
parameter_list|)
block|{
name|this
operator|.
name|requireSenderVouches
operator|=
name|requireSenderVouches
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|SamlSecurityToken
operator|&
name|InboundSecurityToken
parameter_list|>
name|T
name|validate
parameter_list|(
specifier|final
name|SamlAssertionWrapper
name|samlAssertionWrapper
parameter_list|,
specifier|final
name|InboundSecurityToken
name|subjectSecurityToken
parameter_list|,
specifier|final
name|TokenContext
name|tokenContext
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|//jdk 1.6 compiler bug? http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6302954
comment|//type parameters of<T>T cannot be determined; no unique maximal instance exists for type variable T with
comment|// upper bounds org.apache.wss4j.stax.securityToken.SamlSecurityToken,
comment|// org.apache.wss4j.stax.securityToken.SamlSecurityToken,
comment|// org.apache.xml.security.stax.ext.securityToken.InboundSecurityToken
comment|//works fine on jdk 1.7
specifier|final
name|SamlSecurityToken
name|token
init|=
name|super
operator|.
expr|<
comment|/*fake @see above*/
name|SamlSecurityTokenImpl
operator|>
name|validate
argument_list|(
name|samlAssertionWrapper
argument_list|,
name|subjectSecurityToken
argument_list|,
name|tokenContext
argument_list|)
decl_stmt|;
comment|//
comment|// Do some custom validation on the assertion
comment|//
if|if
condition|(
operator|!
literal|"www.example.com"
operator|.
name|equals
argument_list|(
name|samlAssertionWrapper
operator|.
name|getIssuerString
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
if|if
condition|(
name|requireSAML1Assertion
operator|&&
name|samlAssertionWrapper
operator|.
name|getSaml1
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|requireSAML1Assertion
operator|&&
name|samlAssertionWrapper
operator|.
name|getSaml2
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
name|String
name|confirmationMethod
init|=
name|samlAssertionWrapper
operator|.
name|getConfirmationMethods
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|confirmationMethod
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
if|if
condition|(
name|requireSenderVouches
operator|&&
operator|!
name|OpenSAMLUtil
operator|.
name|isMethodSenderVouches
argument_list|(
name|confirmationMethod
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|requireSenderVouches
operator|&&
operator|!
name|OpenSAMLUtil
operator|.
name|isMethodHolderOfKey
argument_list|(
name|confirmationMethod
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|)
throw|;
block|}
return|return
operator|(
name|T
operator|)
name|token
return|;
block|}
block|}
end_class

end_unit

