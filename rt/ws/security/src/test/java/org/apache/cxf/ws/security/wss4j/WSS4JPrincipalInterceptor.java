begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_comment
comment|/**  * A test interceptor to check that the Principal is not null + that the name is equal to a  * given name.  */
end_comment

begin_class
specifier|public
class|class
name|WSS4JPrincipalInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|SoapMessage
argument_list|>
block|{
specifier|private
name|String
name|principalName
decl_stmt|;
specifier|public
name|WSS4JPrincipalInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_INVOKE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|SecurityContext
name|context
init|=
name|message
operator|.
name|get
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SoapFault
argument_list|(
literal|"No Security Context"
argument_list|,
name|Fault
operator|.
name|FAULT_CODE_SERVER
argument_list|)
throw|;
block|}
name|Principal
name|principal
init|=
name|context
operator|.
name|getUserPrincipal
argument_list|()
decl_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SoapFault
argument_list|(
literal|"No Security Principal"
argument_list|,
name|Fault
operator|.
name|FAULT_CODE_SERVER
argument_list|)
throw|;
block|}
if|if
condition|(
name|principalName
operator|!=
literal|null
operator|&&
operator|!
name|principalName
operator|.
name|equals
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SoapFault
argument_list|(
literal|"Security Principal does not match"
argument_list|,
name|Fault
operator|.
name|FAULT_CODE_SERVER
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getPrincipalName
parameter_list|()
block|{
return|return
name|principalName
return|;
block|}
specifier|public
name|void
name|setPrincipalName
parameter_list|(
name|String
name|principalName
parameter_list|)
block|{
name|this
operator|.
name|principalName
operator|=
name|principalName
expr_stmt|;
block|}
block|}
end_class

end_unit

