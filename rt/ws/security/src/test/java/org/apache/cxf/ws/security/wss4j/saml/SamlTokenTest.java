begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|saml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
operator|.
name|NullResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|WSS4JInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|WSS4JOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|saml
operator|.
name|AbstractSAMLCallbackHandler
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|builder
operator|.
name|SAML1Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|builder
operator|.
name|SAML2Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSecurityEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|WSHandlerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Some tests for creating and processing (signed) SAML Assertions.  */
end_comment

begin_class
specifier|public
class|class
name|SamlTokenTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|public
name|SamlTokenTest
parameter_list|()
block|{     }
comment|/**      * This test creates a SAML1 Assertion and sends it in the security header to the provider.       */
annotation|@
name|Test
specifier|public
name|void
name|testSaml1Token
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_UNSIGNED
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_PROP_FILE
argument_list|,
literal|"saml_sv.properties"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_CALLBACK_CLASS
argument_list|,
literal|"org.apache.cxf.ws.security.wss4j.saml.SAML1CallbackHandler"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_UNSIGNED
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|customMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|CustomSamlValidator
name|validator
init|=
operator|new
name|CustomSamlValidator
argument_list|()
decl_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML2_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSS4JInInterceptor
operator|.
name|VALIDATOR_MAP
argument_list|,
name|customMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|xpaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security"
argument_list|)
expr_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security/saml1:Assertion"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inMessageProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|inMessageProperties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|VALIDATE_SAML_SUBJECT_CONFIRMATION
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|makeInvocation
argument_list|(
name|outProperties
argument_list|,
name|xpaths
argument_list|,
name|inProperties
argument_list|,
name|inMessageProperties
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|handlerResults
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
name|WSSecurityEngineResult
name|actionResult
init|=
name|WSSecurityUtil
operator|.
name|fetchActionResult
argument_list|(
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|ST_UNSIGNED
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|receivedAssertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|actionResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|receivedAssertion
operator|!=
literal|null
operator|&&
name|receivedAssertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|receivedAssertion
operator|.
name|isSigned
argument_list|()
assert|;
block|}
comment|/**      * This test creates a SAML2 Assertion and sends it in the security header to the provider.      */
annotation|@
name|Test
specifier|public
name|void
name|testSaml2Token
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_UNSIGNED
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_PROP_FILE
argument_list|,
literal|"saml_sv.properties"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_CALLBACK_CLASS
argument_list|,
literal|"org.apache.cxf.ws.security.wss4j.saml.SAML2CallbackHandler"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_UNSIGNED
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|customMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|CustomSamlValidator
name|validator
init|=
operator|new
name|CustomSamlValidator
argument_list|()
decl_stmt|;
name|validator
operator|.
name|setRequireSAML1Assertion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML2_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSS4JInInterceptor
operator|.
name|VALIDATOR_MAP
argument_list|,
name|customMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|xpaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security"
argument_list|)
expr_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security/saml2:Assertion"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inMessageProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|inMessageProperties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|VALIDATE_SAML_SUBJECT_CONFIRMATION
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|makeInvocation
argument_list|(
name|outProperties
argument_list|,
name|xpaths
argument_list|,
name|inProperties
argument_list|,
name|inMessageProperties
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|handlerResults
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
name|WSSecurityEngineResult
name|actionResult
init|=
name|WSSecurityUtil
operator|.
name|fetchActionResult
argument_list|(
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|ST_UNSIGNED
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|receivedAssertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|actionResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|receivedAssertion
operator|!=
literal|null
operator|&&
name|receivedAssertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|receivedAssertion
operator|.
name|isSigned
argument_list|()
assert|;
block|}
comment|/**      * This test creates a sender-vouches SAML1 Assertion, where the Assertion and SOAP body are       * signed, and sends it in the security header to the provider.      */
annotation|@
name|Test
specifier|public
name|void
name|testSaml1TokenSignedSenderVouches
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_SIGNED
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_PROP_FILE
argument_list|,
literal|"saml_sv.properties"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_KEY_ID
argument_list|,
literal|"DirectReference"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|USER
argument_list|,
literal|"myalias"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
literal|"myAliasPassword"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_CALLBACK_REF
argument_list|,
operator|new
name|SAML1CallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_UNSIGNED
operator|+
literal|" "
operator|+
name|WSHandlerConstants
operator|.
name|SIGNATURE
argument_list|)
expr_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_PROP_FILE
argument_list|,
literal|"insecurity.properties"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|customMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|CustomSamlValidator
name|validator
init|=
operator|new
name|CustomSamlValidator
argument_list|()
decl_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML2_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSS4JInInterceptor
operator|.
name|VALIDATOR_MAP
argument_list|,
name|customMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|xpaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security"
argument_list|)
expr_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security/saml1:Assertion"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|makeInvocation
argument_list|(
name|outProperties
argument_list|,
name|xpaths
argument_list|,
name|inProperties
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|handlerResults
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
name|WSSecurityEngineResult
name|actionResult
init|=
name|WSSecurityUtil
operator|.
name|fetchActionResult
argument_list|(
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|ST_UNSIGNED
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|receivedAssertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|actionResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|receivedAssertion
operator|!=
literal|null
operator|&&
name|receivedAssertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|receivedAssertion
operator|.
name|isSigned
argument_list|()
assert|;
name|actionResult
operator|=
name|WSSecurityUtil
operator|.
name|fetchActionResult
argument_list|(
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|SIGN
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actionResult
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test creates a sender-vouches SAML2 Assertion, where the Assertion and SOAP body are       * signed, and sends it in the security header to the provider.      */
annotation|@
name|Test
specifier|public
name|void
name|testSaml2TokenSignedSenderVouches
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_SIGNED
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_PROP_FILE
argument_list|,
literal|"saml_sv.properties"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_KEY_ID
argument_list|,
literal|"DirectReference"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|USER
argument_list|,
literal|"myalias"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
literal|"myAliasPassword"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_CALLBACK_REF
argument_list|,
operator|new
name|SAML2CallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_UNSIGNED
operator|+
literal|" "
operator|+
name|WSHandlerConstants
operator|.
name|SIGNATURE
argument_list|)
expr_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_PROP_FILE
argument_list|,
literal|"insecurity.properties"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|customMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|CustomSamlValidator
name|validator
init|=
operator|new
name|CustomSamlValidator
argument_list|()
decl_stmt|;
name|validator
operator|.
name|setRequireSAML1Assertion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML2_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSS4JInInterceptor
operator|.
name|VALIDATOR_MAP
argument_list|,
name|customMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|xpaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security"
argument_list|)
expr_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security/saml2:Assertion"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|makeInvocation
argument_list|(
name|outProperties
argument_list|,
name|xpaths
argument_list|,
name|inProperties
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|handlerResults
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
name|WSSecurityEngineResult
name|actionResult
init|=
name|WSSecurityUtil
operator|.
name|fetchActionResult
argument_list|(
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|ST_UNSIGNED
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|receivedAssertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|actionResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|receivedAssertion
operator|!=
literal|null
operator|&&
name|receivedAssertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|receivedAssertion
operator|.
name|isSigned
argument_list|()
assert|;
name|actionResult
operator|=
name|WSSecurityUtil
operator|.
name|fetchActionResult
argument_list|(
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|SIGN
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actionResult
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test creates a holder-of-key SAML1 Assertion, and sends it in the security header       * to the provider.      */
annotation|@
name|Test
specifier|public
name|void
name|testSaml1TokenHOK
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_SIGNED
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_PROP_FILE
argument_list|,
literal|"saml_hok.properties"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_KEY_ID
argument_list|,
literal|"DirectReference"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|USER
argument_list|,
literal|"alice"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_PROP_FILE
argument_list|,
literal|"alice.properties"
argument_list|)
expr_stmt|;
name|SAML1CallbackHandler
name|callbackHandler
init|=
operator|new
name|SAML1CallbackHandler
argument_list|()
decl_stmt|;
name|callbackHandler
operator|.
name|setConfirmationMethod
argument_list|(
name|SAML1Constants
operator|.
name|CONF_HOLDER_KEY
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_CALLBACK_REF
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_SIGNED
operator|+
literal|" "
operator|+
name|WSHandlerConstants
operator|.
name|SIGNATURE
argument_list|)
expr_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_PROP_FILE
argument_list|,
literal|"insecurity.properties"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|customMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|CustomSamlValidator
name|validator
init|=
operator|new
name|CustomSamlValidator
argument_list|()
decl_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML2_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSS4JInInterceptor
operator|.
name|VALIDATOR_MAP
argument_list|,
name|customMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|xpaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security"
argument_list|)
expr_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security/saml1:Assertion"
argument_list|)
expr_stmt|;
try|try
block|{
name|makeInvocation
argument_list|(
name|outProperties
argument_list|,
name|xpaths
argument_list|,
name|inProperties
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected in SAML Validator"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|validator
operator|.
name|setRequireSenderVouches
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|makeInvocation
argument_list|(
name|outProperties
argument_list|,
name|xpaths
argument_list|,
name|inProperties
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|handlerResults
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
name|WSSecurityEngineResult
name|actionResult
init|=
name|WSSecurityUtil
operator|.
name|fetchActionResult
argument_list|(
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|ST_SIGNED
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|receivedAssertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|actionResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|receivedAssertion
operator|!=
literal|null
operator|&&
name|receivedAssertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
assert|assert
name|receivedAssertion
operator|.
name|isSigned
argument_list|()
assert|;
name|actionResult
operator|=
name|WSSecurityUtil
operator|.
name|fetchActionResult
argument_list|(
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|SIGN
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actionResult
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test creates a holder-of-key SAML2 Assertion, and sends it in the security header       * to the provider.      */
annotation|@
name|Test
specifier|public
name|void
name|testSaml2TokenHOK
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_SIGNED
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_PROP_FILE
argument_list|,
literal|"saml_hok.properties"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_KEY_ID
argument_list|,
literal|"DirectReference"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|USER
argument_list|,
literal|"alice"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_PROP_FILE
argument_list|,
literal|"alice.properties"
argument_list|)
expr_stmt|;
name|SAML2CallbackHandler
name|callbackHandler
init|=
operator|new
name|SAML2CallbackHandler
argument_list|()
decl_stmt|;
name|callbackHandler
operator|.
name|setConfirmationMethod
argument_list|(
name|SAML2Constants
operator|.
name|CONF_HOLDER_KEY
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_CALLBACK_REF
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_SIGNED
operator|+
literal|" "
operator|+
name|WSHandlerConstants
operator|.
name|SIGNATURE
argument_list|)
expr_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_PROP_FILE
argument_list|,
literal|"insecurity.properties"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|customMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|CustomSamlValidator
name|validator
init|=
operator|new
name|CustomSamlValidator
argument_list|()
decl_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML2_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSS4JInInterceptor
operator|.
name|VALIDATOR_MAP
argument_list|,
name|customMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|xpaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security"
argument_list|)
expr_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security/saml2:Assertion"
argument_list|)
expr_stmt|;
try|try
block|{
name|makeInvocation
argument_list|(
name|outProperties
argument_list|,
name|xpaths
argument_list|,
name|inProperties
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected in SAML Validator"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|validator
operator|.
name|setRequireSenderVouches
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|makeInvocation
argument_list|(
name|outProperties
argument_list|,
name|xpaths
argument_list|,
name|inProperties
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected in SAML Validator"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Fault
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|validator
operator|.
name|setRequireSAML1Assertion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|makeInvocation
argument_list|(
name|outProperties
argument_list|,
name|xpaths
argument_list|,
name|inProperties
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|handlerResults
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
name|WSSecurityEngineResult
name|actionResult
init|=
name|WSSecurityUtil
operator|.
name|fetchActionResult
argument_list|(
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|ST_SIGNED
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|receivedAssertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|actionResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|receivedAssertion
operator|!=
literal|null
operator|&&
name|receivedAssertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
assert|assert
name|receivedAssertion
operator|.
name|isSigned
argument_list|()
assert|;
name|actionResult
operator|=
name|WSSecurityUtil
operator|.
name|fetchActionResult
argument_list|(
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|SIGN
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actionResult
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test creates a SAML2 Assertion and sends it in the security header to the provider.      * An single attribute is created for the roles but multiple attribute value elements.      */
annotation|@
name|Test
specifier|public
name|void
name|testSaml2TokenWithRoles
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_UNSIGNED
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_PROP_FILE
argument_list|,
literal|"saml_sv.properties"
argument_list|)
expr_stmt|;
name|SAML2CallbackHandler
name|callbackHandler
init|=
operator|new
name|SAML2CallbackHandler
argument_list|()
decl_stmt|;
name|callbackHandler
operator|.
name|setStatement
argument_list|(
name|Statement
operator|.
name|ATTR
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_CALLBACK_REF
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_UNSIGNED
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|customMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|CustomSamlValidator
name|validator
init|=
operator|new
name|CustomSamlValidator
argument_list|()
decl_stmt|;
name|validator
operator|.
name|setRequireSAML1Assertion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML2_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSS4JInInterceptor
operator|.
name|VALIDATOR_MAP
argument_list|,
name|customMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|xpaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security"
argument_list|)
expr_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security/saml2:Assertion"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inMessageProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|inMessageProperties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|VALIDATE_SAML_SUBJECT_CONFIRMATION
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|makeInvocation
argument_list|(
name|outProperties
argument_list|,
name|xpaths
argument_list|,
name|inProperties
argument_list|,
name|inMessageProperties
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|handlerResults
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
name|SecurityContext
name|sc
init|=
name|message
operator|.
name|get
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sc
operator|.
name|isUserInRole
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sc
operator|.
name|isUserInRole
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
expr_stmt|;
name|WSSecurityEngineResult
name|actionResult
init|=
name|WSSecurityUtil
operator|.
name|fetchActionResult
argument_list|(
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|ST_UNSIGNED
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|receivedAssertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|actionResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|receivedAssertion
operator|!=
literal|null
operator|&&
name|receivedAssertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|receivedAssertion
operator|.
name|isSigned
argument_list|()
assert|;
block|}
comment|/**      * This test creates a SAML2 Assertion and sends it in the security header to the provider.      * An attribute is created per role. There are several attributes with the same name.      */
annotation|@
name|Test
specifier|public
name|void
name|testSaml2TokenWithRolesSingleValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_UNSIGNED
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_PROP_FILE
argument_list|,
literal|"saml_sv.properties"
argument_list|)
expr_stmt|;
name|SAML2CallbackHandler
name|callbackHandler
init|=
operator|new
name|SAML2CallbackHandler
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|callbackHandler
operator|.
name|setStatement
argument_list|(
name|Statement
operator|.
name|ATTR
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_CALLBACK_REF
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_UNSIGNED
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|customMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|CustomSamlValidator
name|validator
init|=
operator|new
name|CustomSamlValidator
argument_list|()
decl_stmt|;
name|validator
operator|.
name|setRequireSAML1Assertion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML2_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSS4JInInterceptor
operator|.
name|VALIDATOR_MAP
argument_list|,
name|customMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|xpaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security"
argument_list|)
expr_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security/saml2:Assertion"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inMessageProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|inMessageProperties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|VALIDATE_SAML_SUBJECT_CONFIRMATION
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|makeInvocation
argument_list|(
name|outProperties
argument_list|,
name|xpaths
argument_list|,
name|inProperties
argument_list|,
name|inMessageProperties
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|handlerResults
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
name|SecurityContext
name|sc
init|=
name|message
operator|.
name|get
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sc
operator|.
name|isUserInRole
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sc
operator|.
name|isUserInRole
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
expr_stmt|;
name|WSSecurityEngineResult
name|actionResult
init|=
name|WSSecurityUtil
operator|.
name|fetchActionResult
argument_list|(
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|ST_UNSIGNED
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|receivedAssertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|actionResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|receivedAssertion
operator|!=
literal|null
operator|&&
name|receivedAssertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|receivedAssertion
operator|.
name|isSigned
argument_list|()
assert|;
block|}
comment|/**      * This test creates a SAML1 Assertion and sends it in the security header to the provider.      */
annotation|@
name|Test
comment|//@Ignore
specifier|public
name|void
name|testSaml1TokenWithRoles
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_UNSIGNED
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_PROP_FILE
argument_list|,
literal|"saml_sv.properties"
argument_list|)
expr_stmt|;
name|SAML1CallbackHandler
name|callbackHandler
init|=
operator|new
name|SAML1CallbackHandler
argument_list|()
decl_stmt|;
name|callbackHandler
operator|.
name|setStatement
argument_list|(
name|Statement
operator|.
name|ATTR
argument_list|)
expr_stmt|;
name|outProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SAML_CALLBACK_REF
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SAML_TOKEN_UNSIGNED
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|customMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|CustomSamlValidator
name|validator
init|=
operator|new
name|CustomSamlValidator
argument_list|()
decl_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|customMap
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|SAML2_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
name|inProperties
operator|.
name|put
argument_list|(
name|WSS4JInInterceptor
operator|.
name|VALIDATOR_MAP
argument_list|,
name|customMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|xpaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security"
argument_list|)
expr_stmt|;
name|xpaths
operator|.
name|add
argument_list|(
literal|"//wsse:Security/saml1:Assertion"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inMessageProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|inMessageProperties
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|VALIDATE_SAML_SUBJECT_CONFIRMATION
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|makeInvocation
argument_list|(
name|outProperties
argument_list|,
name|xpaths
argument_list|,
name|inProperties
argument_list|,
name|inMessageProperties
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|handlerResults
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
name|SecurityContext
name|sc
init|=
name|message
operator|.
name|get
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sc
operator|.
name|isUserInRole
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sc
operator|.
name|isUserInRole
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
expr_stmt|;
name|WSSecurityEngineResult
name|actionResult
init|=
name|WSSecurityUtil
operator|.
name|fetchActionResult
argument_list|(
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|ST_UNSIGNED
argument_list|)
decl_stmt|;
name|SamlAssertionWrapper
name|receivedAssertion
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|actionResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|receivedAssertion
operator|!=
literal|null
operator|&&
name|receivedAssertion
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
assert|assert
operator|!
name|receivedAssertion
operator|.
name|isSigned
argument_list|()
assert|;
block|}
specifier|private
name|SoapMessage
name|makeInvocation
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outProperties
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|xpaths
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inProperties
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|makeInvocation
argument_list|(
name|outProperties
argument_list|,
name|xpaths
argument_list|,
name|inProperties
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|SoapMessage
name|makeInvocation
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outProperties
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|xpaths
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inProperties
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inMessageProperties
parameter_list|)
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|readDocument
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|)
decl_stmt|;
name|WSS4JOutInterceptor
name|ohandler
init|=
operator|new
name|WSS4JOutInterceptor
argument_list|()
decl_stmt|;
name|PhaseInterceptor
argument_list|<
name|SoapMessage
argument_list|>
name|handler
init|=
name|ohandler
operator|.
name|createEndingInterceptor
argument_list|()
decl_stmt|;
name|SoapMessage
name|msg
init|=
operator|new
name|SoapMessage
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|Exchange
name|ex
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setInMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|SOAPMessage
name|saajMsg
init|=
name|MessageFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|SOAPPart
name|part
init|=
name|saajMsg
operator|.
name|getSOAPPart
argument_list|()
decl_stmt|;
name|part
operator|.
name|setContent
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|saajMsg
operator|.
name|saveChanges
argument_list|()
expr_stmt|;
name|msg
operator|.
name|setContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|,
name|saajMsg
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|outProperties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|msg
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|outProperties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|handleMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|doc
operator|=
name|part
expr_stmt|;
for|for
control|(
name|String
name|xpath
range|:
name|xpaths
control|)
block|{
name|assertValid
argument_list|(
name|xpath
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|docbytes
init|=
name|getMessageBytes
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|XMLStreamReader
name|reader
init|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|docbytes
argument_list|)
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dbf
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setIgnoringComments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setIgnoringElementContentWhitespace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|db
operator|.
name|setEntityResolver
argument_list|(
operator|new
name|NullResolver
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|db
argument_list|,
name|reader
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|WSS4JInInterceptor
name|inHandler
init|=
operator|new
name|WSS4JInInterceptor
argument_list|(
name|inProperties
argument_list|)
decl_stmt|;
name|SoapMessage
name|inmsg
init|=
operator|new
name|SoapMessage
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|inmsg
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SAML_ROLE_ATTRIBUTENAME
argument_list|,
literal|"role"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|inMessageProperty
range|:
name|inMessageProperties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|inmsg
operator|.
name|put
argument_list|(
name|inMessageProperty
argument_list|,
name|inMessageProperties
operator|.
name|get
argument_list|(
name|inMessageProperty
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ex
operator|.
name|setInMessage
argument_list|(
name|inmsg
argument_list|)
expr_stmt|;
name|inmsg
operator|.
name|setContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|,
name|saajMsg
argument_list|)
expr_stmt|;
name|inHandler
operator|.
name|handleMessage
argument_list|(
name|inmsg
argument_list|)
expr_stmt|;
return|return
name|inmsg
return|;
block|}
specifier|private
name|byte
index|[]
name|getMessageBytes
parameter_list|(
name|Document
name|doc
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|outputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|XMLStreamWriter
name|byteArrayWriter
init|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|outputStream
argument_list|)
decl_stmt|;
name|StaxUtils
operator|.
name|writeDocument
argument_list|(
name|doc
argument_list|,
name|byteArrayWriter
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|byteArrayWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|outputStream
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|// FOR DEBUGGING ONLY
comment|/*private*/
specifier|static
name|String
name|serialize
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
return|return
name|XMLUtils
operator|.
name|toString
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
end_class

end_unit

