begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|saml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|AbstractPolicySecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|CryptoCoverageUtil
operator|.
name|CoverageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|PolicyBasedWSS4JInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|validate
operator|.
name|SamlAssertionValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * A test for using SAML Assertions via WS-SecurityPolicy expressions.  */
end_comment

begin_class
specifier|public
class|class
name|PolicyBasedSamlTest
extends|extends
name|AbstractPolicySecurityTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSaml1Assertion
parameter_list|()
throws|throws
name|Exception
block|{
comment|//
comment|// This should fail as the policy wants a SAML1 assertion and none is in the request
comment|//
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"saml_assertion_policy.xml"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|SAML_TOKEN
argument_list|,
name|SP12Constants
operator|.
name|SUPPORTING_TOKENS
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|CoverageType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|// This should pass as the policy wants a SAML1 assertion and it is in the request
comment|//
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"saml_request.xml"
argument_list|,
literal|"saml_assertion_policy.xml"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|SAML_TOKEN
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|CoverageType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|// This should fail as the policy wants a SAML1 assertion and a SAML2 Assertion
comment|// is in the request
comment|//
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"saml2_request.xml"
argument_list|,
literal|"saml_assertion_policy.xml"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|SAML_TOKEN
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|CoverageType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSaml2Assertion
parameter_list|()
throws|throws
name|Exception
block|{
comment|//
comment|// This should fail as the policy wants a SAML2 assertion and none is in the request
comment|//
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"saml2_assertion_policy.xml"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|SAML_TOKEN
argument_list|,
name|SP12Constants
operator|.
name|SUPPORTING_TOKENS
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|CoverageType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|// This should pass as the policy wants a SAML2 assertion and it is in the request
comment|//
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"saml2_request.xml"
argument_list|,
literal|"saml2_assertion_policy.xml"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|SAML_TOKEN
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|CoverageType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|// This should fail as the policy wants a SAML2 assertion and a SAML1 Assertion
comment|// is in the request
comment|//
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"saml_request.xml"
argument_list|,
literal|"saml2_assertion_policy.xml"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|SAML_TOKEN
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|CoverageType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|runInInterceptorAndValidateWss
parameter_list|(
name|Document
name|document
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|,
name|List
argument_list|<
name|CoverageType
argument_list|>
name|types
parameter_list|)
throws|throws
name|Exception
block|{
name|PolicyBasedWSS4JInInterceptor
name|inHandler
init|=
name|this
operator|.
name|getInInterceptor
argument_list|(
name|types
argument_list|)
decl_stmt|;
name|SoapMessage
name|inmsg
init|=
name|this
operator|.
name|getSoapMessageForDom
argument_list|(
name|document
argument_list|,
name|aim
argument_list|)
decl_stmt|;
comment|// Necessary because the Bearer Assertion does not have an internal signature
name|SamlAssertionValidator
name|assertionValidator
init|=
operator|new
name|SamlAssertionValidator
argument_list|()
decl_stmt|;
name|assertionValidator
operator|.
name|setRequireBearerSignature
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|inmsg
operator|.
name|setContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SAML2_TOKEN_VALIDATOR
argument_list|,
name|assertionValidator
argument_list|)
expr_stmt|;
name|inmsg
operator|.
name|setContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SAML1_TOKEN_VALIDATOR
argument_list|,
name|assertionValidator
argument_list|)
expr_stmt|;
name|inHandler
operator|.
name|handleMessage
argument_list|(
name|inmsg
argument_list|)
expr_stmt|;
for|for
control|(
name|CoverageType
name|type
range|:
name|types
control|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SIGNED
case|:
name|this
operator|.
name|verifyWss4jSigResults
argument_list|(
name|inmsg
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENCRYPTED
case|:
name|this
operator|.
name|verifyWss4jEncResults
argument_list|(
name|inmsg
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"Unsupported coverage type."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

