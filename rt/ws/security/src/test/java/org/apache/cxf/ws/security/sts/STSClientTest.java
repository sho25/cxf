begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|sts
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBContextCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|source
operator|.
name|SourceDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|STSClientTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testConfigureViaEPR
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|addressingClasses
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|addressingClasses
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|wsdl
operator|.
name|ObjectFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|addressingClasses
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|ObjectFactory
operator|.
name|class
argument_list|)
expr_stmt|;
name|JAXBContext
name|ctx
init|=
name|JAXBContextCache
operator|.
name|getCachedContextAndSchemas
argument_list|(
name|addressingClasses
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Unmarshaller
name|um
init|=
name|ctx
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|InputStream
name|inStream
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"epr.xml"
argument_list|)
decl_stmt|;
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|el
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|um
operator|.
name|unmarshal
argument_list|(
name|inStream
argument_list|)
decl_stmt|;
name|EndpointReferenceType
name|ref
init|=
operator|(
name|EndpointReferenceType
operator|)
name|el
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Bus
name|bus
init|=
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
decl_stmt|;
name|STSClient
name|client
init|=
operator|new
name|STSClient
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|client
operator|.
name|configureViaEPR
argument_list|(
name|ref
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://localhost:8080/jaxws-samples-wsse-policy-trust-sts/SecurityTokenService?wsdl"
argument_list|,
name|client
operator|.
name|getWsdlLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512/"
argument_list|,
literal|"SecurityTokenService"
argument_list|)
argument_list|,
name|client
operator|.
name|getServiceQName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512/"
argument_list|,
literal|"UT_Port"
argument_list|)
argument_list|,
name|client
operator|.
name|getEndpointQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// A unit test to make sure that we can parse a WCF wsdl properly. See CXF-5817.
annotation|@
name|Test
specifier|public
name|void
name|testWCFWsdl
parameter_list|()
throws|throws
name|Exception
block|{
name|Bus
name|bus
init|=
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
decl_stmt|;
comment|// Load WSDL
name|InputStream
name|inStream
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"wcf.wsdl"
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|inStream
argument_list|)
decl_stmt|;
name|NodeList
name|metadataSections
init|=
name|doc
operator|.
name|getElementsByTagNameNS
argument_list|(
literal|"http://schemas.xmlsoap.org/ws/2004/09/mex"
argument_list|,
literal|"MetadataSection"
argument_list|)
decl_stmt|;
name|Element
name|wsdlDefinition
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|schemas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metadataSections
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|metadataSections
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
name|String
name|dialect
init|=
name|element
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"Dialect"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"http://schemas.xmlsoap.org/wsdl/"
operator|.
name|equals
argument_list|(
name|dialect
argument_list|)
condition|)
block|{
name|wsdlDefinition
operator|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"http://www.w3.org/2001/XMLSchema"
operator|.
name|equals
argument_list|(
name|dialect
argument_list|)
condition|)
block|{
name|schemas
operator|.
name|add
argument_list|(
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertNotNull
argument_list|(
name|wsdlDefinition
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|schemas
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|WSDLManager
name|wsdlManager
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Definition
name|definition
init|=
name|wsdlManager
operator|.
name|getDefinition
argument_list|(
name|wsdlDefinition
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|schemaElement
range|:
name|schemas
control|)
block|{
name|QName
name|schemaName
init|=
operator|new
name|QName
argument_list|(
name|schemaElement
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|schemaElement
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
name|ExtensibilityElement
name|exElement
init|=
name|wsdlManager
operator|.
name|getExtensionRegistry
argument_list|()
operator|.
name|createExtension
argument_list|(
name|Types
operator|.
name|class
argument_list|,
name|schemaName
argument_list|)
decl_stmt|;
operator|(
operator|(
name|Schema
operator|)
name|exElement
operator|)
operator|.
name|setElement
argument_list|(
name|schemaElement
argument_list|)
expr_stmt|;
name|definition
operator|.
name|getTypes
argument_list|()
operator|.
name|addExtensibilityElement
argument_list|(
name|exElement
argument_list|)
expr_stmt|;
block|}
name|WSDLServiceFactory
name|factory
init|=
operator|new
name|WSDLServiceFactory
argument_list|(
name|bus
argument_list|,
name|definition
argument_list|)
decl_stmt|;
name|SourceDataBinding
name|dataBinding
init|=
operator|new
name|SourceDataBinding
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setDataBinding
argument_list|(
name|dataBinding
argument_list|)
expr_stmt|;
name|Service
name|service
init|=
name|factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|service
operator|.
name|setDataBinding
argument_list|(
name|dataBinding
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

