begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|AbstractFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractAttributedInterceptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|CryptoCoverageUtil
operator|.
name|CoverageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|PolicyBasedWSS4JOutInterceptor
operator|.
name|PolicyBasedWSS4JOutInterceptorInternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSDataRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|PolicyBasedWss4JInOutTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|PolicyBuilder
name|policyBuilder
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|checkUnrestrictedPoliciesInstalled
parameter_list|()
block|{
try|try
block|{
name|byte
index|[]
name|data
init|=
block|{
literal|0x00
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|}
decl_stmt|;
name|SecretKey
name|key192
init|=
operator|new
name|SecretKeySpec
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x01
block|,
literal|0x02
block|,
literal|0x03
block|,
literal|0x04
block|,
literal|0x05
block|,
literal|0x06
block|,
literal|0x07
block|,
literal|0x08
block|,
literal|0x09
block|,
literal|0x0a
block|,
literal|0x0b
block|,
literal|0x0c
block|,
literal|0x0d
block|,
literal|0x0e
block|,
literal|0x0f
block|,
literal|0x10
block|,
literal|0x11
block|,
literal|0x12
block|,
literal|0x13
block|,
literal|0x14
block|,
literal|0x15
block|,
literal|0x16
block|,
literal|0x17
block|}
argument_list|,
literal|"AES"
argument_list|)
decl_stmt|;
name|Cipher
name|c
init|=
name|Cipher
operator|.
name|getInstance
argument_list|(
literal|"AES"
argument_list|)
decl_stmt|;
name|c
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|ENCRYPT_MODE
argument_list|,
name|key192
argument_list|)
expr_stmt|;
name|c
operator|.
name|doFinal
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
annotation|@
name|org
operator|.
name|junit
operator|.
name|Ignore
argument_list|(
literal|"missing file"
argument_list|)
specifier|public
name|void
name|testSignedElementsPolicyWithIncompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"signed_x509_issuer_serial_missing_signed_header.xml"
argument_list|,
literal|"signed_elements_policy.xml"
argument_list|,
literal|null
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_ELEMENTS
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSignedElementsPolicyWithCompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"signed_x509_issuer_serial.xml"
argument_list|,
literal|"signed_elements_policy.xml"
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_ELEMENTS
argument_list|,
literal|null
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"signed_elements_policy.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_ELEMENTS
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|SIGNED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|org
operator|.
name|junit
operator|.
name|Ignore
argument_list|(
literal|"missing file"
argument_list|)
specifier|public
name|void
name|testSignedPartsPolicyWithIncompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"signed_x509_issuer_serial_missing_signed_body.xml"
argument_list|,
literal|"signed_parts_policy_body.xml"
argument_list|,
literal|null
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"signed_x509_issuer_serial_missing_signed_header.xml"
argument_list|,
literal|"signed_parts_policy_header_namespace_only.xml"
argument_list|,
literal|null
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"signed_x509_issuer_serial_missing_signed_header.xml"
argument_list|,
literal|"signed_parts_policy_header.xml"
argument_list|,
literal|null
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSignedPartsPolicyWithCompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"signed_x509_issuer_serial.xml"
argument_list|,
literal|"signed_parts_policy_body.xml"
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
literal|null
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"signed_parts_policy_body.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|SIGNED
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"signed_x509_issuer_serial.xml"
argument_list|,
literal|"signed_parts_policy_header_namespace_only.xml"
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
literal|null
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"signed_parts_policy_header_namespace_only.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|SIGNED
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"signed_x509_issuer_serial.xml"
argument_list|,
literal|"signed_parts_policy_header.xml"
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
literal|null
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"signed_parts_policy_header.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|SIGNED
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"signed_x509_issuer_serial.xml"
argument_list|,
literal|"signed_parts_policy_header_and_body.xml"
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
literal|null
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"signed_parts_policy_header_and_body.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|SIGNED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptedElementsPolicyWithIncompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_missing_enc_header.xml"
argument_list|,
literal|"encrypted_elements_policy.xml"
argument_list|,
literal|null
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_body_content.xml"
argument_list|,
literal|"encrypted_elements_policy2.xml"
argument_list|,
literal|null
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptedElementsPolicyWithCompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_body_content.xml"
argument_list|,
literal|"encrypted_elements_policy.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|,
literal|null
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"encrypted_elements_policy.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|QName
index|[]
block|{
name|SP12Constants
operator|.
name|ENCRYPTED_ELEMENTS
block|}
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_body_element.xml"
argument_list|,
literal|"encrypted_elements_policy2.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|,
literal|null
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"encrypted_elements_policy2.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContentEncryptedElementsPolicyWithIncompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_body_element.xml"
argument_list|,
literal|"content_encrypted_elements_policy.xml"
argument_list|,
literal|null
argument_list|,
name|SP12Constants
operator|.
name|CONTENT_ENCRYPTED_ELEMENTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContentEncryptedElementsPolicyWithCompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_body_content.xml"
argument_list|,
literal|"content_encrypted_elements_policy.xml"
argument_list|,
name|SP12Constants
operator|.
name|CONTENT_ENCRYPTED_ELEMENTS
argument_list|,
literal|null
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"content_encrypted_elements_policy.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|CONTENT_ENCRYPTED_ELEMENTS
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptedPartsPolicyWithIncompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_missing_enc_body.xml"
argument_list|,
literal|"encrypted_parts_policy_body.xml"
argument_list|,
literal|null
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_body_element.xml"
argument_list|,
literal|"encrypted_parts_policy_body.xml"
argument_list|,
literal|null
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_missing_enc_header.xml"
argument_list|,
literal|"encrypted_parts_policy_header_namespace_only.xml"
argument_list|,
literal|null
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_missing_enc_header.xml"
argument_list|,
literal|"encrypted_parts_policy_header.xml"
argument_list|,
literal|null
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptedPartsPolicyWithCompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_body_content.xml"
argument_list|,
literal|"encrypted_parts_policy_body.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
literal|null
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"encrypted_parts_policy_body.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_body_content.xml"
argument_list|,
literal|"encrypted_parts_policy_header_namespace_only.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
literal|null
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"encrypted_parts_policy_header_namespace_only.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_body_content.xml"
argument_list|,
literal|"encrypted_parts_policy_header.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
literal|null
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"encrypted_parts_policy_header.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_body_content.xml"
argument_list|,
literal|"encrypted_parts_policy_header_and_body.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
literal|null
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"encrypted_parts_policy_header_and_body.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSignedEncryptedPartsWithIncompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"signed_x509_issuer_serial_encrypted_missing_enc_header.xml"
argument_list|,
literal|"signed_parts_policy_header_and_body_encrypted.xml"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSignedEncryptedPartsWithCompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|checkUnrestrictedPoliciesInstalled
argument_list|()
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"signed_x509_issuer_serial_encrypted.xml"
argument_list|,
literal|"signed_parts_policy_header_and_body_encrypted.xml"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"signed_parts_policy_header_and_body_encrypted.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptedSignedPartsWithIncompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_body_content_signed_missing_signed_header.xml"
argument_list|,
literal|"encrypted_parts_policy_header_and_body_signed.xml"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptedSignedPartsWithCompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
literal|"encrypted_body_content_signed.xml"
argument_list|,
literal|"encrypted_parts_policy_header_and_body_signed.xml"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidate
argument_list|(
literal|"wsse-request-clean.xml"
argument_list|,
literal|"encrypted_parts_policy_header_and_body_signed.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Bus
name|createBus
parameter_list|()
throws|throws
name|BusException
block|{
name|Bus
name|b
init|=
name|super
operator|.
name|createBus
argument_list|()
decl_stmt|;
name|this
operator|.
name|policyBuilder
operator|=
name|b
operator|.
name|getExtension
argument_list|(
name|PolicyBuilder
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
specifier|private
name|void
name|runAndValidate
parameter_list|(
name|String
name|document
parameter_list|,
name|String
name|policyDocument
parameter_list|,
name|List
argument_list|<
name|QName
argument_list|>
name|assertedOutAssertions
parameter_list|,
name|List
argument_list|<
name|QName
argument_list|>
name|notAssertedOutAssertions
parameter_list|,
name|List
argument_list|<
name|QName
argument_list|>
name|assertedInAssertions
parameter_list|,
name|List
argument_list|<
name|QName
argument_list|>
name|notAssertedInAssertions
parameter_list|,
name|List
argument_list|<
name|CoverageType
argument_list|>
name|types
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Element
name|policyElement
init|=
name|this
operator|.
name|readDocument
argument_list|(
name|policyDocument
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
specifier|final
name|Policy
name|outPolicy
init|=
name|this
operator|.
name|policyBuilder
operator|.
name|getPolicy
argument_list|(
name|policyElement
argument_list|)
decl_stmt|;
specifier|final
name|Policy
name|inPolicy
init|=
name|this
operator|.
name|policyBuilder
operator|.
name|getPolicy
argument_list|(
name|policyElement
argument_list|)
decl_stmt|;
specifier|final
name|Document
name|originalDoc
init|=
name|this
operator|.
name|readDocument
argument_list|(
name|document
argument_list|)
decl_stmt|;
specifier|final
name|Document
name|inDoc
init|=
name|this
operator|.
name|runOutInterceptorAndValidate
argument_list|(
name|originalDoc
argument_list|,
name|outPolicy
argument_list|,
name|assertedOutAssertions
argument_list|,
name|notAssertedOutAssertions
argument_list|)
decl_stmt|;
comment|// Can't use this method if you want output that is not mangled.
comment|// Such is the case when you want to capture output to use
comment|// as input to another test case.
comment|//DOMUtils.writeXml(inDoc, System.out);
comment|// Use this snippet if you need intermediate output for debugging.
comment|/*         TransformerFactory tf = TransformerFactory.newInstance();         Transformer t = tf.newTransformer();         t.setOutputProperty(OutputKeys.INDENT, "no");         t.transform(new DOMSource(inDoc), new StreamResult(System.out));         */
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
name|inDoc
argument_list|,
name|inPolicy
argument_list|,
name|assertedInAssertions
argument_list|,
name|assertedOutAssertions
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runInInterceptorAndValidate
parameter_list|(
name|String
name|document
parameter_list|,
name|String
name|policyDocument
parameter_list|,
name|QName
name|assertedInAssertion
parameter_list|,
name|QName
name|notAssertedInAssertion
parameter_list|,
name|CoverageType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
name|document
argument_list|,
name|policyDocument
argument_list|,
name|assertedInAssertion
operator|==
literal|null
condition|?
literal|null
else|:
name|Arrays
operator|.
name|asList
argument_list|(
name|assertedInAssertion
argument_list|)
argument_list|,
name|notAssertedInAssertion
operator|==
literal|null
condition|?
literal|null
else|:
name|Arrays
operator|.
name|asList
argument_list|(
name|notAssertedInAssertion
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runInInterceptorAndValidate
parameter_list|(
name|String
name|document
parameter_list|,
name|String
name|policyDocument
parameter_list|,
name|List
argument_list|<
name|QName
argument_list|>
name|assertedInAssertions
parameter_list|,
name|List
argument_list|<
name|QName
argument_list|>
name|notAssertedInAssertions
parameter_list|,
name|List
argument_list|<
name|CoverageType
argument_list|>
name|types
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Policy
name|policy
init|=
name|this
operator|.
name|policyBuilder
operator|.
name|getPolicy
argument_list|(
name|this
operator|.
name|readDocument
argument_list|(
name|policyDocument
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Document
name|doc
init|=
name|this
operator|.
name|readDocument
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|this
operator|.
name|runInInterceptorAndValidate
argument_list|(
name|doc
argument_list|,
name|policy
argument_list|,
name|assertedInAssertions
argument_list|,
name|notAssertedInAssertions
argument_list|,
name|types
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runInInterceptorAndValidate
parameter_list|(
name|Document
name|document
parameter_list|,
name|Policy
name|policy
parameter_list|,
name|List
argument_list|<
name|QName
argument_list|>
name|assertedInAssertions
parameter_list|,
name|List
argument_list|<
name|QName
argument_list|>
name|notAssertedInAssertions
parameter_list|,
name|List
argument_list|<
name|CoverageType
argument_list|>
name|types
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|AssertionInfoMap
name|aim
init|=
operator|new
name|AssertionInfoMap
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|this
operator|.
name|runInInterceptorAndValidateWss
argument_list|(
name|document
argument_list|,
name|aim
argument_list|,
name|types
argument_list|)
expr_stmt|;
try|try
block|{
name|aim
operator|.
name|checkEffectivePolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PolicyException
name|e
parameter_list|)
block|{
comment|// Expected but not relevant
block|}
finally|finally
block|{
if|if
condition|(
name|assertedInAssertions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|QName
name|assertionType
range|:
name|assertedInAssertions
control|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|assertionType
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ais
argument_list|)
expr_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|assertTrue
argument_list|(
name|assertionType
operator|+
literal|" policy erroneously failed."
argument_list|,
name|ai
operator|.
name|getAssertion
argument_list|()
operator|.
name|isAsserted
argument_list|(
name|aim
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|notAssertedInAssertions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|QName
name|assertionType
range|:
name|notAssertedInAssertions
control|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|assertionType
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ais
argument_list|)
expr_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|assertFalse
argument_list|(
name|assertionType
operator|+
literal|" policy erroneously asserted."
argument_list|,
name|ai
operator|.
name|getAssertion
argument_list|()
operator|.
name|isAsserted
argument_list|(
name|aim
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|runInInterceptorAndValidateWss
parameter_list|(
name|Document
name|document
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|,
name|List
argument_list|<
name|CoverageType
argument_list|>
name|types
parameter_list|)
throws|throws
name|Exception
block|{
name|PolicyBasedWSS4JInInterceptor
name|inHandler
init|=
name|this
operator|.
name|getInInterceptor
argument_list|(
name|types
argument_list|)
decl_stmt|;
name|SoapMessage
name|inmsg
init|=
name|this
operator|.
name|getSoapMessageForDom
argument_list|(
name|document
argument_list|,
name|aim
argument_list|)
decl_stmt|;
name|inHandler
operator|.
name|handleMessage
argument_list|(
name|inmsg
argument_list|)
expr_stmt|;
for|for
control|(
name|CoverageType
name|type
range|:
name|types
control|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SIGNED
case|:
name|this
operator|.
name|verifyWss4jSigResults
argument_list|(
name|inmsg
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENCRYPTED
case|:
name|this
operator|.
name|verifyWss4jEncResults
argument_list|(
name|inmsg
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"Unsupported coverage type."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Document
name|runOutInterceptorAndValidate
parameter_list|(
name|Document
name|document
parameter_list|,
name|Policy
name|policy
parameter_list|,
name|List
argument_list|<
name|QName
argument_list|>
name|assertedOutAssertions
parameter_list|,
name|List
argument_list|<
name|QName
argument_list|>
name|notAssertedOutAssertions
parameter_list|)
throws|throws
name|Exception
block|{
name|AssertionInfoMap
name|aim
init|=
operator|new
name|AssertionInfoMap
argument_list|(
name|policy
argument_list|)
decl_stmt|;
specifier|final
name|SoapMessage
name|msg
init|=
name|this
operator|.
name|getOutSoapMessageForDom
argument_list|(
name|document
argument_list|,
name|aim
argument_list|)
decl_stmt|;
name|this
operator|.
name|getOutInterceptor
argument_list|()
operator|.
name|handleMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
try|try
block|{
name|aim
operator|.
name|checkEffectivePolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PolicyException
name|e
parameter_list|)
block|{
comment|// Expected but not relevant
block|}
finally|finally
block|{
if|if
condition|(
name|assertedOutAssertions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|QName
name|assertionType
range|:
name|assertedOutAssertions
control|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|assertionType
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ais
argument_list|)
expr_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|assertTrue
argument_list|(
name|assertionType
operator|+
literal|" policy erroneously failed."
argument_list|,
name|ai
operator|.
name|getAssertion
argument_list|()
operator|.
name|isAsserted
argument_list|(
name|aim
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|notAssertedOutAssertions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|QName
name|assertionType
range|:
name|notAssertedOutAssertions
control|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|assertionType
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ais
argument_list|)
expr_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|assertFalse
argument_list|(
name|assertionType
operator|+
literal|" policy erroneously asserted."
argument_list|,
name|ai
operator|.
name|getAssertion
argument_list|()
operator|.
name|isAsserted
argument_list|(
name|aim
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|msg
operator|.
name|getContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|)
operator|.
name|getSOAPPart
argument_list|()
return|;
block|}
specifier|private
name|PolicyBasedWSS4JOutInterceptorInternal
name|getOutInterceptor
parameter_list|()
block|{
return|return
operator|(
operator|new
name|PolicyBasedWSS4JOutInterceptor
argument_list|()
operator|)
operator|.
name|createEndingInterceptor
argument_list|()
return|;
block|}
specifier|private
name|PolicyBasedWSS4JInInterceptor
name|getInInterceptor
parameter_list|(
name|List
argument_list|<
name|CoverageType
argument_list|>
name|types
parameter_list|)
block|{
name|PolicyBasedWSS4JInInterceptor
name|inHandler
init|=
operator|new
name|PolicyBasedWSS4JInInterceptor
argument_list|()
decl_stmt|;
name|String
name|action
init|=
literal|""
decl_stmt|;
for|for
control|(
name|CoverageType
name|type
range|:
name|types
control|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SIGNED
case|:
name|action
operator|+=
literal|" "
operator|+
name|WSHandlerConstants
operator|.
name|SIGNATURE
expr_stmt|;
break|break;
case|case
name|ENCRYPTED
case|:
name|action
operator|+=
literal|" "
operator|+
name|WSHandlerConstants
operator|.
name|ENCRYPT
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"Unsupported coverage type."
argument_list|)
expr_stmt|;
block|}
block|}
name|inHandler
operator|.
name|setProperty
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|inHandler
operator|.
name|setProperty
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_PROP_FILE
argument_list|,
literal|"META-INF/cxf/insecurity.properties"
argument_list|)
expr_stmt|;
name|inHandler
operator|.
name|setProperty
argument_list|(
name|WSHandlerConstants
operator|.
name|DEC_PROP_FILE
argument_list|,
literal|"META-INF/cxf/insecurity.properties"
argument_list|)
expr_stmt|;
name|inHandler
operator|.
name|setProperty
argument_list|(
name|WSHandlerConstants
operator|.
name|PW_CALLBACK_CLASS
argument_list|,
name|TestPwdCallback
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|inHandler
return|;
block|}
comment|/**      * Gets a SoapMessage, but with the needed SecurityConstants in the context propreties      * so that it can be passed to PolicyBasedWSS4JOutInterceptor.      *      * @see #getSoapMessageForDom(Document, AssertionInfoMap)      */
specifier|private
name|SoapMessage
name|getOutSoapMessageForDom
parameter_list|(
name|Document
name|doc
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|)
throws|throws
name|SOAPException
block|{
name|SoapMessage
name|msg
init|=
name|this
operator|.
name|getSoapMessageForDom
argument_list|(
name|doc
argument_list|,
name|aim
argument_list|)
decl_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
literal|"META-INF/cxf/outsecurity.properties"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
literal|"META-INF/cxf/outsecurity.properties"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
name|TestPwdCallback
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_USERNAME
argument_list|,
literal|"myalias"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_USERNAME
argument_list|,
literal|"myalias"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
operator|new
name|MockEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Bus
operator|.
name|class
argument_list|,
name|this
operator|.
name|bus
argument_list|)
expr_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|msg
return|;
block|}
specifier|private
name|SoapMessage
name|getSoapMessageForDom
parameter_list|(
name|Document
name|doc
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|)
throws|throws
name|SOAPException
block|{
name|SOAPMessage
name|saajMsg
init|=
name|MessageFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|SOAPPart
name|part
init|=
name|saajMsg
operator|.
name|getSOAPPart
argument_list|()
decl_stmt|;
name|part
operator|.
name|setContent
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|saajMsg
operator|.
name|saveChanges
argument_list|()
expr_stmt|;
name|SoapMessage
name|msg
init|=
operator|new
name|SoapMessage
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|Exchange
name|ex
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setInMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|,
name|saajMsg
argument_list|)
expr_stmt|;
if|if
condition|(
name|aim
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|put
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|,
name|aim
argument_list|)
expr_stmt|;
block|}
return|return
name|msg
return|;
block|}
specifier|private
name|void
name|verifyWss4jSigResults
parameter_list|(
name|SoapMessage
name|inmsg
parameter_list|)
block|{
name|WSSecurityEngineResult
name|result
init|=
operator|(
name|WSSecurityEngineResult
operator|)
name|inmsg
operator|.
name|get
argument_list|(
name|WSS4JInInterceptor
operator|.
name|SIGNATURE_RESULT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|verifyWss4jEncResults
parameter_list|(
name|SoapMessage
name|inmsg
parameter_list|)
block|{
comment|//
comment|// There should be exactly 1 (WSS4J) HandlerResult
comment|//
specifier|final
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|handlerResults
init|=
operator|(
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
operator|)
name|inmsg
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|handlerResults
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|handlerResults
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|Object
argument_list|>
name|protectionResults
init|=
operator|new
name|Vector
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|ENCR
argument_list|,
name|protectionResults
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|protectionResults
argument_list|)
expr_stmt|;
comment|//
comment|// This result should contain a reference to the decrypted element
comment|//
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|protectionResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|protectedElements
init|=
operator|(
name|List
argument_list|<
name|WSDataRef
argument_list|>
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|protectedElements
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|MockEndpoint
extends|extends
name|AbstractAttributedInterceptorProvider
implements|implements
name|Endpoint
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|EndpointInfo
name|epi
init|=
operator|new
name|EndpointInfo
argument_list|()
decl_stmt|;
specifier|public
name|MockEndpoint
parameter_list|()
block|{
name|epi
operator|.
name|setBinding
argument_list|(
operator|new
name|BindingInfo
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|AbstractFeature
argument_list|>
name|getActiveFeatures
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Binding
name|getBinding
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|EndpointInfo
name|getEndpointInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|epi
return|;
block|}
specifier|public
name|Executor
name|getExecutor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MessageObserver
name|getInFaultObserver
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|MessageObserver
name|getOutFaultObserver
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setExecutor
parameter_list|(
name|Executor
name|executor
parameter_list|)
block|{            }
specifier|public
name|void
name|setInFaultObserver
parameter_list|(
name|MessageObserver
name|observer
parameter_list|)
block|{         }
specifier|public
name|void
name|setOutFaultObserver
parameter_list|(
name|MessageObserver
name|observer
parameter_list|)
block|{                     }
block|}
block|}
end_class

end_unit

