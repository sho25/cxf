begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|CryptoCoverageUtil
operator|.
name|CoverageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSDataRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|PolicyBasedWss4JInOutTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|PolicyBuilder
name|policyBuilder
decl_stmt|;
specifier|protected
name|Bus
name|createBus
parameter_list|()
throws|throws
name|BusException
block|{
name|Bus
name|b
init|=
name|super
operator|.
name|createBus
argument_list|()
decl_stmt|;
name|this
operator|.
name|policyBuilder
operator|=
name|b
operator|.
name|getExtension
argument_list|(
name|PolicyBuilder
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSignedElementsPolicyWithIncompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runAndValidatePolicyNotAsserted
argument_list|(
literal|"signed_missing_signed_header.xml"
argument_list|,
literal|"signed_elements_policy.xml"
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_ELEMENTS
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSignedElementsPolicyWithCompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runAndValidatePolicyAsserted
argument_list|(
literal|"signed.xml"
argument_list|,
literal|"signed_elements_policy.xml"
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_ELEMENTS
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSignedPartsPolicyWithIncompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runAndValidatePolicyNotAsserted
argument_list|(
literal|"signed_missing_signed_body.xml"
argument_list|,
literal|"signed_parts_policy_body.xml"
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidatePolicyNotAsserted
argument_list|(
literal|"signed_missing_signed_header.xml"
argument_list|,
literal|"signed_parts_policy_header_namespace_only.xml"
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidatePolicyNotAsserted
argument_list|(
literal|"signed_missing_signed_header.xml"
argument_list|,
literal|"signed_parts_policy_header.xml"
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSignedPartsPolicyWithCompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runAndValidatePolicyAsserted
argument_list|(
literal|"signed.xml"
argument_list|,
literal|"signed_parts_policy_body.xml"
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidatePolicyAsserted
argument_list|(
literal|"signed.xml"
argument_list|,
literal|"signed_parts_policy_header_namespace_only.xml"
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidatePolicyAsserted
argument_list|(
literal|"signed.xml"
argument_list|,
literal|"signed_parts_policy_header.xml"
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidatePolicyAsserted
argument_list|(
literal|"signed.xml"
argument_list|,
literal|"signed_parts_policy_header_and_body.xml"
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptedElementsPolicyWithIncompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runAndValidatePolicyNotAsserted
argument_list|(
literal|"encrypted_missing_enc_header.xml"
argument_list|,
literal|"encrypted_elements_policy.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidatePolicyNotAsserted
argument_list|(
literal|"encrypted_body_content.xml"
argument_list|,
literal|"encrypted_elements_policy2.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptedElementsPolicyWithCompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runAndValidatePolicyAsserted
argument_list|(
literal|"encrypted_body_content.xml"
argument_list|,
literal|"encrypted_elements_policy.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidatePolicyAsserted
argument_list|(
literal|"encrypted_body_element.xml"
argument_list|,
literal|"encrypted_elements_policy2.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContentEncryptedElementsPolicyWithIncompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runAndValidatePolicyNotAsserted
argument_list|(
literal|"encrypted_body_element.xml"
argument_list|,
literal|"content_encrypted_elements_policy.xml"
argument_list|,
name|SP12Constants
operator|.
name|CONTENT_ENCRYPTED_ELEMENTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContentEncryptedElementsPolicyWithCompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runAndValidatePolicyAsserted
argument_list|(
literal|"encrypted_body_content.xml"
argument_list|,
literal|"content_encrypted_elements_policy.xml"
argument_list|,
name|SP12Constants
operator|.
name|CONTENT_ENCRYPTED_ELEMENTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptedPartsPolicyWithIncompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runAndValidatePolicyNotAsserted
argument_list|(
literal|"encrypted_missing_enc_body.xml"
argument_list|,
literal|"encrypted_parts_policy_body.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidatePolicyNotAsserted
argument_list|(
literal|"encrypted_body_element.xml"
argument_list|,
literal|"encrypted_parts_policy_body.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidatePolicyNotAsserted
argument_list|(
literal|"encrypted_missing_enc_header.xml"
argument_list|,
literal|"encrypted_parts_policy_header_namespace_only.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidatePolicyNotAsserted
argument_list|(
literal|"encrypted_missing_enc_header.xml"
argument_list|,
literal|"encrypted_parts_policy_header.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptedPartsPolicyWithCompleteCoverage
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|runAndValidatePolicyAsserted
argument_list|(
literal|"encrypted_body_content.xml"
argument_list|,
literal|"encrypted_parts_policy_body.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidatePolicyAsserted
argument_list|(
literal|"encrypted_body_content.xml"
argument_list|,
literal|"encrypted_parts_policy_header_namespace_only.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidatePolicyAsserted
argument_list|(
literal|"encrypted_body_content.xml"
argument_list|,
literal|"encrypted_parts_policy_header.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
name|this
operator|.
name|runAndValidatePolicyAsserted
argument_list|(
literal|"encrypted_body_content.xml"
argument_list|,
literal|"encrypted_parts_policy_header_and_body.xml"
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runAndValidatePolicyAsserted
parameter_list|(
name|String
name|document
parameter_list|,
name|String
name|policyDocument
parameter_list|,
name|QName
name|assertionType
parameter_list|,
name|CoverageType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|Policy
name|policy
init|=
name|this
operator|.
name|policyBuilder
operator|.
name|getPolicy
argument_list|(
name|this
operator|.
name|readDocument
argument_list|(
name|policyDocument
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
name|AssertionInfoMap
name|aim
init|=
operator|new
name|AssertionInfoMap
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|this
operator|.
name|runAndValidateWss
argument_list|(
name|document
argument_list|,
name|aim
argument_list|,
name|type
argument_list|)
expr_stmt|;
try|try
block|{
name|aim
operator|.
name|checkEffectivePolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PolicyException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|assertionType
operator|+
literal|" policy erroneously failed."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|runAndValidatePolicyNotAsserted
parameter_list|(
name|String
name|document
parameter_list|,
name|String
name|policyDocument
parameter_list|,
name|QName
name|assertionType
parameter_list|,
name|CoverageType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|Policy
name|policy
init|=
name|this
operator|.
name|policyBuilder
operator|.
name|getPolicy
argument_list|(
name|this
operator|.
name|readDocument
argument_list|(
name|policyDocument
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
name|AssertionInfoMap
name|aim
init|=
operator|new
name|AssertionInfoMap
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|this
operator|.
name|runAndValidateWss
argument_list|(
name|document
argument_list|,
name|aim
argument_list|,
name|type
argument_list|)
expr_stmt|;
try|try
block|{
name|aim
operator|.
name|checkEffectivePolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|assertionType
operator|+
literal|" policy erroneously asserted."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PolicyException
name|e
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|assertionType
argument_list|)
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|assertFalse
argument_list|(
name|ai
operator|.
name|getAssertion
argument_list|()
operator|.
name|isAsserted
argument_list|(
name|aim
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|runAndValidateWss
parameter_list|(
name|String
name|document
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|,
name|CoverageType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|readDocument
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|PolicyBasedWSS4JInInterceptor
name|inHandler
init|=
name|CoverageType
operator|.
name|SIGNED
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|?
name|this
operator|.
name|getInInterceptorForSignature
argument_list|()
else|:
name|this
operator|.
name|getInInterceptorForEncryption
argument_list|()
decl_stmt|;
name|SoapMessage
name|inmsg
init|=
name|this
operator|.
name|getSoapMessageForDom
argument_list|(
name|doc
argument_list|,
name|aim
argument_list|)
decl_stmt|;
name|inHandler
operator|.
name|handleMessage
argument_list|(
name|inmsg
argument_list|)
expr_stmt|;
if|if
condition|(
name|CoverageType
operator|.
name|SIGNED
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|this
operator|.
name|verifyWss4jSigResults
argument_list|(
name|inmsg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|verifyWss4jEncResults
argument_list|(
name|inmsg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PolicyBasedWSS4JInInterceptor
name|getInInterceptorForSignature
parameter_list|()
block|{
name|PolicyBasedWSS4JInInterceptor
name|inHandler
init|=
operator|new
name|PolicyBasedWSS4JInInterceptor
argument_list|()
decl_stmt|;
name|inHandler
operator|.
name|setProperty
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|SIGNATURE
argument_list|)
expr_stmt|;
name|inHandler
operator|.
name|setProperty
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_PROP_FILE
argument_list|,
literal|"META-INF/cxf/insecurity.properties"
argument_list|)
expr_stmt|;
return|return
name|inHandler
return|;
block|}
specifier|private
name|PolicyBasedWSS4JInInterceptor
name|getInInterceptorForEncryption
parameter_list|()
block|{
name|PolicyBasedWSS4JInInterceptor
name|inHandler
init|=
operator|new
name|PolicyBasedWSS4JInInterceptor
argument_list|()
decl_stmt|;
name|inHandler
operator|.
name|setProperty
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|WSHandlerConstants
operator|.
name|ENCRYPT
argument_list|)
expr_stmt|;
name|inHandler
operator|.
name|setProperty
argument_list|(
name|WSHandlerConstants
operator|.
name|DEC_PROP_FILE
argument_list|,
literal|"META-INF/cxf/insecurity.properties"
argument_list|)
expr_stmt|;
name|inHandler
operator|.
name|setProperty
argument_list|(
name|WSHandlerConstants
operator|.
name|PW_CALLBACK_CLASS
argument_list|,
literal|"org.apache.cxf.ws.security.wss4j.TestPwdCallback"
argument_list|)
expr_stmt|;
return|return
name|inHandler
return|;
block|}
specifier|private
name|SoapMessage
name|getSoapMessageForDom
parameter_list|(
name|Document
name|doc
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|)
throws|throws
name|SOAPException
block|{
name|SOAPMessage
name|saajMsg
init|=
name|MessageFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|SOAPPart
name|part
init|=
name|saajMsg
operator|.
name|getSOAPPart
argument_list|()
decl_stmt|;
name|part
operator|.
name|setContent
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|saajMsg
operator|.
name|saveChanges
argument_list|()
expr_stmt|;
name|SoapMessage
name|inmsg
init|=
operator|new
name|SoapMessage
argument_list|(
operator|new
name|MessageImpl
argument_list|()
argument_list|)
decl_stmt|;
name|Exchange
name|ex
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|ex
operator|.
name|setInMessage
argument_list|(
name|inmsg
argument_list|)
expr_stmt|;
name|inmsg
operator|.
name|setContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|,
name|saajMsg
argument_list|)
expr_stmt|;
if|if
condition|(
name|aim
operator|!=
literal|null
condition|)
block|{
name|inmsg
operator|.
name|put
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|,
name|aim
argument_list|)
expr_stmt|;
block|}
return|return
name|inmsg
return|;
block|}
specifier|private
name|void
name|verifyWss4jSigResults
parameter_list|(
name|SoapMessage
name|inmsg
parameter_list|)
block|{
name|WSSecurityEngineResult
name|result
init|=
operator|(
name|WSSecurityEngineResult
operator|)
name|inmsg
operator|.
name|get
argument_list|(
name|WSS4JInInterceptor
operator|.
name|SIGNATURE_RESULT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|X509Certificate
name|certificate
init|=
operator|(
name|X509Certificate
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATE
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|certificate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|verifyWss4jEncResults
parameter_list|(
name|SoapMessage
name|inmsg
parameter_list|)
block|{
comment|//
comment|// There should be exactly 1 (WSS4J) HandlerResult
comment|//
specifier|final
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|handlerResults
init|=
operator|(
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
operator|)
name|inmsg
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|handlerResults
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|handlerResults
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//
comment|// This should contain exactly 1 protection result
comment|//
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|protectionResults
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|handlerResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|protectionResults
argument_list|)
expr_stmt|;
comment|//
comment|// This result should contain a reference to the decrypted element
comment|//
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|protectionResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|protectedElements
init|=
operator|(
name|List
argument_list|<
name|WSDataRef
argument_list|>
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|protectedElements
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

