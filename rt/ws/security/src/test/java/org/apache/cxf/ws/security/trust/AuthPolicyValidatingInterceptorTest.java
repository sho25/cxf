begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|validate
operator|.
name|Credential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AuthPolicyValidatingInterceptorTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testValidateAuthorizationPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthPolicyValidatingInterceptor
name|in
init|=
operator|new
name|AuthPolicyValidatingInterceptor
argument_list|()
decl_stmt|;
name|TestSTSTokenValidator
name|validator
init|=
operator|new
name|TestSTSTokenValidator
argument_list|()
decl_stmt|;
name|in
operator|.
name|setValidator
argument_list|(
name|validator
argument_list|)
expr_stmt|;
name|AuthorizationPolicy
name|policy
init|=
operator|new
name|AuthorizationPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setUserName
argument_list|(
literal|"bob"
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setPassword
argument_list|(
literal|"pswd"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|AuthorizationPolicy
operator|.
name|class
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|in
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|validator
operator|.
name|isValidated
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TestSTSTokenValidator
extends|extends
name|STSTokenValidator
block|{
specifier|private
name|boolean
name|validated
decl_stmt|;
specifier|public
name|TestSTSTokenValidator
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Credential
name|validateWithSTS
parameter_list|(
name|Credential
name|credential
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|UsernameToken
name|token
init|=
name|credential
operator|.
name|getUsernametoken
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"bob"
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
literal|"pswd"
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
comment|// TODO: mock STS
name|validated
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|credential
return|;
block|}
specifier|public
name|boolean
name|isValidated
parameter_list|()
block|{
return|return
name|validated
return|;
block|}
block|}
block|}
end_class

end_unit

