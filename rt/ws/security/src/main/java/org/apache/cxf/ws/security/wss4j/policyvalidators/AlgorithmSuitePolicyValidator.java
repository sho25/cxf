begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSDataRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_comment
comment|/**  * Validate a WSSecurityEngineResult corresponding to the processing of a Signature, EncryptedKey,  * EncryptedData or DerivedKey structure against an AlgorithmSuite policy.  */
end_comment

begin_class
specifier|public
class|class
name|AlgorithmSuitePolicyValidator
extends|extends
name|AbstractTokenPolicyValidator
block|{
specifier|private
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|algorithmResults
decl_stmt|;
specifier|public
name|AlgorithmSuitePolicyValidator
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
parameter_list|)
block|{
name|algorithmResults
operator|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
expr_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|results
argument_list|,
name|WSConstants
operator|.
name|SIGN
argument_list|,
name|algorithmResults
argument_list|)
expr_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|results
argument_list|,
name|WSConstants
operator|.
name|ENCR
argument_list|,
name|algorithmResults
argument_list|)
expr_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|results
argument_list|,
name|WSConstants
operator|.
name|DKT
argument_list|,
name|algorithmResults
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|validatePolicy
parameter_list|(
name|AssertionInfo
name|aiBinding
parameter_list|,
name|AlgorithmSuite
name|algorithmPolicy
parameter_list|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|result
range|:
name|algorithmResults
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|SIGN
operator|==
name|actInt
operator|&&
operator|!
name|checkSignatureAlgorithms
argument_list|(
name|result
argument_list|,
name|algorithmPolicy
argument_list|,
name|aiBinding
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Check the Signature Algorithms      */
specifier|private
name|boolean
name|checkSignatureAlgorithms
parameter_list|(
name|WSSecurityEngineResult
name|result
parameter_list|,
name|AlgorithmSuite
name|algorithmPolicy
parameter_list|,
name|AssertionInfo
name|ai
parameter_list|)
block|{
name|String
name|signatureMethod
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SIGNATURE_METHOD
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|algorithmPolicy
operator|.
name|getAsymmetricSignature
argument_list|()
operator|.
name|equals
argument_list|(
name|signatureMethod
argument_list|)
operator|&&
operator|!
name|algorithmPolicy
operator|.
name|getSymmetricSignature
argument_list|()
operator|.
name|equals
argument_list|(
name|signatureMethod
argument_list|)
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"The signature method does not match the requirement"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|c14nMethod
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_CANONICALIZATION_METHOD
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|algorithmPolicy
operator|.
name|getInclusiveC14n
argument_list|()
operator|.
name|equals
argument_list|(
name|c14nMethod
argument_list|)
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"The c14n method does not match the requirement"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|dataRefs
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|WSDataRef
name|dataRef
range|:
name|dataRefs
control|)
block|{
name|String
name|digestMethod
init|=
name|dataRef
operator|.
name|getDigestAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|algorithmPolicy
operator|.
name|getDigest
argument_list|()
operator|.
name|equals
argument_list|(
name|digestMethod
argument_list|)
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"The digest method does not match the requirement"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

