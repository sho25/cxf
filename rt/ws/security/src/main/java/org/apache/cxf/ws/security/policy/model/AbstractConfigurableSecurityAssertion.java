begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractConfigurableSecurityAssertion
extends|extends
name|AbstractSecurityAssertion
block|{
specifier|protected
name|List
argument_list|<
name|Assertion
argument_list|>
name|configurations
decl_stmt|;
specifier|public
name|AbstractConfigurableSecurityAssertion
parameter_list|(
name|SPConstants
name|version
parameter_list|)
block|{
name|super
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addConfiguration
parameter_list|(
name|Assertion
name|assertion
parameter_list|)
block|{
if|if
condition|(
name|configurations
operator|==
literal|null
condition|)
block|{
name|configurations
operator|=
operator|new
name|ArrayList
argument_list|<
name|Assertion
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|configurations
operator|.
name|add
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Assertion
argument_list|>
name|getConfigurations
parameter_list|()
block|{
return|return
name|configurations
return|;
block|}
specifier|public
name|Assertion
name|getDefaultAssertion
parameter_list|()
block|{
if|if
condition|(
name|configurations
operator|!=
literal|null
condition|)
block|{
return|return
name|configurations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

