begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|All
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|ExactlyOne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyComponent
import|;
end_import

begin_class
specifier|public
class|class
name|SymmetricBinding
extends|extends
name|SymmetricAsymmetricBindingBase
block|{
specifier|private
name|EncryptionToken
name|encryptionToken
decl_stmt|;
specifier|private
name|SignatureToken
name|signatureToken
decl_stmt|;
specifier|private
name|ProtectionToken
name|protectionToken
decl_stmt|;
specifier|public
name|SymmetricBinding
parameter_list|(
name|SPConstants
name|version
parameter_list|)
block|{
name|super
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return Returns the encryptionToken.      */
specifier|public
name|EncryptionToken
name|getEncryptionToken
parameter_list|()
block|{
return|return
name|encryptionToken
return|;
block|}
comment|/**      * @param encryptionToken The encryptionToken to set.      */
specifier|public
name|void
name|setEncryptionToken
parameter_list|(
name|EncryptionToken
name|encryptionToken
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|protectionToken
operator|!=
literal|null
condition|)
block|{
comment|// throw new WSSPolicyException("Cannot use an EncryptionToken in a " +
comment|// "SymmetricBinding when there is a ProtectionToken");
block|}
name|this
operator|.
name|encryptionToken
operator|=
name|encryptionToken
expr_stmt|;
block|}
comment|/**      * @return Returns the protectionToken.      */
specifier|public
name|ProtectionToken
name|getProtectionToken
parameter_list|()
block|{
return|return
name|protectionToken
return|;
block|}
comment|/**      * @param protectionToken The protectionToken to set.      */
specifier|public
name|void
name|setProtectionToken
parameter_list|(
name|ProtectionToken
name|protectionToken
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|encryptionToken
operator|!=
literal|null
operator|||
name|this
operator|.
name|signatureToken
operator|!=
literal|null
condition|)
block|{
comment|// throw new WSSPolicyException("Cannot use a ProtectionToken in a " +
comment|// "SymmetricBinding when there is a SignatureToken or an" +
comment|// "EncryptionToken");
block|}
name|this
operator|.
name|protectionToken
operator|=
name|protectionToken
expr_stmt|;
block|}
comment|/**      * @return Returns the signatureToken.      */
specifier|public
name|SignatureToken
name|getSignatureToken
parameter_list|()
block|{
return|return
name|signatureToken
return|;
block|}
comment|/**      * @param signatureToken The signatureToken to set.      */
specifier|public
name|void
name|setSignatureToken
parameter_list|(
name|SignatureToken
name|signatureToken
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|protectionToken
operator|!=
literal|null
condition|)
block|{
comment|// throw new WSSPolicyException("Cannot use a SignatureToken in a " +
comment|// "SymmetricBinding when there is a ProtectionToken");
block|}
name|this
operator|.
name|signatureToken
operator|=
name|signatureToken
expr_stmt|;
block|}
specifier|public
name|QName
name|getRealName
parameter_list|()
block|{
return|return
name|constants
operator|.
name|getSymmetricBinding
argument_list|()
return|;
block|}
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
name|SP12Constants
operator|.
name|INSTANCE
operator|.
name|getSymmetricBinding
argument_list|()
return|;
block|}
specifier|public
name|PolicyComponent
name|normalize
parameter_list|()
block|{
if|if
condition|(
name|isNormalized
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
name|AlgorithmSuite
name|algorithmSuite
init|=
name|getAlgorithmSuite
argument_list|()
decl_stmt|;
name|Policy
name|policy
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
name|ExactlyOne
name|exactlyOne
init|=
operator|new
name|ExactlyOne
argument_list|()
decl_stmt|;
name|All
name|wrapper
init|=
operator|new
name|All
argument_list|()
decl_stmt|;
name|SymmetricBinding
name|symmetricBinding
init|=
operator|new
name|SymmetricBinding
argument_list|(
name|constants
argument_list|)
decl_stmt|;
name|symmetricBinding
operator|.
name|setAlgorithmSuite
argument_list|(
name|algorithmSuite
argument_list|)
expr_stmt|;
name|symmetricBinding
operator|.
name|setEncryptionToken
argument_list|(
name|getEncryptionToken
argument_list|()
argument_list|)
expr_stmt|;
name|symmetricBinding
operator|.
name|setEntireHeadersAndBodySignatures
argument_list|(
name|isEntireHeadersAndBodySignatures
argument_list|()
argument_list|)
expr_stmt|;
name|symmetricBinding
operator|.
name|setIncludeTimestamp
argument_list|(
name|isIncludeTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|symmetricBinding
operator|.
name|setLayout
argument_list|(
name|getLayout
argument_list|()
argument_list|)
expr_stmt|;
name|symmetricBinding
operator|.
name|setProtectionOrder
argument_list|(
name|getProtectionOrder
argument_list|()
argument_list|)
expr_stmt|;
name|symmetricBinding
operator|.
name|setProtectionToken
argument_list|(
name|getProtectionToken
argument_list|()
argument_list|)
expr_stmt|;
name|symmetricBinding
operator|.
name|setSignatureProtection
argument_list|(
name|isSignatureProtection
argument_list|()
argument_list|)
expr_stmt|;
name|symmetricBinding
operator|.
name|setSignatureToken
argument_list|(
name|getSignatureToken
argument_list|()
argument_list|)
expr_stmt|;
name|symmetricBinding
operator|.
name|setSignedEndorsingSupportingTokens
argument_list|(
name|getSignedEndorsingSupportingTokens
argument_list|()
argument_list|)
expr_stmt|;
name|symmetricBinding
operator|.
name|setSignedSupportingToken
argument_list|(
name|getSignedSupportingToken
argument_list|()
argument_list|)
expr_stmt|;
name|symmetricBinding
operator|.
name|setTokenProtection
argument_list|(
name|isTokenProtection
argument_list|()
argument_list|)
expr_stmt|;
name|symmetricBinding
operator|.
name|setNormalized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|addPolicyComponent
argument_list|(
name|symmetricBinding
argument_list|)
expr_stmt|;
name|exactlyOne
operator|.
name|addPolicyComponent
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addPolicyComponent
argument_list|(
name|exactlyOne
argument_list|)
expr_stmt|;
return|return
name|policy
return|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|String
name|localname
init|=
name|getRealName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|String
name|namespaceURI
init|=
name|getRealName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|prefix
decl_stmt|;
name|String
name|writerPrefix
init|=
name|writer
operator|.
name|getPrefix
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|writerPrefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
name|getRealName
argument_list|()
operator|.
name|getPrefix
argument_list|()
expr_stmt|;
name|writer
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
name|writerPrefix
expr_stmt|;
block|}
comment|//<sp:SymmetricBinding>
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
name|localname
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
comment|// xmlns:sp=".."
name|writer
operator|.
name|writeNamespace
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
name|String
name|policyLocalName
init|=
name|SPConstants
operator|.
name|POLICY
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|String
name|policyNamespaceURI
init|=
name|SPConstants
operator|.
name|POLICY
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|wspPrefix
decl_stmt|;
name|String
name|wspWriterPrefix
init|=
name|writer
operator|.
name|getPrefix
argument_list|(
name|policyNamespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|wspWriterPrefix
operator|==
literal|null
condition|)
block|{
name|wspPrefix
operator|=
name|SPConstants
operator|.
name|POLICY
operator|.
name|getPrefix
argument_list|()
expr_stmt|;
name|writer
operator|.
name|setPrefix
argument_list|(
name|wspPrefix
argument_list|,
name|policyNamespaceURI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wspPrefix
operator|=
name|wspWriterPrefix
expr_stmt|;
block|}
comment|//<wsp:Policy>
name|writer
operator|.
name|writeStartElement
argument_list|(
name|wspPrefix
argument_list|,
name|policyLocalName
argument_list|,
name|policyNamespaceURI
argument_list|)
expr_stmt|;
if|if
condition|(
name|encryptionToken
operator|!=
literal|null
condition|)
block|{
name|encryptionToken
operator|.
name|serialize
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|protectionToken
operator|!=
literal|null
condition|)
block|{
name|protectionToken
operator|.
name|serialize
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Either EncryptionToken or ProtectionToken must be set"
argument_list|)
throw|;
block|}
name|AlgorithmSuite
name|algorithmSuite
init|=
name|getAlgorithmSuite
argument_list|()
decl_stmt|;
if|if
condition|(
name|algorithmSuite
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"AlgorithmSuite must be set"
argument_list|)
throw|;
block|}
comment|//<sp:AlgorithmSuite />
name|algorithmSuite
operator|.
name|serialize
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|Layout
name|layout
init|=
name|getLayout
argument_list|()
decl_stmt|;
if|if
condition|(
name|layout
operator|!=
literal|null
condition|)
block|{
comment|//<sp:Layout />
name|layout
operator|.
name|serialize
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isIncludeTimestamp
argument_list|()
condition|)
block|{
comment|//<sp:IncludeTimestamp />
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
name|SPConstants
operator|.
name|INCLUDE_TIMESTAMP
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|SPConstants
operator|.
name|ENCRYPT_BEFORE_SIGNING
operator|.
name|equals
argument_list|(
name|getProtectionOrder
argument_list|()
argument_list|)
condition|)
block|{
comment|//<sp:EncryptBeforeSigning />
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
name|SPConstants
operator|.
name|ENCRYPT_BEFORE_SIGNING
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isSignatureProtection
argument_list|()
condition|)
block|{
comment|//<sp:EncryptSignature />
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
name|SPConstants
operator|.
name|ENCRYPT_SIGNATURE
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isEntireHeadersAndBodySignatures
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeEmptyElement
argument_list|(
name|prefix
argument_list|,
name|SPConstants
operator|.
name|ONLY_SIGN_ENTIRE_HEADERS_AND_BODY
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
comment|//</wsp:Policy>
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|//</sp:SymmetricBinding>
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

