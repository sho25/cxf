begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|binding
operator|.
name|wss10
operator|.
name|AttributedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|binding
operator|.
name|wss10
operator|.
name|BinarySecurityTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|binding
operator|.
name|wss10
operator|.
name|EncodedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|binding
operator|.
name|wss10
operator|.
name|PasswordString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|binding
operator|.
name|wss10
operator|.
name|UsernameTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|binding
operator|.
name|wsu10
operator|.
name|AttributedDateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|token
operator|.
name|BinarySecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|token
operator|.
name|PKIPathSecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|token
operator|.
name|X509Security
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|KerberosSecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|ext
operator|.
name|WSSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|impl
operator|.
name|securityToken
operator|.
name|KerberosServiceSecurityTokenImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|impl
operator|.
name|securityToken
operator|.
name|SamlSecurityTokenImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|impl
operator|.
name|securityToken
operator|.
name|UsernameSecurityTokenImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|impl
operator|.
name|securityToken
operator|.
name|X509PKIPathv1SecurityTokenImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|impl
operator|.
name|securityToken
operator|.
name|X509V3SecurityTokenImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SamlSecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|UsernameSecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|WSSecurityTokenConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|utils
operator|.
name|WSSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|validate
operator|.
name|BinarySecurityTokenValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|validate
operator|.
name|BinarySecurityTokenValidatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|validate
operator|.
name|SamlTokenValidatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|validate
operator|.
name|TokenContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|validate
operator|.
name|UsernameTokenValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|exceptions
operator|.
name|XMLSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|XMLSecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|InboundSecurityToken
import|;
end_import

begin_comment
comment|/**  * A Streaming SAML Token Validator implementation to validate a received Token to a  * SecurityTokenService (STS).  *  * TODO Refactor this class a bit better...  */
end_comment

begin_class
specifier|public
class|class
name|STSStaxTokenValidator
extends|extends
name|SamlTokenValidatorImpl
implements|implements
name|BinarySecurityTokenValidator
implements|,
name|UsernameTokenValidator
block|{
specifier|private
name|boolean
name|alwaysValidateToSts
decl_stmt|;
specifier|public
name|STSStaxTokenValidator
parameter_list|()
block|{
comment|//
block|}
comment|/**      * Construct a new instance.      * @param alwaysValidateToSts whether to always validate the token to the STS      */
specifier|public
name|STSStaxTokenValidator
parameter_list|(
name|boolean
name|alwaysValidateToSts
parameter_list|)
block|{
name|this
operator|.
name|alwaysValidateToSts
operator|=
name|alwaysValidateToSts
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|SamlSecurityToken
operator|&
name|InboundSecurityToken
parameter_list|>
name|T
name|validate
parameter_list|(
specifier|final
name|SamlAssertionWrapper
name|samlAssertionWrapper
parameter_list|,
specifier|final
name|InboundSecurityToken
name|subjectSecurityToken
parameter_list|,
specifier|final
name|TokenContext
name|tokenContext
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|// Check conditions
name|checkConditions
argument_list|(
name|samlAssertionWrapper
argument_list|)
expr_stmt|;
comment|// Check OneTimeUse Condition
name|checkOneTimeUse
argument_list|(
name|samlAssertionWrapper
argument_list|,
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|getSamlOneTimeUseReplayCache
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate the assertion against schemas/profiles
name|validateAssertion
argument_list|(
name|samlAssertionWrapper
argument_list|)
expr_stmt|;
name|Crypto
name|sigVerCrypto
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|samlAssertionWrapper
operator|.
name|isSigned
argument_list|()
condition|)
block|{
name|sigVerCrypto
operator|=
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|getSignatureVerificationCrypto
argument_list|()
expr_stmt|;
block|}
specifier|final
name|SoapMessage
name|message
init|=
operator|(
name|SoapMessage
operator|)
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|getMsgContext
argument_list|()
decl_stmt|;
comment|// Validate to STS if required
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|alwaysValidateToSts
condition|)
block|{
name|Element
name|tokenElement
init|=
name|samlAssertionWrapper
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|validateTokenToSTS
argument_list|(
name|tokenElement
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|boolean
name|stsValidated
init|=
name|valid
decl_stmt|;
name|SamlSecurityTokenImpl
name|securityToken
init|=
operator|new
name|SamlSecurityTokenImpl
argument_list|(
name|samlAssertionWrapper
argument_list|,
name|subjectSecurityToken
argument_list|,
name|tokenContext
operator|.
name|getWsSecurityContext
argument_list|()
argument_list|,
name|sigVerCrypto
argument_list|,
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier_NoKeyInfo
argument_list|,
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|()
throws|throws
name|XMLSecurityException
block|{
if|if
condition|(
name|stsValidated
condition|)
block|{
comment|// Already validated
return|return;
block|}
try|try
block|{
name|super
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLSecurityException
name|ex
parameter_list|)
block|{
name|SamlAssertionWrapper
name|assertion
init|=
name|super
operator|.
name|getSamlAssertionWrapper
argument_list|()
decl_stmt|;
name|Element
name|tokenElement
init|=
name|assertion
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|validateTokenToSTS
argument_list|(
name|tokenElement
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|securityToken
operator|.
name|setElementPath
argument_list|(
name|tokenContext
operator|.
name|getElementPath
argument_list|()
argument_list|)
expr_stmt|;
name|securityToken
operator|.
name|setXMLSecEvent
argument_list|(
name|tokenContext
operator|.
name|getFirstXMLSecEvent
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|securityToken
return|;
block|}
annotation|@
name|Override
specifier|public
name|InboundSecurityToken
name|validate
parameter_list|(
specifier|final
name|BinarySecurityTokenType
name|binarySecurityTokenType
parameter_list|,
specifier|final
name|TokenContext
name|tokenContext
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|STSStaxBSTValidator
name|validator
init|=
operator|new
name|STSStaxBSTValidator
argument_list|(
name|alwaysValidateToSts
argument_list|)
decl_stmt|;
return|return
name|validator
operator|.
name|validate
argument_list|(
name|binarySecurityTokenType
argument_list|,
name|tokenContext
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|UsernameSecurityToken
operator|&
name|InboundSecurityToken
parameter_list|>
name|T
name|validate
parameter_list|(
name|UsernameTokenType
name|usernameTokenType
parameter_list|,
name|TokenContext
name|tokenContext
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|// If the UsernameToken is to be used for key derivation, the (1.1)
comment|// spec says that it cannot contain a password, and it must contain
comment|// an Iteration element
specifier|final
name|byte
index|[]
name|salt
init|=
name|XMLSecurityUtils
operator|.
name|getQNameType
argument_list|(
name|usernameTokenType
operator|.
name|getAny
argument_list|()
argument_list|,
name|WSSConstants
operator|.
name|TAG_WSSE11_SALT
argument_list|)
decl_stmt|;
name|PasswordString
name|passwordType
init|=
name|XMLSecurityUtils
operator|.
name|getQNameType
argument_list|(
name|usernameTokenType
operator|.
name|getAny
argument_list|()
argument_list|,
name|WSSConstants
operator|.
name|TAG_WSSE_PASSWORD
argument_list|)
decl_stmt|;
specifier|final
name|Long
name|iteration
init|=
name|XMLSecurityUtils
operator|.
name|getQNameType
argument_list|(
name|usernameTokenType
operator|.
name|getAny
argument_list|()
argument_list|,
name|WSSConstants
operator|.
name|TAG_WSSE11_ITERATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|salt
operator|!=
literal|null
operator|&&
operator|(
name|passwordType
operator|!=
literal|null
operator|||
name|iteration
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|INVALID_SECURITY_TOKEN
argument_list|,
literal|"badTokenType01"
argument_list|)
throw|;
block|}
name|boolean
name|handleCustomPasswordTypes
init|=
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|getHandleCustomPasswordTypes
argument_list|()
decl_stmt|;
name|boolean
name|allowUsernameTokenNoPassword
init|=
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|isAllowUsernameTokenNoPassword
argument_list|()
operator|||
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
name|String
operator|)
name|tokenContext
operator|.
name|getWsSecurityContext
argument_list|()
operator|.
name|get
argument_list|(
name|WSSConstants
operator|.
name|PROP_ALLOW_USERNAMETOKEN_NOPASSWORD
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check received password type against required type
name|WSSConstants
operator|.
name|UsernameTokenPasswordType
name|requiredPasswordType
init|=
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|getUsernameTokenPasswordType
argument_list|()
decl_stmt|;
if|if
condition|(
name|requiredPasswordType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|passwordType
operator|==
literal|null
operator|||
name|passwordType
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|)
throw|;
block|}
name|WSSConstants
operator|.
name|UsernameTokenPasswordType
name|usernameTokenPasswordType
init|=
name|WSSConstants
operator|.
name|UsernameTokenPasswordType
operator|.
name|getUsernameTokenPasswordType
argument_list|(
name|passwordType
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredPasswordType
operator|!=
name|usernameTokenPasswordType
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|)
throw|;
block|}
block|}
name|WSSConstants
operator|.
name|UsernameTokenPasswordType
name|usernameTokenPasswordType
init|=
name|WSSConstants
operator|.
name|UsernameTokenPasswordType
operator|.
name|PASSWORD_NONE
decl_stmt|;
if|if
condition|(
name|passwordType
operator|!=
literal|null
operator|&&
name|passwordType
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|usernameTokenPasswordType
operator|=
name|WSSConstants
operator|.
name|UsernameTokenPasswordType
operator|.
name|getUsernameTokenPasswordType
argument_list|(
name|passwordType
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AttributedString
name|username
init|=
name|usernameTokenType
operator|.
name|getUsername
argument_list|()
decl_stmt|;
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|INVALID_SECURITY_TOKEN
argument_list|,
literal|"badTokenType01"
argument_list|)
throw|;
block|}
specifier|final
name|EncodedString
name|encodedNonce
init|=
name|XMLSecurityUtils
operator|.
name|getQNameType
argument_list|(
name|usernameTokenType
operator|.
name|getAny
argument_list|()
argument_list|,
name|WSSConstants
operator|.
name|TAG_WSSE_NONCE
argument_list|)
decl_stmt|;
name|byte
index|[]
name|nonceVal
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|encodedNonce
operator|!=
literal|null
operator|&&
name|encodedNonce
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nonceVal
operator|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|encodedNonce
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AttributedDateTime
name|attributedDateTimeCreated
init|=
name|XMLSecurityUtils
operator|.
name|getQNameType
argument_list|(
name|usernameTokenType
operator|.
name|getAny
argument_list|()
argument_list|,
name|WSSConstants
operator|.
name|TAG_WSU_CREATED
argument_list|)
decl_stmt|;
name|String
name|created
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attributedDateTimeCreated
operator|!=
literal|null
condition|)
block|{
name|created
operator|=
name|attributedDateTimeCreated
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
comment|// Validate to STS if required
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
specifier|final
name|SoapMessage
name|message
init|=
operator|(
name|SoapMessage
operator|)
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|getMsgContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|alwaysValidateToSts
condition|)
block|{
name|Element
name|tokenElement
init|=
name|convertToDOM
argument_list|(
name|username
operator|.
name|getValue
argument_list|()
argument_list|,
name|passwordType
operator|.
name|getValue
argument_list|()
argument_list|,
name|passwordType
operator|.
name|getType
argument_list|()
argument_list|,
name|usernameTokenType
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|validateTokenToSTS
argument_list|(
name|tokenElement
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|valid
condition|)
block|{
try|try
block|{
if|if
condition|(
name|usernameTokenPasswordType
operator|==
name|WSSConstants
operator|.
name|UsernameTokenPasswordType
operator|.
name|PASSWORD_DIGEST
condition|)
block|{
if|if
condition|(
name|encodedNonce
operator|==
literal|null
operator|||
name|attributedDateTimeCreated
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|INVALID_SECURITY_TOKEN
argument_list|,
literal|"badTokenType01"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|WSSConstants
operator|.
name|SOAPMESSAGE_NS10_BASE64_ENCODING
operator|.
name|equals
argument_list|(
name|encodedNonce
operator|.
name|getEncodingType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|UNSUPPORTED_SECURITY_TOKEN
argument_list|,
literal|"badTokenType01"
argument_list|)
throw|;
block|}
name|verifyDigestPassword
argument_list|(
name|username
operator|.
name|getValue
argument_list|()
argument_list|,
name|passwordType
argument_list|,
name|nonceVal
argument_list|,
name|created
argument_list|,
name|tokenContext
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|usernameTokenPasswordType
operator|==
name|WSSConstants
operator|.
name|UsernameTokenPasswordType
operator|.
name|PASSWORD_TEXT
operator|||
name|passwordType
operator|!=
literal|null
operator|&&
name|passwordType
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
name|usernameTokenPasswordType
operator|==
name|WSSConstants
operator|.
name|UsernameTokenPasswordType
operator|.
name|PASSWORD_NONE
condition|)
block|{
name|verifyPlaintextPassword
argument_list|(
name|username
operator|.
name|getValue
argument_list|()
argument_list|,
name|passwordType
argument_list|,
name|tokenContext
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|passwordType
operator|!=
literal|null
operator|&&
name|passwordType
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|handleCustomPasswordTypes
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|)
throw|;
block|}
name|verifyPlaintextPassword
argument_list|(
name|username
operator|.
name|getValue
argument_list|()
argument_list|,
name|passwordType
argument_list|,
name|tokenContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|allowUsernameTokenNoPassword
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|ex
parameter_list|)
block|{
name|Element
name|tokenElement
init|=
name|convertToDOM
argument_list|(
name|username
operator|.
name|getValue
argument_list|()
argument_list|,
name|passwordType
operator|.
name|getValue
argument_list|()
argument_list|,
name|passwordType
operator|.
name|getType
argument_list|()
argument_list|,
name|usernameTokenType
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|validateTokenToSTS
argument_list|(
name|tokenElement
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|password
decl_stmt|;
if|if
condition|(
name|passwordType
operator|!=
literal|null
condition|)
block|{
name|password
operator|=
name|passwordType
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|salt
operator|!=
literal|null
condition|)
block|{
name|WSPasswordCallback
name|pwCb
init|=
operator|new
name|WSPasswordCallback
argument_list|(
name|username
operator|.
name|getValue
argument_list|()
argument_list|,
name|WSPasswordCallback
operator|.
name|USERNAME_TOKEN
argument_list|)
decl_stmt|;
try|try
block|{
name|WSSUtils
operator|.
name|doPasswordCallback
argument_list|(
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|getCallbackHandler
argument_list|()
argument_list|,
name|pwCb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|password
operator|=
name|pwCb
operator|.
name|getPassword
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|password
operator|=
literal|null
expr_stmt|;
block|}
name|UsernameSecurityTokenImpl
name|usernameSecurityToken
init|=
operator|new
name|UsernameSecurityTokenImpl
argument_list|(
name|usernameTokenPasswordType
argument_list|,
name|username
operator|.
name|getValue
argument_list|()
argument_list|,
name|password
argument_list|,
name|created
argument_list|,
name|nonceVal
argument_list|,
name|salt
argument_list|,
name|iteration
argument_list|,
name|tokenContext
operator|.
name|getWsSecurityContext
argument_list|()
argument_list|,
name|usernameTokenType
operator|.
name|getId
argument_list|()
argument_list|,
name|WSSecurityTokenConstants
operator|.
name|KEYIDENTIFIER_SECURITY_TOKEN_DIRECT_REFERENCE
argument_list|)
decl_stmt|;
name|usernameSecurityToken
operator|.
name|setElementPath
argument_list|(
name|tokenContext
operator|.
name|getElementPath
argument_list|()
argument_list|)
expr_stmt|;
name|usernameSecurityToken
operator|.
name|setXMLSecEvent
argument_list|(
name|tokenContext
operator|.
name|getFirstXMLSecEvent
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|usernameSecurityToken
return|;
block|}
comment|/**      * Verify a UsernameToken containing a password digest.      */
specifier|private
name|void
name|verifyDigestPassword
parameter_list|(
name|String
name|username
parameter_list|,
name|PasswordString
name|passwordType
parameter_list|,
name|byte
index|[]
name|nonceVal
parameter_list|,
name|String
name|created
parameter_list|,
name|TokenContext
name|tokenContext
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|WSPasswordCallback
name|pwCb
init|=
operator|new
name|WSPasswordCallback
argument_list|(
name|username
argument_list|,
literal|null
argument_list|,
name|passwordType
operator|.
name|getType
argument_list|()
argument_list|,
name|WSPasswordCallback
operator|.
name|USERNAME_TOKEN
argument_list|)
decl_stmt|;
try|try
block|{
name|WSSUtils
operator|.
name|doPasswordCallback
argument_list|(
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|getCallbackHandler
argument_list|()
argument_list|,
name|pwCb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|pwCb
operator|.
name|getPassword
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|)
throw|;
block|}
name|String
name|passDigest
init|=
name|WSSUtils
operator|.
name|doPasswordDigest
argument_list|(
name|nonceVal
argument_list|,
name|created
argument_list|,
name|pwCb
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|passwordType
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|passDigest
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|)
throw|;
block|}
name|passwordType
operator|.
name|setValue
argument_list|(
name|pwCb
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verify a UsernameToken containing a plaintext password.      */
specifier|private
name|void
name|verifyPlaintextPassword
parameter_list|(
name|String
name|username
parameter_list|,
name|PasswordString
name|passwordType
parameter_list|,
name|TokenContext
name|tokenContext
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|WSPasswordCallback
name|pwCb
init|=
operator|new
name|WSPasswordCallback
argument_list|(
name|username
argument_list|,
literal|null
argument_list|,
name|passwordType
operator|.
name|getType
argument_list|()
argument_list|,
name|WSPasswordCallback
operator|.
name|USERNAME_TOKEN
argument_list|)
decl_stmt|;
try|try
block|{
name|WSSUtils
operator|.
name|doPasswordCallback
argument_list|(
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|getCallbackHandler
argument_list|()
argument_list|,
name|pwCb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|pwCb
operator|.
name|getPassword
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|passwordType
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|pwCb
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|)
throw|;
block|}
name|passwordType
operator|.
name|setValue
argument_list|(
name|pwCb
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Convert to DOM to send the token to the STS - it does not copy Nonce/Created/Iteration
comment|// values
specifier|private
name|Element
name|convertToDOM
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|passwordType
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|newDocument
argument_list|()
decl_stmt|;
name|UsernameToken
name|usernameToken
init|=
operator|new
name|UsernameToken
argument_list|(
literal|true
argument_list|,
name|doc
argument_list|,
name|passwordType
argument_list|)
decl_stmt|;
name|usernameToken
operator|.
name|setName
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|usernameToken
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|usernameToken
operator|.
name|setID
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|usernameToken
operator|.
name|addWSSENamespace
argument_list|()
expr_stmt|;
name|usernameToken
operator|.
name|addWSUNamespace
argument_list|()
expr_stmt|;
return|return
name|usernameToken
operator|.
name|getElement
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|validateTokenToSTS
parameter_list|(
name|Element
name|tokenElement
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|SecurityToken
name|token
init|=
operator|new
name|SecurityToken
argument_list|()
decl_stmt|;
name|token
operator|.
name|setToken
argument_list|(
name|tokenElement
argument_list|)
expr_stmt|;
name|STSClient
name|c
init|=
name|STSUtils
operator|.
name|getClient
argument_list|(
name|message
argument_list|,
literal|"sts"
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|c
init|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"noprint"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
try|try
block|{
name|c
operator|.
name|validateSecurityToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILED_AUTHENTICATION
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * A Streaming SAML Token Validator implementation to validate a BinarySecurityToken to a      * SecurityTokenService (STS).      */
specifier|private
specifier|static
class|class
name|STSStaxBSTValidator
extends|extends
name|BinarySecurityTokenValidatorImpl
block|{
specifier|private
name|boolean
name|alwaysValidateToSts
decl_stmt|;
comment|/**          * Construct a new instance.          * @param alwaysValidateToSts whether to always validate the token to the STS          */
name|STSStaxBSTValidator
parameter_list|(
name|boolean
name|alwaysValidateToSts
parameter_list|)
block|{
name|this
operator|.
name|alwaysValidateToSts
operator|=
name|alwaysValidateToSts
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InboundSecurityToken
name|validate
parameter_list|(
specifier|final
name|BinarySecurityTokenType
name|binarySecurityTokenType
parameter_list|,
specifier|final
name|TokenContext
name|tokenContext
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|//only Base64Encoding is supported
if|if
condition|(
operator|!
name|WSSConstants
operator|.
name|SOAPMESSAGE_NS10_BASE64_ENCODING
operator|.
name|equals
argument_list|(
name|binarySecurityTokenType
operator|.
name|getEncodingType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|INVALID_SECURITY_TOKEN
argument_list|,
literal|"badEncoding"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|binarySecurityTokenType
operator|.
name|getEncodingType
argument_list|()
block|}
argument_list|)
throw|;
block|}
specifier|final
name|byte
index|[]
name|securityTokenData
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|binarySecurityTokenType
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|SoapMessage
name|message
init|=
operator|(
name|SoapMessage
operator|)
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|getMsgContext
argument_list|()
decl_stmt|;
comment|// Validate to STS if required
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|alwaysValidateToSts
condition|)
block|{
name|Element
name|tokenElement
init|=
name|convertToDOM
argument_list|(
name|binarySecurityTokenType
argument_list|,
name|securityTokenData
argument_list|)
decl_stmt|;
name|validateTokenToSTS
argument_list|(
name|tokenElement
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|valid
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|boolean
name|stsValidated
init|=
name|valid
decl_stmt|;
try|try
block|{
if|if
condition|(
name|WSSConstants
operator|.
name|NS_X509_V3_TYPE
operator|.
name|equals
argument_list|(
name|binarySecurityTokenType
operator|.
name|getValueType
argument_list|()
argument_list|)
condition|)
block|{
name|Crypto
name|crypto
init|=
name|getCrypto
argument_list|(
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
argument_list|)
decl_stmt|;
name|X509V3SecurityTokenImpl
name|x509V3SecurityToken
init|=
operator|new
name|X509V3SecurityTokenImpl
argument_list|(
name|tokenContext
operator|.
name|getWsSecurityContext
argument_list|()
argument_list|,
name|crypto
argument_list|,
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|getCallbackHandler
argument_list|()
argument_list|,
name|securityTokenData
argument_list|,
name|binarySecurityTokenType
operator|.
name|getId
argument_list|()
argument_list|,
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|()
throws|throws
name|XMLSecurityException
block|{
if|if
condition|(
name|stsValidated
condition|)
block|{
comment|// Already validated
return|return;
block|}
try|try
block|{
name|super
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLSecurityException
name|ex
parameter_list|)
block|{
name|Element
name|tokenElement
init|=
name|convertToDOM
argument_list|(
name|binarySecurityTokenType
argument_list|,
name|securityTokenData
argument_list|)
decl_stmt|;
name|validateTokenToSTS
argument_list|(
name|tokenElement
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|x509V3SecurityToken
operator|.
name|setElementPath
argument_list|(
name|tokenContext
operator|.
name|getElementPath
argument_list|()
argument_list|)
expr_stmt|;
name|x509V3SecurityToken
operator|.
name|setXMLSecEvent
argument_list|(
name|tokenContext
operator|.
name|getFirstXMLSecEvent
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|x509V3SecurityToken
return|;
block|}
elseif|else
if|if
condition|(
name|WSSConstants
operator|.
name|NS_X509_PKIPATH_V1
operator|.
name|equals
argument_list|(
name|binarySecurityTokenType
operator|.
name|getValueType
argument_list|()
argument_list|)
condition|)
block|{
name|Crypto
name|crypto
init|=
name|getCrypto
argument_list|(
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
argument_list|)
decl_stmt|;
name|X509PKIPathv1SecurityTokenImpl
name|x509PKIPathv1SecurityToken
init|=
operator|new
name|X509PKIPathv1SecurityTokenImpl
argument_list|(
name|tokenContext
operator|.
name|getWsSecurityContext
argument_list|()
argument_list|,
name|crypto
argument_list|,
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|getCallbackHandler
argument_list|()
argument_list|,
name|securityTokenData
argument_list|,
name|binarySecurityTokenType
operator|.
name|getId
argument_list|()
argument_list|,
name|WSSecurityTokenConstants
operator|.
name|KEYIDENTIFIER_SECURITY_TOKEN_DIRECT_REFERENCE
argument_list|,
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|()
throws|throws
name|XMLSecurityException
block|{
if|if
condition|(
name|stsValidated
condition|)
block|{
comment|// Already validated
return|return;
block|}
try|try
block|{
name|super
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLSecurityException
name|ex
parameter_list|)
block|{
name|Element
name|tokenElement
init|=
name|convertToDOM
argument_list|(
name|binarySecurityTokenType
argument_list|,
name|securityTokenData
argument_list|)
decl_stmt|;
name|validateTokenToSTS
argument_list|(
name|tokenElement
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|x509PKIPathv1SecurityToken
operator|.
name|setElementPath
argument_list|(
name|tokenContext
operator|.
name|getElementPath
argument_list|()
argument_list|)
expr_stmt|;
name|x509PKIPathv1SecurityToken
operator|.
name|setXMLSecEvent
argument_list|(
name|tokenContext
operator|.
name|getFirstXMLSecEvent
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|x509PKIPathv1SecurityToken
return|;
block|}
elseif|else
if|if
condition|(
name|WSSConstants
operator|.
name|NS_GSS_KERBEROS5_AP_REQ
operator|.
name|equals
argument_list|(
name|binarySecurityTokenType
operator|.
name|getValueType
argument_list|()
argument_list|)
condition|)
block|{
name|KerberosServiceSecurityTokenImpl
name|kerberosServiceSecurityToken
init|=
operator|new
name|KerberosServiceSecurityTokenImpl
argument_list|(
name|tokenContext
operator|.
name|getWsSecurityContext
argument_list|()
argument_list|,
name|tokenContext
operator|.
name|getWssSecurityProperties
argument_list|()
operator|.
name|getCallbackHandler
argument_list|()
argument_list|,
name|securityTokenData
argument_list|,
name|binarySecurityTokenType
operator|.
name|getValueType
argument_list|()
argument_list|,
name|binarySecurityTokenType
operator|.
name|getId
argument_list|()
argument_list|,
name|WSSecurityTokenConstants
operator|.
name|KEYIDENTIFIER_SECURITY_TOKEN_DIRECT_REFERENCE
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|verify
parameter_list|()
throws|throws
name|XMLSecurityException
block|{
if|if
condition|(
name|stsValidated
condition|)
block|{
comment|// Already validated
return|return;
block|}
try|try
block|{
name|super
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLSecurityException
name|ex
parameter_list|)
block|{
name|Element
name|tokenElement
init|=
name|convertToDOM
argument_list|(
name|binarySecurityTokenType
argument_list|,
name|securityTokenData
argument_list|)
decl_stmt|;
name|validateTokenToSTS
argument_list|(
name|tokenElement
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|kerberosServiceSecurityToken
operator|.
name|setElementPath
argument_list|(
name|tokenContext
operator|.
name|getElementPath
argument_list|()
argument_list|)
expr_stmt|;
name|kerberosServiceSecurityToken
operator|.
name|setXMLSecEvent
argument_list|(
name|tokenContext
operator|.
name|getFirstXMLSecEvent
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|kerberosServiceSecurityToken
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|INVALID_SECURITY_TOKEN
argument_list|,
literal|"invalidValueType"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|binarySecurityTokenType
operator|.
name|getValueType
argument_list|()
block|}
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|INVALID_SECURITY_TOKEN
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Convert to DOM to send the token to the STS
specifier|private
name|Element
name|convertToDOM
parameter_list|(
name|BinarySecurityTokenType
name|binarySecurityTokenType
parameter_list|,
name|byte
index|[]
name|securityTokenData
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|newDocument
argument_list|()
decl_stmt|;
name|BinarySecurity
name|binarySecurity
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|WSSConstants
operator|.
name|NS_X509_V3_TYPE
operator|.
name|equals
argument_list|(
name|binarySecurityTokenType
operator|.
name|getValueType
argument_list|()
argument_list|)
condition|)
block|{
name|binarySecurity
operator|=
operator|new
name|X509Security
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSSConstants
operator|.
name|NS_X509_PKIPATH_V1
operator|.
name|equals
argument_list|(
name|binarySecurityTokenType
operator|.
name|getValueType
argument_list|()
argument_list|)
condition|)
block|{
name|binarySecurity
operator|=
operator|new
name|PKIPathSecurity
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSSConstants
operator|.
name|NS_GSS_KERBEROS5_AP_REQ
operator|.
name|equals
argument_list|(
name|binarySecurityTokenType
operator|.
name|getValueType
argument_list|()
argument_list|)
condition|)
block|{
name|binarySecurity
operator|=
operator|new
name|KerberosSecurity
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|INVALID_SECURITY_TOKEN
argument_list|)
throw|;
block|}
name|binarySecurity
operator|.
name|addWSSENamespace
argument_list|()
expr_stmt|;
name|binarySecurity
operator|.
name|addWSUNamespace
argument_list|()
expr_stmt|;
name|binarySecurity
operator|.
name|setEncodingType
argument_list|(
name|binarySecurityTokenType
operator|.
name|getEncodingType
argument_list|()
argument_list|)
expr_stmt|;
name|binarySecurity
operator|.
name|setValueType
argument_list|(
name|binarySecurityTokenType
operator|.
name|getValueType
argument_list|()
argument_list|)
expr_stmt|;
name|binarySecurity
operator|.
name|setID
argument_list|(
name|binarySecurityTokenType
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|binarySecurity
operator|.
name|setToken
argument_list|(
name|securityTokenData
argument_list|)
expr_stmt|;
return|return
name|binarySecurity
operator|.
name|getElement
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

