begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|custom
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|WSSPolicyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
import|;
end_import

begin_comment
comment|/**  * This AlgorithmSuite supports GCM security policies.  */
end_comment

begin_class
specifier|public
class|class
name|GCMAlgorithmSuite
extends|extends
name|AlgorithmSuite
block|{
specifier|public
name|GCMAlgorithmSuite
parameter_list|(
name|SPConstants
name|version
parameter_list|)
block|{
name|super
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
specifier|public
name|GCMAlgorithmSuite
parameter_list|()
block|{
name|super
argument_list|(
name|SP12Constants
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the algorithm suite      *       * @param algoSuite      * @throws WSSPolicyException      */
annotation|@
name|Override
specifier|public
name|void
name|setAlgorithmSuite
parameter_list|(
name|String
name|algoSuite
parameter_list|)
throws|throws
name|WSSPolicyException
block|{
name|this
operator|.
name|algoSuiteString
operator|=
name|algoSuite
expr_stmt|;
if|if
condition|(
literal|"Basic128GCM"
operator|.
name|equals
argument_list|(
name|algoSuite
argument_list|)
condition|)
block|{
name|this
operator|.
name|digest
operator|=
name|SPConstants
operator|.
name|SHA1
expr_stmt|;
name|this
operator|.
name|encryption
operator|=
literal|"http://www.w3.org/2009/xmlenc11#aes128-gcm"
expr_stmt|;
name|this
operator|.
name|symmetricKeyWrap
operator|=
name|SPConstants
operator|.
name|KW_AES128
expr_stmt|;
name|this
operator|.
name|asymmetricKeyWrap
operator|=
name|SPConstants
operator|.
name|KW_RSA_OAEP
expr_stmt|;
name|this
operator|.
name|encryptionKeyDerivation
operator|=
name|SPConstants
operator|.
name|P_SHA1_L128
expr_stmt|;
name|this
operator|.
name|signatureKeyDerivation
operator|=
name|SPConstants
operator|.
name|P_SHA1_L128
expr_stmt|;
name|this
operator|.
name|encryptionDerivedKeyLength
operator|=
literal|128
expr_stmt|;
name|this
operator|.
name|signatureDerivedKeyLength
operator|=
literal|128
expr_stmt|;
name|this
operator|.
name|minimumSymmetricKeyLength
operator|=
literal|128
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Basic192GCM"
operator|.
name|equals
argument_list|(
name|algoSuite
argument_list|)
condition|)
block|{
name|this
operator|.
name|digest
operator|=
name|SPConstants
operator|.
name|SHA1
expr_stmt|;
name|this
operator|.
name|encryption
operator|=
literal|"http://www.w3.org/2009/xmlenc11#aes192-gcm"
expr_stmt|;
name|this
operator|.
name|symmetricKeyWrap
operator|=
name|SPConstants
operator|.
name|KW_AES192
expr_stmt|;
name|this
operator|.
name|asymmetricKeyWrap
operator|=
name|SPConstants
operator|.
name|KW_RSA_OAEP
expr_stmt|;
name|this
operator|.
name|encryptionKeyDerivation
operator|=
name|SPConstants
operator|.
name|P_SHA1_L192
expr_stmt|;
name|this
operator|.
name|signatureKeyDerivation
operator|=
name|SPConstants
operator|.
name|P_SHA1_L192
expr_stmt|;
name|this
operator|.
name|encryptionDerivedKeyLength
operator|=
literal|192
expr_stmt|;
name|this
operator|.
name|signatureDerivedKeyLength
operator|=
literal|192
expr_stmt|;
name|this
operator|.
name|minimumSymmetricKeyLength
operator|=
literal|192
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Basic256GCM"
operator|.
name|equals
argument_list|(
name|algoSuite
argument_list|)
condition|)
block|{
name|this
operator|.
name|digest
operator|=
name|SPConstants
operator|.
name|SHA1
expr_stmt|;
name|this
operator|.
name|encryption
operator|=
literal|"http://www.w3.org/2009/xmlenc11#aes256-gcm"
expr_stmt|;
name|this
operator|.
name|symmetricKeyWrap
operator|=
name|SPConstants
operator|.
name|KW_AES256
expr_stmt|;
name|this
operator|.
name|asymmetricKeyWrap
operator|=
name|SPConstants
operator|.
name|KW_RSA_OAEP
expr_stmt|;
name|this
operator|.
name|encryptionKeyDerivation
operator|=
name|SPConstants
operator|.
name|P_SHA1_L256
expr_stmt|;
name|this
operator|.
name|signatureKeyDerivation
operator|=
name|SPConstants
operator|.
name|P_SHA1_L192
expr_stmt|;
name|this
operator|.
name|encryptionDerivedKeyLength
operator|=
literal|256
expr_stmt|;
name|this
operator|.
name|signatureDerivedKeyLength
operator|=
literal|192
expr_stmt|;
name|this
operator|.
name|minimumSymmetricKeyLength
operator|=
literal|256
expr_stmt|;
name|this
operator|.
name|encryptionDerivedKeyLength
operator|=
literal|256
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

