begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_comment
comment|/**  * Interceptor verifies critical policy security assertions for client side  */
end_comment

begin_class
specifier|public
class|class
name|SecurityVerificationOutInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|SoapMessage
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|SecurityVerificationOutInterceptor
name|INSTANCE
init|=
operator|new
name|SecurityVerificationOutInterceptor
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SecurityVerificationOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|SecurityVerificationOutInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_LOGICAL
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks if some security assertions are specified without binding assertion and cannot be fulfilled.      * Throw PolicyException in this case      *       * @param message      * @throws PolicyException if assertions are specified without binding      */
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
throws|throws
name|Fault
block|{
if|if
condition|(
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|aim
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|aisTransport
init|=
name|NegotiationUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|TRANSPORT_BINDING
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|aisAssymetric
init|=
name|NegotiationUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ASYMMETRIC_BINDING
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|aisSymetric
init|=
name|NegotiationUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SYMMETRIC_BINDING
argument_list|)
decl_stmt|;
if|if
condition|(
name|aisTransport
operator|.
name|isEmpty
argument_list|()
operator|&&
name|aisAssymetric
operator|.
name|isEmpty
argument_list|()
operator|&&
name|aisSymetric
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|aisSignedParts
init|=
name|NegotiationUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_PARTS
argument_list|)
decl_stmt|;
name|checkAssertion
argument_list|(
name|aisSignedParts
argument_list|,
name|SPConstants
operator|.
name|SIGNED_PARTS
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|aisSignedElements
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_ELEMENTS
argument_list|)
decl_stmt|;
name|checkAssertion
argument_list|(
name|aisSignedElements
argument_list|,
name|SPConstants
operator|.
name|SIGNED_ELEMENTS
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|aisEncryptedParts
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|)
decl_stmt|;
name|checkAssertion
argument_list|(
name|aisEncryptedParts
argument_list|,
name|SPConstants
operator|.
name|ENCRYPTED_PARTS
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|aisEncryptedElements
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|)
decl_stmt|;
name|checkAssertion
argument_list|(
name|aisEncryptedElements
argument_list|,
name|SPConstants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|aisContentEncryptedElements
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|CONTENT_ENCRYPTED_ELEMENTS
argument_list|)
decl_stmt|;
name|checkAssertion
argument_list|(
name|aisContentEncryptedElements
argument_list|,
name|SPConstants
operator|.
name|CONTENT_ENCRYPTED_ELEMENTS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|checkAssertion
parameter_list|(
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
parameter_list|,
name|String
name|assertionName
parameter_list|)
block|{
if|if
condition|(
operator|(
name|ais
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|String
name|error
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s assertion cannot be fulfilled without binding. "
operator|+
literal|"At least one binding assertion (%s, %s, %s) must be specified in policy."
argument_list|,
name|assertionName
argument_list|,
name|SP12Constants
operator|.
name|TRANSPORT_BINDING
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|SP12Constants
operator|.
name|ASYMMETRIC_BINDING
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|SP12Constants
operator|.
name|SYMMETRIC_BINDING
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|AssertionInfo
name|info
init|=
name|ais
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|info
operator|.
name|setNotAsserted
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
name|error
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PolicyException
argument_list|(
name|info
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

