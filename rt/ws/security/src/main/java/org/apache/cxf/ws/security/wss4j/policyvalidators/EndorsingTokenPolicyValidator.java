begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|transport
operator|.
name|TLSSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|KerberosToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SecurityContextToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SupportingToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|X509Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSDataRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|BinarySecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|KerberosSecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|PKIPathSecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|X509Security
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_comment
comment|/**  * Validate an EndorsingSupportingToken policy.   */
end_comment

begin_class
specifier|public
class|class
name|EndorsingTokenPolicyValidator
extends|extends
name|AbstractTokenPolicyValidator
block|{
specifier|private
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
decl_stmt|;
specifier|private
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
decl_stmt|;
specifier|private
name|Message
name|message
decl_stmt|;
specifier|private
name|Element
name|timestamp
decl_stmt|;
specifier|private
name|boolean
name|tls
decl_stmt|;
specifier|public
name|EndorsingTokenPolicyValidator
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|this
operator|.
name|results
operator|=
name|results
expr_stmt|;
name|this
operator|.
name|signedResults
operator|=
name|signedResults
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|WSSecurityEngineResult
name|result
init|=
name|WSSecurityUtil
operator|.
name|fetchActionResult
argument_list|(
name|results
argument_list|,
name|WSConstants
operator|.
name|TS
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|Timestamp
name|ts
init|=
operator|(
name|Timestamp
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_TIMESTAMP
argument_list|)
decl_stmt|;
name|timestamp
operator|=
name|ts
operator|.
name|getElement
argument_list|()
expr_stmt|;
block|}
comment|// See whether TLS is in use or not
name|TLSSessionInfo
name|tlsInfo
init|=
name|message
operator|.
name|get
argument_list|(
name|TLSSessionInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tlsInfo
operator|!=
literal|null
condition|)
block|{
name|tls
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|validatePolicy
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|endorsingAis
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|ENDORSING_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
if|if
condition|(
name|endorsingAis
operator|!=
literal|null
operator|&&
operator|!
name|endorsingAis
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|endorsingAis
control|)
block|{
name|SupportingToken
name|binding
init|=
operator|(
name|SupportingToken
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
name|SPConstants
operator|.
name|SupportTokenType
operator|.
name|SUPPORTING_TOKEN_ENDORSING
operator|!=
name|binding
operator|.
name|getTokenType
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
name|binding
operator|.
name|getTokens
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
operator|!
name|isTokenRequired
argument_list|(
name|token
argument_list|,
name|message
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|boolean
name|derived
init|=
name|token
operator|.
name|isDerivedKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|instanceof
name|KerberosToken
operator|&&
operator|!
name|processKerberosTokens
argument_list|(
name|derived
argument_list|)
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"The received token does not match the supporting token requirement"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|X509Token
operator|&&
operator|!
name|processX509Tokens
argument_list|(
name|derived
argument_list|)
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"The received token does not match the supporting token requirement"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|SecurityContextToken
operator|&&
operator|!
name|processSCTokens
argument_list|(
name|derived
argument_list|)
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"The received token does not match the supporting token requirement"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|processKerberosTokens
parameter_list|(
name|boolean
name|derived
parameter_list|)
block|{
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|results
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|BST
condition|)
block|{
name|BinarySecurity
name|binarySecurity
init|=
operator|(
name|BinarySecurity
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_BINARY_SECURITY_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|binarySecurity
operator|instanceof
name|KerberosSecurity
condition|)
block|{
if|if
condition|(
name|derived
condition|)
block|{
name|byte
index|[]
name|secret
init|=
operator|(
name|byte
index|[]
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
decl_stmt|;
name|WSSecurityEngineResult
name|dktResult
init|=
name|getMatchingDerivedKey
argument_list|(
name|secret
argument_list|)
decl_stmt|;
if|if
condition|(
name|dktResult
operator|!=
literal|null
condition|)
block|{
name|tokenResults
operator|.
name|add
argument_list|(
name|dktResult
argument_list|)
expr_stmt|;
block|}
block|}
name|tokenResults
operator|.
name|add
argument_list|(
name|wser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|tokenResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|checkEndorsed
argument_list|(
name|tokenResults
argument_list|,
name|tls
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|processX509Tokens
parameter_list|(
name|boolean
name|derived
parameter_list|)
block|{
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|results
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|BST
condition|)
block|{
name|BinarySecurity
name|binarySecurity
init|=
operator|(
name|BinarySecurity
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_BINARY_SECURITY_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|binarySecurity
operator|instanceof
name|X509Security
operator|||
name|binarySecurity
operator|instanceof
name|PKIPathSecurity
condition|)
block|{
if|if
condition|(
name|derived
condition|)
block|{
name|WSSecurityEngineResult
name|resultToStore
init|=
name|processX509DerivedTokenResult
argument_list|(
name|wser
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultToStore
operator|!=
literal|null
condition|)
block|{
name|tokenResults
operator|.
name|add
argument_list|(
name|resultToStore
argument_list|)
expr_stmt|;
block|}
block|}
name|tokenResults
operator|.
name|add
argument_list|(
name|wser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|tokenResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|checkEndorsed
argument_list|(
name|tokenResults
argument_list|,
name|tls
argument_list|)
return|;
block|}
specifier|private
name|WSSecurityEngineResult
name|processX509DerivedTokenResult
parameter_list|(
name|WSSecurityEngineResult
name|result
parameter_list|)
block|{
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATE
argument_list|)
decl_stmt|;
name|WSSecurityEngineResult
name|encrResult
init|=
name|getMatchingEncryptedKey
argument_list|(
name|cert
argument_list|)
decl_stmt|;
if|if
condition|(
name|encrResult
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|secret
init|=
operator|(
name|byte
index|[]
operator|)
name|encrResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
decl_stmt|;
name|WSSecurityEngineResult
name|dktResult
init|=
name|getMatchingDerivedKey
argument_list|(
name|secret
argument_list|)
decl_stmt|;
if|if
condition|(
name|dktResult
operator|!=
literal|null
condition|)
block|{
return|return
name|dktResult
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|processSCTokens
parameter_list|(
name|boolean
name|derived
parameter_list|)
block|{
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|results
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|SCT
condition|)
block|{
if|if
condition|(
name|derived
condition|)
block|{
name|byte
index|[]
name|secret
init|=
operator|(
name|byte
index|[]
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
decl_stmt|;
name|WSSecurityEngineResult
name|dktResult
init|=
name|getMatchingDerivedKey
argument_list|(
name|secret
argument_list|)
decl_stmt|;
if|if
condition|(
name|dktResult
operator|!=
literal|null
condition|)
block|{
name|tokenResults
operator|.
name|add
argument_list|(
name|dktResult
argument_list|)
expr_stmt|;
block|}
block|}
name|tokenResults
operator|.
name|add
argument_list|(
name|wser
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tokenResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|checkEndorsed
argument_list|(
name|tokenResults
argument_list|,
name|tls
argument_list|)
return|;
block|}
comment|/**      * Get a security result representing a Derived Key that has a secret key that      * matches the parameter.      */
specifier|private
name|WSSecurityEngineResult
name|getMatchingDerivedKey
parameter_list|(
name|byte
index|[]
name|secret
parameter_list|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|results
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|DKT
condition|)
block|{
name|byte
index|[]
name|dktSecret
init|=
operator|(
name|byte
index|[]
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|secret
argument_list|,
name|dktSecret
argument_list|)
condition|)
block|{
return|return
name|wser
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Get a security result representing an EncryptedKey that matches the parameter.      */
specifier|private
name|WSSecurityEngineResult
name|getMatchingEncryptedKey
parameter_list|(
name|X509Certificate
name|cert
parameter_list|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|results
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|ENCR
condition|)
block|{
name|X509Certificate
name|encrCert
init|=
operator|(
name|X509Certificate
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cert
operator|.
name|equals
argument_list|(
name|encrCert
argument_list|)
condition|)
block|{
return|return
name|wser
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Check the endorsing supporting token policy. If we're using the Transport Binding then      * check that the Timestamp is signed. Otherwise, check that the signature is signed.      * @param transport      * @return true if the endorsed supporting token policy is correct      */
specifier|private
name|boolean
name|checkEndorsed
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
parameter_list|,
name|boolean
name|transport
parameter_list|)
block|{
if|if
condition|(
name|transport
condition|)
block|{
return|return
name|checkTimestampIsSigned
argument_list|(
name|tokenResults
argument_list|)
return|;
block|}
return|return
name|checkSignatureIsSigned
argument_list|(
name|tokenResults
argument_list|)
return|;
block|}
comment|/**      * Return true if the Timestamp is signed by one of the token results      * @param tokenResults A list of WSSecurityEngineResults corresponding to tokens      * @return true if the Timestamp is signed      */
specifier|private
name|boolean
name|checkTimestampIsSigned
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
parameter_list|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|signedResult
range|:
name|signedResults
control|)
block|{
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|sl
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|signedResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WSDataRef
name|dataRef
range|:
name|sl
control|)
block|{
if|if
condition|(
name|timestamp
operator|==
name|dataRef
operator|.
name|getProtectedElement
argument_list|()
operator|&&
name|checkSignature
argument_list|(
name|signedResult
argument_list|,
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Return true if the Signature is itself signed by one of the token results      * @param tokenResults A list of WSSecurityEngineResults corresponding to tokens      * @return true if the Signature is itself signed      */
specifier|private
name|boolean
name|checkSignatureIsSigned
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
parameter_list|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|signedResult
range|:
name|signedResults
control|)
block|{
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|sl
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|signedResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
operator|&&
name|sl
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|WSDataRef
name|dataRef
range|:
name|sl
control|)
block|{
name|QName
name|signedQName
init|=
name|dataRef
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|WSSecurityEngine
operator|.
name|SIGNATURE
operator|.
name|equals
argument_list|(
name|signedQName
argument_list|)
operator|&&
name|checkSignature
argument_list|(
name|signedResult
argument_list|,
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Check that a WSSecurityEngineResult corresponding to a signature uses the same       * signing credential as one of the tokens.      * @param signatureResult a WSSecurityEngineResult corresponding to a signature      * @param tokenResult A list of WSSecurityEngineResults corresponding to tokens      * @return       */
specifier|private
name|boolean
name|checkSignature
parameter_list|(
name|WSSecurityEngineResult
name|signatureResult
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResult
parameter_list|)
block|{
comment|// See what was used to sign this result
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|signatureResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATE
argument_list|)
decl_stmt|;
name|byte
index|[]
name|secret
init|=
operator|(
name|byte
index|[]
operator|)
name|signatureResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
decl_stmt|;
comment|// Now see if the same credential exists in the tokenResult list
for|for
control|(
name|WSSecurityEngineResult
name|token
range|:
name|tokenResult
control|)
block|{
name|BinarySecurity
name|binarySecurity
init|=
operator|(
name|BinarySecurity
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_BINARY_SECURITY_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|binarySecurity
operator|instanceof
name|X509Security
operator|||
name|binarySecurity
operator|instanceof
name|PKIPathSecurity
condition|)
block|{
name|X509Certificate
name|foundCert
init|=
operator|(
name|X509Certificate
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundCert
operator|.
name|equals
argument_list|(
name|cert
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|byte
index|[]
name|foundSecret
init|=
operator|(
name|byte
index|[]
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundSecret
operator|!=
literal|null
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|foundSecret
argument_list|,
name|secret
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|byte
index|[]
name|derivedKey
init|=
operator|(
name|byte
index|[]
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ENCRYPTED_EPHEMERAL_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|derivedKey
operator|!=
literal|null
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|derivedKey
argument_list|,
name|secret
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

