begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|cache
operator|.
name|EHCacheReplayCacheFactory
import|;
end_import

begin_comment
comment|/**  * A factory to return an EHCacheTokenStore instance.  */
end_comment

begin_class
specifier|public
class|class
name|EHCacheTokenStoreFactory
extends|extends
name|TokenStoreFactory
block|{
specifier|public
name|TokenStore
name|newTokenStore
parameter_list|(
name|String
name|key
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|URL
name|configFileURL
init|=
name|getConfigFileURL
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|configFileURL
operator|==
literal|null
condition|)
block|{
name|String
name|defaultConfigFile
init|=
literal|"cxf-ehcache.xml"
decl_stmt|;
name|ResourceManager
name|rm
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
operator|.
name|getExtension
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|configFileURL
operator|=
name|rm
operator|.
name|resolveResource
argument_list|(
name|defaultConfigFile
argument_list|,
name|URL
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|configFileURL
operator|==
literal|null
condition|)
block|{
name|configFileURL
operator|=
name|ClassLoaderUtils
operator|.
name|getResource
argument_list|(
name|defaultConfigFile
argument_list|,
name|EHCacheReplayCacheFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configFileURL
operator|==
literal|null
condition|)
block|{
name|configFileURL
operator|=
operator|new
name|URL
argument_list|(
name|defaultConfigFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Do nothing
block|}
block|}
if|if
condition|(
name|configFileURL
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|CACHE_CONFIG_FILE
argument_list|,
name|configFileURL
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|EHCacheTokenStore
argument_list|(
name|key
argument_list|,
name|configFileURL
argument_list|)
return|;
block|}
block|}
end_class

end_unit

