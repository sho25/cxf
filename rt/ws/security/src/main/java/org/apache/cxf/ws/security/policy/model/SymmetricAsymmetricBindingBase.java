begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|SymmetricAsymmetricBindingBase
extends|extends
name|Binding
block|{
specifier|private
name|SPConstants
operator|.
name|ProtectionOrder
name|protectionOrder
init|=
name|SPConstants
operator|.
name|ProtectionOrder
operator|.
name|SignBeforeEncrypting
decl_stmt|;
specifier|private
name|boolean
name|signatureProtection
decl_stmt|;
specifier|private
name|boolean
name|tokenProtection
decl_stmt|;
specifier|private
name|boolean
name|entireHeadersAndBodySignatures
decl_stmt|;
specifier|public
name|SymmetricAsymmetricBindingBase
parameter_list|(
name|SPConstants
name|version
parameter_list|)
block|{
name|super
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return Returns the entireHeaderAndBodySignatures.      */
specifier|public
name|boolean
name|isEntireHeadersAndBodySignatures
parameter_list|()
block|{
return|return
name|entireHeadersAndBodySignatures
return|;
block|}
comment|/**      * @param entireHeaderAndBodySignatures The entireHeaderAndBodySignatures to set.      */
specifier|public
name|void
name|setEntireHeadersAndBodySignatures
parameter_list|(
name|boolean
name|entireHeaderAndBodySignatures
parameter_list|)
block|{
name|this
operator|.
name|entireHeadersAndBodySignatures
operator|=
name|entireHeaderAndBodySignatures
expr_stmt|;
block|}
comment|/**      * @return Returns the protectionOrder.      */
specifier|public
name|SPConstants
operator|.
name|ProtectionOrder
name|getProtectionOrder
parameter_list|()
block|{
return|return
name|protectionOrder
return|;
block|}
comment|/**      * @param protectionOrder The protectionOrder to set.      */
specifier|public
name|void
name|setProtectionOrder
parameter_list|(
name|SPConstants
operator|.
name|ProtectionOrder
name|protectionOrder
parameter_list|)
block|{
name|this
operator|.
name|protectionOrder
operator|=
name|protectionOrder
expr_stmt|;
block|}
comment|/**      * @return Returns the signatureProtection.      */
specifier|public
name|boolean
name|isSignatureProtection
parameter_list|()
block|{
return|return
name|signatureProtection
return|;
block|}
comment|/**      * @param signatureProtection The signatureProtection to set.      */
specifier|public
name|void
name|setSignatureProtection
parameter_list|(
name|boolean
name|signatureProtection
parameter_list|)
block|{
name|this
operator|.
name|signatureProtection
operator|=
name|signatureProtection
expr_stmt|;
block|}
comment|/**      * @return Returns the tokenProtection.      */
specifier|public
name|boolean
name|isTokenProtection
parameter_list|()
block|{
return|return
name|tokenProtection
return|;
block|}
comment|/**      * @param tokenProtection The tokenProtection to set.      */
specifier|public
name|void
name|setTokenProtection
parameter_list|(
name|boolean
name|tokenProtection
parameter_list|)
block|{
name|this
operator|.
name|tokenProtection
operator|=
name|tokenProtection
expr_stmt|;
block|}
block|}
end_class

end_unit

