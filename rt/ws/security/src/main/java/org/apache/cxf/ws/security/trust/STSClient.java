begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBindingConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|source
operator|.
name|SourceDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|EffectivePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Trust10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Trust13
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|components
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|components
operator|.
name|crypto
operator|.
name|CryptoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|conversation
operator|.
name|ConversationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|conversation
operator|.
name|dkalgo
operator|.
name|P_SHA1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|processor
operator|.
name|EncryptedDataProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|processor
operator|.
name|EncryptedKeyProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|util
operator|.
name|XmlSchemaDateFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|keys
operator|.
name|content
operator|.
name|keyvalues
operator|.
name|DSAKeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|keys
operator|.
name|content
operator|.
name|keyvalues
operator|.
name|RSAKeyValue
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|STSClient
implements|implements
name|Configurable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|STSClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bus
name|bus
decl_stmt|;
name|String
name|name
init|=
literal|"default.sts-client"
decl_stmt|;
name|Client
name|client
decl_stmt|;
name|String
name|location
decl_stmt|;
name|String
name|wsdlLocation
decl_stmt|;
name|QName
name|serviceName
decl_stmt|;
name|QName
name|endpointName
decl_stmt|;
name|Policy
name|policy
decl_stmt|;
name|String
name|soapVersion
init|=
name|SoapBindingConstants
operator|.
name|SOAP11_BINDING_ID
decl_stmt|;
name|int
name|keySize
init|=
literal|256
decl_stmt|;
name|Trust10
name|trust10
decl_stmt|;
name|Trust13
name|trust13
decl_stmt|;
name|Element
name|template
decl_stmt|;
name|AlgorithmSuite
name|algorithmSuite
decl_stmt|;
name|String
name|namespace
init|=
name|STSUtils
operator|.
name|WST_NS_05_02
decl_stmt|;
name|String
name|addressingNamespace
decl_stmt|;
name|boolean
name|isSecureConv
decl_stmt|;
name|int
name|ttl
init|=
literal|300
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|STSClient
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|String
name|getBeanName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setBeanName
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|name
operator|=
name|s
expr_stmt|;
block|}
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
specifier|public
name|void
name|setPolicy
parameter_list|(
name|Policy
name|policy
parameter_list|)
block|{
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
if|if
condition|(
name|algorithmSuite
operator|==
literal|null
condition|)
block|{
name|Iterator
name|i
init|=
name|policy
operator|.
name|getAlternatives
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|algorithmSuite
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|PolicyComponent
argument_list|>
name|p
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PolicyComponent
name|p2
range|:
name|p
control|)
block|{
if|if
condition|(
name|p2
operator|instanceof
name|Binding
condition|)
block|{
name|algorithmSuite
operator|=
operator|(
operator|(
name|Binding
operator|)
name|p2
operator|)
operator|.
name|getAlgorithmSuite
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|setPolicy
parameter_list|(
name|Element
name|policy
parameter_list|)
block|{
name|setPolicy
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyBuilder
operator|.
name|class
argument_list|)
operator|.
name|getPolicy
argument_list|(
name|policy
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSoap12
parameter_list|()
block|{
name|soapVersion
operator|=
name|SoapBindingConstants
operator|.
name|SOAP12_BINDING_ID
expr_stmt|;
block|}
specifier|public
name|void
name|setSoap11
parameter_list|()
block|{
name|soapVersion
operator|=
name|SoapBindingConstants
operator|.
name|SOAP11_BINDING_ID
expr_stmt|;
block|}
specifier|public
name|void
name|setSoap11
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
condition|)
block|{
name|setSoap11
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSoap12
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setAddressingNamespace
parameter_list|(
name|String
name|ad
parameter_list|)
block|{
name|addressingNamespace
operator|=
name|ad
expr_stmt|;
block|}
specifier|public
name|void
name|setTrust
parameter_list|(
name|Trust10
name|trust
parameter_list|)
block|{
if|if
condition|(
name|trust
operator|!=
literal|null
condition|)
block|{
name|namespace
operator|=
name|STSUtils
operator|.
name|WST_NS_05_02
expr_stmt|;
block|}
name|trust10
operator|=
name|trust
expr_stmt|;
block|}
specifier|public
name|void
name|setTrust
parameter_list|(
name|Trust13
name|trust
parameter_list|)
block|{
if|if
condition|(
name|trust
operator|!=
literal|null
condition|)
block|{
name|namespace
operator|=
name|STSUtils
operator|.
name|WST_NS_05_12
expr_stmt|;
block|}
name|trust13
operator|=
name|trust
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSecureConv
parameter_list|()
block|{
return|return
name|isSecureConv
return|;
block|}
specifier|public
name|void
name|setSecureConv
parameter_list|(
name|boolean
name|secureConv
parameter_list|)
block|{
name|this
operator|.
name|isSecureConv
operator|=
name|secureConv
expr_stmt|;
block|}
specifier|public
name|void
name|setAlgorithmSuite
parameter_list|(
name|AlgorithmSuite
name|ag
parameter_list|)
block|{
name|algorithmSuite
operator|=
name|ag
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getRequestContext
parameter_list|()
block|{
return|return
name|ctx
return|;
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|p
parameter_list|)
block|{
name|ctx
operator|.
name|putAll
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|ctx
return|;
block|}
specifier|public
name|void
name|setWsdlLocation
parameter_list|(
name|String
name|wsdl
parameter_list|)
block|{
name|wsdlLocation
operator|=
name|wsdl
expr_stmt|;
block|}
specifier|public
name|void
name|setServiceName
parameter_list|(
name|QName
name|qn
parameter_list|)
block|{
name|serviceName
operator|=
name|qn
expr_stmt|;
block|}
specifier|public
name|void
name|setServiceName
parameter_list|(
name|String
name|qn
parameter_list|)
block|{
name|serviceName
operator|=
name|QName
operator|.
name|valueOf
argument_list|(
name|qn
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setEndpointName
parameter_list|(
name|QName
name|qn
parameter_list|)
block|{
name|endpointName
operator|=
name|qn
expr_stmt|;
block|}
specifier|public
name|void
name|setEndpointName
parameter_list|(
name|String
name|qn
parameter_list|)
block|{
name|endpointName
operator|=
name|QName
operator|.
name|valueOf
argument_list|(
name|qn
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createClient
parameter_list|()
throws|throws
name|BusException
throws|,
name|EndpointException
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|bus
operator|.
name|getExtension
argument_list|(
name|Configurer
operator|.
name|class
argument_list|)
operator|.
name|configureBean
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|wsdlLocation
operator|!=
literal|null
condition|)
block|{
name|WSDLServiceFactory
name|factory
init|=
operator|new
name|WSDLServiceFactory
argument_list|(
name|bus
argument_list|,
name|wsdlLocation
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|SourceDataBinding
name|dataBinding
init|=
operator|new
name|SourceDataBinding
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setDataBinding
argument_list|(
name|dataBinding
argument_list|)
expr_stmt|;
name|Service
name|service
init|=
name|factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|service
operator|.
name|setDataBinding
argument_list|(
name|dataBinding
argument_list|)
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|service
operator|.
name|getEndpointInfo
argument_list|(
name|endpointName
argument_list|)
decl_stmt|;
name|Endpoint
name|endpoint
init|=
operator|new
name|EndpointImpl
argument_list|(
name|bus
argument_list|,
name|service
argument_list|,
name|ei
argument_list|)
decl_stmt|;
name|client
operator|=
operator|new
name|ClientImpl
argument_list|(
name|bus
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Endpoint
name|endpoint
init|=
name|STSUtils
operator|.
name|createSTSEndpoint
argument_list|(
name|bus
argument_list|,
name|namespace
argument_list|,
literal|null
argument_list|,
name|location
argument_list|,
name|soapVersion
argument_list|,
name|policy
argument_list|,
name|endpointName
argument_list|)
decl_stmt|;
name|client
operator|=
operator|new
name|ClientImpl
argument_list|(
name|bus
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|BindingOperationInfo
name|findOperation
parameter_list|(
name|String
name|suffix
parameter_list|)
block|{
name|BindingInfo
name|bi
init|=
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|getBindingInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|bi
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|SoapOperationInfo
name|soi
init|=
name|boi
operator|.
name|getExtensor
argument_list|(
name|SoapOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|soi
operator|!=
literal|null
operator|&&
name|soi
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
operator|&&
name|soi
operator|.
name|getAction
argument_list|()
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
condition|)
block|{
name|PolicyEngine
name|pe
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyEngine
operator|.
name|class
argument_list|)
decl_stmt|;
name|Conduit
name|conduit
init|=
name|client
operator|.
name|getConduit
argument_list|()
decl_stmt|;
name|EffectivePolicy
name|effectivePolicy
init|=
name|pe
operator|.
name|getEffectiveClientRequestPolicy
argument_list|(
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
argument_list|,
name|boi
argument_list|,
name|conduit
argument_list|)
decl_stmt|;
name|setPolicy
argument_list|(
name|effectivePolicy
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|boi
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|SecurityToken
name|requestSecurityToken
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|requestSecurityToken
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|public
name|SecurityToken
name|requestSecurityToken
parameter_list|(
name|String
name|appliesTo
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|action
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isSecureConv
condition|)
block|{
name|action
operator|=
name|namespace
operator|+
literal|"/RST/SCT"
expr_stmt|;
block|}
return|return
name|requestSecurityToken
argument_list|(
name|appliesTo
argument_list|,
name|action
argument_list|,
literal|"/Issue"
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|SecurityToken
name|requestSecurityToken
parameter_list|(
name|String
name|appliesTo
parameter_list|,
name|String
name|action
parameter_list|,
name|String
name|requestType
parameter_list|,
name|SecurityToken
name|target
parameter_list|)
throws|throws
name|Exception
block|{
name|createClient
argument_list|()
expr_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|findOperation
argument_list|(
literal|"/RST/Issue"
argument_list|)
decl_stmt|;
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|putAll
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SoapBindingConstants
operator|.
name|SOAP_ACTION
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|boolean
name|wroteKeySize
init|=
literal|false
decl_stmt|;
name|String
name|keyType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|template
operator|!=
literal|null
condition|)
block|{
name|Element
name|tl
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|template
argument_list|)
decl_stmt|;
while|while
condition|(
name|tl
operator|!=
literal|null
condition|)
block|{
name|StaxUtils
operator|.
name|copy
argument_list|(
name|tl
argument_list|,
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"KeyType"
operator|.
name|equals
argument_list|(
name|tl
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|keyType
operator|=
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|tl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"KeySize"
operator|.
name|equals
argument_list|(
name|tl
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|wroteKeySize
operator|=
literal|true
expr_stmt|;
name|keySize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|tl
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tl
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|tl
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
name|requestType
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|addAppliesTo
argument_list|(
name|writer
argument_list|,
name|appliesTo
argument_list|)
expr_stmt|;
name|keyType
operator|=
name|writeKeyType
argument_list|(
name|writer
argument_list|,
name|keyType
argument_list|)
expr_stmt|;
name|byte
index|[]
name|requestorEntropy
init|=
literal|null
decl_stmt|;
name|X509Certificate
name|cert
init|=
literal|null
decl_stmt|;
name|Crypto
name|crypto
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keyType
operator|.
name|endsWith
argument_list|(
literal|"SymmetricKey"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wroteKeySize
operator|&&
operator|!
name|isSecureConv
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"KeySize"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|keySize
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|trust10
operator|!=
literal|null
operator|&&
name|trust10
operator|.
name|isRequireClientEntropy
argument_list|()
operator|)
operator|||
operator|(
name|trust13
operator|!=
literal|null
operator|&&
name|trust13
operator|.
name|isRequireClientEntropy
argument_list|()
operator|)
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"Entropy"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"BinarySecret"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"Type"
argument_list|,
name|namespace
operator|+
literal|"/Nonce"
argument_list|)
expr_stmt|;
name|requestorEntropy
operator|=
name|WSSecurityUtil
operator|.
name|generateNonce
argument_list|(
name|algorithmSuite
operator|.
name|getMaximumSymmetricKeyLength
argument_list|()
operator|/
literal|8
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|Base64
operator|.
name|encode
argument_list|(
name|requestorEntropy
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"ComputedKeyAlgorithm"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/CK/PSHA1"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|keyType
operator|.
name|endsWith
argument_list|(
literal|"PublicKey"
argument_list|)
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"UseKey"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"http://www.w3.org/2000/09/xmldsig#"
argument_list|,
literal|"KeyInfo"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"http://www.w3.org/2000/09/xmldsig#"
argument_list|,
literal|"KeyValue"
argument_list|)
expr_stmt|;
name|crypto
operator|=
name|createCrypto
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cert
operator|=
name|getCert
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
name|PublicKey
name|key
init|=
name|cert
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|String
name|pubKeyAlgo
init|=
name|key
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"DSA"
operator|.
name|equalsIgnoreCase
argument_list|(
name|pubKeyAlgo
argument_list|)
condition|)
block|{
name|DSAKeyValue
name|dsaKeyValue
init|=
operator|new
name|DSAKeyValue
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|writer
operator|.
name|getCurrentNode
argument_list|()
operator|.
name|appendChild
argument_list|(
name|dsaKeyValue
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"RSA"
operator|.
name|equalsIgnoreCase
argument_list|(
name|pubKeyAlgo
argument_list|)
condition|)
block|{
name|RSAKeyValue
name|rsaKeyValue
init|=
operator|new
name|RSAKeyValue
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|writer
operator|.
name|getCurrentNode
argument_list|()
operator|.
name|appendChild
argument_list|(
name|rsaKeyValue
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RenewTarget"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|Element
name|el
init|=
name|target
operator|.
name|getUnattachedReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|el
operator|==
literal|null
condition|)
block|{
name|el
operator|=
name|target
operator|.
name|getAttachedReference
argument_list|()
expr_stmt|;
block|}
name|StaxUtils
operator|.
name|copy
argument_list|(
name|el
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|Object
name|obj
index|[]
init|=
name|client
operator|.
name|invoke
argument_list|(
name|boi
argument_list|,
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SecurityToken
name|token
init|=
name|createSecurityToken
argument_list|(
call|(
name|Document
call|)
argument_list|(
operator|(
name|DOMSource
operator|)
name|obj
index|[
literal|0
index|]
argument_list|)
operator|.
name|getNode
argument_list|()
argument_list|,
name|requestorEntropy
argument_list|)
decl_stmt|;
if|if
condition|(
name|cert
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|setX509Certificate
argument_list|(
name|cert
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
specifier|public
name|void
name|renewSecurityToken
parameter_list|(
name|SecurityToken
name|tok
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|action
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isSecureConv
condition|)
block|{
name|action
operator|=
name|namespace
operator|+
literal|"/RST/SCT/Renew"
expr_stmt|;
block|}
name|requestSecurityToken
argument_list|(
name|tok
operator|.
name|getIssuerAddress
argument_list|()
argument_list|,
name|action
argument_list|,
literal|"/Renew"
argument_list|,
name|tok
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|writeKeyType
parameter_list|(
name|W3CDOMStreamWriter
name|writer
parameter_list|,
name|String
name|keyType
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|isSecureConv
condition|)
block|{
name|addLifetime
argument_list|(
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyType
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|STSUtils
operator|.
name|getTokenTypeSCT
argument_list|(
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|keyType
operator|=
name|namespace
operator|+
literal|"/SymmetricKey"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|keyType
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"KeyType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/SymmetricKey"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|keyType
operator|=
name|namespace
operator|+
literal|"/SymmetricKey"
expr_stmt|;
block|}
return|return
name|keyType
return|;
block|}
specifier|private
name|X509Certificate
name|getCert
parameter_list|(
name|Crypto
name|crypto
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|alias
init|=
operator|(
name|String
operator|)
name|getProperty
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_USERNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|==
literal|null
condition|)
block|{
name|alias
operator|=
name|crypto
operator|.
name|getDefaultX509Alias
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|alias
operator|==
literal|null
condition|)
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|as
init|=
name|crypto
operator|.
name|getKeyStore
argument_list|()
operator|.
name|aliases
argument_list|()
decl_stmt|;
if|if
condition|(
name|as
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|alias
operator|=
name|as
operator|.
name|nextElement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|as
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
literal|"No alias specified for retrieving PublicKey"
argument_list|,
name|LOG
argument_list|)
throw|;
block|}
block|}
return|return
name|crypto
operator|.
name|getCertificates
argument_list|(
name|alias
argument_list|)
index|[
literal|0
index|]
return|;
block|}
specifier|private
name|void
name|addLifetime
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|Date
name|creationTime
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Date
name|expirationTime
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|expirationTime
operator|.
name|setTime
argument_list|(
name|creationTime
operator|.
name|getTime
argument_list|()
operator|+
operator|(
name|ttl
operator|*
literal|1000
operator|)
argument_list|)
expr_stmt|;
name|XmlSchemaDateFormat
name|fmt
init|=
operator|new
name|XmlSchemaDateFormat
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"Lifetime"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wsu"
argument_list|,
literal|"Created"
argument_list|,
name|WSConstants
operator|.
name|WSU_NS
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|fmt
operator|.
name|format
argument_list|(
name|creationTime
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wsu"
argument_list|,
literal|"Expires"
argument_list|,
name|WSConstants
operator|.
name|WSU_NS
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|fmt
operator|.
name|format
argument_list|(
name|expirationTime
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addAppliesTo
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|,
name|String
name|appliesTo
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|appliesTo
operator|!=
literal|null
operator|&&
name|addressingNamespace
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wsp"
argument_list|,
literal|"AppliesTo"
argument_list|,
literal|"http://schemas.xmlsoap.org/ws/2004/09/policy"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wsa"
argument_list|,
literal|"EndpointReference"
argument_list|,
name|addressingNamespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wsa"
argument_list|,
literal|"Address"
argument_list|,
name|addressingNamespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|appliesTo
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|SecurityToken
name|createSecurityToken
parameter_list|(
name|Document
name|document
parameter_list|,
name|byte
index|[]
name|requestorEntropy
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Element
name|el
init|=
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"RequestSecurityTokenResponseCollection"
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|el
operator|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"RequestSecurityTokenResponse"
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
literal|"Unexpected element "
operator|+
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|LOG
argument_list|)
throw|;
block|}
name|el
operator|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|Element
name|rst
init|=
literal|null
decl_stmt|;
name|Element
name|rar
init|=
literal|null
decl_stmt|;
name|Element
name|rur
init|=
literal|null
decl_stmt|;
name|Element
name|rpt
init|=
literal|null
decl_stmt|;
name|Element
name|lte
init|=
literal|null
decl_stmt|;
name|Element
name|entropy
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
name|String
name|ln
init|=
name|el
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespace
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"Lifetime"
operator|.
name|equals
argument_list|(
name|ln
argument_list|)
condition|)
block|{
name|lte
operator|=
name|el
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"RequestedSecurityToken"
operator|.
name|equals
argument_list|(
name|ln
argument_list|)
condition|)
block|{
name|rst
operator|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"RequestedAttachedReference"
operator|.
name|equals
argument_list|(
name|ln
argument_list|)
condition|)
block|{
name|rar
operator|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"RequestedUnattachedReference"
operator|.
name|equals
argument_list|(
name|ln
argument_list|)
condition|)
block|{
name|rur
operator|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"RequestedProofToken"
operator|.
name|equals
argument_list|(
name|ln
argument_list|)
condition|)
block|{
name|rpt
operator|=
name|el
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Entropy"
operator|.
name|equals
argument_list|(
name|ln
argument_list|)
condition|)
block|{
name|entropy
operator|=
name|el
expr_stmt|;
block|}
block|}
name|el
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
name|Element
name|rstDec
init|=
name|rst
decl_stmt|;
try|try
block|{
name|rstDec
operator|=
name|decrypt
argument_list|(
name|rst
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|TrustException
argument_list|(
name|e1
argument_list|)
throw|;
block|}
name|String
name|id
init|=
name|findID
argument_list|(
name|rar
argument_list|,
name|rur
argument_list|,
name|rstDec
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TrustException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"NO_ID"
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
name|SecurityToken
name|token
init|=
operator|new
name|SecurityToken
argument_list|(
name|id
argument_list|,
name|rstDec
argument_list|,
name|lte
argument_list|)
decl_stmt|;
name|token
operator|.
name|setAttachedReference
argument_list|(
name|rar
argument_list|)
expr_stmt|;
name|token
operator|.
name|setUnattachedReference
argument_list|(
name|rur
argument_list|)
expr_stmt|;
name|token
operator|.
name|setIssuerAddress
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|byte
index|[]
name|secret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rpt
operator|!=
literal|null
condition|)
block|{
name|Element
name|child
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|rpt
argument_list|)
decl_stmt|;
name|QName
name|childQname
init|=
name|DOMUtils
operator|.
name|getElementQName
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|childQname
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
literal|"BinarySecret"
argument_list|)
argument_list|)
condition|)
block|{
comment|//First check for the binary secret
name|String
name|b64Secret
init|=
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|secret
operator|=
name|Base64
operator|.
name|decode
argument_list|(
name|b64Secret
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childQname
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|WSConstants
operator|.
name|ENC_KEY_LN
argument_list|)
argument_list|)
condition|)
block|{
try|try
block|{
name|EncryptedKeyProcessor
name|processor
init|=
operator|new
name|EncryptedKeyProcessor
argument_list|()
decl_stmt|;
name|processor
operator|.
name|handleToken
argument_list|(
name|child
argument_list|,
literal|null
argument_list|,
name|createCrypto
argument_list|(
literal|true
argument_list|)
argument_list|,
name|createHandler
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|Vector
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|secret
operator|=
name|processor
operator|.
name|getDecryptedBytes
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TrustException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"ENCRYPTED_KEY_ERROR"
argument_list|,
name|LOG
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|childQname
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
literal|"ComputedKey"
argument_list|)
argument_list|)
condition|)
block|{
comment|//Handle the computed key
name|Element
name|binSecElem
init|=
name|entropy
operator|==
literal|null
condition|?
literal|null
else|:
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|entropy
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|binSecElem
operator|==
literal|null
condition|?
literal|null
else|:
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|binSecElem
argument_list|)
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|content
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|byte
index|[]
name|serviceEntr
init|=
name|Base64
operator|.
name|decode
argument_list|(
name|content
argument_list|)
decl_stmt|;
comment|//Right now we only use PSHA1 as the computed key algo
name|P_SHA1
name|psha1
init|=
operator|new
name|P_SHA1
argument_list|()
decl_stmt|;
name|int
name|length
init|=
operator|(
name|keySize
operator|>
literal|0
operator|)
condition|?
name|keySize
else|:
name|algorithmSuite
operator|.
name|getMaximumSymmetricKeyLength
argument_list|()
decl_stmt|;
try|try
block|{
name|secret
operator|=
name|psha1
operator|.
name|createKey
argument_list|(
name|requestorEntropy
argument_list|,
name|serviceEntr
argument_list|,
literal|0
argument_list|,
name|length
operator|/
literal|8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConversationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TrustException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"DERIVED_KEY_ERROR"
argument_list|,
name|LOG
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|//Service entropy missing
throw|throw
operator|new
name|TrustException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"NO_ENTROPY"
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|requestorEntropy
operator|!=
literal|null
condition|)
block|{
comment|//Use requester entropy as the key
name|secret
operator|=
name|requestorEntropy
expr_stmt|;
block|}
name|token
operator|.
name|setSecret
argument_list|(
name|secret
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
specifier|protected
name|Element
name|decrypt
parameter_list|(
name|Element
name|firstElement
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|"EncryptedData"
operator|.
name|equals
argument_list|(
name|firstElement
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
literal|"http://www.w3.org/2001/04/xmlenc#"
operator|.
name|equals
argument_list|(
name|firstElement
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|Node
name|parent
init|=
name|firstElement
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
name|Node
name|prev
init|=
name|firstElement
operator|.
name|getPreviousSibling
argument_list|()
decl_stmt|;
comment|//encrypted even more.  WCF seems to do this periodically
name|EncryptedDataProcessor
name|processor
init|=
operator|new
name|EncryptedDataProcessor
argument_list|()
decl_stmt|;
name|processor
operator|.
name|handleToken
argument_list|(
name|firstElement
argument_list|,
literal|null
argument_list|,
name|createCrypto
argument_list|(
literal|true
argument_list|)
argument_list|,
name|createHandler
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|Vector
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
block|{
name|firstElement
operator|=
operator|(
name|Element
operator|)
name|parent
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|firstElement
operator|=
operator|(
name|Element
operator|)
name|prev
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|firstElement
return|;
block|}
specifier|private
name|CallbackHandler
name|createHandler
parameter_list|()
block|{
name|Object
name|o
init|=
name|getProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|o
operator|=
name|cls
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|(
name|CallbackHandler
operator|)
name|o
return|;
block|}
specifier|private
name|Object
name|getProperty
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|Object
name|o
init|=
name|ctx
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getProperty
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|getProperty
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|get
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
specifier|private
name|Crypto
name|createCrypto
parameter_list|(
name|boolean
name|decrypt
parameter_list|)
throws|throws
name|IOException
block|{
name|WSSConfig
operator|.
name|getDefaultWSConfig
argument_list|()
expr_stmt|;
name|Crypto
name|crypto
init|=
operator|(
name|Crypto
operator|)
name|getProperty
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_CRYPTO
operator|+
operator|(
name|decrypt
condition|?
literal|".decrypt"
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|crypto
operator|!=
literal|null
condition|)
block|{
return|return
name|crypto
return|;
block|}
name|Object
name|o
init|=
name|getProperty
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_PROPERTIES
operator|+
operator|(
name|decrypt
condition|?
literal|".decrypt"
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Properties
condition|)
block|{
name|properties
operator|=
operator|(
name|Properties
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|ResourceManager
name|rm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|rm
operator|.
name|resolveResource
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|URL
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|url
operator|=
name|ClassLoaderUtils
operator|.
name|getResource
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Fault
argument_list|(
literal|"Could not find properties file "
operator|+
name|url
argument_list|,
name|LOG
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|URL
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
operator|(
operator|(
name|URL
operator|)
name|o
operator|)
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
return|return
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|properties
argument_list|)
return|;
block|}
if|if
condition|(
name|decrypt
condition|)
block|{
return|return
name|createCrypto
argument_list|(
literal|false
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|findID
parameter_list|(
name|Element
name|rar
parameter_list|,
name|Element
name|rur
parameter_list|,
name|Element
name|rst
parameter_list|)
block|{
name|String
name|id
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rst
operator|!=
literal|null
condition|)
block|{
name|id
operator|=
name|this
operator|.
name|getIDFromSTR
argument_list|(
name|rst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
operator|&&
name|rar
operator|!=
literal|null
condition|)
block|{
name|id
operator|=
name|this
operator|.
name|getIDFromSTR
argument_list|(
name|rar
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
operator|&&
name|rur
operator|!=
literal|null
condition|)
block|{
name|id
operator|=
name|this
operator|.
name|getIDFromSTR
argument_list|(
name|rur
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|rst
operator|.
name|getAttributeNS
argument_list|(
name|WSConstants
operator|.
name|WSU_NS
argument_list|,
literal|"Id"
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
specifier|private
name|String
name|getIDFromSTR
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
name|Element
name|child
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|el
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|QName
name|elName
init|=
name|DOMUtils
operator|.
name|getElementQName
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|elName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|SIG_NS
argument_list|,
literal|"KeyInfo"
argument_list|)
argument_list|)
operator|||
name|elName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|WSSE_NS
argument_list|,
literal|"KeyIdentifier"
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|child
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|elName
operator|.
name|equals
argument_list|(
name|Reference
operator|.
name|TOKEN
argument_list|)
condition|)
block|{
return|return
name|child
operator|.
name|getAttribute
argument_list|(
literal|"URI"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|elName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|STSUtils
operator|.
name|SCT_NS_05_02
argument_list|,
literal|"Identifier"
argument_list|)
argument_list|)
operator|||
name|elName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|STSUtils
operator|.
name|SCT_NS_05_12
argument_list|,
literal|"Identifier"
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|child
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setTemplate
parameter_list|(
name|Element
name|rstTemplate
parameter_list|)
block|{
name|template
operator|=
name|rstTemplate
expr_stmt|;
block|}
block|}
end_class

end_unit

