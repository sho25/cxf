begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|transport
operator|.
name|TLSSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|WSSecurityEventConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|SecurityEvent
import|;
end_import

begin_comment
comment|/**  * This interceptor handles parsing the StaX WS-Security results (events) + marks the   * corresponding CXF AssertionInfos as asserted accordingly. WSS4J 2.0 (StAX) takes care of all  * policy validation, so we are just asserting the appropriate AssertionInfo objects in CXF to   * make sure that policy validation passes.  */
end_comment

begin_class
specifier|public
class|class
name|PolicyStaxActionInInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|SoapMessage
argument_list|>
block|{
specifier|public
name|PolicyStaxActionInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_PROTOCOL
argument_list|)
expr_stmt|;
name|this
operator|.
name|getBefore
argument_list|()
operator|.
name|add
argument_list|(
name|StaxSecurityContextInInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|soapMessage
parameter_list|)
throws|throws
name|Fault
block|{
name|AssertionInfoMap
name|aim
init|=
name|soapMessage
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|List
argument_list|<
name|SecurityEvent
argument_list|>
name|incomingSecurityEventList
init|=
operator|(
name|List
argument_list|<
name|SecurityEvent
argument_list|>
operator|)
name|soapMessage
operator|.
name|get
argument_list|(
name|SecurityEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".in"
argument_list|)
decl_stmt|;
if|if
condition|(
name|aim
operator|==
literal|null
operator|||
name|incomingSecurityEventList
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|verifyTokens
argument_list|(
name|aim
argument_list|,
name|incomingSecurityEventList
argument_list|)
expr_stmt|;
name|verifyPartsAndElements
argument_list|(
name|aim
argument_list|,
name|incomingSecurityEventList
argument_list|,
name|soapMessage
argument_list|)
expr_stmt|;
name|verifyBindings
argument_list|(
name|aim
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyPartsAndElements
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|List
argument_list|<
name|SecurityEvent
argument_list|>
name|incomingSecurityEventList
parameter_list|,
name|SoapMessage
name|soapMessage
parameter_list|)
block|{
name|TLSSessionInfo
name|tlsInfo
init|=
name|soapMessage
operator|.
name|get
argument_list|(
name|TLSSessionInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tlsInfo
operator|!=
literal|null
condition|)
block|{
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_PARTS
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_ELEMENTS
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ENCRYPTED_PARTS
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|CONTENT_ENCRYPTED_ELEMENTS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|SecurityEvent
name|event
range|:
name|incomingSecurityEventList
control|)
block|{
if|if
condition|(
name|WSSecurityEventConstants
operator|.
name|SignedPart
operator|==
name|event
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_PARTS
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSSecurityEventConstants
operator|.
name|SignedElement
operator|==
name|event
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_ELEMENTS
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSSecurityEventConstants
operator|.
name|EncryptedPart
operator|==
name|event
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ENCRYPTED_PARTS
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSSecurityEventConstants
operator|.
name|EncryptedElement
operator|==
name|event
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSSecurityEventConstants
operator|.
name|ContentEncrypted
operator|==
name|event
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|CONTENT_ENCRYPTED_ELEMENTS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|SecurityEvent
name|event
range|:
name|incomingSecurityEventList
control|)
block|{
if|if
condition|(
name|WSSecurityEventConstants
operator|.
name|RequiredPart
operator|==
name|event
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|REQUIRED_PARTS
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSSecurityEventConstants
operator|.
name|RequiredElement
operator|==
name|event
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|REQUIRED_ELEMENTS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|verifyTokens
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|List
argument_list|<
name|SecurityEvent
argument_list|>
name|incomingSecurityEventList
parameter_list|)
block|{
for|for
control|(
name|SecurityEvent
name|event
range|:
name|incomingSecurityEventList
control|)
block|{
if|if
condition|(
name|WSSecurityEventConstants
operator|.
name|Timestamp
operator|==
name|event
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
literal|"Timestamp"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSSecurityEventConstants
operator|.
name|UsernameToken
operator|==
name|event
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|USERNAME_TOKEN
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|USERNAME_TOKEN10
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|USERNAME_TOKEN11
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|HASH_PASSWORD
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|NO_PASSWORD
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|NONCE
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|CREATED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSSecurityEventConstants
operator|.
name|X509Token
operator|==
name|event
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|X509_TOKEN
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS_X509_PKCS7_TOKEN10
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS_X509_PKCS7_TOKEN11
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS_X509_PKI_PATH_V1_TOKEN10
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS_X509_PKI_PATH_V1_TOKEN11
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS_X509_V1_TOKEN10
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS_X509_V1_TOKEN11
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS_X509_V3_TOKEN10
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS_X509_V3_TOKEN11
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSSecurityEventConstants
operator|.
name|SamlToken
operator|==
name|event
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SAML_TOKEN
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
literal|"WssSamlV11Token10"
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
literal|"WssSamlV11Token11"
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
literal|"WssSamlV20Token11"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSSecurityEventConstants
operator|.
name|SecurityContextToken
operator|==
name|event
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SECURITY_CONTEXT_TOKEN
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_EXTERNAL_URI_REFERENCE
argument_list|)
expr_stmt|;
block|}
block|}
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ENDORSING_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_ENDORSING_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_ENDORSING_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyBindings
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SYMMETRIC_BINDING
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ASYMMETRIC_BINDING
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|TRANSPORT_BINDING
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|PROTECTION_TOKEN
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|TRANSPORT_TOKEN
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|INITIATOR_ENCRYPTION_TOKEN
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|INITIATOR_SIGNATURE_TOKEN
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|INITIATOR_TOKEN
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|RECIPIENT_ENCRYPTION_TOKEN
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|RECIPIENT_SIGNATURE_TOKEN
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|RECIPIENT_TOKEN
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ONLY_SIGN_ENTIRE_HEADERS_AND_BODY
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|PROTECT_TOKENS
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|INCLUDE_TIMESTAMP
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ENCRYPT_SIGNATURE
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGN_BEFORE_ENCRYPTING
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ENCRYPT_BEFORE_SIGNING
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|LAYOUT
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|LAYOUT_LAX
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|LAYOUT_LAX_TIMESTAMP_FIRST
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|LAYOUT_LAX_TIMESTAMP_LAST
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|LAYOUT_STRICT
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_DERIVED_KEYS
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_SIGNATURE_CONFIRMATION
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ALGORITHM_SUITE
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|AlgorithmSuite
operator|.
name|getSupportedAlgorithmSuiteNames
argument_list|()
control|)
block|{
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_INTERNAL_REFERENCE
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_EXTERNAL_REFERENCE
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_THUMBPRINT_REFERENCE
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_EMBEDDED_TOKEN_REFERENCE
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_ISSUER_SERIAL_REFERENCE
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_KEY_IDENTIFIER_REFERENCE
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_ISSUER_SERIAL
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_EXTERNAL_URI
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_EMBEDDED_TOKEN
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_THUMBPRINT
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_ENCRYPTED_KEY
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|KEY_VALUE_TOKEN
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|RSA_KEY_VALUE
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS10
argument_list|)
expr_stmt|;
name|assertAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS11
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertAllAssertionsByLocalname
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|String
name|localname
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|sp11Ais
init|=
name|aim
operator|.
name|get
argument_list|(
operator|new
name|QName
argument_list|(
name|SP11Constants
operator|.
name|SP_NS
argument_list|,
name|localname
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sp11Ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|sp11Ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|sp12Ais
init|=
name|aim
operator|.
name|get
argument_list|(
operator|new
name|QName
argument_list|(
name|SP12Constants
operator|.
name|SP_NS
argument_list|,
name|localname
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sp12Ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|sp12Ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

