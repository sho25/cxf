begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP13Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
operator|.
name|AlgorithmSuiteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|OperationSecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|WSSecurityEventConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|SecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|SecurityEventConstants
operator|.
name|Event
import|;
end_import

begin_comment
comment|/**  * This interceptor marks the CXF AssertionInfos as asserted. WSS4J 2.0 (StAX) takes care of all  * policy validation, so we are just asserting the appropriate AssertionInfo objects in CXF to   * make sure that policy validation passes.  */
end_comment

begin_class
specifier|public
class|class
name|PolicyStaxActionInInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|SoapMessage
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|PolicyStaxActionInInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|PolicyStaxActionInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_PROTOCOL
argument_list|)
expr_stmt|;
name|this
operator|.
name|getBefore
argument_list|()
operator|.
name|add
argument_list|(
name|StaxSecurityContextInInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|soapMessage
parameter_list|)
throws|throws
name|Fault
block|{
name|AssertionInfoMap
name|aim
init|=
name|soapMessage
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|List
argument_list|<
name|SecurityEvent
argument_list|>
name|incomingSecurityEventList
init|=
operator|(
name|List
argument_list|<
name|SecurityEvent
argument_list|>
operator|)
name|soapMessage
operator|.
name|get
argument_list|(
name|SecurityEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".in"
argument_list|)
decl_stmt|;
if|if
condition|(
name|aim
operator|==
literal|null
operator|||
name|incomingSecurityEventList
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// First check for a SOAP Fault with no security header if we are the client
comment|// In this case don't blanket assert security policies
if|if
condition|(
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|soapMessage
argument_list|)
operator|&&
name|incomingSecurityEventList
operator|.
name|contains
argument_list|(
name|WSSecurityEventConstants
operator|.
name|NoSecurity
argument_list|)
condition|)
block|{
name|OperationSecurityEvent
name|securityEvent
init|=
operator|(
name|OperationSecurityEvent
operator|)
name|findEvent
argument_list|(
name|WSSecurityEventConstants
operator|.
name|Operation
argument_list|,
name|incomingSecurityEventList
argument_list|)
decl_stmt|;
if|if
condition|(
name|securityEvent
operator|!=
literal|null
operator|&&
name|soapMessage
operator|.
name|getVersion
argument_list|()
operator|.
name|getFault
argument_list|()
operator|.
name|equals
argument_list|(
name|securityEvent
operator|.
name|getOperation
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Request does not contain Security header, but it's a fault."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|assertAllSecurityAssertions
argument_list|(
name|aim
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SecurityEvent
name|findEvent
parameter_list|(
name|Event
name|event
parameter_list|,
name|List
argument_list|<
name|SecurityEvent
argument_list|>
name|incomingSecurityEventList
parameter_list|)
block|{
for|for
control|(
name|SecurityEvent
name|incomingEvent
range|:
name|incomingSecurityEventList
control|)
block|{
if|if
condition|(
name|event
operator|==
name|incomingEvent
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
return|return
name|incomingEvent
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|assertAllSecurityAssertions
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|QName
argument_list|,
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|aim
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|namespace
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|SP11Constants
operator|.
name|SP_NS
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
operator|||
name|SP12Constants
operator|.
name|SP_NS
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
operator|||
name|SP13Constants
operator|.
name|SP_NS
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
operator|&&
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|SPConstants
operator|.
name|ALGORITHM_SUITE
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|assertAlgorithmSuites
argument_list|(
name|ais
argument_list|,
name|aim
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|// Handle these separately for custom AlgorithmSuites
specifier|private
name|void
name|assertAlgorithmSuites
parameter_list|(
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AlgorithmSuite
name|algorithmSuite
init|=
operator|(
name|AlgorithmSuite
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|AlgorithmSuiteType
name|algorithmSuiteType
init|=
name|algorithmSuite
operator|.
name|getAlgorithmSuiteType
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|algorithmSuiteType
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
operator|&&
operator|!
name|namespace
operator|.
name|equals
argument_list|(
name|algorithmSuite
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|algAis
init|=
name|aim
operator|.
name|get
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|algorithmSuiteType
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|algAis
operator|!=
literal|null
operator|&&
operator|!
name|algAis
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|algAi
range|:
name|algAis
control|)
block|{
name|algAi
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

