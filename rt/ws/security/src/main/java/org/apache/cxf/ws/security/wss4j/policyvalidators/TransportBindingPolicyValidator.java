begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|transport
operator|.
name|TLSSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|TransportBinding
import|;
end_import

begin_comment
comment|/**  * Validate a TransportBinding policy.  */
end_comment

begin_class
specifier|public
class|class
name|TransportBindingPolicyValidator
extends|extends
name|AbstractBindingPolicyValidator
block|{
specifier|public
name|boolean
name|validatePolicy
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|Message
name|message
parameter_list|,
name|Element
name|soapBody
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|encryptedResults
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|TRANSPORT_BINDING
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parsePolicies
argument_list|(
name|aim
argument_list|,
name|ais
argument_list|,
name|message
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
expr_stmt|;
comment|// We don't need to check these policies for the Transport binding
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP11Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP11Constants
operator|.
name|SIGNED_PARTS
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|parsePolicies
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
parameter_list|,
name|Message
name|message
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
parameter_list|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|TransportBinding
name|binding
init|=
operator|(
name|TransportBinding
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Check that TLS is in use if we are not the requestor
name|boolean
name|initiator
init|=
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|TLSSessionInfo
name|tlsInfo
init|=
name|message
operator|.
name|get
argument_list|(
name|TLSSessionInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|initiator
operator|&&
name|tlsInfo
operator|==
literal|null
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"TLS is not enabled"
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// HttpsToken is validated by the HttpsTokenInterceptorProvider
if|if
condition|(
name|binding
operator|.
name|getTransportToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|binding
operator|.
name|getTransportToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check the IncludeTimestamp
if|if
condition|(
operator|!
name|validateTimestamp
argument_list|(
name|binding
operator|.
name|isIncludeTimestamp
argument_list|()
argument_list|,
literal|true
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|,
name|message
argument_list|)
condition|)
block|{
name|String
name|error
init|=
literal|"Received Timestamp does not match the requirements"
decl_stmt|;
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|error
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|INCLUDE_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

