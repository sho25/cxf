begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|utils
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Trust10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Trust13
import|;
end_import

begin_comment
comment|/**  * A Helper utility class to cache STS token and issue or renew the token from STS.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|STSTokenRetriever
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|STSTokenRetriever
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ASSOCIATED_TOKEN
init|=
name|STSTokenRetriever
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
literal|"Associated_Token"
decl_stmt|;
specifier|private
name|STSTokenRetriever
parameter_list|()
block|{     }
specifier|public
specifier|static
name|SecurityToken
name|getToken
parameter_list|(
name|Message
name|message
parameter_list|,
name|TokenRequestParams
name|params
parameter_list|)
block|{
name|SecurityToken
name|tok
init|=
name|retrieveCachedToken
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|tok
operator|==
literal|null
condition|)
block|{
name|tok
operator|=
name|issueToken
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tok
operator|=
name|renewToken
argument_list|(
name|message
argument_list|,
name|tok
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|boolean
name|cacheIssuedToken
init|=
name|SecurityUtils
operator|.
name|getSecurityPropertyBoolean
argument_list|(
name|SecurityConstants
operator|.
name|CACHE_ISSUED_TOKEN_IN_ENDPOINT
argument_list|,
name|message
argument_list|,
literal|true
argument_list|)
operator|&&
operator|!
name|isOneTimeUse
argument_list|(
name|tok
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheIssuedToken
condition|)
block|{
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|,
name|tok
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|,
name|tok
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ELEMENT
argument_list|,
name|tok
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|,
name|tok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|,
name|tok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|,
name|tok
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|,
name|tok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ELEMENT
argument_list|,
name|tok
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// ?
name|TokenStoreUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
operator|.
name|add
argument_list|(
name|tok
argument_list|)
expr_stmt|;
return|return
name|tok
return|;
block|}
specifier|private
specifier|static
name|SecurityToken
name|retrieveCachedToken
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|boolean
name|cacheIssuedToken
init|=
name|SecurityUtils
operator|.
name|getSecurityPropertyBoolean
argument_list|(
name|SecurityConstants
operator|.
name|CACHE_ISSUED_TOKEN_IN_ENDPOINT
argument_list|,
name|message
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SecurityToken
name|tok
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cacheIssuedToken
condition|)
block|{
name|tok
operator|=
operator|(
name|SecurityToken
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
if|if
condition|(
name|tok
operator|==
literal|null
condition|)
block|{
name|String
name|tokId
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokId
operator|!=
literal|null
condition|)
block|{
name|tok
operator|=
name|TokenStoreUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
operator|.
name|getToken
argument_list|(
name|tokId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|tok
operator|=
operator|(
name|SecurityToken
operator|)
name|message
operator|.
name|get
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
if|if
condition|(
name|tok
operator|==
literal|null
condition|)
block|{
name|String
name|tokId
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokId
operator|!=
literal|null
condition|)
block|{
name|tok
operator|=
name|TokenStoreUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
operator|.
name|getToken
argument_list|(
name|tokId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|tok
return|;
block|}
specifier|private
specifier|static
name|SecurityToken
name|issueToken
parameter_list|(
name|Message
name|message
parameter_list|,
name|TokenRequestParams
name|params
parameter_list|)
block|{
name|AddressingProperties
name|maps
init|=
operator|(
name|AddressingProperties
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"javax.xml.ws.addressing.context.outbound"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maps
operator|==
literal|null
condition|)
block|{
name|maps
operator|=
operator|(
name|AddressingProperties
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"javax.xml.ws.addressing.context"
argument_list|)
expr_stmt|;
block|}
name|STSClient
name|client
init|=
name|STSUtils
operator|.
name|getClientWithIssuer
argument_list|(
name|message
argument_list|,
literal|"sts"
argument_list|,
name|params
operator|.
name|getIssuer
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|client
init|)
block|{
try|try
block|{
comment|// Transpose ActAs/OnBehalfOf info from original request to the STS client.
name|Object
name|token
init|=
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_ACT_AS
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|setActAs
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
name|token
operator|=
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_ON_BEHALF_OF
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|setOnBehalfOf
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
name|client
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|mapSecurityProps
argument_list|(
name|message
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|STS_APPLIES_TO
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|String
name|appliesTo
init|=
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|o
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|appliesTo
operator|==
literal|null
condition|)
block|{
name|String
name|endpointAddress
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Strip out any query parameters if they exist
name|int
name|query
init|=
name|endpointAddress
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|>
literal|0
condition|)
block|{
name|endpointAddress
operator|=
name|endpointAddress
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
name|appliesTo
operator|=
name|endpointAddress
expr_stmt|;
block|}
name|boolean
name|enableAppliesTo
init|=
name|client
operator|.
name|isEnableAppliesTo
argument_list|()
decl_stmt|;
name|client
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Element
name|onBehalfOfToken
init|=
name|client
operator|.
name|getOnBehalfOfToken
argument_list|()
decl_stmt|;
name|Element
name|actAsToken
init|=
name|client
operator|.
name|getActAsToken
argument_list|()
decl_stmt|;
name|SecurityToken
name|secToken
init|=
name|handleDelegation
argument_list|(
name|message
argument_list|,
name|onBehalfOfToken
argument_list|,
name|actAsToken
argument_list|,
name|appliesTo
argument_list|,
name|enableAppliesTo
argument_list|)
decl_stmt|;
if|if
condition|(
name|secToken
operator|!=
literal|null
condition|)
block|{
comment|// Check to see whether the delegated token needs to be renewed
name|secToken
operator|=
name|renewToken
argument_list|(
name|message
argument_list|,
name|secToken
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secToken
operator|=
name|getTokenFromSTS
argument_list|(
name|message
argument_list|,
name|client
argument_list|,
name|maps
argument_list|,
name|appliesTo
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
name|storeDelegationTokens
argument_list|(
name|message
argument_list|,
name|secToken
argument_list|,
name|onBehalfOfToken
argument_list|,
name|actAsToken
argument_list|,
name|appliesTo
argument_list|,
name|enableAppliesTo
argument_list|)
expr_stmt|;
return|return
name|secToken
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|client
operator|.
name|setTrust
argument_list|(
operator|(
name|Trust10
operator|)
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTrust
argument_list|(
operator|(
name|Trust13
operator|)
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTemplate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|setAddressingNamespace
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|SecurityToken
name|renewToken
parameter_list|(
name|Message
name|message
parameter_list|,
name|SecurityToken
name|tok
parameter_list|,
name|TokenRequestParams
name|params
parameter_list|)
block|{
name|String
name|imminentExpiryValue
init|=
operator|(
name|String
operator|)
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_IMMINENT_EXPIRY_VALUE
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|long
name|imminentExpiry
init|=
literal|10L
decl_stmt|;
if|if
condition|(
name|imminentExpiryValue
operator|!=
literal|null
condition|)
block|{
name|imminentExpiry
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|imminentExpiryValue
argument_list|)
expr_stmt|;
block|}
comment|// If the token has not expired then we don't need to renew it
if|if
condition|(
operator|!
operator|(
name|tok
operator|.
name|isExpired
argument_list|()
operator|||
name|tok
operator|.
name|isAboutToExpire
argument_list|(
name|imminentExpiry
argument_list|)
operator|)
condition|)
block|{
return|return
name|tok
return|;
block|}
comment|// Remove token from cache
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|remove
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|remove
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|remove
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|remove
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
name|TokenStoreUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
operator|.
name|remove
argument_list|(
name|tok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// If the user has explicitly disabled Renewing then we can't renew a token,
comment|// so just get a new one
name|STSClient
name|client
init|=
name|STSUtils
operator|.
name|getClientWithIssuer
argument_list|(
name|message
argument_list|,
literal|"sts"
argument_list|,
name|params
operator|.
name|getIssuer
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|client
operator|.
name|isAllowRenewing
argument_list|()
condition|)
block|{
return|return
name|issueToken
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
return|;
block|}
name|AddressingProperties
name|maps
init|=
operator|(
name|AddressingProperties
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"javax.xml.ws.addressing.context.outbound"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maps
operator|==
literal|null
condition|)
block|{
name|maps
operator|=
operator|(
name|AddressingProperties
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"javax.xml.ws.addressing.context"
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|client
init|)
block|{
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
name|client
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|mapSecurityProps
argument_list|(
name|message
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|client
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|maps
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|setAddressingNamespace
argument_list|(
name|maps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|setTrust
argument_list|(
name|params
operator|.
name|getTrust10
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTrust
argument_list|(
name|params
operator|.
name|getTrust13
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTemplate
argument_list|(
name|params
operator|.
name|getTokenTemplate
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|renewSecurityToken
argument_list|(
name|tok
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Error renewing a token"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|boolean
name|issueAfterFailedRenew
init|=
name|SecurityUtils
operator|.
name|getSecurityPropertyBoolean
argument_list|(
name|SecurityConstants
operator|.
name|STS_ISSUE_AFTER_FAILED_RENEW
argument_list|,
name|message
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|issueAfterFailedRenew
condition|)
block|{
comment|// Perhaps the STS does not support renewing, so try to issue a new token
return|return
name|issueToken
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Error renewing a token"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|boolean
name|issueAfterFailedRenew
init|=
name|SecurityUtils
operator|.
name|getSecurityPropertyBoolean
argument_list|(
name|SecurityConstants
operator|.
name|STS_ISSUE_AFTER_FAILED_RENEW
argument_list|,
name|message
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|issueAfterFailedRenew
condition|)
block|{
comment|// Perhaps the STS does not support renewing, so try to issue a new token
return|return
name|issueToken
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|client
operator|.
name|setTrust
argument_list|(
operator|(
name|Trust10
operator|)
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTrust
argument_list|(
operator|(
name|Trust13
operator|)
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTemplate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|setAddressingNamespace
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Check to see if the received token is a SAML2 Token with "OneTimeUse" set. If so,
comment|// it should not be cached on the endpoint, but only on the message.
specifier|private
specifier|static
name|boolean
name|isOneTimeUse
parameter_list|(
name|SecurityToken
name|issuedToken
parameter_list|)
block|{
name|Element
name|token
init|=
name|issuedToken
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
operator|&&
literal|"Assertion"
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|WSConstants
operator|.
name|SAML2_NS
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|SamlAssertionWrapper
name|assertion
init|=
operator|new
name|SamlAssertionWrapper
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|.
name|getConditions
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|.
name|getConditions
argument_list|()
operator|.
name|getOneTimeUse
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|void
name|mapSecurityProps
parameter_list|(
name|Message
name|message
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|SecurityConstants
operator|.
name|ALL_PROPERTIES
control|)
block|{
name|Object
name|v
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|s
operator|+
literal|".it"
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ctx
operator|.
name|containsKey
argument_list|(
name|s
argument_list|)
operator|&&
name|v
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Parse ActAs/OnBehalfOf appropriately. See if the required token is stored in the cache.      */
specifier|private
specifier|static
name|SecurityToken
name|handleDelegation
parameter_list|(
name|Message
name|message
parameter_list|,
name|Element
name|onBehalfOfToken
parameter_list|,
name|Element
name|actAsToken
parameter_list|,
name|String
name|appliesTo
parameter_list|,
name|boolean
name|enableAppliesTo
parameter_list|)
throws|throws
name|Exception
block|{
name|TokenStore
name|tokenStore
init|=
name|TokenStoreUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|appliesTo
decl_stmt|;
if|if
condition|(
operator|!
name|enableAppliesTo
operator|||
name|key
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|key
operator|=
name|ASSOCIATED_TOKEN
expr_stmt|;
block|}
comment|// See if the token corresponding to the OnBehalfOf Token is stored in the cache
comment|// and if it points to an issued token
if|if
condition|(
name|onBehalfOfToken
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|getIdFromToken
argument_list|(
name|onBehalfOfToken
argument_list|)
decl_stmt|;
name|SecurityToken
name|cachedToken
init|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedToken
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|cachedToken
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
operator|&&
name|properties
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|String
name|associatedToken
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|SecurityToken
name|issuedToken
init|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|associatedToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|issuedToken
operator|!=
literal|null
condition|)
block|{
return|return
name|issuedToken
return|;
block|}
block|}
block|}
block|}
comment|// See if the token corresponding to the ActAs Token is stored in the cache
comment|// and if it points to an issued token
if|if
condition|(
name|actAsToken
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|getIdFromToken
argument_list|(
name|actAsToken
argument_list|)
decl_stmt|;
name|SecurityToken
name|cachedToken
init|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedToken
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|cachedToken
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
operator|&&
name|properties
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|String
name|associatedToken
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|SecurityToken
name|issuedToken
init|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|associatedToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|issuedToken
operator|!=
literal|null
condition|)
block|{
return|return
name|issuedToken
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|String
name|getIdFromToken
parameter_list|(
name|Element
name|token
parameter_list|)
block|{
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
comment|// Try to find the "Id" on the token.
if|if
condition|(
name|token
operator|.
name|hasAttributeNS
argument_list|(
name|WSConstants
operator|.
name|WSU_NS
argument_list|,
literal|"Id"
argument_list|)
condition|)
block|{
return|return
name|token
operator|.
name|getAttributeNS
argument_list|(
name|WSConstants
operator|.
name|WSU_NS
argument_list|,
literal|"Id"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|hasAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"ID"
argument_list|)
condition|)
block|{
return|return
name|token
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"ID"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|hasAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"AssertionID"
argument_list|)
condition|)
block|{
return|return
name|token
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"AssertionID"
argument_list|)
return|;
block|}
block|}
return|return
literal|""
return|;
block|}
specifier|private
specifier|static
name|void
name|storeDelegationTokens
parameter_list|(
name|Message
name|message
parameter_list|,
name|SecurityToken
name|issuedToken
parameter_list|,
name|Element
name|onBehalfOfToken
parameter_list|,
name|Element
name|actAsToken
parameter_list|,
name|String
name|appliesTo
parameter_list|,
name|boolean
name|enableAppliesTo
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|issuedToken
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|TokenStore
name|tokenStore
init|=
name|TokenStoreUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|appliesTo
decl_stmt|;
if|if
condition|(
operator|!
name|enableAppliesTo
operator|||
name|key
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|key
operator|=
name|ASSOCIATED_TOKEN
expr_stmt|;
block|}
if|if
condition|(
name|onBehalfOfToken
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|getIdFromToken
argument_list|(
name|onBehalfOfToken
argument_list|)
decl_stmt|;
name|SecurityToken
name|cachedToken
init|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedToken
operator|==
literal|null
condition|)
block|{
name|cachedToken
operator|=
operator|new
name|SecurityToken
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|cachedToken
operator|.
name|setToken
argument_list|(
name|onBehalfOfToken
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|cachedToken
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|cachedToken
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|issuedToken
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|tokenStore
operator|.
name|add
argument_list|(
name|cachedToken
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actAsToken
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|getIdFromToken
argument_list|(
name|actAsToken
argument_list|)
decl_stmt|;
name|SecurityToken
name|cachedToken
init|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedToken
operator|==
literal|null
condition|)
block|{
name|cachedToken
operator|=
operator|new
name|SecurityToken
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|cachedToken
operator|.
name|setToken
argument_list|(
name|actAsToken
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|cachedToken
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|cachedToken
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|issuedToken
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|tokenStore
operator|.
name|add
argument_list|(
name|cachedToken
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|SecurityToken
name|getTokenFromSTS
parameter_list|(
name|Message
name|message
parameter_list|,
name|STSClient
name|client
parameter_list|,
name|AddressingProperties
name|maps
parameter_list|,
name|String
name|appliesTo
parameter_list|,
name|TokenRequestParams
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|client
operator|.
name|setTrust
argument_list|(
name|params
operator|.
name|getTrust10
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTrust
argument_list|(
name|params
operator|.
name|getTrust13
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTemplate
argument_list|(
name|params
operator|.
name|getTokenTemplate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|getWspNamespace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|setWspNamespace
argument_list|(
name|params
operator|.
name|getWspNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maps
operator|!=
literal|null
operator|&&
name|maps
operator|.
name|getNamespaceURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|setAddressingNamespace
argument_list|(
name|maps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getClaims
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|setClaims
argument_list|(
name|params
operator|.
name|getClaims
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|client
operator|.
name|requestSecurityToken
argument_list|(
name|appliesTo
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|TokenRequestParams
block|{
specifier|private
name|Element
name|issuer
decl_stmt|;
specifier|private
name|Trust10
name|trust10
decl_stmt|;
specifier|private
name|Trust13
name|trust13
decl_stmt|;
specifier|private
name|Element
name|tokenTemplate
decl_stmt|;
specifier|private
name|String
name|wspNamespace
decl_stmt|;
specifier|private
name|Element
name|claims
decl_stmt|;
specifier|public
name|Element
name|getIssuer
parameter_list|()
block|{
return|return
name|issuer
return|;
block|}
specifier|public
name|void
name|setIssuer
parameter_list|(
name|Element
name|issuer
parameter_list|)
block|{
name|this
operator|.
name|issuer
operator|=
name|issuer
expr_stmt|;
block|}
specifier|public
name|Trust10
name|getTrust10
parameter_list|()
block|{
return|return
name|trust10
return|;
block|}
specifier|public
name|void
name|setTrust10
parameter_list|(
name|Trust10
name|trust10
parameter_list|)
block|{
name|this
operator|.
name|trust10
operator|=
name|trust10
expr_stmt|;
block|}
specifier|public
name|Trust13
name|getTrust13
parameter_list|()
block|{
return|return
name|trust13
return|;
block|}
specifier|public
name|void
name|setTrust13
parameter_list|(
name|Trust13
name|trust13
parameter_list|)
block|{
name|this
operator|.
name|trust13
operator|=
name|trust13
expr_stmt|;
block|}
specifier|public
name|Element
name|getTokenTemplate
parameter_list|()
block|{
return|return
name|tokenTemplate
return|;
block|}
specifier|public
name|void
name|setTokenTemplate
parameter_list|(
name|Element
name|tokenTemplate
parameter_list|)
block|{
name|this
operator|.
name|tokenTemplate
operator|=
name|tokenTemplate
expr_stmt|;
block|}
specifier|public
name|String
name|getWspNamespace
parameter_list|()
block|{
return|return
name|wspNamespace
return|;
block|}
specifier|public
name|void
name|setWspNamespace
parameter_list|(
name|String
name|wspNamespace
parameter_list|)
block|{
name|this
operator|.
name|wspNamespace
operator|=
name|wspNamespace
expr_stmt|;
block|}
specifier|public
name|Element
name|getClaims
parameter_list|()
block|{
return|return
name|claims
return|;
block|}
specifier|public
name|void
name|setClaims
parameter_list|(
name|Element
name|claims
parameter_list|)
block|{
name|this
operator|.
name|claims
operator|=
name|claims
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

