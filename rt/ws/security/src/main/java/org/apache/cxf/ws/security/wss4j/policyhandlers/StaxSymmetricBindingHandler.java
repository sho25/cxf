begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyhandlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ConfigurationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|util
operator|.
name|KeyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractSymmetricAsymmetricBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractToken
operator|.
name|DerivedKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractTokenWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
operator|.
name|AlgorithmSuiteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|IssuedToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|KerberosToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SecureConversationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SecurityContextToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SpnegoContextToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SymmetricBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|X509Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|ext
operator|.
name|WSSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|WSSecurityEventConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|WSSecurityTokenConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|algorithms
operator|.
name|JCEMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|exceptions
operator|.
name|XMLSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|SecurePart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|SecurePart
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|impl
operator|.
name|securityToken
operator|.
name|GenericOutboundSecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|impl
operator|.
name|util
operator|.
name|IDGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|AbstractSecuredElementSecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|SecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|OutboundSecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SecurityTokenConstants
operator|.
name|TokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SecurityTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|utils
operator|.
name|Base64
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|StaxSymmetricBindingHandler
extends|extends
name|AbstractStaxBindingHandler
block|{
specifier|private
name|SymmetricBinding
name|sbinding
decl_stmt|;
specifier|private
name|SoapMessage
name|message
decl_stmt|;
specifier|public
name|StaxSymmetricBindingHandler
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
name|SoapMessage
name|msg
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SecurityTokenProvider
argument_list|<
name|OutboundSecurityToken
argument_list|>
argument_list|>
name|outboundTokens
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|,
name|msg
argument_list|,
name|outboundTokens
argument_list|)
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|msg
expr_stmt|;
block|}
specifier|private
name|AbstractTokenWrapper
name|getSignatureToken
parameter_list|()
block|{
if|if
condition|(
name|sbinding
operator|.
name|getProtectionToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|sbinding
operator|.
name|getProtectionToken
argument_list|()
return|;
block|}
return|return
name|sbinding
operator|.
name|getSignatureToken
argument_list|()
return|;
block|}
specifier|private
name|AbstractTokenWrapper
name|getEncryptionToken
parameter_list|()
block|{
if|if
condition|(
name|sbinding
operator|.
name|getProtectionToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|sbinding
operator|.
name|getProtectionToken
argument_list|()
return|;
block|}
return|return
name|sbinding
operator|.
name|getEncryptionToken
argument_list|()
return|;
block|}
specifier|public
name|void
name|handleBinding
parameter_list|()
block|{
name|AssertionInfoMap
name|aim
init|=
name|getMessage
argument_list|()
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|configureTimestamp
argument_list|(
name|aim
argument_list|)
expr_stmt|;
name|sbinding
operator|=
operator|(
name|SymmetricBinding
operator|)
name|getBinding
argument_list|(
name|aim
argument_list|)
expr_stmt|;
name|String
name|asymSignatureAlgorithm
init|=
operator|(
name|String
operator|)
name|getMessage
argument_list|()
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ASYMMETRIC_SIGNATURE_ALGORITHM
argument_list|)
decl_stmt|;
if|if
condition|(
name|asymSignatureAlgorithm
operator|!=
literal|null
operator|&&
name|sbinding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sbinding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|setAsymmetricSignature
argument_list|(
name|asymSignatureAlgorithm
argument_list|)
expr_stmt|;
block|}
comment|// Set up CallbackHandler which wraps the configured Handler
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|getProperties
argument_list|()
decl_stmt|;
name|TokenStoreCallbackHandler
name|callbackHandler
init|=
operator|new
name|TokenStoreCallbackHandler
argument_list|(
operator|(
name|CallbackHandler
operator|)
name|config
operator|.
name|get
argument_list|(
name|ConfigurationConstants
operator|.
name|PW_CALLBACK_REF
argument_list|)
argument_list|,
name|getTokenStore
argument_list|()
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|PW_CALLBACK_REF
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
if|if
condition|(
name|sbinding
operator|.
name|getProtectionOrder
argument_list|()
operator|==
name|AbstractSymmetricAsymmetricBinding
operator|.
name|ProtectionOrder
operator|.
name|EncryptBeforeSigning
condition|)
block|{
name|doEncryptBeforeSign
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doSignBeforeEncrypt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isRequestor
argument_list|()
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ENC_SYM_ENC_KEY
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
name|configureLayout
argument_list|(
name|aim
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doEncryptBeforeSign
parameter_list|()
block|{
try|try
block|{
name|AbstractTokenWrapper
name|encryptionWrapper
init|=
name|getEncryptionToken
argument_list|()
decl_stmt|;
name|AbstractToken
name|encryptionToken
init|=
name|encryptionWrapper
operator|.
name|getToken
argument_list|()
decl_stmt|;
comment|//The encryption token can be an IssuedToken or a
comment|//SecureConversationToken
name|String
name|tokenId
init|=
literal|null
decl_stmt|;
name|SecurityToken
name|tok
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|encryptionToken
operator|instanceof
name|KerberosToken
condition|)
block|{
name|tok
operator|=
name|getSecurityToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|addKerberosToken
argument_list|(
operator|(
name|KerberosToken
operator|)
name|encryptionToken
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|encryptionToken
operator|instanceof
name|IssuedToken
condition|)
block|{
name|tok
operator|=
name|getSecurityToken
argument_list|()
expr_stmt|;
name|addIssuedToken
argument_list|(
operator|(
name|IssuedToken
operator|)
name|encryptionToken
argument_list|,
name|tok
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encryptionToken
operator|instanceof
name|SecureConversationToken
operator|||
name|encryptionToken
operator|instanceof
name|SecurityContextToken
operator|||
name|encryptionToken
operator|instanceof
name|SpnegoContextToken
condition|)
block|{
name|tok
operator|=
name|getSecurityToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|tok
operator|!=
literal|null
operator|&&
name|isRequestor
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|actionToPerform
init|=
name|ConfigurationConstants
operator|.
name|CUSTOM_TOKEN
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|containsKey
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
condition|)
block|{
name|String
name|action
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|action
operator|+
literal|" "
operator|+
name|actionToPerform
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|actionToPerform
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|encryptionToken
operator|instanceof
name|X509Token
condition|)
block|{
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|tokenId
operator|=
name|setupEncryptedKey
argument_list|(
name|encryptionWrapper
argument_list|,
name|encryptionToken
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokenId
operator|=
name|getEncryptedKey
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|encryptionToken
operator|instanceof
name|UsernameToken
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|sbinding
argument_list|,
literal|"UsernameTokens not supported with Symmetric binding"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|tok
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|tokenId
operator|!=
literal|null
operator|&&
name|tokenId
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|tokenId
operator|=
name|tokenId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Get hold of the token from the token storage
name|tok
operator|=
name|getTokenStore
argument_list|()
operator|.
name|getToken
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
block|}
comment|// Store key
if|if
condition|(
operator|!
operator|(
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
operator|&&
name|encryptionToken
operator|instanceof
name|KerberosToken
operator|)
condition|)
block|{
name|storeSecurityToken
argument_list|(
name|tok
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|SecurePart
argument_list|>
name|encrParts
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|SecurePart
argument_list|>
name|sigParts
init|=
literal|null
decl_stmt|;
try|try
block|{
name|encrParts
operator|=
name|getEncryptedParts
argument_list|()
expr_stmt|;
comment|//Signed parts are determined before encryption because encrypted signed headers
comment|//will not be included otherwise
name|sigParts
operator|=
name|getSignedParts
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
name|encryptionToken
operator|!=
literal|null
operator|&&
name|encrParts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|addSupportingTokens
argument_list|()
expr_stmt|;
name|encrParts
operator|.
name|addAll
argument_list|(
name|encryptedTokensList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addSignatureConfirmation
argument_list|(
name|sigParts
argument_list|)
expr_stmt|;
block|}
comment|//Check for signature protection
if|if
condition|(
name|sbinding
operator|.
name|isEncryptSignature
argument_list|()
condition|)
block|{
name|SecurePart
name|part
init|=
operator|new
name|SecurePart
argument_list|(
operator|new
name|QName
argument_list|(
name|WSSConstants
operator|.
name|NS_DSIG
argument_list|,
literal|"Signature"
argument_list|)
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|encrParts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|doEncryption
argument_list|(
name|encryptionWrapper
argument_list|,
name|encrParts
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|timestampAdded
condition|)
block|{
name|SecurePart
name|part
init|=
operator|new
name|SecurePart
argument_list|(
operator|new
name|QName
argument_list|(
name|WSSConstants
operator|.
name|NS_WSU10
argument_list|,
literal|"Timestamp"
argument_list|)
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|sigParts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|sigParts
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getSignedParts
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractTokenWrapper
name|sigAbstractTokenWrapper
init|=
name|getSignatureToken
argument_list|()
decl_stmt|;
name|AbstractToken
name|sigToken
init|=
name|sigAbstractTokenWrapper
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|sigParts
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
operator|&&
name|sigAbstractTokenWrapper
operator|!=
literal|null
operator|&&
name|isRequestor
argument_list|()
condition|)
block|{
name|doSignature
argument_list|(
name|sigAbstractTokenWrapper
argument_list|,
name|sigToken
argument_list|,
name|tok
argument_list|,
name|sigParts
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isRequestor
argument_list|()
condition|)
block|{
name|addSignatureConfirmation
argument_list|(
name|sigParts
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sigParts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doSignature
argument_list|(
name|sigAbstractTokenWrapper
argument_list|,
name|sigToken
argument_list|,
name|tok
argument_list|,
name|sigParts
argument_list|)
expr_stmt|;
block|}
block|}
comment|//if (isRequestor()) {
comment|//    doEndorse();
comment|//}
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|doSignBeforeEncrypt
parameter_list|()
block|{
name|AbstractTokenWrapper
name|sigAbstractTokenWrapper
init|=
name|getSignatureToken
argument_list|()
decl_stmt|;
name|AbstractToken
name|sigToken
init|=
name|sigAbstractTokenWrapper
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|String
name|sigTokId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SecurityToken
name|sigTok
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sigToken
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sigToken
operator|instanceof
name|KerberosToken
condition|)
block|{
name|sigTok
operator|=
name|getSecurityToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|addKerberosToken
argument_list|(
operator|(
name|KerberosToken
operator|)
name|sigToken
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sigToken
operator|instanceof
name|IssuedToken
condition|)
block|{
name|sigTok
operator|=
name|getSecurityToken
argument_list|()
expr_stmt|;
name|addIssuedToken
argument_list|(
operator|(
name|IssuedToken
operator|)
name|sigToken
argument_list|,
name|sigTok
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sigToken
operator|instanceof
name|SecureConversationToken
operator|||
name|sigToken
operator|instanceof
name|SecurityContextToken
operator|||
name|sigToken
operator|instanceof
name|SpnegoContextToken
condition|)
block|{
name|sigTok
operator|=
name|getSecurityToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|sigTok
operator|!=
literal|null
operator|&&
name|isRequestor
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|actionToPerform
init|=
name|ConfigurationConstants
operator|.
name|CUSTOM_TOKEN
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|containsKey
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
condition|)
block|{
name|String
name|action
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|action
operator|+
literal|" "
operator|+
name|actionToPerform
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|actionToPerform
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|sigToken
operator|instanceof
name|X509Token
condition|)
block|{
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|sigTokId
operator|=
name|setupEncryptedKey
argument_list|(
name|sigAbstractTokenWrapper
argument_list|,
name|sigToken
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sigTokId
operator|=
name|getEncryptedKey
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|sigToken
operator|instanceof
name|UsernameToken
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|sbinding
argument_list|,
literal|"UsernameTokens not supported with Symmetric binding"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|policyNotAsserted
argument_list|(
name|sbinding
argument_list|,
literal|"No signature token"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|sigTok
operator|==
literal|null
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|sigTokId
argument_list|)
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|sigAbstractTokenWrapper
argument_list|,
literal|"No signature token id"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|sigTok
operator|==
literal|null
condition|)
block|{
name|sigTok
operator|=
name|getTokenStore
argument_list|()
operator|.
name|getToken
argument_list|(
name|sigTokId
argument_list|)
expr_stmt|;
block|}
comment|// Store key
if|if
condition|(
operator|!
operator|(
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
operator|&&
name|sigToken
operator|instanceof
name|KerberosToken
operator|)
condition|)
block|{
name|storeSecurityToken
argument_list|(
name|sigTok
argument_list|)
expr_stmt|;
block|}
comment|// Add timestamp
name|List
argument_list|<
name|SecurePart
argument_list|>
name|sigs
init|=
operator|new
name|ArrayList
argument_list|<
name|SecurePart
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|timestampAdded
condition|)
block|{
name|SecurePart
name|part
init|=
operator|new
name|SecurePart
argument_list|(
operator|new
name|QName
argument_list|(
name|WSSConstants
operator|.
name|NS_WSU10
argument_list|,
literal|"Timestamp"
argument_list|)
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|sigs
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|sigs
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getSignedParts
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|sigs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doSignature
argument_list|(
name|sigAbstractTokenWrapper
argument_list|,
name|sigToken
argument_list|,
name|sigTok
argument_list|,
name|sigs
argument_list|)
expr_stmt|;
block|}
comment|// doEndorse();
block|}
else|else
block|{
name|addSignatureConfirmation
argument_list|(
name|sigs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sigs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doSignature
argument_list|(
name|sigAbstractTokenWrapper
argument_list|,
name|sigToken
argument_list|,
name|sigTok
argument_list|,
name|sigs
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|addSupportingTokens
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|containsKey
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
condition|)
block|{
name|String
name|action
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|.
name|contains
argument_list|(
name|ConfigurationConstants
operator|.
name|SAML_TOKEN_SIGNED
argument_list|)
operator|&&
name|action
operator|.
name|contains
argument_list|(
name|ConfigurationConstants
operator|.
name|SIGNATURE
argument_list|)
condition|)
block|{
name|String
name|newAction
init|=
name|action
operator|.
name|replaceFirst
argument_list|(
name|ConfigurationConstants
operator|.
name|SIGNATURE
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|newAction
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//Encryption
name|List
argument_list|<
name|SecurePart
argument_list|>
name|enc
init|=
name|getEncryptedParts
argument_list|()
decl_stmt|;
comment|//Check for signature protection
if|if
condition|(
name|sbinding
operator|.
name|isEncryptSignature
argument_list|()
condition|)
block|{
name|SecurePart
name|part
init|=
operator|new
name|SecurePart
argument_list|(
operator|new
name|QName
argument_list|(
name|WSSConstants
operator|.
name|NS_DSIG
argument_list|,
literal|"Signature"
argument_list|)
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|enc
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
comment|//Do encryption
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|enc
operator|.
name|addAll
argument_list|(
name|encryptedTokensList
argument_list|)
expr_stmt|;
block|}
name|AbstractTokenWrapper
name|encrAbstractTokenWrapper
init|=
name|getEncryptionToken
argument_list|()
decl_stmt|;
name|doEncryption
argument_list|(
name|encrAbstractTokenWrapper
argument_list|,
name|enc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|doEncryption
parameter_list|(
name|AbstractTokenWrapper
name|recToken
parameter_list|,
name|List
argument_list|<
name|SecurePart
argument_list|>
name|encrParts
parameter_list|,
name|boolean
name|externalRef
parameter_list|)
throws|throws
name|SOAPException
block|{
comment|//Do encryption
if|if
condition|(
name|recToken
operator|!=
literal|null
operator|&&
name|recToken
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|encrParts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|AbstractToken
name|encrToken
init|=
name|recToken
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|AlgorithmSuite
name|algorithmSuite
init|=
name|sbinding
operator|.
name|getAlgorithmSuite
argument_list|()
decl_stmt|;
comment|// Action
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|actionToPerform
init|=
name|ConfigurationConstants
operator|.
name|ENCRYPT
decl_stmt|;
if|if
condition|(
name|recToken
operator|.
name|getToken
argument_list|()
operator|.
name|getDerivedKeys
argument_list|()
operator|==
name|DerivedKeys
operator|.
name|RequireDerivedKeys
condition|)
block|{
name|actionToPerform
operator|=
name|ConfigurationConstants
operator|.
name|ENCRYPT_DERIVED
expr_stmt|;
if|if
condition|(
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
operator|&&
name|recToken
operator|.
name|getToken
argument_list|()
operator|instanceof
name|X509Token
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DERIVED_TOKEN_REFERENCE
argument_list|,
literal|"EncryptedKey"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DERIVED_TOKEN_REFERENCE
argument_list|,
literal|"DirectReference"
argument_list|)
expr_stmt|;
block|}
name|AlgorithmSuiteType
name|algSuiteType
init|=
name|sbinding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAlgorithmSuiteType
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DERIVED_ENCRYPTION_KEY_LENGTH
argument_list|,
literal|""
operator|+
name|algSuiteType
operator|.
name|getEncryptionDerivedKeyLength
argument_list|()
operator|/
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
name|recToken
operator|.
name|getVersion
argument_list|()
operator|==
name|SPConstants
operator|.
name|SPVersion
operator|.
name|SP12
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|USE_2005_12_NAMESPACE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|config
operator|.
name|containsKey
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
condition|)
block|{
name|String
name|action
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|action
operator|+
literal|" "
operator|+
name|actionToPerform
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|actionToPerform
argument_list|)
expr_stmt|;
block|}
name|String
name|parts
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|containsKey
argument_list|(
name|ConfigurationConstants
operator|.
name|ENCRYPTION_PARTS
argument_list|)
condition|)
block|{
name|parts
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|ConfigurationConstants
operator|.
name|ENCRYPTION_PARTS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parts
operator|.
name|endsWith
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
name|parts
operator|+=
literal|";"
expr_stmt|;
block|}
block|}
for|for
control|(
name|SecurePart
name|part
range|:
name|encrParts
control|)
block|{
name|QName
name|name
init|=
name|part
operator|.
name|getName
argument_list|()
decl_stmt|;
name|parts
operator|+=
literal|"{"
operator|+
name|part
operator|.
name|getModifier
argument_list|()
operator|+
literal|"}{"
operator|+
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"}"
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|";"
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ENCRYPTION_PARTS
argument_list|,
name|parts
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ENC_KEY_ID
argument_list|,
name|getKeyIdentifierType
argument_list|(
name|recToken
argument_list|,
name|encrToken
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DERIVED_TOKEN_KEY_ID
argument_list|,
literal|"DirectReference"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|recToken
operator|.
name|getToken
argument_list|()
operator|instanceof
name|KerberosToken
operator|&&
operator|!
name|isRequestor
argument_list|()
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ENC_KEY_ID
argument_list|,
literal|"KerberosSHA1"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DERIVED_TOKEN_KEY_ID
argument_list|,
literal|"KerberosSHA1"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ENC_KEY_ID
argument_list|,
literal|"EncryptedKeySHA1"
argument_list|)
expr_stmt|;
if|if
condition|(
name|recToken
operator|.
name|getToken
argument_list|()
operator|.
name|getDerivedKeys
argument_list|()
operator|==
name|DerivedKeys
operator|.
name|RequireDerivedKeys
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DERIVED_TOKEN_KEY_ID
argument_list|,
literal|"EncryptedKeySHA1"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ENC_KEY_ID
argument_list|,
literal|"DirectReference"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ENC_SYM_ENC_KEY
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ENC_KEY_TRANSPORT
argument_list|,
name|algorithmSuite
operator|.
name|getAlgorithmSuiteType
argument_list|()
operator|.
name|getAsymmetricKeyWrap
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ENC_SYM_ALGO
argument_list|,
name|algorithmSuite
operator|.
name|getAlgorithmSuiteType
argument_list|()
operator|.
name|getEncryption
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|encUser
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_USERNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|encUser
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ENCRYPTION_USER
argument_list|,
name|encUser
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|encrToken
operator|instanceof
name|KerberosToken
operator|||
name|encrToken
operator|instanceof
name|IssuedToken
operator|||
name|encrToken
operator|instanceof
name|SpnegoContextToken
operator|||
name|encrToken
operator|instanceof
name|SecurityContextToken
operator|||
name|encrToken
operator|instanceof
name|SecureConversationToken
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ENC_SYM_ENC_KEY
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doSignature
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|,
name|AbstractToken
name|policyToken
parameter_list|,
name|SecurityToken
name|tok
parameter_list|,
name|List
argument_list|<
name|SecurePart
argument_list|>
name|sigParts
parameter_list|)
throws|throws
name|WSSecurityException
throws|,
name|SOAPException
block|{
comment|// Action
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|actionToPerform
init|=
name|ConfigurationConstants
operator|.
name|SIGNATURE
decl_stmt|;
if|if
condition|(
name|wrapper
operator|.
name|getToken
argument_list|()
operator|.
name|getDerivedKeys
argument_list|()
operator|==
name|DerivedKeys
operator|.
name|RequireDerivedKeys
condition|)
block|{
name|actionToPerform
operator|=
name|ConfigurationConstants
operator|.
name|SIGNATURE_DERIVED
expr_stmt|;
if|if
condition|(
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
operator|&&
name|policyToken
operator|instanceof
name|X509Token
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DERIVED_TOKEN_REFERENCE
argument_list|,
literal|"EncryptedKey"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DERIVED_TOKEN_REFERENCE
argument_list|,
literal|"DirectReference"
argument_list|)
expr_stmt|;
block|}
name|AlgorithmSuiteType
name|algSuiteType
init|=
name|sbinding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAlgorithmSuiteType
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DERIVED_SIGNATURE_KEY_LENGTH
argument_list|,
literal|""
operator|+
name|algSuiteType
operator|.
name|getSignatureDerivedKeyLength
argument_list|()
operator|/
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
name|policyToken
operator|.
name|getVersion
argument_list|()
operator|==
name|SPConstants
operator|.
name|SPVersion
operator|.
name|SP12
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|USE_2005_12_NAMESPACE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|config
operator|.
name|containsKey
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
condition|)
block|{
name|String
name|action
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|.
name|contains
argument_list|(
name|ConfigurationConstants
operator|.
name|KERBEROS_TOKEN
argument_list|)
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|actionToPerform
operator|+
literal|" "
operator|+
name|action
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|action
operator|+
literal|" "
operator|+
name|actionToPerform
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|actionToPerform
argument_list|)
expr_stmt|;
block|}
name|String
name|parts
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|containsKey
argument_list|(
name|ConfigurationConstants
operator|.
name|SIGNATURE_PARTS
argument_list|)
condition|)
block|{
name|parts
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|ConfigurationConstants
operator|.
name|SIGNATURE_PARTS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parts
operator|.
name|endsWith
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
name|parts
operator|+=
literal|";"
expr_stmt|;
block|}
block|}
name|String
name|optionalParts
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|containsKey
argument_list|(
name|ConfigurationConstants
operator|.
name|OPTIONAL_SIGNATURE_PARTS
argument_list|)
condition|)
block|{
name|optionalParts
operator|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|ConfigurationConstants
operator|.
name|OPTIONAL_SIGNATURE_PARTS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|optionalParts
operator|.
name|endsWith
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
name|optionalParts
operator|+=
literal|";"
expr_stmt|;
block|}
block|}
for|for
control|(
name|SecurePart
name|part
range|:
name|sigParts
control|)
block|{
name|QName
name|name
init|=
name|part
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|isRequired
argument_list|()
condition|)
block|{
name|parts
operator|+=
literal|"{Element}{"
operator|+
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"}"
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|";"
expr_stmt|;
block|}
else|else
block|{
name|optionalParts
operator|+=
literal|"{Element}{"
operator|+
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"}"
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|";"
expr_stmt|;
block|}
block|}
name|AbstractToken
name|sigToken
init|=
name|wrapper
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|sbinding
operator|.
name|isProtectTokens
argument_list|()
operator|&&
operator|(
name|sigToken
operator|instanceof
name|X509Token
operator|)
operator|&&
name|isRequestor
argument_list|()
condition|)
block|{
name|parts
operator|+=
literal|"{Element}{"
operator|+
name|WSSConstants
operator|.
name|NS_XMLENC
operator|+
literal|"}EncryptedKey;"
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SIGNATURE_PARTS
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|OPTIONAL_SIGNATURE_PARTS
argument_list|,
name|optionalParts
argument_list|)
expr_stmt|;
name|configureSignature
argument_list|(
name|wrapper
argument_list|,
name|sigToken
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|policyToken
operator|instanceof
name|X509Token
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|INCLUDE_SIGNATURE_TOKEN
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SIG_KEY_ID
argument_list|,
literal|"EncryptedKey"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SIG_KEY_ID
argument_list|,
literal|"EncryptedKeySHA1"
argument_list|)
expr_stmt|;
if|if
condition|(
name|wrapper
operator|.
name|getToken
argument_list|()
operator|.
name|getDerivedKeys
argument_list|()
operator|==
name|DerivedKeys
operator|.
name|RequireDerivedKeys
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DERIVED_TOKEN_KEY_ID
argument_list|,
literal|"EncryptedKeySHA1"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SIG_KEY_ID
argument_list|,
literal|"DirectReference"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|policyToken
operator|instanceof
name|KerberosToken
condition|)
block|{
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DERIVED_TOKEN_KEY_ID
argument_list|,
literal|"DirectReference"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SIG_KEY_ID
argument_list|,
literal|"KerberosSHA1"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DERIVED_TOKEN_KEY_ID
argument_list|,
literal|"KerberosSHA1"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|policyToken
operator|instanceof
name|IssuedToken
operator|||
name|policyToken
operator|instanceof
name|SecurityContextToken
operator|||
name|policyToken
operator|instanceof
name|SecureConversationToken
operator|||
name|policyToken
operator|instanceof
name|SpnegoContextToken
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|INCLUDE_SIGNATURE_TOKEN
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DERIVED_TOKEN_KEY_ID
argument_list|,
literal|"DirectReference"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sigToken
operator|.
name|getDerivedKeys
argument_list|()
operator|==
name|DerivedKeys
operator|.
name|RequireDerivedKeys
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SIG_ALGO
argument_list|,
name|sbinding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|setupEncryptedKey
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|,
name|AbstractToken
name|sigToken
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Date
name|created
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Date
name|expires
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|expires
operator|.
name|setTime
argument_list|(
name|created
operator|.
name|getTime
argument_list|()
operator|+
literal|300000L
argument_list|)
expr_stmt|;
name|SecurityToken
name|tempTok
init|=
operator|new
name|SecurityToken
argument_list|(
name|IDGenerator
operator|.
name|generateID
argument_list|(
literal|null
argument_list|)
argument_list|,
name|created
argument_list|,
name|expires
argument_list|)
decl_stmt|;
name|KeyGenerator
name|keyGenerator
init|=
name|getKeyGenerator
argument_list|(
name|sbinding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAlgorithmSuiteType
argument_list|()
operator|.
name|getEncryption
argument_list|()
argument_list|)
decl_stmt|;
name|SecretKey
name|symmetricKey
init|=
name|keyGenerator
operator|.
name|generateKey
argument_list|()
decl_stmt|;
name|tempTok
operator|.
name|setKey
argument_list|(
name|symmetricKey
argument_list|)
expr_stmt|;
name|tempTok
operator|.
name|setSecret
argument_list|(
name|symmetricKey
operator|.
name|getEncoded
argument_list|()
argument_list|)
expr_stmt|;
name|getTokenStore
argument_list|()
operator|.
name|add
argument_list|(
name|tempTok
argument_list|)
expr_stmt|;
return|return
name|tempTok
operator|.
name|getId
argument_list|()
return|;
block|}
specifier|private
name|String
name|getEncryptedKey
parameter_list|()
throws|throws
name|XMLSecurityException
block|{
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SecurityToken
name|securityToken
init|=
name|findEncryptedKeyToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|securityToken
operator|!=
literal|null
condition|)
block|{
name|Date
name|created
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Date
name|expires
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|expires
operator|.
name|setTime
argument_list|(
name|created
operator|.
name|getTime
argument_list|()
operator|+
literal|300000
argument_list|)
expr_stmt|;
name|String
name|encryptedKeyID
init|=
name|securityToken
operator|.
name|getId
argument_list|()
decl_stmt|;
name|SecurityToken
name|tempTok
init|=
operator|new
name|SecurityToken
argument_list|(
name|encryptedKeyID
argument_list|,
name|created
argument_list|,
name|expires
argument_list|)
decl_stmt|;
name|tempTok
operator|.
name|setSHA1
argument_list|(
name|securityToken
operator|.
name|getSha1Identifier
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|securityToken
operator|.
name|getSecretKey
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|securityToken
operator|.
name|getSecretKey
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|tempTok
operator|.
name|setKey
argument_list|(
name|securityToken
operator|.
name|getSecretKey
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|tempTok
operator|.
name|setSecret
argument_list|(
name|securityToken
operator|.
name|getSecretKey
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|getEncoded
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|getTokenStore
argument_list|()
operator|.
name|add
argument_list|(
name|tempTok
argument_list|)
expr_stmt|;
return|return
name|encryptedKeyID
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SecurityToken
name|findEncryptedKeyToken
parameter_list|()
throws|throws
name|XMLSecurityException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|List
argument_list|<
name|SecurityEvent
argument_list|>
name|incomingEventList
init|=
operator|(
name|List
argument_list|<
name|SecurityEvent
argument_list|>
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|SecurityEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".in"
argument_list|)
decl_stmt|;
if|if
condition|(
name|incomingEventList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SecurityEvent
name|incomingEvent
range|:
name|incomingEventList
control|)
block|{
if|if
condition|(
name|WSSecurityEventConstants
operator|.
name|EncryptedPart
operator|==
name|incomingEvent
operator|.
name|getSecurityEventType
argument_list|()
operator|||
name|WSSecurityEventConstants
operator|.
name|EncryptedElement
operator|==
name|incomingEvent
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SecurityToken
name|token
init|=
operator|(
operator|(
name|AbstractSecuredElementSecurityEvent
operator|)
name|incomingEvent
operator|)
operator|.
name|getSecurityToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getKeyWrappingToken
argument_list|()
operator|!=
literal|null
operator|&&
name|token
operator|.
name|getKeyWrappingToken
argument_list|()
operator|.
name|getSecretKey
argument_list|()
operator|!=
literal|null
operator|&&
name|token
operator|.
name|getKeyWrappingToken
argument_list|()
operator|.
name|getSha1Identifier
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|token
operator|.
name|getKeyWrappingToken
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|token
operator|!=
literal|null
operator|&&
name|token
operator|.
name|getSecretKey
argument_list|()
operator|!=
literal|null
operator|&&
name|token
operator|.
name|getSha1Identifier
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|token
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|getSHA1
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
block|{
try|try
block|{
name|byte
index|[]
name|digestBytes
init|=
name|WSSecurityUtil
operator|.
name|generateDigest
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
name|Base64
operator|.
name|encode
argument_list|(
name|digestBytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
comment|//REVISIT
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|KeyGenerator
name|getKeyGenerator
parameter_list|(
name|String
name|symEncAlgo
parameter_list|)
throws|throws
name|WSSecurityException
block|{
try|try
block|{
comment|//
comment|// Assume AES as default, so initialize it
comment|//
name|WSSConfig
operator|.
name|init
argument_list|()
expr_stmt|;
name|String
name|keyAlgorithm
init|=
name|JCEMapper
operator|.
name|getJCEKeyAlgorithmFromURI
argument_list|(
name|symEncAlgo
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyAlgorithm
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|keyAlgorithm
argument_list|)
condition|)
block|{
name|keyAlgorithm
operator|=
name|JCEMapper
operator|.
name|translateURItoJCEID
argument_list|(
name|symEncAlgo
argument_list|)
expr_stmt|;
block|}
name|KeyGenerator
name|keyGen
init|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
name|keyAlgorithm
argument_list|)
decl_stmt|;
if|if
condition|(
name|symEncAlgo
operator|.
name|equalsIgnoreCase
argument_list|(
name|WSConstants
operator|.
name|AES_128
argument_list|)
operator|||
name|symEncAlgo
operator|.
name|equalsIgnoreCase
argument_list|(
name|WSConstants
operator|.
name|AES_128_GCM
argument_list|)
condition|)
block|{
name|keyGen
operator|.
name|init
argument_list|(
literal|128
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|symEncAlgo
operator|.
name|equalsIgnoreCase
argument_list|(
name|WSConstants
operator|.
name|AES_192
argument_list|)
operator|||
name|symEncAlgo
operator|.
name|equalsIgnoreCase
argument_list|(
name|WSConstants
operator|.
name|AES_192_GCM
argument_list|)
condition|)
block|{
name|keyGen
operator|.
name|init
argument_list|(
literal|192
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|symEncAlgo
operator|.
name|equalsIgnoreCase
argument_list|(
name|WSConstants
operator|.
name|AES_256
argument_list|)
operator|||
name|symEncAlgo
operator|.
name|equalsIgnoreCase
argument_list|(
name|WSConstants
operator|.
name|AES_256_GCM
argument_list|)
condition|)
block|{
name|keyGen
operator|.
name|init
argument_list|(
literal|256
argument_list|)
expr_stmt|;
block|}
return|return
name|keyGen
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|UNSUPPORTED_ALGORITHM
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|storeSecurityToken
parameter_list|(
name|SecurityToken
name|tok
parameter_list|)
block|{
name|TokenType
name|tokenType
init|=
name|WSSecurityTokenConstants
operator|.
name|EncryptedKeyToken
decl_stmt|;
if|if
condition|(
name|tok
operator|.
name|getTokenType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tok
operator|.
name|getTokenType
argument_list|()
operator|.
name|startsWith
argument_list|(
name|WSSConstants
operator|.
name|NS_KERBEROS11_TOKEN_PROFILE
argument_list|)
condition|)
block|{
name|tokenType
operator|=
name|WSSecurityTokenConstants
operator|.
name|KerberosToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tok
operator|.
name|getTokenType
argument_list|()
operator|.
name|startsWith
argument_list|(
name|WSSConstants
operator|.
name|NS_SAML10_TOKEN_PROFILE
argument_list|)
operator|||
name|tok
operator|.
name|getTokenType
argument_list|()
operator|.
name|startsWith
argument_list|(
name|WSSConstants
operator|.
name|NS_SAML11_TOKEN_PROFILE
argument_list|)
condition|)
block|{
name|tokenType
operator|=
name|WSSecurityTokenConstants
operator|.
name|Saml11Token
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tok
operator|.
name|getTokenType
argument_list|()
operator|.
name|startsWith
argument_list|(
name|WSSConstants
operator|.
name|NS_WSC_05_02
argument_list|)
operator|||
name|tok
operator|.
name|getTokenType
argument_list|()
operator|.
name|startsWith
argument_list|(
name|WSSConstants
operator|.
name|NS_WSC_05_12
argument_list|)
condition|)
block|{
name|tokenType
operator|=
name|WSSecurityTokenConstants
operator|.
name|SecureConversationToken
expr_stmt|;
block|}
block|}
specifier|final
name|Key
name|key
init|=
name|tok
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|secret
init|=
name|tok
operator|.
name|getSecret
argument_list|()
decl_stmt|;
specifier|final
name|GenericOutboundSecurityToken
name|encryptedKeySecurityToken
init|=
operator|new
name|GenericOutboundSecurityToken
argument_list|(
name|tok
operator|.
name|getId
argument_list|()
argument_list|,
name|tokenType
argument_list|,
name|key
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Key
name|getSecretKey
parameter_list|(
name|String
name|algorithmURI
parameter_list|)
throws|throws
name|XMLSecurityException
block|{
if|if
condition|(
name|secret
operator|!=
literal|null
operator|&&
name|algorithmURI
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|algorithmURI
argument_list|)
condition|)
block|{
return|return
name|KeyUtils
operator|.
name|prepareSecretKey
argument_list|(
name|algorithmURI
argument_list|,
name|secret
argument_list|)
return|;
block|}
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
return|return
name|key
return|;
block|}
if|if
condition|(
name|secret
operator|!=
literal|null
condition|)
block|{
name|String
name|jceAlg
init|=
name|JCEMapper
operator|.
name|getJCEKeyAlgorithmFromURI
argument_list|(
name|algorithmURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|jceAlg
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|jceAlg
argument_list|)
condition|)
block|{
name|jceAlg
operator|=
literal|"HmacSHA1"
expr_stmt|;
block|}
return|return
operator|new
name|SecretKeySpec
argument_list|(
name|secret
argument_list|,
name|jceAlg
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|getSecretKey
argument_list|(
name|algorithmURI
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|SecurityTokenProvider
argument_list|<
name|OutboundSecurityToken
argument_list|>
name|encryptedKeySecurityTokenProvider
init|=
operator|new
name|SecurityTokenProvider
argument_list|<
name|OutboundSecurityToken
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OutboundSecurityToken
name|getSecurityToken
parameter_list|()
throws|throws
name|XMLSecurityException
block|{
return|return
name|encryptedKeySecurityToken
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|encryptedKeySecurityToken
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|encryptedKeySecurityToken
operator|.
name|setSha1Identifier
argument_list|(
name|tok
operator|.
name|getSHA1
argument_list|()
argument_list|)
expr_stmt|;
name|outboundTokens
operator|.
name|put
argument_list|(
name|WSSConstants
operator|.
name|PROP_USE_THIS_TOKEN_ID_FOR_ENCRYPTION
argument_list|,
name|encryptedKeySecurityTokenProvider
argument_list|)
expr_stmt|;
name|outboundTokens
operator|.
name|put
argument_list|(
name|WSSConstants
operator|.
name|PROP_USE_THIS_TOKEN_ID_FOR_SIGNATURE
argument_list|,
name|encryptedKeySecurityTokenProvider
argument_list|)
expr_stmt|;
name|outboundTokens
operator|.
name|put
argument_list|(
name|WSSConstants
operator|.
name|PROP_USE_THIS_TOKEN_ID_FOR_CUSTOM_TOKEN
argument_list|,
name|encryptedKeySecurityTokenProvider
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|TokenStoreCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
name|CallbackHandler
name|internal
decl_stmt|;
specifier|private
name|TokenStore
name|store
decl_stmt|;
specifier|public
name|TokenStoreCallbackHandler
parameter_list|(
name|CallbackHandler
name|in
parameter_list|,
name|TokenStore
name|st
parameter_list|)
block|{
name|internal
operator|=
name|in
expr_stmt|;
name|store
operator|=
name|st
expr_stmt|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callbacks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|WSPasswordCallback
name|pc
init|=
operator|(
name|WSPasswordCallback
operator|)
name|callbacks
index|[
name|i
index|]
decl_stmt|;
name|String
name|id
init|=
name|pc
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|SecurityToken
name|token
init|=
name|store
operator|.
name|getToken
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|token
operator|.
name|getSHA1
argument_list|()
operator|==
literal|null
operator|&&
name|pc
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|setSHA1
argument_list|(
name|getSHA1
argument_list|(
name|pc
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create another cache entry with the SHA1 Identifier as the key
comment|// for easy retrieval
name|store
operator|.
name|add
argument_list|(
name|token
operator|.
name|getSHA1
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
name|pc
operator|.
name|setKey
argument_list|(
name|token
operator|.
name|getSecret
argument_list|()
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setCustomToken
argument_list|(
name|token
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|internal
operator|!=
literal|null
condition|)
block|{
name|internal
operator|.
name|handle
argument_list|(
name|callbacks
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

