begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|builders
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SpnegoContextToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|AssertionBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|builders
operator|.
name|AssertionBuilder
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|SpnegoContextTokenBuilder
implements|implements
name|AssertionBuilder
argument_list|<
name|Element
argument_list|>
block|{
name|PolicyBuilder
name|builder
decl_stmt|;
specifier|public
name|SpnegoContextTokenBuilder
parameter_list|(
name|PolicyBuilder
name|b
parameter_list|)
block|{
name|builder
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|QName
index|[]
name|getKnownElements
parameter_list|()
block|{
return|return
operator|new
name|QName
index|[]
block|{
name|SP11Constants
operator|.
name|SPNEGO_CONTEXT_TOKEN
block|,
name|SP12Constants
operator|.
name|SPNEGO_CONTEXT_TOKEN
block|}
return|;
block|}
specifier|public
name|Assertion
name|build
parameter_list|(
name|Element
name|element
parameter_list|,
name|AssertionBuilderFactory
name|factory
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|SPConstants
name|consts
init|=
name|SP11Constants
operator|.
name|SP_NS
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|?
name|SP11Constants
operator|.
name|INSTANCE
else|:
name|SP12Constants
operator|.
name|INSTANCE
decl_stmt|;
name|SpnegoContextToken
name|spnegoContextToken
init|=
operator|new
name|SpnegoContextToken
argument_list|(
name|consts
argument_list|)
decl_stmt|;
name|spnegoContextToken
operator|.
name|setOptional
argument_list|(
name|PolicyConstants
operator|.
name|isOptional
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
name|spnegoContextToken
operator|.
name|setIgnorable
argument_list|(
name|PolicyConstants
operator|.
name|isIgnorable
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|attribute
init|=
name|DOMUtils
operator|.
name|getAttribute
argument_list|(
name|element
argument_list|,
name|consts
operator|.
name|getIncludeToken
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|attribute
operator|!=
literal|null
condition|)
block|{
name|spnegoContextToken
operator|.
name|setInclusion
argument_list|(
name|consts
operator|.
name|getInclusionFromAttributeValue
argument_list|(
name|attribute
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Element
name|elem
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|element
argument_list|)
decl_stmt|;
name|boolean
name|foundPolicy
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|elem
operator|!=
literal|null
condition|)
block|{
name|QName
name|qn
init|=
name|DOMUtils
operator|.
name|getElementQName
argument_list|(
name|elem
argument_list|)
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|isPolicyElement
argument_list|(
name|qn
argument_list|)
condition|)
block|{
name|foundPolicy
operator|=
literal|true
expr_stmt|;
name|spnegoContextToken
operator|.
name|setPolicy
argument_list|(
name|elem
argument_list|)
expr_stmt|;
if|if
condition|(
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|elem
argument_list|,
name|consts
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_DERIVED_KEYS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|spnegoContextToken
operator|.
name|setDerivedKeys
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|elem
argument_list|,
name|SP12Constants
operator|.
name|REQUIRE_IMPLIED_DERIVED_KEYS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|spnegoContextToken
operator|.
name|setImpliedDerivedKeys
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|elem
argument_list|,
name|SP12Constants
operator|.
name|REQUIRE_EXPLICIT_DERIVED_KEYS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|spnegoContextToken
operator|.
name|setExplicitDerivedKeys
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|consts
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|SPConstants
operator|.
name|ISSUER
operator|.
name|equals
argument_list|(
name|qn
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|spnegoContextToken
operator|.
name|setIssuerEpr
argument_list|(
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|elem
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|elem
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|foundPolicy
operator|&&
name|consts
operator|!=
name|SP11Constants
operator|.
name|INSTANCE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"sp:SpnegoContextToken/wsp:Policy must have a value"
argument_list|)
throw|;
block|}
return|return
name|spnegoContextToken
return|;
block|}
block|}
end_class

end_unit

