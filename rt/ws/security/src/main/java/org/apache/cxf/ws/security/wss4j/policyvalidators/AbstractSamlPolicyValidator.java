begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SAMLKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|saml
operator|.
name|DOMSAMLUtil
import|;
end_import

begin_comment
comment|/**  * Some abstract functionality for validating SAML Assertions  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSamlPolicyValidator
extends|extends
name|AbstractSecurityPolicyValidator
block|{
comment|/**      * Check the holder-of-key requirements against the received assertion. The subject      * credential of the SAML Assertion must have been used to sign some portion of      * the message, thus showing proof-of-possession of the private/secret key. Alternatively,      * the subject credential of the SAML Assertion must match a client certificate credential      * when 2-way TLS is used.      * @param assertionWrapper the SAML Assertion wrapper object      * @param signedResults a list of all of the signed results      */
specifier|public
name|boolean
name|checkHolderOfKey
parameter_list|(
name|SamlAssertionWrapper
name|assertionWrapper
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
parameter_list|,
name|Certificate
index|[]
name|tlsCerts
parameter_list|)
block|{
return|return
name|DOMSAMLUtil
operator|.
name|checkHolderOfKey
argument_list|(
name|assertionWrapper
argument_list|,
name|signedResults
argument_list|,
name|tlsCerts
argument_list|)
return|;
block|}
comment|/**      * Compare the credentials of the assertion to the credentials used in 2-way TLS or those      * used to verify signatures.      * Return true on a match      * @param subjectKeyInfo the SAMLKeyInfo object      * @param signedResults a list of all of the signed results      * @return true if the credentials of the assertion were used to verify a signature      */
specifier|protected
name|boolean
name|compareCredentials
parameter_list|(
name|SAMLKeyInfo
name|subjectKeyInfo
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
parameter_list|,
name|Certificate
index|[]
name|tlsCerts
parameter_list|)
block|{
return|return
name|DOMSAMLUtil
operator|.
name|compareCredentials
argument_list|(
name|subjectKeyInfo
argument_list|,
name|signedResults
argument_list|,
name|tlsCerts
argument_list|)
return|;
block|}
block|}
end_class

end_unit

