begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapBindingConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_comment
comment|//import org.apache.cxf.common.i18n.Message;
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ModCountCopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|source
operator|.
name|SourceDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|ClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|VersionTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|mex
operator|.
name|MetadataExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|mex
operator|.
name|model
operator|.
name|_2004_09
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|mex
operator|.
name|model
operator|.
name|_2004_09
operator|.
name|MetadataSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|EffectivePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|attachment
operator|.
name|reference
operator|.
name|ReferenceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|attachment
operator|.
name|reference
operator|.
name|RemoteReferenceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|primitive
operator|.
name|PrimitiveAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|claims
operator|.
name|ClaimsCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|delegation
operator|.
name|DelegationCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|All
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|ExactlyOne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|CryptoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|CryptoType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|derivedKey
operator|.
name|P_SHA1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSDocInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|RequestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|BinarySecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|processor
operator|.
name|EncryptedKeyProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|processor
operator|.
name|X509Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|util
operator|.
name|XmlSchemaDateFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
operator|.
name|SPVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
operator|.
name|AlgorithmSuiteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|ProtectionToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SecureConversationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SignedParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Trust10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Trust13
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|exceptions
operator|.
name|Base64DecodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|keys
operator|.
name|content
operator|.
name|X509Data
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|keys
operator|.
name|content
operator|.
name|keyvalues
operator|.
name|DSAKeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|keys
operator|.
name|content
operator|.
name|keyvalues
operator|.
name|RSAKeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|utils
operator|.
name|Base64
import|;
end_import

begin_comment
comment|/**  * An abstract class with some functionality to invoke on a SecurityTokenService (STS) via the  * WS-Trust protocol.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSTSClient
implements|implements
name|Configurable
implements|,
name|InterceptorProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractSTSClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Bus
name|bus
decl_stmt|;
specifier|protected
name|String
name|name
init|=
literal|"default.sts-client"
decl_stmt|;
specifier|protected
name|Client
name|client
decl_stmt|;
specifier|protected
name|String
name|location
decl_stmt|;
specifier|protected
name|String
name|wsdlLocation
decl_stmt|;
specifier|protected
name|QName
name|serviceName
decl_stmt|;
specifier|protected
name|QName
name|endpointName
decl_stmt|;
specifier|protected
name|Policy
name|policy
decl_stmt|;
specifier|protected
name|String
name|soapVersion
init|=
name|SoapBindingConstants
operator|.
name|SOAP11_BINDING_ID
decl_stmt|;
specifier|protected
name|int
name|keySize
init|=
literal|256
decl_stmt|;
specifier|protected
name|boolean
name|requiresEntropy
init|=
literal|true
decl_stmt|;
specifier|protected
name|Element
name|template
decl_stmt|;
specifier|protected
name|Object
name|claims
decl_stmt|;
specifier|protected
name|CallbackHandler
name|claimsCallbackHandler
decl_stmt|;
specifier|protected
name|AlgorithmSuite
name|algorithmSuite
decl_stmt|;
specifier|protected
name|String
name|namespace
init|=
name|STSUtils
operator|.
name|WST_NS_05_12
decl_stmt|;
specifier|protected
name|String
name|addressingNamespace
init|=
literal|"http://www.w3.org/2005/08/addressing"
decl_stmt|;
specifier|protected
name|String
name|wspNamespace
init|=
literal|"http://www.w3.org/ns/ws-policy"
decl_stmt|;
specifier|protected
name|Object
name|onBehalfOf
decl_stmt|;
specifier|protected
name|boolean
name|enableAppliesTo
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|useCertificateForConfirmationKeyInfo
decl_stmt|;
specifier|protected
name|boolean
name|isSecureConv
decl_stmt|;
specifier|protected
name|boolean
name|isSpnego
decl_stmt|;
specifier|protected
name|boolean
name|enableLifetime
decl_stmt|;
specifier|protected
name|int
name|ttl
init|=
literal|300
decl_stmt|;
specifier|protected
name|boolean
name|sendRenewing
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|allowRenewing
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|allowRenewingAfterExpiry
decl_stmt|;
specifier|protected
name|Object
name|actAs
decl_stmt|;
specifier|protected
name|String
name|tokenType
decl_stmt|;
specifier|protected
name|String
name|keyType
decl_stmt|;
specifier|protected
name|boolean
name|sendKeyType
init|=
literal|true
decl_stmt|;
specifier|protected
name|Message
name|message
decl_stmt|;
specifier|protected
name|String
name|context
decl_stmt|;
specifier|protected
name|X509Certificate
name|useKeyCertificate
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|in
init|=
operator|new
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|out
init|=
operator|new
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|outFault
init|=
operator|new
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|inFault
init|=
operator|new
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Feature
argument_list|>
name|features
decl_stmt|;
specifier|public
name|AbstractSTSClient
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|String
name|getBeanName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setBeanName
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|name
operator|=
name|s
expr_stmt|;
block|}
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
specifier|public
name|void
name|setTtl
parameter_list|(
name|int
name|ttl
parameter_list|)
block|{
name|this
operator|.
name|ttl
operator|=
name|ttl
expr_stmt|;
block|}
specifier|public
name|void
name|setEnableLifetime
parameter_list|(
name|boolean
name|enableLifetime
parameter_list|)
block|{
name|this
operator|.
name|enableLifetime
operator|=
name|enableLifetime
expr_stmt|;
block|}
specifier|public
name|void
name|setSendRenewing
parameter_list|(
name|boolean
name|sendRenewing
parameter_list|)
block|{
name|this
operator|.
name|sendRenewing
operator|=
name|sendRenewing
expr_stmt|;
block|}
comment|/**      * Sets the WS-P policy that is applied to communications between this client and the remote server      * if no value is supplied for {@link #setWsdlLocation(String)}.      *<p/>      * Accepts {@link Policy} or {@link Element} as input.      *      * @param newPolicy the policy object      *      * @throws IllegalArgumentException if {@code newPolicy} is not one of the supported types.      */
specifier|public
name|void
name|setPolicy
parameter_list|(
name|Object
name|newPolicy
parameter_list|)
block|{
if|if
condition|(
name|newPolicy
operator|instanceof
name|Policy
condition|)
block|{
name|this
operator|.
name|setPolicyInternal
argument_list|(
operator|(
name|Policy
operator|)
name|newPolicy
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newPolicy
operator|instanceof
name|Element
condition|)
block|{
name|this
operator|.
name|setPolicyInternal
argument_list|(
operator|(
name|Element
operator|)
name|newPolicy
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newPolicy
operator|instanceof
name|String
condition|)
block|{
name|this
operator|.
name|setPolicyInternal
argument_list|(
operator|(
name|String
operator|)
name|newPolicy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported policy object.  Type must be "
operator|+
literal|"org.apache.neethi.Policy or org.w3c.dom.Element."
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setSoap12
parameter_list|()
block|{
name|soapVersion
operator|=
name|SoapBindingConstants
operator|.
name|SOAP12_BINDING_ID
expr_stmt|;
block|}
specifier|public
name|void
name|setSoap11
parameter_list|()
block|{
name|soapVersion
operator|=
name|SoapBindingConstants
operator|.
name|SOAP11_BINDING_ID
expr_stmt|;
block|}
specifier|public
name|void
name|setSoap11
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
condition|)
block|{
name|setSoap11
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSoap12
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setAddressingNamespace
parameter_list|(
name|String
name|ad
parameter_list|)
block|{
name|addressingNamespace
operator|=
name|ad
expr_stmt|;
block|}
specifier|public
name|void
name|setTrust
parameter_list|(
name|Trust10
name|trust
parameter_list|)
block|{
if|if
condition|(
name|trust
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|trust
operator|instanceof
name|Trust13
condition|)
block|{
name|namespace
operator|=
name|STSUtils
operator|.
name|WST_NS_05_12
expr_stmt|;
block|}
else|else
block|{
name|namespace
operator|=
name|STSUtils
operator|.
name|WST_NS_05_02
expr_stmt|;
block|}
name|requiresEntropy
operator|=
name|trust
operator|.
name|isRequireClientEntropy
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isRequiresEntropy
parameter_list|()
block|{
return|return
name|requiresEntropy
return|;
block|}
specifier|public
name|void
name|setRequiresEntropy
parameter_list|(
name|boolean
name|requiresEntropy
parameter_list|)
block|{
name|this
operator|.
name|requiresEntropy
operator|=
name|requiresEntropy
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSecureConv
parameter_list|()
block|{
return|return
name|isSecureConv
return|;
block|}
specifier|public
name|void
name|setSecureConv
parameter_list|(
name|boolean
name|secureConv
parameter_list|)
block|{
name|this
operator|.
name|isSecureConv
operator|=
name|secureConv
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSpnego
parameter_list|()
block|{
return|return
name|isSpnego
return|;
block|}
specifier|public
name|void
name|setSpnego
parameter_list|(
name|boolean
name|spnego
parameter_list|)
block|{
name|this
operator|.
name|isSpnego
operator|=
name|spnego
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAllowRenewing
parameter_list|()
block|{
return|return
name|allowRenewing
return|;
block|}
specifier|public
name|void
name|setAllowRenewing
parameter_list|(
name|boolean
name|allowRenewing
parameter_list|)
block|{
name|this
operator|.
name|allowRenewing
operator|=
name|allowRenewing
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAllowRenewingAfterExpiry
parameter_list|()
block|{
return|return
name|allowRenewingAfterExpiry
return|;
block|}
specifier|public
name|void
name|setAllowRenewingAfterExpiry
parameter_list|(
name|boolean
name|allowRenewingAfterExpiry
parameter_list|)
block|{
name|this
operator|.
name|allowRenewingAfterExpiry
operator|=
name|allowRenewingAfterExpiry
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEnableAppliesTo
parameter_list|()
block|{
return|return
name|enableAppliesTo
return|;
block|}
specifier|public
name|void
name|setEnableAppliesTo
parameter_list|(
name|boolean
name|enableAppliesTo
parameter_list|)
block|{
name|this
operator|.
name|enableAppliesTo
operator|=
name|enableAppliesTo
expr_stmt|;
block|}
specifier|public
name|String
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
specifier|public
name|void
name|setContext
parameter_list|(
name|String
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|void
name|setAlgorithmSuite
parameter_list|(
name|AlgorithmSuite
name|ag
parameter_list|)
block|{
name|algorithmSuite
operator|=
name|ag
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getRequestContext
parameter_list|()
block|{
return|return
name|ctx
return|;
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|p
parameter_list|)
block|{
name|ctx
operator|.
name|putAll
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|ctx
return|;
block|}
specifier|public
name|void
name|setWsdlLocation
parameter_list|(
name|String
name|wsdl
parameter_list|)
block|{
name|wsdlLocation
operator|=
name|wsdl
expr_stmt|;
block|}
specifier|public
name|String
name|getWsdlLocation
parameter_list|()
block|{
return|return
name|wsdlLocation
return|;
block|}
specifier|public
name|void
name|setServiceName
parameter_list|(
name|String
name|qn
parameter_list|)
block|{
name|serviceName
operator|=
name|QName
operator|.
name|valueOf
argument_list|(
name|qn
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setEndpointName
parameter_list|(
name|String
name|qn
parameter_list|)
block|{
name|endpointName
operator|=
name|QName
operator|.
name|valueOf
argument_list|(
name|qn
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setServiceQName
parameter_list|(
name|QName
name|qn
parameter_list|)
block|{
name|serviceName
operator|=
name|qn
expr_stmt|;
block|}
specifier|public
name|QName
name|getServiceQName
parameter_list|()
block|{
return|return
name|serviceName
return|;
block|}
specifier|public
name|void
name|setEndpointQName
parameter_list|(
name|QName
name|qn
parameter_list|)
block|{
name|endpointName
operator|=
name|qn
expr_stmt|;
block|}
specifier|public
name|QName
name|getEndpointQName
parameter_list|()
block|{
return|return
name|endpointName
return|;
block|}
specifier|public
name|void
name|setActAs
parameter_list|(
name|Object
name|actAs
parameter_list|)
block|{
name|this
operator|.
name|actAs
operator|=
name|actAs
expr_stmt|;
block|}
specifier|public
name|void
name|setKeySize
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|keySize
operator|=
name|i
expr_stmt|;
block|}
specifier|public
name|int
name|getKeySize
parameter_list|()
block|{
return|return
name|keySize
return|;
block|}
specifier|public
name|void
name|setTokenType
parameter_list|(
name|String
name|tokenType
parameter_list|)
block|{
name|this
operator|.
name|tokenType
operator|=
name|tokenType
expr_stmt|;
block|}
specifier|public
name|String
name|getTokenType
parameter_list|()
block|{
return|return
name|tokenType
return|;
block|}
specifier|public
name|void
name|setSendKeyType
parameter_list|(
name|boolean
name|sendKeyType
parameter_list|)
block|{
name|this
operator|.
name|sendKeyType
operator|=
name|sendKeyType
expr_stmt|;
block|}
specifier|public
name|void
name|setKeyType
parameter_list|(
name|String
name|keyType
parameter_list|)
block|{
name|this
operator|.
name|keyType
operator|=
name|keyType
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|void
name|setOnBehalfOfElement
parameter_list|(
name|Element
name|onBehalfOfElement
parameter_list|)
block|{
name|this
operator|.
name|onBehalfOf
operator|=
name|onBehalfOfElement
expr_stmt|;
block|}
specifier|public
name|void
name|setOnBehalfOf
parameter_list|(
name|Object
name|onBehalfOf
parameter_list|)
block|{
name|this
operator|.
name|onBehalfOf
operator|=
name|onBehalfOf
expr_stmt|;
block|}
comment|/**      * Indicate whether to use the signer's public X509 certificate for the subject confirmation key info       * when creating a RequestsSecurityToken message. If the property is set to 'false', only the public key       * value will be provided in the request. If the property is set to 'true' the complete certificate will       * be sent in the request.      *       * Note: this setting is only applicable for assertions that use an asymmetric proof key      */
specifier|public
name|void
name|setUseCertificateForConfirmationKeyInfo
parameter_list|(
name|boolean
name|useCertificate
parameter_list|)
block|{
name|this
operator|.
name|useCertificateForConfirmationKeyInfo
operator|=
name|useCertificate
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseCertificateForConfirmationKeyInfo
parameter_list|()
block|{
return|return
name|useCertificateForConfirmationKeyInfo
return|;
block|}
specifier|protected
name|void
name|setPolicyInternal
parameter_list|(
name|Policy
name|newPolicy
parameter_list|)
block|{
name|this
operator|.
name|policy
operator|=
name|newPolicy
expr_stmt|;
if|if
condition|(
name|algorithmSuite
operator|==
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|policy
operator|.
name|getAlternatives
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|algorithmSuite
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|PolicyComponent
argument_list|>
name|p
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PolicyComponent
name|p2
range|:
name|p
control|)
block|{
if|if
condition|(
name|p2
operator|instanceof
name|AbstractBinding
condition|)
block|{
name|algorithmSuite
operator|=
operator|(
operator|(
name|AbstractBinding
operator|)
name|p2
operator|)
operator|.
name|getAlgorithmSuite
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|setPolicyInternal
parameter_list|(
name|Element
name|newPolicy
parameter_list|)
block|{
name|this
operator|.
name|setPolicyInternal
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyBuilder
operator|.
name|class
argument_list|)
operator|.
name|getPolicy
argument_list|(
name|newPolicy
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setPolicyInternal
parameter_list|(
name|String
name|policyReference
parameter_list|)
block|{
name|PolicyBuilder
name|builder
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|ReferenceResolver
name|resolver
init|=
operator|new
name|RemoteReferenceResolver
argument_list|(
literal|null
argument_list|,
name|builder
argument_list|)
decl_stmt|;
name|PolicyRegistry
name|registry
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyEngine
operator|.
name|class
argument_list|)
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
name|Policy
name|resolved
init|=
name|registry
operator|.
name|lookup
argument_list|(
name|policyReference
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|resolved
condition|)
block|{
name|this
operator|.
name|setPolicyInternal
argument_list|(
name|resolved
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|setPolicyInternal
argument_list|(
name|resolver
operator|.
name|resolveReference
argument_list|(
name|policyReference
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Client
name|getClient
parameter_list|()
throws|throws
name|BusException
throws|,
name|EndpointException
block|{
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|createClient
argument_list|()
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
specifier|public
name|void
name|configureViaEPR
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|,
name|boolean
name|useEPRWSAAddrAsMEXLocation
parameter_list|)
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|location
operator|=
name|EndpointReferenceUtils
operator|.
name|getAddress
argument_list|(
name|ref
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|location
operator|=
name|location
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"EPR address: "
operator|+
name|location
argument_list|)
expr_stmt|;
specifier|final
name|QName
name|sName
init|=
name|EndpointReferenceUtils
operator|.
name|getServiceName
argument_list|(
name|ref
argument_list|,
name|bus
argument_list|)
decl_stmt|;
if|if
condition|(
name|sName
operator|!=
literal|null
condition|)
block|{
name|serviceName
operator|=
name|sName
expr_stmt|;
specifier|final
name|QName
name|epName
init|=
name|EndpointReferenceUtils
operator|.
name|getPortQName
argument_list|(
name|ref
argument_list|,
name|bus
argument_list|)
decl_stmt|;
if|if
condition|(
name|epName
operator|!=
literal|null
condition|)
block|{
name|endpointName
operator|=
name|epName
expr_stmt|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"EPR endpoint: "
operator|+
name|serviceName
operator|+
literal|" "
operator|+
name|endpointName
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|wsdlLoc
init|=
name|EndpointReferenceUtils
operator|.
name|getWSDLLocation
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|wsdlLoc
operator|!=
literal|null
condition|)
block|{
name|wsdlLocation
operator|=
name|wsdlLoc
expr_stmt|;
block|}
name|String
name|mexLoc
init|=
name|findMEXLocation
argument_list|(
name|ref
argument_list|,
name|useEPRWSAAddrAsMEXLocation
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"WS-MEX location: "
operator|+
name|mexLoc
argument_list|)
expr_stmt|;
if|if
condition|(
name|mexLoc
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|JaxWsProxyFactoryBean
name|proxyFac
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
name|proxyFac
operator|.
name|setBindingId
argument_list|(
name|soapVersion
argument_list|)
expr_stmt|;
name|proxyFac
operator|.
name|setAddress
argument_list|(
name|mexLoc
argument_list|)
expr_stmt|;
name|MetadataExchange
name|exc
init|=
name|proxyFac
operator|.
name|create
argument_list|(
name|MetadataExchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|Metadata
name|metadata
init|=
name|exc
operator|.
name|get2004
argument_list|()
decl_stmt|;
name|Definition
name|definition
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Schema
argument_list|>
name|schemas
init|=
operator|new
name|ArrayList
argument_list|<
name|Schema
argument_list|>
argument_list|()
decl_stmt|;
comment|// Parse the MetadataSections into WSDL definition + associated schemas
for|for
control|(
name|MetadataSection
name|s
range|:
name|metadata
operator|.
name|getMetadataSection
argument_list|()
control|)
block|{
if|if
condition|(
literal|"http://schemas.xmlsoap.org/wsdl/"
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getDialect
argument_list|()
argument_list|)
condition|)
block|{
name|definition
operator|=
name|bus
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
operator|.
name|getDefinition
argument_list|(
operator|(
name|Element
operator|)
name|s
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"http://www.w3.org/2001/XMLSchema"
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getDialect
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|schemaElement
init|=
operator|(
name|Element
operator|)
name|s
operator|.
name|getAny
argument_list|()
decl_stmt|;
name|QName
name|schemaName
init|=
operator|new
name|QName
argument_list|(
name|schemaElement
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|schemaElement
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
name|WSDLManager
name|wsdlManager
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExtensibilityElement
name|exElement
init|=
name|wsdlManager
operator|.
name|getExtensionRegistry
argument_list|()
operator|.
name|createExtension
argument_list|(
name|Types
operator|.
name|class
argument_list|,
name|schemaName
argument_list|)
decl_stmt|;
operator|(
operator|(
name|Schema
operator|)
name|exElement
operator|)
operator|.
name|setElement
argument_list|(
name|schemaElement
argument_list|)
expr_stmt|;
name|schemas
operator|.
name|add
argument_list|(
operator|(
name|Schema
operator|)
name|exElement
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|definition
operator|!=
literal|null
condition|)
block|{
comment|// Add any extra schemas to the WSDL definition
for|for
control|(
name|Schema
name|schema
range|:
name|schemas
control|)
block|{
name|definition
operator|.
name|getTypes
argument_list|()
operator|.
name|addExtensibilityElement
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
name|WSDLServiceFactory
name|factory
init|=
operator|new
name|WSDLServiceFactory
argument_list|(
name|bus
argument_list|,
name|definition
argument_list|)
decl_stmt|;
name|SourceDataBinding
name|dataBinding
init|=
operator|new
name|SourceDataBinding
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setDataBinding
argument_list|(
name|dataBinding
argument_list|)
expr_stmt|;
name|Service
name|service
init|=
name|factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|service
operator|.
name|setDataBinding
argument_list|(
name|dataBinding
argument_list|)
expr_stmt|;
comment|// Get the endpoint + service names by matching the 'location' to the
comment|// address in the WSDL. If the 'location' is 'anonymous' then just fall
comment|// back to the first service + endpoint name in the WSDL, if the endpoint
comment|// name is not defined in the Metadata
name|List
argument_list|<
name|ServiceInfo
argument_list|>
name|services
init|=
name|service
operator|.
name|getServiceInfos
argument_list|()
decl_stmt|;
name|String
name|anonymousAddress
init|=
literal|"http://www.w3.org/2005/08/addressing/anonymous"
decl_stmt|;
if|if
condition|(
operator|!
name|anonymousAddress
operator|.
name|equals
argument_list|(
name|location
argument_list|)
condition|)
block|{
for|for
control|(
name|ServiceInfo
name|serv
range|:
name|services
control|)
block|{
for|for
control|(
name|EndpointInfo
name|ei
range|:
name|serv
operator|.
name|getEndpoints
argument_list|()
control|)
block|{
if|if
condition|(
name|ei
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|endpointName
operator|=
name|ei
operator|.
name|getName
argument_list|()
expr_stmt|;
name|serviceName
operator|=
name|serv
operator|.
name|getName
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Matched endpoint to location"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|EndpointInfo
name|ei
init|=
name|service
operator|.
name|getEndpointInfo
argument_list|(
name|endpointName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ei
operator|==
literal|null
operator|&&
name|anonymousAddress
operator|.
name|equals
argument_list|(
name|location
argument_list|)
operator|&&
operator|!
name|services
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEndpoints
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Anonymous location so taking first endpoint"
argument_list|)
expr_stmt|;
name|serviceName
operator|=
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|endpointName
operator|=
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEndpoints
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|ei
operator|=
name|service
operator|.
name|getEndpointInfo
argument_list|(
name|endpointName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ei
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|TrustException
argument_list|(
name|LOG
argument_list|,
literal|"ADDRESS_NOT_MATCHED"
argument_list|,
name|location
argument_list|)
throw|;
block|}
if|if
condition|(
name|location
operator|!=
literal|null
operator|&&
operator|!
name|anonymousAddress
operator|.
name|equals
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|ei
operator|.
name|setAddress
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|Endpoint
name|endpoint
init|=
operator|new
name|EndpointImpl
argument_list|(
name|bus
argument_list|,
name|service
argument_list|,
name|ei
argument_list|)
decl_stmt|;
name|client
operator|=
operator|new
name|ClientImpl
argument_list|(
name|bus
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|TrustException
argument_list|(
name|LOG
argument_list|,
literal|"WS_MEX_ERROR"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|String
name|findMEXLocation
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|,
name|boolean
name|useEPRWSAAddrAsMEXLocation
parameter_list|)
block|{
if|if
condition|(
name|ref
operator|.
name|getMetadata
argument_list|()
operator|!=
literal|null
operator|&&
name|ref
operator|.
name|getMetadata
argument_list|()
operator|.
name|getAny
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|any
range|:
name|ref
operator|.
name|getMetadata
argument_list|()
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|any
operator|instanceof
name|Element
condition|)
block|{
name|String
name|addr
init|=
name|findMEXLocation
argument_list|(
operator|(
name|Element
operator|)
name|any
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|!=
literal|null
condition|)
block|{
return|return
name|addr
return|;
block|}
block|}
block|}
block|}
return|return
name|useEPRWSAAddrAsMEXLocation
condition|?
name|EndpointReferenceUtils
operator|.
name|getAddress
argument_list|(
name|ref
argument_list|)
else|:
literal|null
return|;
block|}
specifier|protected
name|String
name|findMEXLocation
parameter_list|(
name|Element
name|ref
parameter_list|)
block|{
name|Element
name|el
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|ref
argument_list|)
decl_stmt|;
while|while
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|el
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Address"
argument_list|)
operator|&&
name|VersionTransformer
operator|.
name|isSupported
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
literal|"MetadataReference"
operator|.
name|equals
argument_list|(
name|ref
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|el
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|ad
init|=
name|findMEXLocation
argument_list|(
name|el
argument_list|)
decl_stmt|;
if|if
condition|(
name|ad
operator|!=
literal|null
condition|)
block|{
return|return
name|ad
return|;
block|}
block|}
name|el
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|createClient
parameter_list|()
throws|throws
name|BusException
throws|,
name|EndpointException
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|wsdlLocation
operator|!=
literal|null
condition|)
block|{
name|WSDLServiceFactory
name|factory
init|=
operator|new
name|WSDLServiceFactory
argument_list|(
name|bus
argument_list|,
name|wsdlLocation
argument_list|,
name|serviceName
argument_list|)
decl_stmt|;
name|SourceDataBinding
name|dataBinding
init|=
operator|new
name|SourceDataBinding
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setDataBinding
argument_list|(
name|dataBinding
argument_list|)
expr_stmt|;
name|Service
name|service
init|=
name|factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|service
operator|.
name|setDataBinding
argument_list|(
name|dataBinding
argument_list|)
expr_stmt|;
name|EndpointInfo
name|ei
init|=
name|service
operator|.
name|getEndpointInfo
argument_list|(
name|endpointName
argument_list|)
decl_stmt|;
name|Endpoint
name|endpoint
init|=
operator|new
name|EndpointImpl
argument_list|(
name|bus
argument_list|,
name|service
argument_list|,
name|ei
argument_list|)
decl_stmt|;
name|client
operator|=
operator|new
name|ClientImpl
argument_list|(
name|bus
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|Endpoint
name|endpoint
init|=
name|STSUtils
operator|.
name|createSTSEndpoint
argument_list|(
name|bus
argument_list|,
name|namespace
argument_list|,
literal|null
argument_list|,
name|location
argument_list|,
name|soapVersion
argument_list|,
name|policy
argument_list|,
name|endpointName
argument_list|)
decl_stmt|;
name|client
operator|=
operator|new
name|ClientImpl
argument_list|(
name|bus
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|TrustException
argument_list|(
name|LOG
argument_list|,
literal|"NO_LOCATION"
argument_list|)
throw|;
block|}
name|client
operator|.
name|getInFaultInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|inFault
argument_list|)
expr_stmt|;
name|client
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|client
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|client
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|outFault
argument_list|)
expr_stmt|;
name|in
operator|=
literal|null
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
name|inFault
operator|=
literal|null
expr_stmt|;
name|outFault
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|features
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|features
control|)
block|{
name|f
operator|.
name|initialize
argument_list|(
name|client
argument_list|,
name|bus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|BindingOperationInfo
name|findOperation
parameter_list|(
name|String
name|suffix
parameter_list|)
block|{
name|BindingInfo
name|bi
init|=
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|getBindingInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|bi
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|SoapOperationInfo
name|soi
init|=
name|boi
operator|.
name|getExtensor
argument_list|(
name|SoapOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|soapAction
init|=
name|soi
operator|!=
literal|null
condition|?
name|soi
operator|.
name|getAction
argument_list|()
else|:
literal|null
decl_stmt|;
name|Object
name|o
init|=
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getExtensionAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://www.w3.org/2007/05/addressing/metadata"
argument_list|,
literal|"Action"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|QName
condition|)
block|{
name|o
operator|=
operator|(
operator|(
name|QName
operator|)
name|o
operator|)
operator|.
name|getLocalPart
argument_list|()
expr_stmt|;
block|}
name|String
name|wsamAction
init|=
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|o
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|soapAction
operator|!=
literal|null
operator|&&
name|soapAction
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
operator|)
operator|||
operator|(
name|wsamAction
operator|!=
literal|null
operator|&&
name|wsamAction
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
operator|)
condition|)
block|{
name|PolicyEngine
name|pe
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|PolicyEngine
operator|.
name|class
argument_list|)
decl_stmt|;
name|Conduit
name|conduit
init|=
name|client
operator|.
name|getConduit
argument_list|()
decl_stmt|;
name|EffectivePolicy
name|effectivePolicy
init|=
name|pe
operator|.
name|getEffectiveClientRequestPolicy
argument_list|(
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
argument_list|,
name|boi
argument_list|,
name|conduit
argument_list|,
name|PhaseInterceptorChain
operator|.
name|getCurrentMessage
argument_list|()
argument_list|)
decl_stmt|;
name|setPolicyInternal
argument_list|(
name|effectivePolicy
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|boi
return|;
block|}
block|}
comment|//operation is not correct as the Action is not set correctly.   Let's see if
comment|//we can at least find it by name and then set the action and such manually later.
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|bi
operator|.
name|getOperations
argument_list|()
control|)
block|{
if|if
condition|(
name|suffix
operator|.
name|endsWith
argument_list|(
name|boi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|boi
return|;
block|}
block|}
comment|//Still didn't find anything useful
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|bi
operator|.
name|getOperations
argument_list|()
control|)
block|{
if|if
condition|(
name|boi
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|MessagePartInfo
name|mpi
init|=
name|boi
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getMessagePart
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"RequestSecurityToken"
operator|.
name|equals
argument_list|(
name|mpi
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|boi
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Make an "Issue" invocation and return the response as a STSResponse Object      */
specifier|protected
name|STSResponse
name|issue
parameter_list|(
name|String
name|appliesTo
parameter_list|,
name|String
name|action
parameter_list|,
name|String
name|requestType
parameter_list|,
name|String
name|binaryExchange
parameter_list|)
throws|throws
name|Exception
block|{
name|createClient
argument_list|()
expr_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|findOperation
argument_list|(
literal|"/RST/Issue"
argument_list|)
decl_stmt|;
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|putAll
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SoapBindingConstants
operator|.
name|SOAP_ACTION
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isSecureConv
condition|)
block|{
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SoapBindingConstants
operator|.
name|SOAP_ACTION
argument_list|,
name|namespace
operator|+
literal|"/RST/SCT"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SoapBindingConstants
operator|.
name|SOAP_ACTION
argument_list|,
name|namespace
operator|+
literal|"/RST/Issue"
argument_list|)
expr_stmt|;
block|}
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wst"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|null
argument_list|,
literal|"Context"
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|boolean
name|wroteKeySize
init|=
literal|false
decl_stmt|;
name|String
name|keyTypeTemplate
init|=
literal|null
decl_stmt|;
name|String
name|sptt
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|template
operator|!=
literal|null
operator|&&
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|template
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|useSecondaryParameters
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"SecondaryParameters"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
name|Element
name|tl
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|template
argument_list|)
decl_stmt|;
while|while
condition|(
name|tl
operator|!=
literal|null
condition|)
block|{
name|StaxUtils
operator|.
name|copy
argument_list|(
name|tl
argument_list|,
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"KeyType"
operator|.
name|equals
argument_list|(
name|tl
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|keyTypeTemplate
operator|=
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|tl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"KeySize"
operator|.
name|equals
argument_list|(
name|tl
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|wroteKeySize
operator|=
literal|true
expr_stmt|;
name|keySize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|tl
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"TokenType"
operator|.
name|equals
argument_list|(
name|tl
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|sptt
operator|=
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|tl
argument_list|)
expr_stmt|;
block|}
name|tl
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|tl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|useSecondaryParameters
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isSpnego
condition|)
block|{
name|tokenType
operator|=
name|STSUtils
operator|.
name|getTokenTypeSCT
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|sendKeyType
operator|=
literal|false
expr_stmt|;
block|}
name|addRequestType
argument_list|(
name|requestType
argument_list|,
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
name|enableAppliesTo
condition|)
block|{
name|addAppliesTo
argument_list|(
name|writer
argument_list|,
name|appliesTo
argument_list|)
expr_stmt|;
block|}
name|addClaims
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|Element
name|onBehalfOfToken
init|=
name|getOnBehalfOfToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|onBehalfOfToken
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"OnBehalfOf"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
name|onBehalfOfToken
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sptt
operator|==
literal|null
condition|)
block|{
name|addTokenType
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isSecureConv
operator|||
name|enableLifetime
condition|)
block|{
name|addLifetime
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keyTypeTemplate
operator|==
literal|null
condition|)
block|{
name|keyTypeTemplate
operator|=
name|writeKeyType
argument_list|(
name|writer
argument_list|,
name|keyType
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|requestorEntropy
init|=
literal|null
decl_stmt|;
name|X509Certificate
name|cert
init|=
literal|null
decl_stmt|;
name|Crypto
name|crypto
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keySize
operator|<=
literal|0
condition|)
block|{
name|keySize
operator|=
literal|256
expr_stmt|;
block|}
if|if
condition|(
name|keyTypeTemplate
operator|!=
literal|null
operator|&&
name|keyTypeTemplate
operator|.
name|endsWith
argument_list|(
literal|"SymmetricKey"
argument_list|)
condition|)
block|{
name|requestorEntropy
operator|=
name|writeElementsForRSTSymmetricKey
argument_list|(
name|writer
argument_list|,
name|wroteKeySize
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyTypeTemplate
operator|!=
literal|null
operator|&&
name|keyTypeTemplate
operator|.
name|endsWith
argument_list|(
literal|"PublicKey"
argument_list|)
condition|)
block|{
comment|// Use the given cert, or else get it from a Crypto instance
if|if
condition|(
name|useKeyCertificate
operator|!=
literal|null
condition|)
block|{
name|cert
operator|=
name|useKeyCertificate
expr_stmt|;
block|}
else|else
block|{
name|crypto
operator|=
name|createCrypto
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cert
operator|=
name|getCert
argument_list|(
name|crypto
argument_list|)
expr_stmt|;
block|}
name|writeElementsForRSTPublicKey
argument_list|(
name|writer
argument_list|,
name|cert
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isSpnego
operator|||
name|isSecureConv
condition|)
block|{
name|addKeySize
argument_list|(
name|keySize
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|binaryExchange
operator|!=
literal|null
condition|)
block|{
name|addBinaryExchange
argument_list|(
name|binaryExchange
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
name|Element
name|actAsSecurityToken
init|=
name|getActAsToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|actAsSecurityToken
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|STSUtils
operator|.
name|WST_NS_08_02
argument_list|,
literal|"ActAs"
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
name|actAsSecurityToken
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
comment|// Write out renewal semantics
if|if
condition|(
name|sendRenewing
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"Renewing"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|allowRenewing
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|null
argument_list|,
literal|"Allow"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allowRenewing
operator|&&
name|allowRenewingAfterExpiry
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|null
argument_list|,
literal|"OK"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|Object
name|obj
index|[]
init|=
name|client
operator|.
name|invoke
argument_list|(
name|boi
argument_list|,
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|STSResponse
argument_list|(
operator|(
name|DOMSource
operator|)
name|obj
index|[
literal|0
index|]
argument_list|,
name|requestorEntropy
argument_list|,
name|cert
argument_list|,
name|crypto
argument_list|)
return|;
block|}
comment|/**      * Get the "OnBehalfOf" element to be sent to the STS.      */
specifier|public
name|Element
name|getOnBehalfOfToken
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getDelegationSecurityToken
argument_list|(
name|this
operator|.
name|onBehalfOf
argument_list|)
return|;
block|}
comment|/**      * Get the "ActAs" element to be sent to the STS.      */
specifier|public
name|Element
name|getActAsToken
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getDelegationSecurityToken
argument_list|(
name|this
operator|.
name|actAs
argument_list|)
return|;
block|}
specifier|protected
name|Element
name|getDelegationSecurityToken
parameter_list|(
name|Object
name|delegationObject
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|delegationObject
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|isString
init|=
name|delegationObject
operator|instanceof
name|String
decl_stmt|;
specifier|final
name|boolean
name|isElement
init|=
name|delegationObject
operator|instanceof
name|Element
decl_stmt|;
specifier|final
name|boolean
name|isCallbackHandler
init|=
name|delegationObject
operator|instanceof
name|CallbackHandler
decl_stmt|;
if|if
condition|(
name|isString
operator|||
name|isElement
operator|||
name|isCallbackHandler
condition|)
block|{
if|if
condition|(
name|isString
condition|)
block|{
specifier|final
name|Document
name|doc
init|=
name|StaxUtils
operator|.
name|read
argument_list|(
operator|new
name|StringReader
argument_list|(
operator|(
name|String
operator|)
name|delegationObject
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|doc
operator|.
name|getDocumentElement
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|isElement
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|delegationObject
return|;
block|}
else|else
block|{
name|DelegationCallback
name|callback
init|=
operator|new
name|DelegationCallback
argument_list|(
name|message
argument_list|)
decl_stmt|;
operator|(
operator|(
name|CallbackHandler
operator|)
name|delegationObject
operator|)
operator|.
name|handle
argument_list|(
operator|new
name|Callback
index|[]
block|{
name|callback
block|}
argument_list|)
expr_stmt|;
return|return
name|callback
operator|.
name|getToken
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|byte
index|[]
name|writeElementsForRSTSymmetricKey
parameter_list|(
name|W3CDOMStreamWriter
name|writer
parameter_list|,
name|boolean
name|wroteKeySize
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|requestorEntropy
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|wroteKeySize
condition|)
block|{
name|addKeySize
argument_list|(
name|keySize
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requiresEntropy
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"Entropy"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"BinarySecret"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"Type"
argument_list|,
name|namespace
operator|+
literal|"/Nonce"
argument_list|)
expr_stmt|;
if|if
condition|(
name|algorithmSuite
operator|==
literal|null
condition|)
block|{
name|requestorEntropy
operator|=
name|WSSecurityUtil
operator|.
name|generateNonce
argument_list|(
name|keySize
operator|/
literal|8
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AlgorithmSuiteType
name|algType
init|=
name|algorithmSuite
operator|.
name|getAlgorithmSuiteType
argument_list|()
decl_stmt|;
name|requestorEntropy
operator|=
name|WSSecurityUtil
operator|.
name|generateNonce
argument_list|(
name|algType
operator|.
name|getMaximumSymmetricKeyLength
argument_list|()
operator|/
literal|8
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|writeCharacters
argument_list|(
name|Base64
operator|.
name|encode
argument_list|(
name|requestorEntropy
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"ComputedKeyAlgorithm"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/CK/PSHA1"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
return|return
name|requestorEntropy
return|;
block|}
specifier|protected
name|void
name|writeElementsForRSTPublicKey
parameter_list|(
name|W3CDOMStreamWriter
name|writer
parameter_list|,
name|X509Certificate
name|cert
parameter_list|)
throws|throws
name|Exception
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"UseKey"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"ds"
argument_list|,
literal|"KeyInfo"
argument_list|,
literal|"http://www.w3.org/2000/09/xmldsig#"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"ds"
argument_list|,
literal|"http://www.w3.org/2000/09/xmldsig#"
argument_list|)
expr_stmt|;
name|boolean
name|useCert
init|=
name|useCertificateForConfirmationKeyInfo
decl_stmt|;
name|String
name|useCertStr
init|=
operator|(
name|String
operator|)
name|getProperty
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_USE_CERT_FOR_KEYINFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|useCertStr
operator|!=
literal|null
condition|)
block|{
name|useCert
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|useCertStr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useCert
condition|)
block|{
name|X509Data
name|certElem
init|=
operator|new
name|X509Data
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
argument_list|)
decl_stmt|;
name|certElem
operator|.
name|addCertificate
argument_list|(
name|cert
argument_list|)
expr_stmt|;
name|writer
operator|.
name|getCurrentNode
argument_list|()
operator|.
name|appendChild
argument_list|(
name|certElem
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"ds"
argument_list|,
literal|"KeyValue"
argument_list|,
literal|"http://www.w3.org/2000/09/xmldsig#"
argument_list|)
expr_stmt|;
name|PublicKey
name|key
init|=
name|cert
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|String
name|pubKeyAlgo
init|=
name|key
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"DSA"
operator|.
name|equalsIgnoreCase
argument_list|(
name|pubKeyAlgo
argument_list|)
condition|)
block|{
name|DSAKeyValue
name|dsaKeyValue
init|=
operator|new
name|DSAKeyValue
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|writer
operator|.
name|getCurrentNode
argument_list|()
operator|.
name|appendChild
argument_list|(
name|dsaKeyValue
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"RSA"
operator|.
name|equalsIgnoreCase
argument_list|(
name|pubKeyAlgo
argument_list|)
condition|)
block|{
name|RSAKeyValue
name|rsaKeyValue
init|=
operator|new
name|RSAKeyValue
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|writer
operator|.
name|getCurrentNode
argument_list|()
operator|.
name|appendChild
argument_list|(
name|rsaKeyValue
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|addBinaryExchange
parameter_list|(
name|String
name|binaryExchange
parameter_list|,
name|W3CDOMStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"BinaryExchange"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"EncodingType"
argument_list|,
name|BinarySecurity
operator|.
name|BASE64_ENCODING
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"ValueType"
argument_list|,
name|namespace
operator|+
literal|"/spnego"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|binaryExchange
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|addKeySize
parameter_list|(
name|int
name|keysize
parameter_list|,
name|W3CDOMStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"KeySize"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|keysize
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|addRequestType
parameter_list|(
name|String
name|requestType
parameter_list|,
name|W3CDOMStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
name|requestType
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Element
name|getDocumentElement
parameter_list|(
name|DOMSource
name|ds
parameter_list|)
block|{
name|Node
name|nd
init|=
name|ds
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|nd
operator|instanceof
name|Document
condition|)
block|{
name|nd
operator|=
operator|(
operator|(
name|Document
operator|)
name|nd
operator|)
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|Element
operator|)
name|nd
return|;
block|}
comment|/**      * Make an "Renew" invocation and return the response as a STSResponse Object      */
specifier|public
name|STSResponse
name|renew
parameter_list|(
name|SecurityToken
name|tok
parameter_list|)
throws|throws
name|Exception
block|{
name|createClient
argument_list|()
expr_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|findOperation
argument_list|(
literal|"/RST/Renew"
argument_list|)
decl_stmt|;
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|putAll
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|remove
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSecureConv
condition|)
block|{
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SoapBindingConstants
operator|.
name|SOAP_ACTION
argument_list|,
name|namespace
operator|+
literal|"/RST/SCT/Renew"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SoapBindingConstants
operator|.
name|SOAP_ACTION
argument_list|,
name|namespace
operator|+
literal|"/RST/Renew"
argument_list|)
expr_stmt|;
block|}
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wst"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|null
argument_list|,
literal|"Context"
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
name|String
name|sptt
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|template
operator|!=
literal|null
operator|&&
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|template
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|useSecondaryParameters
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"SecondaryParameters"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
name|Element
name|tl
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|template
argument_list|)
decl_stmt|;
while|while
condition|(
name|tl
operator|!=
literal|null
condition|)
block|{
name|StaxUtils
operator|.
name|copy
argument_list|(
name|tl
argument_list|,
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"TokenType"
operator|.
name|equals
argument_list|(
name|tl
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|sptt
operator|=
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|tl
argument_list|)
expr_stmt|;
block|}
name|tl
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|tl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|useSecondaryParameters
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isSpnego
condition|)
block|{
name|tokenType
operator|=
name|STSUtils
operator|.
name|getTokenTypeSCT
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
name|addRequestType
argument_list|(
literal|"/Renew"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
name|enableAppliesTo
condition|)
block|{
name|addAppliesTo
argument_list|(
name|writer
argument_list|,
name|tok
operator|.
name|getIssuerAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sptt
operator|==
literal|null
condition|)
block|{
name|addTokenType
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isSecureConv
operator|||
name|enableLifetime
condition|)
block|{
name|addLifetime
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RenewTarget"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
name|tok
operator|.
name|getToken
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// Write out renewal semantics
if|if
condition|(
name|sendRenewing
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"Renewing"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|allowRenewing
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|null
argument_list|,
literal|"Allow"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allowRenewing
operator|&&
name|allowRenewingAfterExpiry
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|null
argument_list|,
literal|"OK"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|Object
name|obj
index|[]
init|=
name|client
operator|.
name|invoke
argument_list|(
name|boi
argument_list|,
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|STSResponse
argument_list|(
operator|(
name|DOMSource
operator|)
name|obj
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|PrimitiveAssertion
name|getAddressingAssertion
parameter_list|()
block|{
name|String
name|ns
init|=
literal|"http://schemas.xmlsoap.org/ws/2004/08/addressing/policy"
decl_stmt|;
name|String
name|local
init|=
literal|"UsingAddressing"
decl_stmt|;
if|if
condition|(
literal|"http://www.w3.org/2005/08/addressing"
operator|.
name|equals
argument_list|(
name|addressingNamespace
argument_list|)
condition|)
block|{
name|ns
operator|=
literal|"http://www.w3.org/2007/02/addressing/metadata"
expr_stmt|;
name|local
operator|=
literal|"Addressing"
expr_stmt|;
block|}
return|return
operator|new
name|PrimitiveAssertion
argument_list|(
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|local
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Make an "Validate" invocation and return the response as a STSResponse Object      */
specifier|protected
name|STSResponse
name|validate
parameter_list|(
name|SecurityToken
name|tok
parameter_list|,
name|String
name|tokentype
parameter_list|)
throws|throws
name|Exception
block|{
name|createClient
argument_list|()
expr_stmt|;
if|if
condition|(
name|tokentype
operator|==
literal|null
condition|)
block|{
name|tokentype
operator|=
name|tokenType
expr_stmt|;
block|}
if|if
condition|(
name|tokentype
operator|==
literal|null
condition|)
block|{
name|tokentype
operator|=
name|namespace
operator|+
literal|"/RSTR/Status"
expr_stmt|;
block|}
name|Policy
name|validatePolicy
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
name|ExactlyOne
name|one
init|=
operator|new
name|ExactlyOne
argument_list|()
decl_stmt|;
name|validatePolicy
operator|.
name|addPolicyComponent
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|All
name|all
init|=
operator|new
name|All
argument_list|()
decl_stmt|;
name|one
operator|.
name|addPolicyComponent
argument_list|(
name|all
argument_list|)
expr_stmt|;
name|all
operator|.
name|addAssertion
argument_list|(
name|getAddressingAssertion
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|putAll
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|,
name|tok
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|findOperation
argument_list|(
literal|"/RST/Validate"
argument_list|)
decl_stmt|;
if|if
condition|(
name|boi
operator|==
literal|null
condition|)
block|{
name|boi
operator|=
name|findOperation
argument_list|(
literal|"/RST/Issue"
argument_list|)
expr_stmt|;
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|PolicyConstants
operator|.
name|POLICY_OVERRIDE
argument_list|,
name|validatePolicy
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SoapBindingConstants
operator|.
name|SOAP_ACTION
argument_list|,
name|namespace
operator|+
literal|"/RST/Validate"
argument_list|)
expr_stmt|;
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wst"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/Validate"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|tokentype
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|addClaims
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"ValidateTarget"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|Element
name|el
init|=
name|tok
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
name|el
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|Object
name|o
index|[]
init|=
name|client
operator|.
name|invoke
argument_list|(
name|boi
argument_list|,
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|STSResponse
argument_list|(
operator|(
name|DOMSource
operator|)
name|o
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Make an "Cancel" invocation and return the response as a STSResponse Object      */
specifier|protected
name|STSResponse
name|cancel
parameter_list|(
name|SecurityToken
name|token
parameter_list|)
throws|throws
name|Exception
block|{
name|createClient
argument_list|()
expr_stmt|;
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|putAll
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|findOperation
argument_list|(
literal|"/RST/Cancel"
argument_list|)
decl_stmt|;
name|boolean
name|attachTokenDirectly
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|boi
operator|==
literal|null
condition|)
block|{
name|attachTokenDirectly
operator|=
literal|false
expr_stmt|;
name|boi
operator|=
name|findOperation
argument_list|(
literal|"/RST/Issue"
argument_list|)
expr_stmt|;
name|Policy
name|cancelPolicy
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
name|ExactlyOne
name|one
init|=
operator|new
name|ExactlyOne
argument_list|()
decl_stmt|;
name|cancelPolicy
operator|.
name|addPolicyComponent
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|All
name|all
init|=
operator|new
name|All
argument_list|()
decl_stmt|;
name|one
operator|.
name|addPolicyComponent
argument_list|(
name|all
argument_list|)
expr_stmt|;
name|all
operator|.
name|addAssertion
argument_list|(
name|getAddressingAssertion
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SecureConversationToken
name|secureConversationToken
init|=
operator|new
name|SecureConversationToken
argument_list|(
name|SPConstants
operator|.
name|SPVersion
operator|.
name|SP12
argument_list|,
name|SPConstants
operator|.
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS_TO_RECIPIENT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|secureConversationToken
operator|.
name|setOptional
argument_list|(
literal|true
argument_list|)
expr_stmt|;
class|class
name|InternalProtectionToken
extends|extends
name|ProtectionToken
block|{
specifier|public
name|InternalProtectionToken
parameter_list|(
name|SPVersion
name|version
parameter_list|,
name|Policy
name|nestedPolicy
parameter_list|)
block|{
name|super
argument_list|(
name|version
argument_list|,
name|nestedPolicy
argument_list|)
expr_stmt|;
name|super
operator|.
name|setToken
argument_list|(
name|secureConversationToken
argument_list|)
expr_stmt|;
block|}
block|}
name|DefaultSymmetricBinding
name|binding
init|=
operator|new
name|DefaultSymmetricBinding
argument_list|(
name|SPConstants
operator|.
name|SPVersion
operator|.
name|SP12
argument_list|,
operator|new
name|Policy
argument_list|()
argument_list|)
decl_stmt|;
name|all
operator|.
name|addAssertion
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|all
operator|.
name|addAssertion
argument_list|(
name|getAddressingAssertion
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setProtectionToken
argument_list|(
operator|new
name|InternalProtectionToken
argument_list|(
name|SPConstants
operator|.
name|SPVersion
operator|.
name|SP12
argument_list|,
operator|new
name|Policy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setIncludeTimestamp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setOnlySignEntireHeadersAndBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setProtectTokens
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|addrNamespace
init|=
name|addressingNamespace
decl_stmt|;
if|if
condition|(
name|addrNamespace
operator|==
literal|null
condition|)
block|{
name|addrNamespace
operator|=
literal|"http://www.w3.org/2005/08/addressing"
expr_stmt|;
block|}
name|List
argument_list|<
name|Header
argument_list|>
name|headers
init|=
operator|new
name|ArrayList
argument_list|<
name|Header
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|new
name|Header
argument_list|(
literal|"To"
argument_list|,
name|addrNamespace
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|new
name|Header
argument_list|(
literal|"From"
argument_list|,
name|addrNamespace
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|new
name|Header
argument_list|(
literal|"FaultTo"
argument_list|,
name|addrNamespace
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|new
name|Header
argument_list|(
literal|"ReplyTo"
argument_list|,
name|addrNamespace
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|new
name|Header
argument_list|(
literal|"Action"
argument_list|,
name|addrNamespace
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|new
name|Header
argument_list|(
literal|"MessageID"
argument_list|,
name|addrNamespace
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|new
name|Header
argument_list|(
literal|"RelatesTo"
argument_list|,
name|addrNamespace
argument_list|)
argument_list|)
expr_stmt|;
name|SignedParts
name|parts
init|=
operator|new
name|SignedParts
argument_list|(
name|SPConstants
operator|.
name|SPVersion
operator|.
name|SP12
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|parts
operator|.
name|setOptional
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|all
operator|.
name|addPolicyComponent
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|PolicyConstants
operator|.
name|POLICY_OVERRIDE
argument_list|,
name|cancelPolicy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isSecureConv
condition|)
block|{
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SoapBindingConstants
operator|.
name|SOAP_ACTION
argument_list|,
name|namespace
operator|+
literal|"/RST/SCT/Cancel"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|.
name|getRequestContext
argument_list|()
operator|.
name|put
argument_list|(
name|SoapBindingConstants
operator|.
name|SOAP_ACTION
argument_list|,
name|namespace
operator|+
literal|"/RST/Cancel"
argument_list|)
expr_stmt|;
block|}
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestSecurityToken"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wst"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"RequestType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/Cancel"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"CancelTarget"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|Element
name|el
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attachTokenDirectly
condition|)
block|{
name|el
operator|=
name|token
operator|.
name|getToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|el
operator|=
name|token
operator|.
name|getUnattachedReference
argument_list|()
expr_stmt|;
if|if
condition|(
name|el
operator|==
literal|null
condition|)
block|{
name|el
operator|=
name|token
operator|.
name|getAttachedReference
argument_list|()
expr_stmt|;
block|}
block|}
name|StaxUtils
operator|.
name|copy
argument_list|(
name|el
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|Object
index|[]
name|obj
init|=
name|client
operator|.
name|invoke
argument_list|(
name|boi
argument_list|,
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|STSResponse
argument_list|(
operator|(
name|DOMSource
operator|)
name|obj
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|useSecondaryParameters
parameter_list|()
block|{
return|return
operator|!
name|STSUtils
operator|.
name|WST_NS_05_02
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
return|;
block|}
specifier|protected
name|String
name|writeKeyType
parameter_list|(
name|W3CDOMStreamWriter
name|writer
parameter_list|,
name|String
name|keyTypeToWrite
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|isSecureConv
condition|)
block|{
if|if
condition|(
name|keyTypeToWrite
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|STSUtils
operator|.
name|getTokenTypeSCT
argument_list|(
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|keyTypeToWrite
operator|=
name|namespace
operator|+
literal|"/SymmetricKey"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|keyTypeToWrite
operator|==
literal|null
operator|&&
name|sendKeyType
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"KeyType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/SymmetricKey"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|keyTypeToWrite
operator|=
name|namespace
operator|+
literal|"/SymmetricKey"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyTypeToWrite
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"KeyType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|keyTypeToWrite
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
return|return
name|keyTypeToWrite
return|;
block|}
specifier|protected
name|X509Certificate
name|getCert
parameter_list|(
name|Crypto
name|crypto
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|crypto
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
literal|"No Crypto token properties are available to retrieve a certificate"
argument_list|,
name|LOG
argument_list|)
throw|;
block|}
name|String
name|alias
init|=
operator|(
name|String
operator|)
name|getProperty
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_USERNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|==
literal|null
condition|)
block|{
name|alias
operator|=
name|crypto
operator|.
name|getDefaultX509Identifier
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|alias
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
literal|"No alias specified for retrieving PublicKey"
argument_list|,
name|LOG
argument_list|)
throw|;
block|}
name|CryptoType
name|cryptoType
init|=
operator|new
name|CryptoType
argument_list|(
name|CryptoType
operator|.
name|TYPE
operator|.
name|ALIAS
argument_list|)
decl_stmt|;
name|cryptoType
operator|.
name|setAlias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|X509Certificate
name|certs
index|[]
init|=
name|crypto
operator|.
name|getX509Certificates
argument_list|(
name|cryptoType
argument_list|)
decl_stmt|;
if|if
condition|(
name|certs
operator|==
literal|null
operator|||
name|certs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
literal|"Could not get X509Certificate for alias "
operator|+
name|alias
argument_list|,
name|LOG
argument_list|)
throw|;
block|}
return|return
name|certs
index|[
literal|0
index|]
return|;
block|}
specifier|protected
name|void
name|addLifetime
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|Date
name|creationTime
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Date
name|expirationTime
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|expirationTime
operator|.
name|setTime
argument_list|(
name|creationTime
operator|.
name|getTime
argument_list|()
operator|+
operator|(
operator|(
name|long
operator|)
name|ttl
operator|*
literal|1000L
operator|)
argument_list|)
expr_stmt|;
name|XmlSchemaDateFormat
name|fmt
init|=
operator|new
name|XmlSchemaDateFormat
argument_list|()
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"Lifetime"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wsu"
argument_list|,
name|WSConstants
operator|.
name|WSU_NS
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wsu"
argument_list|,
literal|"Created"
argument_list|,
name|WSConstants
operator|.
name|WSU_NS
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|fmt
operator|.
name|format
argument_list|(
name|creationTime
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wsu"
argument_list|,
literal|"Expires"
argument_list|,
name|WSConstants
operator|.
name|WSU_NS
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|fmt
operator|.
name|format
argument_list|(
name|expirationTime
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|addAppliesTo
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|,
name|String
name|appliesTo
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|appliesTo
operator|!=
literal|null
operator|&&
name|addressingNamespace
operator|!=
literal|null
condition|)
block|{
name|String
name|policyNS
init|=
name|wspNamespace
decl_stmt|;
if|if
condition|(
name|policyNS
operator|==
literal|null
condition|)
block|{
name|policyNS
operator|=
literal|"http://schemas.xmlsoap.org/ws/2004/09/policy"
expr_stmt|;
block|}
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wsp"
argument_list|,
literal|"AppliesTo"
argument_list|,
name|policyNS
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wsp"
argument_list|,
name|policyNS
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wsa"
argument_list|,
literal|"EndpointReference"
argument_list|,
name|addressingNamespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
literal|"wsa"
argument_list|,
name|addressingNamespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wsa"
argument_list|,
literal|"Address"
argument_list|,
name|addressingNamespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|appliesTo
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addTokenType
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|tokenType
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
literal|"wst"
argument_list|,
literal|"TokenType"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addClaims
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|claimsToSerialize
init|=
name|claims
decl_stmt|;
if|if
condition|(
name|claimsToSerialize
operator|==
literal|null
operator|&&
name|claimsCallbackHandler
operator|!=
literal|null
condition|)
block|{
name|ClaimsCallback
name|callback
init|=
operator|new
name|ClaimsCallback
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|claimsCallbackHandler
operator|.
name|handle
argument_list|(
operator|new
name|Callback
index|[]
block|{
name|callback
block|}
argument_list|)
expr_stmt|;
name|claimsToSerialize
operator|=
name|callback
operator|.
name|getClaims
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|claimsToSerialize
operator|instanceof
name|Element
condition|)
block|{
name|StaxUtils
operator|.
name|copy
argument_list|(
operator|(
name|Element
operator|)
name|claimsToSerialize
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|claimsToSerialize
operator|instanceof
name|ClaimCollection
condition|)
block|{
name|ClaimCollection
name|claimCollection
init|=
operator|(
name|ClaimCollection
operator|)
name|claims
decl_stmt|;
name|claimCollection
operator|.
name|serialize
argument_list|(
name|writer
argument_list|,
literal|"wst"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|SecurityToken
name|createSecurityToken
parameter_list|(
name|Element
name|el
parameter_list|,
name|byte
index|[]
name|requestorEntropy
parameter_list|)
throws|throws
name|WSSecurityException
throws|,
name|Base64DecodingException
block|{
if|if
condition|(
literal|"RequestSecurityTokenResponseCollection"
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|el
operator|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"RequestSecurityTokenResponse"
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
literal|"Unexpected element "
operator|+
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|LOG
argument_list|)
throw|;
block|}
name|el
operator|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|Element
name|rst
init|=
literal|null
decl_stmt|;
name|Element
name|rar
init|=
literal|null
decl_stmt|;
name|Element
name|rur
init|=
literal|null
decl_stmt|;
name|Element
name|rpt
init|=
literal|null
decl_stmt|;
name|Element
name|lte
init|=
literal|null
decl_stmt|;
name|Element
name|entropy
init|=
literal|null
decl_stmt|;
name|String
name|tt
init|=
literal|null
decl_stmt|;
name|String
name|retKeySize
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
name|String
name|ln
init|=
name|el
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespace
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"Lifetime"
operator|.
name|equals
argument_list|(
name|ln
argument_list|)
condition|)
block|{
name|lte
operator|=
name|el
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"RequestedSecurityToken"
operator|.
name|equals
argument_list|(
name|ln
argument_list|)
condition|)
block|{
name|rst
operator|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"RequestedAttachedReference"
operator|.
name|equals
argument_list|(
name|ln
argument_list|)
condition|)
block|{
name|rar
operator|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"RequestedUnattachedReference"
operator|.
name|equals
argument_list|(
name|ln
argument_list|)
condition|)
block|{
name|rur
operator|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"RequestedProofToken"
operator|.
name|equals
argument_list|(
name|ln
argument_list|)
condition|)
block|{
name|rpt
operator|=
name|el
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Entropy"
operator|.
name|equals
argument_list|(
name|ln
argument_list|)
condition|)
block|{
name|entropy
operator|=
name|el
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"TokenType"
operator|.
name|equals
argument_list|(
name|ln
argument_list|)
condition|)
block|{
name|tt
operator|=
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"KeySize"
operator|.
name|equals
argument_list|(
name|ln
argument_list|)
condition|)
block|{
name|retKeySize
operator|=
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
block|}
name|el
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
name|Element
name|rstDec
init|=
name|rst
decl_stmt|;
name|String
name|id
init|=
name|findID
argument_list|(
name|rar
argument_list|,
name|rur
argument_list|,
name|rstDec
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|TrustException
argument_list|(
literal|"NO_ID"
argument_list|,
name|LOG
argument_list|)
throw|;
block|}
name|SecurityToken
name|token
init|=
operator|new
name|SecurityToken
argument_list|(
name|id
argument_list|,
name|rstDec
argument_list|,
name|lte
argument_list|)
decl_stmt|;
name|token
operator|.
name|setAttachedReference
argument_list|(
name|rar
argument_list|)
expr_stmt|;
name|token
operator|.
name|setUnattachedReference
argument_list|(
name|rur
argument_list|)
expr_stmt|;
name|token
operator|.
name|setIssuerAddress
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|token
operator|.
name|setTokenType
argument_list|(
name|tt
argument_list|)
expr_stmt|;
name|byte
index|[]
name|secret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rpt
operator|!=
literal|null
condition|)
block|{
name|Element
name|child
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|rpt
argument_list|)
decl_stmt|;
name|QName
name|childQname
init|=
name|DOMUtils
operator|.
name|getElementQName
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|childQname
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
literal|"BinarySecret"
argument_list|)
argument_list|)
condition|)
block|{
comment|// First check for the binary secret
name|String
name|b64Secret
init|=
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|secret
operator|=
name|Base64
operator|.
name|decode
argument_list|(
name|b64Secret
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childQname
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|ENC_NS
argument_list|,
name|WSConstants
operator|.
name|ENC_KEY_LN
argument_list|)
argument_list|)
condition|)
block|{
name|secret
operator|=
name|decryptKey
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childQname
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
literal|"ComputedKey"
argument_list|)
argument_list|)
condition|)
block|{
comment|// Handle the computed key
name|Element
name|computedKeyChild
init|=
name|entropy
operator|==
literal|null
condition|?
literal|null
else|:
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|entropy
argument_list|)
decl_stmt|;
name|byte
index|[]
name|serviceEntr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|computedKeyChild
operator|!=
literal|null
condition|)
block|{
name|QName
name|computedKeyChildQName
init|=
name|DOMUtils
operator|.
name|getElementQName
argument_list|(
name|computedKeyChild
argument_list|)
decl_stmt|;
if|if
condition|(
name|computedKeyChildQName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|ENC_NS
argument_list|,
name|WSConstants
operator|.
name|ENC_KEY_LN
argument_list|)
argument_list|)
condition|)
block|{
name|serviceEntr
operator|=
name|decryptKey
argument_list|(
name|computedKeyChild
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|computedKeyChildQName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
literal|"BinarySecret"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|content
init|=
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|computedKeyChild
argument_list|)
decl_stmt|;
name|serviceEntr
operator|=
name|Base64
operator|.
name|decode
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|serviceEntr
operator|!=
literal|null
condition|)
block|{
comment|// Right now we only use PSHA1 as the computed key algo
name|P_SHA1
name|psha1
init|=
operator|new
name|P_SHA1
argument_list|()
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|retKeySize
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|length
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|retKeySize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
else|else
block|{
name|length
operator|=
name|keySize
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
block|{
name|length
operator|=
literal|256
expr_stmt|;
block|}
try|try
block|{
name|secret
operator|=
name|psha1
operator|.
name|createKey
argument_list|(
name|requestorEntropy
argument_list|,
name|serviceEntr
argument_list|,
literal|0
argument_list|,
name|length
operator|/
literal|8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TrustException
argument_list|(
literal|"DERIVED_KEY_ERROR"
argument_list|,
name|LOG
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Service entropy missing
throw|throw
operator|new
name|TrustException
argument_list|(
literal|"NO_ENTROPY"
argument_list|,
name|LOG
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|requestorEntropy
operator|!=
literal|null
condition|)
block|{
comment|// Use requester entropy as the key
name|secret
operator|=
name|requestorEntropy
expr_stmt|;
block|}
name|token
operator|.
name|setSecret
argument_list|(
name|secret
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
specifier|protected
name|byte
index|[]
name|decryptKey
parameter_list|(
name|Element
name|child
parameter_list|)
throws|throws
name|TrustException
throws|,
name|WSSecurityException
throws|,
name|Base64DecodingException
block|{
name|String
name|encryptionAlgorithm
init|=
name|X509Util
operator|.
name|getEncAlgo
argument_list|(
name|child
argument_list|)
decl_stmt|;
comment|// For the SPNEGO case just return the decoded cipher value and decrypt it later
if|if
condition|(
name|encryptionAlgorithm
operator|!=
literal|null
operator|&&
name|encryptionAlgorithm
operator|.
name|endsWith
argument_list|(
literal|"spnego#GSS_Wrap"
argument_list|)
condition|)
block|{
comment|// Get the CipherValue
name|Element
name|tmpE
init|=
name|WSSecurityUtil
operator|.
name|getDirectChildElement
argument_list|(
name|child
argument_list|,
literal|"CipherData"
argument_list|,
name|WSConstants
operator|.
name|ENC_NS
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cipherValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tmpE
operator|!=
literal|null
condition|)
block|{
name|tmpE
operator|=
name|WSSecurityUtil
operator|.
name|getDirectChildElement
argument_list|(
name|tmpE
argument_list|,
literal|"CipherValue"
argument_list|,
name|WSConstants
operator|.
name|ENC_NS
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpE
operator|!=
literal|null
condition|)
block|{
name|String
name|content
init|=
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|tmpE
argument_list|)
decl_stmt|;
name|cipherValue
operator|=
name|Base64
operator|.
name|decode
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cipherValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|INVALID_SECURITY
argument_list|,
literal|"noCipher"
argument_list|)
throw|;
block|}
return|return
name|cipherValue
return|;
block|}
else|else
block|{
try|try
block|{
name|EncryptedKeyProcessor
name|proc
init|=
operator|new
name|EncryptedKeyProcessor
argument_list|()
decl_stmt|;
name|WSDocInfo
name|docInfo
init|=
operator|new
name|WSDocInfo
argument_list|(
name|child
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
decl_stmt|;
name|RequestData
name|data
init|=
operator|new
name|RequestData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setWssConfig
argument_list|(
name|WSSConfig
operator|.
name|getNewInstance
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setDecCrypto
argument_list|(
name|createCrypto
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setCallbackHandler
argument_list|(
name|createHandler
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|result
init|=
name|proc
operator|.
name|handleToken
argument_list|(
name|child
argument_list|,
name|data
argument_list|,
name|docInfo
argument_list|)
decl_stmt|;
return|return
operator|(
name|byte
index|[]
operator|)
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TrustException
argument_list|(
literal|"ENCRYPTED_KEY_ERROR"
argument_list|,
name|LOG
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|CallbackHandler
name|createHandler
parameter_list|()
block|{
name|Object
name|o
init|=
name|getProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|o
operator|=
name|cls
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|(
name|CallbackHandler
operator|)
name|o
return|;
block|}
specifier|protected
name|Object
name|getProperty
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|Object
name|o
init|=
name|ctx
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getProperty
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|getProperty
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|client
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|get
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
specifier|protected
name|Crypto
name|createCrypto
parameter_list|(
name|boolean
name|decrypt
parameter_list|)
throws|throws
name|IOException
throws|,
name|WSSecurityException
block|{
name|Crypto
name|crypto
init|=
operator|(
name|Crypto
operator|)
name|getProperty
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_CRYPTO
operator|+
operator|(
name|decrypt
condition|?
literal|".decrypt"
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|crypto
operator|!=
literal|null
condition|)
block|{
return|return
name|crypto
return|;
block|}
name|Object
name|o
init|=
name|getProperty
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_PROPERTIES
operator|+
operator|(
name|decrypt
condition|?
literal|".decrypt"
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Properties
condition|)
block|{
name|properties
operator|=
operator|(
name|Properties
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|ResourceManager
name|rm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|rm
operator|.
name|resolveResource
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|URL
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|url
operator|=
name|ClassLoaderUtils
operator|.
name|getResource
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|InputStream
name|ins
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|ins
argument_list|)
expr_stmt|;
name|ins
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Fault
argument_list|(
literal|"Could not find properties file "
operator|+
operator|(
name|String
operator|)
name|o
argument_list|,
name|LOG
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|URL
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|InputStream
name|ins
init|=
operator|(
operator|(
name|URL
operator|)
name|o
operator|)
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|ins
argument_list|)
expr_stmt|;
name|ins
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
return|return
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|properties
argument_list|)
return|;
block|}
if|if
condition|(
name|decrypt
condition|)
block|{
return|return
name|createCrypto
argument_list|(
literal|false
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|String
name|findID
parameter_list|(
name|Element
name|rar
parameter_list|,
name|Element
name|rur
parameter_list|,
name|Element
name|rst
parameter_list|)
block|{
name|String
name|id
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rst
operator|!=
literal|null
condition|)
block|{
name|QName
name|elName
init|=
name|DOMUtils
operator|.
name|getElementQName
argument_list|(
name|rst
argument_list|)
decl_stmt|;
if|if
condition|(
name|elName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|SAML_NS
argument_list|,
literal|"Assertion"
argument_list|)
argument_list|)
operator|&&
name|rst
operator|.
name|hasAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"AssertionID"
argument_list|)
condition|)
block|{
name|id
operator|=
name|rst
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"AssertionID"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|elName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|SAML2_NS
argument_list|,
literal|"Assertion"
argument_list|)
argument_list|)
operator|&&
name|rst
operator|.
name|hasAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"ID"
argument_list|)
condition|)
block|{
name|id
operator|=
name|rst
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"ID"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|this
operator|.
name|getIDFromSTR
argument_list|(
name|rst
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|id
operator|==
literal|null
operator|&&
name|rar
operator|!=
literal|null
condition|)
block|{
name|id
operator|=
name|this
operator|.
name|getIDFromSTR
argument_list|(
name|rar
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
operator|&&
name|rur
operator|!=
literal|null
condition|)
block|{
name|id
operator|=
name|this
operator|.
name|getIDFromSTR
argument_list|(
name|rur
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
operator|&&
name|rst
operator|!=
literal|null
condition|)
block|{
name|id
operator|=
name|rst
operator|.
name|getAttributeNS
argument_list|(
name|WSConstants
operator|.
name|WSU_NS
argument_list|,
literal|"Id"
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
specifier|protected
name|String
name|getIDFromSTR
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
name|Element
name|child
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|el
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|QName
name|elName
init|=
name|DOMUtils
operator|.
name|getElementQName
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|elName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|SIG_NS
argument_list|,
literal|"KeyInfo"
argument_list|)
argument_list|)
operator|||
name|elName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|WSSE_NS
argument_list|,
literal|"KeyIdentifier"
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|child
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|elName
operator|.
name|equals
argument_list|(
name|Reference
operator|.
name|TOKEN
argument_list|)
condition|)
block|{
return|return
name|child
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"URI"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|elName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|STSUtils
operator|.
name|SCT_NS_05_02
argument_list|,
literal|"Identifier"
argument_list|)
argument_list|)
operator|||
name|elName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|STSUtils
operator|.
name|SCT_NS_05_12
argument_list|,
literal|"Identifier"
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|child
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setTemplate
parameter_list|(
name|Element
name|rstTemplate
parameter_list|)
block|{
name|template
operator|=
name|rstTemplate
expr_stmt|;
block|}
comment|/**      * Set a Claims Object to be included in the request. This Object can be either a DOM Element,       * which will be copied "as is" into the request, or else a       * org.apache.cxf.rt.security.claims.ClaimCollection Object.      */
specifier|public
name|void
name|setClaims
parameter_list|(
name|Object
name|rstClaims
parameter_list|)
block|{
name|claims
operator|=
name|rstClaims
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getOutFaultInterceptors
parameter_list|()
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
return|return
name|client
operator|.
name|getOutFaultInterceptors
argument_list|()
return|;
block|}
return|return
name|outFault
return|;
block|}
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getInFaultInterceptors
parameter_list|()
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
return|return
name|client
operator|.
name|getInFaultInterceptors
argument_list|()
return|;
block|}
return|return
name|inFault
return|;
block|}
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getInInterceptors
parameter_list|()
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
return|return
name|client
operator|.
name|getInInterceptors
argument_list|()
return|;
block|}
return|return
name|in
return|;
block|}
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getOutInterceptors
parameter_list|()
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
return|return
name|client
operator|.
name|getOutInterceptors
argument_list|()
return|;
block|}
return|return
name|out
return|;
block|}
specifier|public
name|void
name|setInInterceptors
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
parameter_list|)
block|{
name|getInInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|interceptors
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setInFaultInterceptors
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
parameter_list|)
block|{
name|getInFaultInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|interceptors
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOutInterceptors
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
parameter_list|)
block|{
name|getOutInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|interceptors
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setOutFaultInterceptors
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
parameter_list|)
block|{
name|getOutFaultInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|interceptors
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFeatures
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Feature
argument_list|>
name|f
parameter_list|)
block|{
name|features
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Feature
argument_list|>
name|getFeatures
parameter_list|()
block|{
return|return
name|features
return|;
block|}
specifier|public
name|CallbackHandler
name|getClaimsCallbackHandler
parameter_list|()
block|{
return|return
name|claimsCallbackHandler
return|;
block|}
specifier|public
name|void
name|setClaimsCallbackHandler
parameter_list|(
name|CallbackHandler
name|claimsCallbackHandler
parameter_list|)
block|{
name|this
operator|.
name|claimsCallbackHandler
operator|=
name|claimsCallbackHandler
expr_stmt|;
block|}
specifier|protected
specifier|static
class|class
name|STSResponse
block|{
specifier|private
specifier|final
name|DOMSource
name|response
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|entropy
decl_stmt|;
specifier|private
specifier|final
name|X509Certificate
name|cert
decl_stmt|;
specifier|private
specifier|final
name|Crypto
name|crypto
decl_stmt|;
specifier|public
name|STSResponse
parameter_list|(
name|DOMSource
name|response
parameter_list|,
name|byte
index|[]
name|entropy
parameter_list|)
block|{
name|this
argument_list|(
name|response
argument_list|,
name|entropy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|STSResponse
parameter_list|(
name|DOMSource
name|response
parameter_list|,
name|byte
index|[]
name|entropy
parameter_list|,
name|X509Certificate
name|cert
parameter_list|,
name|Crypto
name|crypto
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|entropy
operator|=
name|entropy
expr_stmt|;
name|this
operator|.
name|cert
operator|=
name|cert
expr_stmt|;
name|this
operator|.
name|crypto
operator|=
name|crypto
expr_stmt|;
block|}
specifier|public
name|DOMSource
name|getResponse
parameter_list|()
block|{
return|return
name|response
return|;
block|}
specifier|public
name|byte
index|[]
name|getEntropy
parameter_list|()
block|{
return|return
name|entropy
return|;
block|}
specifier|public
name|X509Certificate
name|getCert
parameter_list|()
block|{
return|return
name|cert
return|;
block|}
specifier|public
name|Crypto
name|getCrypto
parameter_list|()
block|{
return|return
name|crypto
return|;
block|}
block|}
specifier|public
name|String
name|getWspNamespace
parameter_list|()
block|{
return|return
name|wspNamespace
return|;
block|}
specifier|public
name|void
name|setWspNamespace
parameter_list|(
name|String
name|wspNamespace
parameter_list|)
block|{
name|this
operator|.
name|wspNamespace
operator|=
name|wspNamespace
expr_stmt|;
block|}
specifier|public
name|X509Certificate
name|getUseKeyCertificate
parameter_list|()
block|{
return|return
name|useKeyCertificate
return|;
block|}
specifier|public
name|void
name|setUseKeyCertificate
parameter_list|(
name|X509Certificate
name|useKeyCertificate
parameter_list|)
block|{
name|this
operator|.
name|useKeyCertificate
operator|=
name|useKeyCertificate
expr_stmt|;
block|}
specifier|public
name|void
name|setNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
block|}
block|}
end_class

end_unit

