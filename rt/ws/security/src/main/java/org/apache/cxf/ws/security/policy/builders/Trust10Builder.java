begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|builders
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Trust10
import|;
end_import

begin_class
specifier|public
class|class
name|Trust10Builder
implements|implements
name|AssertionBuilder
block|{
specifier|public
name|Trust10Builder
parameter_list|()
block|{     }
specifier|public
name|PolicyAssertion
name|build
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|element
operator|=
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|element
argument_list|,
name|SPConstants
operator|.
name|POLICY
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Trust10 assertion doesn't contain any Policy"
argument_list|)
throw|;
block|}
name|Trust10
name|trust10
init|=
operator|new
name|Trust10
argument_list|(
name|SP11Constants
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|element
argument_list|,
name|SP11Constants
operator|.
name|MUST_SUPPORT_CLIENT_CHALLENGE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|trust10
operator|.
name|setMustSupportClientChallenge
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|element
argument_list|,
name|SP11Constants
operator|.
name|MUST_SUPPORT_SERVER_CHALLENGE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|trust10
operator|.
name|setMustSupportServerChallenge
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|element
argument_list|,
name|SP11Constants
operator|.
name|REQUIRE_CLIENT_ENTROPY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|trust10
operator|.
name|setRequireClientEntropy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|element
argument_list|,
name|SP11Constants
operator|.
name|REQUIRE_SERVER_ENTROPY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|trust10
operator|.
name|setRequireServerEntropy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
name|element
argument_list|,
name|SP11Constants
operator|.
name|MUST_SUPPORT_ISSUED_TOKENS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|trust10
operator|.
name|setMustSupportIssuedTokens
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|trust10
return|;
block|}
specifier|public
name|List
argument_list|<
name|QName
argument_list|>
name|getKnownElements
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|SP11Constants
operator|.
name|TRUST_10
argument_list|)
return|;
block|}
specifier|public
name|PolicyAssertion
name|buildCompatible
parameter_list|(
name|PolicyAssertion
name|a
parameter_list|,
name|PolicyAssertion
name|b
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

