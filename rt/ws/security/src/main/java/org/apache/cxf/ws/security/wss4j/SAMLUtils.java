begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|common
operator|.
name|SAMLVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|xml
operator|.
name|XMLObject
import|;
end_import

begin_comment
comment|/**  * internal SAMLUtils to avoid direct reference to opensaml from WSS4J interceptors.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SAMLUtils
block|{
specifier|private
name|SAMLUtils
parameter_list|()
block|{     }
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|parseRolesInAssertion
parameter_list|(
name|Object
name|assertion
parameter_list|,
name|String
name|roleAttributeName
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|SamlAssertionWrapper
operator|)
name|assertion
operator|)
operator|.
name|getSamlVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|SAMLVersion
operator|.
name|VERSION_20
argument_list|)
condition|)
block|{
return|return
name|parseRolesInAssertion
argument_list|(
operator|(
operator|(
name|SamlAssertionWrapper
operator|)
name|assertion
operator|)
operator|.
name|getSaml2
argument_list|()
argument_list|,
name|roleAttributeName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|parseRolesInAssertion
argument_list|(
operator|(
operator|(
name|SamlAssertionWrapper
operator|)
name|assertion
operator|)
operator|.
name|getSaml1
argument_list|()
argument_list|,
name|roleAttributeName
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getIssuer
parameter_list|(
name|Object
name|assertion
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SamlAssertionWrapper
operator|)
name|assertion
operator|)
operator|.
name|getIssuerString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Element
name|getAssertionElement
parameter_list|(
name|Object
name|assertion
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SamlAssertionWrapper
operator|)
name|assertion
operator|)
operator|.
name|getElement
argument_list|()
return|;
block|}
comment|//
comment|// these methods are moved from previous WSS4JInInterceptor
comment|//
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|parseRolesInAssertion
parameter_list|(
name|org
operator|.
name|opensaml
operator|.
name|saml1
operator|.
name|core
operator|.
name|Assertion
name|assertion
parameter_list|,
name|String
name|roleAttributeName
parameter_list|)
block|{
name|List
argument_list|<
name|org
operator|.
name|opensaml
operator|.
name|saml1
operator|.
name|core
operator|.
name|AttributeStatement
argument_list|>
name|attributeStatements
init|=
name|assertion
operator|.
name|getAttributeStatements
argument_list|()
decl_stmt|;
if|if
condition|(
name|attributeStatements
operator|==
literal|null
operator|||
name|attributeStatements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|opensaml
operator|.
name|saml1
operator|.
name|core
operator|.
name|AttributeStatement
name|statement
range|:
name|attributeStatements
control|)
block|{
name|List
argument_list|<
name|org
operator|.
name|opensaml
operator|.
name|saml1
operator|.
name|core
operator|.
name|Attribute
argument_list|>
name|attributes
init|=
name|statement
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|opensaml
operator|.
name|saml1
operator|.
name|core
operator|.
name|Attribute
name|attribute
range|:
name|attributes
control|)
block|{
if|if
condition|(
name|attribute
operator|.
name|getAttributeName
argument_list|()
operator|.
name|equals
argument_list|(
name|roleAttributeName
argument_list|)
condition|)
block|{
for|for
control|(
name|XMLObject
name|attributeValue
range|:
name|attribute
operator|.
name|getAttributeValues
argument_list|()
control|)
block|{
name|Element
name|attributeValueElement
init|=
name|attributeValue
operator|.
name|getDOM
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|attributeValueElement
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|roles
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attribute
operator|.
name|getAttributeValues
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|//                        Don't search for other attributes with the same name if
comment|//<saml:Attribute xmlns:saml="urn:oasis:names:tc:SAML:1.0:assertion"
comment|//                             AttributeNamespace="http://schemas.xmlsoap.org/claims" AttributeName="roles">
comment|//<saml:AttributeValue>Value1</saml:AttributeValue>
comment|//<saml:AttributeValue>Value2</saml:AttributeValue>
comment|//</saml:Attribute>
break|break;
block|}
block|}
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|roles
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|parseRolesInAssertion
parameter_list|(
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Assertion
name|assertion
parameter_list|,
name|String
name|roleAttributeName
parameter_list|)
block|{
name|List
argument_list|<
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|AttributeStatement
argument_list|>
name|attributeStatements
init|=
name|assertion
operator|.
name|getAttributeStatements
argument_list|()
decl_stmt|;
if|if
condition|(
name|attributeStatements
operator|==
literal|null
operator|||
name|attributeStatements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|AttributeStatement
name|statement
range|:
name|attributeStatements
control|)
block|{
name|List
argument_list|<
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Attribute
argument_list|>
name|attributes
init|=
name|statement
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|opensaml
operator|.
name|saml2
operator|.
name|core
operator|.
name|Attribute
name|attribute
range|:
name|attributes
control|)
block|{
if|if
condition|(
name|attribute
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|roleAttributeName
argument_list|)
condition|)
block|{
for|for
control|(
name|XMLObject
name|attributeValue
range|:
name|attribute
operator|.
name|getAttributeValues
argument_list|()
control|)
block|{
name|Element
name|attributeValueElement
init|=
name|attributeValue
operator|.
name|getDOM
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|attributeValueElement
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|roles
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attribute
operator|.
name|getAttributeValues
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|//                        Don't search for other attributes with the same name if
comment|//<saml:Attribute xmlns:saml="urn:oasis:names:tc:SAML:1.0:assertion"
comment|//                             AttributeNamespace="http://schemas.xmlsoap.org/claims" AttributeName="roles">
comment|//<saml:AttributeValue>Value1</saml:AttributeValue>
comment|//<saml:AttributeValue>Value2</saml:AttributeValue>
comment|//</saml:Attribute>
break|break;
block|}
block|}
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|roles
argument_list|)
return|;
block|}
block|}
end_class

end_unit

