begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|PolicyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SAMLKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|token
operator|.
name|BinarySecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|token
operator|.
name|PKIPathSecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|token
operator|.
name|X509Security
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSDataRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|engine
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Layout
operator|.
name|LayoutType
import|;
end_import

begin_comment
comment|/**  * Validate a Layout policy.  */
end_comment

begin_class
specifier|public
class|class
name|LayoutPolicyValidator
extends|extends
name|AbstractSecurityPolicyValidator
block|{
comment|/**      * Return true if this SecurityPolicyValidator implementation is capable of validating a       * policy defined by the AssertionInfo parameter      */
specifier|public
name|boolean
name|canValidatePolicy
parameter_list|(
name|AssertionInfo
name|assertionInfo
parameter_list|)
block|{
return|return
name|assertionInfo
operator|.
name|getAssertion
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|SP12Constants
operator|.
name|LAYOUT
operator|.
name|equals
argument_list|(
name|assertionInfo
operator|.
name|getAssertion
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|SP11Constants
operator|.
name|LAYOUT
operator|.
name|equals
argument_list|(
name|assertionInfo
operator|.
name|getAssertion
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
return|;
block|}
comment|/**      * Validate policies.      */
specifier|public
name|void
name|validatePolicies
parameter_list|(
name|PolicyValidatorParameters
name|parameters
parameter_list|,
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
parameter_list|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|Layout
name|layout
init|=
operator|(
name|Layout
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|layout
argument_list|,
name|parameters
operator|.
name|getAssertionInfoMap
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validatePolicy
argument_list|(
name|layout
argument_list|,
name|parameters
operator|.
name|getResults
argument_list|()
operator|.
name|getResults
argument_list|()
argument_list|,
name|parameters
operator|.
name|getSignedResults
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|error
init|=
literal|"Layout does not match the requirements"
decl_stmt|;
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|assertToken
parameter_list|(
name|Layout
name|token
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|String
name|namespace
init|=
name|token
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|LayoutType
name|layoutType
init|=
name|token
operator|.
name|getLayoutType
argument_list|()
decl_stmt|;
if|if
condition|(
name|layoutType
operator|!=
literal|null
condition|)
block|{
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|layoutType
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|validatePolicy
parameter_list|(
name|Layout
name|layout
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
parameter_list|)
block|{
name|boolean
name|timestampFirst
init|=
name|layout
operator|.
name|getLayoutType
argument_list|()
operator|==
name|LayoutType
operator|.
name|LaxTsFirst
decl_stmt|;
name|boolean
name|timestampLast
init|=
name|layout
operator|.
name|getLayoutType
argument_list|()
operator|==
name|LayoutType
operator|.
name|LaxTsLast
decl_stmt|;
name|boolean
name|strict
init|=
name|layout
operator|.
name|getLayoutType
argument_list|()
operator|==
name|LayoutType
operator|.
name|Strict
decl_stmt|;
if|if
condition|(
name|timestampFirst
condition|)
block|{
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Integer
name|firstAction
init|=
operator|(
name|Integer
operator|)
name|results
operator|.
name|get
argument_list|(
name|results
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstAction
operator|.
name|intValue
argument_list|()
operator|!=
name|WSConstants
operator|.
name|TS
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|timestampLast
condition|)
block|{
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Integer
name|lastAction
init|=
operator|(
name|Integer
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastAction
operator|.
name|intValue
argument_list|()
operator|!=
name|WSConstants
operator|.
name|TS
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|strict
operator|&&
operator|(
operator|!
name|validateStrictSignaturePlacement
argument_list|(
name|results
argument_list|,
name|signedResults
argument_list|)
operator|||
operator|!
name|validateStrictSignatureTokenPlacement
argument_list|(
name|results
argument_list|)
operator|||
operator|!
name|checkSignatureIsSignedPlacement
argument_list|(
name|results
argument_list|,
name|signedResults
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|validateStrictSignaturePlacement
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
parameter_list|)
block|{
comment|// Go through each Signature and check any security header token is before the Signature
for|for
control|(
name|WSSecurityEngineResult
name|signedResult
range|:
name|signedResults
control|)
block|{
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|sl
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|signedResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|signedResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|==
literal|null
operator|||
name|WSConstants
operator|.
name|ST_SIGNED
operator|==
name|actInt
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|WSDataRef
name|r
range|:
name|sl
control|)
block|{
name|String
name|xpath
init|=
name|r
operator|.
name|getXpath
argument_list|()
decl_stmt|;
if|if
condition|(
name|xpath
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|nodes
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|xpath
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
comment|// envelope/Header/wsse:Security/header
if|if
condition|(
name|nodes
operator|.
name|length
operator|==
literal|5
condition|)
block|{
name|Element
name|protectedElement
init|=
name|r
operator|.
name|getProtectedElement
argument_list|()
decl_stmt|;
name|boolean
name|tokenFound
init|=
literal|false
decl_stmt|;
comment|// Results are stored in reverse order
for|for
control|(
name|WSSecurityEngineResult
name|result
range|:
name|results
control|)
block|{
name|Element
name|resultElement
init|=
operator|(
name|Element
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_TOKEN_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultElement
operator|==
name|protectedElement
condition|)
block|{
name|tokenFound
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|tokenFound
operator|&&
name|result
operator|==
name|signedResult
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|resultElement
operator|!=
literal|null
operator|&&
name|result
operator|==
name|signedResult
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|validateStrictSignatureTokenPlacement
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
parameter_list|)
block|{
comment|// Go through each Signature and check that the Signing Token appears before the Signature
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WSSecurityEngineResult
name|result
init|=
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|==
name|WSConstants
operator|.
name|SIGN
condition|)
block|{
name|int
name|correspondingIndex
init|=
name|findCorrespondingTokenIndex
argument_list|(
name|result
argument_list|,
name|results
argument_list|)
decl_stmt|;
if|if
condition|(
name|correspondingIndex
operator|>
literal|0
operator|&&
name|correspondingIndex
operator|<
name|i
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|checkSignatureIsSignedPlacement
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
parameter_list|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|signedResult
range|:
name|signedResults
control|)
block|{
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|sl
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|signedResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
operator|&&
name|sl
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
for|for
control|(
name|WSDataRef
name|dataRef
range|:
name|sl
control|)
block|{
name|QName
name|signedQName
init|=
name|dataRef
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|SIGNATURE
operator|.
name|equals
argument_list|(
name|signedQName
argument_list|)
condition|)
block|{
name|Element
name|protectedElement
init|=
name|dataRef
operator|.
name|getProtectedElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isEndorsingSignatureInCorrectPlace
argument_list|(
name|results
argument_list|,
name|signedResult
argument_list|,
name|protectedElement
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|isEndorsingSignatureInCorrectPlace
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
parameter_list|,
name|WSSecurityEngineResult
name|signedResult
parameter_list|,
name|Element
name|protectedElement
parameter_list|)
block|{
name|boolean
name|endorsingSigFound
init|=
literal|false
decl_stmt|;
comment|// Results are stored in reverse order
for|for
control|(
name|WSSecurityEngineResult
name|result
range|:
name|results
control|)
block|{
name|Integer
name|action
init|=
operator|(
name|Integer
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|SIGN
operator|==
name|action
operator|||
name|WSConstants
operator|.
name|ST_SIGNED
operator|==
name|action
operator|||
name|WSConstants
operator|.
name|UT_SIGN
operator|==
name|action
condition|)
block|{
if|if
condition|(
name|result
operator|==
name|signedResult
condition|)
block|{
name|endorsingSigFound
operator|=
literal|true
expr_stmt|;
block|}
name|Element
name|resultElement
init|=
operator|(
name|Element
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_TOKEN_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|endorsingSigFound
operator|&&
name|resultElement
operator|==
name|protectedElement
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|resultElement
operator|==
name|protectedElement
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Find the index of the token corresponding to either the X509Certificate or PublicKey used       * to sign the "signatureResult" argument.      */
specifier|private
name|int
name|findCorrespondingTokenIndex
parameter_list|(
name|WSSecurityEngineResult
name|signatureResult
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
parameter_list|)
block|{
comment|// See what was used to sign this result
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|signatureResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATE
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
operator|(
name|PublicKey
operator|)
name|signatureResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_PUBLIC_KEY
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WSSecurityEngineResult
name|token
init|=
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|==
name|WSConstants
operator|.
name|SIGN
condition|)
block|{
continue|continue;
block|}
name|BinarySecurity
name|binarySecurity
init|=
operator|(
name|BinarySecurity
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_BINARY_SECURITY_TOKEN
argument_list|)
decl_stmt|;
name|PublicKey
name|foundPublicKey
init|=
operator|(
name|PublicKey
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_PUBLIC_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|binarySecurity
operator|instanceof
name|X509Security
operator|||
name|binarySecurity
operator|instanceof
name|PKIPathSecurity
condition|)
block|{
name|X509Certificate
name|foundCert
init|=
operator|(
name|X509Certificate
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundCert
operator|.
name|equals
argument_list|(
name|cert
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|ST_SIGNED
operator|||
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|ST_UNSIGNED
condition|)
block|{
name|SamlAssertionWrapper
name|assertionWrapper
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|SAMLKeyInfo
name|samlKeyInfo
init|=
name|assertionWrapper
operator|.
name|getSubjectKeyInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|samlKeyInfo
operator|!=
literal|null
condition|)
block|{
name|X509Certificate
index|[]
name|subjectCerts
init|=
name|samlKeyInfo
operator|.
name|getCerts
argument_list|()
decl_stmt|;
name|PublicKey
name|subjectPublicKey
init|=
name|samlKeyInfo
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|cert
operator|!=
literal|null
operator|&&
name|subjectCerts
operator|!=
literal|null
operator|&&
name|cert
operator|.
name|equals
argument_list|(
name|subjectCerts
index|[
literal|0
index|]
argument_list|)
operator|)
operator|||
operator|(
name|subjectPublicKey
operator|!=
literal|null
operator|&&
name|subjectPublicKey
operator|.
name|equals
argument_list|(
name|publicKey
argument_list|)
operator|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|publicKey
operator|!=
literal|null
operator|&&
name|publicKey
operator|.
name|equals
argument_list|(
name|foundPublicKey
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

