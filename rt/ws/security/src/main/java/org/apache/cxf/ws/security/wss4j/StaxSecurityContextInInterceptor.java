begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|security
operator|.
name|DefaultSecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|security
operator|.
name|RolePrefixSecurityContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|ClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|saml
operator|.
name|claims
operator|.
name|SAMLSecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|saml
operator|.
name|utils
operator|.
name|SAMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|utils
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|principal
operator|.
name|SAMLTokenPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|KerberosTokenSecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|KeyValueTokenSecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|SamlTokenSecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|UsernameTokenSecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|WSSecurityEventConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|X509TokenSecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SubjectAndPrincipalSecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|exceptions
operator|.
name|XMLSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|SecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|SecurityEventConstants
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SecurityTokenConstants
operator|.
name|TokenUsage
import|;
end_import

begin_comment
comment|/**  * This interceptor handles parsing the StaX WS-Security results (events) + sets up the  * security context appropriately.  */
end_comment

begin_class
specifier|public
class|class
name|StaxSecurityContextInInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|SoapMessage
argument_list|>
block|{
comment|/**      * This configuration tag specifies the default attribute name where the roles are present      * The default is "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role".      */
specifier|public
specifier|static
specifier|final
name|String
name|SAML_ROLE_ATTRIBUTENAME_DEFAULT
init|=
literal|"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role"
decl_stmt|;
specifier|public
name|StaxSecurityContextInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_PROTOCOL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|soapMessage
parameter_list|)
throws|throws
name|Fault
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|List
argument_list|<
name|SecurityEvent
argument_list|>
name|incomingSecurityEventList
init|=
operator|(
name|List
argument_list|<
name|SecurityEvent
argument_list|>
operator|)
name|soapMessage
operator|.
name|get
argument_list|(
name|SecurityEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".in"
argument_list|)
decl_stmt|;
if|if
condition|(
name|incomingSecurityEventList
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|doResults
argument_list|(
name|soapMessage
argument_list|,
name|incomingSecurityEventList
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
throw|throw
name|createSoapFault
argument_list|(
name|soapMessage
operator|.
name|getVersion
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|doResults
parameter_list|(
name|SoapMessage
name|msg
parameter_list|,
name|List
argument_list|<
name|SecurityEvent
argument_list|>
name|incomingSecurityEventList
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|// Now go through the results in a certain order to set up a security context. Highest priority is first.
name|List
argument_list|<
name|Event
argument_list|>
name|desiredSecurityEvents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|desiredSecurityEvents
operator|.
name|add
argument_list|(
name|WSSecurityEventConstants
operator|.
name|SAML_TOKEN
argument_list|)
expr_stmt|;
name|desiredSecurityEvents
operator|.
name|add
argument_list|(
name|WSSecurityEventConstants
operator|.
name|USERNAME_TOKEN
argument_list|)
expr_stmt|;
name|desiredSecurityEvents
operator|.
name|add
argument_list|(
name|WSSecurityEventConstants
operator|.
name|KERBEROS_TOKEN
argument_list|)
expr_stmt|;
name|desiredSecurityEvents
operator|.
name|add
argument_list|(
name|WSSecurityEventConstants
operator|.
name|X509Token
argument_list|)
expr_stmt|;
name|desiredSecurityEvents
operator|.
name|add
argument_list|(
name|WSSecurityEventConstants
operator|.
name|KeyValueToken
argument_list|)
expr_stmt|;
for|for
control|(
name|Event
name|desiredEvent
range|:
name|desiredSecurityEvents
control|)
block|{
name|SubjectAndPrincipalSecurityToken
name|token
init|=
literal|null
decl_stmt|;
try|try
block|{
name|token
operator|=
name|getSubjectPrincipalToken
argument_list|(
name|incomingSecurityEventList
argument_list|,
name|desiredEvent
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLSecurityException
name|ex
parameter_list|)
block|{
comment|// proceed
block|}
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|Principal
name|p
init|=
name|token
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|Subject
name|subject
init|=
name|token
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
name|String
name|roleClassifier
init|=
operator|(
name|String
operator|)
name|msg
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SUBJECT_ROLE_CLASSIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleClassifier
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|roleClassifier
argument_list|)
condition|)
block|{
name|String
name|roleClassifierType
init|=
operator|(
name|String
operator|)
name|msg
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SUBJECT_ROLE_CLASSIFIER_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleClassifierType
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|roleClassifierType
argument_list|)
condition|)
block|{
name|roleClassifierType
operator|=
literal|"prefix"
expr_stmt|;
block|}
name|msg
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
operator|new
name|RolePrefixSecurityContextImpl
argument_list|(
name|subject
argument_list|,
name|roleClassifier
argument_list|,
name|roleClassifierType
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
operator|new
name|DefaultSecurityContext
argument_list|(
name|subject
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
elseif|else
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|Object
name|receivedAssertion
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|desiredEvent
operator|==
name|WSSecurityEventConstants
operator|.
name|SAML_TOKEN
condition|)
block|{
name|String
name|roleAttributeName
init|=
operator|(
name|String
operator|)
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|SAML_ROLE_ATTRIBUTENAME
argument_list|,
name|msg
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleAttributeName
operator|==
literal|null
operator|||
name|roleAttributeName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|roleAttributeName
operator|=
name|SAML_ROLE_ATTRIBUTENAME_DEFAULT
expr_stmt|;
block|}
name|receivedAssertion
operator|=
operator|(
operator|(
name|SAMLTokenPrincipal
operator|)
name|token
operator|.
name|getPrincipal
argument_list|()
operator|)
operator|.
name|getToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|receivedAssertion
operator|!=
literal|null
condition|)
block|{
name|ClaimCollection
name|claims
init|=
name|SAMLUtils
operator|.
name|getClaims
argument_list|(
operator|(
name|SamlAssertionWrapper
operator|)
name|receivedAssertion
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|roles
init|=
name|SAMLUtils
operator|.
name|parseRolesFromClaims
argument_list|(
name|claims
argument_list|,
name|roleAttributeName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SAMLSecurityContext
name|context
init|=
operator|new
name|SAMLSecurityContext
argument_list|(
name|p
argument_list|,
name|roles
argument_list|,
name|claims
argument_list|)
decl_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|msg
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
name|createSecurityContext
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
specifier|private
name|SubjectAndPrincipalSecurityToken
name|getSubjectPrincipalToken
parameter_list|(
name|List
argument_list|<
name|SecurityEvent
argument_list|>
name|incomingSecurityEventList
parameter_list|,
name|Event
name|desiredEvent
parameter_list|,
name|Message
name|msg
parameter_list|)
throws|throws
name|XMLSecurityException
block|{
for|for
control|(
name|SecurityEvent
name|event
range|:
name|incomingSecurityEventList
control|)
block|{
if|if
condition|(
name|desiredEvent
operator|==
name|event
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getSecurityEventType
argument_list|()
operator|==
name|WSSecurityEventConstants
operator|.
name|USERNAME_TOKEN
operator|&&
name|isUsernameTokenEventAllowed
argument_list|(
operator|(
name|UsernameTokenSecurityEvent
operator|)
name|event
argument_list|,
name|msg
argument_list|)
condition|)
block|{
return|return
operator|(
operator|(
name|UsernameTokenSecurityEvent
operator|)
name|event
operator|)
operator|.
name|getSecurityToken
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getSecurityEventType
argument_list|()
operator|==
name|WSSecurityEventConstants
operator|.
name|SAML_TOKEN
operator|&&
name|isSamlEventAllowed
argument_list|(
operator|(
name|SamlTokenSecurityEvent
operator|)
name|event
argument_list|,
name|msg
argument_list|)
condition|)
block|{
return|return
operator|(
operator|(
name|SamlTokenSecurityEvent
operator|)
name|event
operator|)
operator|.
name|getSecurityToken
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getSecurityEventType
argument_list|()
operator|==
name|WSSecurityEventConstants
operator|.
name|X509Token
operator|&&
name|isUsedForPublicKeySignature
argument_list|(
operator|(
operator|(
name|X509TokenSecurityEvent
operator|)
name|event
operator|)
operator|.
name|getSecurityToken
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
operator|(
name|X509TokenSecurityEvent
operator|)
name|event
operator|)
operator|.
name|getSecurityToken
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getSecurityEventType
argument_list|()
operator|==
name|WSSecurityEventConstants
operator|.
name|KeyValueToken
operator|&&
name|isUsedForPublicKeySignature
argument_list|(
operator|(
operator|(
name|KeyValueTokenSecurityEvent
operator|)
name|event
operator|)
operator|.
name|getSecurityToken
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
operator|(
name|KeyValueTokenSecurityEvent
operator|)
name|event
operator|)
operator|.
name|getSecurityToken
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getSecurityEventType
argument_list|()
operator|==
name|WSSecurityEventConstants
operator|.
name|KERBEROS_TOKEN
condition|)
block|{
return|return
operator|(
operator|(
name|KerberosTokenSecurityEvent
operator|)
name|event
operator|)
operator|.
name|getSecurityToken
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|isUsedForPublicKeySignature
parameter_list|(
name|SubjectAndPrincipalSecurityToken
name|token
parameter_list|)
throws|throws
name|XMLSecurityException
block|{
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Check first of all that the token is used for Signature
name|List
argument_list|<
name|TokenUsage
argument_list|>
name|tokenUsages
init|=
name|token
operator|.
name|getTokenUsages
argument_list|()
decl_stmt|;
name|boolean
name|usedForSignature
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|tokenUsages
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TokenUsage
name|usage
range|:
name|tokenUsages
control|)
block|{
if|if
condition|(
literal|"MainSignature"
operator|.
name|equals
argument_list|(
name|usage
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|usedForSignature
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|usedForSignature
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Now check that a PublicKey/X509Certificate was used
return|return
name|token
operator|.
name|getPublicKey
argument_list|()
operator|!=
literal|null
operator|||
operator|(
name|token
operator|.
name|getX509Certificates
argument_list|()
operator|!=
literal|null
operator|&&
name|token
operator|.
name|getX509Certificates
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|)
return|;
block|}
specifier|private
name|boolean
name|isSamlEventAllowed
parameter_list|(
name|SamlTokenSecurityEvent
name|event
parameter_list|,
name|Message
name|msg
parameter_list|)
block|{
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|allowUnsignedSamlPrincipals
init|=
name|SecurityUtils
operator|.
name|getSecurityPropertyBoolean
argument_list|(
name|SecurityConstants
operator|.
name|ENABLE_UNSIGNED_SAML_ASSERTION_PRINCIPAL
argument_list|,
name|msg
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// The SAML Assertion must be signed by default
return|return
name|event
operator|.
name|getSecurityToken
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getSecurityToken
argument_list|()
operator|.
name|getSamlAssertionWrapper
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|allowUnsignedSamlPrincipals
operator|||
name|event
operator|.
name|getSecurityToken
argument_list|()
operator|.
name|getSamlAssertionWrapper
argument_list|()
operator|.
name|isSigned
argument_list|()
operator|)
return|;
block|}
specifier|private
name|boolean
name|isUsernameTokenEventAllowed
parameter_list|(
name|UsernameTokenSecurityEvent
name|event
parameter_list|,
name|Message
name|msg
parameter_list|)
block|{
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|allowUTNoPassword
init|=
name|SecurityUtils
operator|.
name|getSecurityPropertyBoolean
argument_list|(
name|SecurityConstants
operator|.
name|ENABLE_UT_NOPASSWORD_PRINCIPAL
argument_list|,
name|msg
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// The "no password" case is not allowed by default
return|return
name|event
operator|.
name|getSecurityToken
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|allowUTNoPassword
operator|||
name|event
operator|.
name|getSecurityToken
argument_list|()
operator|.
name|getPassword
argument_list|()
operator|!=
literal|null
operator|)
return|;
block|}
specifier|private
name|SecurityContext
name|createSecurityContext
parameter_list|(
specifier|final
name|Principal
name|p
parameter_list|)
block|{
return|return
operator|new
name|SecurityContext
argument_list|()
block|{
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
name|p
return|;
block|}
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
comment|/**      * Create a SoapFault from a WSSecurityException, following the SOAP Message Security      * 1.1 specification, chapter 12 "Error Handling".      *      * When the Soap version is 1.1 then set the Fault/Code/Value from the fault code      * specified in the WSSecurityException (if it exists).      *      * Otherwise set the Fault/Code/Value to env:Sender and the Fault/Code/Subcode/Value      * as the fault code from the WSSecurityException.      */
specifier|private
name|SoapFault
name|createSoapFault
parameter_list|(
name|SoapVersion
name|version
parameter_list|,
name|WSSecurityException
name|e
parameter_list|)
block|{
name|SoapFault
name|fault
decl_stmt|;
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
name|faultCode
init|=
name|e
operator|.
name|getFaultCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|getVersion
argument_list|()
operator|==
literal|1.1
operator|&&
name|faultCode
operator|!=
literal|null
condition|)
block|{
name|fault
operator|=
operator|new
name|SoapFault
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|,
name|faultCode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fault
operator|=
operator|new
name|SoapFault
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|,
name|version
operator|.
name|getSender
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|.
name|getVersion
argument_list|()
operator|!=
literal|1.1
operator|&&
name|faultCode
operator|!=
literal|null
condition|)
block|{
name|fault
operator|.
name|setSubCode
argument_list|(
name|faultCode
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fault
return|;
block|}
block|}
end_class

end_unit

