begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|ClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|saml
operator|.
name|SAMLSecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|saml
operator|.
name|SAMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|WSS4JInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|principal
operator|.
name|WSUsernameTokenPrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|RequestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|validate
operator|.
name|Credential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|validate
operator|.
name|Validator
import|;
end_import

begin_class
specifier|public
class|class
name|AuthPolicyValidatingInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|AuthPolicyValidatingInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AuthPolicyValidatingInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Validator
name|validator
decl_stmt|;
specifier|public
name|AuthPolicyValidatingInterceptor
parameter_list|()
block|{
name|this
argument_list|(
name|Phase
operator|.
name|UNMARSHAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AuthPolicyValidatingInterceptor
parameter_list|(
name|String
name|phase
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|AuthorizationPolicy
name|policy
init|=
name|message
operator|.
name|get
argument_list|(
name|AuthorizationPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|==
literal|null
operator|||
name|policy
operator|.
name|getUserName
argument_list|()
operator|==
literal|null
operator|||
name|policy
operator|.
name|getPassword
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
name|String
name|password
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|policy
operator|.
name|getUserName
argument_list|()
expr_stmt|;
name|password
operator|=
name|policy
operator|.
name|getPassword
argument_list|()
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|errorMsg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"NO_USER_PASSWORD"
argument_list|,
name|BUNDLE
argument_list|,
name|name
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
name|errorMsg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SecurityException
argument_list|(
name|errorMsg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|UsernameToken
name|token
init|=
name|convertPolicyToToken
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|Credential
name|credential
init|=
operator|new
name|Credential
argument_list|()
decl_stmt|;
name|credential
operator|.
name|setUsernametoken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|RequestData
name|data
init|=
operator|new
name|RequestData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setMsgContext
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|credential
operator|=
name|validator
operator|.
name|validate
argument_list|(
name|credential
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|// Create a Principal/SecurityContext
name|SecurityContext
name|sc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|credential
operator|!=
literal|null
operator|&&
name|credential
operator|.
name|getPrincipal
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sc
operator|=
name|createSecurityContext
argument_list|(
name|message
argument_list|,
name|credential
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Principal
name|p
init|=
operator|new
name|WSUsernameTokenPrincipalImpl
argument_list|(
name|policy
operator|.
name|getUserName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
operator|(
operator|(
name|WSUsernameTokenPrincipalImpl
operator|)
name|p
operator|)
operator|.
name|setPassword
argument_list|(
name|policy
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|sc
operator|=
name|createSecurityContext
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
name|sc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|UsernameToken
name|convertPolicyToToken
parameter_list|(
name|AuthorizationPolicy
name|policy
parameter_list|)
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|UsernameToken
name|token
init|=
operator|new
name|UsernameToken
argument_list|(
literal|false
argument_list|,
name|doc
argument_list|,
name|WSConstants
operator|.
name|PASSWORD_TEXT
argument_list|)
decl_stmt|;
name|token
operator|.
name|setName
argument_list|(
name|policy
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setPassword
argument_list|(
name|policy
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
specifier|protected
name|SecurityContext
name|createSecurityContext
parameter_list|(
specifier|final
name|Principal
name|p
parameter_list|)
block|{
return|return
operator|new
name|SecurityContext
argument_list|()
block|{
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
name|p
return|;
block|}
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|SecurityContext
name|createSecurityContext
parameter_list|(
name|Message
name|msg
parameter_list|,
name|Credential
name|credential
parameter_list|)
block|{
name|SamlAssertionWrapper
name|samlAssertion
init|=
name|credential
operator|.
name|getTransformedToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|samlAssertion
operator|==
literal|null
condition|)
block|{
name|samlAssertion
operator|=
name|credential
operator|.
name|getSamlAssertion
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|samlAssertion
operator|!=
literal|null
condition|)
block|{
name|String
name|roleAttributeName
init|=
operator|(
name|String
operator|)
name|msg
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SAML_ROLE_ATTRIBUTENAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleAttributeName
operator|==
literal|null
operator|||
name|roleAttributeName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|roleAttributeName
operator|=
name|WSS4JInInterceptor
operator|.
name|SAML_ROLE_ATTRIBUTENAME_DEFAULT
expr_stmt|;
block|}
name|ClaimCollection
name|claims
init|=
name|SAMLUtils
operator|.
name|getClaims
argument_list|(
operator|(
name|SamlAssertionWrapper
operator|)
name|samlAssertion
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|roles
init|=
name|SAMLUtils
operator|.
name|parseRolesFromClaims
argument_list|(
name|claims
argument_list|,
name|roleAttributeName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SAMLSecurityContext
name|context
init|=
operator|new
name|SAMLSecurityContext
argument_list|(
name|credential
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|roles
argument_list|,
name|claims
argument_list|)
decl_stmt|;
name|context
operator|.
name|setIssuer
argument_list|(
name|SAMLUtils
operator|.
name|getIssuer
argument_list|(
name|samlAssertion
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAssertionElement
argument_list|(
name|SAMLUtils
operator|.
name|getAssertionElement
argument_list|(
name|samlAssertion
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
else|else
block|{
return|return
name|createSecurityContext
argument_list|(
name|credential
operator|.
name|getPrincipal
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|setValidator
parameter_list|(
name|Validator
name|validator
parameter_list|)
block|{
name|this
operator|.
name|validator
operator|=
name|validator
expr_stmt|;
block|}
block|}
end_class

end_unit

