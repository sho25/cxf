begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|security
operator|.
name|DefaultSecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|security
operator|.
name|RolePrefixSecurityContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|ClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|saml
operator|.
name|claims
operator|.
name|SAMLSecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|saml
operator|.
name|utils
operator|.
name|SAMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|utils
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|engine
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|WSHandlerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|KerberosSecurity
import|;
end_import

begin_comment
comment|/**  * The default implementation to create a SecurityContext from a set of WSS4J processing results.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultWSS4JSecurityContextCreator
implements|implements
name|WSS4JSecurityContextCreator
block|{
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|DEFAULT_SECURITY_PRIORITIES
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|DEFAULT_SECURITY_PRIORITIES
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|ST_SIGNED
argument_list|)
expr_stmt|;
name|DEFAULT_SECURITY_PRIORITIES
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|ST_UNSIGNED
argument_list|)
expr_stmt|;
name|DEFAULT_SECURITY_PRIORITIES
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|UT
argument_list|)
expr_stmt|;
name|DEFAULT_SECURITY_PRIORITIES
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|BST
argument_list|)
expr_stmt|;
name|DEFAULT_SECURITY_PRIORITIES
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|SIGN
argument_list|)
expr_stmt|;
name|DEFAULT_SECURITY_PRIORITIES
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|UT_NOPASSWORD
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|securityPriorities
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|DEFAULT_SECURITY_PRIORITIES
argument_list|)
decl_stmt|;
comment|/**      * Create a SecurityContext and store it on the SoapMessage parameter      */
specifier|public
name|void
name|createSecurityContext
parameter_list|(
name|SoapMessage
name|msg
parameter_list|,
name|WSHandlerResult
name|handlerResult
parameter_list|)
block|{
comment|/*          * All ok up to this point. Now construct and setup the security result          * structure. The service may fetch this and check it.          */
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|results
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|msg
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
name|results
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|handlerResult
argument_list|)
expr_stmt|;
name|String
name|allowUnsigned
init|=
operator|(
name|String
operator|)
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|ENABLE_UNSIGNED_SAML_ASSERTION_PRINCIPAL
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|boolean
name|allowUnsignedSamlPrincipals
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|allowUnsigned
argument_list|)
decl_stmt|;
name|boolean
name|useJAASSubject
init|=
literal|true
decl_stmt|;
name|String
name|useJAASSubjectStr
init|=
operator|(
name|String
operator|)
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|SC_FROM_JAAS_SUBJECT
argument_list|,
name|msg
argument_list|)
decl_stmt|;
if|if
condition|(
name|useJAASSubjectStr
operator|!=
literal|null
condition|)
block|{
name|useJAASSubject
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|useJAASSubjectStr
argument_list|)
expr_stmt|;
block|}
comment|// Now go through the results in a certain order to set up a security context. Highest priority is first.
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|>
name|actionResults
init|=
name|handlerResult
operator|.
name|getActionResults
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|resultPriority
range|:
name|securityPriorities
control|)
block|{
if|if
condition|(
name|resultPriority
operator|==
name|WSConstants
operator|.
name|ST_UNSIGNED
operator|&&
operator|!
name|allowUnsignedSamlPrincipals
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|foundResults
init|=
name|actionResults
operator|.
name|get
argument_list|(
name|resultPriority
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundResults
operator|!=
literal|null
operator|&&
operator|!
name|foundResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|result
range|:
name|foundResults
control|)
block|{
specifier|final
name|Object
name|binarySecurity
init|=
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_BINARY_SECURITY_TOKEN
argument_list|)
decl_stmt|;
name|PublicKey
name|publickey
init|=
operator|(
name|PublicKey
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_PUBLIC_KEY
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|resultPriority
operator|==
name|WSConstants
operator|.
name|BST
operator|&&
operator|!
operator|(
name|binarySecurity
operator|instanceof
name|KerberosSecurity
operator|)
operator|)
operator|||
operator|(
name|resultPriority
operator|==
name|WSConstants
operator|.
name|SIGN
operator|&&
name|publickey
operator|==
literal|null
operator|&&
name|cert
operator|==
literal|null
operator|)
condition|)
block|{
continue|continue;
block|}
name|SecurityContext
name|context
init|=
name|createSecurityContext
argument_list|(
name|msg
argument_list|,
name|useJAASSubject
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|SecurityContext
name|createSecurityContext
parameter_list|(
name|SoapMessage
name|msg
parameter_list|,
name|boolean
name|useJAASSubject
parameter_list|,
name|WSSecurityEngineResult
name|wsResult
parameter_list|)
block|{
specifier|final
name|Principal
name|p
init|=
operator|(
name|Principal
operator|)
name|wsResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_PRINCIPAL
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|subject
init|=
operator|(
name|Subject
operator|)
name|wsResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SUBJECT
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|p
operator|instanceof
name|KerberosPrincipal
operator|)
operator|&&
name|useJAASSubject
condition|)
block|{
name|String
name|roleClassifier
init|=
operator|(
name|String
operator|)
name|msg
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SUBJECT_ROLE_CLASSIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleClassifier
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|roleClassifier
argument_list|)
condition|)
block|{
name|String
name|roleClassifierType
init|=
operator|(
name|String
operator|)
name|msg
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SUBJECT_ROLE_CLASSIFIER_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleClassifierType
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|roleClassifierType
argument_list|)
condition|)
block|{
name|roleClassifierType
operator|=
literal|"prefix"
expr_stmt|;
block|}
return|return
operator|new
name|RolePrefixSecurityContextImpl
argument_list|(
name|subject
argument_list|,
name|roleClassifier
argument_list|,
name|roleClassifierType
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|DefaultSecurityContext
argument_list|(
name|p
argument_list|,
name|subject
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|boolean
name|utWithCallbacks
init|=
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|msg
argument_list|,
name|SecurityConstants
operator|.
name|VALIDATE_TOKEN
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|utWithCallbacks
condition|)
block|{
name|WSS4JTokenConverter
operator|.
name|convertToken
argument_list|(
name|msg
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|Object
name|receivedAssertion
init|=
name|wsResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_TRANSFORMED_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|receivedAssertion
operator|==
literal|null
condition|)
block|{
name|receivedAssertion
operator|=
name|wsResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DELEGATION_CREDENTIAL
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|DELEGATED_CREDENTIAL
argument_list|,
name|wsResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DELEGATION_CREDENTIAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|receivedAssertion
operator|instanceof
name|SamlAssertionWrapper
condition|)
block|{
name|String
name|roleAttributeName
init|=
operator|(
name|String
operator|)
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|SAML_ROLE_ATTRIBUTENAME
argument_list|,
name|msg
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleAttributeName
operator|==
literal|null
operator|||
name|roleAttributeName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|roleAttributeName
operator|=
name|WSS4JInInterceptor
operator|.
name|SAML_ROLE_ATTRIBUTENAME_DEFAULT
expr_stmt|;
block|}
name|ClaimCollection
name|claims
init|=
name|SAMLUtils
operator|.
name|getClaims
argument_list|(
operator|(
name|SamlAssertionWrapper
operator|)
name|receivedAssertion
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|roles
init|=
name|SAMLUtils
operator|.
name|parseRolesFromClaims
argument_list|(
name|claims
argument_list|,
name|roleAttributeName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SAMLSecurityContext
name|context
init|=
operator|new
name|SAMLSecurityContext
argument_list|(
name|p
argument_list|,
name|roles
argument_list|,
name|claims
argument_list|)
decl_stmt|;
name|context
operator|.
name|setIssuer
argument_list|(
name|SAMLUtils
operator|.
name|getIssuer
argument_list|(
name|receivedAssertion
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAssertionElement
argument_list|(
name|SAMLUtils
operator|.
name|getAssertionElement
argument_list|(
name|receivedAssertion
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
else|else
block|{
return|return
name|createSecurityContext
argument_list|(
name|p
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|SecurityContext
name|createSecurityContext
parameter_list|(
specifier|final
name|Principal
name|p
parameter_list|)
block|{
return|return
operator|new
name|SecurityContext
argument_list|()
block|{
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
name|p
return|;
block|}
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getSecurityPriorities
parameter_list|()
block|{
return|return
name|securityPriorities
return|;
block|}
specifier|public
name|void
name|setSecurityPriorities
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|securityPriorities
parameter_list|)
block|{
name|this
operator|.
name|securityPriorities
operator|=
name|securityPriorities
expr_stmt|;
block|}
block|}
end_class

end_unit

