begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|saaj
operator|.
name|SAAJInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|saaj
operator|.
name|SAAJUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|security
operator|.
name|DefaultSecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|security
operator|.
name|RolePrefixSecurityContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|claims
operator|.
name|ClaimCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|saml
operator|.
name|SAMLSecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|saml
operator|.
name|SAMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|utils
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|transport
operator|.
name|TLSSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|cache
operator|.
name|ReplayCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|ThreadLocalSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSecurityEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|RequestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|WSHandlerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|KerberosSecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|processor
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|validate
operator|.
name|NoOpValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|validate
operator|.
name|Validator
import|;
end_import

begin_comment
comment|/**  * Performs WS-Security inbound actions.  */
end_comment

begin_class
specifier|public
class|class
name|WSS4JInInterceptor
extends|extends
name|AbstractWSS4JInterceptor
block|{
comment|/**      * This configuration tag specifies the default attribute name where the roles are present      * The default is "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role".      */
specifier|public
specifier|static
specifier|final
name|String
name|SAML_ROLE_ATTRIBUTENAME_DEFAULT
init|=
literal|"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/role"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROCESSOR_MAP
init|=
literal|"wss4j.processor.map"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|VALIDATOR_MAP
init|=
literal|"wss4j.validator.map"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SECURITY_PROCESSED
init|=
name|WSS4JInInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".DONE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WSS4JInInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|ignoreActions
decl_stmt|;
comment|/**      *      */
specifier|private
name|WSSecurityEngine
name|secEngineOverride
decl_stmt|;
specifier|public
name|WSS4JInInterceptor
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setPhase
argument_list|(
name|Phase
operator|.
name|PRE_PROTOCOL
argument_list|)
expr_stmt|;
name|getAfter
argument_list|()
operator|.
name|add
argument_list|(
name|SAAJInInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|getAfter
argument_list|()
operator|.
name|add
argument_list|(
literal|"org.apache.cxf.ws.addressing.soap.MAPCodec"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WSS4JInInterceptor
parameter_list|(
name|boolean
name|ignore
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|ignoreActions
operator|=
name|ignore
expr_stmt|;
block|}
specifier|public
name|WSS4JInInterceptor
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|processorMap
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|properties
operator|.
name|get
argument_list|(
name|PROCESSOR_MAP
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|validatorMap
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|properties
operator|.
name|get
argument_list|(
name|VALIDATOR_MAP
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|processorMap
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|validatorMap
operator|!=
literal|null
condition|)
block|{
name|processorMap
operator|.
name|putAll
argument_list|(
name|validatorMap
argument_list|)
expr_stmt|;
block|}
name|secEngineOverride
operator|=
name|createSecurityEngine
argument_list|(
name|processorMap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|validatorMap
operator|!=
literal|null
condition|)
block|{
name|secEngineOverride
operator|=
name|createSecurityEngine
argument_list|(
name|validatorMap
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setIgnoreActions
parameter_list|(
name|boolean
name|i
parameter_list|)
block|{
name|ignoreActions
operator|=
name|i
expr_stmt|;
block|}
specifier|private
name|SOAPMessage
name|getSOAPMessage
parameter_list|(
name|SoapMessage
name|msg
parameter_list|)
block|{
name|SAAJInInterceptor
operator|.
name|INSTANCE
operator|.
name|handleMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
name|msg
operator|.
name|getContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getProperty
parameter_list|(
name|Object
name|msgContext
parameter_list|,
name|String
name|key
parameter_list|)
block|{
comment|// use the superclass first
name|Object
name|result
init|=
name|super
operator|.
name|getProperty
argument_list|(
name|msgContext
argument_list|,
name|key
argument_list|)
decl_stmt|;
comment|// handle the special case of the SEND_SIGV
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|WSHandlerConstants
operator|.
name|SEND_SIGV
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|&&
name|this
operator|.
name|isRequestor
argument_list|(
operator|(
name|SoapMessage
operator|)
name|msgContext
argument_list|)
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|SoapMessage
operator|)
name|msgContext
operator|)
operator|.
name|getExchange
argument_list|()
operator|.
name|getOutMessage
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isGET
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
block|{
name|String
name|method
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|SoapMessage
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
decl_stmt|;
name|boolean
name|isGet
init|=
literal|"GET"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
operator|&&
name|message
operator|.
name|getContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|)
operator|==
literal|null
decl_stmt|;
return|return
name|isGet
return|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|msg
parameter_list|)
throws|throws
name|Fault
block|{
if|if
condition|(
name|msg
operator|.
name|containsKey
argument_list|(
name|SECURITY_PROCESSED
argument_list|)
operator|||
name|isGET
argument_list|(
name|msg
argument_list|)
condition|)
block|{
return|return;
block|}
name|Object
name|provider
init|=
name|msg
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Provider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|useCustomProvider
init|=
name|provider
operator|!=
literal|null
operator|&&
name|ThreadLocalSecurityProvider
operator|.
name|isInstalled
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|useCustomProvider
condition|)
block|{
name|ThreadLocalSecurityProvider
operator|.
name|setProvider
argument_list|(
operator|(
name|Provider
operator|)
name|provider
argument_list|)
expr_stmt|;
block|}
name|handleMessageInternal
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|useCustomProvider
condition|)
block|{
name|ThreadLocalSecurityProvider
operator|.
name|unsetProvider
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|handleMessageInternal
parameter_list|(
name|SoapMessage
name|msg
parameter_list|)
throws|throws
name|Fault
block|{
name|boolean
name|utWithCallbacks
init|=
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|msg
argument_list|,
name|SecurityConstants
operator|.
name|VALIDATE_TOKEN
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|translateProperties
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|RequestData
name|reqData
init|=
operator|new
name|CXFRequestData
argument_list|()
decl_stmt|;
name|WSSConfig
name|config
init|=
operator|(
name|WSSConfig
operator|)
name|msg
operator|.
name|getContextualProperty
argument_list|(
name|WSSConfig
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|WSSecurityEngine
name|engine
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|engine
operator|=
operator|new
name|WSSecurityEngine
argument_list|()
expr_stmt|;
name|engine
operator|.
name|setWssConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|engine
operator|=
name|getSecurityEngine
argument_list|(
name|utWithCallbacks
argument_list|)
expr_stmt|;
if|if
condition|(
name|engine
operator|==
literal|null
condition|)
block|{
name|engine
operator|=
operator|new
name|WSSecurityEngine
argument_list|()
expr_stmt|;
block|}
name|config
operator|=
name|engine
operator|.
name|getWssConfig
argument_list|()
expr_stmt|;
block|}
name|reqData
operator|.
name|setWssConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// Add Audience Restrictions for SAML
name|configureAudienceRestriction
argument_list|(
name|msg
argument_list|,
name|reqData
argument_list|)
expr_stmt|;
name|SOAPMessage
name|doc
init|=
name|getSOAPMessage
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|boolean
name|doDebug
init|=
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
decl_stmt|;
name|SoapVersion
name|version
init|=
name|msg
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|doDebug
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"WSS4JInInterceptor: enter handleMessage()"
argument_list|)
expr_stmt|;
block|}
comment|/*          * The overall try, just to have a finally at the end to perform some          * housekeeping.          */
try|try
block|{
name|reqData
operator|.
name|setMsgContext
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|reqData
operator|.
name|setAttachmentCallbackHandler
argument_list|(
operator|new
name|AttachmentCallbackHandler
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|setAlgorithmSuites
argument_list|(
name|msg
argument_list|,
name|reqData
argument_list|)
expr_stmt|;
name|reqData
operator|.
name|setCallbackHandler
argument_list|(
name|getCallback
argument_list|(
name|reqData
argument_list|,
name|utWithCallbacks
argument_list|)
argument_list|)
expr_stmt|;
name|computeAction
argument_list|(
name|msg
argument_list|,
name|reqData
argument_list|)
expr_stmt|;
name|String
name|action
init|=
name|getAction
argument_list|(
name|msg
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|actions
init|=
name|WSSecurityUtil
operator|.
name|decodeAction
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|String
name|actor
init|=
operator|(
name|String
operator|)
name|getOption
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|actor
operator|==
literal|null
condition|)
block|{
name|actor
operator|=
operator|(
name|String
operator|)
name|msg
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ACTOR
argument_list|)
expr_stmt|;
block|}
name|reqData
operator|.
name|setActor
argument_list|(
name|actor
argument_list|)
expr_stmt|;
comment|// Configure replay caching
name|configureReplayCaches
argument_list|(
name|reqData
argument_list|,
name|actions
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|TLSSessionInfo
name|tlsInfo
init|=
name|msg
operator|.
name|get
argument_list|(
name|TLSSessionInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tlsInfo
operator|!=
literal|null
condition|)
block|{
name|Certificate
index|[]
name|tlsCerts
init|=
name|tlsInfo
operator|.
name|getPeerCertificates
argument_list|()
decl_stmt|;
name|reqData
operator|.
name|setTlsCerts
argument_list|(
name|tlsCerts
argument_list|)
expr_stmt|;
block|}
comment|/*              * Get and check the Signature specific parameters first because              * they may be used for encryption too.              */
name|doReceiverAction
argument_list|(
name|actions
argument_list|,
name|reqData
argument_list|)
expr_stmt|;
comment|/*get chance to check msg context enableRevocation setting              *when use policy based ws-security where the WSHandler configuration              *isn't available              */
name|boolean
name|enableRevocation
init|=
name|reqData
operator|.
name|isRevocationEnabled
argument_list|()
operator|||
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|msg
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENABLE_REVOCATION
argument_list|)
argument_list|)
decl_stmt|;
name|reqData
operator|.
name|setEnableRevocation
argument_list|(
name|enableRevocation
argument_list|)
expr_stmt|;
name|Element
name|soapBody
init|=
name|SAAJUtils
operator|.
name|getBody
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|soapBody
operator|!=
literal|null
condition|)
block|{
name|engine
operator|.
name|setCallbackLookup
argument_list|(
operator|new
name|CXFCallbackLookup
argument_list|(
name|soapBody
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|soapBody
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Element
name|elem
init|=
name|WSSecurityUtil
operator|.
name|getSecurityHeader
argument_list|(
name|doc
operator|.
name|getSOAPHeader
argument_list|()
argument_list|,
name|actor
argument_list|,
name|version
operator|.
name|getVersion
argument_list|()
operator|!=
literal|1.1
argument_list|)
decl_stmt|;
name|WSHandlerResult
name|wsResult
init|=
name|engine
operator|.
name|processSecurityHeader
argument_list|(
name|elem
argument_list|,
name|reqData
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|wsResult
operator|.
name|getResults
argument_list|()
operator|==
literal|null
operator|||
name|wsResult
operator|.
name|getResults
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
comment|// security header found
if|if
condition|(
name|reqData
operator|.
name|getWssConfig
argument_list|()
operator|.
name|isEnableSignatureConfirmation
argument_list|()
condition|)
block|{
name|checkSignatureConfirmation
argument_list|(
name|reqData
argument_list|,
name|wsResult
argument_list|)
expr_stmt|;
block|}
name|checkActions
argument_list|(
name|msg
argument_list|,
name|reqData
argument_list|,
name|wsResult
operator|.
name|getResults
argument_list|()
argument_list|,
name|actions
argument_list|,
name|SAAJUtils
operator|.
name|getBody
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|doResults
argument_list|(
name|msg
argument_list|,
name|actor
argument_list|,
name|SAAJUtils
operator|.
name|getHeader
argument_list|(
name|doc
argument_list|)
argument_list|,
name|SAAJUtils
operator|.
name|getBody
argument_list|(
name|doc
argument_list|)
argument_list|,
name|wsResult
argument_list|,
name|utWithCallbacks
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no security header found
if|if
condition|(
name|doc
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getEnvelope
argument_list|()
operator|.
name|getBody
argument_list|()
operator|.
name|hasFault
argument_list|()
operator|&&
name|isRequestor
argument_list|(
name|msg
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"The request is a SOAP Fault, but it is not secured"
argument_list|)
expr_stmt|;
comment|// We allow lax action matching here for backwards compatibility
comment|// with manually configured WSS4JInInterceptors that previously
comment|// allowed faults to pass through even if their actions aren't
comment|// a strict match against those configured.  In the WS-SP case,
comment|// we will want to still call doResults as it handles asserting
comment|// certain assertions that do not require a WS-S header such as
comment|// a sp:TransportBinding assertion.  In the case of WS-SP,
comment|// the unasserted assertions will provide confirmation that
comment|// security was not sufficient.
comment|// checkActions(msg, reqData, wsResult, actions);
name|doResults
argument_list|(
name|msg
argument_list|,
name|actor
argument_list|,
name|SAAJUtils
operator|.
name|getHeader
argument_list|(
name|doc
argument_list|)
argument_list|,
name|SAAJUtils
operator|.
name|getBody
argument_list|(
name|doc
argument_list|)
argument_list|,
name|wsResult
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkActions
argument_list|(
name|msg
argument_list|,
name|reqData
argument_list|,
name|wsResult
operator|.
name|getResults
argument_list|()
argument_list|,
name|actions
argument_list|,
name|SAAJUtils
operator|.
name|getBody
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|doResults
argument_list|(
name|msg
argument_list|,
name|actor
argument_list|,
name|SAAJUtils
operator|.
name|getHeader
argument_list|(
name|doc
argument_list|)
argument_list|,
name|SAAJUtils
operator|.
name|getBody
argument_list|(
name|doc
argument_list|)
argument_list|,
name|wsResult
argument_list|)
expr_stmt|;
block|}
block|}
name|advanceBody
argument_list|(
name|msg
argument_list|,
name|SAAJUtils
operator|.
name|getBody
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|SAAJInInterceptor
operator|.
name|replaceHeaders
argument_list|(
name|doc
argument_list|,
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|doDebug
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"WSS4JInInterceptor: exit handleMessage()"
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|put
argument_list|(
name|SECURITY_PROCESSED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
throw|throw
name|WSS4JUtils
operator|.
name|createSoapFault
argument_list|(
name|msg
argument_list|,
name|version
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SoapFault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"STAX_EX"
argument_list|,
name|LOG
argument_list|)
argument_list|,
name|e
argument_list|,
name|version
operator|.
name|getSender
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SoapFault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SAAJ_EX"
argument_list|,
name|LOG
argument_list|)
argument_list|,
name|e
argument_list|,
name|version
operator|.
name|getSender
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|reqData
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reqData
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configureAudienceRestriction
parameter_list|(
name|SoapMessage
name|msg
parameter_list|,
name|RequestData
name|reqData
parameter_list|)
block|{
comment|// Add Audience Restrictions for SAML
name|boolean
name|enableAudienceRestriction
init|=
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|msg
argument_list|,
name|SecurityConstants
operator|.
name|AUDIENCE_RESTRICTION_VALIDATION
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|enableAudienceRestriction
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|audiences
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|getContextualProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|REQUEST_URL
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|audiences
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|msg
operator|.
name|getContextualProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|REQUEST_URL
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|msg
operator|.
name|getContextualProperty
argument_list|(
literal|"javax.xml.ws.wsdl.service"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|audiences
operator|.
name|add
argument_list|(
name|msg
operator|.
name|getContextualProperty
argument_list|(
literal|"javax.xml.ws.wsdl.service"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|reqData
operator|.
name|setAudienceRestrictions
argument_list|(
name|audiences
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkActions
parameter_list|(
name|SoapMessage
name|msg
parameter_list|,
name|RequestData
name|reqData
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|wsResult
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|actions
parameter_list|,
name|Element
name|body
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
name|ignoreActions
condition|)
block|{
comment|// Not applicable for the WS-SecurityPolicy case
return|return;
block|}
comment|// now check the security actions: do they match, in any order?
if|if
condition|(
operator|!
name|checkReceiverResultsAnyOrder
argument_list|(
name|wsResult
argument_list|,
name|actions
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Security processing failed (actions mismatch)"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|INVALID_SECURITY
argument_list|)
throw|;
block|}
comment|// Now check to see if SIGNATURE_PARTS are specified
name|String
name|signatureParts
init|=
operator|(
name|String
operator|)
name|getProperty
argument_list|(
name|msg
argument_list|,
name|WSHandlerConstants
operator|.
name|SIGNATURE_PARTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|signatureParts
operator|!=
literal|null
condition|)
block|{
name|String
name|warning
init|=
literal|"To enforce that particular elements were signed you must either "
operator|+
literal|"use WS-SecurityPolicy, or else use the CryptoCoverageChecker or "
operator|+
literal|"SignatureCoverageChecker"
decl_stmt|;
name|LOG
operator|.
name|warning
argument_list|(
name|warning
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Do whatever is necessary to determine the action for the incoming message and       * do whatever other setup work is necessary.      *       * @param msg      * @param reqData      */
specifier|protected
name|void
name|computeAction
parameter_list|(
name|SoapMessage
name|msg
parameter_list|,
name|RequestData
name|reqData
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|//
comment|// Try to get Crypto Provider from message context properties.
comment|// It gives a possibility to use external Crypto Provider
comment|//
name|Crypto
name|encCrypto
init|=
operator|(
name|Crypto
operator|)
name|msg
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_CRYPTO
argument_list|)
decl_stmt|;
if|if
condition|(
name|encCrypto
operator|!=
literal|null
condition|)
block|{
name|reqData
operator|.
name|setDecCrypto
argument_list|(
name|encCrypto
argument_list|)
expr_stmt|;
block|}
name|Crypto
name|sigCrypto
init|=
operator|(
name|Crypto
operator|)
name|msg
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_CRYPTO
argument_list|)
decl_stmt|;
if|if
condition|(
name|sigCrypto
operator|!=
literal|null
condition|)
block|{
name|reqData
operator|.
name|setSigVerCrypto
argument_list|(
name|sigCrypto
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|configureReplayCaches
parameter_list|(
name|RequestData
name|reqData
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|actions
parameter_list|,
name|SoapMessage
name|msg
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|reqData
operator|.
name|setEnableNonceReplayCache
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|isNonceCacheRequired
argument_list|(
name|actions
argument_list|,
name|msg
argument_list|)
condition|)
block|{
name|ReplayCache
name|nonceCache
init|=
name|getReplayCache
argument_list|(
name|msg
argument_list|,
name|SecurityConstants
operator|.
name|ENABLE_NONCE_CACHE
argument_list|,
name|SecurityConstants
operator|.
name|NONCE_CACHE_INSTANCE
argument_list|)
decl_stmt|;
name|reqData
operator|.
name|setNonceReplayCache
argument_list|(
name|nonceCache
argument_list|)
expr_stmt|;
if|if
condition|(
name|nonceCache
operator|!=
literal|null
condition|)
block|{
name|reqData
operator|.
name|setEnableNonceReplayCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|reqData
operator|.
name|setEnableTimestampReplayCache
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTimestampCacheRequired
argument_list|(
name|actions
argument_list|,
name|msg
argument_list|)
condition|)
block|{
name|ReplayCache
name|timestampCache
init|=
name|getReplayCache
argument_list|(
name|msg
argument_list|,
name|SecurityConstants
operator|.
name|ENABLE_TIMESTAMP_CACHE
argument_list|,
name|SecurityConstants
operator|.
name|TIMESTAMP_CACHE_INSTANCE
argument_list|)
decl_stmt|;
name|reqData
operator|.
name|setTimestampReplayCache
argument_list|(
name|timestampCache
argument_list|)
expr_stmt|;
if|if
condition|(
name|timestampCache
operator|!=
literal|null
condition|)
block|{
name|reqData
operator|.
name|setEnableTimestampReplayCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|reqData
operator|.
name|setEnableSamlOneTimeUseReplayCache
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSamlCacheRequired
argument_list|(
name|actions
argument_list|,
name|msg
argument_list|)
condition|)
block|{
name|ReplayCache
name|samlCache
init|=
name|getReplayCache
argument_list|(
name|msg
argument_list|,
name|SecurityConstants
operator|.
name|ENABLE_SAML_ONE_TIME_USE_CACHE
argument_list|,
name|SecurityConstants
operator|.
name|SAML_ONE_TIME_USE_CACHE_INSTANCE
argument_list|)
decl_stmt|;
name|reqData
operator|.
name|setSamlOneTimeUseReplayCache
argument_list|(
name|samlCache
argument_list|)
expr_stmt|;
if|if
condition|(
name|samlCache
operator|!=
literal|null
condition|)
block|{
name|reqData
operator|.
name|setEnableSamlOneTimeUseReplayCache
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Is a Nonce Cache required, i.e. are we expecting a UsernameToken       */
specifier|protected
name|boolean
name|isNonceCacheRequired
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|actions
parameter_list|,
name|SoapMessage
name|msg
parameter_list|)
block|{
return|return
name|actions
operator|.
name|contains
argument_list|(
name|WSConstants
operator|.
name|UT
argument_list|)
operator|||
name|actions
operator|.
name|contains
argument_list|(
name|WSConstants
operator|.
name|UT_NOPASSWORD
argument_list|)
return|;
block|}
comment|/**      * Is a Timestamp cache required, i.e. are we expecting a Timestamp       */
specifier|protected
name|boolean
name|isTimestampCacheRequired
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|actions
parameter_list|,
name|SoapMessage
name|msg
parameter_list|)
block|{
return|return
name|actions
operator|.
name|contains
argument_list|(
name|WSConstants
operator|.
name|TS
argument_list|)
return|;
block|}
comment|/**      * Is a SAML Cache required, i.e. are we expecting a SAML Token       */
specifier|protected
name|boolean
name|isSamlCacheRequired
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|actions
parameter_list|,
name|SoapMessage
name|msg
parameter_list|)
block|{
return|return
name|actions
operator|.
name|contains
argument_list|(
name|WSConstants
operator|.
name|ST_UNSIGNED
argument_list|)
operator|||
name|actions
operator|.
name|contains
argument_list|(
name|WSConstants
operator|.
name|ST_SIGNED
argument_list|)
return|;
block|}
comment|/**      * Set a WSS4J AlgorithmSuite object on the RequestData context, to restrict the      * algorithms that are allowed for encryption, signature, etc.      */
specifier|protected
name|void
name|setAlgorithmSuites
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|RequestData
name|data
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|super
operator|.
name|decodeAlgorithmSuite
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doResults
parameter_list|(
name|SoapMessage
name|msg
parameter_list|,
name|String
name|actor
parameter_list|,
name|Element
name|soapHeader
parameter_list|,
name|Element
name|soapBody
parameter_list|,
name|WSHandlerResult
name|wsResult
parameter_list|)
throws|throws
name|SOAPException
throws|,
name|XMLStreamException
throws|,
name|WSSecurityException
block|{
name|doResults
argument_list|(
name|msg
argument_list|,
name|actor
argument_list|,
name|soapHeader
argument_list|,
name|soapBody
argument_list|,
name|wsResult
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doResults
parameter_list|(
name|SoapMessage
name|msg
parameter_list|,
name|String
name|actor
parameter_list|,
name|Element
name|soapHeader
parameter_list|,
name|Element
name|soapBody
parameter_list|,
name|WSHandlerResult
name|wsResult
parameter_list|,
name|boolean
name|utWithCallbacks
parameter_list|)
throws|throws
name|SOAPException
throws|,
name|XMLStreamException
throws|,
name|WSSecurityException
block|{
comment|/*          * All ok up to this point. Now construct and setup the security result          * structure. The service may fetch this and check it.          */
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|results
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|msg
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
name|results
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
name|msg
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|wsResult
argument_list|)
expr_stmt|;
name|Boolean
name|allowUnsignedSamlPrincipals
init|=
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|msg
argument_list|,
name|SecurityConstants
operator|.
name|ENABLE_UNSIGNED_SAML_ASSERTION_PRINCIPAL
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|wsResult
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|WSSecurityEngineResult
name|o
init|=
name|wsResult
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Integer
name|action
init|=
operator|(
name|Integer
operator|)
name|o
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
specifier|final
name|Principal
name|p
init|=
operator|(
name|Principal
operator|)
name|o
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_PRINCIPAL
argument_list|)
decl_stmt|;
specifier|final
name|Subject
name|subject
init|=
operator|(
name|Subject
operator|)
name|o
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SUBJECT
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|useJAASSubject
init|=
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|msg
argument_list|,
name|SecurityConstants
operator|.
name|SC_FROM_JAAS_SUBJECT
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|binarySecurity
init|=
name|o
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_BINARY_SECURITY_TOKEN
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isValidSamlToken
init|=
name|action
operator|==
name|WSConstants
operator|.
name|ST_SIGNED
operator|||
operator|(
name|allowUnsignedSamlPrincipals
operator|&&
name|action
operator|==
name|WSConstants
operator|.
name|ST_UNSIGNED
operator|)
decl_stmt|;
comment|// UsernameToken, Kerberos, SAML token or XML Signature
if|if
condition|(
name|action
operator|==
name|WSConstants
operator|.
name|UT
operator|||
name|action
operator|==
name|WSConstants
operator|.
name|UT_NOPASSWORD
operator|||
operator|(
name|action
operator|==
name|WSConstants
operator|.
name|BST
operator|&&
name|binarySecurity
operator|instanceof
name|KerberosSecurity
operator|)
operator|||
name|isValidSamlToken
operator|||
name|action
operator|==
name|WSConstants
operator|.
name|SIGN
condition|)
block|{
if|if
condition|(
name|action
operator|==
name|WSConstants
operator|.
name|SIGN
condition|)
block|{
comment|// Check we have a public key / certificate for the signing case
name|PublicKey
name|publickey
init|=
operator|(
name|PublicKey
operator|)
name|o
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_PUBLIC_KEY
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|o
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|publickey
operator|==
literal|null
operator|&&
name|cert
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
block|}
name|SecurityContext
name|context
init|=
name|createSecurityContext
argument_list|(
name|msg
argument_list|,
name|subject
argument_list|,
name|p
argument_list|,
name|useJAASSubject
argument_list|,
name|o
argument_list|,
name|utWithCallbacks
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
name|context
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
specifier|protected
name|SecurityContext
name|createSecurityContext
parameter_list|(
name|SoapMessage
name|msg
parameter_list|,
name|Subject
name|subject
parameter_list|,
name|Principal
name|p
parameter_list|,
name|boolean
name|useJAASSubject
parameter_list|,
name|WSSecurityEngineResult
name|wsResult
parameter_list|,
name|boolean
name|utWithCallbacks
parameter_list|)
block|{
if|if
condition|(
name|subject
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|p
operator|instanceof
name|KerberosPrincipal
operator|)
operator|&&
name|useJAASSubject
condition|)
block|{
name|String
name|roleClassifier
init|=
operator|(
name|String
operator|)
name|msg
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SUBJECT_ROLE_CLASSIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleClassifier
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|roleClassifier
argument_list|)
condition|)
block|{
name|String
name|roleClassifierType
init|=
operator|(
name|String
operator|)
name|msg
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SUBJECT_ROLE_CLASSIFIER_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleClassifierType
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|roleClassifierType
argument_list|)
condition|)
block|{
name|roleClassifierType
operator|=
literal|"prefix"
expr_stmt|;
block|}
return|return
operator|new
name|RolePrefixSecurityContextImpl
argument_list|(
name|subject
argument_list|,
name|roleClassifier
argument_list|,
name|roleClassifierType
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|DefaultSecurityContext
argument_list|(
name|p
argument_list|,
name|subject
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|utWithCallbacks
condition|)
block|{
name|WSS4JTokenConverter
operator|.
name|convertToken
argument_list|(
name|msg
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|Object
name|receivedAssertion
init|=
name|wsResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_TRANSFORMED_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|receivedAssertion
operator|==
literal|null
condition|)
block|{
name|receivedAssertion
operator|=
name|wsResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wsResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DELEGATION_CREDENTIAL
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|DELEGATED_CREDENTIAL
argument_list|,
name|wsResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DELEGATION_CREDENTIAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|receivedAssertion
operator|instanceof
name|SamlAssertionWrapper
condition|)
block|{
name|String
name|roleAttributeName
init|=
operator|(
name|String
operator|)
name|msg
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SAML_ROLE_ATTRIBUTENAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleAttributeName
operator|==
literal|null
operator|||
name|roleAttributeName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|roleAttributeName
operator|=
name|SAML_ROLE_ATTRIBUTENAME_DEFAULT
expr_stmt|;
block|}
name|ClaimCollection
name|claims
init|=
name|SAMLUtils
operator|.
name|getClaims
argument_list|(
operator|(
name|SamlAssertionWrapper
operator|)
name|receivedAssertion
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|roles
init|=
name|SAMLUtils
operator|.
name|parseRolesFromClaims
argument_list|(
name|claims
argument_list|,
name|roleAttributeName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SAMLSecurityContext
name|context
init|=
operator|new
name|SAMLSecurityContext
argument_list|(
name|p
argument_list|,
name|roles
argument_list|,
name|claims
argument_list|)
decl_stmt|;
name|context
operator|.
name|setIssuer
argument_list|(
name|SAMLUtils
operator|.
name|getIssuer
argument_list|(
name|receivedAssertion
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAssertionElement
argument_list|(
name|SAMLUtils
operator|.
name|getAssertionElement
argument_list|(
name|receivedAssertion
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
else|else
block|{
return|return
name|createSecurityContext
argument_list|(
name|p
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|advanceBody
parameter_list|(
name|SoapMessage
name|msg
parameter_list|,
name|Node
name|body
parameter_list|)
throws|throws
name|SOAPException
throws|,
name|XMLStreamException
throws|,
name|WSSecurityException
block|{
name|XMLStreamReader
name|reader
init|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|body
argument_list|)
argument_list|)
decl_stmt|;
comment|// advance just past body
name|int
name|evt
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
operator|&&
operator|(
name|evt
operator|!=
name|XMLStreamConstants
operator|.
name|END_ELEMENT
operator|||
name|evt
operator|!=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|)
condition|)
block|{
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|msg
operator|.
name|setContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|SecurityContext
name|createSecurityContext
parameter_list|(
specifier|final
name|Principal
name|p
parameter_list|)
block|{
return|return
operator|new
name|SecurityContext
argument_list|()
block|{
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
name|p
return|;
block|}
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
specifier|private
name|String
name|getAction
parameter_list|(
name|SoapMessage
name|msg
parameter_list|,
name|SoapVersion
name|version
parameter_list|)
block|{
name|String
name|action
init|=
operator|(
name|String
operator|)
name|getOption
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
name|action
operator|=
operator|(
name|String
operator|)
name|msg
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"No security action was defined!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SoapFault
argument_list|(
literal|"No security action was defined!"
argument_list|,
name|version
operator|.
name|getReceiver
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|action
return|;
block|}
specifier|protected
name|CallbackHandler
name|getCallback
parameter_list|(
name|RequestData
name|reqData
parameter_list|,
name|boolean
name|utWithCallbacks
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
operator|!
name|utWithCallbacks
condition|)
block|{
name|CallbackHandler
name|pwdCallback
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pwdCallback
operator|=
name|getCallback
argument_list|(
name|reqData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
return|return
operator|new
name|DelegatingCallbackHandler
argument_list|(
name|pwdCallback
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getCallback
argument_list|(
name|reqData
argument_list|)
return|;
block|}
block|}
specifier|protected
name|CallbackHandler
name|getCallback
parameter_list|(
name|RequestData
name|reqData
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Object
name|o
init|=
operator|(
operator|(
name|SoapMessage
operator|)
name|reqData
operator|.
name|getMsgContext
argument_list|()
operator|)
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|)
decl_stmt|;
name|CallbackHandler
name|cbHandler
init|=
name|SecurityUtils
operator|.
name|getCallbackHandler
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|cbHandler
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|cbHandler
operator|=
name|getPasswordCallbackHandler
argument_list|(
name|reqData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|sec
parameter_list|)
block|{
name|Endpoint
name|ep
init|=
operator|(
operator|(
name|SoapMessage
operator|)
name|reqData
operator|.
name|getMsgContext
argument_list|()
operator|)
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ep
operator|!=
literal|null
operator|&&
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TokenStore
name|store
init|=
name|TokenStoreUtils
operator|.
name|getTokenStore
argument_list|(
operator|(
name|SoapMessage
operator|)
name|reqData
operator|.
name|getMsgContext
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStoreCallbackHandler
argument_list|(
literal|null
argument_list|,
name|store
argument_list|)
return|;
block|}
throw|throw
name|sec
throw|;
block|}
block|}
name|Endpoint
name|ep
init|=
operator|(
operator|(
name|SoapMessage
operator|)
name|reqData
operator|.
name|getMsgContext
argument_list|()
operator|)
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ep
operator|!=
literal|null
operator|&&
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TokenStore
name|store
init|=
name|TokenStoreUtils
operator|.
name|getTokenStore
argument_list|(
operator|(
name|SoapMessage
operator|)
name|reqData
operator|.
name|getMsgContext
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStoreCallbackHandler
argument_list|(
name|cbHandler
argument_list|,
name|store
argument_list|)
return|;
block|}
return|return
name|cbHandler
return|;
block|}
comment|/**      * @return      the WSSecurityEngine in use by this interceptor.      *              This engine is defined to be the secEngineOverride      *              instance, if defined in this class (and supplied through      *              construction); otherwise, it is taken to be the default      *              WSSecEngine instance (currently defined in the WSHandler      *              base class).      */
specifier|protected
name|WSSecurityEngine
name|getSecurityEngine
parameter_list|(
name|boolean
name|utWithCallbacks
parameter_list|)
block|{
if|if
condition|(
name|secEngineOverride
operator|!=
literal|null
condition|)
block|{
return|return
name|secEngineOverride
return|;
block|}
if|if
condition|(
operator|!
name|utWithCallbacks
condition|)
block|{
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|profiles
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Validator
name|validator
init|=
operator|new
name|NoOpValidator
argument_list|()
decl_stmt|;
name|profiles
operator|.
name|put
argument_list|(
name|WSSecurityEngine
operator|.
name|USERNAME_TOKEN
argument_list|,
name|validator
argument_list|)
expr_stmt|;
return|return
name|createSecurityEngine
argument_list|(
name|profiles
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @return      a freshly minted WSSecurityEngine instance, using the      *              (non-null) processor map, to be used to initialize the      *              WSSecurityEngine instance.      */
specifier|protected
specifier|static
name|WSSecurityEngine
name|createSecurityEngine
parameter_list|(
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
assert|assert
name|map
operator|!=
literal|null
assert|;
specifier|final
name|WSSConfig
name|config
init|=
name|WSSConfig
operator|.
name|getNewInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|QName
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|Class
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|config
operator|.
name|setProcessor
argument_list|(
name|key
argument_list|,
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Processor
condition|)
block|{
name|config
operator|.
name|setProcessor
argument_list|(
name|key
argument_list|,
operator|(
name|Processor
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Validator
condition|)
block|{
name|config
operator|.
name|setValidator
argument_list|(
name|key
argument_list|,
operator|(
name|Validator
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setProcessor
argument_list|(
name|key
argument_list|,
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|WSSecurityEngine
name|ret
init|=
operator|new
name|WSSecurityEngine
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setWssConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**      * Get a ReplayCache instance. It first checks to see whether caching has been explicitly       * enabled or disabled via the booleanKey argument. If it has been set to false then no      * replay caching is done (for this booleanKey). If it has not been specified, then caching      * is enabled only if we are not the initiator of the exchange. If it has been specified, then      * caching is enabled.      *       * It tries to get an instance of ReplayCache via the instanceKey argument from a       * contextual property, and failing that the message exchange. If it can't find any, then it      * defaults to using an EH-Cache instance and stores that on the message exchange.      */
specifier|protected
name|ReplayCache
name|getReplayCache
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|String
name|booleanKey
parameter_list|,
name|String
name|instanceKey
parameter_list|)
block|{
return|return
name|WSS4JUtils
operator|.
name|getReplayCache
argument_list|(
name|message
argument_list|,
name|booleanKey
argument_list|,
name|instanceKey
argument_list|)
return|;
block|}
block|}
end_class

end_unit

