begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AbstractPolicyInterceptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|PolicyBasedWSS4JInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|PolicyBasedWSS4JOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|PolicyBasedWSS4JStaxInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|PolicyBasedWSS4JStaxOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|WSS4JInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|WSS4JUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|IssuedTokenPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SAMLKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|WSHandlerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|BinarySecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|IssuedToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Trust10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Trust13
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|IssuedTokenInterceptorProvider
extends|extends
name|AbstractPolicyInterceptorProvider
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6936475570762840527L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ASSOCIATED_TOKEN
init|=
name|IssuedTokenInterceptorProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
literal|"Associated_Token"
decl_stmt|;
specifier|public
name|IssuedTokenInterceptorProvider
parameter_list|()
block|{
name|super
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SP11Constants
operator|.
name|ISSUED_TOKEN
argument_list|,
name|SP12Constants
operator|.
name|ISSUED_TOKEN
argument_list|)
argument_list|)
expr_stmt|;
comment|//issued tokens can be attached as a supporting token without
comment|//any type of binding.  Make sure we can support that.
name|this
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|PolicyBasedWSS4JOutInterceptor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|PolicyBasedWSS4JOutInterceptor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|PolicyBasedWSS4JInInterceptor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|getInFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|PolicyBasedWSS4JInInterceptor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|IssuedTokenOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|IssuedTokenOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|IssuedTokenInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getInFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|IssuedTokenInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|PolicyBasedWSS4JStaxOutInterceptor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|PolicyBasedWSS4JStaxOutInterceptor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|PolicyBasedWSS4JStaxInInterceptor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|getInFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
name|PolicyBasedWSS4JStaxInInterceptor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|IssuedTokenOutInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|IssuedTokenOutInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PREPARE_SEND
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|mapSecurityProps
parameter_list|(
name|Message
name|message
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|SecurityConstants
operator|.
name|ALL_PROPERTIES
control|)
block|{
name|Object
name|v
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|s
operator|+
literal|".it"
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ctx
operator|.
name|containsKey
argument_list|(
name|s
argument_list|)
operator|&&
name|v
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// extract Assertion information
if|if
condition|(
name|aim
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|NegotiationUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ISSUED_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|IssuedToken
name|itok
init|=
operator|(
name|IssuedToken
operator|)
name|ais
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|SecurityToken
name|tok
init|=
name|retrieveCachedToken
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|tok
operator|==
literal|null
condition|)
block|{
name|tok
operator|=
name|issueToken
argument_list|(
name|message
argument_list|,
name|aim
argument_list|,
name|itok
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tok
operator|=
name|renewToken
argument_list|(
name|message
argument_list|,
name|aim
argument_list|,
name|itok
argument_list|,
name|tok
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tok
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|boolean
name|cacheIssuedToken
init|=
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|SecurityConstants
operator|.
name|CACHE_ISSUED_TOKEN_IN_ENDPOINT
argument_list|,
literal|true
argument_list|)
operator|&&
operator|!
name|isOneTimeUse
argument_list|(
name|tok
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheIssuedToken
condition|)
block|{
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|,
name|tok
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|,
name|tok
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|,
name|tok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|,
name|tok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|,
name|tok
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|,
name|tok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|WSS4JUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
operator|.
name|add
argument_list|(
name|tok
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//server side should be checked on the way in
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Trust10
name|getTrust10
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|NegotiationUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|TRUST_10
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|Trust10
operator|)
name|ais
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAssertion
argument_list|()
return|;
block|}
specifier|private
name|Trust13
name|getTrust13
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|NegotiationUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|TRUST_13
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|Trust13
operator|)
name|ais
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAssertion
argument_list|()
return|;
block|}
comment|// Check to see if the received token is a SAML2 Token with "OneTimeUse" set. If so,
comment|// it should not be cached on the endpoint, but only on the message.
specifier|private
name|boolean
name|isOneTimeUse
parameter_list|(
name|SecurityToken
name|issuedToken
parameter_list|)
block|{
name|Element
name|token
init|=
name|issuedToken
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
operator|&&
literal|"Assertion"
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|WSConstants
operator|.
name|SAML2_NS
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|SamlAssertionWrapper
name|assertion
init|=
operator|new
name|SamlAssertionWrapper
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|.
name|getConditions
argument_list|()
operator|!=
literal|null
operator|&&
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|.
name|getConditions
argument_list|()
operator|.
name|getOneTimeUse
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|SecurityToken
name|retrieveCachedToken
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|boolean
name|cacheIssuedToken
init|=
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|SecurityConstants
operator|.
name|CACHE_ISSUED_TOKEN_IN_ENDPOINT
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SecurityToken
name|tok
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cacheIssuedToken
condition|)
block|{
name|tok
operator|=
operator|(
name|SecurityToken
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
if|if
condition|(
name|tok
operator|==
literal|null
condition|)
block|{
name|String
name|tokId
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokId
operator|!=
literal|null
condition|)
block|{
name|tok
operator|=
name|WSS4JUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
operator|.
name|getToken
argument_list|(
name|tokId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|tok
operator|=
operator|(
name|SecurityToken
operator|)
name|message
operator|.
name|get
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
if|if
condition|(
name|tok
operator|==
literal|null
condition|)
block|{
name|String
name|tokId
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokId
operator|!=
literal|null
condition|)
block|{
name|tok
operator|=
name|WSS4JUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
operator|.
name|getToken
argument_list|(
name|tokId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|tok
return|;
block|}
comment|/**          * Parse ActAs/OnBehalfOf appropriately. See if the required token is stored in the cache.          */
specifier|private
name|SecurityToken
name|handleDelegation
parameter_list|(
name|Message
name|message
parameter_list|,
name|Element
name|onBehalfOfToken
parameter_list|,
name|Element
name|actAsToken
parameter_list|,
name|String
name|appliesTo
parameter_list|,
name|boolean
name|enableAppliesTo
parameter_list|)
throws|throws
name|Exception
block|{
name|TokenStore
name|tokenStore
init|=
name|WSS4JUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|appliesTo
decl_stmt|;
if|if
condition|(
operator|!
name|enableAppliesTo
operator|||
name|key
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|key
operator|=
name|ASSOCIATED_TOKEN
expr_stmt|;
block|}
comment|// See if the token corresponding to the OnBehalfOf Token is stored in the cache
comment|// and if it points to an issued token
if|if
condition|(
name|onBehalfOfToken
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|getIdFromToken
argument_list|(
name|onBehalfOfToken
argument_list|)
decl_stmt|;
name|SecurityToken
name|cachedToken
init|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedToken
operator|!=
literal|null
condition|)
block|{
name|Properties
name|properties
init|=
name|cachedToken
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
operator|&&
name|properties
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|String
name|associatedToken
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|SecurityToken
name|issuedToken
init|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|associatedToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|issuedToken
operator|!=
literal|null
condition|)
block|{
return|return
name|issuedToken
return|;
block|}
block|}
block|}
block|}
comment|// See if the token corresponding to the ActAs Token is stored in the cache
comment|// and if it points to an issued token
if|if
condition|(
name|actAsToken
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|getIdFromToken
argument_list|(
name|actAsToken
argument_list|)
decl_stmt|;
name|SecurityToken
name|cachedToken
init|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedToken
operator|!=
literal|null
condition|)
block|{
name|Properties
name|properties
init|=
name|cachedToken
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
operator|&&
name|properties
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|String
name|associatedToken
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|SecurityToken
name|issuedToken
init|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|associatedToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|issuedToken
operator|!=
literal|null
condition|)
block|{
return|return
name|issuedToken
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|getIdFromToken
parameter_list|(
name|Element
name|token
parameter_list|)
block|{
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
comment|// Try to find the "Id" on the token.
if|if
condition|(
name|token
operator|.
name|hasAttributeNS
argument_list|(
name|WSConstants
operator|.
name|WSU_NS
argument_list|,
literal|"Id"
argument_list|)
condition|)
block|{
return|return
name|token
operator|.
name|getAttributeNS
argument_list|(
name|WSConstants
operator|.
name|WSU_NS
argument_list|,
literal|"Id"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|hasAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"ID"
argument_list|)
condition|)
block|{
return|return
name|token
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"ID"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|hasAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"AssertionID"
argument_list|)
condition|)
block|{
return|return
name|token
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"AssertionID"
argument_list|)
return|;
block|}
block|}
return|return
literal|""
return|;
block|}
specifier|private
name|void
name|storeDelegationTokens
parameter_list|(
name|Message
name|message
parameter_list|,
name|SecurityToken
name|issuedToken
parameter_list|,
name|Element
name|onBehalfOfToken
parameter_list|,
name|Element
name|actAsToken
parameter_list|,
name|String
name|appliesTo
parameter_list|,
name|boolean
name|enableAppliesTo
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|issuedToken
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|TokenStore
name|tokenStore
init|=
name|WSS4JUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|appliesTo
decl_stmt|;
if|if
condition|(
operator|!
name|enableAppliesTo
operator|||
name|key
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|key
operator|=
name|ASSOCIATED_TOKEN
expr_stmt|;
block|}
if|if
condition|(
name|onBehalfOfToken
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|getIdFromToken
argument_list|(
name|onBehalfOfToken
argument_list|)
decl_stmt|;
name|SecurityToken
name|cachedToken
init|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedToken
operator|==
literal|null
condition|)
block|{
name|cachedToken
operator|=
operator|new
name|SecurityToken
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|cachedToken
operator|.
name|setToken
argument_list|(
name|onBehalfOfToken
argument_list|)
expr_stmt|;
block|}
name|Properties
name|properties
init|=
name|cachedToken
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|cachedToken
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|issuedToken
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|tokenStore
operator|.
name|add
argument_list|(
name|cachedToken
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actAsToken
operator|!=
literal|null
condition|)
block|{
name|String
name|id
init|=
name|getIdFromToken
argument_list|(
name|actAsToken
argument_list|)
decl_stmt|;
name|SecurityToken
name|cachedToken
init|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedToken
operator|==
literal|null
condition|)
block|{
name|cachedToken
operator|=
operator|new
name|SecurityToken
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|cachedToken
operator|.
name|setToken
argument_list|(
name|actAsToken
argument_list|)
expr_stmt|;
block|}
name|Properties
name|properties
init|=
name|cachedToken
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|cachedToken
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|issuedToken
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|tokenStore
operator|.
name|add
argument_list|(
name|cachedToken
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|SecurityToken
name|getTokenFromSTS
parameter_list|(
name|Message
name|message
parameter_list|,
name|STSClient
name|client
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|,
name|AddressingProperties
name|maps
parameter_list|,
name|IssuedToken
name|itok
parameter_list|,
name|String
name|appliesTo
parameter_list|)
throws|throws
name|Exception
block|{
name|client
operator|.
name|setTrust
argument_list|(
name|getTrust10
argument_list|(
name|aim
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTrust
argument_list|(
name|getTrust13
argument_list|(
name|aim
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTemplate
argument_list|(
name|itok
operator|.
name|getRequestSecurityTokenTemplate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|itok
operator|.
name|getPolicy
argument_list|()
operator|!=
literal|null
operator|&&
name|itok
operator|.
name|getPolicy
argument_list|()
operator|.
name|getNamespace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|setWspNamespace
argument_list|(
name|itok
operator|.
name|getPolicy
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maps
operator|!=
literal|null
operator|&&
name|maps
operator|.
name|getNamespaceURI
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|setAddressingNamespace
argument_list|(
name|maps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|itok
operator|.
name|getClaims
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|setClaims
argument_list|(
name|itok
operator|.
name|getClaims
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|client
operator|.
name|requestSecurityToken
argument_list|(
name|appliesTo
argument_list|)
return|;
block|}
specifier|private
name|SecurityToken
name|renewToken
parameter_list|(
name|Message
name|message
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|,
name|IssuedToken
name|itok
parameter_list|,
name|SecurityToken
name|tok
parameter_list|)
block|{
comment|// If the token has not expired then we don't need to renew it
if|if
condition|(
operator|!
name|tok
operator|.
name|isExpired
argument_list|()
condition|)
block|{
return|return
name|tok
return|;
block|}
comment|// Remove token from cache
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
operator|.
name|remove
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
operator|.
name|remove
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|remove
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|remove
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
name|NegotiationUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
operator|.
name|remove
argument_list|(
name|tok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// If the user has explicitly disabled Renewing then we can't renew a token,
comment|// so just get a new one
name|STSClient
name|client
init|=
name|STSUtils
operator|.
name|getClient
argument_list|(
name|message
argument_list|,
literal|"sts"
argument_list|,
name|itok
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|client
operator|.
name|isAllowRenewing
argument_list|()
condition|)
block|{
return|return
name|issueToken
argument_list|(
name|message
argument_list|,
name|aim
argument_list|,
name|itok
argument_list|)
return|;
block|}
name|AddressingProperties
name|maps
init|=
operator|(
name|AddressingProperties
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"javax.xml.ws.addressing.context.outbound"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maps
operator|==
literal|null
condition|)
block|{
name|maps
operator|=
operator|(
name|AddressingProperties
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"javax.xml.ws.addressing.context"
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|client
init|)
block|{
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
name|client
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|mapSecurityProps
argument_list|(
name|message
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|client
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|maps
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|setAddressingNamespace
argument_list|(
name|maps
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|setTrust
argument_list|(
name|getTrust10
argument_list|(
name|aim
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTrust
argument_list|(
name|getTrust13
argument_list|(
name|aim
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTemplate
argument_list|(
name|itok
operator|.
name|getRequestSecurityTokenTemplate
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|renewSecurityToken
argument_list|(
name|tok
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|client
operator|.
name|setTrust
argument_list|(
operator|(
name|Trust10
operator|)
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTrust
argument_list|(
operator|(
name|Trust13
operator|)
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTemplate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|setAddressingNamespace
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|SecurityToken
name|issueToken
parameter_list|(
name|Message
name|message
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|,
name|IssuedToken
name|itok
parameter_list|)
block|{
name|STSClient
name|client
init|=
name|STSUtils
operator|.
name|getClient
argument_list|(
name|message
argument_list|,
literal|"sts"
argument_list|,
name|itok
argument_list|)
decl_stmt|;
name|AddressingProperties
name|maps
init|=
operator|(
name|AddressingProperties
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"javax.xml.ws.addressing.context.outbound"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maps
operator|==
literal|null
condition|)
block|{
name|maps
operator|=
operator|(
name|AddressingProperties
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"javax.xml.ws.addressing.context"
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|client
init|)
block|{
try|try
block|{
comment|// Transpose ActAs/OnBehalfOf info from original request to the STS client.
name|Object
name|token
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_ACT_AS
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|setActAs
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
name|token
operator|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_ON_BEHALF_OF
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|setOnBehalfOf
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
name|client
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|mapSecurityProps
argument_list|(
name|message
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|STS_APPLIES_TO
argument_list|)
decl_stmt|;
name|String
name|appliesTo
init|=
name|o
operator|==
literal|null
condition|?
literal|null
else|:
name|o
operator|.
name|toString
argument_list|()
decl_stmt|;
name|appliesTo
operator|=
name|appliesTo
operator|==
literal|null
condition|?
name|message
operator|.
name|getContextualProperty
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|)
operator|.
name|toString
argument_list|()
else|:
name|appliesTo
expr_stmt|;
name|boolean
name|enableAppliesTo
init|=
name|client
operator|.
name|isEnableAppliesTo
argument_list|()
decl_stmt|;
name|client
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Element
name|onBehalfOfToken
init|=
name|client
operator|.
name|getOnBehalfOfToken
argument_list|()
decl_stmt|;
name|Element
name|actAsToken
init|=
name|client
operator|.
name|getActAsToken
argument_list|()
decl_stmt|;
name|SecurityToken
name|secToken
init|=
name|handleDelegation
argument_list|(
name|message
argument_list|,
name|onBehalfOfToken
argument_list|,
name|actAsToken
argument_list|,
name|appliesTo
argument_list|,
name|enableAppliesTo
argument_list|)
decl_stmt|;
if|if
condition|(
name|secToken
operator|==
literal|null
condition|)
block|{
name|secToken
operator|=
name|getTokenFromSTS
argument_list|(
name|message
argument_list|,
name|client
argument_list|,
name|aim
argument_list|,
name|maps
argument_list|,
name|itok
argument_list|,
name|appliesTo
argument_list|)
expr_stmt|;
block|}
name|storeDelegationTokens
argument_list|(
name|message
argument_list|,
name|secToken
argument_list|,
name|onBehalfOfToken
argument_list|,
name|actAsToken
argument_list|,
name|appliesTo
argument_list|,
name|enableAppliesTo
argument_list|)
expr_stmt|;
return|return
name|secToken
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|client
operator|.
name|setTrust
argument_list|(
operator|(
name|Trust10
operator|)
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTrust
argument_list|(
operator|(
name|Trust13
operator|)
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTemplate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|setAddressingNamespace
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|static
class|class
name|IssuedTokenInInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|IssuedTokenInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|PRE_PROTOCOL
argument_list|)
expr_stmt|;
name|addAfter
argument_list|(
name|WSS4JInInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addAfter
argument_list|(
name|PolicyBasedWSS4JInInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// extract Assertion information
if|if
condition|(
name|aim
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|NegotiationUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ISSUED_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|results
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|parseHandlerResults
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|message
argument_list|,
name|aim
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//client side should be checked on the way out
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|parseHandlerResults
parameter_list|(
name|WSHandlerResult
name|rResult
parameter_list|,
name|Message
name|message
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
init|=
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|rResult
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|SIGN
argument_list|)
decl_stmt|;
name|IssuedTokenPolicyValidator
name|issuedValidator
init|=
operator|new
name|IssuedTokenPolicyValidator
argument_list|(
name|signedResults
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|issuedAis
init|=
name|NegotiationUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ISSUED_TOKEN
argument_list|)
decl_stmt|;
for|for
control|(
name|SamlAssertionWrapper
name|assertionWrapper
range|:
name|findSamlTokenResults
argument_list|(
name|rResult
operator|.
name|getResults
argument_list|()
argument_list|)
control|)
block|{
name|boolean
name|valid
init|=
name|issuedValidator
operator|.
name|validatePolicy
argument_list|(
name|issuedAis
argument_list|,
name|assertionWrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|valid
condition|)
block|{
name|SecurityToken
name|token
init|=
name|createSecurityToken
argument_list|(
name|assertionWrapper
argument_list|)
decl_stmt|;
name|WSS4JUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|remove
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|,
name|token
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
for|for
control|(
name|BinarySecurity
name|binarySecurityToken
range|:
name|findBinarySecurityTokenResults
argument_list|(
name|rResult
operator|.
name|getResults
argument_list|()
argument_list|)
control|)
block|{
name|boolean
name|valid
init|=
name|issuedValidator
operator|.
name|validatePolicy
argument_list|(
name|issuedAis
argument_list|,
name|binarySecurityToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|valid
condition|)
block|{
name|SecurityToken
name|token
init|=
name|createSecurityToken
argument_list|(
name|binarySecurityToken
argument_list|)
decl_stmt|;
name|WSS4JUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|remove
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|,
name|token
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|SamlAssertionWrapper
argument_list|>
name|findSamlTokenResults
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|wsSecEngineResults
parameter_list|)
block|{
name|List
argument_list|<
name|SamlAssertionWrapper
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|SamlAssertionWrapper
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|wsSecEngineResults
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|ST_SIGNED
operator|||
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|ST_UNSIGNED
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
operator|(
name|SamlAssertionWrapper
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
specifier|private
name|List
argument_list|<
name|BinarySecurity
argument_list|>
name|findBinarySecurityTokenResults
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|wsSecEngineResults
parameter_list|)
block|{
name|List
argument_list|<
name|BinarySecurity
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|BinarySecurity
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|wsSecEngineResults
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|BST
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
operator|(
name|BinarySecurity
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_BINARY_SECURITY_TOKEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
specifier|private
name|SecurityToken
name|createSecurityToken
parameter_list|(
name|SamlAssertionWrapper
name|assertionWrapper
parameter_list|)
block|{
name|SecurityToken
name|token
init|=
operator|new
name|SecurityToken
argument_list|(
name|assertionWrapper
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|SAMLKeyInfo
name|subjectKeyInfo
init|=
name|assertionWrapper
operator|.
name|getSubjectKeyInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjectKeyInfo
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|setSecret
argument_list|(
name|subjectKeyInfo
operator|.
name|getSecret
argument_list|()
argument_list|)
expr_stmt|;
name|X509Certificate
index|[]
name|certs
init|=
name|subjectKeyInfo
operator|.
name|getCerts
argument_list|()
decl_stmt|;
if|if
condition|(
name|certs
operator|!=
literal|null
operator|&&
name|certs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|token
operator|.
name|setX509Certificate
argument_list|(
name|certs
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|assertionWrapper
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|setTokenType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|assertionWrapper
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|setTokenType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
expr_stmt|;
block|}
name|token
operator|.
name|setToken
argument_list|(
name|assertionWrapper
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
specifier|private
name|SecurityToken
name|createSecurityToken
parameter_list|(
name|BinarySecurity
name|binarySecurityToken
parameter_list|)
block|{
name|SecurityToken
name|token
init|=
operator|new
name|SecurityToken
argument_list|(
name|binarySecurityToken
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
name|token
operator|.
name|setToken
argument_list|(
name|binarySecurityToken
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setSecret
argument_list|(
name|binarySecurityToken
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setTokenType
argument_list|(
name|binarySecurityToken
operator|.
name|getValueType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
block|}
block|}
end_class

end_unit

