begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyhandlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|WSEncryptionPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|derivedKey
operator|.
name|ConversationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|bsp
operator|.
name|BSPEnforcer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecDKSign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecEncryptedKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecUsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|SecurityTokenReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractToken
operator|.
name|DerivedKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
operator|.
name|AlgorithmSuiteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|IssuedToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|KerberosToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|KeyValueToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SamlToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SecureConversationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SecurityContextToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SignedElements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SignedParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SpnegoContextToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SupportingTokens
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|TransportBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|TransportToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|X509Token
import|;
end_import

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|TransportBindingHandler
extends|extends
name|AbstractBindingBuilder
block|{
name|TransportBinding
name|tbinding
decl_stmt|;
specifier|public
name|TransportBindingHandler
parameter_list|(
name|WSSConfig
name|config
parameter_list|,
name|TransportBinding
name|binding
parameter_list|,
name|SOAPMessage
name|saaj
parameter_list|,
name|WSSecHeader
name|secHeader
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|,
name|binding
argument_list|,
name|saaj
argument_list|,
name|secHeader
argument_list|,
name|aim
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|tbinding
operator|=
name|binding
expr_stmt|;
block|}
specifier|private
name|void
name|addSignedSupportingTokens
parameter_list|(
name|SupportingTokens
name|sgndSuppTokens
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|AbstractToken
name|token
range|:
name|sgndSuppTokens
operator|.
name|getTokens
argument_list|()
control|)
block|{
if|if
condition|(
name|token
operator|instanceof
name|UsernameToken
condition|)
block|{
name|WSSecUsernameToken
name|utBuilder
init|=
name|addUsernameToken
argument_list|(
operator|(
name|UsernameToken
operator|)
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|utBuilder
operator|!=
literal|null
condition|)
block|{
name|utBuilder
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|utBuilder
operator|.
name|appendToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|IssuedToken
operator|||
name|token
operator|instanceof
name|KerberosToken
condition|)
block|{
name|SecurityToken
name|secTok
init|=
name|getSecurityToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|isTokenRequired
argument_list|(
name|token
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
condition|)
block|{
comment|//Add the token
name|addEncryptedKeyElement
argument_list|(
name|cloneElement
argument_list|(
name|secTok
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|SamlToken
condition|)
block|{
name|SamlAssertionWrapper
name|assertionWrapper
init|=
name|addSamlToken
argument_list|(
operator|(
name|SamlToken
operator|)
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|assertionWrapper
operator|!=
literal|null
condition|)
block|{
name|addSupportingElement
argument_list|(
name|assertionWrapper
operator|.
name|toDOM
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//REVISIT - not supported for signed.  Exception?
block|}
block|}
block|}
specifier|private
name|void
name|addSig
parameter_list|(
name|byte
index|[]
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|!=
literal|null
operator|&&
name|val
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|signatures
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleBinding
parameter_list|()
block|{
name|WSSecTimestamp
name|timestamp
init|=
name|createTimestamp
argument_list|()
decl_stmt|;
name|handleLayout
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|isRequestor
argument_list|()
condition|)
block|{
name|TransportToken
name|transportTokenWrapper
init|=
name|tbinding
operator|.
name|getTransportToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|transportTokenWrapper
operator|!=
literal|null
condition|)
block|{
name|AbstractToken
name|transportToken
init|=
name|transportTokenWrapper
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|transportToken
operator|instanceof
name|IssuedToken
condition|)
block|{
name|SecurityToken
name|secToken
init|=
name|getSecurityToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|secToken
operator|==
literal|null
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|transportToken
argument_list|,
literal|"No transport token id"
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|assertPolicy
argument_list|(
name|transportToken
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isTokenRequired
argument_list|(
name|transportToken
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|el
init|=
name|secToken
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|addEncryptedKeyElement
argument_list|(
name|cloneElement
argument_list|(
name|el
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertToken
argument_list|(
name|transportToken
argument_list|)
expr_stmt|;
name|assertTokenWrapper
argument_list|(
name|transportTokenWrapper
argument_list|)
expr_stmt|;
block|}
name|handleNonEndorsingSupportingTokens
argument_list|()
expr_stmt|;
if|if
condition|(
name|transportTokenWrapper
operator|!=
literal|null
condition|)
block|{
name|handleEndorsingSupportingTokens
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|tbinding
operator|!=
literal|null
operator|&&
name|tbinding
operator|.
name|getTransportToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertTokenWrapper
argument_list|(
name|tbinding
operator|.
name|getTransportToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertToken
argument_list|(
name|tbinding
operator|.
name|getTransportToken
argument_list|()
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addSignatureConfirmation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|tbinding
operator|!=
literal|null
condition|)
block|{
name|assertPolicy
argument_list|(
name|tbinding
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertAlgorithmSuite
argument_list|(
name|tbinding
operator|.
name|getAlgorithmSuite
argument_list|()
argument_list|)
expr_stmt|;
name|assertWSSProperties
argument_list|(
name|tbinding
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrustProperties
argument_list|(
name|tbinding
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Handle the non-endorsing supporting tokens      */
specifier|private
name|void
name|handleNonEndorsingSupportingTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
decl_stmt|;
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|SPConstants
operator|.
name|SIGNED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|SupportingTokens
name|sgndSuppTokens
init|=
operator|(
name|SupportingTokens
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
name|sgndSuppTokens
operator|!=
literal|null
condition|)
block|{
name|addSignedSupportingTokens
argument_list|(
name|sgndSuppTokens
argument_list|)
expr_stmt|;
block|}
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|SPConstants
operator|.
name|SIGNED_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|SupportingTokens
name|sgndSuppTokens
init|=
operator|(
name|SupportingTokens
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
name|sgndSuppTokens
operator|!=
literal|null
condition|)
block|{
name|addSignedSupportingTokens
argument_list|(
name|sgndSuppTokens
argument_list|)
expr_stmt|;
block|}
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|SPConstants
operator|.
name|ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|SupportingTokens
name|encrSuppTokens
init|=
operator|(
name|SupportingTokens
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
name|encrSuppTokens
operator|!=
literal|null
condition|)
block|{
name|addSignedSupportingTokens
argument_list|(
name|encrSuppTokens
argument_list|)
expr_stmt|;
block|}
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|SPConstants
operator|.
name|SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|SupportingTokens
name|suppTokens
init|=
operator|(
name|SupportingTokens
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
name|suppTokens
operator|!=
literal|null
operator|&&
name|suppTokens
operator|.
name|getTokens
argument_list|()
operator|!=
literal|null
operator|&&
name|suppTokens
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|handleSupportingTokens
argument_list|(
name|suppTokens
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Handle the endorsing supporting tokens      */
specifier|private
name|void
name|handleEndorsingSupportingTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
decl_stmt|;
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|SPConstants
operator|.
name|SIGNED_ENDORSING_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SupportingTokens
name|sgndSuppTokens
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|sgndSuppTokens
operator|=
operator|(
name|SupportingTokens
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sgndSuppTokens
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AbstractToken
name|token
range|:
name|sgndSuppTokens
operator|.
name|getTokens
argument_list|()
control|)
block|{
name|handleEndorsingToken
argument_list|(
name|token
argument_list|,
name|sgndSuppTokens
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|SPConstants
operator|.
name|ENDORSING_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SupportingTokens
name|endSuppTokens
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|endSuppTokens
operator|=
operator|(
name|SupportingTokens
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endSuppTokens
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AbstractToken
name|token
range|:
name|endSuppTokens
operator|.
name|getTokens
argument_list|()
control|)
block|{
name|handleEndorsingToken
argument_list|(
name|token
argument_list|,
name|endSuppTokens
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|SPConstants
operator|.
name|ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SupportingTokens
name|endSuppTokens
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|endSuppTokens
operator|=
operator|(
name|SupportingTokens
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endSuppTokens
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AbstractToken
name|token
range|:
name|endSuppTokens
operator|.
name|getTokens
argument_list|()
control|)
block|{
name|handleEndorsingToken
argument_list|(
name|token
argument_list|,
name|endSuppTokens
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|SPConstants
operator|.
name|SIGNED_ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SupportingTokens
name|endSuppTokens
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|endSuppTokens
operator|=
operator|(
name|SupportingTokens
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endSuppTokens
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AbstractToken
name|token
range|:
name|endSuppTokens
operator|.
name|getTokens
argument_list|()
control|)
block|{
name|handleEndorsingToken
argument_list|(
name|token
argument_list|,
name|endSuppTokens
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|handleEndorsingToken
parameter_list|(
name|AbstractToken
name|token
parameter_list|,
name|SupportingTokens
name|wrapper
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|token
operator|instanceof
name|IssuedToken
operator|||
name|token
operator|instanceof
name|SecureConversationToken
operator|||
name|token
operator|instanceof
name|SecurityContextToken
operator|||
name|token
operator|instanceof
name|KerberosToken
operator|||
name|token
operator|instanceof
name|SpnegoContextToken
condition|)
block|{
name|addSig
argument_list|(
name|doIssuedTokenSignature
argument_list|(
name|token
argument_list|,
name|wrapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|X509Token
operator|||
name|token
operator|instanceof
name|KeyValueToken
condition|)
block|{
name|addSig
argument_list|(
name|doX509TokenSignature
argument_list|(
name|token
argument_list|,
name|wrapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|SamlToken
condition|)
block|{
name|SamlAssertionWrapper
name|assertionWrapper
init|=
name|addSamlToken
argument_list|(
operator|(
name|SamlToken
operator|)
name|token
argument_list|)
decl_stmt|;
name|assertionWrapper
operator|.
name|toDOM
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|storeAssertionAsSecurityToken
argument_list|(
name|assertionWrapper
argument_list|)
expr_stmt|;
name|addSig
argument_list|(
name|doIssuedTokenSignature
argument_list|(
name|token
argument_list|,
name|wrapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|UsernameToken
condition|)
block|{
comment|// Create a UsernameToken object for derived keys and store the security token
name|WSSecUsernameToken
name|usernameToken
init|=
name|addDKUsernameToken
argument_list|(
operator|(
name|UsernameToken
operator|)
name|token
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|usernameToken
operator|.
name|getId
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secret
init|=
name|usernameToken
operator|.
name|getDerivedKey
argument_list|()
decl_stmt|;
name|Date
name|created
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Date
name|expires
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|expires
operator|.
name|setTime
argument_list|(
name|created
operator|.
name|getTime
argument_list|()
operator|+
literal|300000
argument_list|)
expr_stmt|;
name|SecurityToken
name|tempTok
init|=
operator|new
name|SecurityToken
argument_list|(
name|id
argument_list|,
name|usernameToken
operator|.
name|getUsernameTokenElement
argument_list|()
argument_list|,
name|created
argument_list|,
name|expires
argument_list|)
decl_stmt|;
name|tempTok
operator|.
name|setSecret
argument_list|(
name|secret
argument_list|)
expr_stmt|;
name|getTokenStore
argument_list|()
operator|.
name|add
argument_list|(
name|tempTok
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|,
name|tempTok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|addSig
argument_list|(
name|doIssuedTokenSignature
argument_list|(
name|token
argument_list|,
name|wrapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|byte
index|[]
name|doX509TokenSignature
parameter_list|(
name|AbstractToken
name|token
parameter_list|,
name|SupportingTokens
name|wrapper
parameter_list|)
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|saaj
operator|.
name|getSOAPPart
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
init|=
name|signPartsAndElements
argument_list|(
name|wrapper
operator|.
name|getSignedParts
argument_list|()
argument_list|,
name|wrapper
operator|.
name|getSignedElements
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getDerivedKeys
argument_list|()
operator|==
name|DerivedKeys
operator|.
name|RequireDerivedKeys
condition|)
block|{
name|WSSecEncryptedKey
name|encrKey
init|=
name|getEncryptedKeyBuilder
argument_list|(
name|wrapper
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|Element
name|bstElem
init|=
name|encrKey
operator|.
name|getBinarySecurityTokenElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|bstElem
operator|!=
literal|null
condition|)
block|{
name|addTopDownElement
argument_list|(
name|bstElem
argument_list|)
expr_stmt|;
block|}
name|encrKey
operator|.
name|appendToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
name|WSSecDKSign
name|dkSig
init|=
operator|new
name|WSSecDKSign
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
name|dkSig
operator|.
name|setSigCanonicalization
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getC14n
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|dkSig
operator|.
name|setSignatureAlgorithm
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|AlgorithmSuiteType
name|algType
init|=
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAlgorithmSuiteType
argument_list|()
decl_stmt|;
name|dkSig
operator|.
name|setDerivedKeyLength
argument_list|(
name|algType
operator|.
name|getSignatureDerivedKeyLength
argument_list|()
operator|/
literal|8
argument_list|)
expr_stmt|;
name|dkSig
operator|.
name|setExternalKey
argument_list|(
name|encrKey
operator|.
name|getEphemeralKey
argument_list|()
argument_list|,
name|encrKey
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|dkSig
operator|.
name|prepare
argument_list|(
name|doc
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
name|dkSig
operator|.
name|setParts
argument_list|(
name|sigParts
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Reference
argument_list|>
name|referenceList
init|=
name|dkSig
operator|.
name|addReferencesToSign
argument_list|(
name|sigParts
argument_list|,
name|secHeader
argument_list|)
decl_stmt|;
comment|//Do signature
name|dkSig
operator|.
name|appendDKElementToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
name|dkSig
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|dkSig
operator|.
name|getSignatureValue
argument_list|()
return|;
block|}
else|else
block|{
name|WSSecSignature
name|sig
init|=
name|getSignatureBuilder
argument_list|(
name|wrapper
argument_list|,
name|token
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|sig
operator|!=
literal|null
condition|)
block|{
name|sig
operator|.
name|prependBSTElementToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Reference
argument_list|>
name|referenceList
init|=
name|sig
operator|.
name|addReferencesToSign
argument_list|(
name|sigParts
argument_list|,
name|secHeader
argument_list|)
decl_stmt|;
if|if
condition|(
name|bottomUpElement
operator|==
literal|null
condition|)
block|{
name|sig
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sig
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|true
argument_list|,
name|bottomUpElement
argument_list|)
expr_stmt|;
block|}
name|bottomUpElement
operator|=
name|sig
operator|.
name|getSignatureElement
argument_list|()
expr_stmt|;
name|mainSigId
operator|=
name|sig
operator|.
name|getId
argument_list|()
expr_stmt|;
return|return
name|sig
operator|.
name|getSignatureValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
block|}
block|}
specifier|private
name|byte
index|[]
name|doIssuedTokenSignature
parameter_list|(
name|AbstractToken
name|token
parameter_list|,
name|SupportingTokens
name|wrapper
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|tokenIncluded
init|=
literal|false
decl_stmt|;
comment|// Get the issued token
name|SecurityToken
name|secTok
init|=
name|getSecurityToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|secTok
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"The retrieved SecurityToken was null"
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
operator|new
name|Exception
argument_list|(
literal|"The retrieved SecurityToken was null"
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
name|isTokenRequired
argument_list|(
name|token
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
condition|)
block|{
comment|//Add the token
name|Element
name|el
init|=
name|cloneElement
argument_list|(
name|secTok
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
comment|//if (securityTok != null) {
comment|//do we need to sign this as well?
comment|//String id = addWsuIdToElement(el);
comment|//sigParts.add(new WSEncryptionPart(id));
comment|//}
name|addEncryptedKeyElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|tokenIncluded
operator|=
literal|true
expr_stmt|;
block|}
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
init|=
name|signPartsAndElements
argument_list|(
name|wrapper
operator|.
name|getSignedParts
argument_list|()
argument_list|,
name|wrapper
operator|.
name|getSignedElements
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getDerivedKeys
argument_list|()
operator|==
name|DerivedKeys
operator|.
name|RequireDerivedKeys
condition|)
block|{
return|return
name|doDerivedKeySignature
argument_list|(
name|tokenIncluded
argument_list|,
name|secTok
argument_list|,
name|token
argument_list|,
name|sigParts
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|doSignature
argument_list|(
name|tokenIncluded
argument_list|,
name|secTok
argument_list|,
name|token
argument_list|,
name|wrapper
argument_list|,
name|sigParts
argument_list|)
return|;
block|}
block|}
specifier|private
name|byte
index|[]
name|doDerivedKeySignature
parameter_list|(
name|boolean
name|tokenIncluded
parameter_list|,
name|SecurityToken
name|secTok
parameter_list|,
name|AbstractToken
name|token
parameter_list|,
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
parameter_list|)
throws|throws
name|Exception
block|{
comment|//Do Signature with derived keys
name|WSSecDKSign
name|dkSign
init|=
operator|new
name|WSSecDKSign
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
name|AlgorithmSuite
name|algorithmSuite
init|=
name|tbinding
operator|.
name|getAlgorithmSuite
argument_list|()
decl_stmt|;
comment|//Setting the AttachedReference or the UnattachedReference according to the flag
name|Element
name|ref
decl_stmt|;
if|if
condition|(
name|tokenIncluded
condition|)
block|{
name|ref
operator|=
name|secTok
operator|.
name|getAttachedReference
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|=
name|secTok
operator|.
name|getUnattachedReference
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|dkSign
operator|.
name|setExternalKey
argument_list|(
name|secTok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|cloneElement
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dkSign
operator|.
name|setExternalKey
argument_list|(
name|secTok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|secTok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|instanceof
name|UsernameToken
condition|)
block|{
name|dkSign
operator|.
name|setCustomValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_USERNAME_TOKEN_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
comment|// Set the algo info
name|dkSign
operator|.
name|setSignatureAlgorithm
argument_list|(
name|algorithmSuite
operator|.
name|getSymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|AlgorithmSuiteType
name|algType
init|=
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAlgorithmSuiteType
argument_list|()
decl_stmt|;
name|dkSign
operator|.
name|setDerivedKeyLength
argument_list|(
name|algType
operator|.
name|getSignatureDerivedKeyLength
argument_list|()
operator|/
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|getVersion
argument_list|()
operator|==
name|SPConstants
operator|.
name|SPVersion
operator|.
name|SP12
condition|)
block|{
name|dkSign
operator|.
name|setWscVersion
argument_list|(
name|ConversationConstants
operator|.
name|VERSION_05_12
argument_list|)
expr_stmt|;
block|}
name|Document
name|doc
init|=
name|saaj
operator|.
name|getSOAPPart
argument_list|()
decl_stmt|;
name|dkSign
operator|.
name|prepare
argument_list|(
name|doc
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
name|addDerivedKeyElement
argument_list|(
name|dkSign
operator|.
name|getdktElement
argument_list|()
argument_list|)
expr_stmt|;
name|dkSign
operator|.
name|setParts
argument_list|(
name|sigParts
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Reference
argument_list|>
name|referenceList
init|=
name|dkSign
operator|.
name|addReferencesToSign
argument_list|(
name|sigParts
argument_list|,
name|secHeader
argument_list|)
decl_stmt|;
comment|//Do signature
name|dkSign
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|dkSign
operator|.
name|getSignatureValue
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|doSignature
parameter_list|(
name|boolean
name|tokenIncluded
parameter_list|,
name|SecurityToken
name|secTok
parameter_list|,
name|AbstractToken
name|token
parameter_list|,
name|SupportingTokens
name|wrapper
parameter_list|,
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
parameter_list|)
throws|throws
name|Exception
block|{
name|WSSecSignature
name|sig
init|=
operator|new
name|WSSecSignature
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
comment|//Setting the AttachedReference or the UnattachedReference according to the flag
name|Element
name|ref
decl_stmt|;
if|if
condition|(
name|tokenIncluded
condition|)
block|{
name|ref
operator|=
name|secTok
operator|.
name|getAttachedReference
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|=
name|secTok
operator|.
name|getUnattachedReference
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|SecurityTokenReference
name|secRef
init|=
operator|new
name|SecurityTokenReference
argument_list|(
name|cloneElement
argument_list|(
name|ref
argument_list|)
argument_list|,
operator|new
name|BSPEnforcer
argument_list|()
argument_list|)
decl_stmt|;
name|sig
operator|.
name|setSecurityTokenReference
argument_list|(
name|secRef
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|UsernameToken
condition|)
block|{
name|sig
operator|.
name|setCustomTokenId
argument_list|(
name|secTok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_USERNAME_TOKEN_VALUE_TYPE
argument_list|)
expr_stmt|;
name|int
name|type
init|=
name|tokenIncluded
condition|?
name|WSConstants
operator|.
name|CUSTOM_SYMM_SIGNING
else|:
name|WSConstants
operator|.
name|CUSTOM_SYMM_SIGNING_DIRECT
decl_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|secTok
operator|.
name|getTokenType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|id
init|=
name|secTok
operator|.
name|getWsuId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|sig
operator|.
name|setCustomTokenId
argument_list|(
name|secTok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_SYMM_SIGNING_DIRECT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sig
operator|.
name|setCustomTokenId
argument_list|(
name|secTok
operator|.
name|getWsuId
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_SYMM_SIGNING
argument_list|)
expr_stmt|;
block|}
name|String
name|tokenType
init|=
name|secTok
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML2_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
block|}
block|}
name|Crypto
name|crypto
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|secTok
operator|.
name|getSecret
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sig
operator|.
name|setX509Certificate
argument_list|(
name|secTok
operator|.
name|getX509Certificate
argument_list|()
argument_list|)
expr_stmt|;
name|crypto
operator|=
name|secTok
operator|.
name|getCrypto
argument_list|()
expr_stmt|;
if|if
condition|(
name|crypto
operator|==
literal|null
condition|)
block|{
name|crypto
operator|=
name|getSignatureCrypto
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
name|String
name|uname
init|=
name|crypto
operator|.
name|getX509Identifier
argument_list|(
name|secTok
operator|.
name|getX509Certificate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|uname
operator|==
literal|null
condition|)
block|{
name|String
name|userNameKey
init|=
name|SecurityConstants
operator|.
name|SIGNATURE_USERNAME
decl_stmt|;
name|uname
operator|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|userNameKey
argument_list|)
expr_stmt|;
block|}
name|String
name|password
init|=
name|getPassword
argument_list|(
name|uname
argument_list|,
name|token
argument_list|,
name|WSPasswordCallback
operator|.
name|Usage
operator|.
name|SIGNATURE
argument_list|)
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|password
operator|=
literal|""
expr_stmt|;
block|}
name|sig
operator|.
name|setUserInfo
argument_list|(
name|uname
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSignatureAlgorithm
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAsymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|crypto
operator|=
name|getSignatureCrypto
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSecretKey
argument_list|(
name|secTok
operator|.
name|getSecret
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSignatureAlgorithm
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sig
operator|.
name|setSigCanonicalization
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getC14n
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|saaj
operator|.
name|getSOAPPart
argument_list|()
decl_stmt|;
name|sig
operator|.
name|prepare
argument_list|(
name|doc
argument_list|,
name|crypto
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setParts
argument_list|(
name|sigParts
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Reference
argument_list|>
name|referenceList
init|=
name|sig
operator|.
name|addReferencesToSign
argument_list|(
name|sigParts
argument_list|,
name|secHeader
argument_list|)
decl_stmt|;
comment|//Do signature
if|if
condition|(
name|bottomUpElement
operator|==
literal|null
condition|)
block|{
name|sig
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sig
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|true
argument_list|,
name|bottomUpElement
argument_list|)
expr_stmt|;
block|}
name|bottomUpElement
operator|=
name|sig
operator|.
name|getSignatureElement
argument_list|()
expr_stmt|;
name|mainSigId
operator|=
name|sig
operator|.
name|getId
argument_list|()
expr_stmt|;
return|return
name|sig
operator|.
name|getSignatureValue
argument_list|()
return|;
block|}
comment|/**      * Identifies the portions of the message to be signed/encrypted.      */
specifier|private
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|signPartsAndElements
parameter_list|(
name|SignedParts
name|signedParts
parameter_list|,
name|SignedElements
name|signedElements
parameter_list|)
throws|throws
name|SOAPException
block|{
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|found
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
comment|// Add timestamp
if|if
condition|(
name|timestampEl
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|timestampPart
init|=
operator|new
name|WSEncryptionPart
argument_list|(
literal|"Timestamp"
argument_list|,
name|WSConstants
operator|.
name|WSU_NS
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|addWsuIdToElement
argument_list|(
name|timestampEl
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
name|timestampPart
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|timestampPart
operator|.
name|setElement
argument_list|(
name|timestampEl
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|found
operator|.
name|add
argument_list|(
name|timestampPart
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|timestampPart
argument_list|)
expr_stmt|;
block|}
comment|// Add SignedParts
if|if
condition|(
name|signedParts
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|isSignBody
init|=
name|signedParts
operator|.
name|isBody
argument_list|()
decl_stmt|;
for|for
control|(
name|Header
name|head
range|:
name|signedParts
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|WSEncryptionPart
name|wep
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|head
operator|.
name|getName
argument_list|()
argument_list|,
name|head
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|wep
argument_list|)
expr_stmt|;
block|}
comment|// Handle sign/enc parts
name|result
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getParts
argument_list|(
literal|true
argument_list|,
name|isSignBody
argument_list|,
name|parts
argument_list|,
name|found
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|signedElements
operator|!=
literal|null
condition|)
block|{
comment|// Handle SignedElements
try|try
block|{
name|result
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getElements
argument_list|(
literal|"Element"
argument_list|,
name|signedElements
operator|.
name|getXPaths
argument_list|()
argument_list|,
name|found
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// REVISIT
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

