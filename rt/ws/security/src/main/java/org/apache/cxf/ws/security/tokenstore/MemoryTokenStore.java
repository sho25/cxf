begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|Reference
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|MemoryTokenStore
implements|implements
name|TokenStore
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SecurityToken
argument_list|>
name|tokens
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|SecurityToken
argument_list|>
argument_list|()
decl_stmt|;
comment|/** {@inheritDoc}*/
specifier|public
name|void
name|add
parameter_list|(
name|SecurityToken
name|token
parameter_list|)
block|{
if|if
condition|(
name|token
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|token
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|tokens
operator|.
name|put
argument_list|(
name|token
operator|.
name|getId
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc}*/
specifier|public
name|void
name|update
parameter_list|(
name|SecurityToken
name|token
parameter_list|)
block|{
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|SecurityToken
argument_list|>
name|getCancelledTokens
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|SecurityToken
operator|.
name|State
operator|.
name|CANCELLED
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|SecurityToken
argument_list|>
name|getExpiredTokens
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|SecurityToken
operator|.
name|State
operator|.
name|EXPIRED
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|SecurityToken
argument_list|>
name|getRenewedTokens
parameter_list|()
block|{
return|return
name|getTokens
argument_list|(
name|SecurityToken
operator|.
name|State
operator|.
name|RENEWED
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getTokenIdentifiers
parameter_list|()
block|{
return|return
name|tokens
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|SecurityToken
argument_list|>
name|getValidTokens
parameter_list|()
block|{
name|Collection
argument_list|<
name|SecurityToken
argument_list|>
name|toks
init|=
name|getTokens
argument_list|(
name|SecurityToken
operator|.
name|State
operator|.
name|ISSUED
argument_list|)
decl_stmt|;
name|toks
operator|.
name|addAll
argument_list|(
name|getTokens
argument_list|(
name|SecurityToken
operator|.
name|State
operator|.
name|RENEWED
argument_list|)
argument_list|)
expr_stmt|;
name|toks
operator|.
name|addAll
argument_list|(
name|getTokens
argument_list|(
name|SecurityToken
operator|.
name|State
operator|.
name|UNKNOWN
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|toks
return|;
block|}
specifier|public
name|SecurityToken
name|getToken
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|processTokenExpiry
argument_list|()
expr_stmt|;
name|SecurityToken
name|token
init|=
name|tokens
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|SecurityToken
name|t
range|:
name|tokens
operator|.
name|values
argument_list|()
control|)
block|{
name|Element
name|elem
init|=
name|t
operator|.
name|getAttachedReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|elem
operator|!=
literal|null
operator|&&
name|id
operator|.
name|equals
argument_list|(
name|getIdFromSTR
argument_list|(
name|elem
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|t
return|;
block|}
name|elem
operator|=
name|t
operator|.
name|getUnattachedReference
argument_list|()
expr_stmt|;
if|if
condition|(
name|elem
operator|!=
literal|null
operator|&&
name|id
operator|.
name|equals
argument_list|(
name|getIdFromSTR
argument_list|(
name|elem
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
block|}
return|return
name|token
return|;
block|}
specifier|protected
name|Collection
argument_list|<
name|SecurityToken
argument_list|>
name|getTokens
parameter_list|(
name|SecurityToken
operator|.
name|State
name|state
parameter_list|)
block|{
name|processTokenExpiry
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|SecurityToken
argument_list|>
name|t
init|=
operator|new
name|ArrayList
argument_list|<
name|SecurityToken
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SecurityToken
name|token
range|:
name|tokens
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|token
operator|.
name|getState
argument_list|()
operator|==
name|state
condition|)
block|{
name|t
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|t
return|;
block|}
specifier|protected
name|void
name|processTokenExpiry
parameter_list|()
block|{
for|for
control|(
name|SecurityToken
name|token
range|:
name|tokens
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|token
operator|.
name|getExpires
argument_list|()
operator|!=
literal|null
operator|&&
name|token
operator|.
name|getExpires
argument_list|()
operator|.
name|getTimeInMillis
argument_list|()
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
name|token
operator|.
name|setState
argument_list|(
name|SecurityToken
operator|.
name|State
operator|.
name|EXPIRED
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|getIdFromSTR
parameter_list|(
name|Element
name|str
parameter_list|)
block|{
name|Element
name|child
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
literal|"KeyInfo"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|WSConstants
operator|.
name|SIG_NS
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|child
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Reference
operator|.
name|TOKEN
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|Reference
operator|.
name|TOKEN
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|child
operator|.
name|getAttribute
argument_list|(
literal|"URI"
argument_list|)
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

