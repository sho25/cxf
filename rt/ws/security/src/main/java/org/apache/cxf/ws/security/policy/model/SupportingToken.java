begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
operator|.
name|SupportTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyComponent
import|;
end_import

begin_class
specifier|public
class|class
name|SupportingToken
extends|extends
name|AbstractSecurityAssertion
implements|implements
name|AlgorithmWrapper
implements|,
name|TokenWrapper
block|{
comment|/**      * Type of SupportingToken      *       * @see SupportingToken#SUPPORTING      * @see SupportingToken#ENDORSING      * @see SupportingToken#SIGNED      * @see SupportingToken#SIGNED_ENDORSING      */
specifier|private
name|SupportTokenType
name|type
decl_stmt|;
specifier|private
name|AlgorithmSuite
name|algorithmSuite
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|SignedEncryptedElements
name|signedElements
decl_stmt|;
specifier|private
name|SignedEncryptedElements
name|encryptedElements
decl_stmt|;
specifier|private
name|SignedEncryptedParts
name|signedParts
decl_stmt|;
specifier|private
name|SignedEncryptedParts
name|encryptedParts
decl_stmt|;
specifier|public
name|SupportingToken
parameter_list|(
name|SupportTokenType
name|type
parameter_list|,
name|SPConstants
name|version
parameter_list|)
block|{
name|super
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * @return Returns the algorithmSuite.      */
specifier|public
name|AlgorithmSuite
name|getAlgorithmSuite
parameter_list|()
block|{
return|return
name|algorithmSuite
return|;
block|}
comment|/**      * @param algorithmSuite The algorithmSuite to set.      */
specifier|public
name|void
name|setAlgorithmSuite
parameter_list|(
name|AlgorithmSuite
name|algorithmSuite
parameter_list|)
block|{
name|this
operator|.
name|algorithmSuite
operator|=
name|algorithmSuite
expr_stmt|;
block|}
comment|/**      * @return Returns the token.      */
specifier|public
name|List
argument_list|<
name|Token
argument_list|>
name|getTokens
parameter_list|()
block|{
return|return
name|tokens
return|;
block|}
comment|/**      * @param token The token to set.      */
specifier|public
name|void
name|addToken
parameter_list|(
name|Token
name|token
parameter_list|)
block|{
name|this
operator|.
name|tokens
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return Returns the type.      */
specifier|public
name|SupportTokenType
name|getTokenType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * @param type The type to set.      */
specifier|public
name|void
name|setTokenType
parameter_list|(
name|SupportTokenType
name|t
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|t
expr_stmt|;
block|}
comment|/**      * @return Returns the encryptedElements.      */
specifier|public
name|SignedEncryptedElements
name|getEncryptedElements
parameter_list|()
block|{
return|return
name|encryptedElements
return|;
block|}
comment|/**      * @param encryptedElements The encryptedElements to set.      */
specifier|public
name|void
name|setEncryptedElements
parameter_list|(
name|SignedEncryptedElements
name|encryptedElements
parameter_list|)
block|{
name|this
operator|.
name|encryptedElements
operator|=
name|encryptedElements
expr_stmt|;
block|}
comment|/**      * @return Returns the encryptedParts.      */
specifier|public
name|SignedEncryptedParts
name|getEncryptedParts
parameter_list|()
block|{
return|return
name|encryptedParts
return|;
block|}
comment|/**      * @param encryptedParts The encryptedParts to set.      */
specifier|public
name|void
name|setEncryptedParts
parameter_list|(
name|SignedEncryptedParts
name|encryptedParts
parameter_list|)
block|{
name|this
operator|.
name|encryptedParts
operator|=
name|encryptedParts
expr_stmt|;
block|}
comment|/**      * @return Returns the signedElements.      */
specifier|public
name|SignedEncryptedElements
name|getSignedElements
parameter_list|()
block|{
return|return
name|signedElements
return|;
block|}
comment|/**      * @param signedElements The signedElements to set.      */
specifier|public
name|void
name|setSignedElements
parameter_list|(
name|SignedEncryptedElements
name|signedElements
parameter_list|)
block|{
name|this
operator|.
name|signedElements
operator|=
name|signedElements
expr_stmt|;
block|}
comment|/**      * @return Returns the signedParts.      */
specifier|public
name|SignedEncryptedParts
name|getSignedParts
parameter_list|()
block|{
return|return
name|signedParts
return|;
block|}
comment|/**      * @param signedParts The signedParts to set.      */
specifier|public
name|void
name|setSignedParts
parameter_list|(
name|SignedEncryptedParts
name|signedParts
parameter_list|)
block|{
name|this
operator|.
name|signedParts
operator|=
name|signedParts
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.ws.security.policy.TokenWrapper#setToken(org.apache.ws.security.policy.Token)      */
specifier|public
name|void
name|setToken
parameter_list|(
name|Token
name|tok
parameter_list|)
block|{
name|this
operator|.
name|addToken
argument_list|(
name|tok
argument_list|)
expr_stmt|;
block|}
specifier|public
name|QName
name|getName
parameter_list|()
block|{
name|QName
name|ret
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SUPPORTING_TOKEN_SUPPORTING
case|:
name|ret
operator|=
name|constants
operator|.
name|getSupportingTokens
argument_list|()
expr_stmt|;
break|break;
case|case
name|SUPPORTING_TOKEN_SIGNED
case|:
name|ret
operator|=
name|constants
operator|.
name|getSignedSupportingTokens
argument_list|()
expr_stmt|;
break|break;
case|case
name|SUPPORTING_TOKEN_ENDORSING
case|:
name|ret
operator|=
name|constants
operator|.
name|getEndorsingSupportingTokens
argument_list|()
expr_stmt|;
break|break;
case|case
name|SUPPORTING_TOKEN_SIGNED_ENDORSING
case|:
name|ret
operator|=
name|constants
operator|.
name|getSignedEndorsingSupportingTokens
argument_list|()
expr_stmt|;
break|break;
case|case
name|SUPPORTING_TOKEN_ENCRYPTED
case|:
name|ret
operator|=
name|SP12Constants
operator|.
name|ENCRYPTED_SUPPORTING_TOKENS
expr_stmt|;
break|break;
case|case
name|SUPPORTING_TOKEN_SIGNED_ENCRYPTED
case|:
name|ret
operator|=
name|SP12Constants
operator|.
name|SIGNED_ENCRYPTED_SUPPORTING_TOKENS
expr_stmt|;
break|break;
case|case
name|SUPPORTING_TOKEN_ENDORSING_ENCRYPTED
case|:
name|ret
operator|=
name|SP12Constants
operator|.
name|ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
expr_stmt|;
break|break;
case|case
name|SUPPORTING_TOKEN_SIGNED_ENDORSING_ENCRYPTED
case|:
name|ret
operator|=
name|SP12Constants
operator|.
name|SIGNED_ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
expr_stmt|;
break|break;
default|default:
name|ret
operator|=
literal|null
expr_stmt|;
break|break;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * @return true if the supporting token should be encrypted      */
specifier|public
name|boolean
name|isEncryptedToken
parameter_list|()
block|{
return|return
name|type
operator|==
name|SPConstants
operator|.
name|SupportTokenType
operator|.
name|SUPPORTING_TOKEN_ENCRYPTED
operator|||
name|type
operator|==
name|SPConstants
operator|.
name|SupportTokenType
operator|.
name|SUPPORTING_TOKEN_SIGNED_ENCRYPTED
operator|||
name|type
operator|==
name|SPConstants
operator|.
name|SupportTokenType
operator|.
name|SUPPORTING_TOKEN_ENDORSING_ENCRYPTED
operator|||
name|type
operator|==
name|SPConstants
operator|.
name|SupportTokenType
operator|.
name|SUPPORTING_TOKEN_SIGNED_ENDORSING_ENCRYPTED
return|;
block|}
specifier|public
name|PolicyComponent
name|normalize
parameter_list|()
block|{
return|return
name|this
return|;
block|}
specifier|public
name|short
name|getType
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Constants
operator|.
name|TYPE_ASSERTION
return|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|String
name|namespaceURI
init|=
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|writer
operator|.
name|getPrefix
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
name|getName
argument_list|()
operator|.
name|getPrefix
argument_list|()
expr_stmt|;
name|writer
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
name|String
name|localname
init|=
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
comment|//<sp:SupportingToken>
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
name|localname
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
comment|// xmlns:sp=".."
name|writer
operator|.
name|writeNamespace
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
name|String
name|pPrefix
init|=
name|writer
operator|.
name|getPrefix
argument_list|(
name|SPConstants
operator|.
name|POLICY
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pPrefix
operator|==
literal|null
condition|)
block|{
name|pPrefix
operator|=
name|SPConstants
operator|.
name|POLICY
operator|.
name|getPrefix
argument_list|()
expr_stmt|;
name|writer
operator|.
name|setPrefix
argument_list|(
name|pPrefix
argument_list|,
name|SPConstants
operator|.
name|POLICY
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//<wsp:Policy>
name|writer
operator|.
name|writeStartElement
argument_list|(
name|pPrefix
argument_list|,
name|SPConstants
operator|.
name|POLICY
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|SPConstants
operator|.
name|POLICY
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|Token
name|token
decl_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|getTokens
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|// [Token Assertion] +
name|token
operator|=
operator|(
name|Token
operator|)
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|token
operator|.
name|serialize
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|signedParts
operator|!=
literal|null
condition|)
block|{
name|signedParts
operator|.
name|serialize
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|signedElements
operator|!=
literal|null
condition|)
block|{
name|signedElements
operator|.
name|serialize
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encryptedParts
operator|!=
literal|null
condition|)
block|{
name|encryptedParts
operator|.
name|serialize
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encryptedElements
operator|!=
literal|null
condition|)
block|{
name|encryptedElements
operator|.
name|serialize
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
comment|//</wsp:Policy>
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|//</sp:SupportingToken>
block|}
block|}
end_class

end_unit

