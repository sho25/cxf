begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|MemoryTokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|RequestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|ext
operator|.
name|AssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|validate
operator|.
name|Credential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|validate
operator|.
name|Validator
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|STSTokenValidator
implements|implements
name|Validator
block|{
specifier|private
name|STSSamlAssertionValidator
name|samlValidator
init|=
operator|new
name|STSSamlAssertionValidator
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|alwaysValidateToSts
decl_stmt|;
specifier|public
name|STSTokenValidator
parameter_list|()
block|{     }
comment|/**      * Construct a new instance.      * @param alwaysValidateToSts whether to always validate the token to the STS      */
specifier|public
name|STSTokenValidator
parameter_list|(
name|boolean
name|alwaysValidateToSts
parameter_list|)
block|{
name|this
operator|.
name|alwaysValidateToSts
operator|=
name|alwaysValidateToSts
expr_stmt|;
block|}
specifier|public
name|Credential
name|validate
parameter_list|(
name|Credential
name|credential
parameter_list|,
name|RequestData
name|data
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
name|isValidatedLocally
argument_list|(
name|credential
argument_list|,
name|data
argument_list|)
condition|)
block|{
return|return
name|credential
return|;
block|}
return|return
name|validateWithSTS
argument_list|(
name|credential
argument_list|,
operator|(
name|SoapMessage
operator|)
name|data
operator|.
name|getMsgContext
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Credential
name|validateWithSTS
parameter_list|(
name|Credential
name|credential
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|WSSecurityException
block|{
try|try
block|{
name|SecurityToken
name|token
init|=
operator|new
name|SecurityToken
argument_list|()
decl_stmt|;
name|Element
name|tokenElement
init|=
literal|null
decl_stmt|;
name|int
name|hash
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|credential
operator|.
name|getAssertion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|AssertionWrapper
name|assertion
init|=
name|credential
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|byte
index|[]
name|signatureValue
init|=
name|assertion
operator|.
name|getSignatureValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|signatureValue
operator|!=
literal|null
operator|&&
name|signatureValue
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|hash
operator|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|signatureValue
argument_list|)
expr_stmt|;
block|}
name|tokenElement
operator|=
name|credential
operator|.
name|getAssertion
argument_list|()
operator|.
name|getElement
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|credential
operator|.
name|getUsernametoken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tokenElement
operator|=
name|credential
operator|.
name|getUsernametoken
argument_list|()
operator|.
name|getElement
argument_list|()
expr_stmt|;
name|hash
operator|=
name|credential
operator|.
name|getUsernametoken
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|credential
operator|.
name|getBinarySecurityToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tokenElement
operator|=
name|credential
operator|.
name|getBinarySecurityToken
argument_list|()
operator|.
name|getElement
argument_list|()
expr_stmt|;
name|hash
operator|=
name|credential
operator|.
name|getBinarySecurityToken
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|credential
operator|.
name|getSecurityContextToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tokenElement
operator|=
name|credential
operator|.
name|getSecurityContextToken
argument_list|()
operator|.
name|getElement
argument_list|()
expr_stmt|;
name|hash
operator|=
name|credential
operator|.
name|getSecurityContextToken
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
name|token
operator|.
name|setToken
argument_list|(
name|tokenElement
argument_list|)
expr_stmt|;
name|TokenStore
name|tokenStore
init|=
name|getTokenStore
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenStore
operator|!=
literal|null
operator|&&
name|hash
operator|!=
literal|0
condition|)
block|{
name|SecurityToken
name|recoveredToken
init|=
name|tokenStore
operator|.
name|getTokenByAssociatedHash
argument_list|(
name|hash
argument_list|)
decl_stmt|;
if|if
condition|(
name|recoveredToken
operator|!=
literal|null
condition|)
block|{
name|AssertionWrapper
name|assertion
init|=
operator|new
name|AssertionWrapper
argument_list|(
name|recoveredToken
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
name|credential
operator|.
name|setTransformedToken
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
return|return
name|credential
return|;
block|}
block|}
name|STSClient
name|c
init|=
name|STSUtils
operator|.
name|getClient
argument_list|(
name|message
argument_list|,
literal|"sts"
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|c
init|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"noprint"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SecurityToken
argument_list|>
name|tokens
init|=
name|c
operator|.
name|validateSecurityToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|SecurityToken
name|returnedToken
init|=
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnedToken
operator|!=
name|token
condition|)
block|{
name|AssertionWrapper
name|assertion
init|=
operator|new
name|AssertionWrapper
argument_list|(
name|returnedToken
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
name|credential
operator|.
name|setTransformedToken
argument_list|(
name|assertion
argument_list|)
expr_stmt|;
if|if
condition|(
name|hash
operator|!=
literal|0
condition|)
block|{
name|returnedToken
operator|.
name|setAssociatedHash
argument_list|(
name|hash
argument_list|)
expr_stmt|;
name|tokenStore
operator|.
name|add
argument_list|(
name|returnedToken
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|credential
return|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
specifier|final
name|TokenStore
name|getTokenStore
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|TokenStore
name|tokenStore
init|=
operator|(
name|TokenStore
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|TokenStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenStore
operator|==
literal|null
condition|)
block|{
name|tokenStore
operator|=
operator|new
name|MemoryTokenStore
argument_list|()
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|setProperty
argument_list|(
name|TokenStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|tokenStore
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenStore
return|;
block|}
specifier|protected
name|boolean
name|isValidatedLocally
parameter_list|(
name|Credential
name|credential
parameter_list|,
name|RequestData
name|data
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
operator|!
name|alwaysValidateToSts
operator|&&
name|credential
operator|.
name|getAssertion
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|samlValidator
operator|.
name|validate
argument_list|(
name|credential
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return
name|samlValidator
operator|.
name|isTrustVerificationSucceeded
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|FAILURE
argument_list|,
literal|"invalidSAMLsecurity"
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

