begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|acl
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSDocInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSUsernameTokenPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|components
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|RequestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|processor
operator|.
name|Processor
import|;
end_import

begin_comment
comment|/**  * Base class providing an extensibility point for populating   * javax.security.auth.Subject from a current UsernameToken.  *   * WSS4J requires a password for validating digests which may not be available  * when external security systems provide for the authentication. This class  * implements WSS4J Processor interface so that it can delegate a UsernameToken  * validation to an external system.  *   * In order to handle digests, this class currently creates a new WSS4J Security Engine for  * every request. If clear text passwords are expected then a supportDigestPasswords boolean  * property with a false value can be used to disable creating security engines.  *   * Note that if a UsernameToken containing a clear text password has been encrypted then  * an application is expected to provide a password callback handler for decrypting the token only.       *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractWSS4JSecurityContextProvidingInterceptor
extends|extends
name|WSS4JInInterceptor
implements|implements
name|Processor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractWSS4JSecurityContextProvidingInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ThreadLocal
argument_list|<
name|Message
argument_list|>
name|messages
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|supportDigestPasswords
decl_stmt|;
specifier|public
name|void
name|setSupportDigestPasswords
parameter_list|(
name|boolean
name|support
parameter_list|)
block|{
name|supportDigestPasswords
operator|=
name|support
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleFault
parameter_list|(
name|SoapMessage
name|m
parameter_list|)
block|{
name|messages
operator|.
name|remove
argument_list|()
expr_stmt|;
name|super
operator|.
name|handleFault
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|SecurityContext
name|createSecurityContext
parameter_list|(
specifier|final
name|Principal
name|p
parameter_list|)
block|{
name|Message
name|msg
init|=
name|messages
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Current message is not available"
argument_list|)
throw|;
block|}
name|messages
operator|.
name|remove
argument_list|()
expr_stmt|;
specifier|final
name|Subject
name|subject
init|=
name|msg
operator|.
name|get
argument_list|(
name|Subject
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|SecurityContext
argument_list|()
block|{
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
name|p
return|;
block|}
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
if|if
condition|(
name|subject
operator|==
literal|null
operator|||
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Principal
name|p
range|:
name|subject
operator|.
name|getPrincipals
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|Group
operator|&&
operator|(
operator|(
name|Group
operator|)
name|p
operator|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|role
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|void
name|setSubject
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|password
parameter_list|,
name|boolean
name|isDigest
parameter_list|,
name|String
name|nonce
parameter_list|,
name|String
name|created
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Message
name|msg
init|=
name|messages
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Current message is not available"
argument_list|)
throw|;
block|}
name|Subject
name|subject
init|=
name|createSubject
argument_list|(
name|name
argument_list|,
name|password
argument_list|,
name|isDigest
argument_list|,
name|nonce
argument_list|,
name|created
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|==
literal|null
operator|||
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
operator|!
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|FAILED_AUTHENTICATION
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|msg
operator|.
name|put
argument_list|(
name|Subject
operator|.
name|class
argument_list|,
name|subject
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a Subject representing a current user and its roles.       * This Subject is expected to contain at least one Principal representing a user      * and optionally followed by one or more principal Groups this user is a member of.        * @param name username      * @param password password      * @param isDigest true if a password digest is used      * @param nonce optional nonce      * @param created optional timestamp      * @return subject      * @throws WSSecurityException      */
specifier|protected
specifier|abstract
name|Subject
name|createSubject
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|password
parameter_list|,
name|boolean
name|isDigest
parameter_list|,
name|String
name|nonce
parameter_list|,
name|String
name|created
parameter_list|)
throws|throws
name|WSSecurityException
function_decl|;
comment|/**      * {@inheritDoc}      *       */
annotation|@
name|Override
specifier|protected
name|CallbackHandler
name|getCallback
parameter_list|(
name|RequestData
name|reqData
parameter_list|,
name|int
name|doAction
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
operator|(
name|doAction
operator|&
name|WSConstants
operator|.
name|UT
operator|)
operator|!=
literal|0
condition|)
block|{
name|messages
operator|.
name|set
argument_list|(
operator|(
name|Message
operator|)
name|reqData
operator|.
name|getMsgContext
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|supportDigestPasswords
condition|)
block|{
name|CallbackHandler
name|pwdCallback
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pwdCallback
operator|=
name|super
operator|.
name|getCallback
argument_list|(
name|reqData
argument_list|,
name|doAction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
return|return
operator|new
name|DelegatingCallbackHandler
argument_list|(
name|pwdCallback
argument_list|)
return|;
block|}
block|}
return|return
name|super
operator|.
name|getCallback
argument_list|(
name|reqData
argument_list|,
name|doAction
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|WSSecurityEngine
name|getSecurityEngine
parameter_list|()
block|{
if|if
condition|(
operator|!
name|supportDigestPasswords
condition|)
block|{
return|return
name|super
operator|.
name|getSecurityEngine
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|profiles
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|profiles
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|USERNAMETOKEN_NS
argument_list|,
name|WSConstants
operator|.
name|USERNAME_TOKEN_LN
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|profiles
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|WSSE_NS
argument_list|,
name|WSConstants
operator|.
name|USERNAME_TOKEN_LN
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|profiles
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|WSSE11_NS
argument_list|,
name|WSConstants
operator|.
name|USERNAME_TOKEN_LN
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|createSecurityEngine
argument_list|(
name|profiles
argument_list|)
return|;
block|}
specifier|public
name|void
name|handleToken
parameter_list|(
name|Element
name|elem
parameter_list|,
name|Crypto
name|crypto
parameter_list|,
name|Crypto
name|decCrypto
parameter_list|,
name|CallbackHandler
name|cb
parameter_list|,
name|WSDocInfo
name|wsDocInfo
parameter_list|,
name|Vector
name|returnResults
parameter_list|,
name|WSSConfig
name|config
parameter_list|)
throws|throws
name|WSSecurityException
block|{
operator|new
name|CustomUsernameTokenProcessor
argument_list|()
operator|.
name|handleToken
argument_list|(
name|elem
argument_list|,
name|crypto
argument_list|,
name|decCrypto
argument_list|,
name|cb
argument_list|,
name|wsDocInfo
argument_list|,
name|returnResults
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|DelegatingCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
name|CallbackHandler
name|pwdHandler
decl_stmt|;
specifier|public
name|DelegatingCallbackHandler
parameter_list|(
name|CallbackHandler
name|pwdHandler
parameter_list|)
block|{
name|this
operator|.
name|pwdHandler
operator|=
name|pwdHandler
expr_stmt|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
for|for
control|(
name|Callback
name|c
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|c
operator|instanceof
name|WSPasswordCallback
condition|)
block|{
name|WSPasswordCallback
name|pc
init|=
operator|(
name|WSPasswordCallback
operator|)
name|c
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|PASSWORD_TEXT
operator|.
name|equals
argument_list|(
name|pc
operator|.
name|getPasswordType
argument_list|()
argument_list|)
operator|&&
name|pc
operator|.
name|getUsage
argument_list|()
operator|==
name|WSPasswordCallback
operator|.
name|USERNAME_TOKEN_UNKNOWN
condition|)
block|{
name|AbstractWSS4JSecurityContextProvidingInterceptor
operator|.
name|this
operator|.
name|setSubject
argument_list|(
name|pc
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|pc
operator|.
name|getPassword
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pwdHandler
operator|!=
literal|null
condition|)
block|{
name|pwdHandler
operator|.
name|handle
argument_list|(
name|callbacks
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Custom UsernameTokenProcessor      * Unfortunately, WSS4J UsernameTokenProcessor makes it impossible to      * override its handleUsernameToken only.       *      */
specifier|private
class|class
name|CustomUsernameTokenProcessor
implements|implements
name|Processor
block|{
specifier|private
name|String
name|utId
decl_stmt|;
specifier|private
name|UsernameToken
name|ut
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|handleToken
parameter_list|(
name|Element
name|elem
parameter_list|,
name|Crypto
name|crypto
parameter_list|,
name|Crypto
name|decCrypto
parameter_list|,
name|CallbackHandler
name|cb
parameter_list|,
name|WSDocInfo
name|wsDocInfo
parameter_list|,
name|Vector
name|returnResults
parameter_list|,
name|WSSConfig
name|wsc
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found UsernameToken list element"
argument_list|)
expr_stmt|;
block|}
name|Principal
name|principal
init|=
name|handleUsernameToken
argument_list|(
operator|(
name|Element
operator|)
name|elem
argument_list|,
name|cb
argument_list|)
decl_stmt|;
name|returnResults
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|WSSecurityEngineResult
argument_list|(
name|WSConstants
operator|.
name|UT
argument_list|,
name|principal
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|utId
operator|=
name|ut
operator|.
name|getID
argument_list|()
expr_stmt|;
block|}
specifier|private
name|WSUsernameTokenPrincipal
name|handleUsernameToken
parameter_list|(
name|Element
name|token
parameter_list|,
name|CallbackHandler
name|cb
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|//
comment|// Parse the UsernameToken element
comment|//
name|ut
operator|=
operator|new
name|UsernameToken
argument_list|(
name|token
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|ut
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|password
init|=
name|ut
operator|.
name|getPassword
argument_list|()
decl_stmt|;
name|String
name|nonce
init|=
name|ut
operator|.
name|getNonce
argument_list|()
decl_stmt|;
name|String
name|createdTime
init|=
name|ut
operator|.
name|getCreated
argument_list|()
decl_stmt|;
name|String
name|pwType
init|=
name|ut
operator|.
name|getPasswordType
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"UsernameToken user "
operator|+
name|user
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"UsernameToken password "
operator|+
name|password
argument_list|)
expr_stmt|;
block|}
name|AbstractWSS4JSecurityContextProvidingInterceptor
operator|.
name|this
operator|.
name|setSubject
argument_list|(
name|user
argument_list|,
name|password
argument_list|,
name|ut
operator|.
name|isHashed
argument_list|()
argument_list|,
name|nonce
argument_list|,
name|createdTime
argument_list|)
expr_stmt|;
name|WSUsernameTokenPrincipal
name|principal
init|=
operator|new
name|WSUsernameTokenPrincipal
argument_list|(
name|user
argument_list|,
name|ut
operator|.
name|isHashed
argument_list|()
argument_list|)
decl_stmt|;
name|principal
operator|.
name|setNonce
argument_list|(
name|nonce
argument_list|)
expr_stmt|;
name|principal
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|principal
operator|.
name|setCreatedTime
argument_list|(
name|createdTime
argument_list|)
expr_stmt|;
name|principal
operator|.
name|setPasswordType
argument_list|(
name|pwType
argument_list|)
expr_stmt|;
return|return
name|principal
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|utId
return|;
block|}
block|}
comment|/**      * Simple Principal implementation      *      */
specifier|protected
specifier|static
class|class
name|SimplePrincipal
implements|implements
name|Principal
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|SimplePrincipal
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
comment|/**      * Simple Group implementation      *      */
specifier|protected
specifier|static
class|class
name|SimpleGroup
extends|extends
name|SimplePrincipal
implements|implements
name|Group
block|{
specifier|private
name|String
name|memberName
decl_stmt|;
specifier|public
name|SimpleGroup
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|memberName
parameter_list|)
block|{
name|super
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|this
operator|.
name|memberName
operator|=
name|memberName
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMember
parameter_list|(
name|Principal
name|p
parameter_list|)
block|{
return|return
name|memberName
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|addMember
parameter_list|(
name|Principal
name|p
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|Enumeration
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|members
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|boolean
name|removeMember
parameter_list|(
name|Principal
name|arg0
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

