begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyhandlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|saaj
operator|.
name|SAAJUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|MapNamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|AttachmentCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|WSS4JUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|WSEncryptionPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|CryptoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|CryptoType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|JasyptPasswordEncryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|PasswordEncryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|derivedKey
operator|.
name|ConversationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|principal
operator|.
name|UsernameTokenPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SAMLCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SAMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|util
operator|.
name|Loader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|bsp
operator|.
name|BSPEnforcer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|WSHandlerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecDKSign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecEncryptedKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecSignatureConfirmation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecUsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|BinarySecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|SecurityTokenReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|X509Security
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
operator|.
name|IncludeTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractSecurityAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractSymmetricAsymmetricBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractToken
operator|.
name|DerivedKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractTokenWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
operator|.
name|AlgorithmSuiteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AsymmetricBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Attachments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|ContentEncryptedElements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|EncryptedElements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|EncryptedParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|IssuedToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|KerberosToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|KeyValueToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Layout
operator|.
name|LayoutType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SamlToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SamlToken
operator|.
name|SamlTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SecureConversationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SecurityContextToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SignedElements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SignedParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SpnegoContextToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SupportingTokens
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SymmetricBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Wss10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Wss11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|X509Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|X509Token
operator|.
name|TokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|common
operator|.
name|SAMLVersion
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractBindingBuilder
extends|extends
name|AbstractCommonBindingHandler
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CRYPTO_CACHE
init|=
literal|"ws-security.crypto.cache"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractBindingBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|AbstractSymmetricAsymmetricBinding
operator|.
name|ProtectionOrder
name|protectionOrder
init|=
name|AbstractSymmetricAsymmetricBinding
operator|.
name|ProtectionOrder
operator|.
name|SignBeforeEncrypting
decl_stmt|;
specifier|protected
specifier|final
name|WSSConfig
name|wssConfig
decl_stmt|;
specifier|protected
name|SOAPMessage
name|saaj
decl_stmt|;
specifier|protected
name|WSSecHeader
name|secHeader
decl_stmt|;
specifier|protected
name|AssertionInfoMap
name|aim
decl_stmt|;
specifier|protected
name|AbstractBinding
name|binding
decl_stmt|;
specifier|protected
name|WSSecTimestamp
name|timestampEl
decl_stmt|;
specifier|protected
name|String
name|mainSigId
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigConfList
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|WSEncryptionPart
argument_list|>
name|encryptedTokensList
init|=
operator|new
name|HashSet
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|signatures
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Element
name|bottomUpElement
decl_stmt|;
specifier|protected
name|Element
name|topDownElement
decl_stmt|;
specifier|protected
name|Element
name|bstElement
decl_stmt|;
specifier|protected
name|Element
name|lastEncryptedKeyElement
decl_stmt|;
specifier|private
name|Element
name|lastSupportingTokenElement
decl_stmt|;
specifier|private
name|Element
name|lastDerivedKeyElement
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AbstractSecurityAssertion
argument_list|>
name|suppTokenParts
init|=
operator|new
name|ArrayList
argument_list|<
name|AbstractSecurityAssertion
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SupportingToken
argument_list|>
name|endSuppTokList
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SupportingToken
argument_list|>
name|sgndEndSuppTokList
decl_stmt|;
specifier|public
name|AbstractBindingBuilder
parameter_list|(
name|WSSConfig
name|config
parameter_list|,
name|AbstractBinding
name|binding
parameter_list|,
name|SOAPMessage
name|saaj
parameter_list|,
name|WSSecHeader
name|secHeader
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|wssConfig
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|binding
operator|=
name|binding
expr_stmt|;
name|this
operator|.
name|aim
operator|=
name|aim
expr_stmt|;
name|this
operator|.
name|secHeader
operator|=
name|secHeader
expr_stmt|;
name|this
operator|.
name|saaj
operator|=
name|saaj
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SEND_SIGV
argument_list|,
name|signatures
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|insertAfter
parameter_list|(
name|Element
name|child
parameter_list|,
name|Element
name|sib
parameter_list|)
block|{
if|if
condition|(
name|sib
operator|.
name|getNextSibling
argument_list|()
operator|==
literal|null
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|child
argument_list|,
name|sib
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addDerivedKeyElement
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
if|if
condition|(
name|lastDerivedKeyElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|lastDerivedKeyElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastEncryptedKeyElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|lastEncryptedKeyElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topDownElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|topDownElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|el
argument_list|,
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
name|lastEncryptedKeyElement
operator|=
name|el
expr_stmt|;
block|}
specifier|protected
name|void
name|addEncryptedKeyElement
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
if|if
condition|(
name|lastEncryptedKeyElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|lastEncryptedKeyElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastDerivedKeyElement
operator|!=
literal|null
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|el
argument_list|,
name|lastDerivedKeyElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topDownElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|topDownElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|el
argument_list|,
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
name|lastEncryptedKeyElement
operator|=
name|el
expr_stmt|;
block|}
specifier|protected
name|void
name|addSupportingElement
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
if|if
condition|(
name|lastSupportingTokenElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|lastSupportingTokenElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastDerivedKeyElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|lastDerivedKeyElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastEncryptedKeyElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|lastEncryptedKeyElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topDownElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|topDownElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bottomUpElement
operator|!=
literal|null
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|el
argument_list|,
name|bottomUpElement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
name|lastSupportingTokenElement
operator|=
name|el
expr_stmt|;
block|}
specifier|protected
name|void
name|insertBeforeBottomUp
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
if|if
condition|(
name|bottomUpElement
operator|==
literal|null
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|el
argument_list|,
name|bottomUpElement
argument_list|)
expr_stmt|;
block|}
name|bottomUpElement
operator|=
name|el
expr_stmt|;
block|}
specifier|protected
name|void
name|addTopDownElement
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
if|if
condition|(
name|topDownElement
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|el
argument_list|,
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|topDownElement
argument_list|)
expr_stmt|;
block|}
name|topDownElement
operator|=
name|el
expr_stmt|;
block|}
specifier|protected
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Crypto
argument_list|>
name|getCryptoCache
parameter_list|()
block|{
name|EndpointInfo
name|info
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
operator|.
name|getEndpointInfo
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Crypto
argument_list|>
name|o
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|CRYPTO_CACHE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Crypto
argument_list|>
argument_list|()
expr_stmt|;
name|info
operator|.
name|setProperty
argument_list|(
name|CRYPTO_CACHE
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
block|}
specifier|protected
specifier|final
name|TokenStore
name|getTokenStore
parameter_list|()
block|{
return|return
name|WSS4JUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
return|;
block|}
specifier|protected
name|WSSecTimestamp
name|createTimestamp
parameter_list|()
block|{
if|if
condition|(
name|binding
operator|.
name|isIncludeTimestamp
argument_list|()
condition|)
block|{
name|Object
name|o
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|TIMESTAMP_TTL
argument_list|)
decl_stmt|;
name|int
name|ttl
init|=
literal|300
decl_stmt|;
comment|//default is 300 seconds
if|if
condition|(
name|o
operator|instanceof
name|Number
condition|)
block|{
name|ttl
operator|=
operator|(
operator|(
name|Number
operator|)
name|o
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|ttl
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ttl
operator|<=
literal|0
condition|)
block|{
name|ttl
operator|=
literal|300
expr_stmt|;
block|}
name|timestampEl
operator|=
operator|new
name|WSSecTimestamp
argument_list|(
name|wssConfig
argument_list|)
expr_stmt|;
name|timestampEl
operator|.
name|setTimeToLive
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
name|timestampEl
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|SPConstants
operator|.
name|INCLUDE_TIMESTAMP
argument_list|)
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|timestampEl
return|;
block|}
specifier|protected
name|WSSecTimestamp
name|handleLayout
parameter_list|(
name|WSSecTimestamp
name|timestamp
parameter_list|)
block|{
if|if
condition|(
name|binding
operator|.
name|getLayout
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|SPConstants
operator|.
name|LAYOUT
argument_list|)
decl_stmt|;
name|AssertionInfo
name|ai
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|layoutAi
range|:
name|ais
control|)
block|{
name|layoutAi
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ai
operator|=
name|layoutAi
expr_stmt|;
block|}
if|if
condition|(
name|binding
operator|.
name|getLayout
argument_list|()
operator|.
name|getLayoutType
argument_list|()
operator|==
name|LayoutType
operator|.
name|LaxTsLast
condition|)
block|{
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|SPConstants
operator|.
name|LAYOUT_LAX_TIMESTAMP_LAST
operator|+
literal|" requires a timestamp"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|binding
operator|.
name|getLayout
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|SPConstants
operator|.
name|LAYOUT_LAX_TIMESTAMP_LAST
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|el
init|=
name|timestamp
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
if|if
condition|(
name|bottomUpElement
operator|==
literal|null
condition|)
block|{
name|bottomUpElement
operator|=
name|el
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|binding
operator|.
name|getLayout
argument_list|()
operator|.
name|getLayoutType
argument_list|()
operator|==
name|LayoutType
operator|.
name|LaxTsFirst
condition|)
block|{
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|SPConstants
operator|.
name|LAYOUT_LAX_TIMESTAMP_FIRST
operator|+
literal|" requires a timestamp"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addTopDownElement
argument_list|(
name|timestampEl
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|binding
operator|.
name|getLayout
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|SPConstants
operator|.
name|LAYOUT_LAX_TIMESTAMP_FIRST
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|timestampEl
operator|!=
literal|null
condition|)
block|{
name|addTopDownElement
argument_list|(
name|timestampEl
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|binding
operator|.
name|getLayout
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|SPConstants
operator|.
name|LAYOUT_LAX
argument_list|)
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|binding
operator|.
name|getLayout
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|SPConstants
operator|.
name|LAYOUT_STRICT
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|timestampEl
operator|!=
literal|null
condition|)
block|{
name|addTopDownElement
argument_list|(
name|timestampEl
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|timestamp
return|;
block|}
specifier|protected
name|void
name|reshuffleTimestamp
parameter_list|()
block|{
comment|// Make sure that the Timestamp is in first place, if that is what the policy requires
if|if
condition|(
name|binding
operator|.
name|getLayout
argument_list|()
operator|!=
literal|null
operator|&&
name|timestampEl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|binding
operator|.
name|getLayout
argument_list|()
operator|.
name|getLayoutType
argument_list|()
operator|==
name|LayoutType
operator|.
name|LaxTsFirst
operator|&&
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getFirstChild
argument_list|()
operator|!=
name|timestampEl
operator|.
name|getElement
argument_list|()
condition|)
block|{
name|Node
name|firstChild
init|=
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|firstChild
operator|!=
literal|null
operator|&&
name|firstChild
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|firstChild
operator|=
name|firstChild
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|firstChild
operator|!=
literal|null
operator|&&
name|firstChild
operator|!=
name|timestampEl
operator|.
name|getElement
argument_list|()
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|timestampEl
operator|.
name|getElement
argument_list|()
argument_list|,
name|firstChild
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|binding
operator|.
name|getLayout
argument_list|()
operator|.
name|getLayoutType
argument_list|()
operator|==
name|LayoutType
operator|.
name|LaxTsLast
operator|&&
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getLastChild
argument_list|()
operator|!=
name|timestampEl
operator|.
name|getElement
argument_list|()
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|timestampEl
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|SupportingToken
argument_list|>
name|handleSupportingTokens
parameter_list|(
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|tokensInfos
parameter_list|,
name|boolean
name|endorse
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|List
argument_list|<
name|SupportingToken
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|SupportingToken
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokensInfos
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|assertionInfo
range|:
name|tokensInfos
control|)
block|{
if|if
condition|(
name|assertionInfo
operator|.
name|getAssertion
argument_list|()
operator|instanceof
name|SupportingTokens
condition|)
block|{
name|assertionInfo
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|handleSupportingTokens
argument_list|(
operator|(
name|SupportingTokens
operator|)
name|assertionInfo
operator|.
name|getAssertion
argument_list|()
argument_list|,
name|endorse
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|WSSecurityException
operator|.
name|ErrorCode
operator|.
name|FAILURE
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|List
argument_list|<
name|SupportingToken
argument_list|>
name|handleSupportingTokens
parameter_list|(
name|SupportingTokens
name|suppTokens
parameter_list|,
name|boolean
name|endorse
parameter_list|,
name|List
argument_list|<
name|SupportingToken
argument_list|>
name|ret
parameter_list|)
throws|throws
name|WSSecurityException
throws|,
name|SOAPException
block|{
if|if
condition|(
name|suppTokens
operator|==
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
for|for
control|(
name|AbstractToken
name|token
range|:
name|suppTokens
operator|.
name|getTokens
argument_list|()
control|)
block|{
name|assertToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isTokenRequired
argument_list|(
name|token
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
condition|)
block|{
comment|// Check for any SignedParts so as *not* to sign them
name|getSignedParts
argument_list|(
name|suppTokens
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|token
operator|instanceof
name|UsernameToken
condition|)
block|{
name|handleUsernameTokenSupportingToken
argument_list|(
operator|(
name|UsernameToken
operator|)
name|token
argument_list|,
name|endorse
argument_list|,
name|suppTokens
operator|.
name|isEncryptedToken
argument_list|()
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|IssuedToken
operator|||
name|token
operator|instanceof
name|SecureConversationToken
operator|||
name|token
operator|instanceof
name|SecurityContextToken
operator|||
name|token
operator|instanceof
name|KerberosToken
operator|||
name|token
operator|instanceof
name|SpnegoContextToken
condition|)
block|{
comment|//ws-trust/ws-sc stuff.......
name|SecurityToken
name|secToken
init|=
name|getSecurityToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|secToken
operator|==
literal|null
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"Could not find IssuedToken"
argument_list|)
expr_stmt|;
block|}
name|Element
name|clone
init|=
name|cloneElement
argument_list|(
name|secToken
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
name|secToken
operator|.
name|setToken
argument_list|(
name|clone
argument_list|)
expr_stmt|;
name|addSupportingElement
argument_list|(
name|clone
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|secToken
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|id
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'#'
condition|)
block|{
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suppTokens
operator|.
name|isEncryptedToken
argument_list|()
condition|)
block|{
name|WSEncryptionPart
name|part
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|id
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|clone
argument_list|)
expr_stmt|;
name|encryptedTokensList
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|secToken
operator|.
name|getX509Certificate
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|SupportingToken
argument_list|(
name|token
argument_list|,
operator|new
name|WSSecurityTokenHolder
argument_list|(
name|wssConfig
argument_list|,
name|secToken
argument_list|)
argument_list|,
name|getSignedParts
argument_list|(
name|suppTokens
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|WSSecSignature
name|sig
init|=
operator|new
name|WSSecSignature
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
name|sig
operator|.
name|setX509Certificate
argument_list|(
name|secToken
operator|.
name|getX509Certificate
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setCustomTokenId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
name|String
name|tokenType
init|=
name|secToken
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML2_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|!=
literal|null
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
name|sig
operator|.
name|setSignatureAlgorithm
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAsymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSigCanonicalization
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getC14n
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Crypto
name|crypto
init|=
name|secToken
operator|.
name|getCrypto
argument_list|()
decl_stmt|;
name|String
name|uname
init|=
literal|null
decl_stmt|;
try|try
block|{
name|uname
operator|=
name|crypto
operator|.
name|getX509Identifier
argument_list|(
name|secToken
operator|.
name|getX509Certificate
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
name|e1
argument_list|)
throw|;
block|}
name|String
name|password
init|=
name|getPassword
argument_list|(
name|uname
argument_list|,
name|token
argument_list|,
name|WSPasswordCallback
operator|.
name|SIGNATURE
argument_list|)
decl_stmt|;
name|sig
operator|.
name|setUserInfo
argument_list|(
name|uname
argument_list|,
name|password
argument_list|)
expr_stmt|;
try|try
block|{
name|sig
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|,
name|secToken
operator|.
name|getCrypto
argument_list|()
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|ret
operator|.
name|add
argument_list|(
operator|new
name|SupportingToken
argument_list|(
name|token
argument_list|,
name|sig
argument_list|,
name|getSignedParts
argument_list|(
name|suppTokens
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|X509Token
condition|)
block|{
comment|//We have to use a cert. Prepare X509 signature
name|WSSecSignature
name|sig
init|=
name|getSignatureBuilder
argument_list|(
name|suppTokens
argument_list|,
name|token
argument_list|,
name|endorse
argument_list|)
decl_stmt|;
name|Element
name|bstElem
init|=
name|sig
operator|.
name|getBinarySecurityTokenElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|bstElem
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|lastEncryptedKeyElement
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|lastEncryptedKeyElement
operator|.
name|getNextSibling
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|bstElem
argument_list|,
name|lastEncryptedKeyElement
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|bstElem
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sig
operator|.
name|prependBSTElementToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suppTokens
operator|.
name|isEncryptedToken
argument_list|()
condition|)
block|{
name|WSEncryptionPart
name|part
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|sig
operator|.
name|getBSTTokenId
argument_list|()
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|bstElem
argument_list|)
expr_stmt|;
name|encryptedTokensList
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|add
argument_list|(
operator|new
name|SupportingToken
argument_list|(
name|token
argument_list|,
name|sig
argument_list|,
name|getSignedParts
argument_list|(
name|suppTokens
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|KeyValueToken
condition|)
block|{
name|WSSecSignature
name|sig
init|=
name|getSignatureBuilder
argument_list|(
name|suppTokens
argument_list|,
name|token
argument_list|,
name|endorse
argument_list|)
decl_stmt|;
if|if
condition|(
name|suppTokens
operator|.
name|isEncryptedToken
argument_list|()
condition|)
block|{
name|WSEncryptionPart
name|part
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|sig
operator|.
name|getBSTTokenId
argument_list|()
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|encryptedTokensList
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
operator|new
name|SupportingToken
argument_list|(
name|token
argument_list|,
name|sig
argument_list|,
name|getSignedParts
argument_list|(
name|suppTokens
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|SamlToken
condition|)
block|{
name|SamlAssertionWrapper
name|assertionWrapper
init|=
name|addSamlToken
argument_list|(
operator|(
name|SamlToken
operator|)
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|assertionWrapper
operator|!=
literal|null
condition|)
block|{
name|Element
name|assertionElement
init|=
name|assertionWrapper
operator|.
name|toDOM
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
decl_stmt|;
name|addSupportingElement
argument_list|(
name|assertionElement
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|SupportingToken
argument_list|(
name|token
argument_list|,
name|assertionWrapper
argument_list|,
name|getSignedParts
argument_list|(
name|suppTokens
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|suppTokens
operator|.
name|isEncryptedToken
argument_list|()
condition|)
block|{
name|WSEncryptionPart
name|part
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|assertionWrapper
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|assertionElement
argument_list|)
expr_stmt|;
name|encryptedTokensList
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|void
name|handleUsernameTokenSupportingToken
parameter_list|(
name|UsernameToken
name|token
parameter_list|,
name|boolean
name|endorse
parameter_list|,
name|boolean
name|encryptedToken
parameter_list|,
name|List
argument_list|<
name|SupportingToken
argument_list|>
name|ret
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
name|endorse
condition|)
block|{
name|WSSecUsernameToken
name|utBuilder
init|=
name|addDKUsernameToken
argument_list|(
name|token
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|utBuilder
operator|!=
literal|null
condition|)
block|{
name|utBuilder
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|addSupportingElement
argument_list|(
name|utBuilder
operator|.
name|getUsernameTokenElement
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|SupportingToken
argument_list|(
name|token
argument_list|,
name|utBuilder
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|encryptedToken
condition|)
block|{
name|WSEncryptionPart
name|part
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|utBuilder
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|utBuilder
operator|.
name|getUsernameTokenElement
argument_list|()
argument_list|)
expr_stmt|;
name|encryptedTokensList
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|WSSecUsernameToken
name|utBuilder
init|=
name|addUsernameToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|utBuilder
operator|!=
literal|null
condition|)
block|{
name|utBuilder
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|addSupportingElement
argument_list|(
name|utBuilder
operator|.
name|getUsernameTokenElement
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|SupportingToken
argument_list|(
name|token
argument_list|,
name|utBuilder
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|//WebLogic and WCF always encrypt these
comment|//See:  http://e-docs.bea.com/wls/docs103/webserv_intro/interop.html
comment|//encryptedTokensIdList.add(utBuilder.getId());
if|if
condition|(
name|encryptedToken
operator|||
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|SecurityConstants
operator|.
name|ALWAYS_ENCRYPT_UT
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|WSEncryptionPart
name|part
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|utBuilder
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|utBuilder
operator|.
name|getUsernameTokenElement
argument_list|()
argument_list|)
expr_stmt|;
name|encryptedTokensList
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|Element
name|cloneElement
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
return|return
operator|(
name|Element
operator|)
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|importNode
argument_list|(
name|el
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|void
name|addSignatureParts
parameter_list|(
name|List
argument_list|<
name|SupportingToken
argument_list|>
name|tokenList
parameter_list|,
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
parameter_list|)
block|{
for|for
control|(
name|SupportingToken
name|supportingToken
range|:
name|tokenList
control|)
block|{
name|Object
name|tempTok
init|=
name|supportingToken
operator|.
name|getTokenImplementation
argument_list|()
decl_stmt|;
name|WSEncryptionPart
name|part
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tempTok
operator|instanceof
name|WSSecSignature
condition|)
block|{
name|WSSecSignature
name|tempSig
init|=
operator|(
name|WSSecSignature
operator|)
name|tempTok
decl_stmt|;
name|SecurityTokenReference
name|secRef
init|=
name|tempSig
operator|.
name|getSecurityTokenReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML_KI_VALUE_TYPE
operator|.
name|equals
argument_list|(
name|secRef
operator|.
name|getKeyIdentifierValueType
argument_list|()
argument_list|)
operator|||
name|WSConstants
operator|.
name|WSS_SAML2_KI_VALUE_TYPE
operator|.
name|equals
argument_list|(
name|secRef
operator|.
name|getKeyIdentifierValueType
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|secRefElement
init|=
name|cloneElement
argument_list|(
name|secRef
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
name|addSupportingElement
argument_list|(
name|secRefElement
argument_list|)
expr_stmt|;
name|part
operator|=
operator|new
name|WSEncryptionPart
argument_list|(
literal|"STRTransform"
argument_list|,
literal|null
argument_list|,
literal|"Element"
argument_list|)
expr_stmt|;
name|part
operator|.
name|setId
argument_list|(
name|tempSig
operator|.
name|getSecurityTokenReferenceURI
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|secRefElement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|tempSig
operator|.
name|getBSTTokenId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|part
operator|=
operator|new
name|WSEncryptionPart
argument_list|(
name|tempSig
operator|.
name|getBSTTokenId
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|tempSig
operator|.
name|getBinarySecurityTokenElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|tempTok
operator|instanceof
name|WSSecUsernameToken
condition|)
block|{
name|WSSecUsernameToken
name|unt
init|=
operator|(
name|WSSecUsernameToken
operator|)
name|tempTok
decl_stmt|;
name|part
operator|=
operator|new
name|WSEncryptionPart
argument_list|(
name|unt
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|unt
operator|.
name|getUsernameTokenElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tempTok
operator|instanceof
name|BinarySecurity
condition|)
block|{
name|BinarySecurity
name|bst
init|=
operator|(
name|BinarySecurity
operator|)
name|tempTok
decl_stmt|;
name|part
operator|=
operator|new
name|WSEncryptionPart
argument_list|(
name|bst
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|bst
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tempTok
operator|instanceof
name|SamlAssertionWrapper
condition|)
block|{
name|SamlAssertionWrapper
name|assertionWrapper
init|=
operator|(
name|SamlAssertionWrapper
operator|)
name|tempTok
decl_stmt|;
name|Document
name|doc
init|=
name|assertionWrapper
operator|.
name|getElement
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
name|boolean
name|saml1
init|=
name|assertionWrapper
operator|.
name|getSaml1
argument_list|()
operator|!=
literal|null
decl_stmt|;
comment|// TODO We only support using a KeyIdentifier for the moment
name|SecurityTokenReference
name|secRef
init|=
name|createSTRForSamlAssertion
argument_list|(
name|doc
argument_list|,
name|assertionWrapper
operator|.
name|getId
argument_list|()
argument_list|,
name|saml1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Element
name|clone
init|=
name|cloneElement
argument_list|(
name|secRef
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
name|addSupportingElement
argument_list|(
name|clone
argument_list|)
expr_stmt|;
name|part
operator|=
operator|new
name|WSEncryptionPart
argument_list|(
literal|"STRTransform"
argument_list|,
literal|null
argument_list|,
literal|"Element"
argument_list|)
expr_stmt|;
name|part
operator|.
name|setId
argument_list|(
name|secRef
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|clone
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tempTok
operator|instanceof
name|WSSecurityTokenHolder
condition|)
block|{
name|SecurityToken
name|token
init|=
operator|(
operator|(
name|WSSecurityTokenHolder
operator|)
name|tempTok
operator|)
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|String
name|tokenType
init|=
name|token
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML2_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|Document
name|doc
init|=
name|token
operator|.
name|getToken
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
name|boolean
name|saml1
init|=
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
decl_stmt|;
name|String
name|id
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|saml1
condition|)
block|{
name|id
operator|=
name|token
operator|.
name|getToken
argument_list|()
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"AssertionID"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|token
operator|.
name|getToken
argument_list|()
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"ID"
argument_list|)
expr_stmt|;
block|}
name|SecurityTokenReference
name|secRef
init|=
name|createSTRForSamlAssertion
argument_list|(
name|doc
argument_list|,
name|id
argument_list|,
name|saml1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Element
name|clone
init|=
name|cloneElement
argument_list|(
name|secRef
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
name|addSupportingElement
argument_list|(
name|clone
argument_list|)
expr_stmt|;
name|part
operator|=
operator|new
name|WSEncryptionPart
argument_list|(
literal|"STRTransform"
argument_list|,
literal|null
argument_list|,
literal|"Element"
argument_list|)
expr_stmt|;
name|part
operator|.
name|setId
argument_list|(
name|secRef
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|clone
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|id
init|=
name|token
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|id
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'#'
condition|)
block|{
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|part
operator|=
operator|new
name|WSEncryptionPart
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|token
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|policyNotAsserted
argument_list|(
name|supportingToken
operator|.
name|getToken
argument_list|()
argument_list|,
literal|"UnsupportedTokenInSupportingToken: "
operator|+
name|tempTok
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|sigParts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Create a SecurityTokenReference to point to a SAML Assertion      * @param doc The owner Document instance      * @param id The Assertion ID      * @param saml1 Whether the Assertion is a SAML1 or SAML2 Assertion      * @param useDirectReferenceToAssertion whether to refer directly to the assertion or not      * @return a SecurityTokenReference to a SAML Assertion      */
specifier|private
name|SecurityTokenReference
name|createSTRForSamlAssertion
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|id
parameter_list|,
name|boolean
name|saml1
parameter_list|,
name|boolean
name|useDirectReferenceToAssertion
parameter_list|)
block|{
name|SecurityTokenReference
name|secRefSaml
init|=
operator|new
name|SecurityTokenReference
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|String
name|secRefID
init|=
name|wssConfig
operator|.
name|getIdAllocator
argument_list|()
operator|.
name|createSecureId
argument_list|(
literal|"STR-"
argument_list|,
name|secRefSaml
argument_list|)
decl_stmt|;
name|secRefSaml
operator|.
name|setID
argument_list|(
name|secRefID
argument_list|)
expr_stmt|;
if|if
condition|(
name|useDirectReferenceToAssertion
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|Reference
name|ref
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|Reference
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|ref
operator|.
name|setURI
argument_list|(
literal|"#"
operator|+
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|saml1
condition|)
block|{
name|ref
operator|.
name|setValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
name|secRefSaml
operator|.
name|addTokenType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secRefSaml
operator|.
name|addTokenType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
expr_stmt|;
block|}
name|secRefSaml
operator|.
name|setReference
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|keyId
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|WSConstants
operator|.
name|WSSE_NS
argument_list|,
literal|"wsse:KeyIdentifier"
argument_list|)
decl_stmt|;
name|String
name|valueType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|saml1
condition|)
block|{
name|valueType
operator|=
name|WSConstants
operator|.
name|WSS_SAML_KI_VALUE_TYPE
expr_stmt|;
name|secRefSaml
operator|.
name|addTokenType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|valueType
operator|=
name|WSConstants
operator|.
name|WSS_SAML2_KI_VALUE_TYPE
expr_stmt|;
name|secRefSaml
operator|.
name|addTokenType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
expr_stmt|;
block|}
name|keyId
operator|.
name|setAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"ValueType"
argument_list|,
name|valueType
argument_list|)
expr_stmt|;
name|keyId
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|elem
init|=
name|secRefSaml
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|elem
operator|.
name|appendChild
argument_list|(
name|keyId
argument_list|)
expr_stmt|;
block|}
return|return
name|secRefSaml
return|;
block|}
specifier|protected
name|WSSecUsernameToken
name|addUsernameToken
parameter_list|(
name|UsernameToken
name|token
parameter_list|)
block|{
name|assertToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isTokenRequired
argument_list|(
name|token
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|userName
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|USERNAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|userName
argument_list|)
condition|)
block|{
name|WSSecUsernameToken
name|utBuilder
init|=
operator|new
name|WSSecUsernameToken
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
comment|// If NoPassword property is set we don't need to set the password
if|if
condition|(
name|token
operator|.
name|getPasswordType
argument_list|()
operator|==
name|UsernameToken
operator|.
name|PasswordType
operator|.
name|NoPassword
condition|)
block|{
name|utBuilder
operator|.
name|setUserInfo
argument_list|(
name|userName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|utBuilder
operator|.
name|setPasswordType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|password
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|PASSWORD
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|password
argument_list|)
condition|)
block|{
name|password
operator|=
name|getPassword
argument_list|(
name|userName
argument_list|,
name|token
argument_list|,
name|WSPasswordCallback
operator|.
name|USERNAME_TOKEN
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|password
argument_list|)
condition|)
block|{
comment|// If the password is available then build the token
if|if
condition|(
name|token
operator|.
name|getPasswordType
argument_list|()
operator|==
name|UsernameToken
operator|.
name|PasswordType
operator|.
name|HashPassword
condition|)
block|{
name|utBuilder
operator|.
name|setPasswordType
argument_list|(
name|WSConstants
operator|.
name|PASSWORD_DIGEST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|utBuilder
operator|.
name|setPasswordType
argument_list|(
name|WSConstants
operator|.
name|PASSWORD_TEXT
argument_list|)
expr_stmt|;
block|}
name|utBuilder
operator|.
name|setUserInfo
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"No password available"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
name|token
operator|.
name|isCreated
argument_list|()
operator|&&
name|token
operator|.
name|getPasswordType
argument_list|()
operator|!=
name|UsernameToken
operator|.
name|PasswordType
operator|.
name|HashPassword
condition|)
block|{
name|utBuilder
operator|.
name|addCreated
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|isNonce
argument_list|()
operator|&&
name|token
operator|.
name|getPasswordType
argument_list|()
operator|!=
name|UsernameToken
operator|.
name|PasswordType
operator|.
name|HashPassword
condition|)
block|{
name|utBuilder
operator|.
name|addNonce
argument_list|()
expr_stmt|;
block|}
return|return
name|utBuilder
return|;
block|}
else|else
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"No username available"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|WSSecUsernameToken
name|addDKUsernameToken
parameter_list|(
name|UsernameToken
name|token
parameter_list|,
name|boolean
name|useMac
parameter_list|)
block|{
name|assertToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isTokenRequired
argument_list|(
name|token
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|userName
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|USERNAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|userName
argument_list|)
condition|)
block|{
name|WSSecUsernameToken
name|utBuilder
init|=
operator|new
name|WSSecUsernameToken
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
name|String
name|password
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|PASSWORD
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|password
argument_list|)
condition|)
block|{
name|password
operator|=
name|getPassword
argument_list|(
name|userName
argument_list|,
name|token
argument_list|,
name|WSPasswordCallback
operator|.
name|USERNAME_TOKEN
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|password
argument_list|)
condition|)
block|{
comment|// If the password is available then build the token
name|utBuilder
operator|.
name|setUserInfo
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|utBuilder
operator|.
name|addDerivedKey
argument_list|(
name|useMac
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|utBuilder
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"No password available"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|utBuilder
return|;
block|}
else|else
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"No username available"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|SamlAssertionWrapper
name|addSamlToken
parameter_list|(
name|SamlToken
name|token
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|assertToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isTokenRequired
argument_list|(
name|token
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|//
comment|// Get the SAML CallbackHandler
comment|//
name|Object
name|o
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SAML_CALLBACK_HANDLER
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|SecurityToken
name|securityToken
init|=
name|getSecurityToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|securityToken
operator|!=
literal|null
condition|)
block|{
name|Element
name|tokenElement
init|=
operator|(
name|Element
operator|)
name|securityToken
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|tokenElement
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|localname
init|=
name|tokenElement
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|SamlTokenType
name|tokenType
init|=
name|token
operator|.
name|getSamlTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|tokenType
operator|==
name|SamlTokenType
operator|.
name|WssSamlV11Token10
operator|||
name|tokenType
operator|==
name|SamlTokenType
operator|.
name|WssSamlV11Token11
operator|)
operator|&&
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
operator|&&
literal|"Assertion"
operator|.
name|equals
argument_list|(
name|localname
argument_list|)
condition|)
block|{
return|return
operator|new
name|SamlAssertionWrapper
argument_list|(
name|tokenElement
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|==
name|SamlTokenType
operator|.
name|WssSamlV20Token11
operator|&&
name|WSConstants
operator|.
name|SAML2_NS
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
operator|&&
literal|"Assertion"
operator|.
name|equals
argument_list|(
name|localname
argument_list|)
condition|)
block|{
return|return
operator|new
name|SamlAssertionWrapper
argument_list|(
name|tokenElement
argument_list|)
return|;
block|}
block|}
block|}
name|CallbackHandler
name|handler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|CallbackHandler
condition|)
block|{
name|handler
operator|=
operator|(
name|CallbackHandler
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
name|handler
operator|=
operator|(
name|CallbackHandler
operator|)
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handler
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"No SAML CallbackHandler available"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|SAMLCallback
name|samlCallback
init|=
operator|new
name|SAMLCallback
argument_list|()
decl_stmt|;
name|SamlTokenType
name|tokenType
init|=
name|token
operator|.
name|getSamlTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenType
operator|==
name|SamlTokenType
operator|.
name|WssSamlV11Token10
operator|||
name|tokenType
operator|==
name|SamlTokenType
operator|.
name|WssSamlV11Token11
condition|)
block|{
name|samlCallback
operator|.
name|setSamlVersion
argument_list|(
name|SAMLVersion
operator|.
name|VERSION_11
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|==
name|SamlTokenType
operator|.
name|WssSamlV20Token11
condition|)
block|{
name|samlCallback
operator|.
name|setSamlVersion
argument_list|(
name|SAMLVersion
operator|.
name|VERSION_20
argument_list|)
expr_stmt|;
block|}
name|SAMLUtil
operator|.
name|doSAMLCallback
argument_list|(
name|handler
argument_list|,
name|samlCallback
argument_list|)
expr_stmt|;
name|SamlAssertionWrapper
name|assertion
init|=
operator|new
name|SamlAssertionWrapper
argument_list|(
name|samlCallback
argument_list|)
decl_stmt|;
if|if
condition|(
name|samlCallback
operator|.
name|isSignAssertion
argument_list|()
condition|)
block|{
name|String
name|issuerName
init|=
name|samlCallback
operator|.
name|getIssuerKeyName
argument_list|()
decl_stmt|;
if|if
condition|(
name|issuerName
operator|==
literal|null
condition|)
block|{
name|String
name|userNameKey
init|=
name|SecurityConstants
operator|.
name|SIGNATURE_USERNAME
decl_stmt|;
name|issuerName
operator|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|userNameKey
argument_list|)
expr_stmt|;
block|}
name|String
name|password
init|=
name|samlCallback
operator|.
name|getIssuerKeyPassword
argument_list|()
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|password
operator|=
name|getPassword
argument_list|(
name|issuerName
argument_list|,
name|token
argument_list|,
name|WSPasswordCallback
operator|.
name|SIGNATURE
argument_list|)
expr_stmt|;
block|}
name|Crypto
name|crypto
init|=
name|samlCallback
operator|.
name|getIssuerCrypto
argument_list|()
decl_stmt|;
if|if
condition|(
name|crypto
operator|==
literal|null
condition|)
block|{
name|crypto
operator|=
name|getSignatureCrypto
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|assertion
operator|.
name|signAssertion
argument_list|(
name|issuerName
argument_list|,
name|password
argument_list|,
name|crypto
argument_list|,
name|samlCallback
operator|.
name|isSendKeyValue
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getCanonicalizationAlgorithm
argument_list|()
argument_list|,
name|samlCallback
operator|.
name|getSignatureAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|assertion
return|;
block|}
comment|/**      * Store a SAML Assertion as a SecurityToken      */
specifier|protected
name|void
name|storeAssertionAsSecurityToken
parameter_list|(
name|SamlAssertionWrapper
name|assertion
parameter_list|)
block|{
name|String
name|id
init|=
name|findIDFromSamlToken
argument_list|(
name|assertion
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|SecurityToken
name|secToken
init|=
operator|new
name|SecurityToken
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|assertion
operator|.
name|getSaml2
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|secToken
operator|.
name|setTokenType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secToken
operator|.
name|setTokenType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
argument_list|)
expr_stmt|;
block|}
name|secToken
operator|.
name|setToken
argument_list|(
name|assertion
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|getTokenStore
argument_list|()
operator|.
name|add
argument_list|(
name|secToken
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|,
name|secToken
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|findIDFromSamlToken
parameter_list|(
name|Element
name|samlToken
parameter_list|)
block|{
name|String
name|id
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|samlToken
operator|!=
literal|null
condition|)
block|{
name|QName
name|elName
init|=
name|DOMUtils
operator|.
name|getElementQName
argument_list|(
name|samlToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|elName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|SAML_NS
argument_list|,
literal|"Assertion"
argument_list|)
argument_list|)
operator|&&
name|samlToken
operator|.
name|hasAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"AssertionID"
argument_list|)
condition|)
block|{
name|id
operator|=
name|samlToken
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"AssertionID"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|elName
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|SAML2_NS
argument_list|,
literal|"Assertion"
argument_list|)
argument_list|)
operator|&&
name|samlToken
operator|.
name|hasAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"ID"
argument_list|)
condition|)
block|{
name|id
operator|=
name|samlToken
operator|.
name|getAttributeNS
argument_list|(
literal|null
argument_list|,
literal|"ID"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|samlToken
operator|.
name|getAttributeNS
argument_list|(
name|WSConstants
operator|.
name|WSU_NS
argument_list|,
literal|"Id"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|id
return|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|(
name|String
name|userName
parameter_list|,
name|Assertion
name|info
parameter_list|,
name|int
name|usage
parameter_list|)
block|{
comment|//Then try to get the password from the given callback handler
name|CallbackHandler
name|handler
init|=
name|getCallbackHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|info
argument_list|,
literal|"No callback handler and no password available"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|WSPasswordCallback
index|[]
name|cb
init|=
block|{
operator|new
name|WSPasswordCallback
argument_list|(
name|userName
argument_list|,
name|usage
argument_list|)
block|}
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|handle
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|policyNotAsserted
argument_list|(
name|info
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|//get the password
return|return
name|cb
index|[
literal|0
index|]
operator|.
name|getPassword
argument_list|()
return|;
block|}
specifier|protected
name|CallbackHandler
name|getCallbackHandler
parameter_list|()
block|{
name|Object
name|o
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|)
decl_stmt|;
name|CallbackHandler
name|handler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|CallbackHandler
condition|)
block|{
name|handler
operator|=
operator|(
name|CallbackHandler
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
name|handler
operator|=
operator|(
name|CallbackHandler
operator|)
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handler
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|handler
return|;
block|}
comment|/**      * Generates a wsu:Id attribute for the provided {@code Element} and returns the attribute value      * or finds and returns the value of the attribute if it already exists.      *       * @param element the {@code Element} to check/create the attribute on      *      * @return the generated or discovered wsu:Id attribute value      */
specifier|public
name|String
name|addWsuIdToElement
parameter_list|(
name|Element
name|elem
parameter_list|)
block|{
name|String
name|id
decl_stmt|;
comment|//first try to get the Id attr
name|Attr
name|idAttr
init|=
name|elem
operator|.
name|getAttributeNodeNS
argument_list|(
literal|null
argument_list|,
literal|"Id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|idAttr
operator|==
literal|null
condition|)
block|{
comment|//then try the wsu:Id value
name|idAttr
operator|=
name|elem
operator|.
name|getAttributeNodeNS
argument_list|(
name|PolicyConstants
operator|.
name|WSU_NAMESPACE_URI
argument_list|,
literal|"Id"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idAttr
operator|!=
literal|null
condition|)
block|{
name|id
operator|=
name|idAttr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//Add an id
name|id
operator|=
name|wssConfig
operator|.
name|getIdAllocator
argument_list|()
operator|.
name|createId
argument_list|(
literal|"_"
argument_list|,
name|elem
argument_list|)
expr_stmt|;
name|String
name|pfx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|pfx
operator|=
name|elem
operator|.
name|lookupPrefix
argument_list|(
name|PolicyConstants
operator|.
name|WSU_NAMESPACE_URI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|pfx
operator|=
name|DOMUtils
operator|.
name|getPrefixRecursive
argument_list|(
name|elem
argument_list|,
name|PolicyConstants
operator|.
name|WSU_NAMESPACE_URI
argument_list|)
expr_stmt|;
block|}
name|boolean
name|found
init|=
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|pfx
argument_list|)
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|pfx
argument_list|)
condition|)
block|{
name|pfx
operator|=
literal|"wsu"
operator|+
operator|(
name|cnt
operator|==
literal|0
condition|?
literal|""
else|:
name|cnt
operator|)
expr_stmt|;
name|String
name|ns
decl_stmt|;
try|try
block|{
name|ns
operator|=
name|elem
operator|.
name|lookupNamespaceURI
argument_list|(
name|pfx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|ns
operator|=
name|DOMUtils
operator|.
name|getNamespace
argument_list|(
name|elem
argument_list|,
name|pfx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|pfx
operator|=
literal|null
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|idAttr
operator|=
name|elem
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createAttributeNS
argument_list|(
name|WSDLConstants
operator|.
name|NS_XMLNS
argument_list|,
literal|"xmlns:"
operator|+
name|pfx
argument_list|)
expr_stmt|;
name|idAttr
operator|.
name|setValue
argument_list|(
name|PolicyConstants
operator|.
name|WSU_NAMESPACE_URI
argument_list|)
expr_stmt|;
name|elem
operator|.
name|setAttributeNodeNS
argument_list|(
name|idAttr
argument_list|)
expr_stmt|;
block|}
name|idAttr
operator|=
name|elem
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createAttributeNS
argument_list|(
name|PolicyConstants
operator|.
name|WSU_NAMESPACE_URI
argument_list|,
name|pfx
operator|+
literal|":Id"
argument_list|)
expr_stmt|;
name|idAttr
operator|.
name|setValue
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|elem
operator|.
name|setAttributeNodeNS
argument_list|(
name|idAttr
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
specifier|public
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|getEncryptedParts
parameter_list|()
throws|throws
name|SOAPException
block|{
name|boolean
name|isBody
init|=
literal|false
decl_stmt|;
name|EncryptedParts
name|parts
init|=
literal|null
decl_stmt|;
name|EncryptedElements
name|elements
init|=
literal|null
decl_stmt|;
name|ContentEncryptedElements
name|celements
init|=
literal|null
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|SPConstants
operator|.
name|ENCRYPTED_PARTS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|parts
operator|=
operator|(
name|EncryptedParts
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|SPConstants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|elements
operator|=
operator|(
name|EncryptedElements
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|SPConstants
operator|.
name|CONTENT_ENCRYPTED_ELEMENTS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|celements
operator|=
operator|(
name|ContentEncryptedElements
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parts
operator|==
literal|null
operator|&&
name|elements
operator|==
literal|null
operator|&&
name|celements
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
return|;
block|}
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|signedParts
init|=
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parts
operator|!=
literal|null
condition|)
block|{
name|isBody
operator|=
name|parts
operator|.
name|isBody
argument_list|()
expr_stmt|;
for|for
control|(
name|Header
name|head
range|:
name|parts
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|WSEncryptionPart
name|wep
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|head
operator|.
name|getName
argument_list|()
argument_list|,
name|head
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|signedParts
operator|.
name|add
argument_list|(
name|wep
argument_list|)
expr_stmt|;
block|}
name|Attachments
name|attachments
init|=
name|parts
operator|.
name|getAttachments
argument_list|()
decl_stmt|;
if|if
condition|(
name|attachments
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|wep
init|=
operator|new
name|WSEncryptionPart
argument_list|(
literal|"cid:Attachments"
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|signedParts
operator|.
name|add
argument_list|(
name|wep
argument_list|)
expr_stmt|;
block|}
block|}
comment|// REVISIT consider catching exceptions and unassert failed assertions or
comment|// to process and assert them one at a time.  Additionally, a found list
comment|// should be applied to all operations that involve adding anything to
comment|// the encrypted list to prevent duplication / errors in encryption.
return|return
name|getPartsAndElements
argument_list|(
literal|false
argument_list|,
name|isBody
argument_list|,
name|signedParts
argument_list|,
name|elements
operator|==
literal|null
condition|?
literal|null
else|:
name|elements
operator|.
name|getXPaths
argument_list|()
argument_list|,
name|celements
operator|==
literal|null
condition|?
literal|null
else|:
name|celements
operator|.
name|getXPaths
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|getSignedParts
parameter_list|(
name|SupportingTokens
name|supportingToken
parameter_list|)
throws|throws
name|SOAPException
block|{
name|boolean
name|isSignBody
init|=
literal|false
decl_stmt|;
name|SignedParts
name|parts
init|=
literal|null
decl_stmt|;
name|SignedElements
name|elements
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|supportingToken
operator|!=
literal|null
operator|&&
name|supportingToken
operator|.
name|isEndorsing
argument_list|()
condition|)
block|{
name|parts
operator|=
name|supportingToken
operator|.
name|getSignedParts
argument_list|()
expr_stmt|;
name|elements
operator|=
name|supportingToken
operator|.
name|getSignedElements
argument_list|()
expr_stmt|;
comment|// Store them so that the main Signature doesn't sign them
if|if
condition|(
name|parts
operator|!=
literal|null
condition|)
block|{
name|suppTokenParts
operator|.
name|add
argument_list|(
name|parts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|elements
operator|!=
literal|null
condition|)
block|{
name|suppTokenParts
operator|.
name|add
argument_list|(
name|elements
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|SPConstants
operator|.
name|SIGNED_PARTS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|SignedParts
name|signedParts
init|=
operator|(
name|SignedParts
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|suppTokenParts
operator|.
name|contains
argument_list|(
name|signedParts
argument_list|)
condition|)
block|{
name|parts
operator|=
name|signedParts
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|SPConstants
operator|.
name|SIGNED_ELEMENTS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|SignedElements
name|signedElements
init|=
operator|(
name|SignedElements
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|suppTokenParts
operator|.
name|contains
argument_list|(
name|signedElements
argument_list|)
condition|)
block|{
name|elements
operator|=
name|signedElements
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|parts
operator|==
literal|null
operator|&&
name|elements
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
return|;
block|}
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|signedParts
init|=
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parts
operator|!=
literal|null
condition|)
block|{
name|isSignBody
operator|=
name|parts
operator|.
name|isBody
argument_list|()
expr_stmt|;
for|for
control|(
name|Header
name|head
range|:
name|parts
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|WSEncryptionPart
name|wep
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|head
operator|.
name|getName
argument_list|()
argument_list|,
name|head
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|signedParts
operator|.
name|add
argument_list|(
name|wep
argument_list|)
expr_stmt|;
block|}
name|Attachments
name|attachments
init|=
name|parts
operator|.
name|getAttachments
argument_list|()
decl_stmt|;
if|if
condition|(
name|attachments
operator|!=
literal|null
condition|)
block|{
name|String
name|modifier
init|=
literal|"Element"
decl_stmt|;
if|if
condition|(
name|attachments
operator|.
name|isContentSignatureTransform
argument_list|()
condition|)
block|{
name|modifier
operator|=
literal|"Content"
expr_stmt|;
block|}
name|WSEncryptionPart
name|wep
init|=
operator|new
name|WSEncryptionPart
argument_list|(
literal|"cid:Attachments"
argument_list|,
name|modifier
argument_list|)
decl_stmt|;
name|signedParts
operator|.
name|add
argument_list|(
name|wep
argument_list|)
expr_stmt|;
block|}
block|}
comment|// REVISIT consider catching exceptions and unassert failed assertions or
comment|// to process and assert them one at a time.  Additionally, a found list
comment|// should be applied to all operations that involve adding anything to
comment|// the signed list to prevent duplication in the signature.
return|return
name|getPartsAndElements
argument_list|(
literal|true
argument_list|,
name|isSignBody
argument_list|,
name|signedParts
argument_list|,
name|elements
operator|==
literal|null
condition|?
literal|null
else|:
name|elements
operator|.
name|getXPaths
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Identifies the portions of the message to be signed/encrypted.      *       * @param sign      *            whether the matches are to be signed or encrypted      * @param includeBody      *            if the body should be included in the signature/encryption      * @param parts      *            any {@code WSEncryptionPart}s to match for signature or      *            encryption as specified by WS-SP signed parts or encrypted      *            parts. Parts without a name match all elements with the      *            provided namespace.      * @param xpaths      *            any XPath expressions to sign/encrypt matches      * @param contentXpaths      *            any XPath expressions to content encrypt      * @return a configured list of {@code WSEncryptionPart}s suitable for      *         processing by WSS4J      * @throws SOAPException      *             if there is an error extracting SOAP content from the SAAJ      *             model      *                   * @deprecated Use {@link #getSignedParts()} and {@link #getEncryptedParts()}      *             instead.      */
specifier|public
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|getPartsAndElements
parameter_list|(
name|boolean
name|sign
parameter_list|,
name|boolean
name|includeBody
parameter_list|,
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|parts
parameter_list|,
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|XPath
argument_list|>
name|xpaths
parameter_list|,
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|XPath
argument_list|>
name|contentXpaths
parameter_list|)
throws|throws
name|SOAPException
block|{
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|found
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
comment|// Handle sign/enc parts
name|result
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getParts
argument_list|(
name|sign
argument_list|,
name|includeBody
argument_list|,
name|parts
argument_list|,
name|found
argument_list|)
argument_list|)
expr_stmt|;
comment|// Handle sign/enc elements
name|result
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getElements
argument_list|(
literal|"Element"
argument_list|,
name|xpaths
argument_list|,
name|found
argument_list|,
name|sign
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sign
condition|)
block|{
comment|// Handle content encrypted elements
name|result
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getElements
argument_list|(
literal|"Content"
argument_list|,
name|contentXpaths
argument_list|,
name|found
argument_list|,
name|sign
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Identifies the portions of the message to be signed/encrypted.      *       * @param sign      *            whether the matches are to be signed or encrypted      * @param includeBody      *            if the body should be included in the signature/encryption      * @param parts      *            any {@code WSEncryptionPart}s to match for signature or      *            encryption as specified by WS-SP signed parts or encrypted      *            parts. Parts without a name match all elements with the      *            provided namespace.      * @param found       *            a list of elements that have previously been tagged for      *            signing/encryption. Populated with additional matches found by      *            this method and used to prevent including the same element      *            twice under the same operation.      * @return a configured list of {@code WSEncryptionPart}s suitable for      *         processing by WSS4J      * @throws SOAPException      *             if there is an error extracting SOAP content from the SAAJ      *             model      */
specifier|protected
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|getParts
parameter_list|(
name|boolean
name|sign
parameter_list|,
name|boolean
name|includeBody
parameter_list|,
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|parts
parameter_list|,
name|List
argument_list|<
name|Element
argument_list|>
name|found
parameter_list|)
throws|throws
name|SOAPException
block|{
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeBody
operator|&&
operator|!
name|found
operator|.
name|contains
argument_list|(
name|SAAJUtils
operator|.
name|getBody
argument_list|(
name|this
operator|.
name|saaj
argument_list|)
argument_list|)
condition|)
block|{
name|found
operator|.
name|add
argument_list|(
name|SAAJUtils
operator|.
name|getBody
argument_list|(
name|saaj
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|id
init|=
name|this
operator|.
name|addWsuIdToElement
argument_list|(
name|SAAJUtils
operator|.
name|getBody
argument_list|(
name|this
operator|.
name|saaj
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sign
condition|)
block|{
name|WSEncryptionPart
name|bodyPart
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|id
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|bodyPart
operator|.
name|setElement
argument_list|(
name|SAAJUtils
operator|.
name|getBody
argument_list|(
name|this
operator|.
name|saaj
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|bodyPart
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|WSEncryptionPart
name|bodyPart
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|id
argument_list|,
literal|"Content"
argument_list|)
decl_stmt|;
name|bodyPart
operator|.
name|setElement
argument_list|(
name|SAAJUtils
operator|.
name|getBody
argument_list|(
name|this
operator|.
name|saaj
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|bodyPart
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|SOAPHeader
name|header
init|=
name|SAAJUtils
operator|.
name|getHeader
argument_list|(
name|saaj
argument_list|)
decl_stmt|;
comment|// Handle sign/enc parts
for|for
control|(
name|WSEncryptionPart
name|part
range|:
name|parts
control|)
block|{
if|if
condition|(
name|part
operator|.
name|getId
argument_list|()
operator|!=
literal|null
operator|&&
name|part
operator|.
name|getId
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"cid:"
argument_list|)
condition|)
block|{
comment|// Attachments are handled inside WSS4J via a CallbackHandler
name|result
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|List
argument_list|<
name|Element
argument_list|>
name|elements
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// An entire namespace
name|elements
operator|=
name|DOMUtils
operator|.
name|getChildrenWithNamespace
argument_list|(
name|header
argument_list|,
name|part
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// All elements with a given name and namespace
name|elements
operator|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|header
argument_list|,
name|part
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|part
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Element
name|el
range|:
name|elements
control|)
block|{
if|if
condition|(
operator|!
name|found
operator|.
name|contains
argument_list|(
name|el
argument_list|)
condition|)
block|{
name|found
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
comment|// Generate an ID for the element and use this ID or else
comment|// WSS4J will only ever sign/encrypt the first matching
comment|// element with the same name and namespace as that in the
comment|// WSEncryptionPart
specifier|final
name|String
name|id
init|=
name|this
operator|.
name|addWsuIdToElement
argument_list|(
name|el
argument_list|)
decl_stmt|;
name|WSEncryptionPart
name|elPart
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|id
argument_list|,
name|part
operator|.
name|getEncModifier
argument_list|()
argument_list|)
decl_stmt|;
name|elPart
operator|.
name|setElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|elPart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Identifies the portions of the message to be signed/encrypted.      *       * @param encryptionModifier      *            indicates the scope of the crypto operation over matched      *            elements. Either "Content" or "Element".      * @param xpaths      *            any XPath expressions to sign/encrypt matches      * @param found      *            a list of elements that have previously been tagged for      *            signing/encryption. Populated with additional matches found by      *            this method and used to prevent including the same element      *            twice under the same operation.      * @param forceId       *         force adding a wsu:Id onto the elements.  Recommended for signatures.      * @return a configured list of {@code WSEncryptionPart}s suitable for      *         processing by WSS4J      * @throws XPathExpressionException      *             if a provided XPath is invalid      * @throws SOAPException      *             if there is an error extracting SOAP content from the SAAJ      *             model      */
specifier|protected
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|getElements
parameter_list|(
name|String
name|encryptionModifier
parameter_list|,
name|List
argument_list|<
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|XPath
argument_list|>
name|xpaths
parameter_list|,
name|List
argument_list|<
name|Element
argument_list|>
name|found
parameter_list|,
name|boolean
name|forceId
parameter_list|)
throws|throws
name|SOAPException
block|{
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|xpaths
operator|!=
literal|null
operator|&&
operator|!
name|xpaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|XPathFactory
name|factory
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|XPath
name|xPath
range|:
name|xpaths
control|)
block|{
name|XPath
name|xpath
init|=
name|factory
operator|.
name|newXPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|xPath
operator|.
name|getPrefixNamespaceMap
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|xpath
operator|.
name|setNamespaceContext
argument_list|(
operator|new
name|MapNamespaceContext
argument_list|(
name|xPath
operator|.
name|getPrefixNamespaceMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|list
init|=
literal|null
decl_stmt|;
try|try
block|{
name|list
operator|=
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
name|xPath
operator|.
name|getXPath
argument_list|()
argument_list|,
name|saaj
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getEnvelope
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Failure in evaluating an XPath expression"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|list
operator|.
name|getLength
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|Element
name|el
init|=
operator|(
name|Element
operator|)
name|list
operator|.
name|item
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|found
operator|.
name|contains
argument_list|(
name|el
argument_list|)
condition|)
block|{
name|String
name|id
init|=
name|setIdOnElement
argument_list|(
name|el
argument_list|,
name|forceId
argument_list|)
decl_stmt|;
name|WSEncryptionPart
name|part
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|id
argument_list|,
name|encryptionModifier
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|part
operator|.
name|setXpath
argument_list|(
name|xPath
operator|.
name|getXPath
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|String
name|setIdOnElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|boolean
name|forceId
parameter_list|)
block|{
if|if
condition|(
name|forceId
condition|)
block|{
return|return
name|this
operator|.
name|addWsuIdToElement
argument_list|(
name|element
argument_list|)
return|;
block|}
comment|//not forcing an ID on this.  Use one if there is one
comment|//there already, but don't force one
name|Attr
name|idAttr
init|=
name|element
operator|.
name|getAttributeNodeNS
argument_list|(
literal|null
argument_list|,
literal|"Id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|idAttr
operator|==
literal|null
condition|)
block|{
comment|//then try the wsu:Id value
name|idAttr
operator|=
name|element
operator|.
name|getAttributeNodeNS
argument_list|(
name|PolicyConstants
operator|.
name|WSU_NAMESPACE_URI
argument_list|,
literal|"Id"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idAttr
operator|!=
literal|null
condition|)
block|{
return|return
name|idAttr
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|WSSecEncryptedKey
name|getEncryptedKeyBuilder
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|,
name|AbstractToken
name|token
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|WSSecEncryptedKey
name|encrKey
init|=
operator|new
name|WSSecEncryptedKey
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
name|Crypto
name|crypto
init|=
name|getEncryptionCrypto
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_CRYPTO
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
name|setKeyIdentifierType
argument_list|(
name|encrKey
argument_list|,
name|wrapper
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|boolean
name|alsoIncludeToken
init|=
literal|false
decl_stmt|;
comment|// Find out do we also need to include the token as per the Inclusion requirement
if|if
condition|(
name|token
operator|instanceof
name|X509Token
operator|&&
name|token
operator|.
name|getIncludeTokenType
argument_list|()
operator|!=
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_NEVER
operator|&&
name|encrKey
operator|.
name|getKeyIdentifierType
argument_list|()
operator|!=
name|WSConstants
operator|.
name|BST_DIRECT_REFERENCE
condition|)
block|{
name|alsoIncludeToken
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|encrUser
init|=
name|setEncryptionUser
argument_list|(
name|encrKey
argument_list|,
name|wrapper
argument_list|,
literal|false
argument_list|,
name|crypto
argument_list|)
decl_stmt|;
name|AlgorithmSuiteType
name|algType
init|=
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAlgorithmSuiteType
argument_list|()
decl_stmt|;
name|encrKey
operator|.
name|setSymmetricEncAlgorithm
argument_list|(
name|algType
operator|.
name|getEncryption
argument_list|()
argument_list|)
expr_stmt|;
name|encrKey
operator|.
name|setKeyEncAlgo
argument_list|(
name|algType
operator|.
name|getAsymmetricKeyWrap
argument_list|()
argument_list|)
expr_stmt|;
name|encrKey
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
if|if
condition|(
name|alsoIncludeToken
condition|)
block|{
name|X509Certificate
name|encCert
init|=
name|getEncryptCert
argument_list|(
name|crypto
argument_list|,
name|encrUser
argument_list|)
decl_stmt|;
name|BinarySecurity
name|bstToken
init|=
operator|new
name|X509Security
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|X509Security
operator|)
name|bstToken
operator|)
operator|.
name|setX509Certificate
argument_list|(
name|encCert
argument_list|)
expr_stmt|;
name|bstToken
operator|.
name|addWSUNamespace
argument_list|()
expr_stmt|;
name|bstToken
operator|.
name|setID
argument_list|(
name|wssConfig
operator|.
name|getIdAllocator
argument_list|()
operator|.
name|createSecureId
argument_list|(
literal|"X509-"
argument_list|,
name|encCert
argument_list|)
argument_list|)
expr_stmt|;
name|WSSecurityUtil
operator|.
name|prependChildElement
argument_list|(
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
argument_list|,
name|bstToken
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|bstElement
operator|=
name|bstToken
operator|.
name|getElement
argument_list|()
expr_stmt|;
block|}
return|return
name|encrKey
return|;
block|}
specifier|private
name|X509Certificate
name|getEncryptCert
parameter_list|(
name|Crypto
name|crypto
parameter_list|,
name|String
name|encrUser
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|// Check for prepared encryption certificate
name|X509Certificate
name|encrCert
init|=
operator|(
name|X509Certificate
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_CERT
argument_list|)
decl_stmt|;
if|if
condition|(
name|encrCert
operator|!=
literal|null
condition|)
block|{
return|return
name|encrCert
return|;
block|}
name|CryptoType
name|cryptoType
init|=
operator|new
name|CryptoType
argument_list|(
name|CryptoType
operator|.
name|TYPE
operator|.
name|ALIAS
argument_list|)
decl_stmt|;
name|cryptoType
operator|.
name|setAlias
argument_list|(
name|encrUser
argument_list|)
expr_stmt|;
name|X509Certificate
index|[]
name|certs
init|=
name|crypto
operator|.
name|getX509Certificates
argument_list|(
name|cryptoType
argument_list|)
decl_stmt|;
return|return
name|certs
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|Crypto
name|getSignatureCrypto
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|)
throws|throws
name|WSSecurityException
block|{
return|return
name|getCrypto
argument_list|(
name|wrapper
argument_list|,
name|SecurityConstants
operator|.
name|SIGNATURE_CRYPTO
argument_list|,
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|)
return|;
block|}
specifier|public
name|Crypto
name|getEncryptionCrypto
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Crypto
name|crypto
init|=
name|getCrypto
argument_list|(
name|wrapper
argument_list|,
name|SecurityConstants
operator|.
name|ENCRYPT_CRYPTO
argument_list|,
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|)
decl_stmt|;
name|boolean
name|enableRevocation
init|=
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENABLE_REVOCATION
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|enableRevocation
operator|&&
name|crypto
operator|!=
literal|null
condition|)
block|{
name|CryptoType
name|cryptoType
init|=
operator|new
name|CryptoType
argument_list|(
name|CryptoType
operator|.
name|TYPE
operator|.
name|ALIAS
argument_list|)
decl_stmt|;
name|String
name|encrUser
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_USERNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|encrUser
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|encrUser
operator|=
name|crypto
operator|.
name|getDefaultX509Identifier
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e1
argument_list|)
throw|;
block|}
block|}
name|cryptoType
operator|.
name|setAlias
argument_list|(
name|encrUser
argument_list|)
expr_stmt|;
name|X509Certificate
index|[]
name|certs
init|=
name|crypto
operator|.
name|getX509Certificates
argument_list|(
name|cryptoType
argument_list|)
decl_stmt|;
if|if
condition|(
name|certs
operator|!=
literal|null
operator|&&
name|certs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|crypto
operator|.
name|verifyTrust
argument_list|(
name|certs
argument_list|,
name|enableRevocation
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|crypto
return|;
block|}
specifier|public
name|Crypto
name|getCrypto
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|,
name|String
name|cryptoKey
parameter_list|,
name|String
name|propKey
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Crypto
name|crypto
init|=
operator|(
name|Crypto
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|cryptoKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|crypto
operator|!=
literal|null
condition|)
block|{
return|return
name|crypto
return|;
block|}
name|Object
name|o
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|propKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|crypto
operator|=
name|getCryptoCache
argument_list|()
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
name|crypto
operator|!=
literal|null
condition|)
block|{
return|return
name|crypto
return|;
block|}
name|ResourceManager
name|manager
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
operator|.
name|getExtension
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|propsURL
init|=
name|WSS4JUtils
operator|.
name|getPropertiesFileURL
argument_list|(
name|o
argument_list|,
name|manager
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
name|WSS4JUtils
operator|.
name|getProps
argument_list|(
name|o
argument_list|,
name|propsURL
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|crypto
operator|=
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|properties
argument_list|,
name|Loader
operator|.
name|getClassLoader
argument_list|(
name|CryptoFactory
operator|.
name|class
argument_list|)
argument_list|,
name|getPasswordEncryptor
argument_list|()
argument_list|)
expr_stmt|;
name|getCryptoCache
argument_list|()
operator|.
name|put
argument_list|(
name|o
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
block|}
return|return
name|crypto
return|;
block|}
specifier|protected
name|PasswordEncryptor
name|getPasswordEncryptor
parameter_list|()
block|{
name|PasswordEncryptor
name|passwordEncryptor
init|=
operator|(
name|PasswordEncryptor
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|PASSWORD_ENCRYPTOR_INSTANCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|passwordEncryptor
operator|!=
literal|null
condition|)
block|{
return|return
name|passwordEncryptor
return|;
block|}
name|CallbackHandler
name|callbackHandler
init|=
name|getCallbackHandler
argument_list|()
decl_stmt|;
if|if
condition|(
name|callbackHandler
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|JasyptPasswordEncryptor
argument_list|(
name|callbackHandler
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setKeyIdentifierType
parameter_list|(
name|WSSecBase
name|secBase
parameter_list|,
name|AbstractTokenWrapper
name|wrapper
parameter_list|,
name|AbstractToken
name|token
parameter_list|)
block|{
name|boolean
name|tokenTypeSet
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|token
operator|instanceof
name|X509Token
condition|)
block|{
name|X509Token
name|x509Token
init|=
operator|(
name|X509Token
operator|)
name|token
decl_stmt|;
if|if
condition|(
name|x509Token
operator|.
name|isRequireIssuerSerialReference
argument_list|()
condition|)
block|{
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|ISSUER_SERIAL
argument_list|)
expr_stmt|;
name|tokenTypeSet
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x509Token
operator|.
name|isRequireKeyIdentifierReference
argument_list|()
condition|)
block|{
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|SKI_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
name|tokenTypeSet
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x509Token
operator|.
name|isRequireThumbprintReference
argument_list|()
condition|)
block|{
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|THUMBPRINT_IDENTIFIER
argument_list|)
expr_stmt|;
name|tokenTypeSet
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|KeyValueToken
condition|)
block|{
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|KEY_VALUE
argument_list|)
expr_stmt|;
name|tokenTypeSet
operator|=
literal|true
expr_stmt|;
block|}
name|assertPolicy
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tokenTypeSet
condition|)
block|{
name|boolean
name|requestor
init|=
name|isRequestor
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getIncludeTokenType
argument_list|()
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_NEVER
operator|||
name|token
operator|instanceof
name|X509Token
operator|&&
operator|(
operator|(
name|token
operator|.
name|getIncludeTokenType
argument_list|()
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS_TO_RECIPIENT
operator|&&
operator|!
name|requestor
operator|)
operator|||
operator|(
name|token
operator|.
name|getIncludeTokenType
argument_list|()
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS_TO_INITIATOR
operator|&&
name|requestor
operator|)
operator|)
condition|)
block|{
name|Wss10
name|wss
init|=
name|getWss10
argument_list|()
decl_stmt|;
name|assertPolicy
argument_list|(
name|wss
argument_list|)
expr_stmt|;
if|if
condition|(
name|wss
operator|==
literal|null
operator|||
name|wss
operator|.
name|isMustSupportRefKeyIdentifier
argument_list|()
condition|)
block|{
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|SKI_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wss
operator|.
name|isMustSupportRefIssuerSerial
argument_list|()
condition|)
block|{
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|ISSUER_SERIAL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wss
operator|instanceof
name|Wss11
operator|&&
operator|(
operator|(
name|Wss11
operator|)
name|wss
operator|)
operator|.
name|isMustSupportRefThumbprint
argument_list|()
condition|)
block|{
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|THUMBPRINT_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|ISSUER_SERIAL
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|BST_DIRECT_REFERENCE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|setEncryptionUser
parameter_list|(
name|WSSecEncryptedKey
name|encrKeyBuilder
parameter_list|,
name|AbstractTokenWrapper
name|token
parameter_list|,
name|boolean
name|sign
parameter_list|,
name|Crypto
name|crypto
parameter_list|)
block|{
comment|// Check for prepared certificate property
name|X509Certificate
name|encrCert
init|=
operator|(
name|X509Certificate
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_CERT
argument_list|)
decl_stmt|;
if|if
condition|(
name|encrCert
operator|!=
literal|null
condition|)
block|{
name|encrKeyBuilder
operator|.
name|setUseThisCert
argument_list|(
name|encrCert
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|encrUser
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|sign
condition|?
name|SecurityConstants
operator|.
name|SIGNATURE_USERNAME
else|:
name|SecurityConstants
operator|.
name|ENCRYPT_USERNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|crypto
operator|!=
literal|null
operator|&&
operator|(
name|encrUser
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|encrUser
argument_list|)
operator|)
condition|)
block|{
try|try
block|{
name|encrUser
operator|=
name|crypto
operator|.
name|getDefaultX509Identifier
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e1
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|encrUser
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|encrUser
argument_list|)
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"A "
operator|+
operator|(
name|sign
condition|?
literal|"signature"
else|:
literal|"encryption"
operator|)
operator|+
literal|" username needs to be declared."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|WSHandlerConstants
operator|.
name|USE_REQ_SIG_CERT
operator|.
name|equals
argument_list|(
name|encrUser
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|results
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
block|{
name|encrKeyBuilder
operator|.
name|setUseThisCert
argument_list|(
name|getReqSigCert
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO This is a hack, this should not come under USE_REQ_SIG_CERT
if|if
condition|(
name|encrKeyBuilder
operator|.
name|isCertSet
argument_list|()
condition|)
block|{
name|encrKeyBuilder
operator|.
name|setUserInfo
argument_list|(
name|getUsername
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"No security results in incoming message"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|encrKeyBuilder
operator|.
name|setUserInfo
argument_list|(
name|encrUser
argument_list|)
expr_stmt|;
block|}
return|return
name|encrUser
return|;
block|}
specifier|private
specifier|static
name|X509Certificate
name|getReqSigCert
parameter_list|(
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|results
parameter_list|)
block|{
comment|/*         * Scan the results for a matching actor. Use results only if the         * receiving Actor and the sending Actor match.         */
for|for
control|(
name|WSHandlerResult
name|rResult
range|:
name|results
control|)
block|{
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|wsSecEngineResults
init|=
name|rResult
operator|.
name|getResults
argument_list|()
decl_stmt|;
comment|/*             * Scan the results for the first Signature action. Use the             * certificate of this Signature to set the certificate for the             * encryption action :-).             */
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|wsSecEngineResults
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|SIGN
condition|)
block|{
return|return
operator|(
name|X509Certificate
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATE
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Scan through<code>WSHandlerResult<code> list for a Username token and return      * the username if a Username Token found       * @param results      * @return      */
specifier|public
specifier|static
name|String
name|getUsername
parameter_list|(
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|results
parameter_list|)
block|{
comment|/*          * Scan the results for a matching actor. Use results only if the          * receiving Actor and the sending Actor match.          */
for|for
control|(
name|WSHandlerResult
name|rResult
range|:
name|results
control|)
block|{
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|wsSecEngineResults
init|=
name|rResult
operator|.
name|getResults
argument_list|()
decl_stmt|;
comment|/*              * Scan the results for a username token. Use the username              * of this token to set the alias for the encryption user              */
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|wsSecEngineResults
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|UT
condition|)
block|{
name|UsernameTokenPrincipal
name|principal
init|=
operator|(
name|UsernameTokenPrincipal
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_PRINCIPAL
argument_list|)
decl_stmt|;
return|return
name|principal
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|checkForX509PkiPath
parameter_list|(
name|WSSecSignature
name|sig
parameter_list|,
name|AbstractToken
name|token
parameter_list|)
block|{
if|if
condition|(
name|token
operator|instanceof
name|X509Token
condition|)
block|{
name|X509Token
name|x509Token
init|=
operator|(
name|X509Token
operator|)
name|token
decl_stmt|;
name|TokenType
name|tokenType
init|=
name|x509Token
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenType
operator|==
name|TokenType
operator|.
name|WssX509PkiPathV1Token10
operator|||
name|tokenType
operator|==
name|TokenType
operator|.
name|WssX509PkiPathV1Token11
condition|)
block|{
name|sig
operator|.
name|setUseSingleCertificate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|WSSecSignature
name|getSignatureBuilder
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|,
name|AbstractToken
name|token
parameter_list|,
name|boolean
name|endorse
parameter_list|)
throws|throws
name|WSSecurityException
block|{
return|return
name|getSignatureBuilder
argument_list|(
name|wrapper
argument_list|,
name|token
argument_list|,
literal|false
argument_list|,
name|endorse
argument_list|)
return|;
block|}
specifier|protected
name|WSSecSignature
name|getSignatureBuilder
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|,
name|AbstractToken
name|token
parameter_list|,
name|boolean
name|attached
parameter_list|,
name|boolean
name|endorse
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|WSSecSignature
name|sig
init|=
operator|new
name|WSSecSignature
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
name|sig
operator|.
name|setAttachmentCallbackHandler
argument_list|(
operator|new
name|AttachmentCallbackHandler
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|checkForX509PkiPath
argument_list|(
name|sig
argument_list|,
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|instanceof
name|IssuedToken
operator|||
name|token
operator|instanceof
name|SamlToken
condition|)
block|{
name|assertPolicy
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|SecurityToken
name|securityToken
init|=
name|getSecurityToken
argument_list|()
decl_stmt|;
name|String
name|tokenType
init|=
name|securityToken
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
name|Element
name|ref
decl_stmt|;
if|if
condition|(
name|attached
condition|)
block|{
name|ref
operator|=
name|securityToken
operator|.
name|getAttachedReference
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|=
name|securityToken
operator|.
name|getUnattachedReference
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|SecurityTokenReference
name|secRef
init|=
operator|new
name|SecurityTokenReference
argument_list|(
name|cloneElement
argument_list|(
name|ref
argument_list|)
argument_list|,
operator|new
name|BSPEnforcer
argument_list|()
argument_list|)
decl_stmt|;
name|sig
operator|.
name|setSecurityTokenReference
argument_list|(
name|secRef
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|type
init|=
name|attached
condition|?
name|WSConstants
operator|.
name|CUSTOM_SYMM_SIGNING
else|:
name|WSConstants
operator|.
name|CUSTOM_SYMM_SIGNING_DIRECT
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML2_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|sigTokId
decl_stmt|;
if|if
condition|(
name|attached
condition|)
block|{
name|sigTokId
operator|=
name|securityToken
operator|.
name|getWsuId
argument_list|()
expr_stmt|;
if|if
condition|(
name|sigTokId
operator|==
literal|null
condition|)
block|{
name|sigTokId
operator|=
name|securityToken
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sigTokId
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|sigTokId
operator|=
name|sigTokId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sigTokId
operator|=
name|securityToken
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
name|sig
operator|.
name|setCustomTokenId
argument_list|(
name|sigTokId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setKeyIdentifierType
argument_list|(
name|sig
argument_list|,
name|wrapper
argument_list|,
name|token
argument_list|)
expr_stmt|;
comment|// Find out do we also need to include the token as per the Inclusion requirement
if|if
condition|(
name|token
operator|instanceof
name|X509Token
operator|&&
name|token
operator|.
name|getIncludeTokenType
argument_list|()
operator|!=
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_NEVER
operator|&&
operator|(
name|sig
operator|.
name|getKeyIdentifierType
argument_list|()
operator|!=
name|WSConstants
operator|.
name|BST_DIRECT_REFERENCE
operator|&&
name|sig
operator|.
name|getKeyIdentifierType
argument_list|()
operator|!=
name|WSConstants
operator|.
name|KEY_VALUE
operator|)
condition|)
block|{
name|sig
operator|.
name|setIncludeSignatureToken
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|encryptCrypto
init|=
literal|false
decl_stmt|;
name|String
name|userNameKey
init|=
name|SecurityConstants
operator|.
name|SIGNATURE_USERNAME
decl_stmt|;
name|String
name|type
init|=
literal|"signature"
decl_stmt|;
if|if
condition|(
name|binding
operator|instanceof
name|SymmetricBinding
operator|&&
operator|!
name|endorse
condition|)
block|{
name|encryptCrypto
operator|=
operator|(
operator|(
name|SymmetricBinding
operator|)
name|binding
operator|)
operator|.
name|getProtectionToken
argument_list|()
operator|!=
literal|null
expr_stmt|;
name|userNameKey
operator|=
name|SecurityConstants
operator|.
name|ENCRYPT_USERNAME
expr_stmt|;
block|}
name|Crypto
name|crypto
init|=
name|encryptCrypto
condition|?
name|getEncryptionCrypto
argument_list|(
name|wrapper
argument_list|)
else|:
name|getSignatureCrypto
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
if|if
condition|(
name|endorse
operator|&&
name|crypto
operator|==
literal|null
operator|&&
name|binding
operator|instanceof
name|SymmetricBinding
condition|)
block|{
name|type
operator|=
literal|"encryption"
expr_stmt|;
name|userNameKey
operator|=
name|SecurityConstants
operator|.
name|ENCRYPT_USERNAME
expr_stmt|;
name|crypto
operator|=
name|getEncryptionCrypto
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|endorse
condition|)
block|{
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_CRYPTO
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
block|}
name|String
name|user
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|userNameKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|user
argument_list|)
condition|)
block|{
if|if
condition|(
name|crypto
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|user
operator|=
name|crypto
operator|.
name|getDefaultX509Identifier
argument_list|()
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"No configured "
operator|+
name|type
operator|+
literal|" username detected"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
name|e1
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"Security configuration could not be detected. "
operator|+
literal|"Potential cause: Make sure jaxws:client element with name "
operator|+
literal|"attribute value matching endpoint port is defined as well as a "
operator|+
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
operator|+
literal|" element within it."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|String
name|password
init|=
name|getPassword
argument_list|(
name|user
argument_list|,
name|token
argument_list|,
name|WSPasswordCallback
operator|.
name|SIGNATURE
argument_list|)
decl_stmt|;
name|sig
operator|.
name|setUserInfo
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSignatureAlgorithm
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAsymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|AlgorithmSuiteType
name|algType
init|=
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAlgorithmSuiteType
argument_list|()
decl_stmt|;
name|sig
operator|.
name|setDigestAlgo
argument_list|(
name|algType
operator|.
name|getDigest
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSigCanonicalization
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getC14n
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setWsConfig
argument_list|(
name|wssConfig
argument_list|)
expr_stmt|;
try|try
block|{
name|sig
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|,
name|crypto
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|sig
return|;
block|}
specifier|protected
name|void
name|doEndorsedSignatures
parameter_list|(
name|List
argument_list|<
name|SupportingToken
argument_list|>
name|tokenList
parameter_list|,
name|boolean
name|isTokenProtection
parameter_list|,
name|boolean
name|isSigProtect
parameter_list|)
block|{
for|for
control|(
name|SupportingToken
name|supportingToken
range|:
name|tokenList
control|)
block|{
name|Object
name|tempTok
init|=
name|supportingToken
operator|.
name|getTokenImplementation
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
init|=
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
name|WSEncryptionPart
name|sigPart
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|mainSigId
argument_list|)
decl_stmt|;
name|sigPart
operator|.
name|setElement
argument_list|(
name|bottomUpElement
argument_list|)
expr_stmt|;
name|sigParts
operator|.
name|add
argument_list|(
name|sigPart
argument_list|)
expr_stmt|;
if|if
condition|(
name|supportingToken
operator|.
name|getSignedParts
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WSEncryptionPart
name|signedPart
range|:
name|supportingToken
operator|.
name|getSignedParts
argument_list|()
control|)
block|{
name|sigParts
operator|.
name|add
argument_list|(
name|signedPart
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tempTok
operator|instanceof
name|WSSecSignature
condition|)
block|{
name|WSSecSignature
name|sig
init|=
operator|(
name|WSSecSignature
operator|)
name|tempTok
decl_stmt|;
if|if
condition|(
name|isTokenProtection
operator|&&
name|sig
operator|.
name|getBSTTokenId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|bstPart
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|sig
operator|.
name|getBSTTokenId
argument_list|()
argument_list|)
decl_stmt|;
name|bstPart
operator|.
name|setElement
argument_list|(
name|sig
operator|.
name|getBinarySecurityTokenElement
argument_list|()
argument_list|)
expr_stmt|;
name|sigParts
operator|.
name|add
argument_list|(
name|bstPart
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|List
argument_list|<
name|Reference
argument_list|>
name|referenceList
init|=
name|sig
operator|.
name|addReferencesToSign
argument_list|(
name|sigParts
argument_list|,
name|secHeader
argument_list|)
decl_stmt|;
name|sig
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|signatures
operator|.
name|add
argument_list|(
name|sig
operator|.
name|getSignatureValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSigProtect
condition|)
block|{
name|WSEncryptionPart
name|part
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|sig
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|encryptedTokensList
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
name|policyNotAsserted
argument_list|(
name|supportingToken
operator|.
name|getToken
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tempTok
operator|instanceof
name|WSSecurityTokenHolder
condition|)
block|{
name|SecurityToken
name|token
init|=
operator|(
operator|(
name|WSSecurityTokenHolder
operator|)
name|tempTok
operator|)
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|isTokenProtection
condition|)
block|{
name|sigParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|token
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|supportingToken
operator|.
name|getToken
argument_list|()
operator|.
name|getDerivedKeys
argument_list|()
operator|==
name|DerivedKeys
operator|.
name|RequireDerivedKeys
condition|)
block|{
name|doSymmSignatureDerived
argument_list|(
name|supportingToken
operator|.
name|getToken
argument_list|()
argument_list|,
name|token
argument_list|,
name|sigParts
argument_list|,
name|isTokenProtection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doSymmSignature
argument_list|(
name|supportingToken
operator|.
name|getToken
argument_list|()
argument_list|,
name|token
argument_list|,
name|sigParts
argument_list|,
name|isTokenProtection
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tempTok
operator|instanceof
name|WSSecUsernameToken
condition|)
block|{
name|WSSecUsernameToken
name|utBuilder
init|=
operator|(
name|WSSecUsernameToken
operator|)
name|tempTok
decl_stmt|;
name|String
name|id
init|=
name|utBuilder
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Date
name|created
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Date
name|expires
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|expires
operator|.
name|setTime
argument_list|(
name|created
operator|.
name|getTime
argument_list|()
operator|+
literal|300000
argument_list|)
expr_stmt|;
name|SecurityToken
name|secToken
init|=
operator|new
name|SecurityToken
argument_list|(
name|id
argument_list|,
name|utBuilder
operator|.
name|getUsernameTokenElement
argument_list|()
argument_list|,
name|created
argument_list|,
name|expires
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTokenProtection
condition|)
block|{
name|sigParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|secToken
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|byte
index|[]
name|secret
init|=
name|utBuilder
operator|.
name|getDerivedKey
argument_list|()
decl_stmt|;
name|secToken
operator|.
name|setSecret
argument_list|(
name|secret
argument_list|)
expr_stmt|;
if|if
condition|(
name|supportingToken
operator|.
name|getToken
argument_list|()
operator|.
name|getDerivedKeys
argument_list|()
operator|==
name|DerivedKeys
operator|.
name|RequireDerivedKeys
condition|)
block|{
name|doSymmSignatureDerived
argument_list|(
name|supportingToken
operator|.
name|getToken
argument_list|()
argument_list|,
name|secToken
argument_list|,
name|sigParts
argument_list|,
name|isTokenProtection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doSymmSignature
argument_list|(
name|supportingToken
operator|.
name|getToken
argument_list|()
argument_list|,
name|secToken
argument_list|,
name|sigParts
argument_list|,
name|isTokenProtection
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|doSymmSignatureDerived
parameter_list|(
name|AbstractToken
name|policyToken
parameter_list|,
name|SecurityToken
name|tok
parameter_list|,
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
parameter_list|,
name|boolean
name|isTokenProtection
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Document
name|doc
init|=
name|saaj
operator|.
name|getSOAPPart
argument_list|()
decl_stmt|;
name|WSSecDKSign
name|dkSign
init|=
operator|new
name|WSSecDKSign
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
comment|//Check whether it is security policy 1.2 and use the secure conversation accordingly
if|if
condition|(
name|policyToken
operator|.
name|getVersion
argument_list|()
operator|==
name|SPConstants
operator|.
name|SPVersion
operator|.
name|SP11
condition|)
block|{
name|dkSign
operator|.
name|setWscVersion
argument_list|(
name|ConversationConstants
operator|.
name|VERSION_05_02
argument_list|)
expr_stmt|;
block|}
comment|//Check for whether the token is attached in the message or not
name|boolean
name|attached
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isTokenRequired
argument_list|(
name|policyToken
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
condition|)
block|{
name|attached
operator|=
literal|true
expr_stmt|;
block|}
comment|// Setting the AttachedReference or the UnattachedReference according to the flag
name|Element
name|ref
decl_stmt|;
if|if
condition|(
name|attached
condition|)
block|{
name|ref
operator|=
name|tok
operator|.
name|getAttachedReference
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|=
name|tok
operator|.
name|getUnattachedReference
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|ref
operator|=
name|cloneElement
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|dkSign
operator|.
name|setExternalKey
argument_list|(
name|tok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isRequestor
argument_list|()
operator|&&
name|policyToken
operator|.
name|getDerivedKeys
argument_list|()
operator|==
name|DerivedKeys
operator|.
name|RequireDerivedKeys
condition|)
block|{
comment|// If the Encrypted key used to create the derived key is not
comment|// attached use key identifier as defined in WSS1.1 section
comment|// 7.7 Encrypted Key reference
name|SecurityTokenReference
name|tokenRef
init|=
operator|new
name|SecurityTokenReference
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|tok
operator|.
name|getSHA1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tokenRef
operator|.
name|setKeyIdentifierEncKeySHA1
argument_list|(
name|tok
operator|.
name|getSHA1
argument_list|()
argument_list|)
expr_stmt|;
name|tokenRef
operator|.
name|addTokenType
argument_list|(
name|WSConstants
operator|.
name|WSS_ENC_KEY_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
name|dkSign
operator|.
name|setExternalKey
argument_list|(
name|tok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|tokenRef
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dkSign
operator|.
name|setExternalKey
argument_list|(
name|tok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|tok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Set the algo info
name|dkSign
operator|.
name|setSignatureAlgorithm
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|AlgorithmSuiteType
name|algType
init|=
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAlgorithmSuiteType
argument_list|()
decl_stmt|;
name|dkSign
operator|.
name|setDerivedKeyLength
argument_list|(
name|algType
operator|.
name|getSignatureDerivedKeyLength
argument_list|()
operator|/
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
name|tok
operator|.
name|getSHA1
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//Set the value type of the reference
name|dkSign
operator|.
name|setCustomValueType
argument_list|(
name|WSConstants
operator|.
name|SOAPMESSAGE_NS11
operator|+
literal|"#"
operator|+
name|WSConstants
operator|.
name|ENC_KEY_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|policyToken
operator|instanceof
name|UsernameToken
condition|)
block|{
name|dkSign
operator|.
name|setCustomValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_USERNAME_TOKEN_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
name|dkSign
operator|.
name|prepare
argument_list|(
name|doc
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTokenProtection
condition|)
block|{
comment|//Hack to handle reference id issues
comment|//TODO Need a better fix
name|String
name|sigTokId
init|=
name|tok
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sigTokId
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|sigTokId
operator|=
name|sigTokId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|sigParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|sigTokId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dkSign
operator|.
name|setParts
argument_list|(
name|sigParts
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Reference
argument_list|>
name|referenceList
init|=
name|dkSign
operator|.
name|addReferencesToSign
argument_list|(
name|sigParts
argument_list|,
name|secHeader
argument_list|)
decl_stmt|;
comment|//Add elements to header
name|addSupportingElement
argument_list|(
name|dkSign
operator|.
name|getdktElement
argument_list|()
argument_list|)
expr_stmt|;
comment|//Do signature
name|dkSign
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|signatures
operator|.
name|add
argument_list|(
name|dkSign
operator|.
name|getSignatureValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doSymmSignature
parameter_list|(
name|AbstractToken
name|policyToken
parameter_list|,
name|SecurityToken
name|tok
parameter_list|,
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
parameter_list|,
name|boolean
name|isTokenProtection
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Document
name|doc
init|=
name|saaj
operator|.
name|getSOAPPart
argument_list|()
decl_stmt|;
name|WSSecSignature
name|sig
init|=
operator|new
name|WSSecSignature
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
comment|// If a EncryptedKeyToken is used, set the correct value type to
comment|// be used in the wsse:Reference in ds:KeyInfo
if|if
condition|(
name|policyToken
operator|instanceof
name|X509Token
condition|)
block|{
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
comment|// TODO Add support for SAML2 here
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|SOAPMESSAGE_NS11
operator|+
literal|"#"
operator|+
name|WSConstants
operator|.
name|ENC_KEY_VALUE_TYPE
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_SYMM_SIGNING
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//the tok has to be an EncryptedKey token
name|sig
operator|.
name|setEncrKeySha1value
argument_list|(
name|tok
operator|.
name|getSHA1
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|ENCRYPTED_KEY_SHA1_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|tokenType
init|=
name|tok
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML2_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenType
operator|!=
literal|null
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|policyToken
operator|instanceof
name|UsernameToken
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_USERNAME_TOKEN_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_SYMM_SIGNING
argument_list|)
expr_stmt|;
block|}
name|String
name|sigTokId
init|=
name|tok
operator|.
name|getWsuId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sigTokId
operator|==
literal|null
condition|)
block|{
name|sigTokId
operator|=
name|tok
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
comment|//Hack to handle reference id issues
comment|//TODO Need a better fix
if|if
condition|(
name|sigTokId
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|sigTokId
operator|=
name|sigTokId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|sig
operator|.
name|setCustomTokenId
argument_list|(
name|sigTokId
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSecretKey
argument_list|(
name|tok
operator|.
name|getSecret
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSignatureAlgorithm
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAsymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSignatureAlgorithm
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|prepare
argument_list|(
name|doc
argument_list|,
name|getSignatureCrypto
argument_list|(
literal|null
argument_list|)
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setParts
argument_list|(
name|sigParts
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Reference
argument_list|>
name|referenceList
init|=
name|sig
operator|.
name|addReferencesToSign
argument_list|(
name|sigParts
argument_list|,
name|secHeader
argument_list|)
decl_stmt|;
comment|//Do signature
name|sig
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|signatures
operator|.
name|add
argument_list|(
name|sig
operator|.
name|getSignatureValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addSupportingTokens
parameter_list|(
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigs
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|sgndSuppTokens
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SupportingToken
argument_list|>
name|sigSuppTokList
init|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndSuppTokens
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|endSuppTokens
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ENDORSING_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|endSuppTokList
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|endSuppTokens
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|sgndEndSuppTokens
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_ENDORSING_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|sgndEndSuppTokList
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndEndSuppTokens
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|sgndEncryptedSuppTokens
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SupportingToken
argument_list|>
name|sgndEncSuppTokList
init|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndEncryptedSuppTokens
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|endorsingEncryptedSuppTokens
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|endSuppTokList
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|endorsingEncryptedSuppTokens
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|sgndEndEncSuppTokens
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|sgndEndSuppTokList
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndEndEncSuppTokens
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|supportingToks
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|supportingToks
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|encryptedSupportingToks
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|encryptedSupportingToks
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//Setup signature parts
name|addSignatureParts
argument_list|(
name|sigSuppTokList
argument_list|,
name|sigs
argument_list|)
expr_stmt|;
name|addSignatureParts
argument_list|(
name|sgndEncSuppTokList
argument_list|,
name|sigs
argument_list|)
expr_stmt|;
name|addSignatureParts
argument_list|(
name|sgndEndSuppTokList
argument_list|,
name|sigs
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doEndorse
parameter_list|()
block|{
name|boolean
name|tokenProtect
init|=
literal|false
decl_stmt|;
name|boolean
name|sigProtect
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|binding
operator|instanceof
name|AsymmetricBinding
condition|)
block|{
name|tokenProtect
operator|=
operator|(
operator|(
name|AsymmetricBinding
operator|)
name|binding
operator|)
operator|.
name|isProtectTokens
argument_list|()
expr_stmt|;
name|sigProtect
operator|=
operator|(
operator|(
name|AsymmetricBinding
operator|)
name|binding
operator|)
operator|.
name|isEncryptSignature
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|binding
operator|instanceof
name|SymmetricBinding
condition|)
block|{
name|tokenProtect
operator|=
operator|(
operator|(
name|SymmetricBinding
operator|)
name|binding
operator|)
operator|.
name|isProtectTokens
argument_list|()
expr_stmt|;
name|sigProtect
operator|=
operator|(
operator|(
name|SymmetricBinding
operator|)
name|binding
operator|)
operator|.
name|isEncryptSignature
argument_list|()
expr_stmt|;
block|}
comment|// Do endorsed signatures
name|doEndorsedSignatures
argument_list|(
name|endSuppTokList
argument_list|,
name|tokenProtect
argument_list|,
name|sigProtect
argument_list|)
expr_stmt|;
comment|// Do signed endorsing signatures
name|doEndorsedSignatures
argument_list|(
name|sgndEndSuppTokList
argument_list|,
name|tokenProtect
argument_list|,
name|sigProtect
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addSignatureConfirmation
parameter_list|(
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
parameter_list|)
block|{
name|Wss10
name|wss10
init|=
name|getWss10
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|wss10
operator|instanceof
name|Wss11
operator|)
operator|||
operator|!
operator|(
operator|(
name|Wss11
operator|)
name|wss10
operator|)
operator|.
name|isRequireSignatureConfirmation
argument_list|()
condition|)
block|{
comment|//If we don't require sig confirmation simply go back :-)
return|return;
block|}
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|results
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
comment|/*          * loop over all results gathered by all handlers in the chain. For each          * handler result get the various actions. After that loop we have all          * signature results in the signatureActions list          */
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signatureActions
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|signedActions
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|signedActions
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|SIGN
argument_list|)
expr_stmt|;
name|signedActions
operator|.
name|add
argument_list|(
name|WSConstants
operator|.
name|UT_SIGN
argument_list|)
expr_stmt|;
for|for
control|(
name|WSHandlerResult
name|wshResult
range|:
name|results
control|)
block|{
name|signatureActions
operator|.
name|addAll
argument_list|(
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|wshResult
operator|.
name|getResults
argument_list|()
argument_list|,
name|signedActions
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sigConfList
operator|=
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
expr_stmt|;
comment|// prepare a SignatureConfirmation token
name|WSSecSignatureConfirmation
name|wsc
init|=
operator|new
name|WSSecSignatureConfirmation
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
if|if
condition|(
name|signatureActions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|wsr
range|:
name|signatureActions
control|)
block|{
name|byte
index|[]
name|sigVal
init|=
operator|(
name|byte
index|[]
operator|)
name|wsr
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SIGNATURE_VALUE
argument_list|)
decl_stmt|;
name|wsc
operator|.
name|setSignatureValue
argument_list|(
name|sigVal
argument_list|)
expr_stmt|;
name|wsc
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|addSupportingElement
argument_list|(
name|wsc
operator|.
name|getSignatureConfirmationElement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sigParts
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|part
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|wsc
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|wsc
operator|.
name|getSignatureConfirmationElement
argument_list|()
argument_list|)
expr_stmt|;
name|sigParts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|sigConfList
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//No Sig value
name|wsc
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|addSupportingElement
argument_list|(
name|wsc
operator|.
name|getSignatureConfirmationElement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sigParts
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|part
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|wsc
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|wsc
operator|.
name|getSignatureConfirmationElement
argument_list|()
argument_list|)
expr_stmt|;
name|sigParts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|sigConfList
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|wss10
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_SIGNATURE_CONFIRMATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Processes the parts to be signed and reconfigures those parts that have      * already been encrypted.      *       * @param encryptedParts      *            the parts that have been encrypted      * @param signedParts      *            the parts that are to be signed      *       * @throws IllegalArgumentException      *             if an element in {@code signedParts} contains a {@code      *             WSEncryptionPart} with a {@code null} {@code id} value      *             and the {@code WSEncryptionPart} {@code name} value is not      *             "Token"      */
specifier|public
name|void
name|handleEncryptedSignedHeaders
parameter_list|(
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|encryptedParts
parameter_list|,
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|signedParts
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|signedEncryptedParts
init|=
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WSEncryptionPart
name|encryptedPart
range|:
name|encryptedParts
control|)
block|{
specifier|final
name|Iterator
argument_list|<
name|WSEncryptionPart
argument_list|>
name|signedPartsIt
init|=
name|signedParts
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|signedPartsIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|WSEncryptionPart
name|signedPart
init|=
name|signedPartsIt
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Everything has to be ID based except for the case of a part
comment|// indicating "Token" as the element name.  This name is a flag
comment|// for WSS4J to sign the initiator token used in the signature.
comment|// Since the encryption happened before the signature creation,
comment|// this element can't possibly be encrypted so we can safely ignore
comment|// if it were ever to be set before this method is called.
if|if
condition|(
name|signedPart
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|&&
operator|!
literal|"Token"
operator|.
name|equals
argument_list|(
name|signedPart
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"WSEncryptionPart must be ID based but no id was found."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|encryptedPart
operator|.
name|getEncModifier
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Element"
argument_list|)
operator|&&
name|signedPart
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|encryptedPart
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|// We are to sign something that has already been encrypted.
comment|// We need to preserve the original aspects of signedPart but
comment|// change the ID to the encrypted ID.
name|signedPartsIt
operator|.
name|remove
argument_list|()
expr_stmt|;
name|WSEncryptionPart
name|part
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|encryptedPart
operator|.
name|getEncId
argument_list|()
argument_list|,
name|encryptedPart
operator|.
name|getEncModifier
argument_list|()
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|encryptedPart
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|signedEncryptedParts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|signedParts
operator|.
name|addAll
argument_list|(
name|signedEncryptedParts
argument_list|)
expr_stmt|;
block|}
comment|/**      * Convert a DOM Element into a WSEncryptionPart, adding a (wsu:)Id if there is not      * one already.      * @param element The DOM Element to convert      * @return The WSEncryptionPart representing the DOM Element argument      */
specifier|public
name|WSEncryptionPart
name|convertToEncryptionPart
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|String
name|id
init|=
name|addWsuIdToElement
argument_list|(
name|element
argument_list|)
decl_stmt|;
name|WSEncryptionPart
name|part
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
name|element
argument_list|)
expr_stmt|;
return|return
name|part
return|;
block|}
specifier|static
class|class
name|SupportingToken
block|{
specifier|private
specifier|final
name|AbstractToken
name|token
decl_stmt|;
specifier|private
specifier|final
name|Object
name|tokenImplementation
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|signedParts
decl_stmt|;
specifier|public
name|SupportingToken
parameter_list|(
name|AbstractToken
name|token
parameter_list|,
name|Object
name|tokenImplementation
parameter_list|,
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|signedParts
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
name|this
operator|.
name|tokenImplementation
operator|=
name|tokenImplementation
expr_stmt|;
name|this
operator|.
name|signedParts
operator|=
name|signedParts
expr_stmt|;
block|}
specifier|public
name|AbstractToken
name|getToken
parameter_list|()
block|{
return|return
name|token
return|;
block|}
specifier|public
name|Object
name|getTokenImplementation
parameter_list|()
block|{
return|return
name|tokenImplementation
return|;
block|}
specifier|public
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|getSignedParts
parameter_list|()
block|{
return|return
name|signedParts
return|;
block|}
block|}
block|}
end_class

end_unit

