begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyhandlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|MapNamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|AsymmetricBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|IssuedToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SecureConversationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SignedEncryptedElements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SignedEncryptedParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SupportingToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SymmetricBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|TokenWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Wss10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Wss11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|X509Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|MemoryTokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|util
operator|.
name|ClassUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSEncryptionPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSUsernameTokenPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|components
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|components
operator|.
name|crypto
operator|.
name|CryptoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|conversation
operator|.
name|ConversationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|conversation
operator|.
name|ConversationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecDKSign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecEncryptedKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecSignatureConfirmation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecUsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|SecurityTokenReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractBindingBuilder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractBindingBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|SPConstants
operator|.
name|ProtectionOrder
name|protectionOrder
init|=
name|SPConstants
operator|.
name|ProtectionOrder
operator|.
name|SignBeforeEncrypting
decl_stmt|;
specifier|protected
name|SOAPMessage
name|saaj
decl_stmt|;
specifier|protected
name|WSSecHeader
name|secHeader
decl_stmt|;
specifier|protected
name|AssertionInfoMap
name|aim
decl_stmt|;
specifier|protected
name|Binding
name|binding
decl_stmt|;
specifier|protected
name|SoapMessage
name|message
decl_stmt|;
specifier|protected
name|WSSecTimestamp
name|timestampEl
decl_stmt|;
specifier|protected
name|String
name|mainSigId
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|encryptedTokensIdList
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|endEncSuppTokMap
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|endSuppTokMap
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|sgndEndEncSuppTokMap
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|sgndEndSuppTokMap
decl_stmt|;
specifier|protected
name|Vector
argument_list|<
name|byte
index|[]
argument_list|>
name|signatures
init|=
operator|new
name|Vector
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Element
name|lastSupportingTokenElement
decl_stmt|;
name|Element
name|lastEncryptedKeyElement
decl_stmt|;
name|Element
name|lastDerivedKeyElement
decl_stmt|;
name|Element
name|bottomUpElement
decl_stmt|;
name|Element
name|topDownElement
decl_stmt|;
specifier|public
name|AbstractBindingBuilder
parameter_list|(
name|Binding
name|binding
parameter_list|,
name|SOAPMessage
name|saaj
parameter_list|,
name|WSSecHeader
name|secHeader
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
name|this
operator|.
name|binding
operator|=
name|binding
expr_stmt|;
name|this
operator|.
name|aim
operator|=
name|aim
expr_stmt|;
name|this
operator|.
name|secHeader
operator|=
name|secHeader
expr_stmt|;
name|this
operator|.
name|saaj
operator|=
name|saaj
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SEND_SIGV
argument_list|,
name|signatures
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|insertAfter
parameter_list|(
name|Element
name|child
parameter_list|,
name|Element
name|sib
parameter_list|)
block|{
if|if
condition|(
name|sib
operator|.
name|getNextSibling
argument_list|()
operator|==
literal|null
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|child
argument_list|,
name|sib
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addDerivedKeyElement
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
if|if
condition|(
name|lastDerivedKeyElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|lastDerivedKeyElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastEncryptedKeyElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|lastEncryptedKeyElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topDownElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|topDownElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|el
argument_list|,
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
name|lastEncryptedKeyElement
operator|=
name|el
expr_stmt|;
block|}
specifier|protected
name|void
name|addEncyptedKeyElement
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
if|if
condition|(
name|lastEncryptedKeyElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|lastEncryptedKeyElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastDerivedKeyElement
operator|!=
literal|null
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|el
argument_list|,
name|lastDerivedKeyElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topDownElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|topDownElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|el
argument_list|,
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
name|lastEncryptedKeyElement
operator|=
name|el
expr_stmt|;
block|}
specifier|protected
name|void
name|addSupportingElement
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
if|if
condition|(
name|lastSupportingTokenElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|lastSupportingTokenElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastDerivedKeyElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|lastDerivedKeyElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lastEncryptedKeyElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|lastEncryptedKeyElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|topDownElement
operator|!=
literal|null
condition|)
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|topDownElement
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bottomUpElement
operator|!=
literal|null
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|el
argument_list|,
name|bottomUpElement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
name|lastSupportingTokenElement
operator|=
name|el
expr_stmt|;
block|}
specifier|protected
name|void
name|insertBeforeBottomUp
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
if|if
condition|(
name|bottomUpElement
operator|==
literal|null
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|el
argument_list|,
name|bottomUpElement
argument_list|)
expr_stmt|;
block|}
name|bottomUpElement
operator|=
name|el
expr_stmt|;
block|}
specifier|protected
name|void
name|addTopDownElement
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
if|if
condition|(
name|topDownElement
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
condition|)
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|el
argument_list|,
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|insertAfter
argument_list|(
name|el
argument_list|,
name|topDownElement
argument_list|)
expr_stmt|;
block|}
name|topDownElement
operator|=
name|el
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isRequestor
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|message
operator|.
name|containsKey
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|void
name|policyNotAsserted
parameter_list|(
name|PolicyAssertion
name|assertion
parameter_list|,
name|Exception
name|reason
parameter_list|)
block|{
if|if
condition|(
name|assertion
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"Not asserting "
operator|+
name|assertion
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|reason
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
decl_stmt|;
name|ais
operator|=
name|aim
operator|.
name|get
argument_list|(
name|assertion
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getAssertion
argument_list|()
operator|==
name|assertion
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|reason
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
throw|throw
operator|new
name|PolicyException
argument_list|(
name|reason
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|policyNotAsserted
parameter_list|(
name|PolicyAssertion
name|assertion
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
if|if
condition|(
name|assertion
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"Not asserting "
operator|+
name|assertion
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|reason
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
decl_stmt|;
name|ais
operator|=
name|aim
operator|.
name|get
argument_list|(
name|assertion
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getAssertion
argument_list|()
operator|==
name|assertion
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
block|}
throw|throw
operator|new
name|PolicyException
argument_list|(
operator|new
name|Message
argument_list|(
name|reason
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|policyAsserted
parameter_list|(
name|PolicyAssertion
name|assertion
parameter_list|)
block|{
if|if
condition|(
name|assertion
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"Asserting "
operator|+
name|assertion
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
decl_stmt|;
name|ais
operator|=
name|aim
operator|.
name|get
argument_list|(
name|assertion
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getAssertion
argument_list|()
operator|==
name|assertion
condition|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|policyAsserted
parameter_list|(
name|QName
name|n
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
operator|&&
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|PolicyAssertion
name|findPolicy
parameter_list|(
name|QName
name|n
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
operator|&&
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ais
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAssertion
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|PolicyAssertion
name|findAndAssertPolicy
parameter_list|(
name|QName
name|n
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
operator|&&
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|AssertionInfo
name|ai
init|=
name|ais
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|ai
operator|.
name|getAssertion
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
specifier|final
name|TokenStore
name|getTokenStore
parameter_list|()
block|{
name|TokenStore
name|tokenStore
init|=
operator|(
name|TokenStore
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|TokenStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenStore
operator|==
literal|null
condition|)
block|{
name|tokenStore
operator|=
operator|new
name|MemoryTokenStore
argument_list|()
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|setProperty
argument_list|(
name|TokenStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|tokenStore
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenStore
return|;
block|}
specifier|protected
name|WSSecTimestamp
name|createTimestamp
parameter_list|()
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
decl_stmt|;
name|ais
operator|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|INCLUDE_TIMESTAMP
argument_list|)
expr_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|timestampEl
operator|=
operator|new
name|WSSecTimestamp
argument_list|()
expr_stmt|;
name|timestampEl
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|timestampEl
return|;
block|}
specifier|protected
name|WSSecTimestamp
name|handleLayout
parameter_list|(
name|WSSecTimestamp
name|timestamp
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
decl_stmt|;
name|ais
operator|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|LAYOUT
argument_list|)
expr_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|Layout
name|layout
init|=
operator|(
name|Layout
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|SPConstants
operator|.
name|Layout
operator|.
name|LaxTimestampLast
operator|==
name|layout
operator|.
name|getValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|SPConstants
operator|.
name|Layout
operator|.
name|LaxTimestampLast
operator|+
literal|" requires a timestamp"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Element
name|el
init|=
name|timestamp
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
if|if
condition|(
name|bottomUpElement
operator|==
literal|null
condition|)
block|{
name|bottomUpElement
operator|=
name|el
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|SPConstants
operator|.
name|Layout
operator|.
name|LaxTimestampFirst
operator|==
name|layout
operator|.
name|getValue
argument_list|()
condition|)
block|{
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|SPConstants
operator|.
name|Layout
operator|.
name|LaxTimestampLast
operator|+
literal|" requires a timestamp"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addTopDownElement
argument_list|(
name|timestampEl
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|timestampEl
operator|!=
literal|null
condition|)
block|{
name|addTopDownElement
argument_list|(
name|timestampEl
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|timestampEl
operator|!=
literal|null
condition|)
block|{
name|addTopDownElement
argument_list|(
name|timestampEl
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|timestamp
return|;
block|}
specifier|protected
name|void
name|assertSupportingTokens
parameter_list|(
name|PolicyAssertion
name|suppTokens
parameter_list|)
block|{
if|if
condition|(
name|suppTokens
operator|instanceof
name|SupportingToken
condition|)
block|{
for|for
control|(
name|Token
name|token
range|:
operator|(
operator|(
name|SupportingToken
operator|)
name|suppTokens
operator|)
operator|.
name|getTokens
argument_list|()
control|)
block|{
name|this
operator|.
name|policyAsserted
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|handleSupportingTokens
parameter_list|(
name|SupportingToken
name|suppTokens
parameter_list|,
name|boolean
name|endorse
parameter_list|)
block|{
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|suppTokens
operator|==
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
for|for
control|(
name|Token
name|token
range|:
name|suppTokens
operator|.
name|getTokens
argument_list|()
control|)
block|{
if|if
condition|(
name|token
operator|instanceof
name|UsernameToken
condition|)
block|{
name|WSSecUsernameToken
name|utBuilder
init|=
name|addUsernameToken
argument_list|(
operator|(
name|UsernameToken
operator|)
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|utBuilder
operator|!=
literal|null
condition|)
block|{
name|utBuilder
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|addSupportingElement
argument_list|(
name|utBuilder
operator|.
name|getUsernameTokenElement
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|utBuilder
argument_list|)
expr_stmt|;
comment|//WebLogic and WCF always encrypt these
comment|//See:  http://e-docs.bea.com/wls/docs103/webserv_intro/interop.html
name|encryptedTokensIdList
operator|.
name|add
argument_list|(
name|utBuilder
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|IssuedToken
operator|&&
name|isRequestor
argument_list|()
condition|)
block|{
comment|//ws-trust stuff.......
name|SecurityToken
name|secToken
init|=
name|getSecurityToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|secToken
operator|==
literal|null
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"Could not find IssuedToken"
argument_list|)
expr_stmt|;
block|}
name|addSupportingElement
argument_list|(
name|cloneElement
argument_list|(
name|secToken
operator|.
name|getToken
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|suppTokens
operator|.
name|isEncryptedToken
argument_list|()
condition|)
block|{
name|this
operator|.
name|encryptedTokensIdList
operator|.
name|add
argument_list|(
name|secToken
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Add the extracted token
name|ret
operator|.
name|put
argument_list|(
name|token
argument_list|,
operator|new
name|WSSecurityTokenHolder
argument_list|(
name|secToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|X509Token
condition|)
block|{
comment|//We have to use a cert
comment|//Prepare X509 signature
name|WSSecSignature
name|sig
init|=
name|getSignatureBuider
argument_list|(
name|suppTokens
argument_list|,
name|token
argument_list|,
name|endorse
argument_list|)
decl_stmt|;
name|Element
name|bstElem
init|=
name|sig
operator|.
name|getBinarySecurityTokenElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|bstElem
operator|!=
literal|null
condition|)
block|{
name|sig
operator|.
name|prependBSTElementToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suppTokens
operator|.
name|isEncryptedToken
argument_list|()
condition|)
block|{
name|encryptedTokensIdList
operator|.
name|add
argument_list|(
name|sig
operator|.
name|getBSTTokenId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|sig
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|Element
name|cloneElement
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
return|return
operator|(
name|Element
operator|)
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|importNode
argument_list|(
name|el
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|SecurityToken
name|getSecurityToken
parameter_list|()
block|{
name|SecurityToken
name|st
init|=
operator|(
name|SecurityToken
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|TRUST_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|==
literal|null
condition|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|TRUST_TOKEN_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|st
operator|=
name|getTokenStore
argument_list|()
operator|.
name|getToken
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|getTokenStore
argument_list|()
operator|.
name|add
argument_list|(
name|st
argument_list|)
expr_stmt|;
return|return
name|st
return|;
block|}
specifier|protected
name|void
name|addSignatureParts
parameter_list|(
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|tokenMap
parameter_list|,
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|entry
range|:
name|tokenMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|tempTok
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|WSEncryptionPart
name|part
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tempTok
operator|instanceof
name|WSSecSignature
condition|)
block|{
name|WSSecSignature
name|tempSig
init|=
operator|(
name|WSSecSignature
operator|)
name|tempTok
decl_stmt|;
if|if
condition|(
name|tempSig
operator|.
name|getBSTTokenId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|part
operator|=
operator|new
name|WSEncryptionPart
argument_list|(
name|tempSig
operator|.
name|getBSTTokenId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tempTok
operator|instanceof
name|WSSecUsernameToken
condition|)
block|{
name|WSSecUsernameToken
name|unt
init|=
operator|(
name|WSSecUsernameToken
operator|)
name|tempTok
decl_stmt|;
name|part
operator|=
operator|new
name|WSEncryptionPart
argument_list|(
name|unt
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|policyNotAsserted
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"UnsupportedTokenInSupportingToken: "
operator|+
name|tempTok
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|sigParts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|WSSecUsernameToken
name|addUsernameToken
parameter_list|(
name|UsernameToken
name|token
parameter_list|)
block|{
name|AssertionInfo
name|info
init|=
literal|null
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|token
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getAssertion
argument_list|()
operator|==
name|token
condition|)
block|{
name|info
operator|=
name|ai
expr_stmt|;
if|if
condition|(
operator|!
name|isRequestor
argument_list|()
condition|)
block|{
name|info
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
name|String
name|userName
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|USERNAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|userName
argument_list|)
condition|)
block|{
comment|// If NoPassword property is set we don't need to set the password
if|if
condition|(
name|token
operator|.
name|isNoPassword
argument_list|()
condition|)
block|{
name|WSSecUsernameToken
name|utBuilder
init|=
operator|new
name|WSSecUsernameToken
argument_list|()
decl_stmt|;
name|utBuilder
operator|.
name|setUserInfo
argument_list|(
name|userName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|utBuilder
operator|.
name|setPasswordType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|info
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|utBuilder
return|;
block|}
name|String
name|password
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|PASSWORD
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|password
argument_list|)
condition|)
block|{
name|password
operator|=
name|getPassword
argument_list|(
name|userName
argument_list|,
name|token
argument_list|,
name|WSPasswordCallback
operator|.
name|USERNAME_TOKEN
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|password
argument_list|)
condition|)
block|{
comment|//If the password is available then build the token
name|WSSecUsernameToken
name|utBuilder
init|=
operator|new
name|WSSecUsernameToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|isHashPassword
argument_list|()
condition|)
block|{
name|utBuilder
operator|.
name|setPasswordType
argument_list|(
name|WSConstants
operator|.
name|PASSWORD_DIGEST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|utBuilder
operator|.
name|setPasswordType
argument_list|(
name|WSConstants
operator|.
name|PASSWORD_TEXT
argument_list|)
expr_stmt|;
block|}
name|utBuilder
operator|.
name|setUserInfo
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|info
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|utBuilder
return|;
block|}
else|else
block|{
name|info
operator|.
name|setNotAsserted
argument_list|(
literal|"No password available"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|info
operator|.
name|setNotAsserted
argument_list|(
literal|"No username available"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|(
name|String
name|userName
parameter_list|,
name|PolicyAssertion
name|info
parameter_list|,
name|int
name|type
parameter_list|)
block|{
comment|//Then try to get the password from the given callback handler
name|Object
name|o
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|)
decl_stmt|;
name|CallbackHandler
name|handler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|CallbackHandler
condition|)
block|{
name|handler
operator|=
operator|(
name|CallbackHandler
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
name|handler
operator|=
operator|(
name|CallbackHandler
operator|)
name|ClassUtils
operator|.
name|getNewInstance
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handler
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|info
argument_list|,
literal|"No callback handler and no password available"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|WSPasswordCallback
index|[]
name|cb
init|=
block|{
operator|new
name|WSPasswordCallback
argument_list|(
name|userName
argument_list|,
name|type
argument_list|)
block|}
decl_stmt|;
try|try
block|{
name|handler
operator|.
name|handle
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|policyNotAsserted
argument_list|(
name|info
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|//get the password
return|return
name|cb
index|[
literal|0
index|]
operator|.
name|getPassword
argument_list|()
return|;
block|}
specifier|public
name|String
name|addWsuIdToElement
parameter_list|(
name|Element
name|elem
parameter_list|)
block|{
name|String
name|id
decl_stmt|;
comment|//first try to get the Id attr
name|Attr
name|idAttr
init|=
name|elem
operator|.
name|getAttributeNode
argument_list|(
literal|"Id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|idAttr
operator|==
literal|null
condition|)
block|{
comment|//then try the wsu:Id value
name|idAttr
operator|=
name|elem
operator|.
name|getAttributeNodeNS
argument_list|(
name|PolicyConstants
operator|.
name|WSU_NAMESPACE_URI
argument_list|,
literal|"Id"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idAttr
operator|!=
literal|null
condition|)
block|{
name|id
operator|=
name|idAttr
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//Add an id
name|id
operator|=
literal|"Id-"
operator|+
name|elem
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|String
name|pfx
init|=
name|elem
operator|.
name|lookupPrefix
argument_list|(
name|PolicyConstants
operator|.
name|WSU_NAMESPACE_URI
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|pfx
argument_list|)
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|pfx
argument_list|)
condition|)
block|{
name|pfx
operator|=
literal|"wsu"
operator|+
operator|(
name|cnt
operator|==
literal|0
condition|?
literal|""
else|:
name|cnt
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|elem
operator|.
name|lookupNamespaceURI
argument_list|(
name|pfx
argument_list|)
argument_list|)
condition|)
block|{
name|pfx
operator|=
literal|null
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|idAttr
operator|=
name|elem
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createAttributeNS
argument_list|(
name|WSDLConstants
operator|.
name|NS_XMLNS
argument_list|,
literal|"xmlns:"
operator|+
name|pfx
argument_list|)
expr_stmt|;
name|idAttr
operator|.
name|setValue
argument_list|(
name|PolicyConstants
operator|.
name|WSU_NAMESPACE_URI
argument_list|)
expr_stmt|;
name|elem
operator|.
name|setAttributeNodeNS
argument_list|(
name|idAttr
argument_list|)
expr_stmt|;
block|}
name|idAttr
operator|=
name|elem
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createAttributeNS
argument_list|(
name|PolicyConstants
operator|.
name|WSU_NAMESPACE_URI
argument_list|,
name|pfx
operator|+
literal|":Id"
argument_list|)
expr_stmt|;
name|idAttr
operator|.
name|setValue
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|elem
operator|.
name|setAttributeNodeNS
argument_list|(
name|idAttr
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
specifier|public
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|getEncryptedParts
parameter_list|()
throws|throws
name|SOAPException
block|{
name|boolean
name|isBody
init|=
literal|false
decl_stmt|;
name|SignedEncryptedParts
name|parts
init|=
literal|null
decl_stmt|;
name|SignedEncryptedElements
name|elements
init|=
literal|null
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|parts
operator|=
operator|(
name|SignedEncryptedParts
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|ais
operator|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|)
expr_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|elements
operator|=
operator|(
name|SignedEncryptedElements
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|signedParts
init|=
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parts
operator|!=
literal|null
condition|)
block|{
name|isBody
operator|=
name|parts
operator|.
name|isBody
argument_list|()
expr_stmt|;
for|for
control|(
name|Header
name|head
range|:
name|parts
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|WSEncryptionPart
name|wep
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|head
operator|.
name|getName
argument_list|()
argument_list|,
name|head
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"Content"
argument_list|)
decl_stmt|;
name|signedParts
operator|.
name|add
argument_list|(
name|wep
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getPartsAndElements
argument_list|(
literal|false
argument_list|,
name|isBody
argument_list|,
name|signedParts
argument_list|,
name|elements
operator|==
literal|null
condition|?
literal|null
else|:
name|elements
operator|.
name|getXPathExpressions
argument_list|()
argument_list|,
name|elements
operator|==
literal|null
condition|?
literal|null
else|:
name|elements
operator|.
name|getDeclaredNamespaces
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|getSignedParts
parameter_list|()
throws|throws
name|SOAPException
block|{
name|boolean
name|isSignBody
init|=
literal|false
decl_stmt|;
name|SignedEncryptedParts
name|parts
init|=
literal|null
decl_stmt|;
name|SignedEncryptedElements
name|elements
init|=
literal|null
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|parts
operator|=
operator|(
name|SignedEncryptedParts
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|ais
operator|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_ELEMENTS
argument_list|)
expr_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|elements
operator|=
operator|(
name|SignedEncryptedElements
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|signedParts
init|=
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parts
operator|!=
literal|null
condition|)
block|{
name|isSignBody
operator|=
name|parts
operator|.
name|isBody
argument_list|()
expr_stmt|;
for|for
control|(
name|Header
name|head
range|:
name|parts
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|WSEncryptionPart
name|wep
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|head
operator|.
name|getName
argument_list|()
argument_list|,
name|head
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"Content"
argument_list|)
decl_stmt|;
name|signedParts
operator|.
name|add
argument_list|(
name|wep
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getPartsAndElements
argument_list|(
literal|true
argument_list|,
name|isSignBody
argument_list|,
name|signedParts
argument_list|,
name|elements
operator|==
literal|null
condition|?
literal|null
else|:
name|elements
operator|.
name|getXPathExpressions
argument_list|()
argument_list|,
name|elements
operator|==
literal|null
condition|?
literal|null
else|:
name|elements
operator|.
name|getDeclaredNamespaces
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|getPartsAndElements
parameter_list|(
name|boolean
name|sign
parameter_list|,
name|boolean
name|includeBody
parameter_list|,
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|parts
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|xpaths
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|SOAPException
block|{
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|result
init|=
operator|new
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|found
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeBody
condition|)
block|{
if|if
condition|(
name|sign
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|addWsuIdToElement
argument_list|(
name|saaj
operator|.
name|getSOAPBody
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|WSConstants
operator|.
name|PART_TYPE_BODY
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|addWsuIdToElement
argument_list|(
name|saaj
operator|.
name|getSOAPBody
argument_list|()
argument_list|)
argument_list|,
literal|"Content"
argument_list|,
name|WSConstants
operator|.
name|PART_TYPE_BODY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|found
operator|.
name|add
argument_list|(
name|saaj
operator|.
name|getSOAPBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SOAPHeader
name|header
init|=
name|saaj
operator|.
name|getSOAPHeader
argument_list|()
decl_stmt|;
for|for
control|(
name|WSEncryptionPart
name|part
range|:
name|parts
control|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|//an entire namespace
name|Element
name|el
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|header
argument_list|)
decl_stmt|;
while|while
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|part
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
operator|!
name|found
operator|.
name|contains
argument_list|(
name|el
argument_list|)
condition|)
block|{
name|found
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
if|if
condition|(
name|sign
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|part
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"Content"
argument_list|,
name|WSConstants
operator|.
name|PART_TYPE_HEADER
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|WSEncryptionPart
name|encryptedHeader
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|part
operator|.
name|getNamespace
argument_list|()
argument_list|,
literal|"Element"
argument_list|,
name|WSConstants
operator|.
name|PART_TYPE_HEADER
argument_list|)
decl_stmt|;
name|String
name|wsuId
init|=
name|el
operator|.
name|getAttributeNS
argument_list|(
name|WSConstants
operator|.
name|WSU_NS
argument_list|,
literal|"Id"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|wsuId
argument_list|)
condition|)
block|{
name|encryptedHeader
operator|.
name|setEncId
argument_list|(
name|wsuId
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|encryptedHeader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|el
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|el
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|header
argument_list|)
decl_stmt|;
while|while
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|part
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
operator|!
name|found
operator|.
name|contains
argument_list|(
name|el
argument_list|)
condition|)
block|{
name|found
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|part
operator|.
name|setType
argument_list|(
name|WSConstants
operator|.
name|PART_TYPE_HEADER
argument_list|)
expr_stmt|;
name|String
name|wsuId
init|=
name|el
operator|.
name|getAttributeNS
argument_list|(
name|WSConstants
operator|.
name|WSU_NS
argument_list|,
literal|"Id"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|wsuId
argument_list|)
condition|)
block|{
name|part
operator|.
name|setEncId
argument_list|(
name|wsuId
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|el
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|xpaths
operator|!=
literal|null
operator|&&
operator|!
name|xpaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|XPathFactory
name|factory
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|expression
range|:
name|xpaths
control|)
block|{
name|XPath
name|xpath
init|=
name|factory
operator|.
name|newXPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespaces
operator|!=
literal|null
condition|)
block|{
name|xpath
operator|.
name|setNamespaceContext
argument_list|(
operator|new
name|MapNamespaceContext
argument_list|(
name|namespaces
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|NodeList
name|list
init|=
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
name|expression
argument_list|,
name|saaj
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getEnvelope
argument_list|()
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|list
operator|.
name|getLength
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|Element
name|el
init|=
operator|(
name|Element
operator|)
name|list
operator|.
name|item
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|sign
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"Content"
argument_list|,
name|WSConstants
operator|.
name|PART_TYPE_ELEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|WSEncryptionPart
name|encryptedElem
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"Element"
argument_list|,
name|WSConstants
operator|.
name|PART_TYPE_ELEMENT
argument_list|)
decl_stmt|;
name|String
name|wsuId
init|=
name|el
operator|.
name|getAttributeNS
argument_list|(
name|WSConstants
operator|.
name|WSU_NS
argument_list|,
literal|"Id"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|wsuId
argument_list|)
condition|)
block|{
name|encryptedElem
operator|.
name|setEncId
argument_list|(
name|wsuId
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|encryptedElem
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
comment|//REVISIT!!!!
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|WSSecEncryptedKey
name|getEncryptedKeyBuilder
parameter_list|(
name|TokenWrapper
name|wrapper
parameter_list|,
name|Token
name|token
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|WSSecEncryptedKey
name|encrKey
init|=
operator|new
name|WSSecEncryptedKey
argument_list|()
decl_stmt|;
name|Crypto
name|crypto
init|=
name|getEncryptionCrypto
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_CRYPTO
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
name|setKeyIdentifierType
argument_list|(
name|encrKey
argument_list|,
name|wrapper
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|setEncryptionUser
argument_list|(
name|encrKey
argument_list|,
name|wrapper
argument_list|,
literal|false
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
name|encrKey
operator|.
name|setKeySize
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getMaximumSymmetricKeyLength
argument_list|()
argument_list|)
expr_stmt|;
name|encrKey
operator|.
name|setKeyEncAlgo
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAsymmetricKeyWrap
argument_list|()
argument_list|)
expr_stmt|;
name|encrKey
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
return|return
name|encrKey
return|;
block|}
specifier|public
name|Crypto
name|getSignatureCrypto
parameter_list|(
name|TokenWrapper
name|wrapper
parameter_list|)
block|{
return|return
name|getCrypto
argument_list|(
name|wrapper
argument_list|,
name|SecurityConstants
operator|.
name|SIGNATURE_CRYPTO
argument_list|,
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|)
return|;
block|}
specifier|public
name|Crypto
name|getEncryptionCrypto
parameter_list|(
name|TokenWrapper
name|wrapper
parameter_list|)
block|{
return|return
name|getCrypto
argument_list|(
name|wrapper
argument_list|,
name|SecurityConstants
operator|.
name|ENCRYPT_CRYPTO
argument_list|,
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|)
return|;
block|}
specifier|public
name|Crypto
name|getCrypto
parameter_list|(
name|TokenWrapper
name|wrapper
parameter_list|,
name|String
name|cryptoKey
parameter_list|,
name|String
name|propKey
parameter_list|)
block|{
name|Crypto
name|crypto
init|=
operator|(
name|Crypto
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|cryptoKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|crypto
operator|!=
literal|null
condition|)
block|{
return|return
name|crypto
return|;
block|}
name|Object
name|o
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|propKey
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Properties
condition|)
block|{
name|properties
operator|=
operator|(
name|Properties
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|ResourceManager
name|rm
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
operator|.
name|getExtension
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|rm
operator|.
name|resolveResource
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|URL
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|url
operator|=
name|ClassLoaderUtils
operator|.
name|getResource
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|policyNotAsserted
argument_list|(
name|wrapper
argument_list|,
literal|"Could not find properties file "
operator|+
name|o
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|policyNotAsserted
argument_list|(
name|wrapper
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|URL
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
try|try
block|{
name|properties
operator|.
name|load
argument_list|(
operator|(
operator|(
name|URL
operator|)
name|o
operator|)
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|policyNotAsserted
argument_list|(
name|wrapper
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
return|return
name|CryptoFactory
operator|.
name|getInstance
argument_list|(
name|properties
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setKeyIdentifierType
parameter_list|(
name|WSSecBase
name|secBase
parameter_list|,
name|TokenWrapper
name|wrapper
parameter_list|,
name|Token
name|token
parameter_list|)
block|{
if|if
condition|(
name|token
operator|.
name|getInclusion
argument_list|()
operator|==
name|SPConstants
operator|.
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_NEVER
condition|)
block|{
name|boolean
name|tokenTypeSet
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|token
operator|instanceof
name|X509Token
condition|)
block|{
name|X509Token
name|x509Token
init|=
operator|(
name|X509Token
operator|)
name|token
decl_stmt|;
if|if
condition|(
name|x509Token
operator|.
name|isRequireIssuerSerialReference
argument_list|()
condition|)
block|{
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|ISSUER_SERIAL
argument_list|)
expr_stmt|;
name|tokenTypeSet
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x509Token
operator|.
name|isRequireKeyIdentifierReference
argument_list|()
condition|)
block|{
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|SKI_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
name|tokenTypeSet
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x509Token
operator|.
name|isRequireThumbprintReference
argument_list|()
condition|)
block|{
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|THUMBPRINT_IDENTIFIER
argument_list|)
expr_stmt|;
name|tokenTypeSet
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|tokenTypeSet
condition|)
block|{
name|policyAsserted
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|policyAsserted
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|Wss10
name|wss
init|=
name|getWss10
argument_list|()
decl_stmt|;
name|policyAsserted
argument_list|(
name|wss
argument_list|)
expr_stmt|;
if|if
condition|(
name|wss
operator|.
name|isMustSupportRefKeyIdentifier
argument_list|()
condition|)
block|{
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|SKI_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wss
operator|.
name|isMustSupportRefIssuerSerial
argument_list|()
condition|)
block|{
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|ISSUER_SERIAL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wss
operator|instanceof
name|Wss11
operator|&&
operator|(
operator|(
name|Wss11
operator|)
name|wss
operator|)
operator|.
name|isMustSupportRefThumbprint
argument_list|()
condition|)
block|{
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|THUMBPRINT_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|policyAsserted
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|policyAsserted
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|secBase
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|BST_DIRECT_REFERENCE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setEncryptionUser
parameter_list|(
name|WSSecEncryptedKey
name|encrKeyBuilder
parameter_list|,
name|TokenWrapper
name|token
parameter_list|,
name|boolean
name|sign
parameter_list|,
name|Crypto
name|crypto
parameter_list|)
block|{
name|String
name|encrUser
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|sign
condition|?
name|SecurityConstants
operator|.
name|SIGNATURE_USERNAME
else|:
name|SecurityConstants
operator|.
name|ENCRYPT_USERNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|encrUser
operator|==
literal|null
condition|)
block|{
name|encrUser
operator|=
name|crypto
operator|.
name|getDefaultX509Alias
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|encrUser
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|en
init|=
name|crypto
operator|.
name|getKeyStore
argument_list|()
operator|.
name|aliases
argument_list|()
decl_stmt|;
if|if
condition|(
name|en
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|encrUser
operator|=
name|en
operator|.
name|nextElement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|en
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
comment|//more than one alias in the keystore, user WILL need
comment|//to specify
name|encrUser
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
if|if
condition|(
name|encrUser
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|encrUser
argument_list|)
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"No "
operator|+
operator|(
name|sign
condition|?
literal|"signature"
else|:
literal|"encryption"
operator|)
operator|+
literal|" username found."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|WSHandlerConstants
operator|.
name|USE_REQ_SIG_CERT
operator|.
name|equals
argument_list|(
name|encrUser
argument_list|)
condition|)
block|{
name|Object
name|resultsObj
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultsObj
operator|!=
literal|null
condition|)
block|{
name|encrKeyBuilder
operator|.
name|setUseThisCert
argument_list|(
name|getReqSigCert
argument_list|(
operator|(
name|Vector
operator|)
name|resultsObj
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO This is a hack, this should not come under USE_REQ_SIG_CERT
if|if
condition|(
name|encrKeyBuilder
operator|.
name|isCertSet
argument_list|()
condition|)
block|{
name|encrKeyBuilder
operator|.
name|setUserInfo
argument_list|(
name|getUsername
argument_list|(
operator|(
name|Vector
operator|)
name|resultsObj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"No security results in incoming message"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|encrKeyBuilder
operator|.
name|setUserInfo
argument_list|(
name|encrUser
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|X509Certificate
name|getReqSigCert
parameter_list|(
name|Vector
name|results
parameter_list|)
block|{
comment|/*         * Scan the results for a matching actor. Use results only if the         * receiving Actor and the sending Actor match.         */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WSHandlerResult
name|rResult
init|=
operator|(
name|WSHandlerResult
operator|)
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Vector
name|wsSecEngineResults
init|=
name|rResult
operator|.
name|getResults
argument_list|()
decl_stmt|;
comment|/*             * Scan the results for the first Signature action. Use the             * certificate of this Signature to set the certificate for the             * encryption action :-).             */
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wsSecEngineResults
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|WSSecurityEngineResult
name|wser
init|=
operator|(
name|WSSecurityEngineResult
operator|)
name|wsSecEngineResults
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|SIGN
condition|)
block|{
return|return
operator|(
name|X509Certificate
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATE
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Scan through<code>WSHandlerResult<code> vector for a Username token and return      * the username if a Username Token found       * @param results      * @return      */
specifier|public
specifier|static
name|String
name|getUsername
parameter_list|(
name|Vector
name|results
parameter_list|)
block|{
comment|/*          * Scan the results for a matching actor. Use results only if the          * receiving Actor and the sending Actor match.          */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WSHandlerResult
name|rResult
init|=
operator|(
name|WSHandlerResult
operator|)
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Vector
name|wsSecEngineResults
init|=
name|rResult
operator|.
name|getResults
argument_list|()
decl_stmt|;
comment|/*              * Scan the results for a username token. Use the username              * of this token to set the alias for the encryption user              */
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wsSecEngineResults
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|WSSecurityEngineResult
name|wser
init|=
operator|(
name|WSSecurityEngineResult
operator|)
name|wsSecEngineResults
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|UT
condition|)
block|{
name|WSUsernameTokenPrincipal
name|principal
init|=
operator|(
name|WSUsernameTokenPrincipal
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_PRINCIPAL
argument_list|)
decl_stmt|;
return|return
name|principal
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Wss10
name|getWss10
parameter_list|()
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|SP12Constants
operator|.
name|WSS10
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
return|return
operator|(
name|Wss10
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
return|;
block|}
block|}
name|ais
operator|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|SP12Constants
operator|.
name|WSS11
argument_list|)
expr_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
return|return
operator|(
name|Wss10
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|checkForX509PkiPath
parameter_list|(
name|WSSecSignature
name|sig
parameter_list|,
name|Token
name|token
parameter_list|)
block|{
if|if
condition|(
name|token
operator|instanceof
name|X509Token
condition|)
block|{
name|X509Token
name|x509Token
init|=
operator|(
name|X509Token
operator|)
name|token
decl_stmt|;
if|if
condition|(
name|x509Token
operator|.
name|getTokenVersionAndType
argument_list|()
operator|.
name|equals
argument_list|(
name|SPConstants
operator|.
name|WSS_X509_PKI_PATH_V1_TOKEN10
argument_list|)
operator|||
name|x509Token
operator|.
name|getTokenVersionAndType
argument_list|()
operator|.
name|equals
argument_list|(
name|SPConstants
operator|.
name|WSS_X509_PKI_PATH_V1_TOKEN11
argument_list|)
condition|)
block|{
name|sig
operator|.
name|setUseSingleCertificate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|WSSecSignature
name|getSignatureBuider
parameter_list|(
name|TokenWrapper
name|wrapper
parameter_list|,
name|Token
name|token
parameter_list|,
name|boolean
name|endorse
parameter_list|)
block|{
name|WSSecSignature
name|sig
init|=
operator|new
name|WSSecSignature
argument_list|()
decl_stmt|;
name|checkForX509PkiPath
argument_list|(
name|sig
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|setKeyIdentifierType
argument_list|(
name|sig
argument_list|,
name|wrapper
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|boolean
name|encryptCrypto
init|=
literal|false
decl_stmt|;
name|String
name|userNameKey
init|=
name|SecurityConstants
operator|.
name|SIGNATURE_USERNAME
decl_stmt|;
name|String
name|type
init|=
literal|"signature"
decl_stmt|;
if|if
condition|(
name|binding
operator|instanceof
name|SymmetricBinding
operator|&&
operator|!
name|endorse
condition|)
block|{
name|encryptCrypto
operator|=
operator|(
operator|(
name|SymmetricBinding
operator|)
name|binding
operator|)
operator|.
name|getProtectionToken
argument_list|()
operator|!=
literal|null
expr_stmt|;
name|userNameKey
operator|=
name|SecurityConstants
operator|.
name|ENCRYPT_USERNAME
expr_stmt|;
block|}
name|Crypto
name|crypto
init|=
name|encryptCrypto
condition|?
name|getEncryptionCrypto
argument_list|(
name|wrapper
argument_list|)
else|:
name|getSignatureCrypto
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|endorse
condition|)
block|{
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_CRYPTO
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
block|}
name|String
name|user
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|userNameKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|user
operator|=
name|crypto
operator|.
name|getDefaultX509Alias
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|en
init|=
name|crypto
operator|.
name|getKeyStore
argument_list|()
operator|.
name|aliases
argument_list|()
decl_stmt|;
if|if
condition|(
name|en
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|user
operator|=
name|en
operator|.
name|nextElement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|en
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
comment|//more than one alias in the keystore, user WILL need
comment|//to specify
name|user
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|user
argument_list|)
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"No "
operator|+
name|type
operator|+
literal|" username found."
argument_list|)
expr_stmt|;
block|}
name|String
name|password
init|=
name|getPassword
argument_list|(
name|user
argument_list|,
name|token
argument_list|,
name|WSPasswordCallback
operator|.
name|SIGNATURE
argument_list|)
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|password
operator|=
literal|""
expr_stmt|;
block|}
name|sig
operator|.
name|setUserInfo
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSignatureAlgorithm
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAsymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSigCanonicalization
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getInclusiveC14n
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|sig
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|,
name|crypto
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|sig
return|;
block|}
specifier|protected
name|void
name|doEndorsedSignatures
parameter_list|(
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|tokenMap
parameter_list|,
name|boolean
name|isTokenProtection
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|ent
range|:
name|tokenMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|WSSecBase
name|tempTok
init|=
name|ent
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
init|=
operator|new
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
name|sigParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|mainSigId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tempTok
operator|instanceof
name|WSSecSignature
condition|)
block|{
name|WSSecSignature
name|sig
init|=
operator|(
name|WSSecSignature
operator|)
name|tempTok
decl_stmt|;
if|if
condition|(
name|isTokenProtection
operator|&&
name|sig
operator|.
name|getBSTTokenId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sigParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|sig
operator|.
name|getBSTTokenId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sig
operator|.
name|addReferencesToSign
argument_list|(
name|sigParts
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
name|sig
operator|.
name|computeSignature
argument_list|()
expr_stmt|;
name|sig
operator|.
name|appendToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
name|signatures
operator|.
name|add
argument_list|(
name|sig
operator|.
name|getSignatureValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
name|policyNotAsserted
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tempTok
operator|instanceof
name|WSSecurityTokenHolder
condition|)
block|{
name|SecurityToken
name|token
init|=
operator|(
operator|(
name|WSSecurityTokenHolder
operator|)
name|tempTok
operator|)
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|isTokenProtection
condition|)
block|{
name|sigParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|token
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|ent
operator|.
name|getKey
argument_list|()
operator|.
name|isDerivedKeys
argument_list|()
condition|)
block|{
name|doSymmSignatureDerived
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|token
argument_list|,
name|sigParts
argument_list|,
name|isTokenProtection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doSymmSignature
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|,
name|token
argument_list|,
name|sigParts
argument_list|,
name|isTokenProtection
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|doSymmSignatureDerived
parameter_list|(
name|Token
name|policyToken
parameter_list|,
name|SecurityToken
name|tok
parameter_list|,
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
parameter_list|,
name|boolean
name|isTokenProtection
parameter_list|)
throws|throws
name|WSSecurityException
throws|,
name|ConversationException
block|{
name|Document
name|doc
init|=
name|saaj
operator|.
name|getSOAPPart
argument_list|()
decl_stmt|;
name|WSSecDKSign
name|dkSign
init|=
operator|new
name|WSSecDKSign
argument_list|()
decl_stmt|;
comment|//Check whether it is security policy 1.2 and use the secure conversation accordingly
if|if
condition|(
name|SP12Constants
operator|.
name|INSTANCE
operator|==
name|policyToken
operator|.
name|getSPConstants
argument_list|()
condition|)
block|{
name|dkSign
operator|.
name|setWscVersion
argument_list|(
name|ConversationConstants
operator|.
name|VERSION_05_12
argument_list|)
expr_stmt|;
block|}
comment|//Check for whether the token is attached in the message or not
name|boolean
name|attached
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|SPConstants
operator|.
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS
operator|==
name|policyToken
operator|.
name|getInclusion
argument_list|()
operator|||
name|SPConstants
operator|.
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ONCE
operator|==
name|policyToken
operator|.
name|getInclusion
argument_list|()
operator|||
operator|(
name|isRequestor
argument_list|()
operator|&&
name|SPConstants
operator|.
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS_TO_RECIPIENT
operator|==
name|policyToken
operator|.
name|getInclusion
argument_list|()
operator|)
condition|)
block|{
name|attached
operator|=
literal|true
expr_stmt|;
block|}
comment|// Setting the AttachedReference or the UnattachedReference according to the flag
name|Element
name|ref
decl_stmt|;
if|if
condition|(
name|attached
condition|)
block|{
name|ref
operator|=
name|tok
operator|.
name|getAttachedReference
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|=
name|tok
operator|.
name|getUnattachedReference
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|ref
operator|=
name|cloneElement
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|dkSign
operator|.
name|setExternalKey
argument_list|(
name|tok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isRequestor
argument_list|()
operator|&&
name|policyToken
operator|.
name|isDerivedKeys
argument_list|()
condition|)
block|{
comment|// If the Encrypted key used to create the derived key is not
comment|// attached use key identifier as defined in WSS1.1 section
comment|// 7.7 Encrypted Key reference
name|SecurityTokenReference
name|tokenRef
init|=
operator|new
name|SecurityTokenReference
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|tok
operator|.
name|getSHA1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tokenRef
operator|.
name|setKeyIdentifierEncKeySHA1
argument_list|(
name|tok
operator|.
name|getSHA1
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dkSign
operator|.
name|setExternalKey
argument_list|(
name|tok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|tokenRef
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dkSign
operator|.
name|setExternalKey
argument_list|(
name|tok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|tok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Set the algo info
name|dkSign
operator|.
name|setSignatureAlgorithm
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|dkSign
operator|.
name|setDerivedKeyLength
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSignatureDerivedKeyLength
argument_list|()
operator|/
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
name|tok
operator|.
name|getSHA1
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//Set the value type of the reference
name|dkSign
operator|.
name|setCustomValueType
argument_list|(
name|WSConstants
operator|.
name|SOAPMESSAGE_NS11
operator|+
literal|"#"
operator|+
name|WSConstants
operator|.
name|ENC_KEY_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
name|dkSign
operator|.
name|prepare
argument_list|(
name|doc
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTokenProtection
condition|)
block|{
comment|//Hack to handle reference id issues
comment|//TODO Need a better fix
name|String
name|sigTokId
init|=
name|tok
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sigTokId
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|sigTokId
operator|=
name|sigTokId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|sigParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|sigTokId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dkSign
operator|.
name|setParts
argument_list|(
name|sigParts
argument_list|)
expr_stmt|;
name|dkSign
operator|.
name|addReferencesToSign
argument_list|(
name|sigParts
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
comment|//Do signature
name|dkSign
operator|.
name|computeSignature
argument_list|()
expr_stmt|;
comment|//Add elements to header
name|addSupportingElement
argument_list|(
name|dkSign
operator|.
name|getdktElement
argument_list|()
argument_list|)
expr_stmt|;
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|dkSign
operator|.
name|getSignatureElement
argument_list|()
argument_list|)
expr_stmt|;
name|signatures
operator|.
name|add
argument_list|(
name|dkSign
operator|.
name|getSignatureValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doSymmSignature
parameter_list|(
name|Token
name|policyToken
parameter_list|,
name|SecurityToken
name|tok
parameter_list|,
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
parameter_list|,
name|boolean
name|isTokenProtection
parameter_list|)
throws|throws
name|WSSecurityException
throws|,
name|ConversationException
block|{
name|Document
name|doc
init|=
name|saaj
operator|.
name|getSOAPPart
argument_list|()
decl_stmt|;
name|WSSecSignature
name|sig
init|=
operator|new
name|WSSecSignature
argument_list|()
decl_stmt|;
comment|// If a EncryptedKeyToken is used, set the correct value type to
comment|// be used in the wsse:Reference in ds:KeyInfo
if|if
condition|(
name|policyToken
operator|instanceof
name|X509Token
condition|)
block|{
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_NS
operator|+
name|WSConstants
operator|.
name|ENC_KEY_VALUE_TYPE
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_SYMM_SIGNING
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//the tok has to be an EncryptedKey token
name|sig
operator|.
name|setEncrKeySha1value
argument_list|(
name|tok
operator|.
name|getSHA1
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|ENCRYPTED_KEY_SHA1_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_NS
operator|+
name|WSConstants
operator|.
name|SAML_ASSERTION_ID
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_SYMM_SIGNING
argument_list|)
expr_stmt|;
block|}
name|String
name|sigTokId
decl_stmt|;
if|if
condition|(
name|policyToken
operator|instanceof
name|SecureConversationToken
condition|)
block|{
name|Element
name|ref
init|=
name|tok
operator|.
name|getAttachedReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|ref
operator|=
name|tok
operator|.
name|getUnattachedReference
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|sigTokId
operator|=
name|MemoryTokenStore
operator|.
name|getIdFromSTR
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sigTokId
operator|=
name|tok
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|sigTokId
operator|=
name|tok
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
comment|//Hack to handle reference id issues
comment|//TODO Need a better fix
if|if
condition|(
name|sigTokId
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|sigTokId
operator|=
name|sigTokId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|sig
operator|.
name|setCustomTokenId
argument_list|(
name|sigTokId
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSecretKey
argument_list|(
name|tok
operator|.
name|getSecret
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSignatureAlgorithm
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAsymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSignatureAlgorithm
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|prepare
argument_list|(
name|doc
argument_list|,
name|getSignatureCrypto
argument_list|(
literal|null
argument_list|)
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setParts
argument_list|(
name|sigParts
argument_list|)
expr_stmt|;
name|sig
operator|.
name|addReferencesToSign
argument_list|(
name|sigParts
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
comment|//Do signature
name|sig
operator|.
name|computeSignature
argument_list|()
expr_stmt|;
name|signatures
operator|.
name|add
argument_list|(
name|sig
operator|.
name|getSignatureValue
argument_list|()
argument_list|)
expr_stmt|;
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|appendChild
argument_list|(
name|sig
operator|.
name|getSignatureElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertSupportingTokens
parameter_list|(
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigs
parameter_list|)
block|{
name|assertSupportingTokens
argument_list|(
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_SUPPORTING_TOKENS
argument_list|)
argument_list|)
expr_stmt|;
name|assertSupportingTokens
argument_list|(
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|ENDORSING_SUPPORTING_TOKENS
argument_list|)
argument_list|)
expr_stmt|;
name|assertSupportingTokens
argument_list|(
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_ENDORSING_SUPPORTING_TOKENS
argument_list|)
argument_list|)
expr_stmt|;
name|assertSupportingTokens
argument_list|(
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
argument_list|)
expr_stmt|;
name|assertSupportingTokens
argument_list|(
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
argument_list|)
expr_stmt|;
name|assertSupportingTokens
argument_list|(
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
argument_list|)
expr_stmt|;
name|assertSupportingTokens
argument_list|(
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|SUPPORTING_TOKENS
argument_list|)
argument_list|)
expr_stmt|;
name|assertSupportingTokens
argument_list|(
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addSupportingTokens
parameter_list|(
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigs
parameter_list|)
block|{
name|SupportingToken
name|sgndSuppTokens
init|=
operator|(
name|SupportingToken
operator|)
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|sigSuppTokMap
init|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndSuppTokens
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SupportingToken
name|endSuppTokens
init|=
operator|(
name|SupportingToken
operator|)
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|ENDORSING_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|endSuppTokMap
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|endSuppTokens
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SupportingToken
name|sgndEndSuppTokens
init|=
operator|(
name|SupportingToken
operator|)
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_ENDORSING_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|sgndEndSuppTokMap
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndEndSuppTokens
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SupportingToken
name|sgndEncryptedSuppTokens
init|=
operator|(
name|SupportingToken
operator|)
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|sgndEncSuppTokMap
init|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndEncryptedSuppTokens
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SupportingToken
name|endorsingEncryptedSuppTokens
init|=
operator|(
name|SupportingToken
operator|)
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|endEncSuppTokMap
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|endorsingEncryptedSuppTokens
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SupportingToken
name|sgndEndEncSuppTokens
init|=
operator|(
name|SupportingToken
operator|)
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|sgndEndEncSuppTokMap
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndEndEncSuppTokens
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SupportingToken
name|supportingToks
init|=
operator|(
name|SupportingToken
operator|)
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|supportingToks
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SupportingToken
name|encryptedSupportingToks
init|=
operator|(
name|SupportingToken
operator|)
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|encryptedSupportingToks
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//Setup signature parts
name|addSignatureParts
argument_list|(
name|sigSuppTokMap
argument_list|,
name|sigs
argument_list|)
expr_stmt|;
name|addSignatureParts
argument_list|(
name|sgndEncSuppTokMap
argument_list|,
name|sigs
argument_list|)
expr_stmt|;
name|addSignatureParts
argument_list|(
name|sgndEndSuppTokMap
argument_list|,
name|sigs
argument_list|)
expr_stmt|;
name|addSignatureParts
argument_list|(
name|sgndEndEncSuppTokMap
argument_list|,
name|sigs
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doEndorse
parameter_list|()
block|{
name|boolean
name|tokenProtect
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|binding
operator|instanceof
name|AsymmetricBinding
condition|)
block|{
name|tokenProtect
operator|=
operator|(
operator|(
name|AsymmetricBinding
operator|)
name|binding
operator|)
operator|.
name|isTokenProtection
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|binding
operator|instanceof
name|SymmetricBinding
condition|)
block|{
name|tokenProtect
operator|=
operator|(
operator|(
name|SymmetricBinding
operator|)
name|binding
operator|)
operator|.
name|isTokenProtection
argument_list|()
expr_stmt|;
block|}
comment|// Adding the endorsing encrypted supporting tokens to endorsing supporting tokens
name|endSuppTokMap
operator|.
name|putAll
argument_list|(
name|endEncSuppTokMap
argument_list|)
expr_stmt|;
comment|// Do endorsed signatures
name|doEndorsedSignatures
argument_list|(
name|endSuppTokMap
argument_list|,
name|tokenProtect
argument_list|)
expr_stmt|;
comment|//Adding the signed endorsed encrypted tokens to signed endorsed supporting tokens
name|sgndEndSuppTokMap
operator|.
name|putAll
argument_list|(
name|sgndEndEncSuppTokMap
argument_list|)
expr_stmt|;
comment|// Do signed endorsing signatures
name|doEndorsedSignatures
argument_list|(
name|sgndEndSuppTokMap
argument_list|,
name|tokenProtect
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addSignatureConfirmation
parameter_list|(
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
parameter_list|)
block|{
name|Wss10
name|wss10
init|=
name|getWss10
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|wss10
operator|instanceof
name|Wss11
operator|)
operator|||
operator|!
operator|(
operator|(
name|Wss11
operator|)
name|wss10
operator|)
operator|.
name|isRequireSignatureConfirmation
argument_list|()
condition|)
block|{
comment|//If we don't require sig confirmation simply go back :-)
return|return;
block|}
name|Vector
name|results
init|=
operator|(
name|Vector
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
decl_stmt|;
comment|/*          * loop over all results gathered by all handlers in the chain. For each          * handler result get the various actions. After that loop we have all          * signature results in the signatureActions vector          */
name|Vector
name|signatureActions
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WSHandlerResult
name|wshResult
init|=
operator|(
name|WSHandlerResult
operator|)
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|wshResult
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|SIGN
argument_list|,
name|signatureActions
argument_list|)
expr_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|wshResult
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|ST_SIGNED
argument_list|,
name|signatureActions
argument_list|)
expr_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|wshResult
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|UT_SIGN
argument_list|,
name|signatureActions
argument_list|)
expr_stmt|;
block|}
comment|// prepare a SignatureConfirmation token
name|WSSecSignatureConfirmation
name|wsc
init|=
operator|new
name|WSSecSignatureConfirmation
argument_list|()
decl_stmt|;
if|if
condition|(
name|signatureActions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|signatureActions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WSSecurityEngineResult
name|wsr
init|=
operator|(
name|WSSecurityEngineResult
operator|)
name|signatureActions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sigVal
init|=
operator|(
name|byte
index|[]
operator|)
name|wsr
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SIGNATURE_VALUE
argument_list|)
decl_stmt|;
name|wsc
operator|.
name|setSignatureValue
argument_list|(
name|sigVal
argument_list|)
expr_stmt|;
name|wsc
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|addSupportingElement
argument_list|(
name|wsc
operator|.
name|getSignatureConfirmationElement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sigParts
operator|!=
literal|null
condition|)
block|{
name|sigParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|wsc
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//No Sig value
name|wsc
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|addSupportingElement
argument_list|(
name|wsc
operator|.
name|getSignatureConfirmationElement
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sigParts
operator|!=
literal|null
condition|)
block|{
name|sigParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|wsc
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|handleEncryptedSignedHeaders
parameter_list|(
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|encryptedParts
parameter_list|,
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|signedParts
parameter_list|)
block|{
for|for
control|(
name|WSEncryptionPart
name|signedPart
range|:
name|signedParts
control|)
block|{
if|if
condition|(
name|signedPart
operator|.
name|getNamespace
argument_list|()
operator|==
literal|null
operator|||
name|signedPart
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|WSEncryptionPart
name|encryptedPart
range|:
name|encryptedParts
control|)
block|{
if|if
condition|(
name|encryptedPart
operator|.
name|getNamespace
argument_list|()
operator|==
literal|null
operator|||
name|encryptedPart
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|signedPart
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|encryptedPart
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|signedPart
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|encryptedPart
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|encDataID
init|=
name|encryptedPart
operator|.
name|getEncId
argument_list|()
decl_stmt|;
name|Element
name|encDataElem
init|=
name|WSSecurityUtil
operator|.
name|findElementById
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|encDataID
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|encDataElem
operator|!=
literal|null
condition|)
block|{
name|Element
name|encHeader
init|=
operator|(
name|Element
operator|)
name|encDataElem
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
name|String
name|encHeaderId
init|=
name|encHeader
operator|.
name|getAttributeNS
argument_list|(
name|WSConstants
operator|.
name|WSU_NS
argument_list|,
literal|"Id"
argument_list|)
decl_stmt|;
name|signedParts
operator|.
name|remove
argument_list|(
name|signedPart
argument_list|)
expr_stmt|;
name|WSEncryptionPart
name|encHeaderToSign
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|encHeaderId
argument_list|)
decl_stmt|;
name|signedParts
operator|.
name|add
argument_list|(
name|encHeaderToSign
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

