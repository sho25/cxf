begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSDocInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSUsernameTokenPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|components
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|processor
operator|.
name|Processor
import|;
end_import

begin_comment
comment|/**  * UsernameToken processor which creates Principal   * without delegating to CallbackHandlers  */
end_comment

begin_class
specifier|public
class|class
name|UsernameTokenProcessorWithoutCallbacks
implements|implements
name|Processor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|UsernameTokenProcessorWithoutCallbacks
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|utId
decl_stmt|;
specifier|private
name|UsernameToken
name|ut
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|handleToken
parameter_list|(
name|Element
name|elem
parameter_list|,
name|Crypto
name|crypto
parameter_list|,
name|Crypto
name|decCrypto
parameter_list|,
name|CallbackHandler
name|cb
parameter_list|,
name|WSDocInfo
name|wsDocInfo
parameter_list|,
name|Vector
name|returnResults
parameter_list|,
name|WSSConfig
name|wsc
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Found UsernameToken list element"
argument_list|)
expr_stmt|;
block|}
name|Principal
name|principal
init|=
name|handleUsernameToken
argument_list|(
operator|(
name|Element
operator|)
name|elem
argument_list|,
name|cb
argument_list|)
decl_stmt|;
name|returnResults
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|WSSecurityEngineResult
argument_list|(
name|WSConstants
operator|.
name|UT
argument_list|,
name|principal
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|utId
operator|=
name|ut
operator|.
name|getID
argument_list|()
expr_stmt|;
block|}
specifier|private
name|WSUsernameTokenPrincipal
name|handleUsernameToken
parameter_list|(
name|Element
name|token
parameter_list|,
name|CallbackHandler
name|cb
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|//
comment|// Parse the UsernameToken element
comment|//
name|ut
operator|=
operator|new
name|UsernameToken
argument_list|(
name|token
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|ut
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|password
init|=
name|ut
operator|.
name|getPassword
argument_list|()
decl_stmt|;
name|String
name|nonce
init|=
name|ut
operator|.
name|getNonce
argument_list|()
decl_stmt|;
name|String
name|createdTime
init|=
name|ut
operator|.
name|getCreated
argument_list|()
decl_stmt|;
name|String
name|pwType
init|=
name|ut
operator|.
name|getPasswordType
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"UsernameToken user "
operator|+
name|user
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"UsernameToken password "
operator|+
name|password
argument_list|)
expr_stmt|;
block|}
return|return
name|createPrincipal
argument_list|(
name|user
argument_list|,
name|password
argument_list|,
name|ut
operator|.
name|isHashed
argument_list|()
argument_list|,
name|nonce
argument_list|,
name|createdTime
argument_list|,
name|pwType
argument_list|)
return|;
block|}
specifier|protected
name|WSUsernameTokenPrincipal
name|createPrincipal
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|,
name|boolean
name|isHashed
parameter_list|,
name|String
name|nonce
parameter_list|,
name|String
name|createdTime
parameter_list|,
name|String
name|pwType
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|WSUsernameTokenPrincipal
name|principal
init|=
operator|new
name|WSUsernameTokenPrincipal
argument_list|(
name|user
argument_list|,
name|isHashed
argument_list|)
decl_stmt|;
name|principal
operator|.
name|setNonce
argument_list|(
name|nonce
argument_list|)
expr_stmt|;
name|principal
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|principal
operator|.
name|setCreatedTime
argument_list|(
name|createdTime
argument_list|)
expr_stmt|;
name|principal
operator|.
name|setPasswordType
argument_list|(
name|pwType
argument_list|)
expr_stmt|;
return|return
name|principal
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|utId
return|;
block|}
block|}
end_class

end_unit

