begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|MapNamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|transport
operator|.
name|TLSSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SignedEncryptedElements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SignedEncryptedParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSDataRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|BinarySecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|KerberosSecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|PKIPathSecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|X509Security
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|SAMLKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|saml
operator|.
name|ext
operator|.
name|AssertionWrapper
import|;
end_import

begin_comment
comment|/**  * A base class to use to validate various SupportingToken policies.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSupportingTokenPolicyValidator
extends|extends
name|AbstractTokenPolicyValidator
implements|implements
name|SupportingTokenPolicyValidator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractSupportingTokenPolicyValidator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Message
name|message
decl_stmt|;
specifier|private
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
decl_stmt|;
specifier|private
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
decl_stmt|;
specifier|private
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|encryptedResults
decl_stmt|;
specifier|private
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|utResults
decl_stmt|;
specifier|private
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|samlResults
decl_stmt|;
specifier|private
name|boolean
name|validateUsernameToken
init|=
literal|true
decl_stmt|;
specifier|private
name|Element
name|timestamp
decl_stmt|;
specifier|private
name|boolean
name|signed
decl_stmt|;
specifier|private
name|boolean
name|encrypted
decl_stmt|;
specifier|private
name|boolean
name|derived
decl_stmt|;
specifier|private
name|boolean
name|endorsed
decl_stmt|;
specifier|private
name|SignedEncryptedElements
name|signedElements
decl_stmt|;
specifier|private
name|SignedEncryptedElements
name|encryptedElements
decl_stmt|;
specifier|private
name|SignedEncryptedParts
name|signedParts
decl_stmt|;
specifier|private
name|SignedEncryptedParts
name|encryptedParts
decl_stmt|;
comment|/**      * Set the list of UsernameToken results      */
specifier|public
name|void
name|setUsernameTokenResults
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|utResultsList
parameter_list|,
name|boolean
name|valUsernameToken
parameter_list|)
block|{
name|utResults
operator|=
name|utResultsList
expr_stmt|;
name|validateUsernameToken
operator|=
name|valUsernameToken
expr_stmt|;
block|}
comment|/**      * Set the list of SAMLToken results      */
specifier|public
name|void
name|setSAMLTokenResults
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|samlResultsList
parameter_list|)
block|{
name|samlResults
operator|=
name|samlResultsList
expr_stmt|;
block|}
comment|/**      * Set the Timestamp element      */
specifier|public
name|void
name|setTimestampElement
parameter_list|(
name|Element
name|timestampElement
parameter_list|)
block|{
name|timestamp
operator|=
name|timestampElement
expr_stmt|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
name|message
operator|=
name|msg
expr_stmt|;
block|}
specifier|public
name|void
name|setResults
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
parameter_list|)
block|{
name|this
operator|.
name|results
operator|=
name|results
expr_stmt|;
block|}
specifier|public
name|void
name|setSignedResults
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
parameter_list|)
block|{
name|this
operator|.
name|signedResults
operator|=
name|signedResults
expr_stmt|;
block|}
specifier|public
name|void
name|setEncryptedResults
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|encryptedResults
parameter_list|)
block|{
name|this
operator|.
name|encryptedResults
operator|=
name|encryptedResults
expr_stmt|;
block|}
specifier|public
name|void
name|setSigned
parameter_list|(
name|boolean
name|signed
parameter_list|)
block|{
name|this
operator|.
name|signed
operator|=
name|signed
expr_stmt|;
block|}
specifier|public
name|void
name|setEncrypted
parameter_list|(
name|boolean
name|encrypted
parameter_list|)
block|{
name|this
operator|.
name|encrypted
operator|=
name|encrypted
expr_stmt|;
block|}
specifier|public
name|void
name|setDerived
parameter_list|(
name|boolean
name|derived
parameter_list|)
block|{
name|this
operator|.
name|derived
operator|=
name|derived
expr_stmt|;
block|}
specifier|public
name|void
name|setEndorsed
parameter_list|(
name|boolean
name|endorsed
parameter_list|)
block|{
name|this
operator|.
name|endorsed
operator|=
name|endorsed
expr_stmt|;
block|}
comment|/**      * Process UsernameTokens.      */
specifier|protected
name|boolean
name|processUsernameTokens
parameter_list|()
block|{
if|if
condition|(
operator|!
name|validateUsernameToken
condition|)
block|{
return|return
literal|true
return|;
block|}
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
name|tokenResults
operator|.
name|addAll
argument_list|(
name|utResults
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|dktResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|utResults
control|)
block|{
if|if
condition|(
name|derived
condition|)
block|{
name|byte
index|[]
name|secret
init|=
operator|(
name|byte
index|[]
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
decl_stmt|;
name|WSSecurityEngineResult
name|dktResult
init|=
name|getMatchingDerivedKey
argument_list|(
name|secret
argument_list|)
decl_stmt|;
if|if
condition|(
name|dktResult
operator|!=
literal|null
condition|)
block|{
name|dktResults
operator|.
name|add
argument_list|(
name|dktResult
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|tokenResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|signed
operator|&&
operator|!
name|areTokensSigned
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|encrypted
operator|&&
operator|!
name|areTokensEncrypted
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|tokenResults
operator|.
name|addAll
argument_list|(
name|dktResults
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|endorsed
operator|&&
operator|!
name|checkEndorsed
argument_list|(
name|tokenResults
argument_list|)
operator|)
operator|||
operator|!
name|validateSignedEncryptedPolicies
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Process SAML Tokens. Only signed results are supported.      */
specifier|protected
name|boolean
name|processSAMLTokens
parameter_list|()
block|{
if|if
condition|(
name|samlResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|signed
operator|&&
operator|!
name|areTokensSigned
argument_list|(
name|samlResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|encrypted
operator|&&
operator|!
name|areTokensEncrypted
argument_list|(
name|samlResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|endorsed
operator|&&
operator|!
name|checkEndorsed
argument_list|(
name|samlResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|validateSignedEncryptedPolicies
argument_list|(
name|samlResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Process Kerberos Tokens.      */
specifier|protected
name|boolean
name|processKerberosTokens
parameter_list|()
block|{
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|dktResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|results
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|BST
condition|)
block|{
name|BinarySecurity
name|binarySecurity
init|=
operator|(
name|BinarySecurity
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_BINARY_SECURITY_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|binarySecurity
operator|instanceof
name|KerberosSecurity
condition|)
block|{
if|if
condition|(
name|derived
condition|)
block|{
name|byte
index|[]
name|secret
init|=
operator|(
name|byte
index|[]
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
decl_stmt|;
name|WSSecurityEngineResult
name|dktResult
init|=
name|getMatchingDerivedKey
argument_list|(
name|secret
argument_list|)
decl_stmt|;
if|if
condition|(
name|dktResult
operator|!=
literal|null
condition|)
block|{
name|dktResults
operator|.
name|add
argument_list|(
name|dktResult
argument_list|)
expr_stmt|;
block|}
block|}
name|tokenResults
operator|.
name|add
argument_list|(
name|wser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|tokenResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|signed
operator|&&
operator|!
name|areTokensSigned
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|encrypted
operator|&&
operator|!
name|areTokensEncrypted
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|tokenResults
operator|.
name|addAll
argument_list|(
name|dktResults
argument_list|)
expr_stmt|;
if|if
condition|(
name|endorsed
operator|&&
operator|!
name|checkEndorsed
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|validateSignedEncryptedPolicies
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Process X509 Tokens.      */
specifier|protected
name|boolean
name|processX509Tokens
parameter_list|()
block|{
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|dktResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|results
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|BST
condition|)
block|{
name|BinarySecurity
name|binarySecurity
init|=
operator|(
name|BinarySecurity
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_BINARY_SECURITY_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|binarySecurity
operator|instanceof
name|X509Security
operator|||
name|binarySecurity
operator|instanceof
name|PKIPathSecurity
condition|)
block|{
if|if
condition|(
name|derived
condition|)
block|{
name|WSSecurityEngineResult
name|resultToStore
init|=
name|processX509DerivedTokenResult
argument_list|(
name|wser
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultToStore
operator|!=
literal|null
condition|)
block|{
name|dktResults
operator|.
name|add
argument_list|(
name|resultToStore
argument_list|)
expr_stmt|;
block|}
block|}
name|tokenResults
operator|.
name|add
argument_list|(
name|wser
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|tokenResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|signed
operator|&&
operator|!
name|areTokensSigned
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|encrypted
operator|&&
operator|!
name|areTokensEncrypted
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|tokenResults
operator|.
name|addAll
argument_list|(
name|dktResults
argument_list|)
expr_stmt|;
if|if
condition|(
name|endorsed
operator|&&
operator|!
name|checkEndorsed
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|validateSignedEncryptedPolicies
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Process KeyValue Tokens.      */
specifier|protected
name|boolean
name|processKeyValueTokens
parameter_list|()
block|{
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|signedResults
control|)
block|{
name|PublicKey
name|publicKey
init|=
operator|(
name|PublicKey
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_PUBLIC_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|publicKey
operator|!=
literal|null
condition|)
block|{
name|tokenResults
operator|.
name|add
argument_list|(
name|wser
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tokenResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|signed
operator|&&
operator|!
name|areTokensSigned
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|encrypted
operator|&&
operator|!
name|areTokensEncrypted
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|endorsed
operator|&&
operator|!
name|checkEndorsed
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|validateSignedEncryptedPolicies
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Validate (SignedParts|SignedElements|EncryptedParts|EncryptedElements) policies of this      * SupportingToken.      */
specifier|private
name|boolean
name|validateSignedEncryptedPolicies
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
parameter_list|)
block|{
if|if
condition|(
operator|!
name|validateSignedEncryptedParts
argument_list|(
name|signedParts
argument_list|,
literal|false
argument_list|,
name|signedResults
argument_list|,
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|validateSignedEncryptedParts
argument_list|(
name|encryptedParts
argument_list|,
literal|true
argument_list|,
name|encryptedResults
argument_list|,
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|validateSignedEncryptedElements
argument_list|(
name|signedElements
argument_list|,
literal|false
argument_list|,
name|signedResults
argument_list|,
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|validateSignedEncryptedElements
argument_list|(
name|encryptedElements
argument_list|,
literal|false
argument_list|,
name|encryptedResults
argument_list|,
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Process Security Context Tokens.      */
specifier|protected
name|boolean
name|processSCTokens
parameter_list|()
block|{
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|dktResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|results
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|SCT
condition|)
block|{
if|if
condition|(
name|derived
condition|)
block|{
name|byte
index|[]
name|secret
init|=
operator|(
name|byte
index|[]
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
decl_stmt|;
name|WSSecurityEngineResult
name|dktResult
init|=
name|getMatchingDerivedKey
argument_list|(
name|secret
argument_list|)
decl_stmt|;
if|if
condition|(
name|dktResult
operator|!=
literal|null
condition|)
block|{
name|dktResults
operator|.
name|add
argument_list|(
name|dktResult
argument_list|)
expr_stmt|;
block|}
block|}
name|tokenResults
operator|.
name|add
argument_list|(
name|wser
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tokenResults
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|signed
operator|&&
operator|!
name|areTokensSigned
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|encrypted
operator|&&
operator|!
name|areTokensEncrypted
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|tokenResults
operator|.
name|addAll
argument_list|(
name|dktResults
argument_list|)
expr_stmt|;
if|if
condition|(
name|endorsed
operator|&&
operator|!
name|checkEndorsed
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|validateSignedEncryptedPolicies
argument_list|(
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Find an EncryptedKey element that has a cert that matches the cert of the signature, then      * find a DerivedKey element that matches that EncryptedKey element.      */
specifier|private
name|WSSecurityEngineResult
name|processX509DerivedTokenResult
parameter_list|(
name|WSSecurityEngineResult
name|result
parameter_list|)
block|{
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATE
argument_list|)
decl_stmt|;
name|WSSecurityEngineResult
name|encrResult
init|=
name|getMatchingEncryptedKey
argument_list|(
name|cert
argument_list|)
decl_stmt|;
if|if
condition|(
name|encrResult
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|secret
init|=
operator|(
name|byte
index|[]
operator|)
name|encrResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
decl_stmt|;
name|WSSecurityEngineResult
name|dktResult
init|=
name|getMatchingDerivedKey
argument_list|(
name|secret
argument_list|)
decl_stmt|;
if|if
condition|(
name|dktResult
operator|!=
literal|null
condition|)
block|{
return|return
name|dktResult
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Get a security result representing a Derived Key that has a secret key that      * matches the parameter.      */
specifier|private
name|WSSecurityEngineResult
name|getMatchingDerivedKey
parameter_list|(
name|byte
index|[]
name|secret
parameter_list|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|results
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|DKT
condition|)
block|{
name|byte
index|[]
name|dktSecret
init|=
operator|(
name|byte
index|[]
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
decl_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|secret
argument_list|,
name|dktSecret
argument_list|)
condition|)
block|{
return|return
name|wser
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Get a security result representing an EncryptedKey that matches the parameter.      */
specifier|private
name|WSSecurityEngineResult
name|getMatchingEncryptedKey
parameter_list|(
name|X509Certificate
name|cert
parameter_list|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|results
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|ENCR
condition|)
block|{
name|X509Certificate
name|encrCert
init|=
operator|(
name|X509Certificate
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cert
operator|.
name|equals
argument_list|(
name|encrCert
argument_list|)
condition|)
block|{
return|return
name|wser
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|isTLSInUse
parameter_list|()
block|{
comment|// See whether TLS is in use or not
name|TLSSessionInfo
name|tlsInfo
init|=
name|message
operator|.
name|get
argument_list|(
name|TLSSessionInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tlsInfo
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Check the endorsing supporting token policy. If we're using the Transport Binding then      * check that the Timestamp is signed. Otherwise, check that the signature is signed.      * @return true if the endorsed supporting token policy is correct      */
specifier|private
name|boolean
name|checkEndorsed
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
parameter_list|)
block|{
if|if
condition|(
name|isTLSInUse
argument_list|()
condition|)
block|{
return|return
name|checkTimestampIsSigned
argument_list|(
name|tokenResults
argument_list|)
return|;
block|}
return|return
name|checkSignatureIsSigned
argument_list|(
name|tokenResults
argument_list|)
return|;
block|}
comment|/**      * Return true if a list of tokens were signed, false otherwise.      */
specifier|private
name|boolean
name|areTokensSigned
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokens
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isTLSInUse
argument_list|()
condition|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|tokens
control|)
block|{
name|Element
name|tokenElement
init|=
operator|(
name|Element
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_TOKEN_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenElement
operator|==
literal|null
operator|||
operator|!
name|isTokenSigned
argument_list|(
name|tokenElement
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Return true if a list of tokens were encrypted, false otherwise.      */
specifier|private
name|boolean
name|areTokensEncrypted
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokens
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isTLSInUse
argument_list|()
condition|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|tokens
control|)
block|{
name|Element
name|tokenElement
init|=
operator|(
name|Element
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_TOKEN_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenElement
operator|==
literal|null
operator|||
operator|!
name|isTokenEncrypted
argument_list|(
name|tokenElement
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Return true if the Timestamp is signed by one of the token results      * @param tokenResults A list of WSSecurityEngineResults corresponding to tokens      * @return true if the Timestamp is signed      */
specifier|private
name|boolean
name|checkTimestampIsSigned
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
parameter_list|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|signedResult
range|:
name|signedResults
control|)
block|{
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|sl
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|signedResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WSDataRef
name|dataRef
range|:
name|sl
control|)
block|{
if|if
condition|(
name|timestamp
operator|==
name|dataRef
operator|.
name|getProtectedElement
argument_list|()
operator|&&
name|checkSignatureOrEncryptionResult
argument_list|(
name|signedResult
argument_list|,
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Return true if the Signature is itself signed by one of the token results      * @param tokenResults A list of WSSecurityEngineResults corresponding to tokens      * @return true if the Signature is itself signed      */
specifier|private
name|boolean
name|checkSignatureIsSigned
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
parameter_list|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|signedResult
range|:
name|signedResults
control|)
block|{
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|sl
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|signedResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
operator|&&
name|sl
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|WSDataRef
name|dataRef
range|:
name|sl
control|)
block|{
name|QName
name|signedQName
init|=
name|dataRef
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|WSSecurityEngine
operator|.
name|SIGNATURE
operator|.
name|equals
argument_list|(
name|signedQName
argument_list|)
operator|&&
name|checkSignatureOrEncryptionResult
argument_list|(
name|signedResult
argument_list|,
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Check that a WSSecurityEngineResult corresponding to a signature or encryption uses the same       * signing/encrypting credential as one of the tokens.      * @param signatureResult a WSSecurityEngineResult corresponding to a signature or encryption      * @param tokenResult A list of WSSecurityEngineResults corresponding to tokens      * @return       */
specifier|private
name|boolean
name|checkSignatureOrEncryptionResult
parameter_list|(
name|WSSecurityEngineResult
name|result
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResult
parameter_list|)
block|{
comment|// See what was used to sign/encrypt this result
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATE
argument_list|)
decl_stmt|;
name|byte
index|[]
name|secret
init|=
operator|(
name|byte
index|[]
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
decl_stmt|;
comment|// Now see if the same credential exists in the tokenResult list
for|for
control|(
name|WSSecurityEngineResult
name|token
range|:
name|tokenResult
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
name|BinarySecurity
name|binarySecurity
init|=
operator|(
name|BinarySecurity
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_BINARY_SECURITY_TOKEN
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
operator|(
name|PublicKey
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_PUBLIC_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|binarySecurity
operator|instanceof
name|X509Security
operator|||
name|binarySecurity
operator|instanceof
name|PKIPathSecurity
condition|)
block|{
name|X509Certificate
name|foundCert
init|=
operator|(
name|X509Certificate
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_X509_CERTIFICATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundCert
operator|.
name|equals
argument_list|(
name|cert
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|ST_SIGNED
operator|||
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|ST_UNSIGNED
condition|)
block|{
name|AssertionWrapper
name|assertionWrapper
init|=
operator|(
name|AssertionWrapper
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SAML_ASSERTION
argument_list|)
decl_stmt|;
name|SAMLKeyInfo
name|samlKeyInfo
init|=
name|assertionWrapper
operator|.
name|getSubjectKeyInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|samlKeyInfo
operator|!=
literal|null
condition|)
block|{
name|X509Certificate
index|[]
name|subjectCerts
init|=
name|samlKeyInfo
operator|.
name|getCerts
argument_list|()
decl_stmt|;
name|byte
index|[]
name|subjectSecretKey
init|=
name|samlKeyInfo
operator|.
name|getSecret
argument_list|()
decl_stmt|;
if|if
condition|(
name|cert
operator|!=
literal|null
operator|&&
name|subjectCerts
operator|!=
literal|null
operator|&&
name|cert
operator|.
name|equals
argument_list|(
name|subjectCerts
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|subjectSecretKey
operator|!=
literal|null
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|subjectSecretKey
argument_list|,
name|secret
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|publicKey
operator|!=
literal|null
condition|)
block|{
name|PublicKey
name|foundPublicKey
init|=
operator|(
name|PublicKey
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_PUBLIC_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|publicKey
operator|.
name|equals
argument_list|(
name|foundPublicKey
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|byte
index|[]
name|foundSecret
init|=
operator|(
name|byte
index|[]
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
decl_stmt|;
name|byte
index|[]
name|derivedKey
init|=
operator|(
name|byte
index|[]
operator|)
name|token
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ENCRYPTED_EPHEMERAL_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|foundSecret
operator|!=
literal|null
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|foundSecret
argument_list|,
name|secret
argument_list|)
operator|)
operator|||
operator|(
name|derivedKey
operator|!=
literal|null
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|derivedKey
argument_list|,
name|secret
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Validate the SignedParts or EncryptedParts policies      */
specifier|private
name|boolean
name|validateSignedEncryptedParts
parameter_list|(
name|SignedEncryptedParts
name|parts
parameter_list|,
name|boolean
name|content
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|protResults
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
parameter_list|)
block|{
if|if
condition|(
name|parts
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|parts
operator|.
name|isBody
argument_list|()
condition|)
block|{
name|SOAPMessage
name|soapMessage
init|=
name|message
operator|.
name|getContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Element
name|soapBody
init|=
literal|null
decl_stmt|;
try|try
block|{
name|soapBody
operator|=
name|soapMessage
operator|.
name|getSOAPBody
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|checkProtectionResult
argument_list|(
name|soapBody
argument_list|,
name|content
argument_list|,
name|protResults
argument_list|,
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
for|for
control|(
name|Header
name|h
range|:
name|parts
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|SOAPMessage
name|soapMessage
init|=
name|message
operator|.
name|getContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Element
name|soapHeader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|soapHeader
operator|=
name|soapMessage
operator|.
name|getSOAPHeader
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|List
argument_list|<
name|Element
argument_list|>
name|elements
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|elements
operator|=
name|DOMUtils
operator|.
name|getChildrenWithNamespace
argument_list|(
name|soapHeader
argument_list|,
name|h
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|elements
operator|=
name|DOMUtils
operator|.
name|getChildrenWithName
argument_list|(
name|soapHeader
argument_list|,
name|h
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|h
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Element
name|el
range|:
name|elements
control|)
block|{
if|if
condition|(
operator|!
name|checkProtectionResult
argument_list|(
name|el
argument_list|,
literal|false
argument_list|,
name|protResults
argument_list|,
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Check that an Element is signed or encrypted by one of the token results      */
specifier|private
name|boolean
name|checkProtectionResult
parameter_list|(
name|Element
name|elementToProtect
parameter_list|,
name|boolean
name|content
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|protResults
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
parameter_list|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|result
range|:
name|protResults
control|)
block|{
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|dataRefs
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataRefs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WSDataRef
name|dataRef
range|:
name|dataRefs
control|)
block|{
if|if
condition|(
name|elementToProtect
operator|==
name|dataRef
operator|.
name|getProtectedElement
argument_list|()
operator|&&
name|content
operator|==
name|dataRef
operator|.
name|isContent
argument_list|()
operator|&&
name|checkSignatureOrEncryptionResult
argument_list|(
name|result
argument_list|,
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Validate SignedElements or EncryptedElements policies      */
specifier|private
name|boolean
name|validateSignedEncryptedElements
parameter_list|(
name|SignedEncryptedElements
name|elements
parameter_list|,
name|boolean
name|content
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|protResults
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
parameter_list|)
block|{
if|if
condition|(
name|elements
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
name|elements
operator|.
name|getDeclaredNamespaces
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|xpaths
init|=
name|elements
operator|.
name|getXPathExpressions
argument_list|()
decl_stmt|;
if|if
condition|(
name|xpaths
operator|!=
literal|null
condition|)
block|{
name|SOAPMessage
name|soapMessage
init|=
name|message
operator|.
name|getContent
argument_list|(
name|SOAPMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Element
name|soapEnvelope
init|=
name|soapMessage
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|xPath
range|:
name|xpaths
control|)
block|{
if|if
condition|(
operator|!
name|checkXPathResult
argument_list|(
name|soapEnvelope
argument_list|,
name|xPath
argument_list|,
name|namespaces
argument_list|,
name|protResults
argument_list|,
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Check a particular XPath result      */
specifier|private
name|boolean
name|checkXPathResult
parameter_list|(
name|Element
name|soapEnvelope
parameter_list|,
name|String
name|xPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|protResults
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|tokenResults
parameter_list|)
block|{
comment|// XPathFactory and XPath are not thread-safe so we must recreate them
comment|// each request.
specifier|final
name|XPathFactory
name|factory
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
specifier|final
name|XPath
name|xpath
init|=
name|factory
operator|.
name|newXPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespaces
operator|!=
literal|null
condition|)
block|{
name|xpath
operator|.
name|setNamespaceContext
argument_list|(
operator|new
name|MapNamespaceContext
argument_list|(
name|namespaces
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// For each XPath
for|for
control|(
name|String
name|xpathString
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|xPath
argument_list|)
control|)
block|{
comment|// Get the matching nodes
name|NodeList
name|list
decl_stmt|;
try|try
block|{
name|list
operator|=
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
name|xpathString
argument_list|,
name|soapEnvelope
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// If we found nodes then we need to do the check.
if|if
condition|(
name|list
operator|.
name|getLength
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// For each matching element, check for a ref that
comment|// covers it.
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|list
operator|.
name|getLength
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
specifier|final
name|Element
name|el
init|=
operator|(
name|Element
operator|)
name|list
operator|.
name|item
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkProtectionResult
argument_list|(
name|el
argument_list|,
literal|false
argument_list|,
name|protResults
argument_list|,
name|tokenResults
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Return true if a token was signed, false otherwise.      */
specifier|private
name|boolean
name|isTokenSigned
parameter_list|(
name|Element
name|token
parameter_list|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|signedResult
range|:
name|signedResults
control|)
block|{
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|dataRefs
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|signedResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|WSDataRef
name|dataRef
range|:
name|dataRefs
control|)
block|{
if|if
condition|(
name|token
operator|==
name|dataRef
operator|.
name|getProtectedElement
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Return true if a token was encrypted, false otherwise.      */
specifier|private
name|boolean
name|isTokenEncrypted
parameter_list|(
name|Element
name|token
parameter_list|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|signedResult
range|:
name|encryptedResults
control|)
block|{
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|dataRefs
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|signedResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataRefs
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|WSDataRef
name|dataRef
range|:
name|dataRefs
control|)
block|{
if|if
condition|(
name|token
operator|==
name|dataRef
operator|.
name|getProtectedElement
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setUtResults
parameter_list|(
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|utResults
parameter_list|)
block|{
name|this
operator|.
name|utResults
operator|=
name|utResults
expr_stmt|;
block|}
specifier|public
name|void
name|setValidateUsernameToken
parameter_list|(
name|boolean
name|validateUsernameToken
parameter_list|)
block|{
name|this
operator|.
name|validateUsernameToken
operator|=
name|validateUsernameToken
expr_stmt|;
block|}
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|Element
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
specifier|public
name|void
name|setSignedElements
parameter_list|(
name|SignedEncryptedElements
name|signedElements
parameter_list|)
block|{
name|this
operator|.
name|signedElements
operator|=
name|signedElements
expr_stmt|;
block|}
specifier|public
name|void
name|setEncryptedElements
parameter_list|(
name|SignedEncryptedElements
name|encryptedElements
parameter_list|)
block|{
name|this
operator|.
name|encryptedElements
operator|=
name|encryptedElements
expr_stmt|;
block|}
specifier|public
name|void
name|setSignedParts
parameter_list|(
name|SignedEncryptedParts
name|signedParts
parameter_list|)
block|{
name|this
operator|.
name|signedParts
operator|=
name|signedParts
expr_stmt|;
block|}
specifier|public
name|void
name|setEncryptedParts
parameter_list|(
name|SignedEncryptedParts
name|encryptedParts
parameter_list|)
block|{
name|this
operator|.
name|encryptedParts
operator|=
name|encryptedParts
expr_stmt|;
block|}
block|}
end_class

end_unit

