begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|All
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|ExactlyOne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyContainingAssertion
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|TokenWrapper
extends|extends
name|AbstractSecurityAssertion
implements|implements
name|Assertion
implements|,
name|PolicyContainingAssertion
block|{
specifier|protected
name|PolicyBuilder
name|builder
decl_stmt|;
specifier|protected
name|Token
name|token
decl_stmt|;
specifier|public
name|TokenWrapper
parameter_list|(
name|SPConstants
name|version
parameter_list|,
name|PolicyBuilder
name|b
parameter_list|)
block|{
name|super
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|builder
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|void
name|setToken
parameter_list|(
name|Token
name|tok
parameter_list|)
block|{
name|token
operator|=
name|tok
expr_stmt|;
block|}
specifier|public
name|Token
name|getToken
parameter_list|()
block|{
return|return
name|token
return|;
block|}
specifier|public
name|PolicyComponent
name|normalize
parameter_list|()
block|{
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|All
name|all
init|=
operator|new
name|All
argument_list|()
decl_stmt|;
name|all
operator|.
name|addPolicyComponent
argument_list|(
name|token
operator|.
name|normalize
argument_list|()
argument_list|)
expr_stmt|;
name|all
operator|.
name|addPolicyComponent
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|all
return|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|Policy
name|getPolicy
parameter_list|()
block|{
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|Policy
name|p
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
name|ExactlyOne
name|ea
init|=
operator|new
name|ExactlyOne
argument_list|()
decl_stmt|;
name|p
operator|.
name|addPolicyComponent
argument_list|(
name|ea
argument_list|)
expr_stmt|;
name|All
name|all
init|=
operator|new
name|All
argument_list|()
decl_stmt|;
name|all
operator|.
name|addPolicyComponent
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|ea
operator|.
name|addPolicyComponent
argument_list|(
name|all
argument_list|)
expr_stmt|;
name|PolicyComponent
name|pc
init|=
name|p
operator|.
name|normalize
argument_list|(
name|builder
operator|.
name|getPolicyRegistry
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|pc
operator|instanceof
name|Policy
condition|)
block|{
return|return
operator|(
name|Policy
operator|)
name|pc
return|;
block|}
else|else
block|{
name|p
operator|=
operator|new
name|Policy
argument_list|()
expr_stmt|;
name|p
operator|.
name|addPolicyComponent
argument_list|(
name|pc
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

