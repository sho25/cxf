begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyhandlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSPasswordCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SAMLCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|bean
operator|.
name|KeyInfoBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|bean
operator|.
name|SubjectBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|util
operator|.
name|KeyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
operator|.
name|IncludeTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractTokenWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
operator|.
name|AlgorithmSuiteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Attachments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|ContentEncryptedElements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|EncryptedElements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|EncryptedParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|IssuedToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|KerberosToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|KeyValueToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Layout
operator|.
name|LayoutType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SamlToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SamlToken
operator|.
name|SamlTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SignedElements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SignedParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SupportingTokens
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SymmetricBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|UsernameToken
operator|.
name|PasswordType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Wss10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Wss11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|X509Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|X509Token
operator|.
name|TokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|stax
operator|.
name|PolicyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|ext
operator|.
name|WSSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|ext
operator|.
name|WSSConstants
operator|.
name|UsernameTokenPasswordType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|ext
operator|.
name|WSSSecurityProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|impl
operator|.
name|securityToken
operator|.
name|KerberosClientSecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|WSSecurityTokenConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|algorithms
operator|.
name|JCEMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|exceptions
operator|.
name|XMLSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|SecurePart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|SecurePart
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|impl
operator|.
name|securityToken
operator|.
name|GenericOutboundSecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|SecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|SecurityEventConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityEvent
operator|.
name|TokenSecurityEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|OutboundSecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SecurityTokenConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SecurityTokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|opensaml
operator|.
name|common
operator|.
name|SAMLVersion
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractStaxBindingHandler
extends|extends
name|AbstractCommonBindingHandler
block|{
specifier|protected
name|boolean
name|timestampAdded
decl_stmt|;
specifier|protected
name|boolean
name|signatureConfirmationAdded
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|SecurePart
argument_list|>
name|encryptedTokensList
init|=
operator|new
name|HashSet
argument_list|<
name|SecurePart
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|SecurePart
argument_list|>
name|endEncSuppTokMap
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|SecurePart
argument_list|>
name|endSuppTokMap
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|SecurePart
argument_list|>
name|sgndEndEncSuppTokMap
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|SecurePart
argument_list|>
name|sgndEndSuppTokMap
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|SecurityTokenProvider
argument_list|<
name|OutboundSecurityToken
argument_list|>
argument_list|>
name|outboundTokens
decl_stmt|;
specifier|private
specifier|final
name|WSSSecurityProperties
name|properties
decl_stmt|;
specifier|private
name|AbstractBinding
name|binding
decl_stmt|;
specifier|public
name|AbstractStaxBindingHandler
parameter_list|(
name|WSSSecurityProperties
name|properties
parameter_list|,
name|SoapMessage
name|msg
parameter_list|,
name|AbstractBinding
name|binding
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SecurityTokenProvider
argument_list|<
name|OutboundSecurityToken
argument_list|>
argument_list|>
name|outboundTokens
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
name|this
operator|.
name|binding
operator|=
name|binding
expr_stmt|;
name|this
operator|.
name|outboundTokens
operator|=
name|outboundTokens
expr_stmt|;
block|}
specifier|protected
name|SecurePart
name|addUsernameToken
parameter_list|(
name|UsernameToken
name|usernameToken
parameter_list|)
block|{
name|assertToken
argument_list|(
name|usernameToken
argument_list|)
expr_stmt|;
name|IncludeTokenType
name|includeToken
init|=
name|usernameToken
operator|.
name|getIncludeTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isTokenRequired
argument_list|(
name|includeToken
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Action
name|properties
operator|.
name|addAction
argument_list|(
name|WSSConstants
operator|.
name|USERNAMETOKEN
argument_list|)
expr_stmt|;
comment|// Password Type
name|PasswordType
name|passwordType
init|=
name|usernameToken
operator|.
name|getPasswordType
argument_list|()
decl_stmt|;
if|if
condition|(
name|passwordType
operator|==
name|PasswordType
operator|.
name|HashPassword
condition|)
block|{
name|properties
operator|.
name|setUsernameTokenPasswordType
argument_list|(
name|UsernameTokenPasswordType
operator|.
name|PASSWORD_DIGEST
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|passwordType
operator|==
name|PasswordType
operator|.
name|NoPassword
condition|)
block|{
name|properties
operator|.
name|setUsernameTokenPasswordType
argument_list|(
name|UsernameTokenPasswordType
operator|.
name|PASSWORD_NONE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|setUsernameTokenPasswordType
argument_list|(
name|UsernameTokenPasswordType
operator|.
name|PASSWORD_TEXT
argument_list|)
expr_stmt|;
block|}
comment|// Nonce + Created
if|if
condition|(
name|usernameToken
operator|.
name|isNonce
argument_list|()
condition|)
block|{
name|properties
operator|.
name|setAddUsernameTokenNonce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|usernameToken
operator|.
name|isCreated
argument_list|()
condition|)
block|{
name|properties
operator|.
name|setAddUsernameTokenCreated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Check if a CallbackHandler was specified
if|if
condition|(
name|properties
operator|.
name|getCallbackHandler
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|password
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|PASSWORD
argument_list|)
decl_stmt|;
if|if
condition|(
name|password
operator|!=
literal|null
condition|)
block|{
name|String
name|username
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|USERNAME
argument_list|)
decl_stmt|;
name|UTCallbackHandler
name|callbackHandler
init|=
operator|new
name|UTCallbackHandler
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|properties
operator|.
name|setCallbackHandler
argument_list|(
name|callbackHandler
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SecurePart
argument_list|(
name|WSSConstants
operator|.
name|TAG_wsse_UsernameToken
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|UTCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
specifier|final
name|String
name|username
decl_stmt|;
specifier|private
specifier|final
name|String
name|password
decl_stmt|;
specifier|public
name|UTCallbackHandler
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|WSPasswordCallback
condition|)
block|{
name|WSPasswordCallback
name|pwcb
init|=
operator|(
name|WSPasswordCallback
operator|)
name|callback
decl_stmt|;
if|if
condition|(
name|pwcb
operator|.
name|getIdentifier
argument_list|()
operator|.
name|equals
argument_list|(
name|username
argument_list|)
condition|)
block|{
name|pwcb
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|SecurePart
name|addKerberosToken
parameter_list|(
name|KerberosToken
name|token
parameter_list|,
name|boolean
name|signed
parameter_list|,
name|boolean
name|endorsing
parameter_list|,
name|boolean
name|encrypting
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|assertToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|IncludeTokenType
name|includeToken
init|=
name|token
operator|.
name|getIncludeTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isTokenRequired
argument_list|(
name|includeToken
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|SecurityToken
name|secToken
init|=
name|getSecurityToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|secToken
operator|==
literal|null
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"Could not find KerberosToken"
argument_list|)
expr_stmt|;
block|}
comment|// Convert to WSS4J token
specifier|final
name|KerberosClientSecurityToken
name|wss4jToken
init|=
operator|new
name|KerberosClientSecurityToken
argument_list|(
name|secToken
operator|.
name|getData
argument_list|()
argument_list|,
name|secToken
operator|.
name|getKey
argument_list|()
argument_list|,
name|secToken
operator|.
name|getId
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Key
name|getSecretKey
parameter_list|(
name|String
name|algorithmURI
parameter_list|)
throws|throws
name|XMLSecurityException
block|{
if|if
condition|(
name|secToken
operator|.
name|getSecret
argument_list|()
operator|!=
literal|null
operator|&&
name|algorithmURI
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|algorithmURI
argument_list|)
condition|)
block|{
return|return
name|KeyUtils
operator|.
name|prepareSecretKey
argument_list|(
name|algorithmURI
argument_list|,
name|secToken
operator|.
name|getSecret
argument_list|()
argument_list|)
return|;
block|}
return|return
name|secToken
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|wss4jToken
operator|.
name|setSha1Identifier
argument_list|(
name|secToken
operator|.
name|getSHA1
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SecurityTokenProvider
argument_list|<
name|OutboundSecurityToken
argument_list|>
name|kerberosSecurityTokenProvider
init|=
operator|new
name|SecurityTokenProvider
argument_list|<
name|OutboundSecurityToken
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OutboundSecurityToken
name|getSecurityToken
parameter_list|()
throws|throws
name|WSSecurityException
block|{
return|return
name|wss4jToken
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|wss4jToken
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|outboundTokens
operator|.
name|put
argument_list|(
name|WSSConstants
operator|.
name|PROP_USE_THIS_TOKEN_ID_FOR_KERBEROS
argument_list|,
name|kerberosSecurityTokenProvider
argument_list|)
expr_stmt|;
if|if
condition|(
name|encrypting
condition|)
block|{
name|outboundTokens
operator|.
name|put
argument_list|(
name|WSSConstants
operator|.
name|PROP_USE_THIS_TOKEN_ID_FOR_ENCRYPTION
argument_list|,
name|kerberosSecurityTokenProvider
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endorsing
condition|)
block|{
name|outboundTokens
operator|.
name|put
argument_list|(
name|WSSConstants
operator|.
name|PROP_USE_THIS_TOKEN_ID_FOR_SIGNATURE
argument_list|,
name|kerberosSecurityTokenProvider
argument_list|)
expr_stmt|;
block|}
comment|// Action
name|properties
operator|.
name|addAction
argument_list|(
name|WSSConstants
operator|.
name|KERBEROS_TOKEN
argument_list|)
expr_stmt|;
comment|/*         if (endorsing) {             String action = (String)config.get(ConfigurationConstants.ACTION);             config.put(ConfigurationConstants.ACTION,                 ConfigurationConstants.SIGNATURE_WITH_KERBEROS_TOKEN  + " " + action);             // config.put(ConfigurationConstants.SIG_KEY_ID, "DirectReference");         }         */
name|SecurePart
name|securePart
init|=
operator|new
name|SecurePart
argument_list|(
name|WSSConstants
operator|.
name|TAG_wsse_BinarySecurityToken
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|securePart
operator|.
name|setIdToSign
argument_list|(
name|wss4jToken
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|securePart
return|;
block|}
specifier|protected
name|SecurePart
name|addSamlToken
parameter_list|(
name|SamlToken
name|token
parameter_list|,
name|boolean
name|signed
parameter_list|,
name|boolean
name|endorsing
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|assertToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|IncludeTokenType
name|includeToken
init|=
name|token
operator|.
name|getIncludeTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isTokenRequired
argument_list|(
name|includeToken
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|//
comment|// Get the SAML CallbackHandler
comment|//
name|Object
name|o
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SAML_CALLBACK_HANDLER
argument_list|)
decl_stmt|;
name|CallbackHandler
name|handler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|CallbackHandler
condition|)
block|{
name|handler
operator|=
operator|(
name|CallbackHandler
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
name|handler
operator|=
operator|(
name|CallbackHandler
operator|)
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handler
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"No SAML CallbackHandler available"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|properties
operator|.
name|setSamlCallbackHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
comment|// Action
name|WSSConstants
operator|.
name|Action
name|actionToPerform
init|=
name|WSSConstants
operator|.
name|SAML_TOKEN_UNSIGNED
decl_stmt|;
if|if
condition|(
name|signed
operator|||
name|endorsing
condition|)
block|{
name|actionToPerform
operator|=
name|WSSConstants
operator|.
name|SAML_TOKEN_SIGNED
expr_stmt|;
block|}
name|properties
operator|.
name|addAction
argument_list|(
name|actionToPerform
argument_list|)
expr_stmt|;
name|QName
name|qname
init|=
name|WSSConstants
operator|.
name|TAG_saml2_Assertion
decl_stmt|;
name|SamlTokenType
name|tokenType
init|=
name|token
operator|.
name|getSamlTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenType
operator|==
name|SamlTokenType
operator|.
name|WssSamlV11Token10
operator|||
name|tokenType
operator|==
name|SamlTokenType
operator|.
name|WssSamlV11Token11
condition|)
block|{
name|qname
operator|=
name|WSSConstants
operator|.
name|TAG_saml_Assertion
expr_stmt|;
block|}
return|return
operator|new
name|SecurePart
argument_list|(
name|qname
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
return|;
block|}
specifier|protected
name|SecurePart
name|addIssuedToken
parameter_list|(
name|AbstractToken
name|token
parameter_list|,
name|SecurityToken
name|secToken
parameter_list|,
name|boolean
name|signed
parameter_list|,
name|boolean
name|endorsing
parameter_list|)
block|{
name|assertToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTokenRequired
argument_list|(
name|token
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|Element
name|el
init|=
name|secToken
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|el
operator|!=
literal|null
operator|&&
literal|"Assertion"
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
operator|(
name|WSSConstants
operator|.
name|NS_SAML
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|||
name|WSSConstants
operator|.
name|NS_SAML2
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|WSSConstants
operator|.
name|Action
name|actionToPerform
init|=
name|WSSConstants
operator|.
name|SAML_TOKEN_UNSIGNED
decl_stmt|;
if|if
condition|(
name|endorsing
condition|)
block|{
name|actionToPerform
operator|=
name|WSSConstants
operator|.
name|SAML_TOKEN_SIGNED
expr_stmt|;
block|}
name|properties
operator|.
name|addAction
argument_list|(
name|actionToPerform
argument_list|)
expr_stmt|;
comment|// Mock up a Subject so that the SAMLTokenOutProcessor can get access to the certificate
specifier|final
name|SubjectBean
name|subjectBean
decl_stmt|;
if|if
condition|(
name|signed
operator|||
name|endorsing
condition|)
block|{
name|KeyInfoBean
name|keyInfo
init|=
operator|new
name|KeyInfoBean
argument_list|()
decl_stmt|;
name|keyInfo
operator|.
name|setCertificate
argument_list|(
name|secToken
operator|.
name|getX509Certificate
argument_list|()
argument_list|)
expr_stmt|;
name|keyInfo
operator|.
name|setEphemeralKey
argument_list|(
name|secToken
operator|.
name|getSecret
argument_list|()
argument_list|)
expr_stmt|;
name|subjectBean
operator|=
operator|new
name|SubjectBean
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|subjectBean
operator|.
name|setKeyInfo
argument_list|(
name|keyInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|subjectBean
operator|=
literal|null
expr_stmt|;
block|}
name|CallbackHandler
name|callbackHandler
init|=
operator|new
name|CallbackHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
block|{
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|SAMLCallback
condition|)
block|{
name|SAMLCallback
name|samlCallback
init|=
operator|(
name|SAMLCallback
operator|)
name|callback
decl_stmt|;
name|samlCallback
operator|.
name|setAssertionElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|samlCallback
operator|.
name|setSubject
argument_list|(
name|subjectBean
argument_list|)
expr_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|samlCallback
operator|.
name|setSamlVersion
argument_list|(
name|SAMLVersion
operator|.
name|VERSION_11
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|samlCallback
operator|.
name|setSamlVersion
argument_list|(
name|SAMLVersion
operator|.
name|VERSION_20
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
decl_stmt|;
name|properties
operator|.
name|setSamlCallbackHandler
argument_list|(
name|callbackHandler
argument_list|)
expr_stmt|;
name|QName
name|qname
init|=
name|WSSConstants
operator|.
name|TAG_saml2_Assertion
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|qname
operator|=
name|WSSConstants
operator|.
name|TAG_saml_Assertion
expr_stmt|;
block|}
return|return
operator|new
name|SecurePart
argument_list|(
name|qname
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
comment|// An Encrypted Token...just include it as is
name|properties
operator|.
name|addAction
argument_list|(
name|WSSConstants
operator|.
name|CUSTOM_TOKEN
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|storeSecurityToken
parameter_list|(
name|SecurityToken
name|tok
parameter_list|)
block|{
name|SecurityTokenConstants
operator|.
name|TokenType
name|tokenType
init|=
name|WSSecurityTokenConstants
operator|.
name|EncryptedKeyToken
decl_stmt|;
if|if
condition|(
name|tok
operator|.
name|getTokenType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tok
operator|.
name|getTokenType
argument_list|()
operator|.
name|startsWith
argument_list|(
name|WSSConstants
operator|.
name|NS_KERBEROS11_TOKEN_PROFILE
argument_list|)
condition|)
block|{
name|tokenType
operator|=
name|WSSecurityTokenConstants
operator|.
name|KerberosToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tok
operator|.
name|getTokenType
argument_list|()
operator|.
name|startsWith
argument_list|(
name|WSSConstants
operator|.
name|NS_SAML10_TOKEN_PROFILE
argument_list|)
operator|||
name|tok
operator|.
name|getTokenType
argument_list|()
operator|.
name|startsWith
argument_list|(
name|WSSConstants
operator|.
name|NS_SAML11_TOKEN_PROFILE
argument_list|)
condition|)
block|{
name|tokenType
operator|=
name|WSSecurityTokenConstants
operator|.
name|Saml11Token
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tok
operator|.
name|getTokenType
argument_list|()
operator|.
name|startsWith
argument_list|(
name|WSSConstants
operator|.
name|NS_WSC_05_02
argument_list|)
operator|||
name|tok
operator|.
name|getTokenType
argument_list|()
operator|.
name|startsWith
argument_list|(
name|WSSConstants
operator|.
name|NS_WSC_05_12
argument_list|)
condition|)
block|{
name|tokenType
operator|=
name|WSSecurityTokenConstants
operator|.
name|SecureConversationToken
expr_stmt|;
block|}
block|}
specifier|final
name|Key
name|key
init|=
name|tok
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|secret
init|=
name|tok
operator|.
name|getSecret
argument_list|()
decl_stmt|;
specifier|final
name|X509Certificate
index|[]
name|certs
init|=
operator|new
name|X509Certificate
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|tok
operator|.
name|getX509Certificate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|certs
index|[
literal|0
index|]
operator|=
name|tok
operator|.
name|getX509Certificate
argument_list|()
expr_stmt|;
block|}
specifier|final
name|GenericOutboundSecurityToken
name|encryptedKeySecurityToken
init|=
operator|new
name|GenericOutboundSecurityToken
argument_list|(
name|tok
operator|.
name|getId
argument_list|()
argument_list|,
name|tokenType
argument_list|,
name|key
argument_list|,
name|certs
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Key
name|getSecretKey
parameter_list|(
name|String
name|algorithmURI
parameter_list|)
throws|throws
name|XMLSecurityException
block|{
if|if
condition|(
name|secret
operator|!=
literal|null
operator|&&
name|algorithmURI
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|algorithmURI
argument_list|)
condition|)
block|{
return|return
name|KeyUtils
operator|.
name|prepareSecretKey
argument_list|(
name|algorithmURI
argument_list|,
name|secret
argument_list|)
return|;
block|}
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
return|return
name|key
return|;
block|}
if|if
condition|(
name|secret
operator|!=
literal|null
condition|)
block|{
name|String
name|jceAlg
init|=
name|JCEMapper
operator|.
name|getJCEKeyAlgorithmFromURI
argument_list|(
name|algorithmURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|jceAlg
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|jceAlg
argument_list|)
condition|)
block|{
name|jceAlg
operator|=
literal|"HmacSHA1"
expr_stmt|;
block|}
return|return
operator|new
name|SecretKeySpec
argument_list|(
name|secret
argument_list|,
name|jceAlg
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|getSecretKey
argument_list|(
name|algorithmURI
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|SecurityTokenProvider
argument_list|<
name|OutboundSecurityToken
argument_list|>
name|encryptedKeySecurityTokenProvider
init|=
operator|new
name|SecurityTokenProvider
argument_list|<
name|OutboundSecurityToken
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|OutboundSecurityToken
name|getSecurityToken
parameter_list|()
throws|throws
name|XMLSecurityException
block|{
return|return
name|encryptedKeySecurityToken
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|encryptedKeySecurityToken
operator|.
name|getId
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|encryptedKeySecurityToken
operator|.
name|setSha1Identifier
argument_list|(
name|tok
operator|.
name|getSHA1
argument_list|()
argument_list|)
expr_stmt|;
name|outboundTokens
operator|.
name|put
argument_list|(
name|WSSConstants
operator|.
name|PROP_USE_THIS_TOKEN_ID_FOR_ENCRYPTION
argument_list|,
name|encryptedKeySecurityTokenProvider
argument_list|)
expr_stmt|;
name|outboundTokens
operator|.
name|put
argument_list|(
name|WSSConstants
operator|.
name|PROP_USE_THIS_TOKEN_ID_FOR_SIGNATURE
argument_list|,
name|encryptedKeySecurityTokenProvider
argument_list|)
expr_stmt|;
name|outboundTokens
operator|.
name|put
argument_list|(
name|WSSConstants
operator|.
name|PROP_USE_THIS_TOKEN_ID_FOR_CUSTOM_TOKEN
argument_list|,
name|encryptedKeySecurityTokenProvider
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|configureTimestamp
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
if|if
condition|(
name|binding
operator|!=
literal|null
operator|&&
name|binding
operator|.
name|isIncludeTimestamp
argument_list|()
condition|)
block|{
name|timestampAdded
operator|=
literal|true
expr_stmt|;
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|binding
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|SPConstants
operator|.
name|INCLUDE_TIMESTAMP
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|configureLayout
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|LAYOUT
argument_list|)
decl_stmt|;
name|Layout
name|layout
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|layout
operator|=
operator|(
name|Layout
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|layoutTypeAis
init|=
name|aim
operator|.
name|get
argument_list|(
name|layout
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|layoutTypeAis
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|layoutAi
range|:
name|layoutTypeAis
control|)
block|{
name|layoutAi
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|layout
operator|!=
literal|null
operator|&&
name|layout
operator|.
name|getLayoutType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|layout
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|layout
operator|.
name|getLayoutType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|timestampAdded
condition|)
block|{
return|return;
block|}
name|boolean
name|timestampLast
init|=
name|layout
operator|!=
literal|null
operator|&&
name|layout
operator|.
name|getLayoutType
argument_list|()
operator|==
name|LayoutType
operator|.
name|LaxTsLast
decl_stmt|;
name|WSSConstants
operator|.
name|Action
name|actionToPerform
init|=
name|WSSConstants
operator|.
name|TIMESTAMP
decl_stmt|;
name|List
argument_list|<
name|WSSConstants
operator|.
name|Action
argument_list|>
name|actionList
init|=
name|properties
operator|.
name|getActions
argument_list|()
decl_stmt|;
if|if
condition|(
name|timestampLast
condition|)
block|{
name|actionList
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|actionToPerform
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actionList
operator|.
name|add
argument_list|(
name|actionToPerform
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|WSSSecurityProperties
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
specifier|protected
name|void
name|configureSignature
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|,
name|AbstractToken
name|token
parameter_list|,
name|boolean
name|attached
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
name|token
operator|instanceof
name|X509Token
condition|)
block|{
name|X509Token
name|x509Token
init|=
operator|(
name|X509Token
operator|)
name|token
decl_stmt|;
name|TokenType
name|tokenType
init|=
name|x509Token
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenType
operator|==
name|TokenType
operator|.
name|WssX509PkiPathV1Token10
operator|||
name|tokenType
operator|==
name|TokenType
operator|.
name|WssX509PkiPathV1Token11
condition|)
block|{
name|properties
operator|.
name|setUseSingleCert
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|properties
operator|.
name|setSignatureKeyIdentifier
argument_list|(
name|getKeyIdentifierType
argument_list|(
name|wrapper
argument_list|,
name|token
argument_list|)
argument_list|)
expr_stmt|;
comment|// Find out do we also need to include the token as per the Inclusion requirement
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier
name|keyIdentifier
init|=
name|properties
operator|.
name|getSignatureKeyIdentifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|instanceof
name|X509Token
operator|&&
name|isTokenRequired
argument_list|(
name|token
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
operator|&&
operator|(
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier_IssuerSerial
operator|.
name|equals
argument_list|(
name|keyIdentifier
argument_list|)
operator|||
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier_ThumbprintIdentifier
operator|.
name|equals
argument_list|(
name|keyIdentifier
argument_list|)
operator|||
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier_SecurityTokenDirectReference
operator|.
name|equals
argument_list|(
name|keyIdentifier
argument_list|)
operator|)
condition|)
block|{
name|properties
operator|.
name|setIncludeSignatureToken
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|setIncludeSignatureToken
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|String
name|userNameKey
init|=
name|SecurityConstants
operator|.
name|SIGNATURE_USERNAME
decl_stmt|;
if|if
condition|(
name|binding
operator|instanceof
name|SymmetricBinding
condition|)
block|{
name|userNameKey
operator|=
name|SecurityConstants
operator|.
name|ENCRYPT_USERNAME
expr_stmt|;
name|properties
operator|.
name|setSignatureAlgorithm
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|setSignatureAlgorithm
argument_list|(
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAsymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|sigUser
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|userNameKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|sigUser
operator|==
literal|null
condition|)
block|{
name|sigUser
operator|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|USERNAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sigUser
operator|!=
literal|null
operator|&&
name|properties
operator|.
name|getSignatureUser
argument_list|()
operator|==
literal|null
condition|)
block|{
name|properties
operator|.
name|setSignatureUser
argument_list|(
name|sigUser
argument_list|)
expr_stmt|;
block|}
name|AlgorithmSuiteType
name|algType
init|=
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAlgorithmSuiteType
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setSignatureDigestAlgorithm
argument_list|(
name|algType
operator|.
name|getDigest
argument_list|()
argument_list|)
expr_stmt|;
comment|// sig.setSigCanonicalization(binding.getAlgorithmSuite().getC14n().getValue());
block|}
specifier|protected
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier
name|getKeyIdentifierType
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|,
name|AbstractToken
name|token
parameter_list|)
block|{
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier
name|identifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|token
operator|instanceof
name|X509Token
condition|)
block|{
name|X509Token
name|x509Token
init|=
operator|(
name|X509Token
operator|)
name|token
decl_stmt|;
if|if
condition|(
name|x509Token
operator|.
name|isRequireIssuerSerialReference
argument_list|()
condition|)
block|{
name|identifier
operator|=
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier_IssuerSerial
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x509Token
operator|.
name|isRequireKeyIdentifierReference
argument_list|()
condition|)
block|{
name|identifier
operator|=
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier_SkiKeyIdentifier
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x509Token
operator|.
name|isRequireThumbprintReference
argument_list|()
condition|)
block|{
name|identifier
operator|=
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier_ThumbprintIdentifier
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|KeyValueToken
condition|)
block|{
name|identifier
operator|=
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier_KeyValue
expr_stmt|;
block|}
if|if
condition|(
name|identifier
operator|!=
literal|null
condition|)
block|{
return|return
name|identifier
return|;
block|}
if|if
condition|(
name|token
operator|.
name|getIncludeTokenType
argument_list|()
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_NEVER
condition|)
block|{
name|Wss10
name|wss
init|=
name|getWss10
argument_list|()
decl_stmt|;
if|if
condition|(
name|wss
operator|==
literal|null
operator|||
name|wss
operator|.
name|isMustSupportRefKeyIdentifier
argument_list|()
condition|)
block|{
name|identifier
operator|=
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier_SkiKeyIdentifier
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wss
operator|.
name|isMustSupportRefIssuerSerial
argument_list|()
condition|)
block|{
name|identifier
operator|=
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier_IssuerSerial
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|wss
operator|instanceof
name|Wss11
operator|&&
operator|(
operator|(
name|Wss11
operator|)
name|wss
operator|)
operator|.
name|isMustSupportRefThumbprint
argument_list|()
condition|)
block|{
name|identifier
operator|=
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier_ThumbprintIdentifier
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|getIncludeTokenType
argument_list|()
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS_TO_RECIPIENT
operator|&&
operator|!
name|isRequestor
argument_list|()
operator|&&
name|token
operator|instanceof
name|X509Token
condition|)
block|{
name|identifier
operator|=
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier_IssuerSerial
expr_stmt|;
block|}
if|if
condition|(
name|identifier
operator|!=
literal|null
condition|)
block|{
return|return
name|identifier
return|;
block|}
return|return
name|WSSecurityTokenConstants
operator|.
name|KeyIdentifier_SecurityTokenDirectReference
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|SecurePart
argument_list|>
name|handleSupportingTokens
parameter_list|(
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|tokens
parameter_list|,
name|boolean
name|signed
parameter_list|,
name|boolean
name|endorse
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|SecurePart
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|AbstractToken
argument_list|,
name|SecurePart
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokens
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Assertion
name|pa
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|pa
operator|instanceof
name|SupportingTokens
condition|)
block|{
name|handleSupportingTokens
argument_list|(
operator|(
name|SupportingTokens
operator|)
name|pa
argument_list|,
name|signed
argument_list|,
name|endorse
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|SecurePart
argument_list|>
name|handleSupportingTokens
parameter_list|(
name|SupportingTokens
name|suppTokens
parameter_list|,
name|boolean
name|signed
parameter_list|,
name|boolean
name|endorse
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|handleSupportingTokens
argument_list|(
name|suppTokens
argument_list|,
name|signed
argument_list|,
name|endorse
argument_list|,
operator|new
name|HashMap
argument_list|<
name|AbstractToken
argument_list|,
name|SecurePart
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|SecurePart
argument_list|>
name|handleSupportingTokens
parameter_list|(
name|SupportingTokens
name|suppTokens
parameter_list|,
name|boolean
name|signed
parameter_list|,
name|boolean
name|endorse
parameter_list|,
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|SecurePart
argument_list|>
name|ret
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|suppTokens
operator|==
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
for|for
control|(
name|AbstractToken
name|token
range|:
name|suppTokens
operator|.
name|getTokens
argument_list|()
control|)
block|{
name|assertToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isTokenRequired
argument_list|(
name|token
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|token
operator|instanceof
name|UsernameToken
condition|)
block|{
name|handleUsernameTokenSupportingToken
argument_list|(
operator|(
name|UsernameToken
operator|)
name|token
argument_list|,
name|endorse
argument_list|,
name|suppTokens
operator|.
name|isEncryptedToken
argument_list|()
argument_list|,
name|ret
argument_list|)
expr_stmt|;
comment|/* TODO else if (isRequestor()&& (token instanceof IssuedToken                     || token instanceof SecureConversationToken                     || token instanceof SecurityContextToken                     || token instanceof KerberosToken)) {              } */
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|IssuedToken
condition|)
block|{
name|SecurityToken
name|sigTok
init|=
name|getSecurityToken
argument_list|()
decl_stmt|;
name|SecurePart
name|securePart
init|=
name|addIssuedToken
argument_list|(
operator|(
name|IssuedToken
operator|)
name|token
argument_list|,
name|sigTok
argument_list|,
name|signed
argument_list|,
name|endorse
argument_list|)
decl_stmt|;
if|if
condition|(
name|securePart
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|securePart
argument_list|)
expr_stmt|;
if|if
condition|(
name|suppTokens
operator|.
name|isEncryptedToken
argument_list|()
condition|)
block|{
name|encryptedTokensList
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|KerberosToken
condition|)
block|{
name|SecurePart
name|securePart
init|=
name|addKerberosToken
argument_list|(
operator|(
name|KerberosToken
operator|)
name|token
argument_list|,
name|signed
argument_list|,
name|endorse
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|securePart
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|securePart
argument_list|)
expr_stmt|;
if|if
condition|(
name|suppTokens
operator|.
name|isEncryptedToken
argument_list|()
condition|)
block|{
name|encryptedTokensList
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|X509Token
operator|||
name|token
operator|instanceof
name|KeyValueToken
condition|)
block|{
name|assertToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|configureSignature
argument_list|(
name|suppTokens
argument_list|,
name|token
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|suppTokens
operator|.
name|isEncryptedToken
argument_list|()
condition|)
block|{
name|SecurePart
name|part
init|=
operator|new
name|SecurePart
argument_list|(
name|WSSConstants
operator|.
name|TAG_wsse_BinarySecurityToken
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|encryptedTokensList
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|put
argument_list|(
name|token
argument_list|,
operator|new
name|SecurePart
argument_list|(
name|WSSConstants
operator|.
name|TAG_dsig_Signature
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|SamlToken
condition|)
block|{
name|SecurePart
name|securePart
init|=
name|addSamlToken
argument_list|(
operator|(
name|SamlToken
operator|)
name|token
argument_list|,
name|signed
argument_list|,
name|endorse
argument_list|)
decl_stmt|;
if|if
condition|(
name|securePart
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|securePart
argument_list|)
expr_stmt|;
if|if
condition|(
name|suppTokens
operator|.
name|isEncryptedToken
argument_list|()
condition|)
block|{
name|encryptedTokensList
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|void
name|handleUsernameTokenSupportingToken
parameter_list|(
name|UsernameToken
name|token
parameter_list|,
name|boolean
name|endorse
parameter_list|,
name|boolean
name|encryptedToken
parameter_list|,
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|SecurePart
argument_list|>
name|ret
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|endorse
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Endorsing UsernameTokens are not supported in the streaming code"
argument_list|)
throw|;
block|}
else|else
block|{
name|SecurePart
name|securePart
init|=
name|addUsernameToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|securePart
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|securePart
argument_list|)
expr_stmt|;
comment|//WebLogic and WCF always encrypt these
comment|//See:  http://e-docs.bea.com/wls/docs103/webserv_intro/interop.html
comment|//encryptedTokensIdList.add(utBuilder.getId());
if|if
condition|(
name|encryptedToken
operator|||
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|SecurityConstants
operator|.
name|ALWAYS_ENCRYPT_UT
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|encryptedTokensList
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|addSupportingTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|sgndSuppTokens
init|=
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|SecurePart
argument_list|>
name|sigSuppTokMap
init|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndSuppTokens
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|sgndSuppTokens
operator|=
name|findAndAssertPolicy
argument_list|(
name|SP11Constants
operator|.
name|SIGNED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|sigSuppTokMap
operator|.
name|putAll
argument_list|(
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndSuppTokens
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|endSuppTokens
init|=
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|ENDORSING_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|endSuppTokMap
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|endSuppTokens
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endSuppTokens
operator|=
name|findAndAssertPolicy
argument_list|(
name|SP11Constants
operator|.
name|ENDORSING_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|endSuppTokMap
operator|.
name|putAll
argument_list|(
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|endSuppTokens
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|sgndEndSuppTokens
init|=
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_ENDORSING_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|sgndEndSuppTokMap
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndEndSuppTokens
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sgndEndSuppTokens
operator|=
name|findAndAssertPolicy
argument_list|(
name|SP11Constants
operator|.
name|SIGNED_ENDORSING_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|sgndEndSuppTokMap
operator|.
name|putAll
argument_list|(
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndEndSuppTokens
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|sgndEncryptedSuppTokens
init|=
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|SecurePart
argument_list|>
name|sgndEncSuppTokMap
init|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndEncryptedSuppTokens
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|endorsingEncryptedSuppTokens
init|=
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|endEncSuppTokMap
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|endorsingEncryptedSuppTokens
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|sgndEndEncSuppTokens
init|=
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|sgndEndEncSuppTokMap
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndEndEncSuppTokens
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|supportingToks
init|=
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|supportingToks
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|supportingToks
operator|=
name|findAndAssertPolicy
argument_list|(
name|SP11Constants
operator|.
name|SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|supportingToks
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|encryptedSupportingToks
init|=
name|findAndAssertPolicy
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|encryptedSupportingToks
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//Setup signature parts
name|addSignatureParts
argument_list|(
name|sigSuppTokMap
argument_list|)
expr_stmt|;
name|addSignatureParts
argument_list|(
name|sgndEncSuppTokMap
argument_list|)
expr_stmt|;
name|addSignatureParts
argument_list|(
name|sgndEndSuppTokMap
argument_list|)
expr_stmt|;
name|addSignatureParts
argument_list|(
name|sgndEndEncSuppTokMap
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addSignatureParts
parameter_list|(
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|SecurePart
argument_list|>
name|tokenMap
parameter_list|)
block|{
for|for
control|(
name|AbstractToken
name|token
range|:
name|tokenMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|SecurePart
name|part
init|=
name|tokenMap
operator|.
name|get
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|QName
name|name
init|=
name|part
operator|.
name|getName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|WSSConstants
operator|.
name|Action
argument_list|>
name|actionList
init|=
name|properties
operator|.
name|getActions
argument_list|()
decl_stmt|;
comment|// Don't add a signed SAML Token as a part, as it will be automatically signed by WSS4J
if|if
condition|(
operator|!
operator|(
operator|(
name|WSSConstants
operator|.
name|TAG_saml_Assertion
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|WSSConstants
operator|.
name|TAG_saml2_Assertion
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
operator|&&
name|actionList
operator|!=
literal|null
operator|&&
name|actionList
operator|.
name|contains
argument_list|(
name|WSSConstants
operator|.
name|SAML_TOKEN_SIGNED
argument_list|)
operator|)
condition|)
block|{
name|properties
operator|.
name|addSignaturePart
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|addSignatureConfirmation
parameter_list|(
name|List
argument_list|<
name|SecurePart
argument_list|>
name|sigParts
parameter_list|)
block|{
name|Wss10
name|wss10
init|=
name|getWss10
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|wss10
operator|instanceof
name|Wss11
operator|)
operator|||
operator|!
operator|(
operator|(
name|Wss11
operator|)
name|wss10
operator|)
operator|.
name|isRequireSignatureConfirmation
argument_list|()
condition|)
block|{
comment|//If we don't require sig confirmation simply go back :-)
return|return;
block|}
comment|// Enable SignatureConfirmation
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|properties
operator|.
name|setEnableSignatureConfirmationVerification
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|getActions
argument_list|()
operator|.
name|add
argument_list|(
name|WSSConstants
operator|.
name|SIGNATURE_CONFIRMATION
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sigParts
operator|!=
literal|null
condition|)
block|{
name|SecurePart
name|securePart
init|=
operator|new
name|SecurePart
argument_list|(
name|WSSConstants
operator|.
name|TAG_wsse11_SignatureConfirmation
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|sigParts
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
name|signatureConfirmationAdded
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Identifies the portions of the message to be signed      */
specifier|protected
name|List
argument_list|<
name|SecurePart
argument_list|>
name|getSignedParts
parameter_list|()
throws|throws
name|SOAPException
block|{
name|SignedParts
name|parts
init|=
literal|null
decl_stmt|;
name|SignedElements
name|elements
init|=
literal|null
decl_stmt|;
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_PARTS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|parts
operator|=
operator|(
name|SignedParts
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SIGNED_ELEMENTS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|elements
operator|=
operator|(
name|SignedElements
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|SecurePart
argument_list|>
name|signedParts
init|=
operator|new
name|ArrayList
argument_list|<
name|SecurePart
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parts
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parts
operator|.
name|isBody
argument_list|()
condition|)
block|{
name|QName
name|soapBody
init|=
operator|new
name|QName
argument_list|(
name|WSSConstants
operator|.
name|NS_SOAP12
argument_list|,
literal|"Body"
argument_list|)
decl_stmt|;
name|SecurePart
name|securePart
init|=
operator|new
name|SecurePart
argument_list|(
name|soapBody
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|signedParts
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Header
name|head
range|:
name|parts
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|String
name|localName
init|=
name|head
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|localName
operator|==
literal|null
condition|)
block|{
name|localName
operator|=
literal|"*"
expr_stmt|;
block|}
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|head
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|localName
argument_list|)
decl_stmt|;
name|SecurePart
name|securePart
init|=
operator|new
name|SecurePart
argument_list|(
name|qname
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|securePart
operator|.
name|setRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|signedParts
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
name|Attachments
name|attachments
init|=
name|parts
operator|.
name|getAttachments
argument_list|()
decl_stmt|;
if|if
condition|(
name|attachments
operator|!=
literal|null
condition|)
block|{
name|Modifier
name|modifier
init|=
name|Modifier
operator|.
name|Element
decl_stmt|;
if|if
condition|(
name|attachments
operator|.
name|isContentSignatureTransform
argument_list|()
condition|)
block|{
name|modifier
operator|=
name|Modifier
operator|.
name|Content
expr_stmt|;
block|}
name|SecurePart
name|securePart
init|=
operator|new
name|SecurePart
argument_list|(
literal|"cid:Attachments"
argument_list|,
name|modifier
argument_list|)
decl_stmt|;
name|securePart
operator|.
name|setRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|signedParts
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|elements
operator|!=
literal|null
operator|&&
name|elements
operator|.
name|getXPaths
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XPath
name|xPath
range|:
name|elements
operator|.
name|getXPaths
argument_list|()
control|)
block|{
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
init|=
name|PolicyUtils
operator|.
name|getElementPath
argument_list|(
name|xPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qnames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SecurePart
name|securePart
init|=
operator|new
name|SecurePart
argument_list|(
name|qnames
operator|.
name|get
argument_list|(
name|qnames
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|signedParts
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|signedParts
return|;
block|}
comment|/**      * Identifies the portions of the message to be encrypted      */
specifier|protected
name|List
argument_list|<
name|SecurePart
argument_list|>
name|getEncryptedParts
parameter_list|()
throws|throws
name|SOAPException
block|{
name|EncryptedParts
name|parts
init|=
literal|null
decl_stmt|;
name|EncryptedElements
name|elements
init|=
literal|null
decl_stmt|;
name|ContentEncryptedElements
name|celements
init|=
literal|null
decl_stmt|;
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ENCRYPTED_PARTS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|parts
operator|=
operator|(
name|EncryptedParts
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|elements
operator|=
operator|(
name|EncryptedElements
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|CONTENT_ENCRYPTED_ELEMENTS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|celements
operator|=
operator|(
name|ContentEncryptedElements
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|SecurePart
argument_list|>
name|encryptedParts
init|=
operator|new
name|ArrayList
argument_list|<
name|SecurePart
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parts
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parts
operator|.
name|isBody
argument_list|()
condition|)
block|{
name|QName
name|soapBody
init|=
operator|new
name|QName
argument_list|(
name|WSSConstants
operator|.
name|NS_SOAP12
argument_list|,
literal|"Body"
argument_list|)
decl_stmt|;
name|SecurePart
name|securePart
init|=
operator|new
name|SecurePart
argument_list|(
name|soapBody
argument_list|,
name|Modifier
operator|.
name|Content
argument_list|)
decl_stmt|;
name|encryptedParts
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Header
name|head
range|:
name|parts
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|String
name|localName
init|=
name|head
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|localName
operator|==
literal|null
condition|)
block|{
name|localName
operator|=
literal|"*"
expr_stmt|;
block|}
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|head
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|localName
argument_list|)
decl_stmt|;
name|SecurePart
name|securePart
init|=
operator|new
name|SecurePart
argument_list|(
name|qname
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|securePart
operator|.
name|setRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|encryptedParts
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
name|Attachments
name|attachments
init|=
name|parts
operator|.
name|getAttachments
argument_list|()
decl_stmt|;
if|if
condition|(
name|attachments
operator|!=
literal|null
condition|)
block|{
name|SecurePart
name|securePart
init|=
operator|new
name|SecurePart
argument_list|(
literal|"cid:Attachments"
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|securePart
operator|.
name|setRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|encryptedParts
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|elements
operator|!=
literal|null
operator|&&
name|elements
operator|.
name|getXPaths
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XPath
name|xPath
range|:
name|elements
operator|.
name|getXPaths
argument_list|()
control|)
block|{
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
init|=
name|PolicyUtils
operator|.
name|getElementPath
argument_list|(
name|xPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qnames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SecurePart
name|securePart
init|=
operator|new
name|SecurePart
argument_list|(
name|qnames
operator|.
name|get
argument_list|(
name|qnames
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|encryptedParts
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|celements
operator|!=
literal|null
operator|&&
name|celements
operator|.
name|getXPaths
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XPath
name|xPath
range|:
name|celements
operator|.
name|getXPaths
argument_list|()
control|)
block|{
name|List
argument_list|<
name|QName
argument_list|>
name|qnames
init|=
name|PolicyUtils
operator|.
name|getElementPath
argument_list|(
name|xPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qnames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SecurePart
name|securePart
init|=
operator|new
name|SecurePart
argument_list|(
name|qnames
operator|.
name|get
argument_list|(
name|qnames
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|Modifier
operator|.
name|Content
argument_list|)
decl_stmt|;
name|encryptedParts
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|encryptedParts
return|;
block|}
specifier|protected
specifier|static
class|class
name|TokenStoreCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
name|CallbackHandler
name|internal
decl_stmt|;
specifier|private
name|TokenStore
name|store
decl_stmt|;
specifier|public
name|TokenStoreCallbackHandler
parameter_list|(
name|CallbackHandler
name|in
parameter_list|,
name|TokenStore
name|st
parameter_list|)
block|{
name|internal
operator|=
name|in
expr_stmt|;
name|store
operator|=
name|st
expr_stmt|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callbacks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|WSPasswordCallback
name|pc
init|=
operator|(
name|WSPasswordCallback
operator|)
name|callbacks
index|[
name|i
index|]
decl_stmt|;
name|String
name|id
init|=
name|pc
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|SecurityToken
name|token
init|=
name|store
operator|.
name|getToken
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|token
operator|.
name|getSHA1
argument_list|()
operator|==
literal|null
operator|&&
name|pc
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|token
operator|.
name|setSHA1
argument_list|(
name|getSHA1
argument_list|(
name|pc
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create another cache entry with the SHA1 Identifier as the key
comment|// for easy retrieval
name|store
operator|.
name|add
argument_list|(
name|token
operator|.
name|getSHA1
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
name|pc
operator|.
name|setKey
argument_list|(
name|token
operator|.
name|getSecret
argument_list|()
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setCustomToken
argument_list|(
name|token
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|internal
operator|!=
literal|null
condition|)
block|{
name|internal
operator|.
name|handle
argument_list|(
name|callbacks
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SecurityToken
name|findInboundSecurityToken
parameter_list|(
name|SecurityEventConstants
operator|.
name|Event
name|event
parameter_list|)
throws|throws
name|XMLSecurityException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|List
argument_list|<
name|SecurityEvent
argument_list|>
name|incomingEventList
init|=
operator|(
name|List
argument_list|<
name|SecurityEvent
argument_list|>
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|SecurityEvent
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".in"
argument_list|)
decl_stmt|;
if|if
condition|(
name|incomingEventList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SecurityEvent
name|incomingEvent
range|:
name|incomingEventList
control|)
block|{
if|if
condition|(
name|event
operator|==
name|incomingEvent
operator|.
name|getSecurityEventType
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|securityToken
operator|.
name|SecurityToken
name|token
init|=
operator|(
operator|(
name|TokenSecurityEvent
argument_list|<
name|?
argument_list|>
operator|)
name|incomingEvent
operator|)
operator|.
name|getSecurityToken
argument_list|()
decl_stmt|;
return|return
name|token
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

