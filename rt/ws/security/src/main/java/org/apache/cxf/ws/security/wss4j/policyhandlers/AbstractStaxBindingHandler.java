begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyhandlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ConfigurationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
operator|.
name|IncludeTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractTokenWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
operator|.
name|AlgorithmSuiteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|KeyValueToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Layout
operator|.
name|LayoutType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SamlToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SamlToken
operator|.
name|SamlTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SupportingTokens
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|UsernameToken
operator|.
name|PasswordType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Wss10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Wss11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|X509Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|X509Token
operator|.
name|TokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|stax
operator|.
name|ext
operator|.
name|WSSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|SecurePart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|stax
operator|.
name|ext
operator|.
name|SecurePart
operator|.
name|Modifier
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractStaxBindingHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractStaxBindingHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|timestampAdded
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|SecurePart
argument_list|>
name|encryptedTokensList
init|=
operator|new
name|HashSet
argument_list|<
name|SecurePart
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
specifier|private
specifier|final
name|SoapMessage
name|message
decl_stmt|;
specifier|public
name|AbstractStaxBindingHandler
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
name|SoapMessage
name|msg
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|msg
expr_stmt|;
block|}
specifier|protected
name|SecurePart
name|addUsernameToken
parameter_list|(
name|UsernameToken
name|usernameToken
parameter_list|)
block|{
name|IncludeTokenType
name|includeToken
init|=
name|usernameToken
operator|.
name|getIncludeTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isTokenRequired
argument_list|(
name|includeToken
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|getProperties
argument_list|()
decl_stmt|;
comment|// Action
if|if
condition|(
name|config
operator|.
name|containsKey
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
condition|)
block|{
name|String
name|action
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|action
operator|+
literal|" "
operator|+
name|ConfigurationConstants
operator|.
name|USERNAME_TOKEN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|ConfigurationConstants
operator|.
name|USERNAME_TOKEN
argument_list|)
expr_stmt|;
block|}
comment|// Password Type
name|PasswordType
name|passwordType
init|=
name|usernameToken
operator|.
name|getPasswordType
argument_list|()
decl_stmt|;
if|if
condition|(
name|passwordType
operator|==
name|PasswordType
operator|.
name|HashPassword
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|PASSWORD_TYPE
argument_list|,
name|WSConstants
operator|.
name|PW_DIGEST
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|passwordType
operator|==
name|PasswordType
operator|.
name|NoPassword
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|PASSWORD_TYPE
argument_list|,
name|WSConstants
operator|.
name|PW_NONE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|PASSWORD_TYPE
argument_list|,
name|WSConstants
operator|.
name|PW_TEXT
argument_list|)
expr_stmt|;
block|}
comment|// Nonce + Created
if|if
condition|(
name|usernameToken
operator|.
name|isNonce
argument_list|()
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ADD_USERNAMETOKEN_NONCE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|usernameToken
operator|.
name|isCreated
argument_list|()
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ADD_USERNAMETOKEN_CREATED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SecurePart
argument_list|(
name|WSSConstants
operator|.
name|TAG_wsse_UsernameToken
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
return|;
block|}
specifier|protected
name|SecurePart
name|addSamlToken
parameter_list|(
name|SamlToken
name|token
parameter_list|,
name|boolean
name|signed
parameter_list|,
name|boolean
name|endorsing
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|IncludeTokenType
name|includeToken
init|=
name|token
operator|.
name|getIncludeTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isTokenRequired
argument_list|(
name|includeToken
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|getProperties
argument_list|()
decl_stmt|;
comment|//
comment|// Get the SAML CallbackHandler
comment|//
name|Object
name|o
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SAML_CALLBACK_HANDLER
argument_list|)
decl_stmt|;
name|CallbackHandler
name|handler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|CallbackHandler
condition|)
block|{
name|handler
operator|=
operator|(
name|CallbackHandler
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
try|try
block|{
name|handler
operator|=
operator|(
name|CallbackHandler
operator|)
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handler
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"No SAML CallbackHandler available"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SAML_CALLBACK_REF
argument_list|,
name|handler
argument_list|)
expr_stmt|;
comment|// Action
name|String
name|samlAction
init|=
name|ConfigurationConstants
operator|.
name|SAML_TOKEN_UNSIGNED
decl_stmt|;
if|if
condition|(
name|signed
operator|||
name|endorsing
condition|)
block|{
name|samlAction
operator|=
name|ConfigurationConstants
operator|.
name|SAML_TOKEN_SIGNED
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|containsKey
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
condition|)
block|{
name|String
name|action
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|action
operator|+
literal|" "
operator|+
name|samlAction
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|samlAction
argument_list|)
expr_stmt|;
block|}
name|QName
name|qname
init|=
name|WSSConstants
operator|.
name|TAG_saml2_Assertion
decl_stmt|;
name|SamlTokenType
name|tokenType
init|=
name|token
operator|.
name|getSamlTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenType
operator|==
name|SamlTokenType
operator|.
name|WssSamlV11Token10
operator|||
name|tokenType
operator|==
name|SamlTokenType
operator|.
name|WssSamlV11Token11
condition|)
block|{
name|qname
operator|=
name|WSSConstants
operator|.
name|TAG_saml_Assertion
expr_stmt|;
block|}
return|return
operator|new
name|SecurePart
argument_list|(
name|qname
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
return|;
block|}
specifier|protected
name|void
name|policyNotAsserted
parameter_list|(
name|Assertion
name|assertion
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
if|if
condition|(
name|assertion
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Not asserting "
operator|+
name|assertion
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|reason
argument_list|)
expr_stmt|;
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|assertion
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getAssertion
argument_list|()
operator|==
name|assertion
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|assertion
operator|.
name|isOptional
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PolicyException
argument_list|(
operator|new
name|Message
argument_list|(
name|reason
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|configureTimestamp
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|getProperties
argument_list|()
decl_stmt|;
name|AbstractBinding
name|binding
init|=
name|getBinding
argument_list|(
name|aim
argument_list|)
decl_stmt|;
if|if
condition|(
name|binding
operator|!=
literal|null
operator|&&
name|binding
operator|.
name|isIncludeTimestamp
argument_list|()
condition|)
block|{
comment|// Action
if|if
condition|(
name|config
operator|.
name|containsKey
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
condition|)
block|{
name|String
name|action
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|action
operator|+
literal|" "
operator|+
name|ConfigurationConstants
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|ConfigurationConstants
operator|.
name|TIMESTAMP
argument_list|)
expr_stmt|;
block|}
name|timestampAdded
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|configureLayout
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|LAYOUT
argument_list|)
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|Layout
name|layout
init|=
operator|(
name|Layout
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|layout
operator|.
name|getLayoutType
argument_list|()
operator|==
name|LayoutType
operator|.
name|LaxTsLast
condition|)
block|{
comment|// TODO re-order action list
block|}
elseif|else
if|if
condition|(
name|layout
operator|.
name|getLayoutType
argument_list|()
operator|==
name|LayoutType
operator|.
name|LaxTsFirst
condition|)
block|{
comment|// TODO re-order action list
block|}
block|}
block|}
specifier|protected
name|AbstractBinding
name|getBinding
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|TRANSPORT_BINDING
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
operator|&&
name|ais
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
name|AbstractBinding
operator|)
name|ais
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAssertion
argument_list|()
return|;
block|}
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SYMMETRIC_BINDING
argument_list|)
expr_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
operator|&&
name|ais
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
name|AbstractBinding
operator|)
name|ais
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAssertion
argument_list|()
return|;
block|}
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ASYMMETRIC_BINDING
argument_list|)
expr_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
operator|&&
name|ais
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
name|AbstractBinding
operator|)
name|ais
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAssertion
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|boolean
name|isRequestor
parameter_list|()
block|{
return|return
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isTokenRequired
parameter_list|(
name|IncludeTokenType
name|includeToken
parameter_list|)
block|{
if|if
condition|(
name|includeToken
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_NEVER
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|includeToken
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|boolean
name|initiator
init|=
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|initiator
operator|&&
operator|(
name|includeToken
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS_TO_RECIPIENT
operator|||
name|includeToken
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ONCE
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|initiator
operator|&&
name|includeToken
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS_TO_INITIATOR
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|getAllAssertionsByLocalname
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|String
name|localname
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|sp11Ais
init|=
name|aim
operator|.
name|get
argument_list|(
operator|new
name|QName
argument_list|(
name|SP11Constants
operator|.
name|SP_NS
argument_list|,
name|localname
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|sp12Ais
init|=
name|aim
operator|.
name|get
argument_list|(
operator|new
name|QName
argument_list|(
name|SP12Constants
operator|.
name|SP_NS
argument_list|,
name|localname
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|sp11Ais
operator|!=
literal|null
operator|&&
operator|!
name|sp11Ais
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|sp12Ais
operator|!=
literal|null
operator|&&
operator|!
name|sp12Ais
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
operator|new
name|HashSet
argument_list|<
name|AssertionInfo
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|sp11Ais
operator|!=
literal|null
condition|)
block|{
name|ais
operator|.
name|addAll
argument_list|(
name|sp11Ais
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sp12Ais
operator|!=
literal|null
condition|)
block|{
name|ais
operator|.
name|addAll
argument_list|(
name|sp12Ais
argument_list|)
expr_stmt|;
block|}
return|return
name|ais
return|;
block|}
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
specifier|protected
name|SoapMessage
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
specifier|protected
name|void
name|configureSignature
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|,
name|AbstractToken
name|token
parameter_list|,
name|boolean
name|attached
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|instanceof
name|X509Token
condition|)
block|{
name|X509Token
name|x509Token
init|=
operator|(
name|X509Token
operator|)
name|token
decl_stmt|;
name|TokenType
name|tokenType
init|=
name|x509Token
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenType
operator|==
name|TokenType
operator|.
name|WssX509PkiPathV1Token10
operator|||
name|tokenType
operator|==
name|TokenType
operator|.
name|WssX509PkiPathV1Token11
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|USE_SINGLE_CERTIFICATE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// boolean alsoIncludeToken = false;
comment|/* TODO if (token instanceof IssuedToken || token instanceof SamlToken) {             SecurityToken securityToken = getSecurityToken();             String tokenType = securityToken.getTokenType();              Element ref;             if (attached) {                 ref = securityToken.getAttachedReference();             } else {                 ref = securityToken.getUnattachedReference();             }              if (ref != null) {                 SecurityTokenReference secRef =                      new SecurityTokenReference(cloneElement(ref), new BSPEnforcer());                 sig.setSecurityTokenReference(secRef);                 sig.setKeyIdentifierType(WSConstants.CUSTOM_KEY_IDENTIFIER);             } else {                 int type = attached ? WSConstants.CUSTOM_SYMM_SIGNING                      : WSConstants.CUSTOM_SYMM_SIGNING_DIRECT;                 if (WSConstants.WSS_SAML_TOKEN_TYPE.equals(tokenType)                     || WSConstants.SAML_NS.equals(tokenType)) {                     sig.setCustomTokenValueType(WSConstants.WSS_SAML_KI_VALUE_TYPE);                     sig.setKeyIdentifierType(WSConstants.CUSTOM_KEY_IDENTIFIER);                 } else if (WSConstants.WSS_SAML2_TOKEN_TYPE.equals(tokenType)                     || WSConstants.SAML2_NS.equals(tokenType)) {                     sig.setCustomTokenValueType(WSConstants.WSS_SAML2_KI_VALUE_TYPE);                     sig.setKeyIdentifierType(WSConstants.CUSTOM_KEY_IDENTIFIER);                 } else {                     sig.setCustomTokenValueType(tokenType);                     sig.setKeyIdentifierType(type);                 }             }              String sigTokId;             if (attached) {                 sigTokId = securityToken.getWsuId();                 if (sigTokId == null) {                     sigTokId = securityToken.getId();                                     }                 if (sigTokId.startsWith("#")) {                     sigTokId = sigTokId.substring(1);                 }             } else {                 sigTokId = securityToken.getId();             }              sig.setCustomTokenId(sigTokId);         } else {         */
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SIG_KEY_ID
argument_list|,
name|getKeyIdentifierType
argument_list|(
name|wrapper
argument_list|,
name|token
argument_list|)
argument_list|)
expr_stmt|;
comment|/*          * TODO         // Find out do we also need to include the token as per the Inclusion requirement         if (token instanceof X509Token&& token.getIncludeTokenType() != IncludeTokenType.INCLUDE_TOKEN_NEVER&& (sig.getKeyIdentifierType() != WSConstants.BST_DIRECT_REFERENCE&& sig.getKeyIdentifierType() != WSConstants.KEY_VALUE)) {             alsoIncludeToken = true;         }         */
comment|// }
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|AbstractBinding
name|binding
init|=
name|getBinding
argument_list|(
name|aim
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SIG_ALGO
argument_list|,
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAsymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|AlgorithmSuiteType
name|algType
init|=
name|binding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAlgorithmSuiteType
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SIG_DIGEST_ALGO
argument_list|,
name|algType
operator|.
name|getDigest
argument_list|()
argument_list|)
expr_stmt|;
comment|// sig.setSigCanonicalization(binding.getAlgorithmSuite().getC14n().getValue());
comment|//if (alsoIncludeToken) {
comment|//    includeToken(user, crypto, sig);
comment|//}
block|}
specifier|private
name|String
name|getKeyIdentifierType
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|,
name|AbstractToken
name|token
parameter_list|)
block|{
name|String
name|identifier
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|token
operator|instanceof
name|X509Token
condition|)
block|{
name|X509Token
name|x509Token
init|=
operator|(
name|X509Token
operator|)
name|token
decl_stmt|;
if|if
condition|(
name|x509Token
operator|.
name|isRequireIssuerSerialReference
argument_list|()
condition|)
block|{
name|identifier
operator|=
literal|"IssuerSerial"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x509Token
operator|.
name|isRequireKeyIdentifierReference
argument_list|()
condition|)
block|{
name|identifier
operator|=
literal|"SKIKeyIdentifier"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|x509Token
operator|.
name|isRequireThumbprintReference
argument_list|()
condition|)
block|{
name|identifier
operator|=
literal|"Thumbprint"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|KeyValueToken
condition|)
block|{
name|identifier
operator|=
literal|"KeyValue"
expr_stmt|;
block|}
if|if
condition|(
name|identifier
operator|!=
literal|null
condition|)
block|{
return|return
name|identifier
return|;
block|}
if|if
condition|(
name|token
operator|.
name|getIncludeTokenType
argument_list|()
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_NEVER
condition|)
block|{
name|Wss10
name|wss
init|=
name|getWss10
argument_list|()
decl_stmt|;
if|if
condition|(
name|wss
operator|==
literal|null
operator|||
name|wss
operator|.
name|isMustSupportRefKeyIdentifier
argument_list|()
condition|)
block|{
return|return
literal|"SKIKeyIdentifier"
return|;
block|}
elseif|else
if|if
condition|(
name|wss
operator|.
name|isMustSupportRefIssuerSerial
argument_list|()
condition|)
block|{
return|return
literal|"IssuerSerial"
return|;
block|}
elseif|else
if|if
condition|(
name|wss
operator|instanceof
name|Wss11
operator|&&
operator|(
operator|(
name|Wss11
operator|)
name|wss
operator|)
operator|.
name|isMustSupportRefThumbprint
argument_list|()
condition|)
block|{
return|return
literal|"Thumbprint"
return|;
block|}
block|}
else|else
block|{
return|return
literal|"DirectReference"
return|;
block|}
return|return
literal|"IssuerSerial"
return|;
block|}
specifier|protected
name|Wss10
name|getWss10
parameter_list|()
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS10
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
return|return
operator|(
name|Wss10
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
return|;
block|}
block|}
name|ais
operator|=
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS11
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
return|return
operator|(
name|Wss10
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|Object
argument_list|>
name|handleSupportingTokens
parameter_list|(
name|Collection
argument_list|<
name|Assertion
argument_list|>
name|tokens
parameter_list|,
name|boolean
name|endorse
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|Object
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|AbstractToken
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokens
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Assertion
name|pa
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|pa
operator|instanceof
name|SupportingTokens
condition|)
block|{
name|handleSupportingTokens
argument_list|(
operator|(
name|SupportingTokens
operator|)
name|pa
argument_list|,
name|endorse
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|Object
argument_list|>
name|handleSupportingTokens
parameter_list|(
name|SupportingTokens
name|suppTokens
parameter_list|,
name|boolean
name|endorse
parameter_list|)
throws|throws
name|WSSecurityException
block|{
return|return
name|handleSupportingTokens
argument_list|(
name|suppTokens
argument_list|,
name|endorse
argument_list|,
operator|new
name|HashMap
argument_list|<
name|AbstractToken
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|Object
argument_list|>
name|handleSupportingTokens
parameter_list|(
name|SupportingTokens
name|suppTokens
parameter_list|,
name|boolean
name|endorse
parameter_list|,
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|Object
argument_list|>
name|ret
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
name|suppTokens
operator|==
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
for|for
control|(
name|AbstractToken
name|token
range|:
name|suppTokens
operator|.
name|getTokens
argument_list|()
control|)
block|{
if|if
condition|(
name|token
operator|instanceof
name|UsernameToken
condition|)
block|{
name|handleUsernameTokenSupportingToken
argument_list|(
operator|(
name|UsernameToken
operator|)
name|token
argument_list|,
name|endorse
argument_list|,
name|suppTokens
operator|.
name|isEncryptedToken
argument_list|()
argument_list|,
name|ret
argument_list|)
expr_stmt|;
comment|/* TODO else if (isRequestor()&& (token instanceof IssuedToken                     || token instanceof SecureConversationToken                     || token instanceof SecurityContextToken                     || token instanceof KerberosToken)) {                 //ws-trust/ws-sc stuff.......                 SecurityToken secToken = getSecurityToken();                 if (secToken == null) {                     policyNotAsserted(token, "Could not find IssuedToken");                 }                 Element clone = cloneElement(secToken.getToken());                 secToken.setToken(clone);                 addSupportingElement(clone);                  String id = secToken.getId();                 if (id != null&& id.charAt(0) == '#') {                     id = id.substring(1);                 }                 if (suppTokens.isEncryptedToken()) {                     WSEncryptionPart part = new WSEncryptionPart(id, "Element");                     part.setElement(clone);                     encryptedTokensList.add(part);                 }                  if (secToken.getX509Certificate() == null) {                       ret.put(token, new WSSecurityTokenHolder(wssConfig, secToken));                 } else {                     WSSecSignature sig = new WSSecSignature(wssConfig);                                         sig.setX509Certificate(secToken.getX509Certificate());                     sig.setCustomTokenId(id);                     sig.setKeyIdentifierType(WSConstants.CUSTOM_KEY_IDENTIFIER);                     String tokenType = secToken.getTokenType();                     if (WSConstants.WSS_SAML_TOKEN_TYPE.equals(tokenType)                         || WSConstants.SAML_NS.equals(tokenType)) {                         sig.setCustomTokenValueType(WSConstants.WSS_SAML_KI_VALUE_TYPE);                     } else if (WSConstants.WSS_SAML2_TOKEN_TYPE.equals(tokenType)                         || WSConstants.SAML2_NS.equals(tokenType)) {                         sig.setCustomTokenValueType(WSConstants.WSS_SAML2_KI_VALUE_TYPE);                     } else if (tokenType != null) {                         sig.setCustomTokenValueType(tokenType);                     } else {                         sig.setCustomTokenValueType(WSConstants.WSS_SAML_KI_VALUE_TYPE);                     }                     sig.setSignatureAlgorithm(binding.getAlgorithmSuite().getAsymmetricSignature());                     sig.setSigCanonicalization(binding.getAlgorithmSuite().getC14n().getValue());                      Crypto crypto = secToken.getCrypto();                     String uname = null;                     try {                         uname = crypto.getX509Identifier(secToken.getX509Certificate());                     } catch (WSSecurityException e1) {                         LOG.log(Level.FINE, e1.getMessage(), e1);                         throw new Fault(e1);                     }                      String password = getPassword(uname, token, WSPasswordCallback.Usage.SIGNATURE);                     sig.setUserInfo(uname, password);                     try {                         sig.prepare(saaj.getSOAPPart(), secToken.getCrypto(), secHeader);                     } catch (WSSecurityException e) {                         LOG.log(Level.FINE, e.getMessage(), e);                         throw new Fault(e);                     }                      ret.put(token, sig);                                 }              } */
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|X509Token
operator|||
name|token
operator|instanceof
name|KeyValueToken
condition|)
block|{
name|configureSignature
argument_list|(
name|suppTokens
argument_list|,
name|token
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|suppTokens
operator|.
name|isEncryptedToken
argument_list|()
condition|)
block|{
name|SecurePart
name|part
init|=
operator|new
name|SecurePart
argument_list|(
name|WSSConstants
operator|.
name|TAG_wsse_BinarySecurityToken
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|encryptedTokensList
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|put
argument_list|(
name|token
argument_list|,
operator|new
name|SecurePart
argument_list|(
name|WSSConstants
operator|.
name|TAG_dsig_Signature
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|SamlToken
condition|)
block|{
name|SecurePart
name|securePart
init|=
name|addSamlToken
argument_list|(
operator|(
name|SamlToken
operator|)
name|token
argument_list|,
literal|false
argument_list|,
name|endorse
argument_list|)
decl_stmt|;
if|if
condition|(
name|securePart
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|securePart
argument_list|)
expr_stmt|;
if|if
condition|(
name|suppTokens
operator|.
name|isEncryptedToken
argument_list|()
condition|)
block|{
name|encryptedTokensList
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|void
name|handleUsernameTokenSupportingToken
parameter_list|(
name|UsernameToken
name|token
parameter_list|,
name|boolean
name|endorse
parameter_list|,
name|boolean
name|encryptedToken
parameter_list|,
name|Map
argument_list|<
name|AbstractToken
argument_list|,
name|Object
argument_list|>
name|ret
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
name|endorse
condition|)
block|{
comment|/* TODO             WSSecUsernameToken utBuilder = addDKUsernameToken(token, true);             if (utBuilder != null) {                 utBuilder.prepare(saaj.getSOAPPart());                 addSupportingElement(utBuilder.getUsernameTokenElement());                 ret.put(token, utBuilder);                 if (encryptedToken) {                     WSEncryptionPart part = new WSEncryptionPart(utBuilder.getId(), "Element");                     part.setElement(utBuilder.getUsernameTokenElement());                     encryptedTokensList.add(part);                 }             }             */
block|}
else|else
block|{
name|SecurePart
name|securePart
init|=
name|addUsernameToken
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|securePart
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|securePart
argument_list|)
expr_stmt|;
comment|//WebLogic and WCF always encrypt these
comment|//See:  http://e-docs.bea.com/wls/docs103/webserv_intro/interop.html
comment|//encryptedTokensIdList.add(utBuilder.getId());
if|if
condition|(
name|encryptedToken
operator|||
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|message
argument_list|,
name|SecurityConstants
operator|.
name|ALWAYS_ENCRYPT_UT
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|encryptedTokensList
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|addSignatureConfirmation
parameter_list|(
name|List
argument_list|<
name|SecurePart
argument_list|>
name|sigParts
parameter_list|)
block|{
name|Wss10
name|wss10
init|=
name|getWss10
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|wss10
operator|instanceof
name|Wss11
operator|)
operator|||
operator|!
operator|(
operator|(
name|Wss11
operator|)
name|wss10
operator|)
operator|.
name|isRequireSignatureConfirmation
argument_list|()
condition|)
block|{
comment|//If we don't require sig confirmation simply go back :-)
return|return;
block|}
comment|// Enable SignatureConfirmation
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|getProperties
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ENABLE_SIGNATURE_CONFIRMATION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sigParts
operator|!=
literal|null
condition|)
block|{
name|SecurePart
name|securePart
init|=
operator|new
name|SecurePart
argument_list|(
name|WSSConstants
operator|.
name|TAG_wsse11_SignatureConfirmation
argument_list|,
name|Modifier
operator|.
name|Element
argument_list|)
decl_stmt|;
name|sigParts
operator|.
name|add
argument_list|(
name|securePart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

