begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|MapNamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|CryptoCoverageUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|CryptoCoverageUtil
operator|.
name|CoverageScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|CryptoCoverageUtil
operator|.
name|CoverageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSDataRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|RequiredElements
import|;
end_import

begin_comment
comment|/**  * Validate either a SignedElements, EncryptedElements or ContentEncryptedElements policy  */
end_comment

begin_class
specifier|public
class|class
name|SecuredElementsPolicyValidator
implements|implements
name|SecurityPolicyValidator
block|{
specifier|private
name|CoverageType
name|coverageType
init|=
name|CoverageType
operator|.
name|ENCRYPTED
decl_stmt|;
specifier|private
name|CoverageScope
name|coverageScope
init|=
name|CoverageScope
operator|.
name|ELEMENT
decl_stmt|;
comment|/**      * Return true if this SecurityPolicyValidator implementation is capable of validating a      * policy defined by the AssertionInfo parameter      */
specifier|public
name|boolean
name|canValidatePolicy
parameter_list|(
name|AssertionInfo
name|assertionInfo
parameter_list|)
block|{
if|if
condition|(
name|coverageType
operator|==
name|CoverageType
operator|.
name|SIGNED
condition|)
block|{
return|return
name|assertionInfo
operator|.
name|getAssertion
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|SP12Constants
operator|.
name|SIGNED_ELEMENTS
operator|.
name|equals
argument_list|(
name|assertionInfo
operator|.
name|getAssertion
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|SP11Constants
operator|.
name|SIGNED_ELEMENTS
operator|.
name|equals
argument_list|(
name|assertionInfo
operator|.
name|getAssertion
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|coverageScope
operator|==
name|CoverageScope
operator|.
name|CONTENT
condition|)
block|{
return|return
name|assertionInfo
operator|.
name|getAssertion
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|SP12Constants
operator|.
name|CONTENT_ENCRYPTED_ELEMENTS
operator|.
name|equals
argument_list|(
name|assertionInfo
operator|.
name|getAssertion
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|SP11Constants
operator|.
name|CONTENT_ENCRYPTED_ELEMENTS
operator|.
name|equals
argument_list|(
name|assertionInfo
operator|.
name|getAssertion
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
name|assertionInfo
operator|.
name|getAssertion
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|SP12Constants
operator|.
name|ENCRYPTED_ELEMENTS
operator|.
name|equals
argument_list|(
name|assertionInfo
operator|.
name|getAssertion
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|SP11Constants
operator|.
name|ENCRYPTED_ELEMENTS
operator|.
name|equals
argument_list|(
name|assertionInfo
operator|.
name|getAssertion
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
comment|/**      * Validate policies.      */
specifier|public
name|void
name|validatePolicies
parameter_list|(
name|PolicyValidatorParameters
name|parameters
parameter_list|,
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
parameter_list|)
block|{
comment|// XPathFactory and XPath are not thread-safe so we must recreate them
comment|// each request.
specifier|final
name|XPathFactory
name|factory
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|factory
operator|.
name|setFeature
argument_list|(
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactoryConfigurationException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
specifier|final
name|XPath
name|xpath
init|=
name|factory
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|Element
name|soapEnvelope
init|=
name|parameters
operator|.
name|getSoapHeader
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|WSDataRef
argument_list|>
name|dataRefs
init|=
name|parameters
operator|.
name|getEncrypted
argument_list|()
decl_stmt|;
if|if
condition|(
name|coverageType
operator|==
name|CoverageType
operator|.
name|SIGNED
condition|)
block|{
name|dataRefs
operator|=
name|parameters
operator|.
name|getSigned
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|RequiredElements
name|elements
init|=
operator|(
name|RequiredElements
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|elements
operator|!=
literal|null
operator|&&
name|elements
operator|.
name|getXPaths
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|elements
operator|.
name|getXPaths
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expressions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|MapNamespaceContext
name|namespaceContext
init|=
operator|new
name|MapNamespaceContext
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|XPath
name|xPath
range|:
name|elements
operator|.
name|getXPaths
argument_list|()
control|)
block|{
name|expressions
operator|.
name|add
argument_list|(
name|xPath
operator|.
name|getXPath
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceMap
init|=
name|xPath
operator|.
name|getPrefixNamespaceMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespaceMap
operator|!=
literal|null
condition|)
block|{
name|namespaceContext
operator|.
name|addNamespaces
argument_list|(
name|namespaceMap
argument_list|)
expr_stmt|;
block|}
block|}
name|xpath
operator|.
name|setNamespaceContext
argument_list|(
name|namespaceContext
argument_list|)
expr_stmt|;
try|try
block|{
name|CryptoCoverageUtil
operator|.
name|checkCoverage
argument_list|(
name|soapEnvelope
argument_list|,
name|dataRefs
argument_list|,
name|xpath
argument_list|,
name|expressions
argument_list|,
name|coverageType
argument_list|,
name|coverageScope
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"No "
operator|+
name|coverageType
operator|+
literal|" element found matching one of the XPaths "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expressions
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|CoverageType
name|getCoverageType
parameter_list|()
block|{
return|return
name|coverageType
return|;
block|}
specifier|public
name|void
name|setCoverageType
parameter_list|(
name|CoverageType
name|coverageType
parameter_list|)
block|{
name|this
operator|.
name|coverageType
operator|=
name|coverageType
expr_stmt|;
block|}
specifier|public
name|CoverageScope
name|getCoverageScope
parameter_list|()
block|{
return|return
name|coverageScope
return|;
block|}
specifier|public
name|void
name|setCoverageScope
parameter_list|(
name|CoverageScope
name|coverageScope
parameter_list|)
block|{
name|this
operator|.
name|coverageScope
operator|=
name|coverageScope
expr_stmt|;
block|}
block|}
end_class

end_unit

