begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|Soap11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|policy
operator|.
name|MetadataConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AbstractPolicyInterceptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|primitive
operator|.
name|PrimitiveAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
operator|.
name|SupportTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SecureConversationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SupportingToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Trust10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Trust13
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|MemoryTokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|All
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|ExactlyOne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|conversation
operator|.
name|ConversationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|conversation
operator|.
name|ConversationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|conversation
operator|.
name|dkalgo
operator|.
name|P_SHA1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|SecurityTokenReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|security
operator|.
name|utils
operator|.
name|Base64
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|SecureConversationTokenInterceptorProvider
extends|extends
name|AbstractPolicyInterceptorProvider
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SecureConversationTokenInterceptorProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|SecureConversationTokenInterceptorProvider
parameter_list|()
block|{
name|super
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|SP11Constants
operator|.
name|SECURE_CONVERSATION_TOKEN
argument_list|,
name|SP12Constants
operator|.
name|SECURE_CONVERSATION_TOKEN
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SecureConversationOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SecureConversationOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SecureConversationInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getInFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|SecureConversationInInterceptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|final
name|Trust10
name|getTrust10
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|TRUST_10
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|==
literal|null
operator|||
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ais
operator|=
name|aim
operator|.
name|get
argument_list|(
name|SP11Constants
operator|.
name|TRUST_10
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ais
operator|==
literal|null
operator|||
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|Trust10
operator|)
name|ais
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAssertion
argument_list|()
return|;
block|}
specifier|static
specifier|final
name|Trust13
name|getTrust13
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|TRUST_13
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|==
literal|null
operator|||
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|Trust13
operator|)
name|ais
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAssertion
argument_list|()
return|;
block|}
specifier|static
specifier|final
name|TokenStore
name|getTokenStore
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|TokenStore
name|tokenStore
init|=
operator|(
name|TokenStore
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|TokenStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenStore
operator|==
literal|null
condition|)
block|{
name|tokenStore
operator|=
operator|new
name|MemoryTokenStore
argument_list|()
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|setProperty
argument_list|(
name|TokenStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|tokenStore
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenStore
return|;
block|}
specifier|static
name|PolicyAssertion
name|getAddressingPolicy
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|boolean
name|optional
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|lst
init|=
name|aim
operator|.
name|get
argument_list|(
name|MetadataConstants
operator|.
name|USING_ADDRESSING_2004_QNAME
argument_list|)
decl_stmt|;
name|PolicyAssertion
name|assertion
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|lst
operator|&&
operator|!
name|lst
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertion
operator|=
name|lst
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|assertion
operator|==
literal|null
condition|)
block|{
name|lst
operator|=
name|aim
operator|.
name|get
argument_list|(
name|MetadataConstants
operator|.
name|USING_ADDRESSING_2005_QNAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|lst
operator|&&
operator|!
name|lst
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertion
operator|=
name|lst
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|assertion
operator|==
literal|null
condition|)
block|{
name|lst
operator|=
name|aim
operator|.
name|get
argument_list|(
name|MetadataConstants
operator|.
name|USING_ADDRESSING_2006_QNAME
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|lst
operator|&&
operator|!
name|lst
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertion
operator|=
name|lst
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAssertion
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|assertion
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|PrimitiveAssertion
argument_list|(
name|MetadataConstants
operator|.
name|USING_ADDRESSING_2006_QNAME
argument_list|,
name|optional
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|optional
condition|)
block|{
return|return
operator|new
name|PrimitiveAssertion
argument_list|(
name|assertion
operator|.
name|getName
argument_list|()
argument_list|,
name|optional
argument_list|)
return|;
block|}
return|return
name|assertion
return|;
block|}
specifier|static
name|String
name|setupClient
parameter_list|(
name|STSClient
name|client
parameter_list|,
name|SoapMessage
name|message
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|,
name|SecureConversationToken
name|itok
parameter_list|,
name|boolean
name|endorse
parameter_list|)
block|{
name|client
operator|.
name|setTrust
argument_list|(
name|getTrust10
argument_list|(
name|aim
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTrust
argument_list|(
name|getTrust13
argument_list|(
name|aim
argument_list|)
argument_list|)
expr_stmt|;
name|Policy
name|pol
init|=
name|itok
operator|.
name|getBootstrapPolicy
argument_list|()
decl_stmt|;
name|Policy
name|p
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
name|ExactlyOne
name|ea
init|=
operator|new
name|ExactlyOne
argument_list|()
decl_stmt|;
name|p
operator|.
name|addPolicyComponent
argument_list|(
name|ea
argument_list|)
expr_stmt|;
name|All
name|all
init|=
operator|new
name|All
argument_list|()
decl_stmt|;
name|all
operator|.
name|addPolicyComponent
argument_list|(
name|getAddressingPolicy
argument_list|(
name|aim
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|ea
operator|.
name|addPolicyComponent
argument_list|(
name|all
argument_list|)
expr_stmt|;
if|if
condition|(
name|endorse
condition|)
block|{
name|SupportingToken
name|st
init|=
operator|new
name|SupportingToken
argument_list|(
name|SupportTokenType
operator|.
name|SUPPORTING_TOKEN_ENDORSING
argument_list|,
name|SP12Constants
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|st
operator|.
name|addToken
argument_list|(
name|itok
argument_list|)
expr_stmt|;
name|all
operator|.
name|addPolicyComponent
argument_list|(
name|st
argument_list|)
expr_stmt|;
block|}
name|pol
operator|=
name|p
operator|.
name|merge
argument_list|(
name|pol
argument_list|)
expr_stmt|;
name|client
operator|.
name|setPolicy
argument_list|(
name|pol
argument_list|)
expr_stmt|;
name|client
operator|.
name|setSoap11
argument_list|(
name|message
operator|.
name|getVersion
argument_list|()
operator|==
name|Soap11
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|setSecureConv
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|Message
operator|.
name|ENDPOINT_ADDRESS
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|client
operator|.
name|setLocation
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
name|client
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|mapSecurityProps
argument_list|(
name|message
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|private
specifier|static
name|void
name|mapSecurityProps
parameter_list|(
name|Message
name|message
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|SecurityConstants
operator|.
name|ALL_PROPERTIES
control|)
block|{
name|Object
name|v
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|s
operator|+
literal|".sct"
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|STSClient
name|getClient
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|STSClient
name|client
init|=
operator|(
name|STSClient
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|STS_CLIENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|client
operator|=
operator|new
name|STSClient
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Endpoint
name|ep
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|client
operator|.
name|setEndpointName
argument_list|(
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".sct-client"
argument_list|)
expr_stmt|;
name|client
operator|.
name|setBeanName
argument_list|(
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|".sct-client"
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
specifier|static
name|byte
index|[]
name|writeProofToken
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespace
parameter_list|,
name|W3CDOMStreamWriter
name|writer
parameter_list|,
name|byte
index|[]
name|clientEntropy
parameter_list|,
name|int
name|keySize
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|WSSecurityException
throws|,
name|ConversationException
throws|,
name|XMLStreamException
block|{
name|byte
name|secret
index|[]
init|=
literal|null
decl_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
literal|"RequestedProofToken"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
if|if
condition|(
name|clientEntropy
operator|==
literal|null
condition|)
block|{
name|SecureRandom
name|random
init|=
name|SecureRandom
operator|.
name|getInstance
argument_list|(
literal|"SHA1PRNG"
argument_list|)
decl_stmt|;
name|secret
operator|=
operator|new
name|byte
index|[
name|keySize
operator|/
literal|8
index|]
expr_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|secret
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
literal|"BinarySecret"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"Type"
argument_list|,
name|namespace
operator|+
literal|"/Nonce"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|Base64
operator|.
name|encode
argument_list|(
name|secret
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|byte
name|entropy
index|[]
init|=
name|WSSecurityUtil
operator|.
name|generateNonce
argument_list|(
name|keySize
operator|/
literal|8
argument_list|)
decl_stmt|;
name|P_SHA1
name|psha1
init|=
operator|new
name|P_SHA1
argument_list|()
decl_stmt|;
name|secret
operator|=
name|psha1
operator|.
name|createKey
argument_list|(
name|clientEntropy
argument_list|,
name|entropy
argument_list|,
literal|0
argument_list|,
name|keySize
operator|/
literal|8
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
literal|"ComputedKey"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|namespace
operator|+
literal|"/CK/PSHA1"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
literal|"Entropy"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
literal|"BinarySecret"
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeAttribute
argument_list|(
literal|"Type"
argument_list|,
name|namespace
operator|+
literal|"/Nonce"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeCharacters
argument_list|(
name|Base64
operator|.
name|encode
argument_list|(
name|entropy
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
return|return
name|secret
return|;
block|}
specifier|static
name|Element
name|writeSecurityTokenReference
parameter_list|(
name|W3CDOMStreamWriter
name|writer
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|refValueType
parameter_list|)
block|{
name|Reference
name|ref
init|=
operator|new
name|Reference
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
argument_list|)
decl_stmt|;
name|ref
operator|.
name|setURI
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|refValueType
operator|!=
literal|null
condition|)
block|{
name|ref
operator|.
name|setValueType
argument_list|(
name|refValueType
argument_list|)
expr_stmt|;
block|}
name|SecurityTokenReference
name|str
init|=
operator|new
name|SecurityTokenReference
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
argument_list|)
decl_stmt|;
name|str
operator|.
name|setReference
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|writer
operator|.
name|getCurrentNode
argument_list|()
operator|.
name|appendChild
argument_list|(
name|str
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|str
operator|.
name|getElement
argument_list|()
return|;
block|}
specifier|static
name|int
name|getWSCVersion
parameter_list|(
name|String
name|tokenTypeValue
parameter_list|)
throws|throws
name|ConversationException
block|{
if|if
condition|(
name|tokenTypeValue
operator|==
literal|null
condition|)
block|{
return|return
name|ConversationConstants
operator|.
name|DEFAULT_VERSION
return|;
block|}
if|if
condition|(
name|tokenTypeValue
operator|.
name|startsWith
argument_list|(
name|ConversationConstants
operator|.
name|WSC_NS_05_02
argument_list|)
condition|)
block|{
return|return
name|ConversationConstants
operator|.
name|getWSTVersion
argument_list|(
name|ConversationConstants
operator|.
name|WSC_NS_05_02
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|tokenTypeValue
operator|.
name|startsWith
argument_list|(
name|ConversationConstants
operator|.
name|WSC_NS_05_12
argument_list|)
condition|)
block|{
return|return
name|ConversationConstants
operator|.
name|getWSTVersion
argument_list|(
name|ConversationConstants
operator|.
name|WSC_NS_05_12
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ConversationException
argument_list|(
literal|"unsupportedSecConvVersion"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

