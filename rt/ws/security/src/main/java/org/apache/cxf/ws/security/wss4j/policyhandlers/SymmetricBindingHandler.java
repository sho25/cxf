begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyhandlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|IssuedToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|KerberosToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SecureConversationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SecurityContextToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SymmetricBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|TokenWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|X509Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSEncryptionPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|components
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|conversation
operator|.
name|ConversationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|conversation
operator|.
name|ConversationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecDKEncrypt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecDKSign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecEncrypt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecEncryptedKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|token
operator|.
name|SecurityTokenReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|SymmetricBindingHandler
extends|extends
name|AbstractBindingBuilder
block|{
name|SymmetricBinding
name|sbinding
decl_stmt|;
name|TokenStore
name|tokenStore
decl_stmt|;
specifier|public
name|SymmetricBindingHandler
parameter_list|(
name|WSSConfig
name|config
parameter_list|,
name|SymmetricBinding
name|binding
parameter_list|,
name|SOAPMessage
name|saaj
parameter_list|,
name|WSSecHeader
name|secHeader
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|,
name|binding
argument_list|,
name|saaj
argument_list|,
name|secHeader
argument_list|,
name|aim
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|sbinding
operator|=
name|binding
expr_stmt|;
name|tokenStore
operator|=
name|getTokenStore
argument_list|()
expr_stmt|;
name|protectionOrder
operator|=
name|binding
operator|.
name|getProtectionOrder
argument_list|()
expr_stmt|;
block|}
specifier|private
name|TokenWrapper
name|getSignatureToken
parameter_list|()
block|{
if|if
condition|(
name|sbinding
operator|.
name|getProtectionToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|sbinding
operator|.
name|getProtectionToken
argument_list|()
return|;
block|}
return|return
name|sbinding
operator|.
name|getSignatureToken
argument_list|()
return|;
block|}
specifier|private
name|TokenWrapper
name|getEncryptionToken
parameter_list|()
block|{
if|if
condition|(
name|sbinding
operator|.
name|getProtectionToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|sbinding
operator|.
name|getProtectionToken
argument_list|()
return|;
block|}
return|return
name|sbinding
operator|.
name|getEncryptionToken
argument_list|()
return|;
block|}
specifier|public
name|void
name|handleBinding
parameter_list|()
block|{
name|WSSecTimestamp
name|timestamp
init|=
name|createTimestamp
argument_list|()
decl_stmt|;
name|handleLayout
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
comment|//Setup required tokens
name|initializeTokens
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sbinding
operator|.
name|getProtectionOrder
argument_list|()
operator|==
name|SPConstants
operator|.
name|ProtectionOrder
operator|.
name|EncryptBeforeSigning
condition|)
block|{
name|doEncryptBeforeSign
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doSignBeforeEncrypt
argument_list|()
expr_stmt|;
block|}
comment|//REVIST - what to do with these policies?
name|policyAsserted
argument_list|(
name|SP11Constants
operator|.
name|TRUST_10
argument_list|)
expr_stmt|;
name|policyAsserted
argument_list|(
name|SP12Constants
operator|.
name|TRUST_13
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initializeTokens
parameter_list|()
block|{
comment|//Setting up encryption token and signature token
comment|/*         Token sigTok = getSignatureToken().getToken();         //Token encrTok = getEncryptionToken().getToken();                  if (sigTok instanceof IssuedToken) {             //IssuedToken issuedToken = (IssuedToken)sigTok;                          //REVISIT - WS-Trust STS token retrieval         } else if (sigTok instanceof SecureConversationToken) {             //REVISIT - SecureConversation token retrieval         }         */
block|}
specifier|private
name|void
name|doEncryptBeforeSign
parameter_list|()
block|{
try|try
block|{
name|TokenWrapper
name|encryptionWrapper
init|=
name|getEncryptionToken
argument_list|()
decl_stmt|;
name|Token
name|encryptionToken
init|=
name|encryptionWrapper
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|encrParts
init|=
name|getEncryptedParts
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
init|=
name|getSignedParts
argument_list|()
decl_stmt|;
comment|//if (encryptionToken == null&& encrParts.size()> 0) {
comment|//REVISIT - nothing to encrypt?
comment|//}
if|if
condition|(
name|encryptionToken
operator|!=
literal|null
operator|&&
name|encrParts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|//The encryption token can be an IssuedToken or a
comment|//SecureConversationToken
name|String
name|tokenId
init|=
literal|null
decl_stmt|;
name|SecurityToken
name|tok
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|encryptionToken
operator|instanceof
name|IssuedToken
operator|||
name|encryptionToken
operator|instanceof
name|KerberosToken
condition|)
block|{
name|tok
operator|=
name|getSecurityToken
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encryptionToken
operator|instanceof
name|SecureConversationToken
operator|||
name|encryptionToken
operator|instanceof
name|SecurityContextToken
condition|)
block|{
name|tok
operator|=
name|getSecurityToken
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encryptionToken
operator|instanceof
name|X509Token
condition|)
block|{
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|tokenId
operator|=
name|setupEncryptedKey
argument_list|(
name|encryptionWrapper
argument_list|,
name|encryptionToken
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokenId
operator|=
name|getEncryptedKey
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tok
operator|==
literal|null
condition|)
block|{
comment|//if (tokenId == null || tokenId.length() == 0) {
comment|//REVISIT - no tokenId?   Exception?
comment|//}
if|if
condition|(
name|tokenId
operator|!=
literal|null
operator|&&
name|tokenId
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|tokenId
operator|=
name|tokenId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/*                      * Get hold of the token from the token storage                      */
name|tok
operator|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|tokenId
argument_list|)
expr_stmt|;
block|}
name|boolean
name|attached
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|includeToken
argument_list|(
name|encryptionToken
operator|.
name|getInclusion
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|el
init|=
name|tok
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|this
operator|.
name|addEncryptedKeyElement
argument_list|(
name|cloneElement
argument_list|(
name|el
argument_list|)
argument_list|)
expr_stmt|;
name|attached
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encryptionToken
operator|instanceof
name|X509Token
operator|&&
name|isRequestor
argument_list|()
condition|)
block|{
name|Element
name|el
init|=
name|tok
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|this
operator|.
name|addEncryptedKeyElement
argument_list|(
name|cloneElement
argument_list|(
name|el
argument_list|)
argument_list|)
expr_stmt|;
name|attached
operator|=
literal|true
expr_stmt|;
block|}
name|WSSecBase
name|encr
init|=
name|doEncryption
argument_list|(
name|encryptionWrapper
argument_list|,
name|tok
argument_list|,
name|attached
argument_list|,
name|encrParts
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|handleEncryptedSignedHeaders
argument_list|(
name|encrParts
argument_list|,
name|sigParts
argument_list|)
expr_stmt|;
if|if
condition|(
name|timestampEl
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|timestampPart
init|=
name|convertToEncryptionPart
argument_list|(
name|timestampEl
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
name|sigParts
operator|.
name|add
argument_list|(
name|timestampPart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|this
operator|.
name|addSupportingTokens
argument_list|(
name|sigParts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addSignatureConfirmation
argument_list|(
name|sigParts
argument_list|)
expr_stmt|;
block|}
comment|//Sign the message
comment|//We should use the same key in the case of EncryptBeforeSig
if|if
condition|(
name|sigParts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|signatures
operator|.
name|add
argument_list|(
name|this
operator|.
name|doSignature
argument_list|(
name|sigParts
argument_list|,
name|encryptionWrapper
argument_list|,
name|encryptionToken
argument_list|,
name|tok
argument_list|,
name|attached
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|this
operator|.
name|doEndorse
argument_list|()
expr_stmt|;
block|}
comment|//Check for signature protection and encryption of UsernameToken
if|if
condition|(
name|sbinding
operator|.
name|isSignatureProtection
argument_list|()
operator|||
name|encryptedTokensIdList
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|isRequestor
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|secondEncrParts
init|=
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
comment|//Now encrypt the signature using the above token
if|if
condition|(
name|sbinding
operator|.
name|isSignatureProtection
argument_list|()
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|mainSigId
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|sigPart
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|this
operator|.
name|mainSigId
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|sigPart
operator|.
name|setElement
argument_list|(
name|bottomUpElement
argument_list|)
expr_stmt|;
name|secondEncrParts
operator|.
name|add
argument_list|(
name|sigPart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sigConfList
operator|!=
literal|null
operator|&&
operator|!
name|sigConfList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|secondEncrParts
operator|.
name|addAll
argument_list|(
name|sigConfList
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|encryptedTokensIdList
control|)
block|{
name|secondEncrParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|s
argument_list|,
literal|"Element"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Element
name|secondRefList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|encryptionToken
operator|.
name|isDerivedKeys
argument_list|()
operator|&&
operator|!
name|secondEncrParts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|secondRefList
operator|=
operator|(
operator|(
name|WSSecDKEncrypt
operator|)
name|encr
operator|)
operator|.
name|encryptForExternalRef
argument_list|(
literal|null
argument_list|,
name|secondEncrParts
argument_list|)
expr_stmt|;
name|this
operator|.
name|addDerivedKeyElement
argument_list|(
name|secondRefList
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|secondEncrParts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Encrypt, get hold of the ref list and add it
name|secondRefList
operator|=
operator|(
operator|(
name|WSSecEncrypt
operator|)
name|encr
operator|)
operator|.
name|encryptForRef
argument_list|(
literal|null
argument_list|,
name|encrParts
argument_list|)
expr_stmt|;
name|this
operator|.
name|addDerivedKeyElement
argument_list|(
name|secondRefList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|doSignBeforeEncrypt
parameter_list|()
block|{
name|TokenWrapper
name|sigTokenWrapper
init|=
name|getSignatureToken
argument_list|()
decl_stmt|;
name|Token
name|sigToken
init|=
name|sigTokenWrapper
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|String
name|sigTokId
init|=
literal|null
decl_stmt|;
name|Element
name|sigTokElem
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SecurityToken
name|sigTok
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sigToken
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sigToken
operator|instanceof
name|SecureConversationToken
operator|||
name|sigToken
operator|instanceof
name|SecurityContextToken
condition|)
block|{
name|sigTok
operator|=
name|getSecurityToken
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sigToken
operator|instanceof
name|IssuedToken
operator|||
name|sigToken
operator|instanceof
name|KerberosToken
condition|)
block|{
name|sigTok
operator|=
name|getSecurityToken
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sigToken
operator|instanceof
name|X509Token
condition|)
block|{
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|sigTokId
operator|=
name|setupEncryptedKey
argument_list|(
name|sigTokenWrapper
argument_list|,
name|sigToken
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sigTokId
operator|=
name|getEncryptedKey
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|policyNotAsserted
argument_list|(
name|sbinding
argument_list|,
literal|"No signature token"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|sigTok
operator|==
literal|null
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|sigTokId
argument_list|)
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|sigTokenWrapper
argument_list|,
literal|"No signature token id"
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|policyAsserted
argument_list|(
name|sigTokenWrapper
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sigTok
operator|==
literal|null
condition|)
block|{
name|sigTok
operator|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|sigTokId
argument_list|)
expr_stmt|;
block|}
comment|//if (sigTok == null) {
comment|//REVISIT - no token?
comment|//}
name|boolean
name|tokIncluded
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|includeToken
argument_list|(
name|sigToken
operator|.
name|getInclusion
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|el
init|=
name|sigTok
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|sigTokElem
operator|=
name|cloneElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|this
operator|.
name|addEncryptedKeyElement
argument_list|(
name|sigTokElem
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isRequestor
argument_list|()
operator|&&
name|sigToken
operator|instanceof
name|X509Token
condition|)
block|{
name|Element
name|el
init|=
name|sigTok
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|sigTokElem
operator|=
name|cloneElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|this
operator|.
name|addEncryptedKeyElement
argument_list|(
name|sigTokElem
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokIncluded
operator|=
literal|false
expr_stmt|;
block|}
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigs
init|=
name|getSignedParts
argument_list|()
decl_stmt|;
comment|//Add timestamp
if|if
condition|(
name|timestampEl
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|timestampPart
init|=
name|convertToEncryptionPart
argument_list|(
name|timestampEl
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
name|sigs
operator|.
name|add
argument_list|(
name|timestampPart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|addSupportingTokens
argument_list|(
name|sigs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sigs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|signatures
operator|.
name|add
argument_list|(
name|doSignature
argument_list|(
name|sigs
argument_list|,
name|sigTokenWrapper
argument_list|,
name|sigToken
argument_list|,
name|sigTok
argument_list|,
name|tokIncluded
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doEndorse
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//confirm sig
name|assertSupportingTokens
argument_list|(
name|sigs
argument_list|)
expr_stmt|;
name|addSignatureConfirmation
argument_list|(
name|sigs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sigs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doSignature
argument_list|(
name|sigs
argument_list|,
name|sigTokenWrapper
argument_list|,
name|sigToken
argument_list|,
name|sigTok
argument_list|,
name|tokIncluded
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Encryption
name|TokenWrapper
name|encrTokenWrapper
init|=
name|getEncryptionToken
argument_list|()
decl_stmt|;
name|Token
name|encrToken
init|=
name|encrTokenWrapper
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|SecurityToken
name|encrTok
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sigToken
operator|.
name|equals
argument_list|(
name|encrToken
argument_list|)
condition|)
block|{
comment|//Use the same token
name|encrTok
operator|=
name|sigTok
expr_stmt|;
block|}
else|else
block|{
name|String
name|encrTokId
init|=
literal|null
decl_stmt|;
comment|//REVISIT - issued token from trust?
name|encrTok
operator|=
name|tokenStore
operator|.
name|getToken
argument_list|(
name|encrTokId
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeToken
argument_list|(
name|encrToken
operator|.
name|getInclusion
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|encrTokElem
init|=
operator|(
name|Element
operator|)
name|encrTok
operator|.
name|getToken
argument_list|()
decl_stmt|;
comment|//Add the encrToken element before the sigToken element
name|secHeader
operator|.
name|getSecurityHeader
argument_list|()
operator|.
name|insertBefore
argument_list|(
name|encrTokElem
argument_list|,
name|sigTokElem
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|enc
init|=
name|getEncryptedParts
argument_list|()
decl_stmt|;
comment|//Check for signature protection
if|if
condition|(
name|sbinding
operator|.
name|isSignatureProtection
argument_list|()
condition|)
block|{
if|if
condition|(
name|mainSigId
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|sigPart
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|mainSigId
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|sigPart
operator|.
name|setElement
argument_list|(
name|bottomUpElement
argument_list|)
expr_stmt|;
name|enc
operator|.
name|add
argument_list|(
name|sigPart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sigConfList
operator|!=
literal|null
operator|&&
operator|!
name|sigConfList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|enc
operator|.
name|addAll
argument_list|(
name|sigConfList
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|id
range|:
name|encryptedTokensIdList
control|)
block|{
name|enc
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|id
argument_list|,
literal|"Element"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|doEncryption
argument_list|(
name|encrTokenWrapper
argument_list|,
name|encrTok
argument_list|,
name|tokIncluded
argument_list|,
name|enc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|WSSecBase
name|doEncryptionDerived
parameter_list|(
name|TokenWrapper
name|recToken
parameter_list|,
name|SecurityToken
name|encrTok
parameter_list|,
name|Token
name|encrToken
parameter_list|,
name|boolean
name|attached
parameter_list|,
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|encrParts
parameter_list|,
name|boolean
name|atEnd
parameter_list|)
block|{
try|try
block|{
name|WSSecDKEncrypt
name|dkEncr
init|=
operator|new
name|WSSecDKEncrypt
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
if|if
condition|(
name|recToken
operator|.
name|getToken
argument_list|()
operator|.
name|getSPConstants
argument_list|()
operator|==
name|SP12Constants
operator|.
name|INSTANCE
condition|)
block|{
name|dkEncr
operator|.
name|setWscVersion
argument_list|(
name|ConversationConstants
operator|.
name|VERSION_05_12
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attached
operator|&&
name|encrTok
operator|.
name|getAttachedReference
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dkEncr
operator|.
name|setExternalKey
argument_list|(
name|encrTok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|cloneElement
argument_list|(
name|encrTok
operator|.
name|getAttachedReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encrTok
operator|.
name|getUnattachedReference
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dkEncr
operator|.
name|setExternalKey
argument_list|(
name|encrTok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|cloneElement
argument_list|(
name|encrTok
operator|.
name|getUnattachedReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isRequestor
argument_list|()
operator|&&
name|encrTok
operator|.
name|getSHA1
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// If the Encrypted key used to create the derived key is not
comment|// attached use key identifier as defined in WSS1.1 section
comment|// 7.7 Encrypted Key reference
name|SecurityTokenReference
name|tokenRef
init|=
operator|new
name|SecurityTokenReference
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
decl_stmt|;
name|tokenRef
operator|.
name|setKeyIdentifierEncKeySHA1
argument_list|(
name|encrTok
operator|.
name|getSHA1
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tokenType
init|=
name|encrTok
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenType
operator|==
literal|null
condition|)
block|{
name|tokenType
operator|=
name|WSConstants
operator|.
name|WSS_ENC_KEY_VALUE_TYPE
expr_stmt|;
block|}
name|tokenRef
operator|.
name|addTokenType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|dkEncr
operator|.
name|setExternalKey
argument_list|(
name|encrTok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|tokenRef
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|attached
condition|)
block|{
name|String
name|id
init|=
name|encrTok
operator|.
name|getWsuId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|&&
operator|(
name|encrToken
operator|instanceof
name|SecureConversationToken
operator|||
name|encrToken
operator|instanceof
name|SecurityContextToken
operator|)
condition|)
block|{
name|dkEncr
operator|.
name|setTokenIdDirectId
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|id
operator|=
name|encrTok
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|encrTok
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|dkEncr
operator|.
name|setExternalKey
argument_list|(
name|encrTok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dkEncr
operator|.
name|setTokenIdDirectId
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dkEncr
operator|.
name|setExternalKey
argument_list|(
name|encrTok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|encrTok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|encrTok
operator|.
name|getSHA1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|tokenType
init|=
name|encrTok
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenType
operator|==
literal|null
condition|)
block|{
name|tokenType
operator|=
name|WSConstants
operator|.
name|WSS_ENC_KEY_VALUE_TYPE
expr_stmt|;
block|}
name|dkEncr
operator|.
name|setCustomValueType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tokenType
init|=
name|encrTok
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|dkEncr
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
name|dkEncr
operator|.
name|setCustomValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML2_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|dkEncr
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
name|dkEncr
operator|.
name|setCustomValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dkEncr
operator|.
name|setCustomValueType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
block|}
block|}
name|dkEncr
operator|.
name|setSymmetricEncAlgorithm
argument_list|(
name|sbinding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getEncryption
argument_list|()
argument_list|)
expr_stmt|;
name|dkEncr
operator|.
name|setDerivedKeyLength
argument_list|(
name|sbinding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getEncryptionDerivedKeyLength
argument_list|()
operator|/
literal|8
argument_list|)
expr_stmt|;
name|dkEncr
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|encrDKTokenElem
init|=
literal|null
decl_stmt|;
name|encrDKTokenElem
operator|=
name|dkEncr
operator|.
name|getdktElement
argument_list|()
expr_stmt|;
name|addDerivedKeyElement
argument_list|(
name|encrDKTokenElem
argument_list|)
expr_stmt|;
name|Element
name|refList
init|=
name|dkEncr
operator|.
name|encryptForExternalRef
argument_list|(
literal|null
argument_list|,
name|encrParts
argument_list|)
decl_stmt|;
if|if
condition|(
name|atEnd
condition|)
block|{
name|this
operator|.
name|insertBeforeBottomUp
argument_list|(
name|refList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|addDerivedKeyElement
argument_list|(
name|refList
argument_list|)
expr_stmt|;
block|}
return|return
name|dkEncr
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|policyNotAsserted
argument_list|(
name|recToken
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|WSSecBase
name|doEncryption
parameter_list|(
name|TokenWrapper
name|recToken
parameter_list|,
name|SecurityToken
name|encrTok
parameter_list|,
name|boolean
name|attached
parameter_list|,
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|encrParts
parameter_list|,
name|boolean
name|atEnd
parameter_list|)
block|{
comment|//Do encryption
if|if
condition|(
name|recToken
operator|!=
literal|null
operator|&&
name|recToken
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|encrParts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Token
name|encrToken
init|=
name|recToken
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|policyAsserted
argument_list|(
name|recToken
argument_list|)
expr_stmt|;
name|policyAsserted
argument_list|(
name|encrToken
argument_list|)
expr_stmt|;
name|AlgorithmSuite
name|algorithmSuite
init|=
name|sbinding
operator|.
name|getAlgorithmSuite
argument_list|()
decl_stmt|;
if|if
condition|(
name|encrToken
operator|.
name|isDerivedKeys
argument_list|()
condition|)
block|{
return|return
name|doEncryptionDerived
argument_list|(
name|recToken
argument_list|,
name|encrTok
argument_list|,
name|encrToken
argument_list|,
name|attached
argument_list|,
name|encrParts
argument_list|,
name|atEnd
argument_list|)
return|;
block|}
else|else
block|{
try|try
block|{
name|WSSecEncrypt
name|encr
init|=
operator|new
name|WSSecEncrypt
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
name|String
name|encrTokId
init|=
name|encrTok
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|attached
condition|)
block|{
name|encrTokId
operator|=
name|encrTok
operator|.
name|getWsuId
argument_list|()
expr_stmt|;
if|if
condition|(
name|encrTokId
operator|==
literal|null
operator|&&
operator|(
name|encrToken
operator|instanceof
name|SecureConversationToken
operator|||
name|encrToken
operator|instanceof
name|SecurityContextToken
operator|)
condition|)
block|{
name|encr
operator|.
name|setEncKeyIdDirectId
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|encrTokId
operator|=
name|encrTok
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|encrTokId
operator|==
literal|null
condition|)
block|{
name|encrTokId
operator|=
name|encrTok
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|encrTokId
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|encrTokId
operator|=
name|encrTokId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|encr
operator|.
name|setEncKeyIdDirectId
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|encrTok
operator|.
name|getTokenType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|encr
operator|.
name|setCustomReferenceValue
argument_list|(
name|encrTok
operator|.
name|getTokenType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|encr
operator|.
name|setEncKeyId
argument_list|(
name|encrTokId
argument_list|)
expr_stmt|;
name|encr
operator|.
name|setEphemeralKey
argument_list|(
name|encrTok
operator|.
name|getSecret
argument_list|()
argument_list|)
expr_stmt|;
name|Crypto
name|crypto
init|=
name|getEncryptionCrypto
argument_list|(
name|recToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|crypto
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_CRYPTO
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
name|setEncryptionUser
argument_list|(
name|encr
argument_list|,
name|recToken
argument_list|,
literal|false
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
block|}
name|encr
operator|.
name|setDocument
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|encr
operator|.
name|setEncryptSymmKey
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|encr
operator|.
name|setSymmetricEncAlgorithm
argument_list|(
name|algorithmSuite
operator|.
name|getEncryption
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|encrToken
operator|instanceof
name|IssuedToken
condition|)
block|{
comment|//Setting the AttachedReference or the UnattachedReference according to the flag
name|Element
name|ref
decl_stmt|;
if|if
condition|(
name|attached
condition|)
block|{
name|ref
operator|=
name|encrTok
operator|.
name|getAttachedReference
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|=
name|encrTok
operator|.
name|getUnattachedReference
argument_list|()
expr_stmt|;
block|}
name|String
name|tokenType
init|=
name|encrTok
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|SecurityTokenReference
name|secRef
init|=
operator|new
name|SecurityTokenReference
argument_list|(
name|cloneElement
argument_list|(
name|ref
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|encr
operator|.
name|setSecurityTokenReference
argument_list|(
name|secRef
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|encr
operator|.
name|setCustomReferenceValue
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
name|encr
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML2_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|encr
operator|.
name|setCustomReferenceValue
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
name|encr
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|encr
operator|.
name|setCustomReferenceValue
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|encr
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|isRequestor
argument_list|()
condition|)
block|{
if|if
condition|(
name|encrTok
operator|.
name|getSHA1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|encr
operator|.
name|setCustomReferenceValue
argument_list|(
name|encrTok
operator|.
name|getSHA1
argument_list|()
argument_list|)
expr_stmt|;
name|encr
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|ENCRYPTED_KEY_SHA1_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|encr
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|EMBED_SECURITY_TOKEN_REF
argument_list|)
expr_stmt|;
block|}
block|}
name|encr
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
if|if
condition|(
name|encr
operator|.
name|getBSTTokenId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|encr
operator|.
name|prependBSTElementToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
block|}
name|Element
name|refList
init|=
name|encr
operator|.
name|encryptForRef
argument_list|(
literal|null
argument_list|,
name|encrParts
argument_list|)
decl_stmt|;
if|if
condition|(
name|atEnd
condition|)
block|{
name|this
operator|.
name|insertBeforeBottomUp
argument_list|(
name|refList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|addDerivedKeyElement
argument_list|(
name|refList
argument_list|)
expr_stmt|;
block|}
return|return
name|encr
return|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
name|policyNotAsserted
argument_list|(
name|recToken
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|byte
index|[]
name|doSignatureDK
parameter_list|(
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigs
parameter_list|,
name|TokenWrapper
name|policyTokenWrapper
parameter_list|,
name|Token
name|policyToken
parameter_list|,
name|SecurityToken
name|tok
parameter_list|,
name|boolean
name|included
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Document
name|doc
init|=
name|saaj
operator|.
name|getSOAPPart
argument_list|()
decl_stmt|;
name|WSSecDKSign
name|dkSign
init|=
operator|new
name|WSSecDKSign
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
if|if
condition|(
name|policyTokenWrapper
operator|.
name|getToken
argument_list|()
operator|.
name|getSPConstants
argument_list|()
operator|==
name|SP12Constants
operator|.
name|INSTANCE
condition|)
block|{
name|dkSign
operator|.
name|setWscVersion
argument_list|(
name|ConversationConstants
operator|.
name|VERSION_05_12
argument_list|)
expr_stmt|;
block|}
comment|//Check for whether the token is attached in the message or not
name|boolean
name|attached
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|includeToken
argument_list|(
name|policyToken
operator|.
name|getInclusion
argument_list|()
argument_list|)
condition|)
block|{
name|attached
operator|=
literal|true
expr_stmt|;
block|}
comment|// Setting the AttachedReference or the UnattachedReference according to the flag
name|Element
name|ref
decl_stmt|;
if|if
condition|(
name|attached
condition|)
block|{
name|ref
operator|=
name|tok
operator|.
name|getAttachedReference
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|=
name|tok
operator|.
name|getUnattachedReference
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|dkSign
operator|.
name|setExternalKey
argument_list|(
name|tok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|cloneElement
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isRequestor
argument_list|()
operator|&&
name|policyToken
operator|.
name|isDerivedKeys
argument_list|()
operator|&&
name|tok
operator|.
name|getSHA1
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// If the Encrypted key used to create the derived key is not
comment|// attached use key identifier as defined in WSS1.1 section
comment|// 7.7 Encrypted Key reference
name|SecurityTokenReference
name|tokenRef
init|=
operator|new
name|SecurityTokenReference
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|tok
operator|.
name|getSHA1
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tokenRef
operator|.
name|setKeyIdentifierEncKeySHA1
argument_list|(
name|tok
operator|.
name|getSHA1
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tokenType
init|=
name|tok
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenType
operator|==
literal|null
condition|)
block|{
name|tokenType
operator|=
name|WSConstants
operator|.
name|WSS_ENC_KEY_VALUE_TYPE
expr_stmt|;
block|}
name|tokenRef
operator|.
name|addTokenType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
block|}
name|dkSign
operator|.
name|setExternalKey
argument_list|(
name|tok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|tokenRef
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|attached
operator|||
name|policyToken
operator|instanceof
name|SecureConversationToken
operator|||
name|policyToken
operator|instanceof
name|SecurityContextToken
condition|)
block|{
name|dkSign
operator|.
name|setTokenIdDirectId
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|dkSign
operator|.
name|setExternalKey
argument_list|(
name|tok
operator|.
name|getSecret
argument_list|()
argument_list|,
name|tok
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Set the algo info
name|dkSign
operator|.
name|setSignatureAlgorithm
argument_list|(
name|sbinding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|dkSign
operator|.
name|setDerivedKeyLength
argument_list|(
name|sbinding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSignatureDerivedKeyLength
argument_list|()
operator|/
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
name|tok
operator|.
name|getSHA1
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//Set the value type of the reference
name|String
name|tokenType
init|=
name|tok
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenType
operator|==
literal|null
condition|)
block|{
name|tokenType
operator|=
name|WSConstants
operator|.
name|WSS_ENC_KEY_VALUE_TYPE
expr_stmt|;
block|}
name|dkSign
operator|.
name|setCustomValueType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tokenType
init|=
name|tok
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|dkSign
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
name|dkSign
operator|.
name|setCustomValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML2_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|dkSign
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
name|dkSign
operator|.
name|setCustomValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dkSign
operator|.
name|setCustomValueType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|dkSign
operator|.
name|prepare
argument_list|(
name|doc
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConversationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSSecurityException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|sbinding
operator|.
name|isTokenProtection
argument_list|()
condition|)
block|{
name|String
name|sigTokId
init|=
name|tok
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|included
condition|)
block|{
name|sigTokId
operator|=
name|tok
operator|.
name|getWsuId
argument_list|()
expr_stmt|;
if|if
condition|(
name|sigTokId
operator|==
literal|null
condition|)
block|{
name|sigTokId
operator|=
name|tok
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sigTokId
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|sigTokId
operator|=
name|sigTokId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|sigs
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|sigTokId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dkSign
operator|.
name|setParts
argument_list|(
name|sigs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Reference
argument_list|>
name|referenceList
init|=
name|dkSign
operator|.
name|addReferencesToSign
argument_list|(
name|sigs
argument_list|,
name|secHeader
argument_list|)
decl_stmt|;
comment|//Add elements to header
name|Element
name|el
init|=
name|dkSign
operator|.
name|getdktElement
argument_list|()
decl_stmt|;
name|addDerivedKeyElement
argument_list|(
name|el
argument_list|)
expr_stmt|;
comment|//Do signature
if|if
condition|(
name|bottomUpElement
operator|==
literal|null
condition|)
block|{
name|dkSign
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dkSign
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|true
argument_list|,
name|bottomUpElement
argument_list|)
expr_stmt|;
block|}
name|bottomUpElement
operator|=
name|dkSign
operator|.
name|getSignatureElement
argument_list|()
expr_stmt|;
name|this
operator|.
name|mainSigId
operator|=
name|dkSign
operator|.
name|getSignatureId
argument_list|()
expr_stmt|;
return|return
name|dkSign
operator|.
name|getSignatureValue
argument_list|()
return|;
block|}
specifier|private
name|byte
index|[]
name|doSignature
parameter_list|(
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigs
parameter_list|,
name|TokenWrapper
name|policyTokenWrapper
parameter_list|,
name|Token
name|policyToken
parameter_list|,
name|SecurityToken
name|tok
parameter_list|,
name|boolean
name|included
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
name|policyToken
operator|.
name|isDerivedKeys
argument_list|()
condition|)
block|{
return|return
name|doSignatureDK
argument_list|(
name|sigs
argument_list|,
name|policyTokenWrapper
argument_list|,
name|policyToken
argument_list|,
name|tok
argument_list|,
name|included
argument_list|)
return|;
block|}
else|else
block|{
name|WSSecSignature
name|sig
init|=
operator|new
name|WSSecSignature
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
name|sig
operator|.
name|setWsConfig
argument_list|(
name|wssConfig
argument_list|)
expr_stmt|;
comment|// If a EncryptedKeyToken is used, set the correct value type to
comment|// be used in the wsse:Reference in ds:KeyInfo
name|int
name|type
init|=
name|included
condition|?
name|WSConstants
operator|.
name|CUSTOM_SYMM_SIGNING
else|:
name|WSConstants
operator|.
name|CUSTOM_SYMM_SIGNING_DIRECT
decl_stmt|;
if|if
condition|(
name|policyToken
operator|instanceof
name|X509Token
condition|)
block|{
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|SOAPMESSAGE_NS11
operator|+
literal|"#"
operator|+
name|WSConstants
operator|.
name|ENC_KEY_VALUE_TYPE
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//the tok has to be an EncryptedKey token
name|sig
operator|.
name|setEncrKeySha1value
argument_list|(
name|tok
operator|.
name|getSHA1
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|ENCRYPTED_KEY_SHA1_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Setting the AttachedReference or the UnattachedReference according to the flag
name|Element
name|ref
decl_stmt|;
if|if
condition|(
name|included
condition|)
block|{
name|ref
operator|=
name|tok
operator|.
name|getAttachedReference
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|=
name|tok
operator|.
name|getUnattachedReference
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|SecurityTokenReference
name|secRef
init|=
operator|new
name|SecurityTokenReference
argument_list|(
name|cloneElement
argument_list|(
name|ref
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|sig
operator|.
name|setSecurityTokenReference
argument_list|(
name|secRef
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tokenType
init|=
name|tok
operator|.
name|getTokenType
argument_list|()
decl_stmt|;
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSConstants
operator|.
name|WSS_SAML2_TOKEN_TYPE
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
operator|||
name|WSConstants
operator|.
name|SAML2_NS
operator|.
name|equals
argument_list|(
name|tokenType
argument_list|)
condition|)
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|WSConstants
operator|.
name|WSS_SAML2_KI_VALUE_TYPE
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sig
operator|.
name|setCustomTokenValueType
argument_list|(
name|tokenType
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|sigTokId
decl_stmt|;
if|if
condition|(
name|included
condition|)
block|{
name|sigTokId
operator|=
name|tok
operator|.
name|getWsuId
argument_list|()
expr_stmt|;
if|if
condition|(
name|sigTokId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|policyToken
operator|instanceof
name|SecureConversationToken
operator|||
name|policyToken
operator|instanceof
name|SecurityContextToken
condition|)
block|{
name|sig
operator|.
name|setKeyIdentifierType
argument_list|(
name|WSConstants
operator|.
name|CUSTOM_SYMM_SIGNING_DIRECT
argument_list|)
expr_stmt|;
block|}
name|sigTokId
operator|=
name|tok
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sigTokId
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|sigTokId
operator|=
name|sigTokId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sigTokId
operator|=
name|tok
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
name|sig
operator|.
name|setCustomTokenId
argument_list|(
name|sigTokId
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSecretKey
argument_list|(
name|tok
operator|.
name|getSecret
argument_list|()
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSignatureAlgorithm
argument_list|(
name|sbinding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|Crypto
name|crypto
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sbinding
operator|.
name|getProtectionToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|crypto
operator|=
name|getEncryptionCrypto
argument_list|(
name|sbinding
operator|.
name|getProtectionToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|crypto
operator|=
name|getSignatureCrypto
argument_list|(
name|policyTokenWrapper
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_CRYPTO
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
name|sig
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|,
name|crypto
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setParts
argument_list|(
name|sigs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Reference
argument_list|>
name|referenceList
init|=
name|sig
operator|.
name|addReferencesToSign
argument_list|(
name|sigs
argument_list|,
name|secHeader
argument_list|)
decl_stmt|;
comment|//Do signature
if|if
condition|(
name|bottomUpElement
operator|==
literal|null
condition|)
block|{
name|sig
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sig
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|true
argument_list|,
name|bottomUpElement
argument_list|)
expr_stmt|;
block|}
name|bottomUpElement
operator|=
name|sig
operator|.
name|getSignatureElement
argument_list|()
expr_stmt|;
name|this
operator|.
name|mainSigId
operator|=
name|sig
operator|.
name|getId
argument_list|()
expr_stmt|;
return|return
name|sig
operator|.
name|getSignatureValue
argument_list|()
return|;
block|}
block|}
specifier|private
name|String
name|setupEncryptedKey
parameter_list|(
name|TokenWrapper
name|wrapper
parameter_list|,
name|Token
name|sigToken
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|WSSecEncryptedKey
name|encrKey
init|=
name|this
operator|.
name|getEncryptedKeyBuilder
argument_list|(
name|wrapper
argument_list|,
name|sigToken
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|encrKey
operator|.
name|getId
argument_list|()
decl_stmt|;
name|byte
index|[]
name|secret
init|=
name|encrKey
operator|.
name|getEphemeralKey
argument_list|()
decl_stmt|;
name|Date
name|created
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Date
name|expires
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|expires
operator|.
name|setTime
argument_list|(
name|created
operator|.
name|getTime
argument_list|()
operator|+
literal|300000
argument_list|)
expr_stmt|;
name|SecurityToken
name|tempTok
init|=
operator|new
name|SecurityToken
argument_list|(
name|id
argument_list|,
name|encrKey
operator|.
name|getEncryptedKeyElement
argument_list|()
argument_list|,
name|created
argument_list|,
name|expires
argument_list|)
decl_stmt|;
name|tempTok
operator|.
name|setSecret
argument_list|(
name|secret
argument_list|)
expr_stmt|;
comment|// Set the SHA1 value of the encrypted key, this is used when the encrypted
comment|// key is referenced via a key identifier of type EncryptedKeySHA1
name|tempTok
operator|.
name|setSHA1
argument_list|(
name|getSHA1
argument_list|(
name|encrKey
operator|.
name|getEncryptedEphemeralKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tokenStore
operator|.
name|add
argument_list|(
name|tempTok
argument_list|)
expr_stmt|;
name|String
name|bstTokenId
init|=
name|encrKey
operator|.
name|getBSTTokenId
argument_list|()
decl_stmt|;
comment|//If direct ref is used to refer to the cert
comment|//then add the cert to the sec header now
if|if
condition|(
name|bstTokenId
operator|!=
literal|null
operator|&&
name|bstTokenId
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|encrKey
operator|.
name|prependBSTElementToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
specifier|private
name|String
name|getEncryptedKey
parameter_list|()
block|{
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|results
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|WSHandlerResult
name|rResult
range|:
name|results
control|)
block|{
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|wsSecEngineResults
init|=
name|rResult
operator|.
name|getResults
argument_list|()
decl_stmt|;
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|wsSecEngineResults
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
name|String
name|encryptedKeyID
init|=
operator|(
name|String
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|ENCR
operator|&&
name|encryptedKeyID
operator|!=
literal|null
operator|&&
name|encryptedKeyID
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Date
name|created
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Date
name|expires
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|expires
operator|.
name|setTime
argument_list|(
name|created
operator|.
name|getTime
argument_list|()
operator|+
literal|300000
argument_list|)
expr_stmt|;
name|SecurityToken
name|tempTok
init|=
operator|new
name|SecurityToken
argument_list|(
name|encryptedKeyID
argument_list|,
name|created
argument_list|,
name|expires
argument_list|)
decl_stmt|;
name|tempTok
operator|.
name|setSecret
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
argument_list|)
expr_stmt|;
name|tempTok
operator|.
name|setSHA1
argument_list|(
name|getSHA1
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ENCRYPTED_EPHEMERAL_KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tokenStore
operator|.
name|add
argument_list|(
name|tempTok
argument_list|)
expr_stmt|;
return|return
name|encryptedKeyID
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|getSHA1
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
block|{
try|try
block|{
name|byte
index|[]
name|digestBytes
init|=
name|WSSecurityUtil
operator|.
name|generateDigest
argument_list|(
name|input
argument_list|)
decl_stmt|;
return|return
name|Base64
operator|.
name|encode
argument_list|(
name|digestBytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
comment|//REVISIT
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

