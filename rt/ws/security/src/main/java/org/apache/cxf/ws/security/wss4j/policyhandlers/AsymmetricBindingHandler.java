begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyhandlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|crypto
operator|.
name|dsig
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|saml
operator|.
name|SamlAssertionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSEncryptionPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|WSHandlerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecDKEncrypt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecDKSign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecEncrypt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecEncryptedKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|WSSecTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractSymmetricAsymmetricBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractToken
operator|.
name|DerivedKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractTokenWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
operator|.
name|AlgorithmSuiteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AsymmetricBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|IssuedToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SamlToken
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|AsymmetricBindingHandler
extends|extends
name|AbstractBindingBuilder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AsymmetricBindingHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|AsymmetricBinding
name|abinding
decl_stmt|;
specifier|private
name|WSSecEncryptedKey
name|encrKey
decl_stmt|;
specifier|private
name|String
name|encryptedKeyId
decl_stmt|;
specifier|private
name|byte
index|[]
name|encryptedKeyValue
decl_stmt|;
specifier|public
name|AsymmetricBindingHandler
parameter_list|(
name|WSSConfig
name|config
parameter_list|,
name|AsymmetricBinding
name|binding
parameter_list|,
name|SOAPMessage
name|saaj
parameter_list|,
name|WSSecHeader
name|secHeader
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|,
name|binding
argument_list|,
name|saaj
argument_list|,
name|secHeader
argument_list|,
name|aim
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|abinding
operator|=
name|binding
expr_stmt|;
name|protectionOrder
operator|=
name|binding
operator|.
name|getProtectionOrder
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|handleBinding
parameter_list|()
block|{
name|WSSecTimestamp
name|timestamp
init|=
name|createTimestamp
argument_list|()
decl_stmt|;
name|handleLayout
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|abinding
operator|.
name|getProtectionOrder
argument_list|()
operator|==
name|AbstractSymmetricAsymmetricBinding
operator|.
name|ProtectionOrder
operator|.
name|EncryptBeforeSigning
condition|)
block|{
name|doEncryptBeforeSign
argument_list|()
expr_stmt|;
name|policyAsserted
argument_list|(
name|SPConstants
operator|.
name|ENCRYPT_BEFORE_SIGNING
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doSignBeforeEncrypt
argument_list|()
expr_stmt|;
name|policyAsserted
argument_list|(
name|SPConstants
operator|.
name|SIGN_BEFORE_ENCRYPTING
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doSignBeforeEncrypt
parameter_list|()
block|{
try|try
block|{
name|AbstractTokenWrapper
name|initiatorWrapper
init|=
name|abinding
operator|.
name|getInitiatorSignatureToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|initiatorWrapper
operator|==
literal|null
condition|)
block|{
name|initiatorWrapper
operator|=
name|abinding
operator|.
name|getInitiatorToken
argument_list|()
expr_stmt|;
block|}
name|boolean
name|attached
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|initiatorWrapper
operator|!=
literal|null
condition|)
block|{
name|AbstractToken
name|initiatorToken
init|=
name|initiatorWrapper
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|initiatorToken
operator|instanceof
name|IssuedToken
condition|)
block|{
name|SecurityToken
name|secToken
init|=
name|getSecurityToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|secToken
operator|==
literal|null
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|initiatorToken
argument_list|,
literal|"Security token is not found or expired"
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|policyAsserted
argument_list|(
name|initiatorToken
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeToken
argument_list|(
name|initiatorToken
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|el
init|=
name|secToken
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|this
operator|.
name|addEncryptedKeyElement
argument_list|(
name|cloneElement
argument_list|(
name|el
argument_list|)
argument_list|)
expr_stmt|;
name|attached
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|initiatorToken
operator|instanceof
name|SamlToken
condition|)
block|{
name|SamlAssertionWrapper
name|assertionWrapper
init|=
name|addSamlToken
argument_list|(
operator|(
name|SamlToken
operator|)
name|initiatorToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|assertionWrapper
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|includeToken
argument_list|(
name|initiatorToken
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
condition|)
block|{
name|addSupportingElement
argument_list|(
name|assertionWrapper
operator|.
name|toDOM
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|storeAssertionAsSecurityToken
argument_list|(
name|assertionWrapper
argument_list|)
expr_stmt|;
block|}
name|policyAsserted
argument_list|(
name|initiatorToken
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Add timestamp
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigs
init|=
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|timestampEl
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|timestampPart
init|=
name|convertToEncryptionPart
argument_list|(
name|timestampEl
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
name|sigs
operator|.
name|add
argument_list|(
name|timestampPart
argument_list|)
expr_stmt|;
block|}
name|addSupportingTokens
argument_list|(
name|sigs
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRequestor
argument_list|()
operator|&&
name|initiatorWrapper
operator|!=
literal|null
condition|)
block|{
name|doSignature
argument_list|(
name|initiatorWrapper
argument_list|,
name|sigs
argument_list|,
name|attached
argument_list|)
expr_stmt|;
name|doEndorse
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isRequestor
argument_list|()
condition|)
block|{
comment|//confirm sig
name|addSignatureConfirmation
argument_list|(
name|sigs
argument_list|)
expr_stmt|;
name|AbstractTokenWrapper
name|recipientSignatureToken
init|=
name|abinding
operator|.
name|getRecipientSignatureToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|recipientSignatureToken
operator|==
literal|null
condition|)
block|{
name|recipientSignatureToken
operator|=
name|abinding
operator|.
name|getRecipientToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|recipientSignatureToken
operator|!=
literal|null
condition|)
block|{
name|doSignature
argument_list|(
name|recipientSignatureToken
argument_list|,
name|sigs
argument_list|,
name|attached
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|enc
init|=
name|getEncryptedParts
argument_list|()
decl_stmt|;
comment|//Check for signature protection
if|if
condition|(
name|abinding
operator|.
name|isEncryptSignature
argument_list|()
condition|)
block|{
if|if
condition|(
name|mainSigId
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|sigPart
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|mainSigId
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|sigPart
operator|.
name|setElement
argument_list|(
name|bottomUpElement
argument_list|)
expr_stmt|;
name|enc
operator|.
name|add
argument_list|(
name|sigPart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sigConfList
operator|!=
literal|null
operator|&&
operator|!
name|sigConfList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|enc
operator|.
name|addAll
argument_list|(
name|sigConfList
argument_list|)
expr_stmt|;
block|}
name|policyAsserted
argument_list|(
name|SPConstants
operator|.
name|ENCRYPT_SIGNATURE
argument_list|)
expr_stmt|;
block|}
comment|//Do encryption
name|AbstractTokenWrapper
name|encToken
decl_stmt|;
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|enc
operator|.
name|addAll
argument_list|(
name|encryptedTokensList
argument_list|)
expr_stmt|;
name|encToken
operator|=
name|abinding
operator|.
name|getRecipientEncryptionToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|encToken
operator|==
literal|null
condition|)
block|{
name|encToken
operator|=
name|abinding
operator|.
name|getRecipientToken
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|encToken
operator|=
name|abinding
operator|.
name|getInitiatorEncryptionToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|encToken
operator|==
literal|null
condition|)
block|{
name|encToken
operator|=
name|abinding
operator|.
name|getInitiatorToken
argument_list|()
expr_stmt|;
block|}
block|}
name|doEncryption
argument_list|(
name|encToken
argument_list|,
name|enc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|reason
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Sign before encryption failed due to : "
operator|+
name|reason
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|doEncryptBeforeSign
parameter_list|()
block|{
name|AbstractTokenWrapper
name|wrapper
decl_stmt|;
name|AbstractToken
name|encryptionToken
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|wrapper
operator|=
name|abinding
operator|.
name|getRecipientEncryptionToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|wrapper
operator|==
literal|null
condition|)
block|{
name|wrapper
operator|=
name|abinding
operator|.
name|getRecipientToken
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|wrapper
operator|=
name|abinding
operator|.
name|getInitiatorEncryptionToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|wrapper
operator|==
literal|null
condition|)
block|{
name|wrapper
operator|=
name|abinding
operator|.
name|getInitiatorToken
argument_list|()
expr_stmt|;
block|}
block|}
name|encryptionToken
operator|=
name|wrapper
operator|.
name|getToken
argument_list|()
expr_stmt|;
name|AbstractTokenWrapper
name|initiatorWrapper
init|=
name|abinding
operator|.
name|getInitiatorSignatureToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|initiatorWrapper
operator|==
literal|null
condition|)
block|{
name|initiatorWrapper
operator|=
name|abinding
operator|.
name|getInitiatorToken
argument_list|()
expr_stmt|;
block|}
name|boolean
name|attached
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|initiatorWrapper
operator|!=
literal|null
condition|)
block|{
name|AbstractToken
name|initiatorToken
init|=
name|initiatorWrapper
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|initiatorToken
operator|instanceof
name|IssuedToken
condition|)
block|{
name|SecurityToken
name|secToken
init|=
name|getSecurityToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|secToken
operator|==
literal|null
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|initiatorToken
argument_list|,
literal|"Security token is not found or expired"
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|policyAsserted
argument_list|(
name|initiatorToken
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeToken
argument_list|(
name|initiatorToken
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|el
init|=
name|secToken
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|this
operator|.
name|addEncryptedKeyElement
argument_list|(
name|cloneElement
argument_list|(
name|el
argument_list|)
argument_list|)
expr_stmt|;
name|attached
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|initiatorToken
operator|instanceof
name|SamlToken
condition|)
block|{
try|try
block|{
name|SamlAssertionWrapper
name|assertionWrapper
init|=
name|addSamlToken
argument_list|(
operator|(
name|SamlToken
operator|)
name|initiatorToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|assertionWrapper
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|includeToken
argument_list|(
name|initiatorToken
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
condition|)
block|{
name|addSupportingElement
argument_list|(
name|assertionWrapper
operator|.
name|toDOM
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|storeAssertionAsSecurityToken
argument_list|(
name|assertionWrapper
argument_list|)
expr_stmt|;
block|}
name|policyAsserted
argument_list|(
name|initiatorToken
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|reason
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Encrypt before sign failed due to : "
operator|+
name|reason
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|encrParts
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
init|=
literal|null
decl_stmt|;
try|try
block|{
name|encrParts
operator|=
name|getEncryptedParts
argument_list|()
expr_stmt|;
comment|//Signed parts are determined before encryption because encrypted signed  headers
comment|//will not be included otherwise
name|sigParts
operator|=
name|getSignedParts
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
comment|//if (encryptionToken == null&& encrParts.size()> 0) {
comment|//REVISIT - no token to encrypt with
comment|//}
if|if
condition|(
name|encryptionToken
operator|!=
literal|null
operator|&&
name|encrParts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|WSSecBase
name|encrBase
init|=
name|doEncryption
argument_list|(
name|wrapper
argument_list|,
name|encrParts
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|handleEncryptedSignedHeaders
argument_list|(
name|encrParts
argument_list|,
name|sigParts
argument_list|)
expr_stmt|;
if|if
condition|(
name|timestampEl
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|timestampPart
init|=
name|convertToEncryptionPart
argument_list|(
name|timestampEl
operator|.
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
name|sigParts
operator|.
name|add
argument_list|(
name|timestampPart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
try|try
block|{
name|addSupportingTokens
argument_list|(
name|sigParts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|ex
parameter_list|)
block|{
name|policyNotAsserted
argument_list|(
name|encryptionToken
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|addSignatureConfirmation
argument_list|(
name|sigParts
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
operator|(
name|sigParts
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
operator|&&
name|initiatorWrapper
operator|!=
literal|null
operator|&&
name|isRequestor
argument_list|()
condition|)
block|{
name|doSignature
argument_list|(
name|initiatorWrapper
argument_list|,
name|sigParts
argument_list|,
name|attached
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isRequestor
argument_list|()
condition|)
block|{
name|AbstractTokenWrapper
name|recipientSignatureToken
init|=
name|abinding
operator|.
name|getRecipientSignatureToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|recipientSignatureToken
operator|==
literal|null
condition|)
block|{
name|recipientSignatureToken
operator|=
name|abinding
operator|.
name|getRecipientToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|recipientSignatureToken
operator|!=
literal|null
condition|)
block|{
name|doSignature
argument_list|(
name|recipientSignatureToken
argument_list|,
name|sigParts
argument_list|,
name|attached
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SOAPException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|doEndorse
argument_list|()
expr_stmt|;
block|}
name|checkForSignatureProtection
argument_list|(
name|encryptionToken
argument_list|,
name|encrBase
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkForSignatureProtection
parameter_list|(
name|AbstractToken
name|encryptionToken
parameter_list|,
name|WSSecBase
name|encrBase
parameter_list|)
block|{
comment|// Check for signature protection
if|if
condition|(
name|abinding
operator|.
name|isEncryptSignature
argument_list|()
condition|)
block|{
name|policyAsserted
argument_list|(
name|SPConstants
operator|.
name|ENCRYPT_SIGNATURE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|secondEncrParts
init|=
operator|new
name|ArrayList
argument_list|<
name|WSEncryptionPart
argument_list|>
argument_list|()
decl_stmt|;
comment|// Now encrypt the signature using the above token
if|if
condition|(
name|mainSigId
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|sigPart
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|mainSigId
argument_list|,
literal|"Element"
argument_list|)
decl_stmt|;
name|sigPart
operator|.
name|setElement
argument_list|(
name|bottomUpElement
argument_list|)
expr_stmt|;
name|secondEncrParts
operator|.
name|add
argument_list|(
name|sigPart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sigConfList
operator|!=
literal|null
operator|&&
operator|!
name|sigConfList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|secondEncrParts
operator|.
name|addAll
argument_list|(
name|sigConfList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|secondEncrParts
operator|.
name|addAll
argument_list|(
name|encryptedTokensList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|encryptionToken
operator|.
name|getDerivedKeys
argument_list|()
operator|==
name|DerivedKeys
operator|.
name|RequireDerivedKeys
operator|&&
operator|!
name|secondEncrParts
operator|.
name|isEmpty
argument_list|()
operator|&&
name|encrBase
operator|instanceof
name|WSSecDKEncrypt
condition|)
block|{
try|try
block|{
name|Element
name|secondRefList
init|=
operator|(
operator|(
name|WSSecDKEncrypt
operator|)
name|encrBase
operator|)
operator|.
name|encryptForExternalRef
argument_list|(
literal|null
argument_list|,
name|secondEncrParts
argument_list|)
decl_stmt|;
operator|(
operator|(
name|WSSecDKEncrypt
operator|)
name|encrBase
operator|)
operator|.
name|addExternalRefElement
argument_list|(
name|secondRefList
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|secondEncrParts
operator|.
name|isEmpty
argument_list|()
operator|&&
name|encrBase
operator|instanceof
name|WSSecEncrypt
condition|)
block|{
try|try
block|{
comment|// Encrypt, get hold of the ref list and add it
name|Element
name|secondRefList
init|=
name|saaj
operator|.
name|getSOAPPart
argument_list|()
operator|.
name|createElementNS
argument_list|(
name|WSConstants
operator|.
name|ENC_NS
argument_list|,
name|WSConstants
operator|.
name|ENC_PREFIX
operator|+
literal|":ReferenceList"
argument_list|)
decl_stmt|;
name|this
operator|.
name|insertBeforeBottomUp
argument_list|(
name|secondRefList
argument_list|)
expr_stmt|;
operator|(
operator|(
name|WSSecEncrypt
operator|)
name|encrBase
operator|)
operator|.
name|encryptForRef
argument_list|(
name|secondRefList
argument_list|,
name|secondEncrParts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|WSSecBase
name|doEncryption
parameter_list|(
name|AbstractTokenWrapper
name|recToken
parameter_list|,
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|encrParts
parameter_list|,
name|boolean
name|externalRef
parameter_list|)
block|{
comment|//Do encryption
if|if
condition|(
name|recToken
operator|!=
literal|null
operator|&&
name|recToken
operator|.
name|getToken
argument_list|()
operator|!=
literal|null
operator|&&
name|encrParts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|AbstractToken
name|encrToken
init|=
name|recToken
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|policyAsserted
argument_list|(
name|recToken
argument_list|)
expr_stmt|;
name|policyAsserted
argument_list|(
name|encrToken
argument_list|)
expr_stmt|;
name|AlgorithmSuite
name|algorithmSuite
init|=
name|abinding
operator|.
name|getAlgorithmSuite
argument_list|()
decl_stmt|;
if|if
condition|(
name|encrToken
operator|.
name|getDerivedKeys
argument_list|()
operator|==
name|DerivedKeys
operator|.
name|RequireDerivedKeys
condition|)
block|{
try|try
block|{
name|WSSecDKEncrypt
name|dkEncr
init|=
operator|new
name|WSSecDKEncrypt
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
if|if
condition|(
name|encrKey
operator|==
literal|null
condition|)
block|{
name|setupEncryptedKey
argument_list|(
name|recToken
argument_list|,
name|encrToken
argument_list|)
expr_stmt|;
block|}
name|dkEncr
operator|.
name|setExternalKey
argument_list|(
name|this
operator|.
name|encryptedKeyValue
argument_list|,
name|this
operator|.
name|encryptedKeyId
argument_list|)
expr_stmt|;
name|dkEncr
operator|.
name|setParts
argument_list|(
name|encrParts
argument_list|)
expr_stmt|;
name|dkEncr
operator|.
name|setCustomValueType
argument_list|(
name|WSConstants
operator|.
name|SOAPMESSAGE_NS11
operator|+
literal|"#"
operator|+
name|WSConstants
operator|.
name|ENC_KEY_VALUE_TYPE
argument_list|)
expr_stmt|;
name|AlgorithmSuiteType
name|algType
init|=
name|algorithmSuite
operator|.
name|getAlgorithmSuiteType
argument_list|()
decl_stmt|;
name|dkEncr
operator|.
name|setSymmetricEncAlgorithm
argument_list|(
name|algType
operator|.
name|getEncryption
argument_list|()
argument_list|)
expr_stmt|;
name|dkEncr
operator|.
name|setDerivedKeyLength
argument_list|(
name|algType
operator|.
name|getEncryptionDerivedKeyLength
argument_list|()
operator|/
literal|8
argument_list|)
expr_stmt|;
name|dkEncr
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|addDerivedKeyElement
argument_list|(
name|dkEncr
operator|.
name|getdktElement
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|refList
init|=
name|dkEncr
operator|.
name|encryptForExternalRef
argument_list|(
literal|null
argument_list|,
name|encrParts
argument_list|)
decl_stmt|;
name|insertBeforeBottomUp
argument_list|(
name|refList
argument_list|)
expr_stmt|;
return|return
name|dkEncr
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|policyNotAsserted
argument_list|(
name|recToken
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|WSSecEncrypt
name|encr
init|=
operator|new
name|WSSecEncrypt
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
name|encr
operator|.
name|setDocument
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|Crypto
name|crypto
init|=
name|getEncryptionCrypto
argument_list|(
name|recToken
argument_list|)
decl_stmt|;
name|SecurityToken
name|securityToken
init|=
name|getSecurityToken
argument_list|()
decl_stmt|;
name|setKeyIdentifierType
argument_list|(
name|encr
argument_list|,
name|recToken
argument_list|,
name|encrToken
argument_list|)
expr_stmt|;
comment|//
comment|// Using a stored cert is only suitable for the Issued Token case, where
comment|// we're extracting the cert from a SAML Assertion on the provider side
comment|//
if|if
condition|(
operator|!
name|isRequestor
argument_list|()
operator|&&
name|securityToken
operator|!=
literal|null
operator|&&
name|securityToken
operator|.
name|getX509Certificate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|encr
operator|.
name|setUseThisCert
argument_list|(
name|securityToken
operator|.
name|getX509Certificate
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setEncryptionUser
argument_list|(
name|encr
argument_list|,
name|recToken
argument_list|,
literal|false
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|encr
operator|.
name|isCertSet
argument_list|()
operator|&&
name|crypto
operator|==
literal|null
condition|)
block|{
name|policyNotAsserted
argument_list|(
name|recToken
argument_list|,
literal|"Missing security configuration. "
operator|+
literal|"Make sure jaxws:client element is configured "
operator|+
literal|"with a "
operator|+
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
operator|+
literal|" value."
argument_list|)
expr_stmt|;
block|}
name|AlgorithmSuiteType
name|algType
init|=
name|algorithmSuite
operator|.
name|getAlgorithmSuiteType
argument_list|()
decl_stmt|;
name|encr
operator|.
name|setSymmetricEncAlgorithm
argument_list|(
name|algType
operator|.
name|getEncryption
argument_list|()
argument_list|)
expr_stmt|;
name|encr
operator|.
name|setKeyEncAlgo
argument_list|(
name|algType
operator|.
name|getAsymmetricKeyWrap
argument_list|()
argument_list|)
expr_stmt|;
name|encr
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
if|if
condition|(
name|encr
operator|.
name|getBSTTokenId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|encr
operator|.
name|prependBSTElementToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
block|}
name|Element
name|encryptedKeyElement
init|=
name|encr
operator|.
name|getEncryptedKeyElement
argument_list|()
decl_stmt|;
comment|//Encrypt, get hold of the ref list and add it
if|if
condition|(
name|externalRef
condition|)
block|{
name|Element
name|refList
init|=
name|encr
operator|.
name|encryptForRef
argument_list|(
literal|null
argument_list|,
name|encrParts
argument_list|)
decl_stmt|;
name|insertBeforeBottomUp
argument_list|(
name|refList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|refList
init|=
name|encr
operator|.
name|encryptForRef
argument_list|(
literal|null
argument_list|,
name|encrParts
argument_list|)
decl_stmt|;
comment|// Add internal refs
name|encryptedKeyElement
operator|.
name|appendChild
argument_list|(
name|refList
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|addEncryptedKeyElement
argument_list|(
name|encryptedKeyElement
argument_list|)
expr_stmt|;
return|return
name|encr
return|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
name|policyNotAsserted
argument_list|(
name|recToken
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|assertUnusedTokens
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|)
block|{
if|if
condition|(
name|wrapper
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|wrapper
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getAssertion
argument_list|()
operator|==
name|wrapper
condition|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ais
operator|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|wrapper
operator|.
name|getToken
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getAssertion
argument_list|()
operator|==
name|wrapper
operator|.
name|getToken
argument_list|()
condition|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|doSignature
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|,
name|List
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
parameter_list|,
name|boolean
name|attached
parameter_list|)
throws|throws
name|WSSecurityException
throws|,
name|SOAPException
block|{
if|if
condition|(
operator|!
name|isRequestor
argument_list|()
condition|)
block|{
name|assertUnusedTokens
argument_list|(
name|abinding
operator|.
name|getInitiatorToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertUnusedTokens
argument_list|(
name|abinding
operator|.
name|getInitiatorEncryptionToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertUnusedTokens
argument_list|(
name|abinding
operator|.
name|getInitiatorSignatureToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertUnusedTokens
argument_list|(
name|abinding
operator|.
name|getRecipientToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertUnusedTokens
argument_list|(
name|abinding
operator|.
name|getRecipientEncryptionToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertUnusedTokens
argument_list|(
name|abinding
operator|.
name|getRecipientSignatureToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|AbstractToken
name|sigToken
init|=
name|wrapper
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|sigParts
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|getSignedParts
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sigParts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Add the BST to the security header if required
if|if
condition|(
operator|!
name|attached
operator|&&
name|includeToken
argument_list|(
name|sigToken
operator|.
name|getIncludeTokenType
argument_list|()
argument_list|)
condition|)
block|{
name|WSSecSignature
name|sig
init|=
name|getSignatureBuilder
argument_list|(
name|wrapper
argument_list|,
name|sigToken
argument_list|,
name|attached
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|sig
operator|.
name|prependBSTElementToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|sigToken
operator|.
name|getDerivedKeys
argument_list|()
operator|==
name|DerivedKeys
operator|.
name|RequireDerivedKeys
condition|)
block|{
comment|// Set up the encrypted key to use
name|setupEncryptedKey
argument_list|(
name|wrapper
argument_list|,
name|sigToken
argument_list|)
expr_stmt|;
name|WSSecDKSign
name|dkSign
init|=
operator|new
name|WSSecDKSign
argument_list|(
name|wssConfig
argument_list|)
decl_stmt|;
name|dkSign
operator|.
name|setExternalKey
argument_list|(
name|this
operator|.
name|encryptedKeyValue
argument_list|,
name|this
operator|.
name|encryptedKeyId
argument_list|)
expr_stmt|;
comment|// Set the algo info
name|dkSign
operator|.
name|setSignatureAlgorithm
argument_list|(
name|abinding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|AlgorithmSuiteType
name|algType
init|=
name|abinding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getAlgorithmSuiteType
argument_list|()
decl_stmt|;
name|dkSign
operator|.
name|setDerivedKeyLength
argument_list|(
name|algType
operator|.
name|getSignatureDerivedKeyLength
argument_list|()
operator|/
literal|8
argument_list|)
expr_stmt|;
name|dkSign
operator|.
name|setCustomValueType
argument_list|(
name|WSConstants
operator|.
name|SOAPMESSAGE_NS11
operator|+
literal|"#"
operator|+
name|WSConstants
operator|.
name|ENC_KEY_VALUE_TYPE
argument_list|)
expr_stmt|;
try|try
block|{
name|dkSign
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|abinding
operator|.
name|isProtectTokens
argument_list|()
condition|)
block|{
name|policyAsserted
argument_list|(
name|SPConstants
operator|.
name|PROTECT_TOKENS
argument_list|)
expr_stmt|;
if|if
condition|(
name|bstElement
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|bstPart
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|bstElement
operator|.
name|getAttributeNS
argument_list|(
name|WSConstants
operator|.
name|WSU_NS
argument_list|,
literal|"Id"
argument_list|)
argument_list|)
decl_stmt|;
name|bstPart
operator|.
name|setElement
argument_list|(
name|bstElement
argument_list|)
expr_stmt|;
name|sigParts
operator|.
name|add
argument_list|(
name|bstPart
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|WSEncryptionPart
name|ekPart
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|encrKey
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ekPart
operator|.
name|setElement
argument_list|(
name|encrKey
operator|.
name|getEncryptedKeyElement
argument_list|()
argument_list|)
expr_stmt|;
name|sigParts
operator|.
name|add
argument_list|(
name|ekPart
argument_list|)
expr_stmt|;
block|}
block|}
name|dkSign
operator|.
name|setParts
argument_list|(
name|sigParts
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Reference
argument_list|>
name|referenceList
init|=
name|dkSign
operator|.
name|addReferencesToSign
argument_list|(
name|sigParts
argument_list|,
name|secHeader
argument_list|)
decl_stmt|;
comment|// Add elements to header
name|addDerivedKeyElement
argument_list|(
name|dkSign
operator|.
name|getdktElement
argument_list|()
argument_list|)
expr_stmt|;
comment|//Do signature
if|if
condition|(
name|bottomUpElement
operator|==
literal|null
condition|)
block|{
name|dkSign
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dkSign
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|true
argument_list|,
name|bottomUpElement
argument_list|)
expr_stmt|;
block|}
name|bottomUpElement
operator|=
name|dkSign
operator|.
name|getSignatureElement
argument_list|()
expr_stmt|;
name|signatures
operator|.
name|add
argument_list|(
name|dkSign
operator|.
name|getSignatureValue
argument_list|()
argument_list|)
expr_stmt|;
name|mainSigId
operator|=
name|dkSign
operator|.
name|getSignatureId
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|WSSecSignature
name|sig
init|=
name|getSignatureBuilder
argument_list|(
name|wrapper
argument_list|,
name|sigToken
argument_list|,
name|attached
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// This action must occur before sig.prependBSTElementToHeader
if|if
condition|(
name|abinding
operator|.
name|isProtectTokens
argument_list|()
condition|)
block|{
name|policyAsserted
argument_list|(
name|SPConstants
operator|.
name|PROTECT_TOKENS
argument_list|)
expr_stmt|;
if|if
condition|(
name|sig
operator|.
name|getBSTTokenId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|bstPart
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|sig
operator|.
name|getBSTTokenId
argument_list|()
argument_list|)
decl_stmt|;
name|bstPart
operator|.
name|setElement
argument_list|(
name|sig
operator|.
name|getBinarySecurityTokenElement
argument_list|()
argument_list|)
expr_stmt|;
name|sigParts
operator|.
name|add
argument_list|(
name|bstPart
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bstElement
operator|!=
literal|null
condition|)
block|{
name|WSEncryptionPart
name|bstPart
init|=
operator|new
name|WSEncryptionPart
argument_list|(
name|bstElement
operator|.
name|getAttributeNS
argument_list|(
name|WSConstants
operator|.
name|WSU_NS
argument_list|,
literal|"Id"
argument_list|)
argument_list|)
decl_stmt|;
name|bstPart
operator|.
name|setElement
argument_list|(
name|bstElement
argument_list|)
expr_stmt|;
name|sigParts
operator|.
name|add
argument_list|(
name|bstPart
argument_list|)
expr_stmt|;
block|}
block|}
name|sig
operator|.
name|prependBSTElementToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Reference
argument_list|>
name|referenceList
init|=
name|sig
operator|.
name|addReferencesToSign
argument_list|(
name|sigParts
argument_list|,
name|secHeader
argument_list|)
decl_stmt|;
comment|//Do signature
if|if
condition|(
name|bottomUpElement
operator|==
literal|null
condition|)
block|{
name|sig
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sig
operator|.
name|computeSignature
argument_list|(
name|referenceList
argument_list|,
literal|true
argument_list|,
name|bottomUpElement
argument_list|)
expr_stmt|;
block|}
name|bottomUpElement
operator|=
name|sig
operator|.
name|getSignatureElement
argument_list|()
expr_stmt|;
name|signatures
operator|.
name|add
argument_list|(
name|sig
operator|.
name|getSignatureValue
argument_list|()
argument_list|)
expr_stmt|;
name|mainSigId
operator|=
name|sig
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setupEncryptedKey
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|,
name|AbstractToken
name|token
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
operator|!
name|isRequestor
argument_list|()
operator|&&
name|token
operator|.
name|getDerivedKeys
argument_list|()
operator|==
name|DerivedKeys
operator|.
name|RequireDerivedKeys
condition|)
block|{
comment|//If we already have them, simply return
if|if
condition|(
name|encryptedKeyId
operator|!=
literal|null
operator|&&
name|encryptedKeyValue
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|//Use the secret from the incoming EncryptedKey element
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|results
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
block|{
name|encryptedKeyId
operator|=
name|getRequestEncryptedKeyId
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|encryptedKeyValue
operator|=
name|getRequestEncryptedKeyValue
argument_list|(
name|results
argument_list|)
expr_stmt|;
comment|//In the case where we don't have the EncryptedKey in the
comment|//request, for the control to have reached this state,
comment|//the scenario MUST be a case where this is the response
comment|//message by a listener created for an async client
comment|//Therefor we will create a new EncryptedKey
if|if
condition|(
name|encryptedKeyId
operator|==
literal|null
operator|&&
name|encryptedKeyValue
operator|==
literal|null
condition|)
block|{
name|createEncryptedKey
argument_list|(
name|wrapper
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"No security results found"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|createEncryptedKey
argument_list|(
name|wrapper
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getRequestEncryptedKeyId
parameter_list|(
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|results
parameter_list|)
block|{
for|for
control|(
name|WSHandlerResult
name|rResult
range|:
name|results
control|)
block|{
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|wsSecEngineResults
init|=
name|rResult
operator|.
name|getResults
argument_list|()
decl_stmt|;
comment|/*              * Scan the results for the first Signature action. Use the              * certificate of this Signature to set the certificate for the              * encryption action :-).              */
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|wsSecEngineResults
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
name|String
name|encrKeyId
init|=
operator|(
name|String
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|ENCR
operator|&&
name|encrKeyId
operator|!=
literal|null
condition|)
block|{
return|return
name|encrKeyId
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getRequestEncryptedKeyValue
parameter_list|(
name|List
argument_list|<
name|WSHandlerResult
argument_list|>
name|results
parameter_list|)
block|{
for|for
control|(
name|WSHandlerResult
name|rResult
range|:
name|results
control|)
block|{
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|wsSecEngineResults
init|=
name|rResult
operator|.
name|getResults
argument_list|()
decl_stmt|;
comment|/*             * Scan the results for the first Signature action. Use the             * certificate of this Signature to set the certificate for the             * encryption action :-).             */
for|for
control|(
name|WSSecurityEngineResult
name|wser
range|:
name|wsSecEngineResults
control|)
block|{
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
name|byte
index|[]
name|decryptedKey
init|=
operator|(
name|byte
index|[]
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SECRET
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|ENCR
operator|&&
name|decryptedKey
operator|!=
literal|null
condition|)
block|{
return|return
name|decryptedKey
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|createEncryptedKey
parameter_list|(
name|AbstractTokenWrapper
name|wrapper
parameter_list|,
name|AbstractToken
name|token
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|//Set up the encrypted key to use
name|encrKey
operator|=
name|this
operator|.
name|getEncryptedKeyBuilder
argument_list|(
name|wrapper
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Element
name|bstElem
init|=
name|encrKey
operator|.
name|getBinarySecurityTokenElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|bstElem
operator|!=
literal|null
condition|)
block|{
comment|// If a BST is available then use it
name|encrKey
operator|.
name|prependBSTElementToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
block|}
comment|// Add the EncryptedKey
name|this
operator|.
name|addEncryptedKeyElement
argument_list|(
name|encrKey
operator|.
name|getEncryptedKeyElement
argument_list|()
argument_list|)
expr_stmt|;
name|encryptedKeyValue
operator|=
name|encrKey
operator|.
name|getEphemeralKey
argument_list|()
expr_stmt|;
name|encryptedKeyId
operator|=
name|encrKey
operator|.
name|getId
argument_list|()
expr_stmt|;
comment|//Store the token for client - response verification
comment|// and server - response creation
name|message
operator|.
name|put
argument_list|(
name|WSSecEncryptedKey
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|encrKey
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

