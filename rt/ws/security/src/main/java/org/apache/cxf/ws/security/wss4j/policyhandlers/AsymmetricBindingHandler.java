begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyhandlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|AsymmetricBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|RecipientToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SupportingToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|TokenWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Wss10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Wss11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSEncryptionPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecDKEncrypt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecDKSign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecEncrypt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecEncryptedKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecSignatureConfirmation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|message
operator|.
name|WSSecTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|AsymmetricBindingHandler
extends|extends
name|BindingBuilder
block|{
name|AsymmetricBinding
name|abinding
decl_stmt|;
specifier|private
name|WSSecEncryptedKey
name|encrKey
decl_stmt|;
specifier|private
name|String
name|encryptedKeyId
decl_stmt|;
specifier|private
name|byte
index|[]
name|encryptedKeyValue
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|sigSuppTokMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|sgndEndSuppTokMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|sgndEncSuppTokMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|sgndEndEncSuppTokMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|endSuppTokMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Token
argument_list|,
name|WSSecBase
argument_list|>
name|endEncSuppTokMap
decl_stmt|;
specifier|public
name|AsymmetricBindingHandler
parameter_list|(
name|AsymmetricBinding
name|binding
parameter_list|,
name|SOAPMessage
name|saaj
parameter_list|,
name|WSSecHeader
name|secHeader
parameter_list|,
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|binding
argument_list|,
name|saaj
argument_list|,
name|secHeader
argument_list|,
name|aim
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|abinding
operator|=
name|binding
expr_stmt|;
block|}
specifier|public
name|void
name|handleBinding
parameter_list|()
block|{
name|WSSecTimestamp
name|timestamp
init|=
name|createTimestamp
argument_list|()
decl_stmt|;
name|timestamp
operator|=
name|handleLayout
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|abinding
operator|.
name|getProtectionOrder
argument_list|()
operator|==
name|SPConstants
operator|.
name|ProtectionOrder
operator|.
name|EncryptBeforeSigning
condition|)
block|{
name|doEncryptBeforeSign
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doSignBeforeEncrypt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timestamp
operator|!=
literal|null
condition|)
block|{
name|timestamp
operator|.
name|prependToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doSignBeforeEncrypt
parameter_list|()
block|{
try|try
block|{
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigs
init|=
name|getSignedParts
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|SupportingToken
name|sgndSuppTokens
init|=
operator|(
name|SupportingToken
operator|)
name|findPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|sigSuppTokMap
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndSuppTokens
argument_list|)
expr_stmt|;
name|SupportingToken
name|endSuppTokens
init|=
operator|(
name|SupportingToken
operator|)
name|findPolicy
argument_list|(
name|SP12Constants
operator|.
name|ENDORSING_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|endSuppTokMap
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|endSuppTokens
argument_list|)
expr_stmt|;
name|SupportingToken
name|sgndEndSuppTokens
init|=
operator|(
name|SupportingToken
operator|)
name|findPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_ENDORSING_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|sgndEndSuppTokMap
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndEndSuppTokens
argument_list|)
expr_stmt|;
name|SupportingToken
name|sgndEncryptedSuppTokens
init|=
operator|(
name|SupportingToken
operator|)
name|findPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|sgndEncSuppTokMap
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndEncryptedSuppTokens
argument_list|)
expr_stmt|;
name|SupportingToken
name|endorsingEncryptedSuppTokens
init|=
operator|(
name|SupportingToken
operator|)
name|findPolicy
argument_list|(
name|SP12Constants
operator|.
name|ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|endEncSuppTokMap
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|endorsingEncryptedSuppTokens
argument_list|)
expr_stmt|;
name|SupportingToken
name|sgndEndEncSuppTokens
init|=
operator|(
name|SupportingToken
operator|)
name|findPolicy
argument_list|(
name|SP12Constants
operator|.
name|SIGNED_ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|sgndEndEncSuppTokMap
operator|=
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|sgndEndEncSuppTokens
argument_list|)
expr_stmt|;
name|SupportingToken
name|supportingToks
init|=
operator|(
name|SupportingToken
operator|)
name|findPolicy
argument_list|(
name|SP12Constants
operator|.
name|SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|supportingToks
argument_list|)
expr_stmt|;
name|SupportingToken
name|encryptedSupportingToks
init|=
operator|(
name|SupportingToken
operator|)
name|findPolicy
argument_list|(
name|SP12Constants
operator|.
name|ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
decl_stmt|;
name|this
operator|.
name|handleSupportingTokens
argument_list|(
name|encryptedSupportingToks
argument_list|)
expr_stmt|;
comment|//Setup signature parts
name|addSignatureParts
argument_list|(
name|sigSuppTokMap
argument_list|,
name|sigs
argument_list|)
expr_stmt|;
name|addSignatureParts
argument_list|(
name|sgndEncSuppTokMap
argument_list|,
name|sigs
argument_list|)
expr_stmt|;
name|addSignatureParts
argument_list|(
name|sgndEndSuppTokMap
argument_list|,
name|sigs
argument_list|)
expr_stmt|;
name|addSignatureParts
argument_list|(
name|sgndEndEncSuppTokMap
argument_list|,
name|sigs
argument_list|)
expr_stmt|;
comment|//Add timestamp
if|if
condition|(
name|timestampEl
operator|!=
literal|null
condition|)
block|{
name|Element
name|el
init|=
name|timestampEl
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|sigs
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|addWsuIdToElement
argument_list|(
name|el
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doSignature
argument_list|(
name|sigs
argument_list|)
expr_stmt|;
name|doEndorse
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//confirm sig
name|addSignatureConfirmation
argument_list|(
name|sigs
argument_list|)
expr_stmt|;
name|doSignature
argument_list|(
name|sigs
argument_list|)
expr_stmt|;
block|}
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|enc
init|=
name|getEncryptedParts
argument_list|()
decl_stmt|;
name|doEncyption
argument_list|(
name|enc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//REVISIT!!
block|}
block|}
specifier|private
name|void
name|doEncryptBeforeSign
parameter_list|()
block|{
comment|// REVISIT
block|}
specifier|protected
name|void
name|addSignatureConfirmation
parameter_list|(
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
parameter_list|)
block|{
name|Wss10
name|wss10
init|=
name|getWss10
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|wss10
operator|instanceof
name|Wss11
operator|)
operator|||
operator|!
operator|(
operator|(
name|Wss11
operator|)
name|wss10
operator|)
operator|.
name|isRequireSignatureConfirmation
argument_list|()
condition|)
block|{
comment|//If we don't require sig confirmation simply go back :-)
return|return;
block|}
name|Vector
name|results
init|=
operator|(
name|Vector
operator|)
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
decl_stmt|;
comment|/*          * loop over all results gathered by all handlers in the chain. For each          * handler result get the various actions. After that loop we have all          * signature results in the signatureActions vector          */
name|Vector
name|signatureActions
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WSHandlerResult
name|wshResult
init|=
operator|(
name|WSHandlerResult
operator|)
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|wshResult
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|SIGN
argument_list|,
name|signatureActions
argument_list|)
expr_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|wshResult
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|ST_SIGNED
argument_list|,
name|signatureActions
argument_list|)
expr_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|wshResult
operator|.
name|getResults
argument_list|()
argument_list|,
name|WSConstants
operator|.
name|UT_SIGN
argument_list|,
name|signatureActions
argument_list|)
expr_stmt|;
block|}
comment|// prepare a SignatureConfirmation token
name|WSSecSignatureConfirmation
name|wsc
init|=
operator|new
name|WSSecSignatureConfirmation
argument_list|()
decl_stmt|;
if|if
condition|(
name|signatureActions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|signatureActions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WSSecurityEngineResult
name|wsr
init|=
operator|(
name|WSSecurityEngineResult
operator|)
name|signatureActions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sigVal
init|=
operator|(
name|byte
index|[]
operator|)
name|wsr
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_SIGNATURE_VALUE
argument_list|)
decl_stmt|;
name|wsc
operator|.
name|setSignatureValue
argument_list|(
name|sigVal
argument_list|)
expr_stmt|;
name|wsc
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|wsc
operator|.
name|prependToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|sigParts
operator|!=
literal|null
condition|)
block|{
name|sigParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|wsc
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//No Sig value
name|wsc
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|wsc
operator|.
name|prependToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|sigParts
operator|!=
literal|null
condition|)
block|{
name|sigParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|wsc
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doEndorse
parameter_list|()
block|{
comment|// Adding the endorsing encrypted supporting tokens to endorsing supporting tokens
name|endSuppTokMap
operator|.
name|putAll
argument_list|(
name|endEncSuppTokMap
argument_list|)
expr_stmt|;
comment|// Do endorsed signatures
name|doEndorsedSignatures
argument_list|(
name|endSuppTokMap
argument_list|,
name|abinding
operator|.
name|isTokenProtection
argument_list|()
argument_list|)
expr_stmt|;
comment|//Adding the signed endorsed encrypted tokens to signed endorsed supporting tokens
name|sgndEndSuppTokMap
operator|.
name|putAll
argument_list|(
name|sgndEndEncSuppTokMap
argument_list|)
expr_stmt|;
comment|// Do signed endorsing signatures
name|doEndorsedSignatures
argument_list|(
name|sgndEndSuppTokMap
argument_list|,
name|abinding
operator|.
name|isTokenProtection
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doEncyption
parameter_list|(
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|encrParts
parameter_list|)
block|{
comment|//Check for signature protection
if|if
condition|(
name|abinding
operator|.
name|isSignatureProtection
argument_list|()
operator|&&
name|mainSigId
operator|!=
literal|null
condition|)
block|{
name|encrParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|mainSigId
argument_list|,
literal|"Element"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|id
range|:
name|encryptedTokensIdList
control|)
block|{
name|encrParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|id
argument_list|,
literal|"Element"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Do encryption
name|RecipientToken
name|recToken
init|=
name|abinding
operator|.
name|getRecipientToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|recToken
operator|!=
literal|null
operator|&&
name|recToken
operator|.
name|getRecipientToken
argument_list|()
operator|!=
literal|null
operator|&&
name|encrParts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Token
name|encrToken
init|=
name|recToken
operator|.
name|getRecipientToken
argument_list|()
decl_stmt|;
name|policyAsserted
argument_list|(
name|recToken
argument_list|)
expr_stmt|;
name|policyAsserted
argument_list|(
name|encrToken
argument_list|)
expr_stmt|;
name|Element
name|refList
init|=
literal|null
decl_stmt|;
name|AlgorithmSuite
name|algorithmSuite
init|=
name|abinding
operator|.
name|getAlgorithmSuite
argument_list|()
decl_stmt|;
if|if
condition|(
name|encrToken
operator|.
name|isDerivedKeys
argument_list|()
condition|)
block|{
try|try
block|{
name|WSSecDKEncrypt
name|dkEncr
init|=
operator|new
name|WSSecDKEncrypt
argument_list|()
decl_stmt|;
if|if
condition|(
name|encrKey
operator|==
literal|null
condition|)
block|{
name|setupEncryptedKey
argument_list|(
name|recToken
argument_list|,
name|encrToken
argument_list|)
expr_stmt|;
block|}
name|dkEncr
operator|.
name|setExternalKey
argument_list|(
name|this
operator|.
name|encryptedKeyValue
argument_list|,
name|this
operator|.
name|encryptedKeyId
argument_list|)
expr_stmt|;
name|dkEncr
operator|.
name|setCustomValueType
argument_list|(
name|WSConstants
operator|.
name|SOAPMESSAGE_NS11
operator|+
literal|"#"
operator|+
name|WSConstants
operator|.
name|ENC_KEY_VALUE_TYPE
argument_list|)
expr_stmt|;
name|dkEncr
operator|.
name|setSymmetricEncAlgorithm
argument_list|(
name|algorithmSuite
operator|.
name|getEncryption
argument_list|()
argument_list|)
expr_stmt|;
name|dkEncr
operator|.
name|setDerivedKeyLength
argument_list|(
name|algorithmSuite
operator|.
name|getEncryptionDerivedKeyLength
argument_list|()
operator|/
literal|8
argument_list|)
expr_stmt|;
name|dkEncr
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|dkEncr
operator|.
name|prependDKElementToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
name|refList
operator|=
name|dkEncr
operator|.
name|encryptForExternalRef
argument_list|(
literal|null
argument_list|,
name|encrParts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|policyNotAsserted
argument_list|(
name|recToken
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|WSSecEncrypt
name|encr
init|=
operator|new
name|WSSecEncrypt
argument_list|()
decl_stmt|;
name|setKeyIdentifierType
argument_list|(
name|encr
argument_list|,
name|recToken
argument_list|,
name|encrToken
argument_list|)
expr_stmt|;
name|encr
operator|.
name|setDocument
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|)
expr_stmt|;
name|setEncryptionUser
argument_list|(
name|encr
argument_list|,
name|encrToken
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|encr
operator|.
name|setSymmetricEncAlgorithm
argument_list|(
name|algorithmSuite
operator|.
name|getEncryption
argument_list|()
argument_list|)
expr_stmt|;
name|encr
operator|.
name|setKeyEncAlgo
argument_list|(
name|algorithmSuite
operator|.
name|getAsymmetricKeyWrap
argument_list|()
argument_list|)
expr_stmt|;
name|encr
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|,
name|getEncryptionCrypto
argument_list|(
name|recToken
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|encr
operator|.
name|getBSTTokenId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|encr
operator|.
name|appendBSTElementToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
block|}
name|Element
name|encryptedKeyElement
init|=
name|encr
operator|.
name|getEncryptedKeyElement
argument_list|()
decl_stmt|;
comment|//Encrypt, get hold of the ref list and add it
name|refList
operator|=
name|encr
operator|.
name|encryptForInternalRef
argument_list|(
literal|null
argument_list|,
name|encrParts
argument_list|)
expr_stmt|;
comment|//Add internal refs
name|encryptedKeyElement
operator|.
name|appendChild
argument_list|(
name|refList
argument_list|)
expr_stmt|;
name|encr
operator|.
name|prependToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
name|policyNotAsserted
argument_list|(
name|recToken
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|assertUnusedTokens
parameter_list|(
name|TokenWrapper
name|wrapper
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|wrapper
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getAssertion
argument_list|()
operator|==
name|wrapper
condition|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|ais
operator|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|wrapper
operator|.
name|getToken
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getAssertion
argument_list|()
operator|==
name|wrapper
operator|.
name|getToken
argument_list|()
condition|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doSignature
parameter_list|(
name|Vector
argument_list|<
name|WSEncryptionPart
argument_list|>
name|sigParts
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Token
name|sigToken
init|=
literal|null
decl_stmt|;
name|TokenWrapper
name|wrapper
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isRequestor
argument_list|()
condition|)
block|{
name|wrapper
operator|=
name|abinding
operator|.
name|getInitiatorToken
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wrapper
operator|=
name|abinding
operator|.
name|getRecipientToken
argument_list|()
expr_stmt|;
name|assertUnusedTokens
argument_list|(
name|abinding
operator|.
name|getInitiatorToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sigToken
operator|=
name|wrapper
operator|.
name|getToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|sigToken
operator|.
name|isDerivedKeys
argument_list|()
condition|)
block|{
comment|// Set up the encrypted key to use
name|setupEncryptedKey
argument_list|(
name|wrapper
argument_list|,
name|sigToken
argument_list|)
expr_stmt|;
name|WSSecDKSign
name|dkSign
init|=
operator|new
name|WSSecDKSign
argument_list|()
decl_stmt|;
name|dkSign
operator|.
name|setExternalKey
argument_list|(
name|this
operator|.
name|encryptedKeyValue
argument_list|,
name|this
operator|.
name|encryptedKeyId
argument_list|)
expr_stmt|;
comment|// Set the algo info
name|dkSign
operator|.
name|setSignatureAlgorithm
argument_list|(
name|abinding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSymmetricSignature
argument_list|()
argument_list|)
expr_stmt|;
name|dkSign
operator|.
name|setDerivedKeyLength
argument_list|(
name|abinding
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSignatureDerivedKeyLength
argument_list|()
operator|/
literal|8
argument_list|)
expr_stmt|;
name|dkSign
operator|.
name|setCustomValueType
argument_list|(
name|WSConstants
operator|.
name|SOAPMESSAGE_NS11
operator|+
literal|"#"
operator|+
name|WSConstants
operator|.
name|ENC_KEY_VALUE_TYPE
argument_list|)
expr_stmt|;
try|try
block|{
name|dkSign
operator|.
name|prepare
argument_list|(
name|saaj
operator|.
name|getSOAPPart
argument_list|()
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|abinding
operator|.
name|isTokenProtection
argument_list|()
condition|)
block|{
name|sigParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|encrKey
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dkSign
operator|.
name|setParts
argument_list|(
name|sigParts
argument_list|)
expr_stmt|;
name|dkSign
operator|.
name|addReferencesToSign
argument_list|(
name|sigParts
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
comment|// Do signature
name|dkSign
operator|.
name|computeSignature
argument_list|()
expr_stmt|;
comment|// Add elements to header
name|dkSign
operator|.
name|appendDKElementToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
name|dkSign
operator|.
name|appendSigToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
name|mainSigId
operator|=
name|addWsuIdToElement
argument_list|(
name|dkSign
operator|.
name|getSignatureElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//REVISIT
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|WSSecSignature
name|sig
init|=
name|getSignatureBuider
argument_list|(
name|wrapper
argument_list|,
name|sigToken
argument_list|)
decl_stmt|;
name|sig
operator|.
name|prependBSTElementToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|abinding
operator|.
name|isTokenProtection
argument_list|()
operator|&&
name|sig
operator|.
name|getBSTTokenId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sigParts
operator|.
name|add
argument_list|(
operator|new
name|WSEncryptionPart
argument_list|(
name|sig
operator|.
name|getBSTTokenId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sig
operator|.
name|addReferencesToSign
argument_list|(
name|sigParts
argument_list|,
name|secHeader
argument_list|)
expr_stmt|;
name|sig
operator|.
name|computeSignature
argument_list|()
expr_stmt|;
name|sig
operator|.
name|prependToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
name|mainSigId
operator|=
name|addWsuIdToElement
argument_list|(
name|sig
operator|.
name|getSignatureElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setupEncryptedKey
parameter_list|(
name|TokenWrapper
name|wrapper
parameter_list|,
name|Token
name|token
parameter_list|)
throws|throws
name|WSSecurityException
block|{
if|if
condition|(
operator|!
name|isRequestor
argument_list|()
operator|&&
name|token
operator|.
name|isDerivedKeys
argument_list|()
condition|)
block|{
comment|//If we already have them, simply return
if|if
condition|(
name|encryptedKeyId
operator|!=
literal|null
operator|&&
name|encryptedKeyValue
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|//Use the secret from the incoming EncryptedKey element
name|Object
name|resultsObj
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
operator|.
name|get
argument_list|(
name|WSHandlerConstants
operator|.
name|RECV_RESULTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultsObj
operator|!=
literal|null
condition|)
block|{
name|encryptedKeyId
operator|=
name|getRequestEncryptedKeyId
argument_list|(
operator|(
name|Vector
operator|)
name|resultsObj
argument_list|)
expr_stmt|;
name|encryptedKeyValue
operator|=
name|getRequestEncryptedKeyValue
argument_list|(
operator|(
name|Vector
operator|)
name|resultsObj
argument_list|)
expr_stmt|;
comment|//In the case where we don't have the EncryptedKey in the
comment|//request, for the control to have reached this state,
comment|//the scenario MUST be a case where this is the response
comment|//message by a listener created for an async client
comment|//Therefor we will create a new EncryptedKey
if|if
condition|(
name|encryptedKeyId
operator|==
literal|null
operator|&&
name|encryptedKeyValue
operator|==
literal|null
condition|)
block|{
name|createEncryptedKey
argument_list|(
name|wrapper
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|policyNotAsserted
argument_list|(
name|token
argument_list|,
literal|"No security results found"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|createEncryptedKey
argument_list|(
name|wrapper
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getRequestEncryptedKeyId
parameter_list|(
name|Vector
name|results
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WSHandlerResult
name|rResult
init|=
operator|(
name|WSHandlerResult
operator|)
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Vector
name|wsSecEngineResults
init|=
name|rResult
operator|.
name|getResults
argument_list|()
decl_stmt|;
comment|/*             * Scan the results for the first Signature action. Use the             * certificate of this Signature to set the certificate for the             * encryption action :-).             */
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wsSecEngineResults
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|WSSecurityEngineResult
name|wser
init|=
operator|(
name|WSSecurityEngineResult
operator|)
name|wsSecEngineResults
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
name|String
name|encrKeyId
init|=
operator|(
name|String
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ENCRYPTED_KEY_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|ENCR
operator|&&
name|encrKeyId
operator|!=
literal|null
condition|)
block|{
return|return
name|encrKeyId
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getRequestEncryptedKeyValue
parameter_list|(
name|Vector
name|results
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|WSHandlerResult
name|rResult
init|=
operator|(
name|WSHandlerResult
operator|)
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Vector
name|wsSecEngineResults
init|=
name|rResult
operator|.
name|getResults
argument_list|()
decl_stmt|;
comment|/*             * Scan the results for the first Signature action. Use the             * certificate of this Signature to set the certificate for the             * encryption action :-).             */
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|wsSecEngineResults
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|WSSecurityEngineResult
name|wser
init|=
operator|(
name|WSSecurityEngineResult
operator|)
name|wsSecEngineResults
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
name|byte
index|[]
name|decryptedKey
init|=
operator|(
name|byte
index|[]
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DECRYPTED_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
operator|==
name|WSConstants
operator|.
name|ENCR
operator|&&
name|decryptedKey
operator|!=
literal|null
condition|)
block|{
return|return
name|decryptedKey
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|createEncryptedKey
parameter_list|(
name|TokenWrapper
name|wrapper
parameter_list|,
name|Token
name|token
parameter_list|)
throws|throws
name|WSSecurityException
block|{
comment|//Set up the encrypted key to use
name|encrKey
operator|=
name|this
operator|.
name|getEncryptedKeyBuilder
argument_list|(
name|wrapper
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|Element
name|bstElem
init|=
name|encrKey
operator|.
name|getBinarySecurityTokenElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|bstElem
operator|!=
literal|null
condition|)
block|{
comment|// If a BST is available then use it
name|encrKey
operator|.
name|prependBSTElementToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
block|}
comment|// Add the EncryptedKey
name|encrKey
operator|.
name|prependToHeader
argument_list|(
name|secHeader
argument_list|)
expr_stmt|;
name|encryptedKeyValue
operator|=
name|encrKey
operator|.
name|getEphemeralKey
argument_list|()
expr_stmt|;
name|encryptedKeyId
operator|=
name|encrKey
operator|.
name|getId
argument_list|()
expr_stmt|;
comment|//Store the token for client - response verification
comment|// and server - response creation
name|message
operator|.
name|put
argument_list|(
name|WSSecEncryptedKey
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|encrKey
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

