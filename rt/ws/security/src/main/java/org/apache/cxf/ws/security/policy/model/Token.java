begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
operator|.
name|IncludeTokenType
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|Token
extends|extends
name|AbstractSecurityAssertion
block|{
comment|/**      * Inclusion property of a TokenAssertion      */
specifier|private
name|IncludeTokenType
name|inclusion
init|=
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS
decl_stmt|;
comment|/**      * Whether to derive keys or not      */
specifier|private
name|boolean
name|derivedKeys
decl_stmt|;
specifier|private
name|boolean
name|impliedDerivedKeys
decl_stmt|;
specifier|private
name|boolean
name|explicitDerivedKeys
decl_stmt|;
specifier|public
name|Token
parameter_list|(
name|SPConstants
name|version
parameter_list|)
block|{
name|super
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return Returns the inclusion.      */
specifier|public
name|IncludeTokenType
name|getInclusion
parameter_list|()
block|{
return|return
name|inclusion
return|;
block|}
comment|/**      * @param inclusion The inclusion to set.      */
specifier|public
name|void
name|setInclusion
parameter_list|(
name|IncludeTokenType
name|inclusion
parameter_list|)
block|{
if|if
condition|(
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS
operator|==
name|inclusion
operator|||
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS_TO_RECIPIENT
operator|==
name|inclusion
operator|||
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS_TO_INITIATOR
operator|==
name|inclusion
operator|||
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_NEVER
operator|==
name|inclusion
operator|||
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ONCE
operator|==
name|inclusion
condition|)
block|{
name|this
operator|.
name|inclusion
operator|=
name|inclusion
expr_stmt|;
block|}
else|else
block|{
comment|// TODO replace this with a proper (WSSPolicyException) exception
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Incorrect inclusion value: "
operator|+
name|inclusion
argument_list|)
throw|;
block|}
block|}
comment|/**      * @return Returns the derivedKeys.      */
specifier|public
name|boolean
name|isDerivedKeys
parameter_list|()
block|{
return|return
name|derivedKeys
return|;
block|}
comment|/**      * @param derivedKeys The derivedKeys to set.      */
specifier|public
name|void
name|setDerivedKeys
parameter_list|(
name|boolean
name|derivedKeys
parameter_list|)
block|{
name|this
operator|.
name|derivedKeys
operator|=
name|derivedKeys
expr_stmt|;
block|}
specifier|public
name|boolean
name|isExplicitDerivedKeys
parameter_list|()
block|{
return|return
name|explicitDerivedKeys
return|;
block|}
specifier|public
name|void
name|setExplicitDerivedKeys
parameter_list|(
name|boolean
name|explicitDerivedKeys
parameter_list|)
block|{
name|this
operator|.
name|explicitDerivedKeys
operator|=
name|explicitDerivedKeys
expr_stmt|;
block|}
specifier|public
name|boolean
name|isImpliedDerivedKeys
parameter_list|()
block|{
return|return
name|impliedDerivedKeys
return|;
block|}
specifier|public
name|void
name|setImpliedDerivedKeys
parameter_list|(
name|boolean
name|impliedDerivedKeys
parameter_list|)
block|{
name|this
operator|.
name|impliedDerivedKeys
operator|=
name|impliedDerivedKeys
expr_stmt|;
block|}
block|}
end_class

end_unit

