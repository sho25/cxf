begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|DefaultSTSTokenCacher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSAuthParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSTokenCacher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSTokenRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSTokenRetriever
operator|.
name|TokenRequestParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSUtils
import|;
end_import

begin_class
specifier|public
class|class
name|STSTokenOutInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|STSTokenOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|STSClient
name|stsClient
decl_stmt|;
specifier|private
name|TokenRequestParams
name|tokenParams
decl_stmt|;
specifier|private
name|STSTokenCacher
name|tokenCacher
init|=
operator|new
name|DefaultSTSTokenCacher
argument_list|()
decl_stmt|;
specifier|public
name|STSTokenOutInterceptor
parameter_list|(
name|STSAuthParams
name|authParams
parameter_list|,
name|String
name|stsWsdlLocation
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|this
argument_list|(
name|Phase
operator|.
name|PREPARE_SEND
argument_list|,
name|authParams
argument_list|,
name|stsWsdlLocation
argument_list|,
name|bus
argument_list|)
expr_stmt|;
block|}
specifier|public
name|STSTokenOutInterceptor
parameter_list|(
name|String
name|phase
parameter_list|,
name|STSAuthParams
name|authParams
parameter_list|,
name|String
name|stsWsdlLocation
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
name|this
operator|.
name|stsClient
operator|=
name|STSUtils
operator|.
name|createSTSClient
argument_list|(
name|authParams
argument_list|,
name|stsWsdlLocation
argument_list|,
name|bus
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenParams
operator|=
operator|new
name|TokenRequestParams
argument_list|()
expr_stmt|;
block|}
specifier|public
name|STSTokenOutInterceptor
parameter_list|(
name|STSClient
name|stsClient
parameter_list|)
block|{
name|this
argument_list|(
name|Phase
operator|.
name|PREPARE_SEND
argument_list|,
name|stsClient
argument_list|,
operator|new
name|TokenRequestParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|STSTokenOutInterceptor
parameter_list|(
name|STSClient
name|stsClient
parameter_list|,
name|TokenRequestParams
name|tokenParams
parameter_list|)
block|{
name|this
argument_list|(
name|Phase
operator|.
name|PREPARE_SEND
argument_list|,
name|stsClient
argument_list|,
name|tokenParams
argument_list|)
expr_stmt|;
block|}
specifier|public
name|STSTokenOutInterceptor
parameter_list|(
name|String
name|phase
parameter_list|,
name|STSClient
name|stsClient
parameter_list|,
name|TokenRequestParams
name|tokenParams
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
name|this
operator|.
name|stsClient
operator|=
name|stsClient
expr_stmt|;
name|this
operator|.
name|tokenParams
operator|=
name|tokenParams
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
if|if
condition|(
name|stsClient
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|STS_CLIENT
argument_list|,
name|stsClient
argument_list|)
expr_stmt|;
block|}
name|SecurityToken
name|tok
init|=
name|STSTokenRetriever
operator|.
name|getToken
argument_list|(
name|message
argument_list|,
name|tokenParams
argument_list|,
name|tokenCacher
argument_list|)
decl_stmt|;
if|if
condition|(
name|tok
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Security token was not retrieved from STS"
argument_list|)
expr_stmt|;
block|}
name|processToken
argument_list|(
name|message
argument_list|,
name|tok
argument_list|)
expr_stmt|;
block|}
comment|// An extension point to allow custom processing of the token
specifier|protected
name|void
name|processToken
parameter_list|(
name|Message
name|message
parameter_list|,
name|SecurityToken
name|tok
parameter_list|)
block|{      }
specifier|public
name|STSClient
name|getSTSClient
parameter_list|()
block|{
return|return
name|stsClient
return|;
block|}
specifier|public
name|STSTokenCacher
name|getTokenCacher
parameter_list|()
block|{
return|return
name|tokenCacher
return|;
block|}
specifier|public
name|void
name|setTokenCacher
parameter_list|(
name|STSTokenCacher
name|tokenCacher
parameter_list|)
block|{
name|this
operator|.
name|tokenCacher
operator|=
name|tokenCacher
expr_stmt|;
block|}
block|}
end_class

end_unit

