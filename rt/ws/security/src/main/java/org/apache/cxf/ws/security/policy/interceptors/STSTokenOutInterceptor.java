begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSTokenRetriever
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|trust
operator|.
name|STSTokenRetriever
operator|.
name|TokenRequestParams
import|;
end_import

begin_class
specifier|public
class|class
name|STSTokenOutInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|STSTokenOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_TYPE_SAML_2_0
init|=
literal|"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KEY_TYPE_X509
init|=
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512/PublicKey"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WS_TRUST_NS
init|=
literal|"http://docs.oasis-open.org/ws-sx/ws-trust/200512/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|STS_SERVICE_NAME
init|=
operator|new
name|QName
argument_list|(
name|WS_TRUST_NS
argument_list|,
literal|"SecurityTokenService"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|X509_ENDPOINT
init|=
operator|new
name|QName
argument_list|(
name|WS_TRUST_NS
argument_list|,
literal|"X509_Port"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|TRANSPORT_ENDPOINT
init|=
operator|new
name|QName
argument_list|(
name|WS_TRUST_NS
argument_list|,
literal|"Transport_Port"
argument_list|)
decl_stmt|;
specifier|private
name|STSClient
name|stsClient
decl_stmt|;
specifier|private
name|TokenRequestParams
name|tokenParams
decl_stmt|;
specifier|public
name|STSTokenOutInterceptor
parameter_list|(
name|AuthParams
name|authParams
parameter_list|,
name|String
name|stsWsdlLocation
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|this
argument_list|(
name|Phase
operator|.
name|PREPARE_SEND
argument_list|,
name|authParams
argument_list|,
name|stsWsdlLocation
argument_list|,
name|bus
argument_list|)
expr_stmt|;
block|}
specifier|public
name|STSTokenOutInterceptor
parameter_list|(
name|String
name|phase
parameter_list|,
name|AuthParams
name|authParams
parameter_list|,
name|String
name|stsWsdlLocation
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
name|this
operator|.
name|stsClient
operator|=
name|configureBasicSTSClient
argument_list|(
name|authParams
argument_list|,
name|stsWsdlLocation
argument_list|,
name|bus
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokenParams
operator|=
operator|new
name|TokenRequestParams
argument_list|()
expr_stmt|;
block|}
specifier|public
name|STSTokenOutInterceptor
parameter_list|(
name|STSClient
name|stsClient
parameter_list|)
block|{
name|this
argument_list|(
name|Phase
operator|.
name|PREPARE_SEND
argument_list|,
name|stsClient
argument_list|,
operator|new
name|TokenRequestParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|STSTokenOutInterceptor
parameter_list|(
name|STSClient
name|stsClient
parameter_list|,
name|TokenRequestParams
name|tokenParams
parameter_list|)
block|{
name|this
argument_list|(
name|Phase
operator|.
name|PREPARE_SEND
argument_list|,
name|stsClient
argument_list|,
name|tokenParams
argument_list|)
expr_stmt|;
block|}
specifier|public
name|STSTokenOutInterceptor
parameter_list|(
name|String
name|phase
parameter_list|,
name|STSClient
name|stsClient
parameter_list|,
name|TokenRequestParams
name|tokenParams
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
name|this
operator|.
name|stsClient
operator|=
name|stsClient
expr_stmt|;
name|this
operator|.
name|tokenParams
operator|=
name|tokenParams
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
if|if
condition|(
name|stsClient
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|STS_CLIENT
argument_list|,
name|stsClient
argument_list|)
expr_stmt|;
block|}
name|SecurityToken
name|tok
init|=
name|STSTokenRetriever
operator|.
name|getToken
argument_list|(
name|message
argument_list|,
name|tokenParams
argument_list|)
decl_stmt|;
if|if
condition|(
name|tok
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Security token was not retrieved from STS"
argument_list|)
expr_stmt|;
block|}
name|processToken
argument_list|(
name|message
argument_list|,
name|tok
argument_list|)
expr_stmt|;
block|}
comment|// An extension point to allow custom processing of the token
specifier|protected
name|void
name|processToken
parameter_list|(
name|Message
name|message
parameter_list|,
name|SecurityToken
name|tok
parameter_list|)
block|{              }
specifier|public
name|STSClient
name|getSTSClient
parameter_list|()
block|{
return|return
name|stsClient
return|;
block|}
specifier|public
enum|enum
name|AuthMode
block|{
name|X509
parameter_list|(
name|X509_ENDPOINT
parameter_list|,
name|KEY_TYPE_X509
parameter_list|)
operator|,
constructor|TRANSPORT(TRANSPORT_ENDPOINT
operator|,
constructor|null
block|)
enum|;
specifier|private
specifier|final
name|QName
name|endpointName
decl_stmt|;
specifier|private
specifier|final
name|String
name|keyType
decl_stmt|;
name|AuthMode
parameter_list|(
name|QName
name|endpointName
parameter_list|,
name|String
name|keyType
parameter_list|)
block|{
name|this
operator|.
name|endpointName
operator|=
name|endpointName
expr_stmt|;
name|this
operator|.
name|keyType
operator|=
name|keyType
expr_stmt|;
block|}
specifier|public
name|QName
name|getEndpointName
parameter_list|()
block|{
return|return
name|endpointName
return|;
block|}
specifier|public
name|String
name|getKeyType
parameter_list|()
block|{
return|return
name|keyType
return|;
block|}
block|}
end_class

begin_class
specifier|public
specifier|static
class|class
name|AuthParams
block|{
specifier|private
specifier|final
name|AuthMode
name|authMode
decl_stmt|;
specifier|private
specifier|final
name|String
name|userName
decl_stmt|;
specifier|private
specifier|final
name|String
name|callbackHandler
decl_stmt|;
specifier|private
specifier|final
name|String
name|alias
decl_stmt|;
specifier|private
specifier|final
name|String
name|keystoreProperties
decl_stmt|;
specifier|public
name|AuthParams
parameter_list|(
name|AuthMode
name|authMode
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|callbackHandler
parameter_list|)
block|{
name|this
argument_list|(
name|authMode
argument_list|,
name|userName
argument_list|,
name|callbackHandler
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AuthParams
parameter_list|(
name|AuthMode
name|authMode
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|callbackHandler
parameter_list|,
name|String
name|alias
parameter_list|,
name|String
name|keystoreProperties
parameter_list|)
block|{
name|this
operator|.
name|authMode
operator|=
name|authMode
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
name|this
operator|.
name|callbackHandler
operator|=
name|callbackHandler
expr_stmt|;
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
name|this
operator|.
name|keystoreProperties
operator|=
name|keystoreProperties
expr_stmt|;
block|}
specifier|public
name|AuthMode
name|getAuthMode
parameter_list|()
block|{
return|return
name|authMode
return|;
block|}
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
specifier|public
name|String
name|getCallbackHandler
parameter_list|()
block|{
return|return
name|callbackHandler
return|;
block|}
specifier|public
name|String
name|getAlias
parameter_list|()
block|{
return|return
name|alias
return|;
block|}
specifier|public
name|String
name|getKeystoreProperties
parameter_list|()
block|{
return|return
name|keystoreProperties
return|;
block|}
block|}
end_class

begin_function
specifier|private
name|STSClient
name|configureBasicSTSClient
parameter_list|(
name|AuthParams
name|authParams
parameter_list|,
name|String
name|stsWsdlLocation
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|STSClient
name|basicStsClient
init|=
operator|new
name|STSClient
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|basicStsClient
operator|.
name|setWsdlLocation
argument_list|(
name|stsWsdlLocation
argument_list|)
expr_stmt|;
name|basicStsClient
operator|.
name|setServiceName
argument_list|(
name|STS_SERVICE_NAME
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|basicStsClient
operator|.
name|setEndpointName
argument_list|(
name|authParams
operator|.
name|getAuthMode
argument_list|()
operator|.
name|endpointName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|authParams
operator|.
name|getAuthMode
argument_list|()
operator|.
name|getKeyType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|basicStsClient
operator|.
name|setKeyType
argument_list|(
name|authParams
operator|.
name|getAuthMode
argument_list|()
operator|.
name|getKeyType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|basicStsClient
operator|.
name|setSendKeyType
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|basicStsClient
operator|.
name|setTokenType
argument_list|(
name|TOKEN_TYPE_SAML_2_0
argument_list|)
expr_stmt|;
name|basicStsClient
operator|.
name|setAllowRenewingAfterExpiry
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|basicStsClient
operator|.
name|setEnableLifetime
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|authParams
operator|.
name|getUserName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|USERNAME
argument_list|,
name|authParams
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|props
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|CALLBACK_HANDLER
argument_list|,
name|authParams
operator|.
name|getCallbackHandler
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|authParams
operator|.
name|getKeystoreProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_USERNAME
argument_list|,
name|authParams
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|authParams
operator|.
name|getKeystoreProperties
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|authParams
operator|.
name|getKeystoreProperties
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_USERNAME
argument_list|,
name|authParams
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_PROPERTIES
argument_list|,
name|authParams
operator|.
name|getKeystoreProperties
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|SecurityConstants
operator|.
name|STS_TOKEN_USE_CERT_FOR_KEYINFO
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|basicStsClient
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
return|return
name|basicStsClient
return|;
block|}
end_function

unit|}
end_unit

