begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|config
operator|.
name|CacheConfiguration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|config
operator|.
name|ConfigurationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_comment
comment|/**  * We need to reference count the EHCacheManager things  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|EHCacheManagerHolder
block|{
specifier|private
specifier|static
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|COUNTS
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|(
literal|8
argument_list|,
literal|0.75f
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|EHCacheManagerHolder
parameter_list|()
block|{
comment|//utility
block|}
specifier|public
specifier|static
name|CacheConfiguration
name|getCacheConfiguration
parameter_list|(
name|String
name|key
parameter_list|,
name|CacheManager
name|cacheManager
parameter_list|)
block|{
name|CacheConfiguration
name|cc
init|=
name|cacheManager
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getCacheConfigurations
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|cc
operator|==
literal|null
operator|&&
name|key
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|cc
operator|=
name|cacheManager
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getCacheConfigurations
argument_list|()
operator|.
name|get
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|key
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cc
operator|==
literal|null
condition|)
block|{
name|cc
operator|=
name|cacheManager
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getDefaultCacheConfiguration
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cc
operator|==
literal|null
condition|)
block|{
name|cc
operator|=
operator|new
name|CacheConfiguration
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cc
operator|=
operator|(
name|CacheConfiguration
operator|)
name|cc
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
name|cc
operator|.
name|setName
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|cc
return|;
block|}
specifier|public
specifier|static
name|CacheManager
name|getCacheManager
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|URL
name|configFileURL
parameter_list|)
block|{
name|CacheManager
name|cacheManager
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|configFileURL
operator|==
literal|null
condition|)
block|{
comment|//using the default
name|cacheManager
operator|=
name|findDefaultCacheManager
argument_list|(
name|bus
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cacheManager
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|configFileURL
operator|==
literal|null
condition|)
block|{
name|cacheManager
operator|=
name|CacheManager
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cacheManager
operator|=
name|CacheManager
operator|.
name|create
argument_list|(
name|configFileURL
argument_list|)
expr_stmt|;
block|}
block|}
name|AtomicInteger
name|a
init|=
name|COUNTS
operator|.
name|get
argument_list|(
name|cacheManager
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|COUNTS
operator|.
name|putIfAbsent
argument_list|(
name|cacheManager
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|AtomicInteger
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|COUNTS
operator|.
name|get
argument_list|(
name|cacheManager
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|.
name|incrementAndGet
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|//System.out.println("Create!! " + cacheManager.getName());
block|}
return|return
name|cacheManager
return|;
block|}
specifier|private
specifier|static
name|CacheManager
name|findDefaultCacheManager
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|String
name|defaultConfigFile
init|=
literal|"cxf-ehcache.xml"
decl_stmt|;
name|URL
name|configFileURL
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|ResourceManager
name|rm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|configFileURL
operator|=
name|rm
operator|.
name|resolveResource
argument_list|(
name|defaultConfigFile
argument_list|,
name|URL
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|configFileURL
operator|==
literal|null
condition|)
block|{
name|configFileURL
operator|=
name|ClassLoaderUtils
operator|.
name|getResource
argument_list|(
name|defaultConfigFile
argument_list|,
name|EHCacheReplayCacheFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configFileURL
operator|==
literal|null
condition|)
block|{
name|configFileURL
operator|=
operator|new
name|URL
argument_list|(
name|defaultConfigFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Do nothing
block|}
try|try
block|{
name|Configuration
name|conf
init|=
name|ConfigurationFactory
operator|.
name|parseConfiguration
argument_list|(
name|configFileURL
argument_list|)
decl_stmt|;
comment|/*             String perBus = (String)bus.getProperty("ws-security.cachemanager.per.bus");             if (perBus == null) {                 perBus = "true";             }             if (Boolean.parseBoolean(perBus)) {                 conf.setName(bus.getId());                 if ("java.io.tmpdir".equals(conf.getDiskStoreConfiguration().getOriginalPath())) {                                          String path = conf.getDiskStoreConfiguration().getPath() + File.separator                         + bus.getId();                     conf.getDiskStoreConfiguration().setPath(path);                 }             }             */
return|return
name|CacheManager
operator|.
name|create
argument_list|(
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|releaseCacheManger
parameter_list|(
name|CacheManager
name|cacheManager
parameter_list|)
block|{
name|AtomicInteger
name|a
init|=
name|COUNTS
operator|.
name|get
argument_list|(
name|cacheManager
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|a
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|//System.out.println("Shutdown!! " + cacheManager.getName());
name|cacheManager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

