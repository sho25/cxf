begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|MapNamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|ContentEncryptedElements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|RequiredElements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|RequiredParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SignedEncryptedElements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SignedEncryptedParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Wss11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|CryptoCoverageUtil
operator|.
name|CoverageScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|CryptoCoverageUtil
operator|.
name|CoverageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|AsymmetricBindingPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|EncryptedTokenPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|EndorsingEncryptedTokenPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|EndorsingTokenPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|SamlTokenPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|SecurityContextTokenPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|SignedEncryptedTokenPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|SignedEndorsingEncryptedTokenPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|SignedEndorsingTokenPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|SignedTokenPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|SymmetricBindingPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|TokenPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|TransportBindingPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|UsernameTokenPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|WSS11PolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|X509TokenPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSDataRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|RequestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|util
operator|.
name|WSSecurityUtil
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|PolicyBasedWSS4JInInterceptor
extends|extends
name|WSS4JInInterceptor
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTIES_CACHE
init|=
literal|"ws-security.properties.cache"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PolicyBasedWSS4JInInterceptor
name|INSTANCE
init|=
operator|new
name|PolicyBasedWSS4JInInterceptor
argument_list|()
decl_stmt|;
comment|/**      *       */
specifier|public
name|PolicyBasedWSS4JInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|Map
argument_list|<
name|Object
argument_list|,
name|Properties
argument_list|>
name|getPropertiesCache
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
block|{
name|EndpointInfo
name|info
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
operator|.
name|getEndpointInfo
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|info
init|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Properties
argument_list|>
name|o
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|PROPERTIES_CACHE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Object
argument_list|,
name|Properties
argument_list|>
argument_list|()
expr_stmt|;
name|info
operator|.
name|setProperty
argument_list|(
name|PROPERTIES_CACHE
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
block|}
specifier|private
specifier|static
name|Properties
name|getProps
parameter_list|(
name|Object
name|o
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
name|Properties
name|properties
init|=
name|getPropertiesCache
argument_list|(
name|message
argument_list|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
return|return
name|properties
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Properties
condition|)
block|{
name|properties
operator|=
operator|(
name|Properties
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|URL
name|url
init|=
literal|null
decl_stmt|;
name|ResourceManager
name|rm
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
operator|.
name|getExtension
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|url
operator|=
name|rm
operator|.
name|resolveResource
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|URL
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|url
operator|=
name|ClassLoaderUtils
operator|.
name|getResource
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|AbstractWSS4JInterceptor
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|InputStream
name|ins
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|ins
argument_list|)
expr_stmt|;
name|ins
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|properties
operator|=
literal|null
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|URL
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
try|try
block|{
name|InputStream
name|ins
init|=
operator|(
operator|(
name|URL
operator|)
name|o
operator|)
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|ins
argument_list|)
expr_stmt|;
name|ins
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|properties
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|getPropertiesCache
argument_list|(
name|message
argument_list|)
operator|.
name|put
argument_list|(
name|o
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
specifier|private
name|void
name|handleWSS11
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
if|if
condition|(
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ENABLE_SIGNATURE_CONFIRMATION
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|WSS11
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|Wss11
name|wss11
init|=
operator|(
name|Wss11
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
name|wss11
operator|.
name|isRequireSignatureConfirmation
argument_list|()
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ENABLE_SIGNATURE_CONFIRMATION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|String
name|addToAction
parameter_list|(
name|String
name|action
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|pre
parameter_list|)
block|{
if|if
condition|(
name|action
operator|.
name|contains
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|action
return|;
block|}
if|if
condition|(
name|pre
condition|)
block|{
return|return
name|val
operator|+
literal|" "
operator|+
name|action
return|;
block|}
return|return
name|action
operator|+
literal|" "
operator|+
name|val
return|;
block|}
specifier|private
name|boolean
name|assertPolicy
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|QName
name|q
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
operator|&&
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|checkAsymmetricBinding
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|String
name|action
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|ASYMMETRIC_BINDING
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|==
literal|null
operator|||
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|action
return|;
block|}
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Signature"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Encrypt"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Object
name|s
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|)
decl_stmt|;
name|Object
name|e
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|DEC_PROP_REF_ID
argument_list|,
literal|"RefId-"
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"RefId-"
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|,
name|getProps
argument_list|(
name|s
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
name|s
expr_stmt|;
block|}
block|}
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_PROP_REF_ID
argument_list|,
literal|"RefId-"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"RefId-"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|getProps
argument_list|(
name|e
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|action
return|;
block|}
specifier|private
name|String
name|checkTransportBinding
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|String
name|action
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|TRANSPORT_BINDING
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|==
literal|null
operator|||
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|action
return|;
block|}
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Signature"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Encrypt"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Object
name|s
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|)
decl_stmt|;
name|Object
name|e
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|DEC_PROP_REF_ID
argument_list|,
literal|"RefId-"
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"RefId-"
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|,
name|getProps
argument_list|(
name|s
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
name|s
expr_stmt|;
block|}
block|}
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_PROP_REF_ID
argument_list|,
literal|"RefId-"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"RefId-"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|getProps
argument_list|(
name|e
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|action
return|;
block|}
specifier|private
name|String
name|checkSymmetricBinding
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|String
name|action
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|SYMMETRIC_BINDING
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|==
literal|null
operator|||
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|action
return|;
block|}
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Signature"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Encrypt"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Object
name|s
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|)
decl_stmt|;
name|Object
name|e
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|e
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
name|s
expr_stmt|;
block|}
if|if
condition|(
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_PROP_REF_ID
argument_list|,
literal|"RefId-"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"RefId-"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|getProps
argument_list|(
name|e
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|DEC_PROP_REF_ID
argument_list|,
literal|"RefId-"
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"RefId-"
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|,
name|getProps
argument_list|(
name|s
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|SIG_PROP_REF_ID
argument_list|,
literal|"RefId-"
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"RefId-"
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|,
name|getProps
argument_list|(
name|s
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|DEC_PROP_REF_ID
argument_list|,
literal|"RefId-"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"RefId-"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|getProps
argument_list|(
name|e
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|action
return|;
block|}
specifier|private
name|boolean
name|assertXPathTokens
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|QName
name|name
parameter_list|,
name|Collection
argument_list|<
name|WSDataRef
argument_list|>
name|refs
parameter_list|,
name|SoapMessage
name|msg
parameter_list|,
name|Element
name|soapEnvelope
parameter_list|,
name|CoverageType
name|type
parameter_list|,
name|CoverageScope
name|scope
parameter_list|)
throws|throws
name|SOAPException
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|xpaths
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|CoverageScope
operator|.
name|CONTENT
operator|.
name|equals
argument_list|(
name|scope
argument_list|)
condition|)
block|{
name|ContentEncryptedElements
name|p
init|=
operator|(
name|ContentEncryptedElements
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|namespaces
operator|=
name|p
operator|.
name|getDeclaredNamespaces
argument_list|()
expr_stmt|;
name|xpaths
operator|=
name|p
operator|.
name|getXPathExpressions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SignedEncryptedElements
name|p
init|=
operator|(
name|SignedEncryptedElements
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|namespaces
operator|=
name|p
operator|.
name|getDeclaredNamespaces
argument_list|()
expr_stmt|;
name|xpaths
operator|=
name|p
operator|.
name|getXPathExpressions
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|xpaths
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|xPath
range|:
name|xpaths
control|)
block|{
try|try
block|{
name|CryptoCoverageUtil
operator|.
name|checkCoverage
argument_list|(
name|soapEnvelope
argument_list|,
name|refs
argument_list|,
name|namespaces
argument_list|,
name|xPath
argument_list|,
name|type
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"No "
operator|+
name|type
operator|+
literal|" element found matching XPath "
operator|+
name|xPath
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|assertTokens
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|QName
name|name
parameter_list|,
name|Collection
argument_list|<
name|WSDataRef
argument_list|>
name|signed
parameter_list|,
name|SoapMessage
name|msg
parameter_list|,
name|Element
name|soapHeader
parameter_list|,
name|Element
name|soapBody
parameter_list|,
name|CoverageType
name|type
parameter_list|)
throws|throws
name|SOAPException
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SignedEncryptedParts
name|p
init|=
operator|(
name|SignedEncryptedParts
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isBody
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|CoverageType
operator|.
name|SIGNED
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|CryptoCoverageUtil
operator|.
name|checkBodyCoverage
argument_list|(
name|soapBody
argument_list|,
name|signed
argument_list|,
name|type
argument_list|,
name|CoverageScope
operator|.
name|ELEMENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CryptoCoverageUtil
operator|.
name|checkBodyCoverage
argument_list|(
name|soapBody
argument_list|,
name|signed
argument_list|,
name|type
argument_list|,
name|CoverageScope
operator|.
name|CONTENT
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|msg
operator|.
name|getVersion
argument_list|()
operator|.
name|getBody
argument_list|()
operator|+
literal|" not "
operator|+
name|type
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
for|for
control|(
name|Header
name|h
range|:
name|p
operator|.
name|getHeaders
argument_list|()
control|)
block|{
try|try
block|{
name|CryptoCoverageUtil
operator|.
name|checkHeaderCoverage
argument_list|(
name|soapHeader
argument_list|,
name|signed
argument_list|,
name|h
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|h
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|,
name|CoverageScope
operator|.
name|ELEMENT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSSecurityException
name|e
parameter_list|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|h
operator|.
name|getQName
argument_list|()
operator|+
literal|" not + "
operator|+
name|type
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|computeAction
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|RequestData
name|data
parameter_list|)
block|{
name|String
name|action
init|=
name|getString
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
name|action
operator|=
literal|""
expr_stmt|;
block|}
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|aim
operator|!=
literal|null
condition|)
block|{
comment|//things that DO impact setup
name|handleWSS11
argument_list|(
name|aim
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|action
operator|=
name|checkAsymmetricBinding
argument_list|(
name|aim
argument_list|,
name|action
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|action
operator|=
name|checkSymmetricBinding
argument_list|(
name|aim
argument_list|,
name|action
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|action
operator|=
name|checkTransportBinding
argument_list|(
name|aim
argument_list|,
name|action
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// stuff we can default to asserted and un-assert if a condition isn't met
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|KEYVALUE_TOKEN
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|action
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doResults
parameter_list|(
name|SoapMessage
name|msg
parameter_list|,
name|String
name|actor
parameter_list|,
name|Element
name|soapHeader
parameter_list|,
name|Element
name|soapBody
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
parameter_list|,
name|boolean
name|utWithCallbacks
parameter_list|)
throws|throws
name|SOAPException
throws|,
name|XMLStreamException
throws|,
name|WSSecurityException
block|{
name|AssertionInfoMap
name|aim
init|=
name|msg
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|WSDataRef
argument_list|>
name|signed
init|=
operator|new
name|HashSet
argument_list|<
name|WSDataRef
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|WSDataRef
argument_list|>
name|encrypted
init|=
operator|new
name|HashSet
argument_list|<
name|WSDataRef
argument_list|>
argument_list|()
decl_stmt|;
comment|//
comment|// Pre-fetch various results
comment|//
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|results
argument_list|,
name|WSConstants
operator|.
name|SIGN
argument_list|,
name|signedResults
argument_list|)
expr_stmt|;
for|for
control|(
name|WSSecurityEngineResult
name|result
range|:
name|signedResults
control|)
block|{
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|sl
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WSDataRef
name|r
range|:
name|sl
control|)
block|{
name|signed
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|encryptResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|results
argument_list|,
name|WSConstants
operator|.
name|ENCR
argument_list|,
name|encryptResults
argument_list|)
expr_stmt|;
for|for
control|(
name|WSSecurityEngineResult
name|result
range|:
name|encryptResults
control|)
block|{
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|sl
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WSDataRef
name|r
range|:
name|sl
control|)
block|{
name|encrypted
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*         WSSecurityEngineResult tsResult = WSSecurityUtil.fetchActionResult(results, WSConstants.TS);         Element timestamp = null;         if (tsResult != null) {             Timestamp ts = (Timestamp)tsResult.get(WSSecurityEngineResult.TAG_TIMESTAMP);             timestamp = ts.getElement();         }         */
comment|//
comment|// Check policies
comment|//
name|boolean
name|check
init|=
name|checkSignedEncryptedCoverage
argument_list|(
name|aim
argument_list|,
name|msg
argument_list|,
name|soapHeader
argument_list|,
name|soapBody
argument_list|,
name|signed
argument_list|,
name|encrypted
argument_list|)
decl_stmt|;
if|if
condition|(
name|check
condition|)
block|{
name|check
operator|=
name|checkTokenCoverage
argument_list|(
name|aim
argument_list|,
name|msg
argument_list|,
name|soapBody
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|,
name|utWithCallbacks
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|check
condition|)
block|{
name|check
operator|=
name|checkBindingCoverage
argument_list|(
name|aim
argument_list|,
name|msg
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|check
condition|)
block|{
name|check
operator|=
name|checkSupportingTokenCoverage
argument_list|(
name|aim
argument_list|,
name|msg
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|,
name|utWithCallbacks
argument_list|)
expr_stmt|;
block|}
comment|// The supporting tokens are already validated
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
comment|// relatively irrelevant stuff from a verification standpoint
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|LAYOUT
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|WSS10
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|TRUST_13
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP11Constants
operator|.
name|TRUST_10
argument_list|)
expr_stmt|;
name|super
operator|.
name|doResults
argument_list|(
name|msg
argument_list|,
name|actor
argument_list|,
name|soapHeader
argument_list|,
name|soapBody
argument_list|,
name|results
argument_list|,
name|utWithCallbacks
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check SignedParts, EncryptedParts, SignedElements, EncryptedElements, RequiredParts, etc.      */
specifier|private
name|boolean
name|checkSignedEncryptedCoverage
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|msg
parameter_list|,
name|Element
name|soapHeader
parameter_list|,
name|Element
name|soapBody
parameter_list|,
name|Collection
argument_list|<
name|WSDataRef
argument_list|>
name|signed
parameter_list|,
name|Collection
argument_list|<
name|WSDataRef
argument_list|>
name|encrypted
parameter_list|)
throws|throws
name|SOAPException
block|{
name|CryptoCoverageUtil
operator|.
name|reconcileEncryptedSignedRefs
argument_list|(
name|signed
argument_list|,
name|encrypted
argument_list|)
expr_stmt|;
comment|//
comment|// SIGNED_PARTS and ENCRYPTED_PARTS only apply to non-Transport bindings
comment|//
name|boolean
name|check
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|isTransportBinding
argument_list|(
name|aim
argument_list|)
condition|)
block|{
name|check
operator|&=
name|assertTokens
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
name|signed
argument_list|,
name|msg
argument_list|,
name|soapHeader
argument_list|,
name|soapBody
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
name|check
operator|&=
name|assertTokens
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|encrypted
argument_list|,
name|msg
argument_list|,
name|soapHeader
argument_list|,
name|soapBody
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
block|}
name|Element
name|soapEnvelope
init|=
name|soapHeader
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|check
operator|&=
name|assertXPathTokens
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_ELEMENTS
argument_list|,
name|signed
argument_list|,
name|msg
argument_list|,
name|soapEnvelope
argument_list|,
name|CoverageType
operator|.
name|SIGNED
argument_list|,
name|CoverageScope
operator|.
name|ELEMENT
argument_list|)
expr_stmt|;
name|check
operator|&=
name|assertXPathTokens
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_ELEMENTS
argument_list|,
name|encrypted
argument_list|,
name|msg
argument_list|,
name|soapEnvelope
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|,
name|CoverageScope
operator|.
name|ELEMENT
argument_list|)
expr_stmt|;
name|check
operator|&=
name|assertXPathTokens
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|CONTENT_ENCRYPTED_ELEMENTS
argument_list|,
name|encrypted
argument_list|,
name|msg
argument_list|,
name|soapEnvelope
argument_list|,
name|CoverageType
operator|.
name|ENCRYPTED
argument_list|,
name|CoverageScope
operator|.
name|CONTENT
argument_list|)
expr_stmt|;
name|check
operator|&=
name|assertHeadersExists
argument_list|(
name|aim
argument_list|,
name|msg
argument_list|,
name|soapHeader
argument_list|)
expr_stmt|;
return|return
name|check
return|;
block|}
comment|/**      * Check the token coverage      */
specifier|private
name|boolean
name|checkTokenCoverage
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|msg
parameter_list|,
name|Element
name|soapBody
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
parameter_list|,
name|boolean
name|utWithCallbacks
parameter_list|)
block|{
name|boolean
name|check
init|=
literal|true
decl_stmt|;
name|TokenPolicyValidator
name|x509Validator
init|=
operator|new
name|X509TokenPolicyValidator
argument_list|()
decl_stmt|;
name|check
operator|&=
name|x509Validator
operator|.
name|validatePolicy
argument_list|(
name|aim
argument_list|,
name|msg
argument_list|,
name|soapBody
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
expr_stmt|;
name|TokenPolicyValidator
name|utValidator
init|=
operator|new
name|UsernameTokenPolicyValidator
argument_list|(
name|utWithCallbacks
argument_list|)
decl_stmt|;
name|check
operator|&=
name|utValidator
operator|.
name|validatePolicy
argument_list|(
name|aim
argument_list|,
name|msg
argument_list|,
name|soapBody
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
expr_stmt|;
name|TokenPolicyValidator
name|samlValidator
init|=
operator|new
name|SamlTokenPolicyValidator
argument_list|()
decl_stmt|;
name|check
operator|&=
name|samlValidator
operator|.
name|validatePolicy
argument_list|(
name|aim
argument_list|,
name|msg
argument_list|,
name|soapBody
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
expr_stmt|;
name|TokenPolicyValidator
name|sctValidator
init|=
operator|new
name|SecurityContextTokenPolicyValidator
argument_list|()
decl_stmt|;
name|check
operator|&=
name|sctValidator
operator|.
name|validatePolicy
argument_list|(
name|aim
argument_list|,
name|msg
argument_list|,
name|soapBody
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
expr_stmt|;
name|TokenPolicyValidator
name|wss11Validator
init|=
operator|new
name|WSS11PolicyValidator
argument_list|()
decl_stmt|;
name|check
operator|&=
name|wss11Validator
operator|.
name|validatePolicy
argument_list|(
name|aim
argument_list|,
name|msg
argument_list|,
name|soapBody
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
expr_stmt|;
return|return
name|check
return|;
block|}
comment|/**      * Check the binding coverage      */
specifier|private
name|boolean
name|checkBindingCoverage
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|msg
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
parameter_list|)
block|{
name|boolean
name|check
init|=
literal|true
decl_stmt|;
name|TransportBindingPolicyValidator
name|transportValidator
init|=
operator|new
name|TransportBindingPolicyValidator
argument_list|(
name|msg
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
decl_stmt|;
name|check
operator|&=
name|transportValidator
operator|.
name|validatePolicy
argument_list|(
name|aim
argument_list|)
expr_stmt|;
name|SymmetricBindingPolicyValidator
name|symmetricValidator
init|=
operator|new
name|SymmetricBindingPolicyValidator
argument_list|(
name|msg
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
decl_stmt|;
name|check
operator|&=
name|symmetricValidator
operator|.
name|validatePolicy
argument_list|(
name|aim
argument_list|)
expr_stmt|;
name|AsymmetricBindingPolicyValidator
name|asymmetricValidator
init|=
operator|new
name|AsymmetricBindingPolicyValidator
argument_list|(
name|msg
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
decl_stmt|;
name|check
operator|&=
name|asymmetricValidator
operator|.
name|validatePolicy
argument_list|(
name|aim
argument_list|)
expr_stmt|;
return|return
name|check
return|;
block|}
comment|/**      * Check the supporting token coverage      */
specifier|private
name|boolean
name|checkSupportingTokenCoverage
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|msg
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|results
parameter_list|,
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
parameter_list|,
name|boolean
name|utWithCallbacks
parameter_list|)
block|{
name|boolean
name|check
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|utResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|results
argument_list|,
name|WSConstants
operator|.
name|UT
argument_list|,
name|utResults
argument_list|)
expr_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|results
argument_list|,
name|WSConstants
operator|.
name|UT_NOPASSWORD
argument_list|,
name|utResults
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|samlResults
init|=
operator|new
name|ArrayList
argument_list|<
name|WSSecurityEngineResult
argument_list|>
argument_list|()
decl_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|results
argument_list|,
name|WSConstants
operator|.
name|ST_SIGNED
argument_list|,
name|samlResults
argument_list|)
expr_stmt|;
name|WSSecurityUtil
operator|.
name|fetchAllActionResults
argument_list|(
name|results
argument_list|,
name|WSConstants
operator|.
name|ST_UNSIGNED
argument_list|,
name|samlResults
argument_list|)
expr_stmt|;
name|SignedTokenPolicyValidator
name|suppValidator
init|=
operator|new
name|SignedTokenPolicyValidator
argument_list|(
name|msg
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
decl_stmt|;
name|suppValidator
operator|.
name|setValidateUsernameToken
argument_list|(
name|utWithCallbacks
argument_list|)
expr_stmt|;
name|check
operator|&=
name|suppValidator
operator|.
name|validatePolicy
argument_list|(
name|aim
argument_list|)
expr_stmt|;
name|EndorsingTokenPolicyValidator
name|endorsingValidator
init|=
operator|new
name|EndorsingTokenPolicyValidator
argument_list|(
name|msg
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
decl_stmt|;
name|check
operator|&=
name|endorsingValidator
operator|.
name|validatePolicy
argument_list|(
name|aim
argument_list|)
expr_stmt|;
name|SignedEndorsingTokenPolicyValidator
name|signedEdorsingValidator
init|=
operator|new
name|SignedEndorsingTokenPolicyValidator
argument_list|(
name|msg
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
decl_stmt|;
name|check
operator|&=
name|signedEdorsingValidator
operator|.
name|validatePolicy
argument_list|(
name|aim
argument_list|)
expr_stmt|;
name|SignedEncryptedTokenPolicyValidator
name|signedEncryptedValidator
init|=
operator|new
name|SignedEncryptedTokenPolicyValidator
argument_list|(
name|msg
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
decl_stmt|;
name|signedEncryptedValidator
operator|.
name|setValidateUsernameToken
argument_list|(
name|utWithCallbacks
argument_list|)
expr_stmt|;
name|check
operator|&=
name|signedEncryptedValidator
operator|.
name|validatePolicy
argument_list|(
name|aim
argument_list|)
expr_stmt|;
name|EncryptedTokenPolicyValidator
name|encryptedValidator
init|=
operator|new
name|EncryptedTokenPolicyValidator
argument_list|(
name|msg
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
decl_stmt|;
name|encryptedValidator
operator|.
name|setValidateUsernameToken
argument_list|(
name|utWithCallbacks
argument_list|)
expr_stmt|;
name|check
operator|&=
name|encryptedValidator
operator|.
name|validatePolicy
argument_list|(
name|aim
argument_list|)
expr_stmt|;
name|EndorsingEncryptedTokenPolicyValidator
name|endorsingEncryptedValidator
init|=
operator|new
name|EndorsingEncryptedTokenPolicyValidator
argument_list|(
name|msg
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
decl_stmt|;
name|endorsingEncryptedValidator
operator|.
name|setValidateUsernameToken
argument_list|(
name|utWithCallbacks
argument_list|)
expr_stmt|;
name|check
operator|&=
name|endorsingEncryptedValidator
operator|.
name|validatePolicy
argument_list|(
name|aim
argument_list|)
expr_stmt|;
name|SignedEndorsingEncryptedTokenPolicyValidator
name|signedEndorsingEncryptedValidator
init|=
operator|new
name|SignedEndorsingEncryptedTokenPolicyValidator
argument_list|(
name|msg
argument_list|,
name|results
argument_list|,
name|signedResults
argument_list|)
decl_stmt|;
name|check
operator|&=
name|signedEndorsingEncryptedValidator
operator|.
name|validatePolicy
argument_list|(
name|aim
argument_list|)
expr_stmt|;
return|return
name|check
return|;
block|}
specifier|private
name|boolean
name|assertHeadersExists
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|msg
parameter_list|,
name|Node
name|header
parameter_list|)
throws|throws
name|SOAPException
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|REQUIRED_PARTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|RequiredParts
name|rp
init|=
operator|(
name|RequiredParts
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Header
name|h
range|:
name|rp
operator|.
name|getHeaders
argument_list|()
control|)
block|{
if|if
condition|(
name|header
operator|==
literal|null
operator|||
name|DOMUtils
operator|.
name|getFirstChildWithName
argument_list|(
operator|(
name|Element
operator|)
name|header
argument_list|,
name|h
operator|.
name|getQName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"No header element of name "
operator|+
name|h
operator|.
name|getQName
argument_list|()
operator|+
literal|" found."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
name|ais
operator|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|REQUIRED_ELEMENTS
argument_list|)
expr_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|RequiredElements
name|rp
init|=
operator|(
name|RequiredElements
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
name|rp
operator|.
name|getDeclaredNamespaces
argument_list|()
decl_stmt|;
name|XPathFactory
name|factory
init|=
name|XPathFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|expression
range|:
name|rp
operator|.
name|getXPathExpressions
argument_list|()
control|)
block|{
name|XPath
name|xpath
init|=
name|factory
operator|.
name|newXPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespaces
operator|!=
literal|null
condition|)
block|{
name|xpath
operator|.
name|setNamespaceContext
argument_list|(
operator|new
name|MapNamespaceContext
argument_list|(
name|namespaces
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|list
decl_stmt|;
try|try
block|{
name|list
operator|=
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|evaluate
argument_list|(
name|expression
argument_list|,
name|header
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"No header element matching XPath "
operator|+
name|expression
operator|+
literal|" found."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathExpressionException
name|e
parameter_list|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"Invalid XPath expression "
operator|+
name|expression
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|isTransportBinding
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|TRANSPORT_BINDING
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
operator|&&
name|ais
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ais
operator|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|SYMMETRIC_BINDING
argument_list|)
expr_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
operator|&&
name|ais
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ais
operator|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|ASYMMETRIC_BINDING
argument_list|)
expr_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
operator|&&
name|ais
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

