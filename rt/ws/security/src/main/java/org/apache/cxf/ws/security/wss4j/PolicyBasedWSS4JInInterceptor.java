begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP11Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|AsymmetricBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SignedEncryptedParts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|SymmetricBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|Wss11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|model
operator|.
name|X509Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSDataRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|RequestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|security
operator|.
name|handler
operator|.
name|WSHandlerConstants
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|PolicyBasedWSS4JInInterceptor
extends|extends
name|WSS4JInInterceptor
block|{
comment|/**      *       */
specifier|public
name|PolicyBasedWSS4JInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Properties
name|getProps
parameter_list|(
name|Object
name|o
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
name|Properties
name|properties
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Properties
condition|)
block|{
name|properties
operator|=
operator|(
name|Properties
operator|)
name|o
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|ResourceManager
name|rm
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
operator|.
name|getExtension
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|rm
operator|.
name|resolveResource
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|URL
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|url
operator|=
name|ClassLoaderUtils
operator|.
name|getResource
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|,
name|AbstractWSS4JInterceptor
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|properties
operator|=
literal|null
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|URL
condition|)
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
try|try
block|{
name|properties
operator|.
name|load
argument_list|(
operator|(
operator|(
name|URL
operator|)
name|o
operator|)
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|properties
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|properties
return|;
block|}
specifier|private
name|boolean
name|containsPolicy
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|QName
name|n
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|n
argument_list|)
decl_stmt|;
return|return
name|ais
operator|!=
literal|null
operator|&&
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|private
name|void
name|handleWSS11
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|WSS11
argument_list|)
expr_stmt|;
return|return;
block|}
name|message
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ENABLE_SIGNATURE_CONFIRMATION
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|WSS11
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|Wss11
name|wss11
init|=
operator|(
name|Wss11
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
name|wss11
operator|.
name|isRequireSignatureConfirmation
argument_list|()
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ENABLE_SIGNATURE_CONFIRMATION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|String
name|addToAction
parameter_list|(
name|String
name|action
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|pre
parameter_list|)
block|{
if|if
condition|(
name|action
operator|.
name|contains
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|action
return|;
block|}
if|if
condition|(
name|pre
condition|)
block|{
return|return
name|val
operator|+
literal|" "
operator|+
name|action
return|;
block|}
return|return
name|action
operator|+
literal|" "
operator|+
name|val
return|;
block|}
specifier|private
name|boolean
name|assertPolicy
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|QName
name|q
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
operator|&&
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|assertPolicy
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|Token
name|token
parameter_list|,
name|boolean
name|derived
parameter_list|)
block|{
if|if
condition|(
operator|!
name|derived
operator|&&
name|token
operator|instanceof
name|X509Token
operator|&&
name|token
operator|.
name|isDerivedKeys
argument_list|()
condition|)
block|{
name|notAssertPolicy
argument_list|(
name|aim
argument_list|,
name|token
argument_list|,
literal|"No derived keys found."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertPolicy
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|PolicyAssertion
name|token
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|token
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
operator|&&
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getAssertion
argument_list|()
operator|==
name|token
condition|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|notAssertPolicy
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|PolicyAssertion
name|token
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|token
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
operator|&&
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getAssertion
argument_list|()
operator|==
name|token
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|String
name|checkAsymetricBinding
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|String
name|action
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|ASYMMETRIC_BINDING
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|AsymmetricBinding
name|abinding
init|=
operator|(
name|AsymmetricBinding
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
name|abinding
operator|.
name|getProtectionOrder
argument_list|()
operator|==
name|SPConstants
operator|.
name|ProtectionOrder
operator|.
name|EncryptBeforeSigning
condition|)
block|{
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Signature"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Encrypt"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Encrypt"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Signature"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Object
name|s
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|)
decl_stmt|;
name|Object
name|e
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
literal|"SignaturePropRefId"
argument_list|,
literal|"RefId-"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"RefId-"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|getProps
argument_list|(
name|e
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
literal|"decryptionPropRefId"
argument_list|,
literal|"RefId-"
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"RefId-"
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|,
name|getProps
argument_list|(
name|s
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|action
return|;
block|}
specifier|private
name|String
name|checkSymetricBinding
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|String
name|action
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|SYMMETRIC_BINDING
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|SymmetricBinding
name|abinding
init|=
operator|(
name|SymmetricBinding
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
name|abinding
operator|.
name|getProtectionOrder
argument_list|()
operator|==
name|SPConstants
operator|.
name|ProtectionOrder
operator|.
name|EncryptBeforeSigning
condition|)
block|{
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Signature"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Encrypt"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Encrypt"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Signature"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Object
name|s
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|)
decl_stmt|;
name|Object
name|e
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|abinding
operator|.
name|getProtectionToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|s
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
literal|"SignaturePropRefId"
argument_list|,
literal|"RefId-"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"RefId-"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|getProps
argument_list|(
name|e
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
literal|"decryptionPropRefId"
argument_list|,
literal|"RefId-"
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"RefId-"
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|,
name|getProps
argument_list|(
name|s
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
literal|"SignaturePropRefId"
argument_list|,
literal|"RefId-"
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"RefId-"
operator|+
name|s
operator|.
name|toString
argument_list|()
argument_list|,
name|getProps
argument_list|(
name|s
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
literal|"decryptionPropRefId"
argument_list|,
literal|"RefId-"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
literal|"RefId-"
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|getProps
argument_list|(
name|e
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|action
return|;
block|}
specifier|private
name|void
name|assertTokens
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|QName
name|name
parameter_list|,
name|Collection
argument_list|<
name|QName
argument_list|>
name|signed
parameter_list|,
name|SoapMessage
name|msg
parameter_list|,
name|SOAPMessage
name|doc
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|SOAPException
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SignedEncryptedParts
name|p
init|=
operator|(
name|SignedEncryptedParts
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isBody
argument_list|()
operator|&&
operator|!
name|signed
operator|.
name|contains
argument_list|(
name|msg
operator|.
name|getVersion
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|msg
operator|.
name|getVersion
argument_list|()
operator|.
name|getBody
argument_list|()
operator|+
literal|" not "
operator|+
name|type
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|Header
name|h
range|:
name|p
operator|.
name|getHeaders
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|signed
operator|.
name|contains
argument_list|(
name|h
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Element
name|nd
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|doc
operator|.
name|getSOAPHeader
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|nd
operator|!=
literal|null
operator|&&
operator|!
name|found
condition|)
block|{
if|if
condition|(
name|h
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|nd
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
operator|(
name|nd
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|h
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|h
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
name|nd
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|nd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|found
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|h
operator|.
name|getQName
argument_list|()
operator|+
literal|" not + "
operator|+
name|type
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|computeAction
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|RequestData
name|data
parameter_list|)
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// extract Assertion information
name|String
name|action
init|=
name|getString
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
name|action
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|aim
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|containsPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|INCLUDE_TIMESTAMP
argument_list|)
condition|)
block|{
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
name|WSHandlerConstants
operator|.
name|TIMESTAMP
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containsPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|USERNAME_TOKEN
argument_list|)
condition|)
block|{
if|if
condition|(
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|USERNAME_TOKEN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
name|WSHandlerConstants
operator|.
name|USERNAME_TOKEN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|//relatively irrelevant stuff from a verification standpoint
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|LAYOUT
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|WSS10
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|TRUST_13
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP11Constants
operator|.
name|TRUST_10
argument_list|)
expr_stmt|;
comment|//things that DO impact setup
name|handleWSS11
argument_list|(
name|aim
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|action
operator|=
name|checkAsymetricBinding
argument_list|(
name|aim
argument_list|,
name|action
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|action
operator|=
name|checkSymetricBinding
argument_list|(
name|aim
argument_list|,
name|action
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|//stuff we can default to asserted an un-assert if a condition isn't met
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|KEYVALUE_TOKEN
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|X509_TOKEN
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|WSHandlerConstants
operator|.
name|ACTION
argument_list|,
name|action
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
enum|enum
name|Protections
block|{
name|NONE
block|,
name|SIGN
block|,
name|ENCRYPT
block|,
name|SIGN_ENCRYPT
block|,
name|ENCRYPT_SIGN
block|,
name|ENCRYPT_SIGN_PROTECT
block|,     }
empty_stmt|;
specifier|private
name|Protections
name|addSign
parameter_list|(
name|Protections
name|prots
parameter_list|)
block|{
if|if
condition|(
name|prots
operator|==
name|Protections
operator|.
name|NONE
condition|)
block|{
return|return
name|Protections
operator|.
name|SIGN
return|;
block|}
if|if
condition|(
name|prots
operator|==
name|Protections
operator|.
name|ENCRYPT
condition|)
block|{
return|return
name|Protections
operator|.
name|ENCRYPT_SIGN
return|;
block|}
return|return
name|prots
return|;
block|}
specifier|private
name|Protections
name|addEncrypt
parameter_list|(
name|Protections
name|prots
parameter_list|)
block|{
if|if
condition|(
name|prots
operator|==
name|Protections
operator|.
name|NONE
condition|)
block|{
return|return
name|Protections
operator|.
name|ENCRYPT
return|;
block|}
if|if
condition|(
name|prots
operator|==
name|Protections
operator|.
name|SIGN
condition|)
block|{
return|return
name|Protections
operator|.
name|SIGN_ENCRYPT
return|;
block|}
if|if
condition|(
name|prots
operator|==
name|Protections
operator|.
name|ENCRYPT_SIGN
operator|||
name|prots
operator|==
name|Protections
operator|.
name|SIGN_ENCRYPT
condition|)
block|{
return|return
name|Protections
operator|.
name|ENCRYPT_SIGN_PROTECT
return|;
block|}
return|return
name|prots
return|;
block|}
specifier|protected
name|void
name|doResults
parameter_list|(
name|SoapMessage
name|msg
parameter_list|,
name|String
name|actor
parameter_list|,
name|SOAPMessage
name|doc
parameter_list|,
name|Vector
name|results
parameter_list|)
throws|throws
name|SOAPException
throws|,
name|XMLStreamException
block|{
name|AssertionInfoMap
name|aim
init|=
name|msg
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|QName
argument_list|>
name|signed
init|=
operator|new
name|HashSet
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|QName
argument_list|>
name|encrypted
init|=
operator|new
name|HashSet
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasDerivedKeys
init|=
literal|false
decl_stmt|;
name|boolean
name|hasEndorsement
init|=
literal|false
decl_stmt|;
name|Protections
name|prots
init|=
name|Protections
operator|.
name|NONE
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|WSSecurityEngineResult
name|wser
init|=
operator|(
name|WSSecurityEngineResult
operator|)
name|results
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Integer
name|actInt
init|=
operator|(
name|Integer
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_ACTION
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|actInt
operator|.
name|intValue
argument_list|()
condition|)
block|{
case|case
name|WSConstants
operator|.
name|SIGN
case|:
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|sl
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sl
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|sl
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|QName
argument_list|(
name|WSConstants
operator|.
name|SIG_NS
argument_list|,
name|WSConstants
operator|.
name|SIG_LN
argument_list|)
argument_list|)
condition|)
block|{
comment|//endorsing the signature
name|hasEndorsement
operator|=
literal|true
expr_stmt|;
break|break;
block|}
for|for
control|(
name|WSDataRef
name|r
range|:
name|sl
control|)
block|{
name|signed
operator|.
name|add
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|prots
operator|=
name|addSign
argument_list|(
name|prots
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|WSConstants
operator|.
name|ENCR
case|:
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|el
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|wser
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WSDataRef
name|r
range|:
name|el
control|)
block|{
name|encrypted
operator|.
name|add
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|prots
operator|=
name|addEncrypt
argument_list|(
name|prots
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|WSConstants
operator|.
name|UT
case|:
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|USERNAME_TOKEN
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSConstants
operator|.
name|TS
case|:
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|INCLUDE_TIMESTAMP
argument_list|)
expr_stmt|;
break|break;
case|case
name|WSConstants
operator|.
name|DKT
case|:
name|hasDerivedKeys
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|WSConstants
operator|.
name|SC
case|:
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|WSS11
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|//System.out.println(actInt);
comment|//anything else to process?  Maybe check tokens for BKT requirements?
block|}
block|}
name|assertTokens
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_PARTS
argument_list|,
name|signed
argument_list|,
name|msg
argument_list|,
name|doc
argument_list|,
literal|"signed"
argument_list|)
expr_stmt|;
name|assertTokens
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|,
name|signed
argument_list|,
name|msg
argument_list|,
name|doc
argument_list|,
literal|"encrypted"
argument_list|)
expr_stmt|;
name|assertAsymetricBinding
argument_list|(
name|aim
argument_list|,
name|msg
argument_list|,
name|doc
argument_list|,
name|prots
argument_list|,
name|hasDerivedKeys
argument_list|)
expr_stmt|;
name|assertSymetricBinding
argument_list|(
name|aim
argument_list|,
name|msg
argument_list|,
name|doc
argument_list|,
name|prots
argument_list|,
name|hasDerivedKeys
argument_list|)
expr_stmt|;
name|assertTransportBinding
argument_list|(
name|aim
argument_list|)
expr_stmt|;
comment|//REVISIT - probably can verify some of these like if UT is encrypted and/or signed, etc...
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasEndorsement
operator|||
name|isRequestor
argument_list|(
name|msg
argument_list|)
condition|)
block|{
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|ENDORSING_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_ENDORSING_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|SIGNED_ENDORSING_ENCRYPTED_SUPPORTING_TOKENS
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doResults
argument_list|(
name|msg
argument_list|,
name|actor
argument_list|,
name|doc
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|assertSymetricBinding
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|message
parameter_list|,
name|SOAPMessage
name|doc
parameter_list|,
name|Protections
name|prots
parameter_list|,
name|boolean
name|derived
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|SYMMETRIC_BINDING
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|SymmetricBinding
name|abinding
init|=
operator|(
name|SymmetricBinding
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|abinding
operator|.
name|getProtectionOrder
argument_list|()
operator|==
name|SPConstants
operator|.
name|ProtectionOrder
operator|.
name|EncryptBeforeSigning
condition|)
block|{
if|if
condition|(
name|abinding
operator|.
name|isSignatureProtection
argument_list|()
condition|)
block|{
if|if
condition|(
name|prots
operator|!=
name|Protections
operator|.
name|ENCRYPT_SIGN_PROTECT
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"Not encrypted before signed and then protected"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|prots
operator|!=
name|Protections
operator|.
name|ENCRYPT_SIGN
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"Not encrypted before signed"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|prots
operator|!=
name|Protections
operator|.
name|SIGN_ENCRYPT
operator|&&
name|prots
operator|!=
name|Protections
operator|.
name|SIGN
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"Not signed before encrypted"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|abinding
operator|.
name|getEncryptionToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|abinding
operator|.
name|getEncryptionToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|abinding
operator|.
name|getEncryptionToken
argument_list|()
operator|.
name|getToken
argument_list|()
argument_list|,
name|derived
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|abinding
operator|.
name|getSignatureToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|abinding
operator|.
name|getSignatureToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|abinding
operator|.
name|getSignatureToken
argument_list|()
operator|.
name|getToken
argument_list|()
argument_list|,
name|derived
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|abinding
operator|.
name|getProtectionToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|abinding
operator|.
name|getProtectionToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|abinding
operator|.
name|getProtectionToken
argument_list|()
operator|.
name|getToken
argument_list|()
argument_list|,
name|derived
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|assertAsymetricBinding
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|message
parameter_list|,
name|SOAPMessage
name|doc
parameter_list|,
name|Protections
name|prots
parameter_list|,
name|boolean
name|derived
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|ASYMMETRIC_BINDING
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|AsymmetricBinding
name|abinding
init|=
operator|(
name|AsymmetricBinding
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|abinding
operator|.
name|getProtectionOrder
argument_list|()
operator|==
name|SPConstants
operator|.
name|ProtectionOrder
operator|.
name|EncryptBeforeSigning
condition|)
block|{
if|if
condition|(
name|abinding
operator|.
name|isSignatureProtection
argument_list|()
condition|)
block|{
if|if
condition|(
name|prots
operator|!=
name|Protections
operator|.
name|ENCRYPT_SIGN_PROTECT
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"Not encrypted before signed and then protected"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|prots
operator|!=
name|Protections
operator|.
name|ENCRYPT_SIGN
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"Not encrypted before signed"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|prots
operator|!=
name|Protections
operator|.
name|SIGN_ENCRYPT
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
literal|"Not signed before encrypted"
argument_list|)
expr_stmt|;
block|}
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|abinding
operator|.
name|getInitiatorToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|abinding
operator|.
name|getRecipientToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|abinding
operator|.
name|getInitiatorToken
argument_list|()
operator|.
name|getToken
argument_list|()
argument_list|,
name|derived
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|abinding
operator|.
name|getRecipientToken
argument_list|()
operator|.
name|getToken
argument_list|()
argument_list|,
name|derived
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|assertTransportBinding
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|TRANSPORT_TOKEN
argument_list|)
expr_stmt|;
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|ENCRYPTED_PARTS
argument_list|)
expr_stmt|;
return|return
operator|!
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|TRANSPORT_BINDING
argument_list|)
return|;
block|}
block|}
end_class

end_unit

