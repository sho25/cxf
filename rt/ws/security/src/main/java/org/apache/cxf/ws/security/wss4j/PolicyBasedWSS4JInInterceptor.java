begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rt
operator|.
name|security
operator|.
name|utils
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|PolicyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|PolicyValidatorParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|SecurityPolicyValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyvalidators
operator|.
name|ValidatorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ConfigurationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|Crypto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|crypto
operator|.
name|PasswordEncryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|common
operator|.
name|ext
operator|.
name|WSSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|WSDataRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|engine
operator|.
name|WSSecurityEngineResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|RequestData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|handler
operator|.
name|WSHandlerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|dom
operator|.
name|message
operator|.
name|token
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP12Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP13Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|UsernameToken
operator|.
name|PasswordType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Wss11
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|PolicyBasedWSS4JInInterceptor
extends|extends
name|WSS4JInInterceptor
block|{
comment|/**      *      */
specifier|public
name|PolicyBasedWSS4JInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|SoapMessage
name|msg
parameter_list|)
throws|throws
name|Fault
block|{
name|AssertionInfoMap
name|aim
init|=
name|msg
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|enableStax
init|=
name|MessageUtils
operator|.
name|getContextualBoolean
argument_list|(
name|msg
argument_list|,
name|SecurityConstants
operator|.
name|ENABLE_STREAMING_SECURITY
argument_list|)
decl_stmt|;
if|if
condition|(
name|aim
operator|!=
literal|null
operator|&&
operator|!
name|enableStax
condition|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleWSS11
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
block|{
if|if
condition|(
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ENABLE_SIGNATURE_CONFIRMATION
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|PolicyUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS11
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|Wss11
name|wss11
init|=
operator|(
name|Wss11
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
name|wss11
operator|.
name|isRequireSignatureConfirmation
argument_list|()
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ENABLE_SIGNATURE_CONFIRMATION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|String
name|addToAction
parameter_list|(
name|String
name|action
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|pre
parameter_list|)
block|{
if|if
condition|(
name|action
operator|.
name|contains
argument_list|(
name|val
argument_list|)
condition|)
block|{
return|return
name|action
return|;
block|}
if|if
condition|(
name|pre
condition|)
block|{
return|return
name|val
operator|+
literal|" "
operator|+
name|action
return|;
block|}
return|return
name|action
operator|+
literal|" "
operator|+
name|val
return|;
block|}
specifier|private
name|String
name|checkAsymmetricBinding
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|String
name|action
parameter_list|,
name|SoapMessage
name|message
parameter_list|,
name|RequestData
name|data
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|AssertionInfo
name|ai
init|=
name|PolicyUtils
operator|.
name|getFirstAssertionByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ASYMMETRIC_BINDING
argument_list|)
decl_stmt|;
if|if
condition|(
name|ai
operator|==
literal|null
condition|)
block|{
return|return
name|action
return|;
block|}
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Signature"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Encrypt"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Object
name|s
init|=
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_CRYPTO
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Object
name|e
init|=
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_CRYPTO
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Crypto
name|encrCrypto
init|=
name|getEncryptionCrypto
argument_list|(
name|e
argument_list|,
name|message
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|Crypto
name|signCrypto
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|signCrypto
operator|=
name|encrCrypto
expr_stmt|;
block|}
else|else
block|{
name|signCrypto
operator|=
name|getSignatureCrypto
argument_list|(
name|s
argument_list|,
name|message
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|signCryptoRefId
init|=
name|signCrypto
operator|!=
literal|null
condition|?
literal|"RefId-"
operator|+
name|signCrypto
operator|.
name|hashCode
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|signCrypto
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DEC_PROP_REF_ID
argument_list|,
name|signCryptoRefId
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|signCryptoRefId
argument_list|,
name|signCrypto
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|encrCrypto
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|encCryptoRefId
init|=
literal|"RefId-"
operator|+
name|encrCrypto
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SIG_VER_PROP_REF_ID
argument_list|,
name|encCryptoRefId
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|encCryptoRefId
argument_list|,
name|encrCrypto
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|signCrypto
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SIG_VER_PROP_REF_ID
argument_list|,
name|signCryptoRefId
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|signCryptoRefId
argument_list|,
name|signCrypto
argument_list|)
expr_stmt|;
block|}
return|return
name|action
return|;
block|}
specifier|private
name|String
name|checkDefaultBinding
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|String
name|action
parameter_list|,
name|SoapMessage
name|message
parameter_list|,
name|RequestData
name|data
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Signature"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Encrypt"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Object
name|s
init|=
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_CRYPTO
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Object
name|e
init|=
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_CRYPTO
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Crypto
name|encrCrypto
init|=
name|getEncryptionCrypto
argument_list|(
name|e
argument_list|,
name|message
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|Crypto
name|signCrypto
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|signCrypto
operator|=
name|encrCrypto
expr_stmt|;
block|}
else|else
block|{
name|signCrypto
operator|=
name|getSignatureCrypto
argument_list|(
name|s
argument_list|,
name|message
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|signCryptoRefId
init|=
name|signCrypto
operator|!=
literal|null
condition|?
literal|"RefId-"
operator|+
name|signCrypto
operator|.
name|hashCode
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|signCrypto
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DEC_PROP_REF_ID
argument_list|,
name|signCryptoRefId
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|signCryptoRefId
argument_list|,
name|signCrypto
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|encrCrypto
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|encCryptoRefId
init|=
literal|"RefId-"
operator|+
name|encrCrypto
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SIG_VER_PROP_REF_ID
argument_list|,
name|encCryptoRefId
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|encCryptoRefId
argument_list|,
name|encrCrypto
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|signCrypto
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SIG_VER_PROP_REF_ID
argument_list|,
name|signCryptoRefId
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|signCryptoRefId
argument_list|,
name|signCrypto
argument_list|)
expr_stmt|;
block|}
return|return
name|action
return|;
block|}
comment|/**      * Is a Nonce Cache required, i.e. are we expecting a UsernameToken      */
annotation|@
name|Override
specifier|protected
name|boolean
name|isNonceCacheRequired
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|actions
parameter_list|,
name|SoapMessage
name|msg
parameter_list|)
block|{
name|AssertionInfoMap
name|aim
init|=
name|msg
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|aim
operator|!=
literal|null
condition|)
block|{
name|AssertionInfo
name|ai
init|=
name|PolicyUtils
operator|.
name|getFirstAssertionByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|USERNAME_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|ai
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Is a Timestamp cache required, i.e. are we expecting a Timestamp      */
annotation|@
name|Override
specifier|protected
name|boolean
name|isTimestampCacheRequired
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|actions
parameter_list|,
name|SoapMessage
name|msg
parameter_list|)
block|{
name|AssertionInfoMap
name|aim
init|=
name|msg
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|aim
operator|!=
literal|null
condition|)
block|{
name|AssertionInfo
name|ai
init|=
name|PolicyUtils
operator|.
name|getFirstAssertionByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|INCLUDE_TIMESTAMP
argument_list|)
decl_stmt|;
if|if
condition|(
name|ai
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Is a SAML Cache required, i.e. are we expecting a SAML Token      */
annotation|@
name|Override
specifier|protected
name|boolean
name|isSamlCacheRequired
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|actions
parameter_list|,
name|SoapMessage
name|msg
parameter_list|)
block|{
name|AssertionInfoMap
name|aim
init|=
name|msg
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|aim
operator|!=
literal|null
condition|)
block|{
name|AssertionInfo
name|ai
init|=
name|PolicyUtils
operator|.
name|getFirstAssertionByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SAML_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|ai
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|checkUsernameToken
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|SoapMessage
name|message
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|PolicyUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|USERNAME_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|UsernameToken
name|policy
init|=
operator|(
name|UsernameToken
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
name|policy
operator|.
name|getPasswordType
argument_list|()
operator|==
name|PasswordType
operator|.
name|NoPassword
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ALLOW_USERNAMETOKEN_NOPASSWORD
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|String
name|checkSymmetricBinding
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|,
name|String
name|action
parameter_list|,
name|SoapMessage
name|message
parameter_list|,
name|RequestData
name|data
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|AssertionInfo
name|ai
init|=
name|PolicyUtils
operator|.
name|getFirstAssertionByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|SYMMETRIC_BINDING
argument_list|)
decl_stmt|;
if|if
condition|(
name|ai
operator|==
literal|null
condition|)
block|{
return|return
name|action
return|;
block|}
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Signature"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|action
operator|=
name|addToAction
argument_list|(
name|action
argument_list|,
literal|"Encrypt"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Object
name|s
init|=
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_CRYPTO
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|SIGNATURE_PROPERTIES
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Object
name|e
init|=
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_CRYPTO
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|e
operator|=
name|SecurityUtils
operator|.
name|getSecurityPropertyValue
argument_list|(
name|SecurityConstants
operator|.
name|ENCRYPT_PROPERTIES
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Crypto
name|encrCrypto
init|=
name|getEncryptionCrypto
argument_list|(
name|e
argument_list|,
name|message
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|Crypto
name|signCrypto
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|signCrypto
operator|=
name|encrCrypto
expr_stmt|;
block|}
else|else
block|{
name|signCrypto
operator|=
name|getSignatureCrypto
argument_list|(
name|s
argument_list|,
name|message
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRequestor
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|Crypto
name|crypto
init|=
name|encrCrypto
decl_stmt|;
if|if
condition|(
name|crypto
operator|==
literal|null
condition|)
block|{
name|crypto
operator|=
name|signCrypto
expr_stmt|;
block|}
if|if
condition|(
name|crypto
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|refId
init|=
literal|"RefId-"
operator|+
name|crypto
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SIG_VER_PROP_REF_ID
argument_list|,
name|refId
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|refId
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
block|}
name|crypto
operator|=
name|signCrypto
expr_stmt|;
if|if
condition|(
name|crypto
operator|==
literal|null
condition|)
block|{
name|crypto
operator|=
name|encrCrypto
expr_stmt|;
block|}
if|if
condition|(
name|crypto
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|refId
init|=
literal|"RefId-"
operator|+
name|crypto
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DEC_PROP_REF_ID
argument_list|,
name|refId
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|refId
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Crypto
name|crypto
init|=
name|signCrypto
decl_stmt|;
if|if
condition|(
name|crypto
operator|==
literal|null
condition|)
block|{
name|crypto
operator|=
name|encrCrypto
expr_stmt|;
block|}
if|if
condition|(
name|crypto
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|refId
init|=
literal|"RefId-"
operator|+
name|crypto
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|SIG_VER_PROP_REF_ID
argument_list|,
name|refId
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|refId
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
block|}
name|crypto
operator|=
name|encrCrypto
expr_stmt|;
if|if
condition|(
name|crypto
operator|==
literal|null
condition|)
block|{
name|crypto
operator|=
name|signCrypto
expr_stmt|;
block|}
if|if
condition|(
name|crypto
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|refId
init|=
literal|"RefId-"
operator|+
name|crypto
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|DEC_PROP_REF_ID
argument_list|,
name|refId
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|refId
argument_list|,
name|crypto
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|action
return|;
block|}
specifier|private
name|Crypto
name|getEncryptionCrypto
parameter_list|(
name|Object
name|e
parameter_list|,
name|SoapMessage
name|message
parameter_list|,
name|RequestData
name|requestData
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|PasswordEncryptor
name|passwordEncryptor
init|=
name|getPasswordEncryptor
argument_list|(
name|message
argument_list|,
name|requestData
argument_list|)
decl_stmt|;
return|return
name|WSS4JUtils
operator|.
name|getEncryptionCrypto
argument_list|(
name|e
argument_list|,
name|message
argument_list|,
name|passwordEncryptor
argument_list|)
return|;
block|}
specifier|private
name|PasswordEncryptor
name|getPasswordEncryptor
parameter_list|(
name|SoapMessage
name|soapMessage
parameter_list|,
name|RequestData
name|requestData
parameter_list|)
block|{
name|PasswordEncryptor
name|passwordEncryptor
init|=
operator|(
name|PasswordEncryptor
operator|)
name|soapMessage
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|PASSWORD_ENCRYPTOR_INSTANCE
argument_list|)
decl_stmt|;
if|if
condition|(
name|passwordEncryptor
operator|!=
literal|null
condition|)
block|{
return|return
name|passwordEncryptor
return|;
block|}
return|return
name|super
operator|.
name|getPasswordEncryptor
argument_list|(
name|requestData
argument_list|)
return|;
block|}
specifier|private
name|Crypto
name|getSignatureCrypto
parameter_list|(
name|Object
name|s
parameter_list|,
name|SoapMessage
name|message
parameter_list|,
name|RequestData
name|requestData
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|PasswordEncryptor
name|passwordEncryptor
init|=
name|getPasswordEncryptor
argument_list|(
name|message
argument_list|,
name|requestData
argument_list|)
decl_stmt|;
return|return
name|WSS4JUtils
operator|.
name|getSignatureCrypto
argument_list|(
name|s
argument_list|,
name|message
argument_list|,
name|passwordEncryptor
argument_list|)
return|;
block|}
comment|/**      * Set a WSS4J AlgorithmSuite object on the RequestData context, to restrict the      * algorithms that are allowed for encryption, signature, etc.      */
specifier|protected
name|void
name|setAlgorithmSuites
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|RequestData
name|data
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|AlgorithmSuiteTranslater
name|translater
init|=
operator|new
name|AlgorithmSuiteTranslater
argument_list|()
decl_stmt|;
name|translater
operator|.
name|translateAlgorithmSuites
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|// Allow for setting non-standard signature algorithms
name|boolean
name|asymmAlgSet
init|=
literal|false
decl_stmt|;
name|String
name|asymSignatureAlgorithm
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ASYMMETRIC_SIGNATURE_ALGORITHM
argument_list|)
decl_stmt|;
if|if
condition|(
name|asymSignatureAlgorithm
operator|!=
literal|null
operator|&&
name|data
operator|.
name|getAlgorithmSuite
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|data
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSignatureMethods
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|data
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSignatureMethods
argument_list|()
operator|.
name|add
argument_list|(
name|asymSignatureAlgorithm
argument_list|)
expr_stmt|;
name|asymmAlgSet
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|symSignatureAlgorithm
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SYMMETRIC_SIGNATURE_ALGORITHM
argument_list|)
decl_stmt|;
if|if
condition|(
name|symSignatureAlgorithm
operator|!=
literal|null
operator|&&
name|data
operator|.
name|getAlgorithmSuite
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|asymmAlgSet
condition|)
block|{
name|data
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSignatureMethods
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|data
operator|.
name|getAlgorithmSuite
argument_list|()
operator|.
name|getSignatureMethods
argument_list|()
operator|.
name|add
argument_list|(
name|symSignatureAlgorithm
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|computeAction
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|RequestData
name|data
parameter_list|)
throws|throws
name|WSSecurityException
block|{
name|String
name|action
init|=
name|getString
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
name|action
operator|=
literal|""
expr_stmt|;
block|}
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|aim
operator|!=
literal|null
condition|)
block|{
comment|//things that DO impact setup
name|handleWSS11
argument_list|(
name|aim
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|action
operator|=
name|checkAsymmetricBinding
argument_list|(
name|aim
argument_list|,
name|action
argument_list|,
name|message
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|action
operator|=
name|checkSymmetricBinding
argument_list|(
name|aim
argument_list|,
name|action
argument_list|,
name|message
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|SP12Constants
operator|.
name|TRANSPORT_BINDING
argument_list|)
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|action
argument_list|)
operator|||
operator|(
name|ais
operator|!=
literal|null
operator|&&
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|action
operator|=
name|checkDefaultBinding
argument_list|(
name|aim
argument_list|,
name|action
argument_list|,
name|message
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
comment|// Allow for setting non-standard asymmetric signature algorithms
name|String
name|asymSignatureAlgorithm
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|ASYMMETRIC_SIGNATURE_ALGORITHM
argument_list|)
decl_stmt|;
name|String
name|symSignatureAlgorithm
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|SYMMETRIC_SIGNATURE_ALGORITHM
argument_list|)
decl_stmt|;
if|if
condition|(
name|asymSignatureAlgorithm
operator|!=
literal|null
operator|||
name|symSignatureAlgorithm
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|algorithmSuites
init|=
name|PolicyUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|ALGORITHM_SUITE
argument_list|)
decl_stmt|;
if|if
condition|(
name|algorithmSuites
operator|!=
literal|null
operator|&&
operator|!
name|algorithmSuites
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|algorithmSuite
range|:
name|algorithmSuites
control|)
block|{
name|AlgorithmSuite
name|algSuite
init|=
operator|(
name|AlgorithmSuite
operator|)
name|algorithmSuite
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
if|if
condition|(
name|asymSignatureAlgorithm
operator|!=
literal|null
condition|)
block|{
name|algSuite
operator|.
name|setAsymmetricSignature
argument_list|(
name|asymSignatureAlgorithm
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|symSignatureAlgorithm
operator|!=
literal|null
condition|)
block|{
name|algSuite
operator|.
name|setSymmetricSignature
argument_list|(
name|symSignatureAlgorithm
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|checkUsernameToken
argument_list|(
name|aim
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// stuff we can default to asserted and un-assert if a condition isn't met
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|KEY_VALUE_TOKEN
argument_list|)
expr_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|RSA_KEY_VALUE
argument_list|)
expr_stmt|;
comment|// WSS10
name|ais
operator|=
name|PolicyUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS10
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_KEY_IDENTIFIER
argument_list|)
expr_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_ISSUER_SERIAL
argument_list|)
expr_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_EXTERNAL_URI
argument_list|)
expr_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_EMBEDDED_TOKEN
argument_list|)
expr_stmt|;
block|}
comment|// Trust 1.0
name|ais
operator|=
name|PolicyUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|TRUST_10
argument_list|)
expr_stmt|;
name|boolean
name|trust10Asserted
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_CLIENT_CHALLENGE
argument_list|)
expr_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_SERVER_CHALLENGE
argument_list|)
expr_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_CLIENT_ENTROPY
argument_list|)
expr_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_SERVER_ENTROPY
argument_list|)
expr_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_ISSUED_TOKENS
argument_list|)
expr_stmt|;
name|trust10Asserted
operator|=
literal|true
expr_stmt|;
block|}
comment|// Trust 1.3
name|ais
operator|=
name|PolicyUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|TRUST_13
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ais
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|REQUIRE_REQUEST_SECURITY_TOKEN_COLLECTION
argument_list|)
expr_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP12Constants
operator|.
name|REQUIRE_APPLIES_TO
argument_list|)
expr_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP13Constants
operator|.
name|SCOPE_POLICY_15
argument_list|)
expr_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SP13Constants
operator|.
name|MUST_SUPPORT_INTERACTIVE_CHALLENGE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|trust10Asserted
condition|)
block|{
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_CLIENT_CHALLENGE
argument_list|)
expr_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_SERVER_CHALLENGE
argument_list|)
expr_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_CLIENT_ENTROPY
argument_list|)
expr_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_SERVER_ENTROPY
argument_list|)
expr_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_ISSUED_TOKENS
argument_list|)
expr_stmt|;
block|}
block|}
name|message
operator|.
name|put
argument_list|(
name|ConfigurationConstants
operator|.
name|ACTION
argument_list|,
name|action
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doResults
parameter_list|(
name|SoapMessage
name|msg
parameter_list|,
name|String
name|actor
parameter_list|,
name|Element
name|soapHeader
parameter_list|,
name|Element
name|soapBody
parameter_list|,
name|WSHandlerResult
name|results
parameter_list|,
name|boolean
name|utWithCallbacks
parameter_list|)
throws|throws
name|SOAPException
throws|,
name|XMLStreamException
throws|,
name|WSSecurityException
block|{
comment|//
comment|// Pre-fetch various results
comment|//
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|signedResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|containsKey
argument_list|(
name|WSConstants
operator|.
name|SIGN
argument_list|)
condition|)
block|{
name|signedResults
operator|.
name|addAll
argument_list|(
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|get
argument_list|(
name|WSConstants
operator|.
name|SIGN
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|containsKey
argument_list|(
name|WSConstants
operator|.
name|UT_SIGN
argument_list|)
condition|)
block|{
name|signedResults
operator|.
name|addAll
argument_list|(
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|get
argument_list|(
name|WSConstants
operator|.
name|UT_SIGN
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|containsKey
argument_list|(
name|WSConstants
operator|.
name|ST_SIGNED
argument_list|)
condition|)
block|{
name|signedResults
operator|.
name|addAll
argument_list|(
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|get
argument_list|(
name|WSConstants
operator|.
name|ST_SIGNED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|WSDataRef
argument_list|>
name|signed
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|WSSecurityEngineResult
name|result
range|:
name|signedResults
control|)
block|{
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|sl
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WSDataRef
name|r
range|:
name|sl
control|)
block|{
name|signed
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|encryptResults
init|=
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|get
argument_list|(
name|WSConstants
operator|.
name|ENCR
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|WSDataRef
argument_list|>
name|encrypted
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|encryptResults
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WSSecurityEngineResult
name|result
range|:
name|encryptResults
control|)
block|{
name|List
argument_list|<
name|WSDataRef
argument_list|>
name|sl
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|result
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_DATA_REF_URIS
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WSDataRef
name|r
range|:
name|sl
control|)
block|{
name|encrypted
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|CryptoCoverageUtil
operator|.
name|reconcileEncryptedSignedRefs
argument_list|(
name|signed
argument_list|,
name|encrypted
argument_list|)
expr_stmt|;
comment|//
comment|// Check policies
comment|//
name|PolicyValidatorParameters
name|parameters
init|=
operator|new
name|PolicyValidatorParameters
argument_list|()
decl_stmt|;
name|AssertionInfoMap
name|aim
init|=
name|msg
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|setAssertionInfoMap
argument_list|(
name|aim
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setSoapBody
argument_list|(
name|soapBody
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setSoapHeader
argument_list|(
name|soapHeader
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setResults
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setSignedResults
argument_list|(
name|signedResults
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setEncryptedResults
argument_list|(
name|encryptResults
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setUtWithCallbacks
argument_list|(
name|utWithCallbacks
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setSigned
argument_list|(
name|signed
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|setEncrypted
argument_list|(
name|encrypted
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|utResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|containsKey
argument_list|(
name|WSConstants
operator|.
name|UT
argument_list|)
condition|)
block|{
name|utResults
operator|.
name|addAll
argument_list|(
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|get
argument_list|(
name|WSConstants
operator|.
name|UT
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|containsKey
argument_list|(
name|WSConstants
operator|.
name|UT_NOPASSWORD
argument_list|)
condition|)
block|{
name|utResults
operator|.
name|addAll
argument_list|(
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|get
argument_list|(
name|WSConstants
operator|.
name|UT_NOPASSWORD
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parameters
operator|.
name|setUsernameTokenResults
argument_list|(
name|utResults
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|WSSecurityEngineResult
argument_list|>
name|samlResults
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|containsKey
argument_list|(
name|WSConstants
operator|.
name|ST_SIGNED
argument_list|)
condition|)
block|{
name|samlResults
operator|.
name|addAll
argument_list|(
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|get
argument_list|(
name|WSConstants
operator|.
name|ST_SIGNED
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|containsKey
argument_list|(
name|WSConstants
operator|.
name|ST_UNSIGNED
argument_list|)
condition|)
block|{
name|samlResults
operator|.
name|addAll
argument_list|(
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|get
argument_list|(
name|WSConstants
operator|.
name|ST_UNSIGNED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parameters
operator|.
name|setSamlResults
argument_list|(
name|samlResults
argument_list|)
expr_stmt|;
comment|// Store the timestamp element
name|WSSecurityEngineResult
name|tsResult
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|containsKey
argument_list|(
name|WSConstants
operator|.
name|TS
argument_list|)
condition|)
block|{
name|tsResult
operator|=
name|results
operator|.
name|getActionResults
argument_list|()
operator|.
name|get
argument_list|(
name|WSConstants
operator|.
name|TS
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|Element
name|timestamp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tsResult
operator|!=
literal|null
condition|)
block|{
name|Timestamp
name|ts
init|=
operator|(
name|Timestamp
operator|)
name|tsResult
operator|.
name|get
argument_list|(
name|WSSecurityEngineResult
operator|.
name|TAG_TIMESTAMP
argument_list|)
decl_stmt|;
name|timestamp
operator|=
name|ts
operator|.
name|getElement
argument_list|()
expr_stmt|;
block|}
name|parameters
operator|.
name|setTimestampElement
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
comment|// Validate security policies
name|Map
argument_list|<
name|QName
argument_list|,
name|SecurityPolicyValidator
argument_list|>
name|validators
init|=
name|ValidatorUtils
operator|.
name|getSecurityPolicyValidators
argument_list|(
name|msg
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|QName
argument_list|,
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|aim
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Check to see if we have a security policy + if we can validate it
if|if
condition|(
name|validators
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|validators
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|validatePolicies
argument_list|(
name|parameters
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|doResults
argument_list|(
name|msg
argument_list|,
name|actor
argument_list|,
name|soapHeader
argument_list|,
name|soapBody
argument_list|,
name|results
argument_list|,
name|utWithCallbacks
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

