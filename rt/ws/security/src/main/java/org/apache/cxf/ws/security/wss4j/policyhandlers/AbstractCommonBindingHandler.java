begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|wss4j
operator|.
name|policyhandlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|SecurityConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|policy
operator|.
name|PolicyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|security
operator|.
name|tokenstore
operator|.
name|TokenStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SP13Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|SPConstants
operator|.
name|IncludeTokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AbstractTokenWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|AlgorithmSuite
operator|.
name|AlgorithmSuiteType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|HttpsToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|IssuedToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|KerberosToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|KeyValueToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SamlToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SecureConversationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SecurityContextToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|SpnegoContextToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Trust10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Trust13
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Wss10
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|Wss11
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|wss4j
operator|.
name|policy
operator|.
name|model
operator|.
name|X509Token
import|;
end_import

begin_comment
comment|/**  * Some common functionality to be shared between the two binding handlers (DOM + StAX)  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractCommonBindingHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractCommonBindingHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|SoapMessage
name|message
decl_stmt|;
specifier|public
name|AbstractCommonBindingHandler
parameter_list|(
name|SoapMessage
name|msg
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|msg
expr_stmt|;
block|}
specifier|protected
name|void
name|unassertPolicy
parameter_list|(
name|Assertion
name|assertion
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
if|if
condition|(
name|assertion
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Not asserting "
operator|+
name|assertion
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|reason
argument_list|)
expr_stmt|;
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|assertion
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getAssertion
argument_list|()
operator|==
name|assertion
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|assertion
operator|.
name|isOptional
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PolicyException
argument_list|(
operator|new
name|Message
argument_list|(
name|reason
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|unassertPolicy
parameter_list|(
name|Assertion
name|assertion
parameter_list|,
name|Exception
name|reason
parameter_list|)
block|{
if|if
condition|(
name|assertion
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Not asserting "
operator|+
name|assertion
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|reason
argument_list|)
expr_stmt|;
block|}
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|assertion
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getAssertion
argument_list|()
operator|==
name|assertion
condition|)
block|{
name|ai
operator|.
name|setNotAsserted
argument_list|(
name|reason
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|assertion
operator|.
name|isOptional
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PolicyException
argument_list|(
operator|new
name|Message
argument_list|(
name|reason
operator|.
name|getMessage
argument_list|()
argument_list|,
name|LOG
argument_list|)
argument_list|,
name|reason
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|assertTokenWrapper
parameter_list|(
name|AbstractTokenWrapper
name|tokenWrapper
parameter_list|)
block|{
if|if
condition|(
name|tokenWrapper
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|assertPolicy
argument_list|(
name|tokenWrapper
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertToken
parameter_list|(
name|AbstractToken
name|token
parameter_list|)
block|{
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|assertPolicy
argument_list|(
name|token
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|namespace
init|=
name|token
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getDerivedKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|token
operator|.
name|getDerivedKeys
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|instanceof
name|X509Token
condition|)
block|{
name|X509Token
name|x509Token
init|=
operator|(
name|X509Token
operator|)
name|token
decl_stmt|;
name|assertX509Token
argument_list|(
name|x509Token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|HttpsToken
condition|)
block|{
name|HttpsToken
name|httpsToken
init|=
operator|(
name|HttpsToken
operator|)
name|token
decl_stmt|;
if|if
condition|(
name|httpsToken
operator|.
name|getAuthenticationType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|httpsToken
operator|.
name|getAuthenticationType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|KeyValueToken
condition|)
block|{
name|KeyValueToken
name|keyValueToken
init|=
operator|(
name|KeyValueToken
operator|)
name|token
decl_stmt|;
if|if
condition|(
name|keyValueToken
operator|.
name|isRsaKeyValue
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|RSA_KEY_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|UsernameToken
condition|)
block|{
name|UsernameToken
name|usernameToken
init|=
operator|(
name|UsernameToken
operator|)
name|token
decl_stmt|;
name|assertUsernameToken
argument_list|(
name|usernameToken
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|SecureConversationToken
condition|)
block|{
name|SecureConversationToken
name|scToken
init|=
operator|(
name|SecureConversationToken
operator|)
name|token
decl_stmt|;
name|assertSecureConversationToken
argument_list|(
name|scToken
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|SecurityContextToken
condition|)
block|{
name|SecurityContextToken
name|scToken
init|=
operator|(
name|SecurityContextToken
operator|)
name|token
decl_stmt|;
name|assertSecurityContextToken
argument_list|(
name|scToken
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|SpnegoContextToken
condition|)
block|{
name|SpnegoContextToken
name|scToken
init|=
operator|(
name|SpnegoContextToken
operator|)
name|token
decl_stmt|;
name|assertSpnegoContextToken
argument_list|(
name|scToken
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|IssuedToken
condition|)
block|{
name|IssuedToken
name|issuedToken
init|=
operator|(
name|IssuedToken
operator|)
name|token
decl_stmt|;
name|assertIssuedToken
argument_list|(
name|issuedToken
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|KerberosToken
condition|)
block|{
name|KerberosToken
name|kerberosToken
init|=
operator|(
name|KerberosToken
operator|)
name|token
decl_stmt|;
name|assertKerberosToken
argument_list|(
name|kerberosToken
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|instanceof
name|SamlToken
condition|)
block|{
name|SamlToken
name|samlToken
init|=
operator|(
name|SamlToken
operator|)
name|token
decl_stmt|;
name|assertSamlToken
argument_list|(
name|samlToken
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertX509Token
parameter_list|(
name|X509Token
name|token
parameter_list|)
block|{
name|String
name|namespace
init|=
name|token
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|isRequireEmbeddedTokenReference
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_EMBEDDED_TOKEN_REFERENCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|isRequireIssuerSerialReference
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_ISSUER_SERIAL_REFERENCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|isRequireKeyIdentifierReference
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_KEY_IDENTIFIER_REFERENCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|isRequireThumbprintReference
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_THUMBPRINT_REFERENCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|getTokenType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|token
operator|.
name|getTokenType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertUsernameToken
parameter_list|(
name|UsernameToken
name|token
parameter_list|)
block|{
name|String
name|namespace
init|=
name|token
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getPasswordType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|token
operator|.
name|getPasswordType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|getUsernameTokenType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|token
operator|.
name|getUsernameTokenType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|isCreated
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
name|SP13Constants
operator|.
name|CREATED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|isNonce
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
name|SP13Constants
operator|.
name|NONCE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertSecurityContextToken
parameter_list|(
name|SecurityContextToken
name|token
parameter_list|)
block|{
name|String
name|namespace
init|=
name|token
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|isRequireExternalUriReference
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_EXTERNAL_URI_REFERENCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|isSc10SecurityContextToken
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|SC10_SECURITY_CONTEXT_TOKEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|isSc13SecurityContextToken
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|SC13_SECURITY_CONTEXT_TOKEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertSecureConversationToken
parameter_list|(
name|SecureConversationToken
name|token
parameter_list|)
block|{
name|assertSecurityContextToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|String
name|namespace
init|=
name|token
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|isMustNotSendAmend
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_NOT_SEND_AMEND
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|isMustNotSendCancel
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_NOT_SEND_CANCEL
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|isMustNotSendRenew
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_NOT_SEND_RENEW
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertSpnegoContextToken
parameter_list|(
name|SpnegoContextToken
name|token
parameter_list|)
block|{
name|String
name|namespace
init|=
name|token
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|isMustNotSendAmend
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_NOT_SEND_AMEND
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|isMustNotSendCancel
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_NOT_SEND_CANCEL
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|isMustNotSendRenew
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_NOT_SEND_RENEW
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertIssuedToken
parameter_list|(
name|IssuedToken
name|token
parameter_list|)
block|{
name|String
name|namespace
init|=
name|token
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|isRequireExternalReference
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_EXTERNAL_REFERENCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|isRequireInternalReference
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_INTERNAL_REFERENCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertKerberosToken
parameter_list|(
name|KerberosToken
name|token
parameter_list|)
block|{
name|String
name|namespace
init|=
name|token
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|isRequireKeyIdentifierReference
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_KEY_IDENTIFIER_REFERENCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|getApReqTokenType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|token
operator|.
name|getApReqTokenType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertSamlToken
parameter_list|(
name|SamlToken
name|token
parameter_list|)
block|{
name|String
name|namespace
init|=
name|token
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|isRequireKeyIdentifierReference
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_KEY_IDENTIFIER_REFERENCE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|getSamlTokenType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|token
operator|.
name|getSamlTokenType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertAlgorithmSuite
parameter_list|(
name|AlgorithmSuite
name|algorithmSuite
parameter_list|)
block|{
if|if
condition|(
name|algorithmSuite
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|algorithmSuiteAis
init|=
name|aim
operator|.
name|get
argument_list|(
name|algorithmSuite
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|algorithmSuiteAis
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|AlgorithmSuiteType
name|algorithmSuiteType
init|=
name|algorithmSuite
operator|.
name|getAlgorithmSuiteType
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|algorithmSuiteType
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|algAis
init|=
name|aim
operator|.
name|get
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|algorithmSuiteType
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|algAis
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|algAi
range|:
name|algAis
control|)
block|{
name|algAi
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|assertWSSProperties
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|wss10Ais
init|=
name|aim
operator|.
name|get
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|WSS10
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|wss10Ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|wss10Ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Wss10
name|wss10
init|=
operator|(
name|Wss10
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|assertWSS10Properties
argument_list|(
name|wss10
argument_list|)
expr_stmt|;
block|}
block|}
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|wss11Ais
init|=
name|aim
operator|.
name|get
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|WSS11
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|wss11Ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|wss11Ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Wss11
name|wss11
init|=
operator|(
name|Wss11
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|assertWSS10Properties
argument_list|(
name|wss11
argument_list|)
expr_stmt|;
if|if
condition|(
name|wss11
operator|.
name|isMustSupportRefThumbprint
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_THUMBPRINT
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wss11
operator|.
name|isMustSupportRefEncryptedKey
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_ENCRYPTED_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wss11
operator|.
name|isRequireSignatureConfirmation
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_SIGNATURE_CONFIRMATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|assertWSS10Properties
parameter_list|(
name|Wss10
name|wss10
parameter_list|)
block|{
name|String
name|namespace
init|=
name|wss10
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|wss10
operator|.
name|isMustSupportRefEmbeddedToken
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_EMBEDDED_TOKEN
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wss10
operator|.
name|isMustSupportRefKeyIdentifier
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_KEY_IDENTIFIER
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wss10
operator|.
name|isMustSupportRefIssuerSerial
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_ISSUER_SERIAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wss10
operator|.
name|isMustSupportRefExternalURI
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_REF_EXTERNAL_URI
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertTrustProperties
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|trust10Ais
init|=
name|aim
operator|.
name|get
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|TRUST_10
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|trust10Ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|trust10Ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Trust10
name|trust10
init|=
operator|(
name|Trust10
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|assertTrust10Properties
argument_list|(
name|trust10
argument_list|)
expr_stmt|;
block|}
block|}
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|trust13Ais
init|=
name|aim
operator|.
name|get
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|TRUST_13
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|trust13Ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|trust13Ais
control|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Trust13
name|trust13
init|=
operator|(
name|Trust13
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
decl_stmt|;
name|assertTrust10Properties
argument_list|(
name|trust13
argument_list|)
expr_stmt|;
if|if
condition|(
name|trust13
operator|.
name|isRequireRequestSecurityTokenCollection
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_REQUEST_SECURITY_TOKEN_COLLECTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trust13
operator|.
name|isRequireAppliesTo
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_APPLIES_TO
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trust13
operator|.
name|isScopePolicy15
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|SCOPE_POLICY_15
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trust13
operator|.
name|isMustSupportInteractiveChallenge
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_INTERACTIVE_CHALLENGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|assertTrust10Properties
parameter_list|(
name|Trust10
name|trust10
parameter_list|)
block|{
name|String
name|namespace
init|=
name|trust10
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|trust10
operator|.
name|isMustSupportClientChallenge
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_CLIENT_CHALLENGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trust10
operator|.
name|isMustSupportIssuedTokens
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_ISSUED_TOKENS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trust10
operator|.
name|isMustSupportServerChallenge
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|MUST_SUPPORT_SERVER_CHALLENGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trust10
operator|.
name|isRequireClientEntropy
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_CLIENT_ENTROPY
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trust10
operator|.
name|isRequireServerEntropy
argument_list|()
condition|)
block|{
name|assertPolicy
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|SPConstants
operator|.
name|REQUIRE_SERVER_ENTROPY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|getAllAssertionsByLocalname
parameter_list|(
name|String
name|localname
parameter_list|)
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|PolicyUtils
operator|.
name|getAllAssertionsByLocalname
argument_list|(
name|aim
argument_list|,
name|localname
argument_list|)
return|;
block|}
specifier|protected
name|SoapMessage
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
specifier|protected
name|boolean
name|isRequestor
parameter_list|()
block|{
return|return
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isTokenRequired
parameter_list|(
name|IncludeTokenType
name|includeToken
parameter_list|)
block|{
if|if
condition|(
name|includeToken
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_NEVER
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|includeToken
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|boolean
name|initiator
init|=
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|initiator
operator|&&
operator|(
name|includeToken
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS_TO_RECIPIENT
operator|||
name|includeToken
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ONCE
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|initiator
operator|&&
name|includeToken
operator|==
name|IncludeTokenType
operator|.
name|INCLUDE_TOKEN_ALWAYS_TO_INITIATOR
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|Wss10
name|getWss10
parameter_list|()
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|AssertionInfo
name|ai
init|=
name|PolicyUtils
operator|.
name|getFirstAssertionByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS10
argument_list|)
decl_stmt|;
if|if
condition|(
name|ai
operator|==
literal|null
condition|)
block|{
name|ai
operator|=
name|PolicyUtils
operator|.
name|getFirstAssertionByLocalname
argument_list|(
name|aim
argument_list|,
name|SPConstants
operator|.
name|WSS11
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ai
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|Wss10
operator|)
name|ai
operator|.
name|getAssertion
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|SecurityToken
name|getSecurityToken
parameter_list|()
block|{
name|SecurityToken
name|st
init|=
operator|(
name|SecurityToken
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|==
literal|null
condition|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getContextualProperty
argument_list|(
name|SecurityConstants
operator|.
name|TOKEN_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|st
operator|=
name|TokenStoreUtils
operator|.
name|getTokenStore
argument_list|(
name|message
argument_list|)
operator|.
name|getToken
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|st
return|;
block|}
specifier|protected
name|void
name|assertPolicy
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|PolicyUtils
operator|.
name|assertPolicy
argument_list|(
name|aim
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPolicy
parameter_list|(
name|Assertion
name|assertion
parameter_list|)
block|{
if|if
condition|(
name|assertion
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Asserting "
operator|+
name|assertion
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|AssertionInfoMap
name|aim
init|=
name|message
operator|.
name|get
argument_list|(
name|AssertionInfoMap
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ais
init|=
name|aim
operator|.
name|get
argument_list|(
name|assertion
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ais
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ais
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|getAssertion
argument_list|()
operator|==
name|assertion
condition|)
block|{
name|ai
operator|.
name|setAsserted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

