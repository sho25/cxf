begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Import
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Port
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|schema
operator|.
name|SchemaImport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|schema
operator|.
name|SchemaReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|soap
operator|.
name|SOAPAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|soap12
operator|.
name|SOAP12Address
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|xml
operator|.
name|WSDLWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|catalog
operator|.
name|OASISCatalogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|catalog
operator|.
name|OASISCatalogManagerHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|http
operator|.
name|UrlUtilities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|ResourceManagerWSDLLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|ServiceWSDLBuilder
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|WSDLGetInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|WSDLGetInterceptor
name|INSTANCE
init|=
operator|new
name|WSDLGetInterceptor
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_REWRITE_ADDRESS
init|=
literal|"autoRewriteSoapAddress"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PUBLISHED_ENDPOINT_URL
init|=
literal|"publishedEndpointUrl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WSDLS_KEY
init|=
name|WSDLGetInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".WSDLs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SCHEMAS_KEY
init|=
name|WSDLGetInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".Schemas"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WSDLGetInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|WSDLGetInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|String
name|method
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
decl_stmt|;
name|String
name|query
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|QUERY_STRING
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"GET"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
operator|||
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|query
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|baseUri
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUEST_URL
argument_list|)
decl_stmt|;
name|String
name|ctx
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PATH_INFO
argument_list|)
decl_stmt|;
comment|//cannot have two wsdl's being written for the same endpoint at the same
comment|//time as the addresses may get mixed up
synchronized|synchronized
init|(
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|UrlUtilities
operator|.
name|parseQueryString
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRecognizedQuery
argument_list|(
name|map
argument_list|,
name|baseUri
argument_list|,
name|ctx
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|Conduit
name|c
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getDestination
argument_list|()
operator|.
name|getBackChannel
argument_list|(
name|message
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Message
name|mout
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|mout
operator|.
name|setExchange
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|setOutMessage
argument_list|(
name|mout
argument_list|)
expr_stmt|;
name|mout
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/xml"
argument_list|)
expr_stmt|;
name|c
operator|.
name|prepare
argument_list|(
name|mout
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|mout
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|writeResponse
argument_list|(
name|message
argument_list|,
name|baseUri
argument_list|,
name|map
argument_list|,
name|ctx
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|setOutMessage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|isRecognizedQuery
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|String
name|baseUri
parameter_list|,
name|String
name|ctx
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"wsdl"
argument_list|)
operator|||
name|map
operator|.
name|containsKey
argument_list|(
literal|"xsd"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|writeResponse
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|base
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|String
name|ctxUri
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|,
name|OutputStream
name|os
parameter_list|)
block|{
try|try
block|{
name|Bus
name|bus
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
decl_stmt|;
name|Object
name|prop
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|PUBLISHED_ENDPOINT_URL
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
name|base
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
name|String
name|wsdl
init|=
name|params
operator|.
name|get
argument_list|(
literal|"wsdl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|wsdl
operator|!=
literal|null
condition|)
block|{
comment|// Always use the URL decoded version to ensure that we have a
comment|// canonical representation of the import URL for lookup.
name|wsdl
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|wsdl
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
block|}
name|String
name|xsd
init|=
name|params
operator|.
name|get
argument_list|(
literal|"xsd"
argument_list|)
decl_stmt|;
if|if
condition|(
name|xsd
operator|!=
literal|null
condition|)
block|{
comment|// Always use the URL decoded version to ensure that we have a
comment|// canonical representation of the import URL for lookup.
name|xsd
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|xsd
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Definition
argument_list|>
name|mp
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
operator|)
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getProperty
argument_list|(
name|WSDLS_KEY
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|smp
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
operator|)
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SCHEMAS_KEY
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mp
operator|==
literal|null
condition|)
block|{
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|setProperty
argument_list|(
name|WSDLS_KEY
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|()
argument_list|)
expr_stmt|;
name|mp
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
operator|)
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getProperty
argument_list|(
name|WSDLS_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|smp
operator|==
literal|null
condition|)
block|{
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|setProperty
argument_list|(
name|SCHEMAS_KEY
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|()
argument_list|)
expr_stmt|;
name|smp
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
operator|)
name|endpointInfo
operator|.
name|getService
argument_list|()
operator|.
name|getProperty
argument_list|(
name|SCHEMAS_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mp
operator|.
name|containsKey
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|Definition
name|def
init|=
operator|new
name|ServiceWSDLBuilder
argument_list|(
name|bus
argument_list|,
name|endpointInfo
operator|.
name|getService
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|mp
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|updateDefinition
argument_list|(
name|bus
argument_list|,
name|def
argument_list|,
name|mp
argument_list|,
name|smp
argument_list|,
name|base
argument_list|,
name|endpointInfo
argument_list|)
expr_stmt|;
block|}
name|Document
name|doc
decl_stmt|;
if|if
condition|(
name|xsd
operator|==
literal|null
condition|)
block|{
name|Definition
name|def
init|=
name|mp
operator|.
name|get
argument_list|(
name|wsdl
argument_list|)
decl_stmt|;
if|if
condition|(
name|def
operator|==
literal|null
condition|)
block|{
name|String
name|wsdl2
init|=
name|resolveWithCatalogs
argument_list|(
name|OASISCatalogManager
operator|.
name|getCatalogManager
argument_list|(
name|bus
argument_list|)
argument_list|,
name|wsdl
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|wsdl2
operator|!=
literal|null
condition|)
block|{
name|def
operator|=
name|mp
operator|.
name|get
argument_list|(
name|wsdl2
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|def
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSDLQueryException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"WSDL_NOT_FOUND"
argument_list|,
name|LOG
argument_list|,
name|wsdl
argument_list|)
argument_list|,
literal|null
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|def
init|)
block|{
comment|//writing a def is not threadsafe.  Sync on it to make sure
comment|//we don't get any ConcurrentModificationExceptions
if|if
condition|(
name|endpointInfo
operator|.
name|getProperty
argument_list|(
name|PUBLISHED_ENDPOINT_URL
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|epurl
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|endpointInfo
operator|.
name|getProperty
argument_list|(
name|PUBLISHED_ENDPOINT_URL
argument_list|)
argument_list|)
decl_stmt|;
name|updatePublishedEndpointUrl
argument_list|(
name|epurl
argument_list|,
name|def
argument_list|,
name|endpointInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|base
operator|=
name|epurl
expr_stmt|;
block|}
name|WSDLWriter
name|wsdlWriter
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
operator|.
name|getWSDLFactory
argument_list|()
operator|.
name|newWSDLWriter
argument_list|()
decl_stmt|;
name|def
operator|.
name|setExtensionRegistry
argument_list|(
name|bus
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
operator|.
name|getExtensionRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|=
name|wsdlWriter
operator|.
name|getDocument
argument_list|(
name|def
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SchemaReference
name|si
init|=
name|smp
operator|.
name|get
argument_list|(
name|xsd
argument_list|)
decl_stmt|;
if|if
condition|(
name|si
operator|==
literal|null
condition|)
block|{
name|String
name|xsd2
init|=
name|resolveWithCatalogs
argument_list|(
name|OASISCatalogManager
operator|.
name|getCatalogManager
argument_list|(
name|bus
argument_list|)
argument_list|,
name|xsd
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|xsd2
operator|!=
literal|null
condition|)
block|{
name|si
operator|=
name|smp
operator|.
name|get
argument_list|(
name|xsd2
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|si
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSDLQueryException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"SCHEMA_NOT_FOUND"
argument_list|,
name|LOG
argument_list|,
name|wsdl
argument_list|)
argument_list|,
literal|null
argument_list|)
throw|;
block|}
name|String
name|uri
init|=
name|si
operator|.
name|getReferencedSchema
argument_list|()
operator|.
name|getDocumentBaseURI
argument_list|()
decl_stmt|;
name|uri
operator|=
name|resolveWithCatalogs
argument_list|(
name|OASISCatalogManager
operator|.
name|getCatalogManager
argument_list|(
name|bus
argument_list|)
argument_list|,
name|uri
argument_list|,
name|si
operator|.
name|getReferencedSchema
argument_list|()
operator|.
name|getDocumentBaseURI
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|uri
operator|=
name|si
operator|.
name|getReferencedSchema
argument_list|()
operator|.
name|getDocumentBaseURI
argument_list|()
expr_stmt|;
block|}
name|ResourceManagerWSDLLocator
name|rml
init|=
operator|new
name|ResourceManagerWSDLLocator
argument_list|(
name|uri
argument_list|,
name|bus
argument_list|)
decl_stmt|;
name|InputSource
name|src
init|=
name|rml
operator|.
name|getBaseInputSource
argument_list|()
decl_stmt|;
name|doc
operator|=
name|XMLUtils
operator|.
name|getParser
argument_list|()
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
name|updateDoc
argument_list|(
name|doc
argument_list|,
name|base
argument_list|,
name|mp
argument_list|,
name|smp
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|String
name|enc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|enc
operator|=
name|doc
operator|.
name|getXmlEncoding
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore - not dom level 3
block|}
if|if
condition|(
name|enc
operator|==
literal|null
condition|)
block|{
name|enc
operator|=
literal|"utf-8"
expr_stmt|;
block|}
name|XMLStreamWriter
name|writer
init|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|os
argument_list|,
name|enc
argument_list|)
decl_stmt|;
name|StaxUtils
operator|.
name|writeNode
argument_list|(
name|doc
argument_list|,
name|writer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSDLQueryException
name|wex
parameter_list|)
block|{
throw|throw
name|wex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|wex
parameter_list|)
block|{
throw|throw
operator|new
name|WSDLQueryException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"COULD_NOT_PROVIDE_WSDL"
argument_list|,
name|LOG
argument_list|,
name|base
argument_list|)
argument_list|,
name|wex
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|updateDoc
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|base
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Definition
argument_list|>
name|mp
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|smp
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|elementList
init|=
literal|null
decl_stmt|;
name|Object
name|rewriteSoapAddress
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|AUTO_REWRITE_ADDRESS
argument_list|)
decl_stmt|;
try|try
block|{
name|elementList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|,
literal|"import"
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|el
range|:
name|elementList
control|)
block|{
name|String
name|sl
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"schemaLocation"
argument_list|)
decl_stmt|;
if|if
condition|(
name|smp
operator|.
name|containsKey
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|sl
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
condition|)
block|{
name|el
operator|.
name|setAttribute
argument_list|(
literal|"schemaLocation"
argument_list|,
name|base
operator|+
literal|"?xsd="
operator|+
name|sl
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"%20"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|elementList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|,
literal|"include"
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|el
range|:
name|elementList
control|)
block|{
name|String
name|sl
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"schemaLocation"
argument_list|)
decl_stmt|;
if|if
condition|(
name|smp
operator|.
name|containsKey
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|sl
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
condition|)
block|{
name|el
operator|.
name|setAttribute
argument_list|(
literal|"schemaLocation"
argument_list|,
name|base
operator|+
literal|"?xsd="
operator|+
name|sl
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"%20"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|elementList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|,
literal|"redefine"
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|el
range|:
name|elementList
control|)
block|{
name|String
name|sl
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"schemaLocation"
argument_list|)
decl_stmt|;
if|if
condition|(
name|smp
operator|.
name|containsKey
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|sl
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
condition|)
block|{
name|el
operator|.
name|setAttribute
argument_list|(
literal|"schemaLocation"
argument_list|,
name|base
operator|+
literal|"?xsd="
operator|+
name|sl
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"%20"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|elementList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/"
argument_list|,
literal|"import"
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|el
range|:
name|elementList
control|)
block|{
name|String
name|sl
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"location"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mp
operator|.
name|containsKey
argument_list|(
name|URLDecoder
operator|.
name|decode
argument_list|(
name|sl
argument_list|,
literal|"utf-8"
argument_list|)
argument_list|)
condition|)
block|{
name|el
operator|.
name|setAttribute
argument_list|(
literal|"location"
argument_list|,
name|base
operator|+
literal|"?wsdl="
operator|+
name|sl
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"%20"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSDLQueryException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"COULD_NOT_PROVIDE_WSDL"
argument_list|,
name|LOG
argument_list|,
name|base
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|rewriteSoapAddress
operator|==
literal|null
operator|||
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|rewriteSoapAddress
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|serviceList
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/"
argument_list|,
literal|"service"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|serviceEl
range|:
name|serviceList
control|)
block|{
name|String
name|serviceName
init|=
name|serviceEl
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceName
operator|.
name|equals
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|elementList
operator|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/"
argument_list|,
literal|"port"
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|el
range|:
name|elementList
control|)
block|{
name|String
name|name
init|=
name|el
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|rewriteAddress
argument_list|(
name|base
argument_list|,
name|el
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/soap/"
argument_list|)
expr_stmt|;
name|rewriteAddress
argument_list|(
name|base
argument_list|,
name|el
argument_list|,
literal|"http://schemas.xmlsoap.org/wsdl/soap12/"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
try|try
block|{
name|doc
operator|.
name|setXmlStandalone
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//likely not DOM level 3
block|}
block|}
specifier|private
name|void
name|rewriteAddress
parameter_list|(
name|String
name|base
parameter_list|,
name|Element
name|el
parameter_list|,
name|String
name|soapNS
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|sadEls
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|el
argument_list|,
name|soapNS
argument_list|,
literal|"address"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|soapAddress
range|:
name|sadEls
control|)
block|{
name|soapAddress
operator|.
name|setAttribute
argument_list|(
literal|"location"
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|String
name|resolveWithCatalogs
parameter_list|(
name|OASISCatalogManager
name|catalogs
parameter_list|,
name|String
name|start
parameter_list|,
name|String
name|base
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|OASISCatalogManagerHelper
argument_list|()
operator|.
name|resolve
argument_list|(
name|catalogs
argument_list|,
name|start
argument_list|,
name|base
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|updateDefinition
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|Definition
name|def
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Definition
argument_list|>
name|done
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|doneSchemas
parameter_list|,
name|String
name|base
parameter_list|,
name|EndpointInfo
name|ei
parameter_list|)
block|{
name|OASISCatalogManager
name|catalogs
init|=
name|OASISCatalogManager
operator|.
name|getCatalogManager
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|imports
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|def
operator|.
name|getImports
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|?
argument_list|>
name|lst
range|:
name|imports
control|)
block|{
name|List
argument_list|<
name|Import
argument_list|>
name|impLst
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|lst
argument_list|)
decl_stmt|;
for|for
control|(
name|Import
name|imp
range|:
name|impLst
control|)
block|{
name|String
name|start
init|=
name|imp
operator|.
name|getLocationURI
argument_list|()
decl_stmt|;
name|String
name|decodedStart
init|=
literal|null
decl_stmt|;
comment|// Always use the URL decoded version to ensure that we have a
comment|// canonical representation of the import URL for lookup.
try|try
block|{
name|decodedStart
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|start
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSDLQueryException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"COULD_NOT_PROVIDE_WSDL"
argument_list|,
name|LOG
argument_list|,
name|start
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|resolvedSchemaLocation
init|=
name|resolveWithCatalogs
argument_list|(
name|catalogs
argument_list|,
name|start
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedSchemaLocation
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|//check to see if it's already in a URL format.  If so, leave it.
operator|new
name|URL
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
if|if
condition|(
name|done
operator|.
name|put
argument_list|(
name|decodedStart
argument_list|,
name|imp
operator|.
name|getDefinition
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|updateDefinition
argument_list|(
name|bus
argument_list|,
name|imp
operator|.
name|getDefinition
argument_list|()
argument_list|,
name|done
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|,
name|ei
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|done
operator|.
name|put
argument_list|(
name|decodedStart
argument_list|,
name|imp
operator|.
name|getDefinition
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|done
operator|.
name|put
argument_list|(
name|resolvedSchemaLocation
argument_list|,
name|imp
operator|.
name|getDefinition
argument_list|()
argument_list|)
expr_stmt|;
name|updateDefinition
argument_list|(
name|bus
argument_list|,
name|imp
operator|.
name|getDefinition
argument_list|()
argument_list|,
name|done
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|,
name|ei
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/* This doesn't actually work.   Setting setSchemaLocationURI on the import         * for some reason doesn't actually result in the new URI being written         * */
name|Types
name|types
init|=
name|def
operator|.
name|getTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExtensibilityElement
name|el
range|:
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
operator|)
name|types
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|,
name|ExtensibilityElement
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|el
operator|instanceof
name|Schema
condition|)
block|{
name|Schema
name|see
init|=
operator|(
name|Schema
operator|)
name|el
decl_stmt|;
name|updateSchemaImports
argument_list|(
name|bus
argument_list|,
name|see
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|updatePublishedEndpointUrl
parameter_list|(
name|String
name|publishingUrl
parameter_list|,
name|Definition
name|def
parameter_list|,
name|QName
name|name
parameter_list|)
block|{
name|Collection
argument_list|<
name|Service
argument_list|>
name|services
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|def
operator|.
name|getAllServices
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Service
name|service
range|:
name|services
control|)
block|{
name|Collection
argument_list|<
name|Port
argument_list|>
name|ports
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|service
operator|.
name|getPorts
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ports
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|setSoapAddressLocationOn
argument_list|(
name|ports
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|publishingUrl
argument_list|)
expr_stmt|;
break|break;
comment|// only update the first port since we don't target any specific port
block|}
else|else
block|{
for|for
control|(
name|Port
name|port
range|:
name|ports
control|)
block|{
if|if
condition|(
name|name
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|port
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|setSoapAddressLocationOn
argument_list|(
name|port
argument_list|,
name|publishingUrl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|setSoapAddressLocationOn
parameter_list|(
name|Port
name|port
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|extensions
init|=
name|port
operator|.
name|getExtensibilityElements
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|extension
range|:
name|extensions
control|)
block|{
if|if
condition|(
name|extension
operator|instanceof
name|SOAP12Address
condition|)
block|{
operator|(
operator|(
name|SOAP12Address
operator|)
name|extension
operator|)
operator|.
name|setLocationURI
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extension
operator|instanceof
name|SOAPAddress
condition|)
block|{
operator|(
operator|(
name|SOAPAddress
operator|)
name|extension
operator|)
operator|.
name|setLocationURI
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|updateSchemaImports
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|Schema
name|schema
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SchemaReference
argument_list|>
name|doneSchemas
parameter_list|,
name|String
name|base
parameter_list|)
block|{
name|OASISCatalogManager
name|catalogs
init|=
name|OASISCatalogManager
operator|.
name|getCatalogManager
argument_list|(
name|bus
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|imports
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|schema
operator|.
name|getImports
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|?
argument_list|>
name|lst
range|:
name|imports
control|)
block|{
name|List
argument_list|<
name|SchemaImport
argument_list|>
name|impLst
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|lst
argument_list|)
decl_stmt|;
for|for
control|(
name|SchemaImport
name|imp
range|:
name|impLst
control|)
block|{
name|String
name|start
init|=
name|imp
operator|.
name|getSchemaLocationURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|!=
literal|null
condition|)
block|{
name|String
name|decodedStart
init|=
literal|null
decl_stmt|;
comment|// Always use the URL decoded version to ensure that we have a
comment|// canonical representation of the import URL for lookup.
try|try
block|{
name|decodedStart
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|start
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSDLQueryException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"COULD_NOT_PROVIDE_WSDL"
argument_list|,
name|LOG
argument_list|,
name|start
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|doneSchemas
operator|.
name|containsKey
argument_list|(
name|decodedStart
argument_list|)
condition|)
block|{
name|String
name|resolvedSchemaLocation
init|=
name|resolveWithCatalogs
argument_list|(
name|catalogs
argument_list|,
name|start
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedSchemaLocation
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|//check to see if it's already in a URL format.  If so, leave it.
operator|new
name|URL
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
if|if
condition|(
name|doneSchemas
operator|.
name|put
argument_list|(
name|decodedStart
argument_list|,
name|imp
argument_list|)
operator|==
literal|null
condition|)
block|{
name|updateSchemaImports
argument_list|(
name|bus
argument_list|,
name|imp
operator|.
name|getReferencedSchema
argument_list|()
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|doneSchemas
operator|.
name|put
argument_list|(
name|decodedStart
argument_list|,
name|imp
argument_list|)
operator|==
literal|null
condition|)
block|{
name|doneSchemas
operator|.
name|put
argument_list|(
name|resolvedSchemaLocation
argument_list|,
name|imp
argument_list|)
expr_stmt|;
name|updateSchemaImports
argument_list|(
name|bus
argument_list|,
name|imp
operator|.
name|getReferencedSchema
argument_list|()
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|SchemaReference
argument_list|>
name|includes
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|schema
operator|.
name|getIncludes
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SchemaReference
name|included
range|:
name|includes
control|)
block|{
name|String
name|start
init|=
name|included
operator|.
name|getSchemaLocationURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|!=
literal|null
condition|)
block|{
name|String
name|decodedStart
init|=
literal|null
decl_stmt|;
comment|// Always use the URL decoded version to ensure that we have a
comment|// canonical representation of the import URL for lookup.
try|try
block|{
name|decodedStart
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|start
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSDLQueryException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"COULD_NOT_PROVIDE_WSDL"
argument_list|,
name|LOG
argument_list|,
name|start
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|resolvedSchemaLocation
init|=
name|resolveWithCatalogs
argument_list|(
name|catalogs
argument_list|,
name|start
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedSchemaLocation
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|doneSchemas
operator|.
name|containsKey
argument_list|(
name|decodedStart
argument_list|)
condition|)
block|{
try|try
block|{
comment|//check to see if it's aleady in a URL format.  If so, leave it.
operator|new
name|URL
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
if|if
condition|(
name|doneSchemas
operator|.
name|put
argument_list|(
name|decodedStart
argument_list|,
name|included
argument_list|)
operator|==
literal|null
condition|)
block|{
name|updateSchemaImports
argument_list|(
name|bus
argument_list|,
name|included
operator|.
name|getReferencedSchema
argument_list|()
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|doneSchemas
operator|.
name|containsKey
argument_list|(
name|decodedStart
argument_list|)
operator|||
operator|!
name|doneSchemas
operator|.
name|containsKey
argument_list|(
name|resolvedSchemaLocation
argument_list|)
condition|)
block|{
name|doneSchemas
operator|.
name|put
argument_list|(
name|decodedStart
argument_list|,
name|included
argument_list|)
expr_stmt|;
name|doneSchemas
operator|.
name|put
argument_list|(
name|resolvedSchemaLocation
argument_list|,
name|included
argument_list|)
expr_stmt|;
name|updateSchemaImports
argument_list|(
name|bus
argument_list|,
name|included
operator|.
name|getReferencedSchema
argument_list|()
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|SchemaReference
argument_list|>
name|redefines
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|schema
operator|.
name|getRedefines
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SchemaReference
name|included
range|:
name|redefines
control|)
block|{
name|String
name|start
init|=
name|included
operator|.
name|getSchemaLocationURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|!=
literal|null
condition|)
block|{
name|String
name|decodedStart
init|=
literal|null
decl_stmt|;
comment|// Always use the URL decoded version to ensure that we have a
comment|// canonical representation of the import URL for lookup.
try|try
block|{
name|decodedStart
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|start
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WSDLQueryException
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"COULD_NOT_PROVIDE_WSDL"
argument_list|,
name|LOG
argument_list|,
name|start
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|resolvedSchemaLocation
init|=
name|resolveWithCatalogs
argument_list|(
name|catalogs
argument_list|,
name|start
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|resolvedSchemaLocation
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|doneSchemas
operator|.
name|containsKey
argument_list|(
name|decodedStart
argument_list|)
condition|)
block|{
try|try
block|{
comment|//check to see if it's aleady in a URL format.  If so, leave it.
operator|new
name|URL
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
if|if
condition|(
name|doneSchemas
operator|.
name|put
argument_list|(
name|decodedStart
argument_list|,
name|included
argument_list|)
operator|==
literal|null
condition|)
block|{
name|updateSchemaImports
argument_list|(
name|bus
argument_list|,
name|included
operator|.
name|getReferencedSchema
argument_list|()
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|doneSchemas
operator|.
name|containsKey
argument_list|(
name|decodedStart
argument_list|)
operator|||
operator|!
name|doneSchemas
operator|.
name|containsKey
argument_list|(
name|resolvedSchemaLocation
argument_list|)
condition|)
block|{
name|doneSchemas
operator|.
name|put
argument_list|(
name|decodedStart
argument_list|,
name|included
argument_list|)
expr_stmt|;
name|doneSchemas
operator|.
name|put
argument_list|(
name|resolvedSchemaLocation
argument_list|,
name|included
argument_list|)
expr_stmt|;
name|updateSchemaImports
argument_list|(
name|bus
argument_list|,
name|included
operator|.
name|getReferencedSchema
argument_list|()
argument_list|,
name|doneSchemas
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

