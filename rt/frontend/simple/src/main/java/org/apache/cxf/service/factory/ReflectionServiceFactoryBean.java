begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttachmentRef
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlMimeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|XmlJavaTypeAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|BindingFactoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|catalog
operator|.
name|CatalogXmlSchemaURIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|FailoverFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|XmlSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|source
operator|.
name|mime
operator|.
name|MimeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|source
operator|.
name|mime
operator|.
name|MimeSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServiceContractResolverRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|AbstractFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|FaultInfoException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|MethodDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|SimpleMethodDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|MethodComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|FaultOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|ServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|ServiceModelSchemaValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
operator|.
name|FactoryInvoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
operator|.
name|Invoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
operator|.
name|SingletonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|AbstractMessageContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|SchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|UnwrappedOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObjectTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|constants
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|utils
operator|.
name|NamespaceMap
import|;
end_import

begin_comment
comment|/**  * Introspects a class and builds a {@link Service} from it. If a WSDL URL is  * specified, a Service model will be directly from the WSDL and then metadata  * will be filled in from the service class. If no WSDL URL is specified, the  * Service will be constructed directly from the class structure.  */
end_comment

begin_class
specifier|public
class|class
name|ReflectionServiceFactoryBean
extends|extends
name|AbstractServiceFactoryBean
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ENDPOINT_CLASS
init|=
literal|"endpoint.class"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|GENERIC_TYPE
init|=
literal|"generic.type"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RAW_CLASS
init|=
literal|"rawclass"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WRAPPERGEN_NEEDED
init|=
literal|"wrapper.gen.needed"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXTRA_CLASS
init|=
literal|"extra.class"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MODE_OUT
init|=
literal|"messagepart.mode.out"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MODE_INOUT
init|=
literal|"messagepart.mode.inout"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HOLDER
init|=
literal|"messagepart.isholder"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HEADER
init|=
literal|"messagepart.isheader"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ELEMENT_NAME
init|=
literal|"messagepart.elementName"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|METHOD
init|=
literal|"operation.method"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|METHOD_PARAM_ANNOTATIONS
init|=
literal|"method.parameters.annotations"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|METHOD_ANNOTATIONS
init|=
literal|"method.return.annotations"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARAM_ANNOTATION
init|=
literal|"parameter.annotations"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ReflectionServiceFactoryBean
operator|.
name|class
argument_list|,
literal|"SimpleMessages"
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|wsdlURL
decl_stmt|;
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|serviceClass
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schemaLocationMapping
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AbstractServiceConfiguration
argument_list|>
name|serviceConfigurations
init|=
operator|new
name|ArrayList
argument_list|<
name|AbstractServiceConfiguration
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|QName
name|serviceName
decl_stmt|;
specifier|private
name|Invoker
name|invoker
decl_stmt|;
specifier|private
name|Executor
name|executor
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|ignoredClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Method
argument_list|>
name|ignoredMethods
init|=
operator|new
name|ArrayList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|MethodDispatcher
name|methodDispatcher
init|=
operator|new
name|SimpleMethodDispatcher
argument_list|()
decl_stmt|;
specifier|private
name|Boolean
name|wrappedStyle
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
specifier|private
name|QName
name|endpointName
decl_stmt|;
specifier|private
name|boolean
name|populateFromClass
decl_stmt|;
specifier|private
name|boolean
name|anonymousWrappers
decl_stmt|;
specifier|private
name|boolean
name|qualifiedSchemas
init|=
literal|true
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AbstractFeature
argument_list|>
name|features
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Method
argument_list|,
name|Boolean
argument_list|>
name|wrappedCache
init|=
operator|new
name|HashMap
argument_list|<
name|Method
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Method
argument_list|,
name|Boolean
argument_list|>
name|isRpcCache
init|=
operator|new
name|HashMap
argument_list|<
name|Method
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|styleCache
decl_stmt|;
specifier|private
name|Boolean
name|defWrappedCache
decl_stmt|;
specifier|public
name|ReflectionServiceFactoryBean
parameter_list|()
block|{
name|getServiceConfigurations
argument_list|()
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|DefaultServiceConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|ignoredClasses
operator|.
name|add
argument_list|(
literal|"java.lang.Object"
argument_list|)
expr_stmt|;
name|ignoredClasses
operator|.
name|add
argument_list|(
literal|"java.lang.Throwable"
argument_list|)
expr_stmt|;
name|ignoredClasses
operator|.
name|add
argument_list|(
literal|"org.omg.CORBA_2_3.portable.ObjectImpl"
argument_list|)
expr_stmt|;
name|ignoredClasses
operator|.
name|add
argument_list|(
literal|"org.omg.CORBA.portable.ObjectImpl"
argument_list|)
expr_stmt|;
name|ignoredClasses
operator|.
name|add
argument_list|(
literal|"javax.ejb.EJBObject"
argument_list|)
expr_stmt|;
name|ignoredClasses
operator|.
name|add
argument_list|(
literal|"javax.rmi.CORBA.Stub"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DataBinding
name|createDefaultDataBinding
parameter_list|()
block|{
return|return
operator|new
name|JAXBDataBinding
argument_list|(
name|getQualifyWrapperSchema
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Service
name|create
parameter_list|()
block|{
name|initializeServiceConfigurations
argument_list|()
expr_stmt|;
name|initializeServiceModel
argument_list|()
expr_stmt|;
name|initializeDefaultInterceptors
argument_list|()
expr_stmt|;
if|if
condition|(
name|invoker
operator|!=
literal|null
condition|)
block|{
name|getService
argument_list|()
operator|.
name|setInvoker
argument_list|(
name|getInvoker
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getService
argument_list|()
operator|.
name|setInvoker
argument_list|(
name|createInvoker
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getExecutor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getService
argument_list|()
operator|.
name|setExecutor
argument_list|(
name|getExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDataBinding
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getService
argument_list|()
operator|.
name|setDataBinding
argument_list|(
name|getDataBinding
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getService
argument_list|()
operator|.
name|put
argument_list|(
name|MethodDispatcher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|getMethodDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|createEndpoints
argument_list|()
expr_stmt|;
name|fillInSchemaCrossreferences
argument_list|()
expr_stmt|;
return|return
name|getService
argument_list|()
return|;
block|}
comment|/**      * Code elsewhere in this function will fill in the name of the type of an      * element but not the reference to the type. This function fills in the      * type references. This does not set the type reference for elements that      * are declared as refs to other elements. It is a giant pain to find them,      * since they are not (generally) root elements and the code would have to      * traverse all the types to find all of them. Users should look them up      * through the collection, that's what it is for.      */
specifier|private
name|void
name|fillInSchemaCrossreferences
parameter_list|()
block|{
name|Service
name|service
init|=
name|getService
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceInfo
name|serviceInfo
range|:
name|service
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
name|SchemaCollection
name|schemaCollection
init|=
name|serviceInfo
operator|.
name|getXmlSchemaCollection
argument_list|()
decl_stmt|;
comment|// First pass, fill in any types for which we have a name but no
comment|// type.
for|for
control|(
name|SchemaInfo
name|schemaInfo
range|:
name|serviceInfo
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|XmlSchemaObjectTable
name|elementsTable
init|=
name|schemaInfo
operator|.
name|getSchema
argument_list|()
operator|.
name|getElements
argument_list|()
decl_stmt|;
name|Iterator
name|elementsIterator
init|=
name|elementsTable
operator|.
name|getNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|elementsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QName
name|elementName
init|=
operator|(
name|QName
operator|)
name|elementsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|XmlSchemaElement
name|element
init|=
name|schemaInfo
operator|.
name|getSchema
argument_list|()
operator|.
name|getElementByName
argument_list|(
name|elementName
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|getSchemaType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|QName
name|typeName
init|=
name|element
operator|.
name|getSchemaTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeName
operator|!=
literal|null
condition|)
block|{
name|XmlSchemaType
name|type
init|=
name|schemaCollection
operator|.
name|getTypeByQName
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|"REFERENCE_TO_UNDEFINED_TYPE"
argument_list|,
name|LOG
argument_list|,
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|typeName
argument_list|,
name|service
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|element
operator|.
name|setSchemaType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|createEndpoints
parameter_list|()
block|{
name|Service
name|service
init|=
name|getService
argument_list|()
decl_stmt|;
name|BindingFactoryManager
name|bfm
init|=
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|BindingFactoryManager
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ServiceInfo
name|inf
range|:
name|service
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
for|for
control|(
name|EndpointInfo
name|ei
range|:
name|inf
operator|.
name|getEndpoints
argument_list|()
control|)
block|{
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|ei
operator|.
name|getBinding
argument_list|()
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|updateBindingOperation
argument_list|(
name|boi
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|bfm
operator|.
name|getBindingFactory
argument_list|(
name|ei
operator|.
name|getBinding
argument_list|()
operator|.
name|getBindingId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BusException
name|e1
parameter_list|)
block|{
continue|continue;
block|}
try|try
block|{
name|Endpoint
name|ep
init|=
name|createEndpoint
argument_list|(
name|ei
argument_list|)
decl_stmt|;
name|service
operator|.
name|getEndpoints
argument_list|()
operator|.
name|put
argument_list|(
name|ei
operator|.
name|getName
argument_list|()
argument_list|,
name|ep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EndpointException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|updateBindingOperation
parameter_list|(
name|BindingOperationInfo
name|boi
parameter_list|)
block|{
comment|//nothing
block|}
specifier|public
name|Endpoint
name|createEndpoint
parameter_list|(
name|EndpointInfo
name|ei
parameter_list|)
throws|throws
name|EndpointException
block|{
return|return
operator|new
name|EndpointImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|getService
argument_list|()
argument_list|,
name|ei
argument_list|)
return|;
block|}
specifier|protected
name|void
name|initializeServiceConfigurations
parameter_list|()
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|c
operator|.
name|setServiceFactory
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setServiceProperties
parameter_list|()
block|{
name|getService
argument_list|()
operator|.
name|put
argument_list|(
name|MethodDispatcher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|getMethodDispatcher
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|getService
argument_list|()
operator|.
name|putAll
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|buildServiceFromWSDL
parameter_list|(
name|String
name|url
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating Service "
operator|+
name|getServiceQName
argument_list|()
operator|+
literal|" from WSDL: "
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
name|populateFromClass
operator|=
literal|false
expr_stmt|;
name|WSDLServiceFactory
name|factory
init|=
operator|new
name|WSDLServiceFactory
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|url
argument_list|,
name|getServiceQName
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|setEPName
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|features
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AbstractFeature
name|f
range|:
name|features
control|)
block|{
if|if
condition|(
name|f
operator|instanceof
name|FailoverFeature
condition|)
block|{
name|setEPName
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|setEPName
condition|)
block|{
name|factory
operator|.
name|setEndpointName
argument_list|(
name|getEndpointName
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setService
argument_list|(
name|factory
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|setServiceProperties
argument_list|()
expr_stmt|;
name|initializeWSDLOperations
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|cls
init|=
name|getExtraClass
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceInfo
name|si
range|:
name|getService
argument_list|()
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
if|if
condition|(
name|cls
operator|!=
literal|null
operator|&&
operator|!
name|cls
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|si
operator|.
name|setProperty
argument_list|(
name|EXTRA_CLASS
argument_list|,
name|cls
argument_list|)
expr_stmt|;
block|}
block|}
name|getDataBinding
argument_list|()
operator|.
name|initialize
argument_list|(
name|getService
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|buildServiceFromClass
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating Service "
operator|+
name|getServiceQName
argument_list|()
operator|+
literal|" from class "
operator|+
name|getServiceClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|populateFromClass
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|Proxy
operator|.
name|isProxyClass
argument_list|(
name|this
operator|.
name|getServiceClass
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"USING_PROXY_FOR_SERVICE"
argument_list|,
name|getServiceClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ServiceInfo
name|serviceInfo
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|SchemaCollection
name|col
init|=
name|serviceInfo
operator|.
name|getXmlSchemaCollection
argument_list|()
decl_stmt|;
name|col
operator|.
name|getXmlSchemaCollection
argument_list|()
operator|.
name|setSchemaResolver
argument_list|(
operator|new
name|CatalogXmlSchemaURIResolver
argument_list|(
name|this
operator|.
name|getBus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|col
operator|.
name|getExtReg
argument_list|()
operator|.
name|registerSerializer
argument_list|(
name|MimeAttribute
operator|.
name|class
argument_list|,
operator|new
name|MimeSerializer
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceImpl
name|service
init|=
operator|new
name|ServiceImpl
argument_list|(
name|serviceInfo
argument_list|)
decl_stmt|;
name|setService
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|setServiceProperties
argument_list|()
expr_stmt|;
name|serviceInfo
operator|.
name|setName
argument_list|(
name|getServiceQName
argument_list|()
argument_list|)
expr_stmt|;
name|serviceInfo
operator|.
name|setTargetNamespace
argument_list|(
name|serviceInfo
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|createInterface
argument_list|(
name|serviceInfo
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
argument_list|>
name|wrapperClasses
init|=
name|this
operator|.
name|getExtraClass
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceInfo
name|si
range|:
name|getService
argument_list|()
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
if|if
condition|(
name|wrapperClasses
operator|!=
literal|null
operator|&&
operator|!
name|wrapperClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|si
operator|.
name|setProperty
argument_list|(
name|EXTRA_CLASS
argument_list|,
name|wrapperClasses
argument_list|)
expr_stmt|;
block|}
block|}
name|getDataBinding
argument_list|()
operator|.
name|initialize
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|boolean
name|isWrapped
init|=
name|isWrapped
argument_list|()
decl_stmt|;
if|if
condition|(
name|isWrapped
condition|)
block|{
name|initializeWrappedSchema
argument_list|(
name|serviceInfo
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|OperationInfo
name|opInfo
range|:
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|Method
name|m
init|=
operator|(
name|Method
operator|)
name|opInfo
operator|.
name|getProperty
argument_list|(
name|METHOD
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isWrapped
argument_list|(
name|m
argument_list|)
operator|&&
operator|!
name|isRPC
argument_list|(
name|m
argument_list|)
operator|&&
name|opInfo
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|createBareMessage
argument_list|(
name|serviceInfo
argument_list|,
name|opInfo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isWrapped
argument_list|(
name|m
argument_list|)
operator|&&
operator|!
name|isRPC
argument_list|(
name|m
argument_list|)
operator|&&
name|opInfo
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|createBareMessage
argument_list|(
name|serviceInfo
argument_list|,
name|opInfo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opInfo
operator|.
name|hasFaults
argument_list|()
condition|)
block|{
comment|// check to make sure the faults are elements
for|for
control|(
name|FaultInfo
name|fault
range|:
name|opInfo
operator|.
name|getFaults
argument_list|()
control|)
block|{
name|QName
name|qn
init|=
operator|(
name|QName
operator|)
name|fault
operator|.
name|getProperty
argument_list|(
literal|"elementName"
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
name|fault
operator|.
name|getMessagePart
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|part
operator|.
name|isElement
argument_list|()
condition|)
block|{
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementQName
argument_list|(
name|qn
argument_list|)
expr_stmt|;
name|checkForElement
argument_list|(
name|serviceInfo
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|ServiceModelSchemaValidator
name|validator
init|=
operator|new
name|ServiceModelSchemaValidator
argument_list|(
name|serviceInfo
argument_list|)
decl_stmt|;
name|validator
operator|.
name|walk
argument_list|()
expr_stmt|;
name|String
name|validationComplaints
init|=
name|validator
operator|.
name|getComplaints
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|validationComplaints
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
name|validationComplaints
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|isFromWsdl
parameter_list|()
block|{
return|return
operator|!
name|populateFromClass
operator|&&
name|getWsdlURL
argument_list|()
operator|!=
literal|null
return|;
block|}
specifier|protected
name|void
name|initializeServiceModel
parameter_list|()
block|{
name|String
name|wsdlurl
init|=
name|getWsdlURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFromWsdl
argument_list|()
condition|)
block|{
name|buildServiceFromWSDL
argument_list|(
name|wsdlurl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buildServiceFromClass
argument_list|()
expr_stmt|;
block|}
comment|// validateServiceModel();
block|}
specifier|public
name|void
name|validateServiceModel
parameter_list|()
block|{
for|for
control|(
name|ServiceInfo
name|si
range|:
name|getService
argument_list|()
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
for|for
control|(
name|OperationInfo
name|opInfo
range|:
name|si
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperations
argument_list|()
control|)
block|{
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|opInfo
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
assert|assert
name|mpi
operator|.
name|getXmlSchema
argument_list|()
operator|!=
literal|null
assert|;
if|if
condition|(
name|mpi
operator|.
name|isElement
argument_list|()
condition|)
block|{
assert|assert
name|mpi
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
assert|;
block|}
else|else
block|{
assert|assert
operator|!
operator|(
name|mpi
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
operator|)
assert|;
block|}
block|}
if|if
condition|(
name|opInfo
operator|.
name|hasOutput
argument_list|()
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|opInfo
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
assert|assert
name|mpi
operator|.
name|getXmlSchema
argument_list|()
operator|!=
literal|null
assert|;
if|if
condition|(
name|mpi
operator|.
name|isElement
argument_list|()
condition|)
block|{
assert|assert
name|mpi
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
assert|;
block|}
else|else
block|{
assert|assert
operator|!
operator|(
name|mpi
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
operator|)
assert|;
block|}
block|}
block|}
if|if
condition|(
name|opInfo
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
name|opInfo
operator|=
name|opInfo
operator|.
name|getUnwrappedOperation
argument_list|()
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|opInfo
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
assert|assert
name|mpi
operator|.
name|getXmlSchema
argument_list|()
operator|!=
literal|null
assert|;
if|if
condition|(
name|mpi
operator|.
name|isElement
argument_list|()
condition|)
block|{
assert|assert
name|mpi
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
assert|;
block|}
else|else
block|{
assert|assert
operator|!
operator|(
name|mpi
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
operator|)
assert|;
block|}
block|}
if|if
condition|(
name|opInfo
operator|.
name|hasOutput
argument_list|()
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|opInfo
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
assert|assert
name|mpi
operator|.
name|getXmlSchema
argument_list|()
operator|!=
literal|null
assert|;
if|if
condition|(
name|mpi
operator|.
name|isElement
argument_list|()
condition|)
block|{
assert|assert
name|mpi
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
assert|;
block|}
else|else
block|{
assert|assert
operator|!
operator|(
name|mpi
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
operator|)
assert|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|opInfo
operator|.
name|hasFaults
argument_list|()
condition|)
block|{
comment|// check to make sure the faults are elements
for|for
control|(
name|FaultInfo
name|fault
range|:
name|opInfo
operator|.
name|getFaults
argument_list|()
control|)
block|{
name|MessagePartInfo
name|mpi
init|=
name|fault
operator|.
name|getMessagePart
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
name|mpi
operator|!=
literal|null
assert|;
assert|assert
name|mpi
operator|.
name|getXmlSchema
argument_list|()
operator|!=
literal|null
assert|;
assert|assert
name|mpi
operator|.
name|isElement
argument_list|()
assert|;
assert|assert
name|mpi
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaElement
assert|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|isPopulateFromClass
parameter_list|()
block|{
return|return
name|populateFromClass
return|;
block|}
specifier|public
name|void
name|setPopulateFromClass
parameter_list|(
name|boolean
name|fomClass
parameter_list|)
block|{
name|this
operator|.
name|populateFromClass
operator|=
name|fomClass
expr_stmt|;
block|}
specifier|protected
name|InterfaceInfo
name|getInterfaceInfo
parameter_list|()
block|{
if|if
condition|(
name|getEndpointInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getEndpointInfo
argument_list|()
operator|.
name|getInterface
argument_list|()
return|;
block|}
name|QName
name|qn
init|=
name|this
operator|.
name|getInterfaceName
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceInfo
name|si
range|:
name|getService
argument_list|()
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
if|if
condition|(
name|qn
operator|.
name|equals
argument_list|(
name|si
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|si
operator|.
name|getInterface
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"COULD_NOT_FIND_PORTTYPE"
argument_list|,
name|LOG
argument_list|,
name|qn
argument_list|)
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|initializeWSDLOperations
parameter_list|()
block|{
name|List
argument_list|<
name|OperationInfo
argument_list|>
name|removes
init|=
operator|new
name|ArrayList
argument_list|<
name|OperationInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Method
index|[]
name|methods
init|=
name|serviceClass
operator|.
name|getMethods
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|methods
argument_list|,
operator|new
name|MethodComparator
argument_list|()
argument_list|)
expr_stmt|;
name|InterfaceInfo
name|intf
init|=
name|getInterfaceInfo
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|QName
argument_list|,
name|Method
argument_list|>
name|validMethods
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Method
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|methods
control|)
block|{
if|if
condition|(
name|isValidMethod
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|QName
name|opName
init|=
name|getOperationName
argument_list|(
name|intf
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|validMethods
operator|.
name|put
argument_list|(
name|opName
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|OperationInfo
name|o
range|:
name|intf
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|Method
name|selected
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|QName
argument_list|,
name|Method
argument_list|>
name|m
range|:
name|validMethods
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|QName
name|opName
init|=
name|m
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|opName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|isMatchOperation
argument_list|(
name|o
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|opName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|selected
operator|=
name|m
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|selected
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"NO_METHOD_FOR_OP"
argument_list|,
name|o
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|removes
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|initializeWSDLOperation
argument_list|(
name|intf
argument_list|,
name|o
argument_list|,
name|selected
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|OperationInfo
name|op
range|:
name|removes
control|)
block|{
name|intf
operator|.
name|removeOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
comment|// Some of the operations may have switched from unwrapped to wrapped.
comment|// Update the bindings.
for|for
control|(
name|ServiceInfo
name|service
range|:
name|getService
argument_list|()
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
for|for
control|(
name|BindingInfo
name|bi
range|:
name|service
operator|.
name|getBindings
argument_list|()
control|)
block|{
name|List
argument_list|<
name|BindingOperationInfo
argument_list|>
name|biremoves
init|=
operator|new
name|ArrayList
argument_list|<
name|BindingOperationInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BindingOperationInfo
name|binfo
range|:
name|bi
operator|.
name|getOperations
argument_list|()
control|)
block|{
if|if
condition|(
name|removes
operator|.
name|contains
argument_list|(
name|binfo
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
condition|)
block|{
name|biremoves
operator|.
name|add
argument_list|(
name|binfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|binfo
operator|.
name|updateUnwrappedOperation
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|BindingOperationInfo
name|binfo
range|:
name|biremoves
control|)
block|{
name|bi
operator|.
name|removeOperation
argument_list|(
name|binfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|initializeWSDLOperation
parameter_list|(
name|InterfaceInfo
name|intf
parameter_list|,
name|OperationInfo
name|o
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
comment|// rpc out-message-part-info class mapping
name|Operation
name|op
init|=
operator|(
name|Operation
operator|)
name|o
operator|.
name|getProperty
argument_list|(
name|WSDLServiceBuilder
operator|.
name|WSDL_OPERATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|initializeClassInfo
argument_list|(
name|o
argument_list|,
name|method
argument_list|,
name|op
operator|==
literal|null
condition|?
literal|null
else|:
name|CastUtils
operator|.
name|cast
argument_list|(
name|op
operator|.
name|getParameterOrdering
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
name|bindOperation
argument_list|(
name|o
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|o
operator|.
name|setProperty
argument_list|(
name|ReflectionServiceFactoryBean
operator|.
name|METHOD
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"NO_METHOD_FOR_OP"
argument_list|,
name|o
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * set the holder generic type info into message part info      *      * @param o      * @param method      */
specifier|protected
name|boolean
name|initializeClassInfo
parameter_list|(
name|OperationInfo
name|o
parameter_list|,
name|Method
name|method
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|paramOrder
parameter_list|)
block|{
if|if
condition|(
name|isWrapped
argument_list|(
name|method
argument_list|)
condition|)
block|{
if|if
condition|(
name|o
operator|.
name|getUnwrappedOperation
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//the "normal" algorithm didn't allow for unwrapping,
comment|//but the annotations say unwrap this.   We'll need to
comment|//make it.
name|WSDLServiceBuilder
operator|.
name|checkForWrapped
argument_list|(
name|o
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|.
name|hasInput
argument_list|()
condition|)
block|{
name|MessageInfo
name|input
init|=
name|o
operator|.
name|getInput
argument_list|()
decl_stmt|;
name|MessagePartInfo
name|part
init|=
name|input
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|part
operator|.
name|setTypeClass
argument_list|(
name|getRequestWrapper
argument_list|(
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|part
operator|.
name|setProperty
argument_list|(
literal|"REQUEST.WRAPPER.CLASSNAME"
argument_list|,
name|getRequestWrapperClassName
argument_list|(
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|part
operator|.
name|setIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|.
name|hasOutput
argument_list|()
condition|)
block|{
name|MessageInfo
name|input
init|=
name|o
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|MessagePartInfo
name|part
init|=
name|input
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|part
operator|.
name|setTypeClass
argument_list|(
name|getResponseWrapper
argument_list|(
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|part
operator|.
name|setProperty
argument_list|(
literal|"RESPONSE.WRAPPER.CLASSNAME"
argument_list|,
name|getResponseWrapperClassName
argument_list|(
name|method
argument_list|)
argument_list|)
expr_stmt|;
name|part
operator|.
name|setIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|setFaultClassInfo
argument_list|(
name|o
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|o
operator|=
name|o
operator|.
name|getUnwrappedOperation
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
comment|// remove the unwrapped operation because it will break the
comment|// the WrapperClassOutInterceptor, and in general makes
comment|// life more confusing
name|o
operator|.
name|setUnwrappedOperation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setFaultClassInfo
argument_list|(
name|o
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
name|o
operator|.
name|setProperty
argument_list|(
name|METHOD_PARAM_ANNOTATIONS
argument_list|,
name|method
operator|.
name|getParameterAnnotations
argument_list|()
argument_list|)
expr_stmt|;
name|o
operator|.
name|setProperty
argument_list|(
name|METHOD_ANNOTATIONS
argument_list|,
name|method
operator|.
name|getAnnotations
argument_list|()
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|paramTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|Type
index|[]
name|genericTypes
init|=
name|method
operator|.
name|getGenericParameterTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paramTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Exchange
operator|.
name|class
operator|.
name|equals
argument_list|(
name|paramTypes
index|[
name|i
index|]
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Class
name|paramType
init|=
name|paramTypes
index|[
name|i
index|]
decl_stmt|;
name|Type
name|genericType
init|=
name|genericTypes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|initializeParameter
argument_list|(
name|o
argument_list|,
name|method
argument_list|,
name|i
argument_list|,
name|paramType
argument_list|,
name|genericType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Initialize return type
name|Class
name|paramType
init|=
name|method
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|Type
name|genericType
init|=
name|method
operator|.
name|getGenericReturnType
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|.
name|hasOutput
argument_list|()
operator|&&
operator|!
name|initializeParameter
argument_list|(
name|o
argument_list|,
name|method
argument_list|,
operator|-
literal|1
argument_list|,
name|paramType
argument_list|,
name|genericType
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|setFaultClassInfo
argument_list|(
name|o
argument_list|,
name|method
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|initializeParameter
parameter_list|(
name|OperationInfo
name|o
parameter_list|,
name|Method
name|method
parameter_list|,
name|int
name|i
parameter_list|,
name|Class
name|paramType
parameter_list|,
name|Type
name|genericType
parameter_list|)
block|{
name|boolean
name|isIn
init|=
name|isInParam
argument_list|(
name|method
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|boolean
name|isOut
init|=
name|isOutParam
argument_list|(
name|method
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|Annotation
index|[]
name|paraAnnos
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
operator|&&
name|o
operator|.
name|getProperty
argument_list|(
name|METHOD_PARAM_ANNOTATIONS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Annotation
index|[]
index|[]
name|anns
init|=
operator|(
name|Annotation
index|[]
index|[]
operator|)
name|o
operator|.
name|getProperty
argument_list|(
name|METHOD_PARAM_ANNOTATIONS
argument_list|)
decl_stmt|;
name|paraAnnos
operator|=
name|anns
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
operator|-
literal|1
operator|&&
name|o
operator|.
name|getProperty
argument_list|(
name|METHOD_ANNOTATIONS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|paraAnnos
operator|=
operator|(
name|Annotation
index|[]
operator|)
name|o
operator|.
name|getProperty
argument_list|(
name|METHOD_ANNOTATIONS
argument_list|)
expr_stmt|;
block|}
name|MessagePartInfo
name|part
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isIn
operator|&&
operator|!
name|isOut
condition|)
block|{
name|QName
name|name
init|=
name|getInPartName
argument_list|(
name|o
argument_list|,
name|method
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|part
operator|=
name|o
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePart
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
operator|&&
name|isFromWsdl
argument_list|()
condition|)
block|{
name|part
operator|=
name|o
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|initializeParameter
argument_list|(
name|part
argument_list|,
name|paramType
argument_list|,
name|genericType
argument_list|)
expr_stmt|;
name|part
operator|.
name|setIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isIn
operator|&&
name|isOut
condition|)
block|{
name|QName
name|name
init|=
name|getOutPartName
argument_list|(
name|o
argument_list|,
name|method
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|part
operator|=
name|o
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessagePart
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
operator|&&
name|isFromWsdl
argument_list|()
condition|)
block|{
name|part
operator|=
name|o
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|part
operator|.
name|setProperty
argument_list|(
name|ReflectionServiceFactoryBean
operator|.
name|MODE_OUT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|initializeParameter
argument_list|(
name|part
argument_list|,
name|paramType
argument_list|,
name|genericType
argument_list|)
expr_stmt|;
name|part
operator|.
name|setIndex
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isIn
operator|&&
name|isOut
condition|)
block|{
name|QName
name|name
init|=
name|getInPartName
argument_list|(
name|o
argument_list|,
name|method
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|part
operator|=
name|o
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePart
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
operator|&&
name|this
operator|.
name|isFromWsdl
argument_list|()
condition|)
block|{
name|part
operator|=
name|o
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|part
operator|.
name|setProperty
argument_list|(
name|ReflectionServiceFactoryBean
operator|.
name|MODE_INOUT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|initializeParameter
argument_list|(
name|part
argument_list|,
name|paramType
argument_list|,
name|genericType
argument_list|)
expr_stmt|;
name|part
operator|.
name|setIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|part
operator|=
name|o
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessagePart
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|part
operator|.
name|setProperty
argument_list|(
name|ReflectionServiceFactoryBean
operator|.
name|MODE_INOUT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|initializeParameter
argument_list|(
name|part
argument_list|,
name|paramType
argument_list|,
name|genericType
argument_list|)
expr_stmt|;
name|part
operator|.
name|setIndex
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|paraAnnos
operator|!=
literal|null
operator|&&
name|part
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|setProperty
argument_list|(
name|PARAM_ANNOTATION
argument_list|,
name|paraAnnos
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|setFaultClassInfo
parameter_list|(
name|OperationInfo
name|o
parameter_list|,
name|Method
name|selected
parameter_list|)
block|{
name|Class
index|[]
name|types
init|=
name|selected
operator|.
name|getExceptionTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
name|exClass
init|=
name|types
index|[
name|i
index|]
decl_stmt|;
name|Class
name|beanClass
init|=
name|getBeanClass
argument_list|(
name|exClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanClass
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|QName
name|name
init|=
name|getFaultName
argument_list|(
name|o
operator|.
name|getInterface
argument_list|()
argument_list|,
name|o
argument_list|,
name|exClass
argument_list|,
name|beanClass
argument_list|)
decl_stmt|;
for|for
control|(
name|FaultInfo
name|fi
range|:
name|o
operator|.
name|getFaults
argument_list|()
control|)
block|{
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|fi
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|String
name|ns
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mpi
operator|.
name|isElement
argument_list|()
condition|)
block|{
name|ns
operator|=
name|mpi
operator|.
name|getElementQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ns
operator|=
name|mpi
operator|.
name|getTypeQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mpi
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|&&
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|fi
operator|.
name|setProperty
argument_list|(
name|Class
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|exClass
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setTypeClass
argument_list|(
name|beanClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|Invoker
name|createInvoker
parameter_list|()
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|getServiceClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|cls
operator|.
name|isInterface
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|FactoryInvoker
argument_list|(
operator|new
name|SingletonFactory
argument_list|(
name|getServiceClass
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|ServiceInfo
name|createServiceInfo
parameter_list|(
name|InterfaceInfo
name|intf
parameter_list|)
block|{
name|ServiceInfo
name|svcInfo
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
name|svcInfo
operator|.
name|setInterface
argument_list|(
name|intf
argument_list|)
expr_stmt|;
return|return
name|svcInfo
return|;
block|}
specifier|protected
name|InterfaceInfo
name|createInterface
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|)
block|{
name|QName
name|intfName
init|=
name|getInterfaceName
argument_list|()
decl_stmt|;
name|InterfaceInfo
name|intf
init|=
operator|new
name|InterfaceInfo
argument_list|(
name|serviceInfo
argument_list|,
name|intfName
argument_list|)
decl_stmt|;
name|Method
index|[]
name|methods
init|=
name|getServiceClass
argument_list|()
operator|.
name|getMethods
argument_list|()
decl_stmt|;
comment|// The BP profile states we can't have operations of the same name
comment|// so we have to append numbers to the name. Different JVMs sort methods
comment|// differently.
comment|// We need to keep them ordered so if we have overloaded methods, the
comment|// wsdl is generated the same every time across JVMs and across
comment|// client/servers.
name|Arrays
operator|.
name|sort
argument_list|(
name|methods
argument_list|,
operator|new
name|MethodComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|methods
control|)
block|{
if|if
condition|(
name|isValidMethod
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|createOperation
argument_list|(
name|serviceInfo
argument_list|,
name|intf
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|intf
return|;
block|}
specifier|protected
name|OperationInfo
name|createOperation
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|,
name|InterfaceInfo
name|intf
parameter_list|,
name|Method
name|m
parameter_list|)
block|{
name|OperationInfo
name|op
init|=
name|intf
operator|.
name|addOperation
argument_list|(
name|getOperationName
argument_list|(
name|intf
argument_list|,
name|m
argument_list|)
argument_list|)
decl_stmt|;
name|op
operator|.
name|setProperty
argument_list|(
name|m
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|op
operator|.
name|setProperty
argument_list|(
literal|"action"
argument_list|,
name|getAction
argument_list|(
name|op
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|op
operator|.
name|setProperty
argument_list|(
name|METHOD_ANNOTATIONS
argument_list|,
name|m
operator|.
name|getAnnotations
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|setProperty
argument_list|(
name|METHOD_PARAM_ANNOTATIONS
argument_list|,
name|m
operator|.
name|getParameterAnnotations
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isRPC
argument_list|(
name|m
argument_list|)
operator|&&
name|isWrapped
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|UnwrappedOperationInfo
name|uOp
init|=
operator|new
name|UnwrappedOperationInfo
argument_list|(
name|op
argument_list|)
decl_stmt|;
name|uOp
operator|.
name|setProperty
argument_list|(
name|METHOD_ANNOTATIONS
argument_list|,
name|m
operator|.
name|getAnnotations
argument_list|()
argument_list|)
expr_stmt|;
name|uOp
operator|.
name|setProperty
argument_list|(
name|METHOD_PARAM_ANNOTATIONS
argument_list|,
name|m
operator|.
name|getParameterAnnotations
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|setUnwrappedOperation
argument_list|(
name|uOp
argument_list|)
expr_stmt|;
name|createMessageParts
argument_list|(
name|intf
argument_list|,
name|uOp
argument_list|,
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|uOp
operator|.
name|hasInput
argument_list|()
condition|)
block|{
name|MessageInfo
name|msg
init|=
operator|new
name|MessageInfo
argument_list|(
name|op
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|,
name|uOp
operator|.
name|getInput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|op
operator|.
name|setInput
argument_list|(
name|uOp
operator|.
name|getInputName
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|createInputWrappedMessageParts
argument_list|(
name|uOp
argument_list|,
name|m
argument_list|,
name|msg
argument_list|)
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|p
range|:
name|uOp
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|p
operator|.
name|setConcreteName
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|uOp
operator|.
name|hasOutput
argument_list|()
condition|)
block|{
name|QName
name|name
init|=
name|uOp
operator|.
name|getOutput
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|MessageInfo
name|msg
init|=
operator|new
name|MessageInfo
argument_list|(
name|op
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|OUTPUT
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|op
operator|.
name|setOutput
argument_list|(
name|uOp
operator|.
name|getOutputName
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|createOutputWrappedMessageParts
argument_list|(
name|uOp
argument_list|,
name|m
argument_list|,
name|msg
argument_list|)
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|p
range|:
name|uOp
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|p
operator|.
name|setConcreteName
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|createMessageParts
argument_list|(
name|intf
argument_list|,
name|op
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|bindOperation
argument_list|(
name|op
argument_list|,
name|m
argument_list|)
expr_stmt|;
return|return
name|op
return|;
block|}
specifier|protected
name|void
name|bindOperation
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|m
parameter_list|)
block|{
name|getMethodDispatcher
argument_list|()
operator|.
name|bind
argument_list|(
name|op
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initializeWrappedSchema
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|)
block|{
for|for
control|(
name|OperationInfo
name|op
range|:
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperations
argument_list|()
control|)
block|{
if|if
condition|(
name|op
operator|.
name|getUnwrappedOperation
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|op
operator|.
name|hasInput
argument_list|()
condition|)
block|{
if|if
condition|(
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTypeClass
argument_list|()
operator|==
literal|null
condition|)
block|{
name|QName
name|wrapperBeanName
init|=
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getElementQName
argument_list|()
decl_stmt|;
name|XmlSchemaElement
name|e
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SchemaInfo
name|s
range|:
name|serviceInfo
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|e
operator|=
name|s
operator|.
name|getElementByQName
argument_list|(
name|wrapperBeanName
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setXmlSchema
argument_list|(
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|createWrappedSchema
argument_list|(
name|serviceInfo
argument_list|,
name|op
operator|.
name|getInput
argument_list|()
argument_list|,
name|op
operator|.
name|getUnwrappedOperation
argument_list|()
operator|.
name|getInput
argument_list|()
argument_list|,
name|wrapperBeanName
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|mpi
operator|.
name|getProperty
argument_list|(
name|HEADER
argument_list|)
argument_list|)
condition|)
block|{
name|QName
name|qn
init|=
operator|(
name|QName
operator|)
name|mpi
operator|.
name|getProperty
argument_list|(
name|ELEMENT_NAME
argument_list|)
decl_stmt|;
name|mpi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setElementQName
argument_list|(
name|qn
argument_list|)
expr_stmt|;
name|checkForElement
argument_list|(
name|serviceInfo
argument_list|,
name|mpi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|op
operator|.
name|hasOutput
argument_list|()
condition|)
block|{
if|if
condition|(
name|op
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTypeClass
argument_list|()
operator|==
literal|null
condition|)
block|{
name|QName
name|wrapperBeanName
init|=
name|op
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getElementQName
argument_list|()
decl_stmt|;
name|XmlSchemaElement
name|e
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SchemaInfo
name|s
range|:
name|serviceInfo
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|e
operator|=
name|s
operator|.
name|getElementByQName
argument_list|(
name|wrapperBeanName
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|createWrappedSchema
argument_list|(
name|serviceInfo
argument_list|,
name|op
operator|.
name|getOutput
argument_list|()
argument_list|,
name|op
operator|.
name|getUnwrappedOperation
argument_list|()
operator|.
name|getOutput
argument_list|()
argument_list|,
name|wrapperBeanName
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|op
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|mpi
operator|.
name|getProperty
argument_list|(
name|HEADER
argument_list|)
argument_list|)
condition|)
block|{
name|QName
name|qn
init|=
operator|(
name|QName
operator|)
name|mpi
operator|.
name|getProperty
argument_list|(
name|ELEMENT_NAME
argument_list|)
decl_stmt|;
name|mpi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setElementQName
argument_list|(
name|qn
argument_list|)
expr_stmt|;
name|checkForElement
argument_list|(
name|serviceInfo
argument_list|,
name|mpi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|checkForElement
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|,
name|MessagePartInfo
name|mpi
parameter_list|)
block|{
for|for
control|(
name|SchemaInfo
name|s
range|:
name|serviceInfo
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|XmlSchemaElement
name|e
init|=
name|s
operator|.
name|getElementByQName
argument_list|(
name|mpi
operator|.
name|getElementQName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|mpi
operator|.
name|setXmlSchema
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|SchemaInfo
name|si
init|=
name|getOrCreateSchema
argument_list|(
name|serviceInfo
argument_list|,
name|mpi
operator|.
name|getElementQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|getQualifyWrapperSchema
argument_list|()
argument_list|)
decl_stmt|;
name|XmlSchema
name|schema
init|=
name|si
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|XmlSchemaElement
name|el
init|=
operator|new
name|XmlSchemaElement
argument_list|()
decl_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementQName
argument_list|(
name|el
argument_list|,
name|mpi
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isExistSchemaElement
argument_list|(
name|schema
argument_list|,
name|mpi
operator|.
name|getElementQName
argument_list|()
argument_list|)
condition|)
block|{
name|SchemaCollection
operator|.
name|addGlobalElementToSchema
argument_list|(
name|schema
argument_list|,
name|el
argument_list|)
expr_stmt|;
block|}
name|el
operator|.
name|setNillable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|XmlSchemaType
name|tp
init|=
operator|(
name|XmlSchemaType
operator|)
name|mpi
operator|.
name|getXmlSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|tp
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"INTRACTABLE_PART"
argument_list|,
name|LOG
argument_list|,
name|mpi
operator|.
name|getName
argument_list|()
argument_list|,
name|mpi
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|el
operator|.
name|setSchemaTypeName
argument_list|(
name|tp
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setXmlSchema
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|getAnonymousWrapperTypes
parameter_list|()
block|{
return|return
name|anonymousWrappers
return|;
block|}
specifier|public
name|boolean
name|isAnonymousWrapperTypes
parameter_list|()
block|{
return|return
name|anonymousWrappers
return|;
block|}
specifier|public
name|void
name|setAnonymousWrapperTypes
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|anonymousWrappers
operator|=
name|b
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|getQualifyWrapperSchema
parameter_list|()
block|{
return|return
name|qualifiedSchemas
return|;
block|}
specifier|public
name|boolean
name|isQualifyWrapperSchema
parameter_list|()
block|{
return|return
name|qualifiedSchemas
return|;
block|}
specifier|public
name|void
name|setQualifyWrapperSchema
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|qualifiedSchemas
operator|=
name|b
expr_stmt|;
block|}
specifier|protected
name|void
name|createWrappedSchema
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|,
name|AbstractMessageContainer
name|wrappedMessage
parameter_list|,
name|AbstractMessageContainer
name|unwrappedMessage
parameter_list|,
name|QName
name|wrapperBeanName
parameter_list|)
block|{
name|SchemaInfo
name|schemaInfo
init|=
name|getOrCreateSchema
argument_list|(
name|serviceInfo
argument_list|,
name|wrapperBeanName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|getQualifyWrapperSchema
argument_list|()
argument_list|)
decl_stmt|;
name|createWrappedMessageSchema
argument_list|(
name|serviceInfo
argument_list|,
name|wrappedMessage
argument_list|,
name|unwrappedMessage
argument_list|,
name|schemaInfo
operator|.
name|getSchema
argument_list|()
argument_list|,
name|wrapperBeanName
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createBareMessage
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|,
name|OperationInfo
name|opInfo
parameter_list|,
name|boolean
name|isOut
parameter_list|)
block|{
name|MessageInfo
name|message
init|=
name|isOut
condition|?
name|opInfo
operator|.
name|getOutput
argument_list|()
else|:
name|opInfo
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getMessageParts
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Method
name|method
init|=
operator|(
name|Method
operator|)
name|opInfo
operator|.
name|getProperty
argument_list|(
name|METHOD
argument_list|)
decl_stmt|;
name|int
name|paraNumber
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|message
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|SchemaInfo
name|schemaInfo
init|=
literal|null
decl_stmt|;
name|XmlSchema
name|schema
init|=
literal|null
decl_stmt|;
name|QName
name|qname
init|=
operator|(
name|QName
operator|)
name|mpi
operator|.
name|getProperty
argument_list|(
name|ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getMessageParts
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|qname
operator|=
name|qname
operator|==
literal|null
operator|&&
operator|!
name|isOut
condition|?
name|getInParameterName
argument_list|(
name|opInfo
argument_list|,
name|method
argument_list|,
operator|-
literal|1
argument_list|)
else|:
name|qname
expr_stmt|;
name|qname
operator|=
name|qname
operator|==
literal|null
operator|&&
name|isOut
condition|?
name|getOutParameterName
argument_list|(
name|opInfo
argument_list|,
name|method
argument_list|,
operator|-
literal|1
argument_list|)
else|:
name|qname
expr_stmt|;
if|if
condition|(
name|qname
operator|.
name|getLocalPart
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"arg"
argument_list|)
operator|||
name|qname
operator|.
name|getLocalPart
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"return"
argument_list|)
condition|)
block|{
name|qname
operator|=
name|isOut
condition|?
operator|new
name|QName
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|"Response"
argument_list|)
else|:
operator|new
name|QName
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isOut
operator|&&
name|message
operator|.
name|getMessageParts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|qname
operator|==
literal|null
condition|)
block|{
while|while
condition|(
operator|!
name|isOutParam
argument_list|(
name|method
argument_list|,
name|paraNumber
argument_list|)
condition|)
block|{
name|paraNumber
operator|++
expr_stmt|;
block|}
name|qname
operator|=
name|getOutParameterName
argument_list|(
name|opInfo
argument_list|,
name|method
argument_list|,
name|paraNumber
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qname
operator|==
literal|null
condition|)
block|{
name|qname
operator|=
name|getInParameterName
argument_list|(
name|opInfo
argument_list|,
name|method
argument_list|,
name|paraNumber
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SchemaInfo
name|s
range|:
name|serviceInfo
operator|.
name|getSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|schemaInfo
operator|=
name|s
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|schemaInfo
operator|==
literal|null
condition|)
block|{
name|schemaInfo
operator|=
name|getOrCreateSchema
argument_list|(
name|serviceInfo
argument_list|,
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|schema
operator|=
name|schemaInfo
operator|.
name|getSchema
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|schema
operator|=
name|schemaInfo
operator|.
name|getSchema
argument_list|()
expr_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
operator|&&
name|schema
operator|.
name|getElementByName
argument_list|(
name|qname
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|mpi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setElementQName
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setXmlSchema
argument_list|(
name|schema
operator|.
name|getElementByName
argument_list|(
name|qname
argument_list|)
argument_list|)
expr_stmt|;
name|paraNumber
operator|++
expr_stmt|;
continue|continue;
block|}
block|}
name|XmlSchemaElement
name|el
init|=
operator|new
name|XmlSchemaElement
argument_list|()
decl_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementQName
argument_list|(
name|el
argument_list|,
name|qname
argument_list|)
expr_stmt|;
name|el
operator|.
name|setNillable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isExistSchemaElement
argument_list|(
name|schema
argument_list|,
name|qname
argument_list|)
condition|)
block|{
name|SchemaCollection
operator|.
name|addGlobalElementToSchema
argument_list|(
name|schema
argument_list|,
name|el
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|el
operator|=
name|getExistingSchemaElement
argument_list|(
name|schema
argument_list|,
name|qname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mpi
operator|.
name|isElement
argument_list|()
condition|)
block|{
name|XmlSchemaElement
name|oldEl
init|=
operator|(
name|XmlSchemaElement
operator|)
name|mpi
operator|.
name|getXmlSchema
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|oldEl
operator|&&
operator|!
name|oldEl
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
name|el
operator|.
name|setSchemaTypeName
argument_list|(
name|oldEl
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|setSchemaType
argument_list|(
name|oldEl
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldEl
operator|.
name|getSchemaTypeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addImport
argument_list|(
name|schema
argument_list|,
name|oldEl
operator|.
name|getSchemaTypeName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|mpi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setXmlSchema
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setElementQName
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setConcreteName
argument_list|(
name|qname
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
if|if
condition|(
literal|null
operator|==
name|mpi
operator|.
name|getTypeQName
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"UNMAPPABLE_PORT_TYPE"
argument_list|,
name|LOG
argument_list|,
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|mpi
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|el
operator|.
name|setSchemaTypeName
argument_list|(
name|mpi
operator|.
name|getTypeQName
argument_list|()
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setXmlSchema
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setConcreteName
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|addImport
argument_list|(
name|schema
argument_list|,
name|mpi
operator|.
name|getTypeQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mpi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setElementQName
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|paraNumber
operator|++
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addImport
parameter_list|(
name|XmlSchema
name|schema
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ns
operator|.
name|equals
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
operator|&&
operator|!
name|ns
operator|.
name|equals
argument_list|(
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
argument_list|)
operator|&&
operator|!
name|isExistImport
argument_list|(
name|schema
argument_list|,
name|ns
argument_list|)
condition|)
block|{
name|XmlSchemaImport
name|is
init|=
operator|new
name|XmlSchemaImport
argument_list|()
decl_stmt|;
name|is
operator|.
name|setNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|schemaLocationMapping
operator|.
name|get
argument_list|(
name|ns
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|setSchemaLocation
argument_list|(
name|this
operator|.
name|schemaLocationMapping
operator|.
name|get
argument_list|(
name|ns
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|schema
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isExistImport
parameter_list|(
name|XmlSchema
name|schema
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
name|boolean
name|isExist
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|ite
init|=
name|schema
operator|.
name|getItems
argument_list|()
operator|.
name|getIterator
argument_list|()
init|;
name|ite
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|XmlSchemaObject
name|obj
init|=
operator|(
name|XmlSchemaObject
operator|)
name|ite
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|XmlSchemaImport
condition|)
block|{
name|XmlSchemaImport
name|xsImport
init|=
operator|(
name|XmlSchemaImport
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|xsImport
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|isExist
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|isExist
return|;
block|}
specifier|private
name|XmlSchemaElement
name|getExistingSchemaElement
parameter_list|(
name|XmlSchema
name|schema
parameter_list|,
name|QName
name|qn
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|ite
init|=
name|schema
operator|.
name|getItems
argument_list|()
operator|.
name|getIterator
argument_list|()
init|;
name|ite
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|XmlSchemaObject
name|obj
init|=
operator|(
name|XmlSchemaObject
operator|)
name|ite
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|XmlSchemaElement
name|xsEle
init|=
operator|(
name|XmlSchemaElement
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|xsEle
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|qn
argument_list|)
condition|)
block|{
return|return
name|xsEle
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|isExistSchemaElement
parameter_list|(
name|XmlSchema
name|schema
parameter_list|,
name|QName
name|qn
parameter_list|)
block|{
return|return
name|getExistingSchemaElement
argument_list|(
name|schema
argument_list|,
name|qn
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|private
name|void
name|createWrappedMessageSchema
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|,
name|AbstractMessageContainer
name|wrappedMessage
parameter_list|,
name|AbstractMessageContainer
name|unwrappedMessage
parameter_list|,
name|XmlSchema
name|schema
parameter_list|,
name|QName
name|wrapperName
parameter_list|)
block|{
name|XmlSchemaElement
name|el
init|=
operator|new
name|XmlSchemaElement
argument_list|()
decl_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementQName
argument_list|(
name|el
argument_list|,
name|wrapperName
argument_list|)
expr_stmt|;
name|SchemaCollection
operator|.
name|addGlobalElementToSchema
argument_list|(
name|schema
argument_list|,
name|el
argument_list|)
expr_stmt|;
name|wrappedMessage
operator|.
name|getMessageParts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setXmlSchema
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|XmlSchemaComplexType
name|ct
init|=
operator|new
name|XmlSchemaComplexType
argument_list|(
name|schema
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isAnonymousWrapperTypes
argument_list|()
condition|)
block|{
name|ct
operator|.
name|setName
argument_list|(
name|wrapperName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|setSchemaTypeName
argument_list|(
name|wrapperName
argument_list|)
expr_stmt|;
name|SchemaCollection
operator|.
name|addGlobalTypeToSchema
argument_list|(
name|schema
argument_list|,
name|ct
argument_list|)
expr_stmt|;
block|}
name|el
operator|.
name|setSchemaType
argument_list|(
name|ct
argument_list|)
expr_stmt|;
name|XmlSchemaSequence
name|seq
init|=
operator|new
name|XmlSchemaSequence
argument_list|()
decl_stmt|;
name|ct
operator|.
name|setParticle
argument_list|(
name|seq
argument_list|)
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|unwrappedMessage
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|el
operator|=
operator|new
name|XmlSchemaElement
argument_list|()
expr_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementQName
argument_list|(
name|el
argument_list|,
name|mpi
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Class
argument_list|,
name|Boolean
argument_list|>
name|jaxbAnnoMap
init|=
name|getJaxbAnnoMap
argument_list|(
name|mpi
argument_list|)
decl_stmt|;
if|if
condition|(
name|mpi
operator|.
name|isElement
argument_list|()
condition|)
block|{
name|addImport
argument_list|(
name|schema
argument_list|,
name|mpi
operator|.
name|getElementQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementQName
argument_list|(
name|el
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementRefName
argument_list|(
name|el
argument_list|,
name|mpi
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|mpi
operator|.
name|getTypeQName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|jaxbAnnoMap
operator|.
name|containsKey
argument_list|(
name|XmlList
operator|.
name|class
argument_list|)
condition|)
block|{
name|el
operator|.
name|setSchemaTypeName
argument_list|(
name|mpi
operator|.
name|getTypeQName
argument_list|()
argument_list|)
expr_stmt|;
name|addImport
argument_list|(
name|schema
argument_list|,
name|mpi
operator|.
name|getTypeQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|el
operator|.
name|setSchemaType
argument_list|(
operator|(
name|XmlSchemaType
operator|)
name|mpi
operator|.
name|getXmlSchema
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|schema
operator|.
name|getElementFormDefault
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|XmlSchemaForm
operator|.
name|UNQUALIFIED
argument_list|)
condition|)
block|{
name|mpi
operator|.
name|setConcreteName
argument_list|(
operator|new
name|QName
argument_list|(
literal|null
argument_list|,
name|mpi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mpi
operator|.
name|setConcreteName
argument_list|(
name|mpi
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|mpi
operator|.
name|getProperty
argument_list|(
name|HEADER
argument_list|)
argument_list|)
condition|)
block|{
name|boolean
name|wasType
init|=
operator|!
name|mpi
operator|.
name|isElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|wasType
condition|)
block|{
name|QName
name|concreteName
init|=
name|mpi
operator|.
name|getConcreteName
argument_list|()
decl_stmt|;
name|mpi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setElementQName
argument_list|(
name|el
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setConcreteName
argument_list|(
name|concreteName
argument_list|)
expr_stmt|;
block|}
name|addMimeType
argument_list|(
name|el
argument_list|,
name|getMethodParameterAnnotations
argument_list|(
name|mpi
argument_list|)
argument_list|)
expr_stmt|;
name|Annotation
index|[]
name|methodAnnotations
init|=
name|getMethodAnnotations
argument_list|(
name|mpi
argument_list|)
decl_stmt|;
if|if
condition|(
name|methodAnnotations
operator|!=
literal|null
condition|)
block|{
name|addMimeType
argument_list|(
name|el
argument_list|,
name|methodAnnotations
argument_list|)
expr_stmt|;
block|}
name|long
name|min
init|=
name|getWrapperPartMinOccurs
argument_list|(
name|mpi
argument_list|)
decl_stmt|;
name|long
name|max
init|=
name|getWrapperPartMaxOccurs
argument_list|(
name|mpi
argument_list|)
decl_stmt|;
name|boolean
name|nillable
init|=
name|isWrapperPartNillable
argument_list|(
name|mpi
argument_list|)
decl_stmt|;
name|Boolean
name|qualified
init|=
name|isWrapperPartQualified
argument_list|(
name|mpi
argument_list|)
decl_stmt|;
if|if
condition|(
name|qualified
operator|==
literal|null
condition|)
block|{
name|qualified
operator|=
name|this
operator|.
name|isQualifyWrapperSchema
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|qualified
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|mpi
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|QName
name|newName
init|=
operator|new
name|QName
argument_list|(
name|wrapperName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|mpi
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|mpi
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setElementQName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setConcreteName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementQName
argument_list|(
name|el
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|mpi
operator|.
name|getTypeClass
argument_list|()
argument_list|)
operator|&&
name|mpi
operator|.
name|getTypeClass
argument_list|()
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|Type
name|type
init|=
operator|(
name|Type
operator|)
name|mpi
operator|.
name|getProperty
argument_list|(
name|GENERIC_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|type
operator|instanceof
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
operator|)
operator|&&
name|el
operator|.
name|getSchemaTypeName
argument_list|()
operator|==
literal|null
operator|&&
name|el
operator|.
name|getSchemaType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|max
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|el
operator|.
name|setSchemaTypeName
argument_list|(
name|Constants
operator|.
name|XSD_ANYTYPE
argument_list|)
expr_stmt|;
block|}
block|}
name|el
operator|.
name|setMinOccurs
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|el
operator|.
name|setMaxOccurs
argument_list|(
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
name|nillable
condition|)
block|{
name|el
operator|.
name|setNillable
argument_list|(
name|nillable
argument_list|)
expr_stmt|;
block|}
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setXmlSchema
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|mpi
operator|.
name|getProperty
argument_list|(
name|HEADER
argument_list|)
argument_list|)
condition|)
block|{
name|QName
name|qn
init|=
operator|(
name|QName
operator|)
name|mpi
operator|.
name|getProperty
argument_list|(
name|ELEMENT_NAME
argument_list|)
decl_stmt|;
name|XmlSchemaUtils
operator|.
name|setElementQName
argument_list|(
name|el
argument_list|,
name|qn
argument_list|)
expr_stmt|;
name|SchemaInfo
name|headerSchemaInfo
init|=
name|getOrCreateSchema
argument_list|(
name|serviceInfo
argument_list|,
name|qn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|getQualifyWrapperSchema
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isExistSchemaElement
argument_list|(
name|headerSchemaInfo
operator|.
name|getSchema
argument_list|()
argument_list|,
name|qn
argument_list|)
condition|)
block|{
name|headerSchemaInfo
operator|.
name|getSchema
argument_list|()
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Annotation
index|[]
name|getMethodParameterAnnotations
parameter_list|(
specifier|final
name|MessagePartInfo
name|mpi
parameter_list|)
block|{
name|Annotation
index|[]
index|[]
name|paramAnno
init|=
operator|(
name|Annotation
index|[]
index|[]
operator|)
name|mpi
operator|.
name|getProperty
argument_list|(
name|METHOD_PARAM_ANNOTATIONS
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|mpi
operator|.
name|getIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|paramAnno
operator|!=
literal|null
operator|&&
name|index
operator|<
name|paramAnno
operator|.
name|length
operator|&&
name|index
operator|>=
literal|0
condition|)
block|{
return|return
name|paramAnno
index|[
name|index
index|]
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Annotation
index|[]
name|getMethodAnnotations
parameter_list|(
specifier|final
name|MessagePartInfo
name|mpi
parameter_list|)
block|{
return|return
operator|(
name|Annotation
index|[]
operator|)
name|mpi
operator|.
name|getProperty
argument_list|(
name|METHOD_ANNOTATIONS
argument_list|)
return|;
block|}
specifier|private
name|void
name|addMimeType
parameter_list|(
specifier|final
name|XmlSchemaElement
name|element
parameter_list|,
specifier|final
name|Annotation
index|[]
name|annotations
parameter_list|)
block|{
if|if
condition|(
name|annotations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Annotation
name|annotation
range|:
name|annotations
control|)
block|{
if|if
condition|(
name|annotation
operator|instanceof
name|XmlMimeType
condition|)
block|{
name|MimeAttribute
name|attr
init|=
operator|new
name|MimeAttribute
argument_list|()
decl_stmt|;
name|attr
operator|.
name|setValue
argument_list|(
operator|(
operator|(
name|XmlMimeType
operator|)
name|annotation
operator|)
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|element
operator|.
name|addMetaInfo
argument_list|(
name|MimeAttribute
operator|.
name|MIME_QNAME
argument_list|,
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Map
argument_list|<
name|Class
argument_list|,
name|Boolean
argument_list|>
name|getJaxbAnnoMap
parameter_list|(
name|MessagePartInfo
name|mpi
parameter_list|)
block|{
name|Map
argument_list|<
name|Class
argument_list|,
name|Boolean
argument_list|>
name|map
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Class
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|Annotation
index|[]
name|anns
init|=
name|getMethodParameterAnnotations
argument_list|(
name|mpi
argument_list|)
decl_stmt|;
if|if
condition|(
name|anns
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Annotation
name|anno
range|:
name|anns
control|)
block|{
if|if
condition|(
name|anno
operator|instanceof
name|XmlList
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|XmlList
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|anno
operator|instanceof
name|XmlAttachmentRef
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|XmlAttachmentRef
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|anno
operator|instanceof
name|XmlJavaTypeAdapter
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|XmlJavaTypeAdapter
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|map
return|;
block|}
specifier|private
name|SchemaInfo
name|getOrCreateSchema
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|boolean
name|qualified
parameter_list|)
block|{
for|for
control|(
name|SchemaInfo
name|s
range|:
name|serviceInfo
operator|.
name|getSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
name|SchemaInfo
name|schemaInfo
init|=
operator|new
name|SchemaInfo
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
name|SchemaCollection
name|col
init|=
name|serviceInfo
operator|.
name|getXmlSchemaCollection
argument_list|()
decl_stmt|;
name|XmlSchema
name|schema
init|=
name|col
operator|.
name|getSchemaByTargetNamespace
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|schemaInfo
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|serviceInfo
operator|.
name|addSchema
argument_list|(
name|schemaInfo
argument_list|)
expr_stmt|;
return|return
name|schemaInfo
return|;
block|}
name|schema
operator|=
name|col
operator|.
name|newXmlSchemaInCollection
argument_list|(
name|namespaceURI
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualified
condition|)
block|{
name|schema
operator|.
name|setElementFormDefault
argument_list|(
operator|new
name|XmlSchemaForm
argument_list|(
name|XmlSchemaForm
operator|.
name|QUALIFIED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|schemaInfo
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|explicitNamespaceMappings
init|=
name|this
operator|.
name|getDataBinding
argument_list|()
operator|.
name|getDeclaredNamespaceMappings
argument_list|()
decl_stmt|;
if|if
condition|(
name|explicitNamespaceMappings
operator|==
literal|null
condition|)
block|{
name|explicitNamespaceMappings
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
name|NamespaceMap
name|nsMap
init|=
operator|new
name|NamespaceMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
range|:
name|explicitNamespaceMappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|nsMap
operator|.
name|add
argument_list|(
name|mapping
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapping
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|explicitNamespaceMappings
operator|.
name|containsKey
argument_list|(
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
argument_list|)
condition|)
block|{
name|nsMap
operator|.
name|add
argument_list|(
name|WSDLConstants
operator|.
name|NP_SCHEMA_XSD
argument_list|,
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|explicitNamespaceMappings
operator|.
name|containsKey
argument_list|(
name|serviceInfo
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|nsMap
operator|.
name|add
argument_list|(
name|WSDLConstants
operator|.
name|CONVENTIONAL_TNS_PREFIX
argument_list|,
name|serviceInfo
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|schema
operator|.
name|setNamespaceContext
argument_list|(
name|nsMap
argument_list|)
expr_stmt|;
name|serviceInfo
operator|.
name|addSchema
argument_list|(
name|schemaInfo
argument_list|)
expr_stmt|;
return|return
name|schemaInfo
return|;
block|}
specifier|protected
name|void
name|createMessageParts
parameter_list|(
name|InterfaceInfo
name|intf
parameter_list|,
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
specifier|final
name|Class
index|[]
name|paramClasses
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
comment|// Setup the input message
name|op
operator|.
name|setProperty
argument_list|(
name|METHOD
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|MessageInfo
name|inMsg
init|=
name|op
operator|.
name|createMessage
argument_list|(
name|this
operator|.
name|getInputMessageName
argument_list|(
name|op
argument_list|,
name|method
argument_list|)
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|)
decl_stmt|;
name|op
operator|.
name|setInput
argument_list|(
name|inMsg
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|inMsg
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|paramClasses
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|Exchange
operator|.
name|class
operator|.
name|equals
argument_list|(
name|paramClasses
index|[
name|j
index|]
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isInParam
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
condition|)
block|{
specifier|final
name|QName
name|q
init|=
name|getInParameterName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
name|inMsg
operator|.
name|addMessagePart
argument_list|(
name|getInPartName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|initializeParameter
argument_list|(
name|part
argument_list|,
name|paramClasses
index|[
name|j
index|]
argument_list|,
name|method
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
name|j
index|]
argument_list|)
expr_stmt|;
comment|//TODO:remove method param annotations
name|part
operator|.
name|setProperty
argument_list|(
name|METHOD_PARAM_ANNOTATIONS
argument_list|,
name|method
operator|.
name|getParameterAnnotations
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setProperty
argument_list|(
name|PARAM_ANNOTATION
argument_list|,
name|method
operator|.
name|getParameterAnnotations
argument_list|()
index|[
name|j
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|getJaxbAnnoMap
argument_list|(
name|part
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|op
operator|.
name|setProperty
argument_list|(
name|WRAPPERGEN_NEEDED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isWrapped
argument_list|(
name|method
argument_list|)
operator|&&
operator|!
name|isRPC
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|part
operator|.
name|setProperty
argument_list|(
name|ELEMENT_NAME
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isHeader
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
condition|)
block|{
name|part
operator|.
name|setProperty
argument_list|(
name|HEADER
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRPC
argument_list|(
name|method
argument_list|)
operator|||
operator|!
name|isWrapped
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|part
operator|.
name|setElementQName
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|part
operator|.
name|setProperty
argument_list|(
name|ELEMENT_NAME
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
block|}
name|part
operator|.
name|setIndex
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasOutMessage
argument_list|(
name|method
argument_list|)
condition|)
block|{
comment|// Setup the output message
name|MessageInfo
name|outMsg
init|=
name|op
operator|.
name|createMessage
argument_list|(
name|createOutputMessageName
argument_list|(
name|op
argument_list|,
name|method
argument_list|)
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|OUTPUT
argument_list|)
decl_stmt|;
name|op
operator|.
name|setOutput
argument_list|(
name|outMsg
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|outMsg
argument_list|)
expr_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
init|=
name|method
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|returnType
operator|.
name|isAssignableFrom
argument_list|(
name|void
operator|.
name|class
argument_list|)
condition|)
block|{
specifier|final
name|QName
name|q
init|=
name|getOutPartName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|QName
name|q2
init|=
name|getOutParameterName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
name|outMsg
operator|.
name|addMessagePart
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|initializeParameter
argument_list|(
name|part
argument_list|,
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|method
operator|.
name|getGenericReturnType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isRPC
argument_list|(
name|method
argument_list|)
operator|&&
operator|!
name|isWrapped
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|part
operator|.
name|setProperty
argument_list|(
name|ELEMENT_NAME
argument_list|,
name|q2
argument_list|)
expr_stmt|;
block|}
name|part
operator|.
name|setProperty
argument_list|(
name|METHOD_ANNOTATIONS
argument_list|,
name|method
operator|.
name|getAnnotations
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setProperty
argument_list|(
name|PARAM_ANNOTATION
argument_list|,
name|method
operator|.
name|getAnnotations
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isHeader
argument_list|(
name|method
argument_list|,
operator|-
literal|1
argument_list|)
condition|)
block|{
name|part
operator|.
name|setProperty
argument_list|(
name|HEADER
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRPC
argument_list|(
name|method
argument_list|)
operator|||
operator|!
name|isWrapped
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|part
operator|.
name|setElementQName
argument_list|(
name|q2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|part
operator|.
name|setProperty
argument_list|(
name|ELEMENT_NAME
argument_list|,
name|q2
argument_list|)
expr_stmt|;
block|}
block|}
name|part
operator|.
name|setIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|paramClasses
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|Exchange
operator|.
name|class
operator|.
name|equals
argument_list|(
name|paramClasses
index|[
name|j
index|]
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isOutParam
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
condition|)
block|{
if|if
condition|(
name|outMsg
operator|==
literal|null
condition|)
block|{
name|outMsg
operator|=
name|op
operator|.
name|createMessage
argument_list|(
name|createOutputMessageName
argument_list|(
name|op
argument_list|,
name|method
argument_list|)
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|OUTPUT
argument_list|)
expr_stmt|;
block|}
name|QName
name|q
init|=
name|getOutPartName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|QName
name|q2
init|=
name|getOutParameterName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|isInParam
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
condition|)
block|{
name|q
operator|=
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
name|j
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|q2
operator|=
operator|(
name|QName
operator|)
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
name|j
argument_list|)
operator|.
name|getProperty
argument_list|(
name|ELEMENT_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|q2
operator|==
literal|null
condition|)
block|{
name|q2
operator|=
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePartByIndex
argument_list|(
name|j
argument_list|)
operator|.
name|getElementQName
argument_list|()
expr_stmt|;
block|}
block|}
name|MessagePartInfo
name|part
init|=
name|outMsg
operator|.
name|addMessagePart
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|part
operator|.
name|setProperty
argument_list|(
name|METHOD_PARAM_ANNOTATIONS
argument_list|,
name|method
operator|.
name|getParameterAnnotations
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setProperty
argument_list|(
name|PARAM_ANNOTATION
argument_list|,
name|method
operator|.
name|getParameterAnnotations
argument_list|()
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|initializeParameter
argument_list|(
name|part
argument_list|,
name|paramClasses
index|[
name|j
index|]
argument_list|,
name|method
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|part
operator|.
name|setIndex
argument_list|(
name|j
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isRPC
argument_list|(
name|method
argument_list|)
operator|&&
operator|!
name|isWrapped
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|part
operator|.
name|setProperty
argument_list|(
name|ELEMENT_NAME
argument_list|,
name|q2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isInParam
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
condition|)
block|{
name|part
operator|.
name|setProperty
argument_list|(
name|MODE_INOUT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isHeader
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
condition|)
block|{
name|part
operator|.
name|setProperty
argument_list|(
name|HEADER
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRPC
argument_list|(
name|method
argument_list|)
operator|||
operator|!
name|isWrapped
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|part
operator|.
name|setElementQName
argument_list|(
name|q2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|part
operator|.
name|setProperty
argument_list|(
name|ELEMENT_NAME
argument_list|,
name|q2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|//setting the parameterOrder that
comment|//allows preservation of method signatures
comment|//when doing java->wsdl->java
name|setParameterOrder
argument_list|(
name|method
argument_list|,
name|paramClasses
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|initializeFaults
argument_list|(
name|intf
argument_list|,
name|op
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setParameterOrder
parameter_list|(
name|Method
name|method
parameter_list|,
name|Class
index|[]
name|paramClasses
parameter_list|,
name|OperationInfo
name|op
parameter_list|)
block|{
if|if
condition|(
name|isRPC
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paramOrdering
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasOut
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|paramClasses
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|Exchange
operator|.
name|class
operator|.
name|equals
argument_list|(
name|paramClasses
index|[
name|j
index|]
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|isInParam
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
condition|)
block|{
name|paramOrdering
operator|.
name|add
argument_list|(
name|getInPartName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|j
argument_list|)
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOutParam
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
condition|)
block|{
name|hasOut
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isOutParam
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
condition|)
block|{
name|hasOut
operator|=
literal|true
expr_stmt|;
name|paramOrdering
operator|.
name|add
argument_list|(
name|getOutPartName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|j
argument_list|)
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|paramOrdering
operator|.
name|isEmpty
argument_list|()
operator|&&
name|hasOut
condition|)
block|{
name|op
operator|.
name|setParameterOrdering
argument_list|(
name|paramOrdering
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|createInputWrappedMessageParts
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|,
name|MessageInfo
name|inMsg
parameter_list|)
block|{
name|MessagePartInfo
name|part
init|=
name|inMsg
operator|.
name|addMessagePart
argument_list|(
literal|"parameters"
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|QName
name|q
init|=
name|c
operator|.
name|getRequestWrapperName
argument_list|(
name|op
argument_list|,
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|setElementQName
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|part
operator|.
name|getElementQName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|part
operator|.
name|setElementQName
argument_list|(
name|inMsg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|part
operator|.
name|getElementQName
argument_list|()
operator|.
name|equals
argument_list|(
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|setName
argument_list|(
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getRequestWrapper
argument_list|(
name|method
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|setTypeClass
argument_list|(
name|this
operator|.
name|getRequestWrapper
argument_list|(
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getRequestWrapperClassName
argument_list|(
name|method
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|setProperty
argument_list|(
literal|"REQUEST.WRAPPER.CLASSNAME"
argument_list|,
name|getRequestWrapperClassName
argument_list|(
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|partIdx
init|=
literal|0
decl_stmt|;
name|int
name|maxIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MessagePartInfo
name|mpart
range|:
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|mpart
operator|.
name|getProperty
argument_list|(
name|HEADER
argument_list|)
argument_list|)
condition|)
block|{
name|int
name|idx
init|=
name|mpart
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|inMsg
operator|.
name|addMessagePart
argument_list|(
name|mpart
argument_list|)
expr_stmt|;
name|mpart
operator|.
name|setIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
comment|//make sure the header part and the wrapper part don't share the
comment|//same index.   We can move the wrapper part around a bit
comment|//if need be
if|if
condition|(
name|maxIdx
operator|<
name|idx
condition|)
block|{
name|maxIdx
operator|=
name|idx
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|==
name|partIdx
condition|)
block|{
name|maxIdx
operator|++
expr_stmt|;
name|partIdx
operator|=
name|maxIdx
expr_stmt|;
block|}
block|}
block|}
name|part
operator|.
name|setIndex
argument_list|(
name|partIdx
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createOutputWrappedMessageParts
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|,
name|MessageInfo
name|outMsg
parameter_list|)
block|{
name|String
name|partName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|partName
operator|=
name|c
operator|.
name|getResponseWrapperPartName
argument_list|(
name|op
argument_list|,
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|partName
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|partName
operator|==
literal|null
condition|)
block|{
name|partName
operator|=
literal|"parameters"
expr_stmt|;
block|}
name|MessagePartInfo
name|part
init|=
name|outMsg
operator|.
name|addMessagePart
argument_list|(
name|partName
argument_list|)
decl_stmt|;
name|part
operator|.
name|setElement
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|part
operator|.
name|setIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|QName
name|q
init|=
name|c
operator|.
name|getResponseWrapperName
argument_list|(
name|op
argument_list|,
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|setElementQName
argument_list|(
name|q
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|part
operator|.
name|getElementQName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|part
operator|.
name|setElementQName
argument_list|(
name|outMsg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|part
operator|.
name|getElementQName
argument_list|()
operator|.
name|equals
argument_list|(
name|op
operator|.
name|getOutput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|op
operator|.
name|getOutput
argument_list|()
operator|.
name|setName
argument_list|(
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getResponseWrapper
argument_list|(
name|method
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|setTypeClass
argument_list|(
name|this
operator|.
name|getResponseWrapper
argument_list|(
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getResponseWrapperClassName
argument_list|(
name|method
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|setProperty
argument_list|(
literal|"RESPONSE.WRAPPER.CLASSNAME"
argument_list|,
name|getResponseWrapperClassName
argument_list|(
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MessagePartInfo
name|mpart
range|:
name|op
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|mpart
operator|.
name|getProperty
argument_list|(
name|HEADER
argument_list|)
argument_list|)
condition|)
block|{
name|int
name|idx
init|=
name|mpart
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|outMsg
operator|.
name|addMessagePart
argument_list|(
name|mpart
argument_list|)
expr_stmt|;
name|mpart
operator|.
name|setIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Class
name|createArrayClass
parameter_list|(
name|GenericArrayType
name|atp
parameter_list|)
block|{
name|Type
name|tp
init|=
operator|(
operator|(
name|GenericArrayType
operator|)
name|atp
operator|)
operator|.
name|getGenericComponentType
argument_list|()
decl_stmt|;
name|Class
name|rawClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tp
operator|instanceof
name|Class
condition|)
block|{
name|rawClass
operator|=
operator|(
name|Class
operator|)
name|tp
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tp
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|rawClass
operator|=
name|createArrayClass
argument_list|(
operator|(
name|GenericArrayType
operator|)
name|tp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tp
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|rawClass
operator|=
call|(
name|Class
call|)
argument_list|(
operator|(
name|ParameterizedType
operator|)
name|tp
argument_list|)
operator|.
name|getRawType
argument_list|()
expr_stmt|;
if|if
condition|(
name|List
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|rawClass
argument_list|)
condition|)
block|{
name|rawClass
operator|=
name|getClass
argument_list|(
operator|(
name|ParameterizedType
operator|)
name|tp
argument_list|)
expr_stmt|;
name|rawClass
operator|=
name|Array
operator|.
name|newInstance
argument_list|(
name|rawClass
argument_list|,
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|Array
operator|.
name|newInstance
argument_list|(
name|rawClass
argument_list|,
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Class
name|getClass
parameter_list|(
name|Type
name|paramType
parameter_list|)
block|{
name|Class
name|rawClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|paramType
operator|instanceof
name|Class
condition|)
block|{
name|rawClass
operator|=
operator|(
name|Class
operator|)
name|paramType
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|paramType
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|rawClass
operator|=
name|createArrayClass
argument_list|(
operator|(
name|GenericArrayType
operator|)
name|paramType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|paramType
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|rawClass
operator|=
call|(
name|Class
call|)
argument_list|(
operator|(
name|ParameterizedType
operator|)
name|paramType
argument_list|)
operator|.
name|getRawType
argument_list|()
expr_stmt|;
block|}
return|return
name|rawClass
return|;
block|}
specifier|protected
name|void
name|initializeParameter
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|,
name|Class
name|rawClass
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|isHolder
argument_list|(
name|rawClass
argument_list|,
name|type
argument_list|)
condition|)
block|{
name|Type
name|c
init|=
name|getHolderType
argument_list|(
name|rawClass
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|c
expr_stmt|;
name|rawClass
operator|=
name|getClass
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
name|part
operator|.
name|setProperty
argument_list|(
name|GENERIC_TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
comment|// if rawClass is List<String>, it will be converted to array
comment|// and set it to type class
if|if
condition|(
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|rawClass
argument_list|)
condition|)
block|{
name|part
operator|.
name|setProperty
argument_list|(
name|RAW_CLASS
argument_list|,
name|rawClass
argument_list|)
expr_stmt|;
block|}
name|part
operator|.
name|setTypeClass
argument_list|(
name|rawClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|isUnwrapped
argument_list|()
operator|&&
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getProperty
argument_list|(
name|HEADER
argument_list|)
argument_list|)
condition|)
block|{
comment|//header from the unwrapped operation, make sure the type is set for the
comment|//approriate header in the wrapped operation
name|OperationInfo
name|o
init|=
operator|(
operator|(
name|UnwrappedOperationInfo
operator|)
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|)
operator|.
name|getWrappedOperation
argument_list|()
decl_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getProperty
argument_list|(
name|ReflectionServiceFactoryBean
operator|.
name|MODE_OUT
argument_list|)
argument_list|)
operator|||
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getProperty
argument_list|(
name|ReflectionServiceFactoryBean
operator|.
name|MODE_INOUT
argument_list|)
argument_list|)
condition|)
block|{
name|MessagePartInfo
name|mpi
init|=
name|o
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessagePart
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mpi
operator|!=
literal|null
condition|)
block|{
name|mpi
operator|.
name|setTypeClass
argument_list|(
name|rawClass
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setProperty
argument_list|(
name|GENERIC_TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|rawClass
argument_list|)
condition|)
block|{
name|mpi
operator|.
name|setProperty
argument_list|(
name|RAW_CLASS
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getProperty
argument_list|(
name|ReflectionServiceFactoryBean
operator|.
name|MODE_OUT
argument_list|)
argument_list|)
condition|)
block|{
name|MessagePartInfo
name|mpi
init|=
name|o
operator|.
name|getInput
argument_list|()
operator|.
name|getMessagePart
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mpi
operator|!=
literal|null
condition|)
block|{
name|mpi
operator|.
name|setTypeClass
argument_list|(
name|rawClass
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setProperty
argument_list|(
name|GENERIC_TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|rawClass
argument_list|)
condition|)
block|{
name|mpi
operator|.
name|setProperty
argument_list|(
name|RAW_CLASS
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|QName
name|getServiceQName
parameter_list|()
block|{
return|return
name|getServiceQName
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|QName
name|getServiceQName
parameter_list|(
name|boolean
name|lookup
parameter_list|)
block|{
if|if
condition|(
name|serviceName
operator|==
literal|null
operator|&&
name|lookup
condition|)
block|{
name|serviceName
operator|=
operator|new
name|QName
argument_list|(
name|getServiceNamespace
argument_list|()
argument_list|,
name|getServiceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|serviceName
return|;
block|}
specifier|public
name|QName
name|getEndpointName
parameter_list|()
block|{
return|return
name|getEndpointName
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|QName
name|getEndpointName
parameter_list|(
name|boolean
name|lookup
parameter_list|)
block|{
if|if
condition|(
name|endpointName
operator|!=
literal|null
operator|||
operator|!
name|lookup
condition|)
block|{
return|return
name|endpointName
return|;
block|}
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|QName
name|name
init|=
name|c
operator|.
name|getEndpointName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|endpointName
operator|=
name|name
expr_stmt|;
return|return
name|name
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ServiceConfiguration must provide a value!"
argument_list|)
throw|;
block|}
specifier|public
name|EndpointInfo
name|getEndpointInfo
parameter_list|()
block|{
return|return
name|getService
argument_list|()
operator|.
name|getEndpointInfo
argument_list|(
name|getEndpointName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|setEndpointName
parameter_list|(
name|QName
name|en
parameter_list|)
block|{
name|this
operator|.
name|endpointName
operator|=
name|en
expr_stmt|;
block|}
specifier|protected
name|String
name|getServiceName
parameter_list|()
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|String
name|name
init|=
name|c
operator|.
name|getServiceName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
return|return
name|name
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ServiceConfiguration must provide a value!"
argument_list|)
throw|;
block|}
specifier|protected
name|String
name|getServiceNamespace
parameter_list|()
block|{
if|if
condition|(
name|serviceName
operator|!=
literal|null
condition|)
block|{
return|return
name|serviceName
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|String
name|name
init|=
name|c
operator|.
name|getServiceNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
return|return
name|name
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ServiceConfiguration must provide a value!"
argument_list|)
throw|;
block|}
specifier|public
name|QName
name|getInterfaceName
parameter_list|()
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|QName
name|name
init|=
name|c
operator|.
name|getInterfaceName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
return|return
name|name
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ServiceConfiguration must provide a value!"
argument_list|)
throw|;
block|}
specifier|protected
name|boolean
name|isValidMethod
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|)
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|Boolean
name|b
init|=
name|c
operator|.
name|isOperation
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isHolder
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|Boolean
name|b
init|=
name|c
operator|.
name|isHolder
argument_list|(
name|cls
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|Type
name|getHolderType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|)
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|Type
name|b
init|=
name|c
operator|.
name|getHolderType
argument_list|(
name|cls
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|boolean
name|isWrapped
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|)
block|{
name|Boolean
name|b
init|=
name|wrappedCache
operator|.
name|get
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isRPC
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|wrappedCache
operator|.
name|put
argument_list|(
name|method
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|b
operator|=
name|c
operator|.
name|isWrapped
argument_list|(
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|wrappedCache
operator|.
name|put
argument_list|(
name|method
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
name|wrappedCache
operator|.
name|put
argument_list|(
name|method
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
name|b
return|;
block|}
specifier|protected
name|boolean
name|isMatchOperation
parameter_list|(
name|String
name|methodNameInClass
parameter_list|,
name|String
name|methodNameInWsdl
parameter_list|)
block|{
comment|// TODO: This seems wrong and not sure who put it here. Will revisit -
comment|// DBD
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|String
name|initOfMethodInClass
init|=
name|methodNameInClass
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|initOfMethodInWsdl
init|=
name|methodNameInWsdl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|initOfMethodInClass
operator|.
name|equalsIgnoreCase
argument_list|(
name|initOfMethodInWsdl
argument_list|)
operator|&&
name|methodNameInClass
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|methodNameInClass
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|methodNameInWsdl
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|methodNameInWsdl
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|boolean
name|isOutParam
parameter_list|(
name|Method
name|method
parameter_list|,
name|int
name|j
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|Boolean
name|b
init|=
name|c
operator|.
name|isOutParam
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|boolean
name|isInParam
parameter_list|(
name|Method
name|method
parameter_list|,
name|int
name|j
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|Boolean
name|b
init|=
name|c
operator|.
name|isInParam
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|QName
name|getInputMessageName
parameter_list|(
specifier|final
name|OperationInfo
name|op
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|QName
name|q
init|=
name|c
operator|.
name|getInputMessageName
argument_list|(
name|op
argument_list|,
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
return|return
name|q
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ServiceConfiguration must provide a value!"
argument_list|)
throw|;
block|}
specifier|protected
name|QName
name|createOutputMessageName
parameter_list|(
specifier|final
name|OperationInfo
name|op
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|QName
name|q
init|=
name|c
operator|.
name|getOutputMessageName
argument_list|(
name|op
argument_list|,
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
return|return
name|q
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ServiceConfiguration must provide a value!"
argument_list|)
throw|;
block|}
specifier|protected
name|boolean
name|hasOutMessage
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|Boolean
name|b
init|=
name|c
operator|.
name|hasOutMessage
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|initializeFaults
parameter_list|(
specifier|final
name|InterfaceInfo
name|service
parameter_list|,
specifier|final
name|OperationInfo
name|op
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|)
block|{
comment|// Set up the fault messages
specifier|final
name|Class
index|[]
name|exceptionClasses
init|=
name|method
operator|.
name|getExceptionTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exceptionClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
name|exClazz
init|=
name|exceptionClasses
index|[
name|i
index|]
decl_stmt|;
comment|// Ignore XFireFaults because they don't need to be declared
if|if
condition|(
name|exClazz
operator|.
name|equals
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|||
name|Fault
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|exClazz
argument_list|)
operator|||
name|exClazz
operator|.
name|equals
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|)
operator|||
name|exClazz
operator|.
name|equals
argument_list|(
name|Throwable
operator|.
name|class
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|addFault
argument_list|(
name|service
argument_list|,
name|op
argument_list|,
name|exClazz
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|initializeDefaultInterceptors
parameter_list|()
block|{
name|super
operator|.
name|initializeDefaultInterceptors
argument_list|()
expr_stmt|;
name|initializeFaultInterceptors
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initializeFaultInterceptors
parameter_list|()
block|{
name|getService
argument_list|()
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FaultOutInterceptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|FaultInfo
name|addFault
parameter_list|(
specifier|final
name|InterfaceInfo
name|service
parameter_list|,
specifier|final
name|OperationInfo
name|op
parameter_list|,
name|Class
name|exClass
parameter_list|)
block|{
name|Class
name|beanClass
init|=
name|getBeanClass
argument_list|(
name|exClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanClass
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|QName
name|faultName
init|=
name|getFaultName
argument_list|(
name|service
argument_list|,
name|op
argument_list|,
name|exClass
argument_list|,
name|beanClass
argument_list|)
decl_stmt|;
name|FaultInfo
name|fi
init|=
name|op
operator|.
name|addFault
argument_list|(
operator|new
name|QName
argument_list|(
name|op
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|exClass
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|QName
argument_list|(
name|op
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|exClass
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fi
operator|.
name|setProperty
argument_list|(
name|Class
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|exClass
argument_list|)
expr_stmt|;
name|fi
operator|.
name|setProperty
argument_list|(
literal|"elementName"
argument_list|,
name|faultName
argument_list|)
expr_stmt|;
name|MessagePartInfo
name|mpi
init|=
name|fi
operator|.
name|addMessagePart
argument_list|(
operator|new
name|QName
argument_list|(
name|faultName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|exClass
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mpi
operator|.
name|setElementQName
argument_list|(
name|faultName
argument_list|)
expr_stmt|;
name|mpi
operator|.
name|setTypeClass
argument_list|(
name|beanClass
argument_list|)
expr_stmt|;
return|return
name|fi
return|;
block|}
specifier|protected
name|void
name|createFaultForException
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|exClass
parameter_list|,
name|FaultInfo
name|fi
parameter_list|)
block|{
name|Field
name|fields
index|[]
init|=
name|exClass
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
name|MessagePartInfo
name|mpi
init|=
name|fi
operator|.
name|addMessagePart
argument_list|(
operator|new
name|QName
argument_list|(
name|fi
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mpi
operator|.
name|setProperty
argument_list|(
name|Class
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MessagePartInfo
name|mpi
init|=
name|fi
operator|.
name|addMessagePart
argument_list|(
operator|new
name|QName
argument_list|(
name|fi
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"message"
argument_list|)
argument_list|)
decl_stmt|;
name|mpi
operator|.
name|setProperty
argument_list|(
name|Class
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|getBeanClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|exClass
parameter_list|)
block|{
if|if
condition|(
name|java
operator|.
name|rmi
operator|.
name|RemoteException
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|exClass
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|FaultInfoException
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|exClass
argument_list|)
condition|)
block|{
try|try
block|{
name|Method
name|m
init|=
name|exClass
operator|.
name|getMethod
argument_list|(
literal|"getFaultInfo"
argument_list|)
decl_stmt|;
return|return
name|m
operator|.
name|getReturnType
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceConstructionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|exClass
return|;
block|}
specifier|protected
name|QName
name|getFaultName
parameter_list|(
name|InterfaceInfo
name|service
parameter_list|,
name|OperationInfo
name|o
parameter_list|,
name|Class
name|exClass
parameter_list|,
name|Class
name|beanClass
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|QName
name|q
init|=
name|c
operator|.
name|getFaultName
argument_list|(
name|service
argument_list|,
name|o
argument_list|,
name|exClass
argument_list|,
name|beanClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
return|return
name|q
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ServiceConfiguration must provide a value!"
argument_list|)
throw|;
block|}
specifier|protected
name|String
name|getAction
parameter_list|(
name|OperationInfo
name|op
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|s
init|=
name|c
operator|.
name|getAction
argument_list|(
name|op
argument_list|,
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
return|return
literal|""
return|;
block|}
specifier|public
name|boolean
name|isHeader
parameter_list|(
name|Method
name|method
parameter_list|,
name|int
name|j
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|Boolean
name|b
init|=
name|c
operator|.
name|isHeader
argument_list|(
name|method
argument_list|,
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Creates a name for the operation from the method name. If an operation      * with that name already exists, a name is create by appending an integer      * to the end. I.e. if there is already two methods named      *<code>doSomething</code>, the first one will have an operation name of      * "doSomething" and the second "doSomething1".      *       * @param service      * @param method      */
specifier|protected
name|QName
name|getOperationName
parameter_list|(
name|InterfaceInfo
name|service
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|QName
name|s
init|=
name|c
operator|.
name|getOperationName
argument_list|(
name|service
argument_list|,
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ServiceConfiguration must provide a value!"
argument_list|)
throw|;
block|}
specifier|protected
name|boolean
name|isAsync
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|Boolean
name|b
init|=
name|c
operator|.
name|isAsync
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|QName
name|getInPartName
parameter_list|(
specifier|final
name|OperationInfo
name|op
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|int
name|paramNumber
parameter_list|)
block|{
if|if
condition|(
name|paramNumber
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|isWrapped
argument_list|(
name|method
argument_list|)
operator|&&
operator|!
name|isHeader
argument_list|(
name|method
argument_list|,
name|paramNumber
argument_list|)
condition|)
block|{
return|return
name|getInParameterName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|paramNumber
argument_list|)
return|;
block|}
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|QName
name|q
init|=
name|c
operator|.
name|getInPartName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|paramNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
return|return
name|q
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ServiceConfiguration must provide a value!"
argument_list|)
throw|;
block|}
specifier|protected
name|QName
name|getInParameterName
parameter_list|(
specifier|final
name|OperationInfo
name|op
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|int
name|paramNumber
parameter_list|)
block|{
if|if
condition|(
name|paramNumber
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|QName
name|q
init|=
name|c
operator|.
name|getInParameterName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|paramNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
return|return
name|q
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ServiceConfiguration must provide a value!"
argument_list|)
throw|;
block|}
specifier|protected
name|QName
name|getOutParameterName
parameter_list|(
specifier|final
name|OperationInfo
name|op
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|int
name|paramNumber
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|QName
name|q
init|=
name|c
operator|.
name|getOutParameterName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|paramNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
return|return
name|q
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ServiceConfiguration must provide a value!"
argument_list|)
throw|;
block|}
specifier|protected
name|QName
name|getOutPartName
parameter_list|(
specifier|final
name|OperationInfo
name|op
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|int
name|paramNumber
parameter_list|)
block|{
if|if
condition|(
name|isWrapped
argument_list|(
name|method
argument_list|)
condition|)
block|{
return|return
name|getOutParameterName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|paramNumber
argument_list|)
return|;
block|}
for|for
control|(
name|Iterator
name|itr
init|=
name|serviceConfigurations
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AbstractServiceConfiguration
name|c
init|=
operator|(
name|AbstractServiceConfiguration
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|QName
name|q
init|=
name|c
operator|.
name|getOutPartName
argument_list|(
name|op
argument_list|,
name|method
argument_list|,
name|paramNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
return|return
name|q
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ServiceConfiguration must provide a value!"
argument_list|)
throw|;
block|}
specifier|protected
name|Class
name|getResponseWrapper
parameter_list|(
name|Method
name|selected
parameter_list|)
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|Class
name|cls
init|=
name|c
operator|.
name|getResponseWrapper
argument_list|(
name|selected
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|!=
literal|null
condition|)
block|{
return|return
name|cls
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|String
name|getResponseWrapperClassName
parameter_list|(
name|Method
name|selected
parameter_list|)
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|String
name|cls
init|=
name|c
operator|.
name|getResponseWrapperClassName
argument_list|(
name|selected
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|!=
literal|null
condition|)
block|{
return|return
name|cls
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Class
name|getRequestWrapper
parameter_list|(
name|Method
name|selected
parameter_list|)
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|Class
name|cls
init|=
name|c
operator|.
name|getRequestWrapper
argument_list|(
name|selected
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|!=
literal|null
condition|)
block|{
return|return
name|cls
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|String
name|getRequestWrapperClassName
parameter_list|(
name|Method
name|selected
parameter_list|)
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|String
name|cls
init|=
name|c
operator|.
name|getRequestWrapperClassName
argument_list|(
name|selected
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|!=
literal|null
condition|)
block|{
return|return
name|cls
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isWrapperPartQualified
parameter_list|(
name|MessagePartInfo
name|mpi
parameter_list|)
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|Boolean
name|b
init|=
name|c
operator|.
name|isWrapperPartQualified
argument_list|(
name|mpi
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isWrapperPartNillable
parameter_list|(
name|MessagePartInfo
name|mpi
parameter_list|)
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|Boolean
name|b
init|=
name|c
operator|.
name|isWrapperPartNillable
argument_list|(
name|mpi
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|long
name|getWrapperPartMaxOccurs
parameter_list|(
name|MessagePartInfo
name|mpi
parameter_list|)
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|Long
name|b
init|=
name|c
operator|.
name|getWrapperPartMaxOccurs
argument_list|(
name|mpi
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
block|}
return|return
literal|1
return|;
block|}
specifier|public
name|long
name|getWrapperPartMinOccurs
parameter_list|(
name|MessagePartInfo
name|mpi
parameter_list|)
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|Long
name|b
init|=
name|c
operator|.
name|getWrapperPartMinOccurs
argument_list|(
name|mpi
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
block|}
return|return
literal|1
return|;
block|}
specifier|protected
name|MethodDispatcher
name|getMethodDispatcher
parameter_list|()
block|{
return|return
name|methodDispatcher
return|;
block|}
specifier|protected
name|void
name|setMethodDispatcher
parameter_list|(
name|MethodDispatcher
name|m
parameter_list|)
block|{
name|methodDispatcher
operator|=
name|m
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|AbstractServiceConfiguration
argument_list|>
name|getConfigurations
parameter_list|()
block|{
return|return
name|serviceConfigurations
return|;
block|}
specifier|public
name|void
name|setConfigurations
parameter_list|(
name|List
argument_list|<
name|AbstractServiceConfiguration
argument_list|>
name|configurations
parameter_list|)
block|{
name|this
operator|.
name|serviceConfigurations
operator|=
name|configurations
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getServiceClass
parameter_list|()
block|{
return|return
name|serviceClass
return|;
block|}
specifier|public
name|void
name|setServiceClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|serviceClass
parameter_list|)
block|{
name|this
operator|.
name|serviceClass
operator|=
name|serviceClass
expr_stmt|;
name|checkServiceClassAnnotations
argument_list|(
name|serviceClass
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|checkServiceClassAnnotations
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|sc
parameter_list|)
block|{
name|Annotation
name|anns
index|[]
init|=
name|serviceClass
operator|.
name|getAnnotations
argument_list|()
decl_stmt|;
if|if
condition|(
name|anns
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Annotation
name|ann
range|:
name|anns
control|)
block|{
name|String
name|pkg
init|=
name|ann
operator|.
name|annotationType
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"javax.xml.ws"
operator|.
name|equals
argument_list|(
name|pkg
argument_list|)
operator|||
literal|"javax.jws"
operator|.
name|equals
argument_list|(
name|pkg
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"JAXWS_ANNOTATION_FOUND"
argument_list|,
name|serviceClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
for|for
control|(
name|Method
name|m
range|:
name|serviceClass
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|anns
operator|=
name|m
operator|.
name|getAnnotations
argument_list|()
expr_stmt|;
if|if
condition|(
name|anns
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Annotation
name|ann
range|:
name|anns
control|)
block|{
name|String
name|pkg
init|=
name|ann
operator|.
name|annotationType
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"javax.xml.ws"
operator|.
name|equals
argument_list|(
name|pkg
argument_list|)
operator|||
literal|"javax.jws"
operator|.
name|equals
argument_list|(
name|pkg
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"JAXWS_ANNOTATION_FOUND"
argument_list|,
name|serviceClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|String
name|getWsdlURL
parameter_list|()
block|{
if|if
condition|(
name|wsdlURL
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|wsdlURL
operator|=
name|c
operator|.
name|getWsdlURL
argument_list|()
expr_stmt|;
if|if
condition|(
name|wsdlURL
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
literal|null
operator|==
name|wsdlURL
operator|&&
name|getBus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ServiceContractResolverRegistry
name|registry
init|=
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|ServiceContractResolverRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|registry
condition|)
block|{
name|URI
name|uri
init|=
name|registry
operator|.
name|getContractLocation
argument_list|(
name|this
operator|.
name|getServiceQName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|uri
condition|)
block|{
try|try
block|{
name|wsdlURL
operator|=
name|uri
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"resolve qname failed"
argument_list|,
name|this
operator|.
name|getServiceQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|wsdlURL
operator|!=
literal|null
condition|)
block|{
comment|// create a unique string so if its an interned string (like
comment|// from an annotation), caches will clear
name|wsdlURL
operator|=
operator|new
name|String
argument_list|(
name|wsdlURL
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|wsdlURL
return|;
block|}
specifier|public
name|void
name|setWsdlURL
parameter_list|(
name|String
name|wsdlURL
parameter_list|)
block|{
comment|// create a unique string so if its an interned string (like
comment|// from an annotation), caches will clear
name|this
operator|.
name|wsdlURL
operator|=
operator|new
name|String
argument_list|(
name|wsdlURL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setWsdlURL
parameter_list|(
name|URL
name|wsdlURL
parameter_list|)
block|{
name|this
operator|.
name|wsdlURL
operator|=
name|wsdlURL
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|AbstractServiceConfiguration
argument_list|>
name|getServiceConfigurations
parameter_list|()
block|{
return|return
name|serviceConfigurations
return|;
block|}
specifier|public
name|void
name|setServiceConfigurations
parameter_list|(
name|List
argument_list|<
name|AbstractServiceConfiguration
argument_list|>
name|serviceConfigurations
parameter_list|)
block|{
name|this
operator|.
name|serviceConfigurations
operator|=
name|serviceConfigurations
expr_stmt|;
block|}
specifier|public
name|void
name|setServiceName
parameter_list|(
name|QName
name|serviceName
parameter_list|)
block|{
name|this
operator|.
name|serviceName
operator|=
name|serviceName
expr_stmt|;
block|}
specifier|public
name|Invoker
name|getInvoker
parameter_list|()
block|{
return|return
name|invoker
return|;
block|}
specifier|public
name|void
name|setInvoker
parameter_list|(
name|Invoker
name|invoker
parameter_list|)
block|{
name|this
operator|.
name|invoker
operator|=
name|invoker
expr_stmt|;
block|}
specifier|public
name|Executor
name|getExecutor
parameter_list|()
block|{
return|return
name|executor
return|;
block|}
specifier|public
name|void
name|setExecutor
parameter_list|(
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getIgnoredClasses
parameter_list|()
block|{
return|return
name|ignoredClasses
return|;
block|}
specifier|public
name|void
name|setIgnoredClasses
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ignoredClasses
parameter_list|)
block|{
name|this
operator|.
name|ignoredClasses
operator|=
name|ignoredClasses
expr_stmt|;
block|}
specifier|protected
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getExtraClass
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isWrapped
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|wrappedStyle
operator|!=
literal|null
condition|)
block|{
name|defWrappedCache
operator|=
name|wrappedStyle
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|defWrappedCache
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|defWrappedCache
operator|=
name|c
operator|.
name|isWrapped
argument_list|()
expr_stmt|;
if|if
condition|(
name|defWrappedCache
operator|!=
literal|null
condition|)
block|{
return|return
name|defWrappedCache
return|;
block|}
block|}
name|defWrappedCache
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
return|return
name|defWrappedCache
return|;
block|}
specifier|public
name|String
name|getStyle
parameter_list|()
block|{
if|if
condition|(
name|styleCache
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|styleCache
operator|=
name|c
operator|.
name|getStyle
argument_list|()
expr_stmt|;
if|if
condition|(
name|styleCache
operator|!=
literal|null
condition|)
block|{
return|return
name|styleCache
return|;
block|}
block|}
name|styleCache
operator|=
literal|"document"
expr_stmt|;
block|}
return|return
name|styleCache
return|;
block|}
specifier|public
name|boolean
name|isRPC
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|Boolean
name|b
init|=
name|isRpcCache
operator|.
name|get
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|AbstractServiceConfiguration
name|c
range|:
name|serviceConfigurations
control|)
block|{
name|b
operator|=
name|c
operator|.
name|isRPC
argument_list|(
name|method
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|isRpcCache
operator|.
name|put
argument_list|(
name|method
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
name|b
operator|=
literal|"rpc"
operator|.
name|equals
argument_list|(
name|getStyle
argument_list|()
argument_list|)
expr_stmt|;
name|isRpcCache
operator|.
name|put
argument_list|(
name|method
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
specifier|public
name|void
name|setWrapped
parameter_list|(
name|boolean
name|style
parameter_list|)
block|{
name|this
operator|.
name|wrappedStyle
operator|=
name|style
expr_stmt|;
block|}
comment|/**      * Returns non-null if wrapped mode was explicitely disabled or enabled.      */
specifier|public
name|Boolean
name|getWrapped
parameter_list|()
block|{
return|return
name|this
operator|.
name|wrappedStyle
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Method
argument_list|>
name|getIgnoredMethods
parameter_list|()
block|{
return|return
name|ignoredMethods
return|;
block|}
specifier|public
name|void
name|setIgnoredMethods
parameter_list|(
name|List
argument_list|<
name|Method
argument_list|>
name|ignoredMethods
parameter_list|)
block|{
name|this
operator|.
name|ignoredMethods
operator|=
name|ignoredMethods
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|AbstractFeature
argument_list|>
name|getFeatures
parameter_list|()
block|{
return|return
name|features
return|;
block|}
specifier|public
name|void
name|setFeatures
parameter_list|(
name|List
argument_list|<
name|AbstractFeature
argument_list|>
name|f
parameter_list|)
block|{
name|this
operator|.
name|features
operator|=
name|f
expr_stmt|;
block|}
block|}
end_class

end_unit

